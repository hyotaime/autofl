[
  {
    "name": "AbstractCompiler.getInput#57",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getInput(com.google.javascript.rhino.InputId)",
    "snippet": "public abstract CompilerInput getInput(InputId inputId);",
    "begin_line": 57,
    "end_line": 57,
    "comment": "/** \n * Looks up an input (possibly an externs input) by input id. May return null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getSourceFileByName#62",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getSourceFileByName(java.lang.String)",
    "snippet": "abstract SourceFile getSourceFileByName(String sourceName);",
    "begin_line": 62,
    "end_line": 62,
    "comment": "/** \n * Looks up a source file by name. May return null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.newExternInput#70",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.newExternInput(java.lang.String)",
    "snippet": "abstract CompilerInput newExternInput(String name);",
    "begin_line": 70,
    "end_line": 70,
    "comment": "/** \n * Creates a new externs file.\n * @param name A name for the new externs file.\n * @throws IllegalArgumentException If the name of the externs file conflictswith a pre-existing externs file.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getModuleGraph#76",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getModuleGraph()",
    "snippet": "abstract JSModuleGraph getModuleGraph();",
    "begin_line": 76,
    "end_line": 76,
    "comment": "/** \n * Gets the module graph. May return null if there aren\u0027t at least two modules.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getInputsInOrder#82",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getInputsInOrder()",
    "snippet": "abstract List\u003cCompilerInput\u003e getInputsInOrder();",
    "begin_line": 82,
    "end_line": 82,
    "comment": "/** \n * Gets the inputs in the order in which they are being processed. Only for use by  {@code AbstractCompilerRunner}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getTypeRegistry#87",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getTypeRegistry()",
    "snippet": "public abstract JSTypeRegistry getTypeRegistry();",
    "begin_line": 87,
    "end_line": 87,
    "comment": "/** \n * Gets a central registry of type information from the compiled JS.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getTypedScopeCreator#92",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getTypedScopeCreator()",
    "snippet": "abstract ScopeCreator getTypedScopeCreator();",
    "begin_line": 92,
    "end_line": 92,
    "comment": "/** \n * Gets a memoized scope creator with type information.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getTopScope#97",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getTopScope()",
    "snippet": "public abstract Scope getTopScope();",
    "begin_line": 97,
    "end_line": 97,
    "comment": "/** \n * Gets the top scope.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.report#102",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.report(com.google.javascript.jscomp.JSError)",
    "snippet": "public abstract void report(JSError error);",
    "begin_line": 102,
    "end_line": 102,
    "comment": "/** \n * Report an error or warning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.throwInternalError#107",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.throwInternalError(java.lang.String, java.lang.Exception)",
    "snippet": "abstract void throwInternalError(String msg, Exception cause);",
    "begin_line": 107,
    "end_line": 107,
    "comment": "/** \n * Report an internal error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getCodingConvention#112",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getCodingConvention()",
    "snippet": "public abstract CodingConvention getCodingConvention();",
    "begin_line": 112,
    "end_line": 112,
    "comment": "/** \n * Gets the current coding convention.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.reportCodeChange#117",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.reportCodeChange()",
    "snippet": "public abstract void reportCodeChange();",
    "begin_line": 117,
    "end_line": 117,
    "comment": "/** \n * Report code changes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.addToDebugLog#122",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.addToDebugLog(java.lang.String)",
    "snippet": "abstract void addToDebugLog(String message);",
    "begin_line": 122,
    "end_line": 122,
    "comment": "/** \n * Logs a message under a central logger.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.setCssRenamingMap#127",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.setCssRenamingMap(com.google.javascript.jscomp.CssRenamingMap)",
    "snippet": "abstract void setCssRenamingMap(CssRenamingMap map);",
    "begin_line": 127,
    "end_line": 127,
    "comment": "/** \n * Sets the CssRenamingMap.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getCssRenamingMap#132",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getCssRenamingMap()",
    "snippet": "abstract CssRenamingMap getCssRenamingMap();",
    "begin_line": 132,
    "end_line": 132,
    "comment": "/** \n * Gets the CssRenamingMap.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getNodeForCodeInsertion#145",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getNodeForCodeInsertion(com.google.javascript.jscomp.JSModule)",
    "snippet": "abstract Node getNodeForCodeInsertion(JSModule module);",
    "begin_line": 145,
    "end_line": 145,
    "comment": "/** \n * Gets a suitable SCRIPT node to serve as a parent for code insertion. If {@code module} contains any inputs, the returned node will be the SCRIPTnode corresponding to its first input. If  {@code module} is empty, on theother hand, then the returned node will be the first SCRIPT node in a non-empty module that  {@code module} depends on (the deepest one possible).\n * @param module A module. If null, will return the first SCRIPT node of allmodules.\n * @return A SCRIPT node (never null).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getTypeValidator#150",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getTypeValidator()",
    "snippet": "abstract TypeValidator getTypeValidator();",
    "begin_line": 150,
    "end_line": 150,
    "comment": "/** \n * Gets the central registry of type violations.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.parseSyntheticCode#155",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.parseSyntheticCode(java.lang.String)",
    "snippet": "abstract Node parseSyntheticCode(String code);",
    "begin_line": 155,
    "end_line": 155,
    "comment": "/** \n * Parses code for injecting.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.parseSyntheticCode#160",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.parseSyntheticCode(java.lang.String, java.lang.String)",
    "snippet": "abstract Node parseSyntheticCode(String filename, String code);",
    "begin_line": 160,
    "end_line": 160,
    "comment": "/** \n * Parses code for injecting, and associate it with a given source file.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.parseTestCode#165",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.parseTestCode(java.lang.String)",
    "snippet": "abstract Node parseTestCode(String code);",
    "begin_line": 165,
    "end_line": 165,
    "comment": "/** \n * Parses code for testing.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.toSource#170",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.toSource(com.google.javascript.rhino.Node)",
    "snippet": "abstract String toSource(Node root);",
    "begin_line": 170,
    "end_line": 170,
    "comment": "/** \n * Prints a node to source code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getDefaultErrorReporter#175",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getDefaultErrorReporter()",
    "snippet": "abstract ErrorReporter getDefaultErrorReporter();",
    "begin_line": 175,
    "end_line": 175,
    "comment": "/** \n * Gets a default error reporter for injecting into Rhino.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getReverseAbstractInterpreter#180",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getReverseAbstractInterpreter()",
    "snippet": "public abstract ReverseAbstractInterpreter getReverseAbstractInterpreter();",
    "begin_line": 180,
    "end_line": 180,
    "comment": "/** \n * Get an interpreter for type analysis.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getLifeCycleStage#185",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getLifeCycleStage()",
    "snippet": "LifeCycleStage getLifeCycleStage() {\n    return stage;\n  }",
    "begin_line": 185,
    "end_line": 187,
    "comment": "/** \n * @return The current life-cycle stage of the AST we\u0027re working on.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getUniqueNameIdSupplier#192",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getUniqueNameIdSupplier()",
    "snippet": "abstract Supplier\u003cString\u003e getUniqueNameIdSupplier();",
    "begin_line": 192,
    "end_line": 192,
    "comment": "/** \n * Generates unique ids.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.hasHaltingErrors#198",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.hasHaltingErrors()",
    "snippet": "abstract boolean hasHaltingErrors();",
    "begin_line": 198,
    "end_line": 198,
    "comment": "/** \n * @return Whether any errors have been encountered thatshould stop the compilation process.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.addChangeHandler#203",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.addChangeHandler(com.google.javascript.jscomp.CodeChangeHandler)",
    "snippet": "abstract void addChangeHandler(CodeChangeHandler handler);",
    "begin_line": 203,
    "end_line": 203,
    "comment": "/** \n * Register a listener for code change events.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.removeChangeHandler#208",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.removeChangeHandler(com.google.javascript.jscomp.CodeChangeHandler)",
    "snippet": "abstract void removeChangeHandler(CodeChangeHandler handler);",
    "begin_line": 208,
    "end_line": 208,
    "comment": "/** \n * Remove a listener for code change events.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.isIdeMode#213",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.isIdeMode()",
    "snippet": "abstract boolean isIdeMode();",
    "begin_line": 213,
    "end_line": 213,
    "comment": "/** \n * Returns true if compiling in IDE mode.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.acceptEcmaScript5#218",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.acceptEcmaScript5()",
    "snippet": "abstract boolean acceptEcmaScript5();",
    "begin_line": 218,
    "end_line": 218,
    "comment": "/** \n * @return Whether the compiler is in ES5Mode.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.acceptConstKeyword#223",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.acceptConstKeyword()",
    "snippet": "abstract boolean acceptConstKeyword();",
    "begin_line": 223,
    "end_line": 223,
    "comment": "/** \n * @return Whether the compiler accepts `const\u0027 keyword.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getParserConfig#228",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getParserConfig()",
    "snippet": "abstract Config getParserConfig();",
    "begin_line": 228,
    "end_line": 228,
    "comment": "/** \n * Returns the parser configuration.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.isTypeCheckingEnabled#233",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.isTypeCheckingEnabled()",
    "snippet": "abstract boolean isTypeCheckingEnabled();",
    "begin_line": 233,
    "end_line": 233,
    "comment": "/** \n * Returns true if type checking is enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.prepareAst#240",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.prepareAst(com.google.javascript.rhino.Node)",
    "snippet": "abstract void prepareAst(Node root);",
    "begin_line": 240,
    "end_line": 240,
    "comment": "/** \n * Normalizes the types of AST nodes in the given tree, and annotates any nodes to which the coding convention applies so that passes can read the annotations instead of using the coding convention.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getErrorManager#245",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getErrorManager()",
    "snippet": "abstract public ErrorManager getErrorManager();",
    "begin_line": 245,
    "end_line": 245,
    "comment": "/** \n * Gets the error manager.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.setLifeCycleStage#250",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.setLifeCycleStage(com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage)",
    "snippet": "void setLifeCycleStage(LifeCycleStage stage) {\n    this.stage \u003d stage;\n  }",
    "begin_line": 250,
    "end_line": 252,
    "comment": "/** \n * Set the current life-cycle state.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.areNodesEqualForInlining#258",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.areNodesEqualForInlining(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "abstract boolean areNodesEqualForInlining(Node n1, Node n2);",
    "begin_line": 258,
    "end_line": 258,
    "comment": "/** \n * Are the nodes equal for the purpose of inlining? If type aware optimizations are on, type equality is checked.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.setHasRegExpGlobalReferences#265",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.setHasRegExpGlobalReferences(boolean)",
    "snippet": "abstract void setHasRegExpGlobalReferences(boolean references);",
    "begin_line": 265,
    "end_line": 265,
    "comment": "/** \n * Set if RegExp global properties are used.\n * @param references Whether there are references to the RegExp global objectproperties.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.hasRegExpGlobalReferences#271",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.hasRegExpGlobalReferences()",
    "snippet": "abstract boolean hasRegExpGlobalReferences();",
    "begin_line": 271,
    "end_line": 271,
    "comment": "/** \n * @return Whether the AST contains references to the RegExp global objectproperties.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getErrorLevel#276",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getErrorLevel(com.google.javascript.jscomp.JSError)",
    "snippet": "abstract CheckLevel getErrorLevel(JSError error);",
    "begin_line": 276,
    "end_line": 276,
    "comment": "/** \n * @return The error level the given error object will be reported at.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.isNormalized#289",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.isNormalized()",
    "snippet": "boolean isNormalized() {\n      return this \u003d\u003d NORMALIZED || this \u003d\u003d NORMALIZED_OBFUSCATED;\n    }",
    "begin_line": 289,
    "end_line": 291,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.isNormalizedUnobfuscated#293",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.isNormalizedUnobfuscated()",
    "snippet": "boolean isNormalizedUnobfuscated() {\n      return this \u003d\u003d NORMALIZED;\n    }",
    "begin_line": 293,
    "end_line": 295,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.isNormalizedObfuscated#297",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.isNormalizedObfuscated()",
    "snippet": "boolean isNormalizedObfuscated() {\n      return this \u003d\u003d NORMALIZED_OBFUSCATED;\n    }",
    "begin_line": 297,
    "end_line": 299,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.process#306",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.process(com.google.javascript.jscomp.CompilerPass)",
    "snippet": "abstract void process(CompilerPass pass);",
    "begin_line": 306,
    "end_line": 306,
    "comment": "/** \n * Runs a given compiler-pass by calling its  {@code process()} method.\n * @param pass The pass to be run.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getRoot#311",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getRoot()",
    "snippet": "abstract Node getRoot();",
    "begin_line": 311,
    "end_line": 311,
    "comment": "/** \n * Returns the root node of the AST, which includes both externs and source.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.updateGlobalVarReferences#326",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.updateGlobalVarReferences(java.util.Map\u003ccom.google.javascript.jscomp.Scope.Var,com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection\u003e, com.google.javascript.rhino.Node)",
    "snippet": "abstract void updateGlobalVarReferences(Map\u003cVar, ReferenceCollection\u003e\n      refMapPatch, Node collectionRoot);",
    "begin_line": 326,
    "end_line": 327,
    "comment": "/** \n * Updates the list of references for variables in global scope.\n * @param refMapPatch Maps each variable to all of its references; may containreferences collected from the whole AST or only a SCRIPT sub-tree.\n * @param collectionRoot The root of sub-tree in which reference collectionhas been done. This should either be a SCRIPT node (if collection is done on a single file) or it is assumed that collection is on full AST.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getGlobalVarReferences#335",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getGlobalVarReferences()",
    "snippet": "abstract GlobalVarReferenceMap getGlobalVarReferences();",
    "begin_line": 335,
    "end_line": 335,
    "comment": "/** \n * This can be used to get the list of all references to all global variables based on all previous calls to  {@code updateGlobalVarReferences}.\n * @return The reference collection map associated to global scope variable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getSynthesizedExternsInput#341",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getSynthesizedExternsInput()",
    "snippet": "abstract CompilerInput getSynthesizedExternsInput();",
    "begin_line": 341,
    "end_line": 341,
    "comment": "/** \n * @return a CompilerInput that can be modified to add addition externdefinitions;\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getProgress#349",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getProgress()",
    "snippet": "public abstract double getProgress();",
    "begin_line": 349,
    "end_line": 349,
    "comment": "/** \n * @return a number in [0,1] range indicating an approximate progress of thelast compile. Note this should only be used as a hint and no assumptions should be made on accuracy, even a completed compile may choose not to set this to 1.0 at the end.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getLastPassName#354",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getLastPassName()",
    "snippet": "abstract String getLastPassName();",
    "begin_line": 354,
    "end_line": 354,
    "comment": "/** \n * Gets the last pass name set by setProgress.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.setProgress#362",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.setProgress(double, java.lang.String)",
    "snippet": "abstract void setProgress(double progress, @Nullable String lastPassName);",
    "begin_line": 362,
    "end_line": 362,
    "comment": "/** \n * Sets the progress percentage as well as the name of the last pass that ran (if available).\n * @param progress A precentage expressed as a double in the range [0, 1].Use -1 if you just want to set the last pass name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.ensureLibraryInjected#377",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.ensureLibraryInjected(java.lang.String)",
    "snippet": "abstract Node ensureLibraryInjected(String resourceName);",
    "begin_line": 377,
    "end_line": 377,
    "comment": "/** \n * The subdir js/ contains libraries of code that we inject at compile-time only if requested by this function. Notice that these libraries will almost always create global symbols.\n * @param resourceName The name of the library. For example, if \"base\" isis specified, then we load js/base.js\n * @return If new code was injected, returns the last expression node of thelibrary. If the caller needs to add additional code, they should add it as the next sibling of this node. If new code was not injected, returns null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.setOldParseTree#384",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.setOldParseTree(java.lang.String, AstRoot)",
    "snippet": "abstract void setOldParseTree(String sourceName, AstRoot astRoot);",
    "begin_line": 384,
    "end_line": 384,
    "comment": "/** \n * Stores the old parse tree for a given source file.\n * @param sourceName\n * @param astRoot\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCompiler.getOldParseTreeByName#391",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractCompiler.java",
    "class_name": "com.google.javascript.jscomp.AbstractCompiler",
    "signature": "com.google.javascript.jscomp.AbstractCompiler.getOldParseTreeByName(java.lang.String)",
    "snippet": "abstract AstRoot getOldParseTreeByName(String sourceName);",
    "begin_line": 391,
    "end_line": 391,
    "comment": "/** \n * Gets an old format parse tree for a given source file.\n * @param sourceName The source file name to get the tree for.\n * @return The old format parse tree for the given source file.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractMessageFormatter.AbstractMessageFormatter#32",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractMessageFormatter.java",
    "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
    "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.AbstractMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider)",
    "snippet": "public AbstractMessageFormatter(SourceExcerptProvider source) {\n    this.source \u003d source;\n  }",
    "begin_line": 32,
    "end_line": 34,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractMessageFormatter.setColorize#36",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractMessageFormatter.java",
    "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
    "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.setColorize(boolean)",
    "snippet": "public void setColorize(boolean colorize) {\n    this.colorize \u003d colorize;\n  }",
    "begin_line": 36,
    "end_line": 38,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractMessageFormatter.getSource#43",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractMessageFormatter.java",
    "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
    "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.getSource()",
    "snippet": "protected final SourceExcerptProvider getSource() {\n    return source;\n  }",
    "begin_line": 43,
    "end_line": 45,
    "comment": "/** \n * Get the source excerpt provider.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractMessageFormatter.termSupportsColor#53",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractMessageFormatter.java",
    "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
    "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.termSupportsColor(java.lang.String)",
    "snippet": "static boolean termSupportsColor(String term) {\n    return SUPPORTED_COLOR_TERMINALS.contains(term);\n  }",
    "begin_line": 53,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractMessageFormatter.Color#64",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractMessageFormatter.java",
    "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
    "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.Color(java.lang.String)",
    "snippet": " Color(String controlCharacter) {\n      this.controlCharacter \u003d controlCharacter;\n    }",
    "begin_line": 64,
    "end_line": 66,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractMessageFormatter.getControlCharacter#68",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractMessageFormatter.java",
    "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
    "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.getControlCharacter()",
    "snippet": "public String getControlCharacter() {\n      return controlCharacter;\n    }",
    "begin_line": 68,
    "end_line": 70,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractMessageFormatter.getLevelName#73",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractMessageFormatter.java",
    "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
    "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.getLevelName(com.google.javascript.jscomp.CheckLevel)",
    "snippet": "String getLevelName(CheckLevel level) {\n    switch (level) {\n      case ERROR: return maybeColorize(\"ERROR\", Color.ERROR);\n      case WARNING: return maybeColorize(\"WARNING\", Color.WARNING);\n      default: return level.toString();\n    }\n  }",
    "begin_line": 73,
    "end_line": 79,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractMessageFormatter.maybeColorize#81",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AbstractMessageFormatter.java",
    "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
    "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.maybeColorize(java.lang.String, com.google.javascript.jscomp.AbstractMessageFormatter.Color)",
    "snippet": "private String maybeColorize(String text, Color color) {\n    if (!colorize) return text;\n\n    return color.getControlCharacter() +\n        text + Color.RESET.getControlCharacter();\n  }",
    "begin_line": 81,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.AnonymousFunctionNamingPolicy#47",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
    "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
    "signature": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.AnonymousFunctionNamingPolicy(char[])",
    "snippet": " AnonymousFunctionNamingPolicy(char[] reservedCharacters) {\n    this.reservedCharacters \u003d reservedCharacters;\n  }",
    "begin_line": 47,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.getReservedCharacters#56",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
    "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
    "signature": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.getReservedCharacters()",
    "snippet": "public char[] getReservedCharacters() {\n    // TODO(user) - for MAPPED, only the first character is reserved which\n    // can be used to further optimize\n    return reservedCharacters;\n  }",
    "begin_line": 56,
    "end_line": 60,
    "comment": "/** \n * Gets characters that are reserved for use in anonymous function names and can\u0027t be used in variable or property names.\n * @return reserved characters or null if no characters are reserved\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicErrorManager.report#45",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/BasicErrorManager.java",
    "class_name": "com.google.javascript.jscomp.BasicErrorManager",
    "signature": "com.google.javascript.jscomp.BasicErrorManager.report(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
    "snippet": "@Override\n  public void report(CheckLevel level, JSError error) {\n    if (messages.add(new ErrorWithLevel(error, level))) {\n      if (level \u003d\u003d CheckLevel.ERROR) {\n        errorCount++;\n      } else if (level \u003d\u003d CheckLevel.WARNING) {\n        warningCount++;\n      }\n    }\n  }",
    "begin_line": 45,
    "end_line": 53,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicErrorManager.generateReport#56",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/BasicErrorManager.java",
    "class_name": "com.google.javascript.jscomp.BasicErrorManager",
    "signature": "com.google.javascript.jscomp.BasicErrorManager.generateReport()",
    "snippet": "@Override\n  public void generateReport() {\n    for (ErrorWithLevel message : messages) {\n      println(message.level, message.error);\n    }\n    printSummary();\n  }",
    "begin_line": 56,
    "end_line": 61,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicErrorManager.println#67",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/BasicErrorManager.java",
    "class_name": "com.google.javascript.jscomp.BasicErrorManager",
    "signature": "com.google.javascript.jscomp.BasicErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
    "snippet": "public abstract void println(CheckLevel level, JSError error);",
    "begin_line": 67,
    "end_line": 67,
    "comment": "/** \n * Print a message with a trailing new line. This method is called by the {@link #generateReport()} method when generating messages.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicErrorManager.printSummary#72",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/BasicErrorManager.java",
    "class_name": "com.google.javascript.jscomp.BasicErrorManager",
    "signature": "com.google.javascript.jscomp.BasicErrorManager.printSummary()",
    "snippet": "protected abstract void printSummary();",
    "begin_line": 72,
    "end_line": 72,
    "comment": "/** \n * Print the summary of the compilation - number of errors and warnings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicErrorManager.getErrorCount#75",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/BasicErrorManager.java",
    "class_name": "com.google.javascript.jscomp.BasicErrorManager",
    "signature": "com.google.javascript.jscomp.BasicErrorManager.getErrorCount()",
    "snippet": "@Override\n  public int getErrorCount() {\n    return errorCount;\n  }",
    "begin_line": 75,
    "end_line": 77,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicErrorManager.getWarningCount#80",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/BasicErrorManager.java",
    "class_name": "com.google.javascript.jscomp.BasicErrorManager",
    "signature": "com.google.javascript.jscomp.BasicErrorManager.getWarningCount()",
    "snippet": "@Override\n  public int getWarningCount() {\n    return warningCount;\n  }",
    "begin_line": 80,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicErrorManager.getErrors#85",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/BasicErrorManager.java",
    "class_name": "com.google.javascript.jscomp.BasicErrorManager",
    "signature": "com.google.javascript.jscomp.BasicErrorManager.getErrors()",
    "snippet": "@Override\n  public JSError[] getErrors() {\n    return toArray(CheckLevel.ERROR);\n  }",
    "begin_line": 85,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicErrorManager.getWarnings#90",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/BasicErrorManager.java",
    "class_name": "com.google.javascript.jscomp.BasicErrorManager",
    "signature": "com.google.javascript.jscomp.BasicErrorManager.getWarnings()",
    "snippet": "@Override\n  public JSError[] getWarnings() {\n    return toArray(CheckLevel.WARNING);\n  }",
    "begin_line": 90,
    "end_line": 92,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicErrorManager.setTypedPercent#95",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/BasicErrorManager.java",
    "class_name": "com.google.javascript.jscomp.BasicErrorManager",
    "signature": "com.google.javascript.jscomp.BasicErrorManager.setTypedPercent(double)",
    "snippet": "@Override\n  public void setTypedPercent(double typedPercent) {\n    this.typedPercent \u003d typedPercent;\n  }",
    "begin_line": 95,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicErrorManager.getTypedPercent#100",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/BasicErrorManager.java",
    "class_name": "com.google.javascript.jscomp.BasicErrorManager",
    "signature": "com.google.javascript.jscomp.BasicErrorManager.getTypedPercent()",
    "snippet": "@Override\n  public double getTypedPercent() {\n    return typedPercent;\n  }",
    "begin_line": 100,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicErrorManager.toArray#104",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/BasicErrorManager.java",
    "class_name": "com.google.javascript.jscomp.BasicErrorManager",
    "signature": "com.google.javascript.jscomp.BasicErrorManager.toArray(com.google.javascript.jscomp.CheckLevel)",
    "snippet": "private JSError[] toArray(CheckLevel level) {\n    List\u003cJSError\u003e errors \u003d new ArrayList\u003cJSError\u003e(messages.size());\n    for (ErrorWithLevel p : messages) {\n      if (p.level \u003d\u003d level) {\n        errors.add(p.error);\n      }\n    }\n    return errors.toArray(new JSError[errors.size()]);\n  }",
    "begin_line": 104,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LeveledJSErrorComparator.compare#129",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/BasicErrorManager.java",
    "class_name": "com.google.javascript.jscomp.BasicErrorManager",
    "signature": "com.google.javascript.jscomp.BasicErrorManager.compare(com.google.javascript.jscomp.BasicErrorManager.ErrorWithLevel, com.google.javascript.jscomp.BasicErrorManager.ErrorWithLevel)",
    "snippet": "@Override\n    public int compare(ErrorWithLevel p1, ErrorWithLevel p2) {\n      // null is the smallest value\n      if (p2 \u003d\u003d null) {\n        if (p1 \u003d\u003d null) {\n          return 0;\n        } else {\n          return P1_GT_P2;\n        }\n      }\n\n      // check level\n      if (p1.level !\u003d p2.level) {\n        return p2.level.compareTo(p1.level);\n      }\n\n      // sourceName comparison\n      String source1 \u003d p1.error.sourceName;\n      String source2 \u003d p2.error.sourceName;\n      if (source1 !\u003d null \u0026\u0026 source2 !\u003d null) {\n        int sourceCompare \u003d source1.compareTo(source2);\n        if (sourceCompare !\u003d 0) {\n          return sourceCompare;\n        }\n      } else if (source1 \u003d\u003d null \u0026\u0026 source2 !\u003d null) {\n        return P1_LT_P2;\n      } else if (source1 !\u003d null \u0026\u0026 source2 \u003d\u003d null) {\n        return P1_GT_P2;\n      }\n      // lineno comparison\n      int lineno1 \u003d p1.error.lineNumber;\n      int lineno2 \u003d p2.error.lineNumber;\n      if (lineno1 !\u003d lineno2) {\n        return lineno1 - lineno2;\n      } else if (lineno1 \u003c 0 \u0026\u0026 0 \u003c\u003d lineno2) {\n        return P1_LT_P2;\n      } else if (0 \u003c\u003d lineno1 \u0026\u0026 lineno2 \u003c 0) {\n        return P1_GT_P2;\n      }\n      // charno comparison\n      int charno1 \u003d p1.error.getCharno();\n      int charno2 \u003d p2.error.getCharno();\n      if (charno1 !\u003d charno2) {\n        return charno1 - charno2;\n      } else if (charno1 \u003c 0 \u0026\u0026 0 \u003c\u003d charno2) {\n        return P1_LT_P2;\n      } else if (0 \u003c\u003d charno1 \u0026\u0026 charno2 \u003c 0) {\n        return P1_GT_P2;\n      }\n      // description\n      return p1.error.description.compareTo(p2.error.description);\n    }",
    "begin_line": 129,
    "end_line": 179,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorWithLevel.ErrorWithLevel#186",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/BasicErrorManager.java",
    "class_name": "com.google.javascript.jscomp.BasicErrorManager",
    "signature": "com.google.javascript.jscomp.BasicErrorManager.ErrorWithLevel(com.google.javascript.jscomp.JSError, com.google.javascript.jscomp.CheckLevel)",
    "snippet": " ErrorWithLevel(JSError error, CheckLevel level) {\n      this.error \u003d error;\n      this.level \u003d level;\n    }",
    "begin_line": 186,
    "end_line": 189,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.CheckAccessControls#117",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.CheckAccessControls(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": " CheckAccessControls(AbstractCompiler compiler) {\n    this.compiler \u003d compiler;\n    this.validator \u003d compiler.getTypeValidator();\n    this.initializedConstantProperties \u003d HashMultimap.create();\n  }",
    "begin_line": 117,
    "end_line": 121,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.process#124",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n  }",
    "begin_line": 124,
    "end_line": 126,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.hotSwapScript#129",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.hotSwapScript(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n    NodeTraversal.traverse(compiler, scriptRoot, this);\n  }",
    "begin_line": 129,
    "end_line": 131,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.enterScope#134",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.enterScope(com.google.javascript.jscomp.NodeTraversal)",
    "snippet": "@Override\n  public void enterScope(NodeTraversal t) {\n    if (!t.inGlobalScope()) {\n      Node n \u003d t.getScopeRoot();\n      Node parent \u003d n.getParent();\n      if (isDeprecatedFunction(n, parent)) {\n        deprecatedDepth++;\n      }\n\n      if (methodDepth \u003d\u003d 0) {\n        currentClass \u003d getClassOfMethod(n, parent);\n      }\n      methodDepth++;\n    }\n  }",
    "begin_line": 134,
    "end_line": 147,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.exitScope#150",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.exitScope(com.google.javascript.jscomp.NodeTraversal)",
    "snippet": "@Override\n  public void exitScope(NodeTraversal t) {\n    if (!t.inGlobalScope()) {\n      Node n \u003d t.getScopeRoot();\n      Node parent \u003d n.getParent();\n      if (isDeprecatedFunction(n, parent)) {\n        deprecatedDepth--;\n      }\n\n      methodDepth--;\n      if (methodDepth \u003d\u003d 0) {\n        currentClass \u003d null;\n      }\n    }\n  }",
    "begin_line": 150,
    "end_line": 163,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.getClassOfMethod#169",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.getClassOfMethod(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private JSType getClassOfMethod(Node n, Node parent) {\n    if (parent.isAssign()) {\n      Node lValue \u003d parent.getFirstChild();\n      if (NodeUtil.isGet(lValue)) {\n        // We have an assignment of the form \"a.b \u003d ...\".\n        JSType lValueType \u003d lValue.getJSType();\n        if (lValueType !\u003d null \u0026\u0026 lValueType.isNominalConstructor()) {\n          // If a.b is a constructor, then everything in this function\n          // belongs to the \"a.b\" type.\n          return (lValueType.toMaybeFunctionType()).getInstanceType();\n        } else {\n          // If a.b is not a constructor, then treat this as a method\n          // of whatever type is on \"a\".\n          return normalizeClassType(lValue.getFirstChild().getJSType());\n        }\n      } else {\n        // We have an assignment of the form \"a \u003d ...\", so pull the\n        // type off the \"a\".\n        return normalizeClassType(lValue.getJSType());\n      }\n    } else if (NodeUtil.isFunctionDeclaration(n) ||\n               parent.isName()) {\n      return normalizeClassType(n.getJSType());\n    }\n\n    return null;\n  }",
    "begin_line": 169,
    "end_line": 195,
    "comment": "/** \n * Gets the type of the class that \"owns\" a method, or null if we know that its un-owned.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.normalizeClassType#201",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.normalizeClassType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private JSType normalizeClassType(JSType type) {\n    if (type \u003d\u003d null || type.isUnknownType()) {\n      return type;\n    } else if (type.isNominalConstructor()) {\n      return (type.toMaybeFunctionType()).getInstanceType();\n    } else if (type.isFunctionPrototypeType()) {\n      FunctionType owner \u003d ((ObjectType) type).getOwnerFunction();\n      if (owner.isConstructor()) {\n        return owner.getInstanceType();\n      }\n    }\n    return type;\n  }",
    "begin_line": 201,
    "end_line": 213,
    "comment": "/** \n * Normalize the type of a constructor, its instance, and its prototype all down to the same type (the instance type).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.shouldTraverse#216",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    return true;\n  }",
    "begin_line": 216,
    "end_line": 218,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.visit#221",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.NAME:\n        checkNameDeprecation(t, n, parent);\n        checkNameVisibility(t, n, parent);\n        break;\n      case Token.GETPROP:\n        checkPropertyDeprecation(t, n, parent);\n        checkPropertyVisibility(t, n, parent);\n        checkConstantProperty(t, n);\n        break;\n      case Token.NEW:\n        checkConstructorDeprecation(t, n, parent);\n        break;\n    }\n  }",
    "begin_line": 221,
    "end_line": 236,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.checkConstructorDeprecation#241",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.checkConstructorDeprecation(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private void checkConstructorDeprecation(NodeTraversal t, Node n,\n      Node parent) {\n    JSType type \u003d n.getJSType();\n\n    if (type !\u003d null) {\n      String deprecationInfo \u003d getTypeDeprecationInfo(type);\n\n      if (deprecationInfo !\u003d null \u0026\u0026\n          shouldEmitDeprecationWarning(t, n, parent)) {\n\n        if (!deprecationInfo.isEmpty()) {\n            compiler.report(\n                t.makeError(n, DEPRECATED_CLASS_REASON,\n                    type.toString(), deprecationInfo));\n        } else {\n          compiler.report(\n              t.makeError(n, DEPRECATED_CLASS, type.toString()));\n        }\n      }\n    }\n  }",
    "begin_line": 241,
    "end_line": 261,
    "comment": "/** \n * Checks the given NEW node to ensure that access restrictions are obeyed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.checkNameDeprecation#266",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.checkNameDeprecation(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private void checkNameDeprecation(NodeTraversal t, Node n, Node parent) {\n    // Don\u0027t bother checking definitions or constructors.\n    if (parent.isFunction() || parent.isVar() ||\n        parent.isNew()) {\n      return;\n    }\n\n    Scope.Var var \u003d t.getScope().getVar(n.getString());\n    JSDocInfo docInfo \u003d var \u003d\u003d null ? null : var.getJSDocInfo();\n\n    if (docInfo !\u003d null \u0026\u0026 docInfo.isDeprecated() \u0026\u0026\n        shouldEmitDeprecationWarning(t, n, parent)) {\n\n      if (docInfo.getDeprecationReason() !\u003d null) {\n        compiler.report(\n            t.makeError(n, DEPRECATED_NAME_REASON, n.getString(),\n                docInfo.getDeprecationReason()));\n      } else {\n        compiler.report(\n            t.makeError(n, DEPRECATED_NAME, n.getString()));\n      }\n    }\n  }",
    "begin_line": 266,
    "end_line": 288,
    "comment": "/** \n * Checks the given NAME node to ensure that access restrictions are obeyed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.checkPropertyDeprecation#294",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.checkPropertyDeprecation(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private void checkPropertyDeprecation(NodeTraversal t, Node n, Node parent) {\n    // Don\u0027t bother checking constructors.\n    if (parent.isNew()) {\n      return;\n    }\n\n    ObjectType objectType \u003d\n        ObjectType.cast(dereference(n.getFirstChild().getJSType()));\n    String propertyName \u003d n.getLastChild().getString();\n\n    if (objectType !\u003d null) {\n      String deprecationInfo\n          \u003d getPropertyDeprecationInfo(objectType, propertyName);\n\n      if (deprecationInfo !\u003d null \u0026\u0026\n          shouldEmitDeprecationWarning(t, n, parent)) {\n\n        if (!deprecationInfo.isEmpty()) {\n          compiler.report(\n              t.makeError(n, DEPRECATED_PROP_REASON, propertyName,\n                  validator.getReadableJSTypeName(n.getFirstChild(), true),\n                  deprecationInfo));\n        } else {\n          compiler.report(\n              t.makeError(n, DEPRECATED_PROP, propertyName,\n                  validator.getReadableJSTypeName(n.getFirstChild(), true)));\n        }\n      }\n    }\n  }",
    "begin_line": 294,
    "end_line": 323,
    "comment": "/** \n * Checks the given GETPROP node to ensure that access restrictions are obeyed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.checkNameVisibility#330",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.checkNameVisibility(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private void checkNameVisibility(NodeTraversal t, Node name, Node parent) {\n    Var var \u003d t.getScope().getVar(name.getString());\n    if (var !\u003d null) {\n      JSDocInfo docInfo \u003d var.getJSDocInfo();\n      if (docInfo !\u003d null) {\n        // If a name is private, make sure that we\u0027re in the same file.\n        Visibility visibility \u003d docInfo.getVisibility();\n        if (visibility \u003d\u003d Visibility.PRIVATE) {\n          StaticSourceFile varSrc \u003d var.getSourceFile();\n          StaticSourceFile refSrc \u003d name.getStaticSourceFile();\n          if (varSrc !\u003d null \u0026\u0026\n              refSrc !\u003d null \u0026\u0026\n              !varSrc.getName().equals(refSrc.getName())) {\n            if (docInfo.isConstructor() \u0026\u0026\n                isValidPrivateConstructorAccess(parent)) {\n              return;\n            }\n\n            compiler.report(\n                t.makeError(name, BAD_PRIVATE_GLOBAL_ACCESS,\n                    name.getString(), varSrc.getName()));\n          }\n        }\n      }\n    }\n  }",
    "begin_line": 330,
    "end_line": 355,
    "comment": "/** \n * Determines whether the given name is visible in the current context.\n * @param t The current traversal.\n * @param name The name node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.checkConstantProperty#362",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.checkConstantProperty(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void checkConstantProperty(NodeTraversal t,\n      Node getprop) {\n    // Check whether the property is modified\n    Node parent \u003d getprop.getParent();\n    boolean isDelete \u003d parent.isDelProp();\n    if (!(NodeUtil.isAssignmentOp(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d getprop)\n        \u0026\u0026 !parent.isInc() \u0026\u0026 !parent.isDec()\n        \u0026\u0026 !isDelete) {\n      return;\n    }\n\n    ObjectType objectType \u003d\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName \u003d getprop.getLastChild().getString();\n\n    boolean isConstant \u003d isPropertyDeclaredConstant(objectType, propertyName);\n\n    // Check whether constant properties are reassigned\n    if (isConstant) {\n      if (isDelete) {\n        compiler.report(\n            t.makeError(getprop, CONST_PROPERTY_DELETED, propertyName));\n        return;\n      }\n\n      ObjectType oType \u003d objectType;\n      while (oType !\u003d null) {\n        if (oType.hasReferenceName()) {\n          if (initializedConstantProperties.containsEntry(\n                  oType.getReferenceName(), propertyName)) {\n            compiler.report(\n                t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE,\n                    propertyName));\n            break;\n          }\n        }\n        oType \u003d oType.getImplicitPrototype();\n      }\n\n      Preconditions.checkState(objectType.hasReferenceName());\n      initializedConstantProperties.put(objectType.getReferenceName(),\n          propertyName);\n\n      // Add the prototype when we\u0027re looking at an instance object\n      if (objectType.isInstanceType()) {\n        ObjectType prototype \u003d objectType.getImplicitPrototype();\n        if (prototype !\u003d null) {\n          if (prototype.hasProperty(propertyName)\n              \u0026\u0026 prototype.hasReferenceName()) {\n            initializedConstantProperties.put(prototype.getReferenceName(),\n                propertyName);\n          }\n        }\n      }\n    }\n  }",
    "begin_line": 362,
    "end_line": 417,
    "comment": "/** \n * Determines whether the given property with @const tag got reassigned\n * @param t The current traversal.\n * @param getprop The getprop node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.checkPropertyVisibility#424",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.checkPropertyVisibility(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private void checkPropertyVisibility(NodeTraversal t,\n      Node getprop, Node parent) {\n    ObjectType objectType \u003d\n        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName \u003d getprop.getLastChild().getString();\n\n    if (objectType !\u003d null) {\n      // Is this a normal property access, or are we trying to override\n      // an existing property?\n      boolean isOverride \u003d parent.getJSDocInfo() !\u003d null \u0026\u0026\n          parent.isAssign() \u0026\u0026\n          parent.getFirstChild() \u003d\u003d getprop;\n\n      // Find the lowest property defined on a class with visibility\n      // information.\n      if (isOverride) {\n        objectType \u003d objectType.getImplicitPrototype();\n      }\n      JSDocInfo docInfo \u003d null;\n      for (; objectType !\u003d null;\n           objectType \u003d objectType.getImplicitPrototype()) {\n        docInfo \u003d objectType.getOwnPropertyJSDocInfo(propertyName);\n        if (docInfo !\u003d null \u0026\u0026\n            docInfo.getVisibility() !\u003d Visibility.INHERITED) {\n          break;\n        }\n      }\n\n      if (objectType \u003d\u003d null) {\n        // We couldn\u0027t find a visibility modifier; assume it\u0027s public.\n        return;\n      }\n\n      String referenceSource \u003d getprop.getSourceFileName();\n      String definingSource \u003d docInfo.getSourceName();\n      boolean sameInput \u003d referenceSource !\u003d null\n          \u0026\u0026 referenceSource.equals(definingSource);\n      Visibility visibility \u003d docInfo.getVisibility();\n      JSType ownerType \u003d normalizeClassType(objectType);\n      if (isOverride) {\n        // Check an ASSIGN statement that\u0027s trying to override a property\n        // on a superclass.\n        JSDocInfo overridingInfo \u003d parent.getJSDocInfo();\n        Visibility overridingVisibility \u003d overridingInfo \u003d\u003d null ?\n            Visibility.INHERITED : overridingInfo.getVisibility();\n\n        // Check that (a) the property *can* be overridden, and\n        // (b) that the visibility of the override is the same as the\n        // visibility of the original property.\n        if (visibility \u003d\u003d Visibility.PRIVATE \u0026\u0026 !sameInput) {\n          compiler.report(\n              t.makeError(getprop, PRIVATE_OVERRIDE,\n                  objectType.toString()));\n        } else if (overridingVisibility !\u003d Visibility.INHERITED \u0026\u0026\n            overridingVisibility !\u003d visibility) {\n          compiler.report(\n              t.makeError(getprop, VISIBILITY_MISMATCH,\n                  visibility.name(), objectType.toString(),\n                  overridingVisibility.name()));\n        }\n      } else {\n        if (sameInput) {\n          // private access is always allowed in the same file.\n          return;\n        } else if (visibility \u003d\u003d Visibility.PRIVATE \u0026\u0026\n            (currentClass \u003d\u003d null || !ownerType.isEquivalentTo(currentClass))) {\n          if (docInfo.isConstructor() \u0026\u0026\n              isValidPrivateConstructorAccess(parent)) {\n            return;\n          }\n\n          // private access is not allowed outside the file from a different\n          // enclosing class.\n          compiler.report(\n              t.makeError(getprop,\n                  BAD_PRIVATE_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        } else if (visibility \u003d\u003d Visibility.PROTECTED) {\n          // There are 3 types of legal accesses of a protected property:\n          // 1) Accesses in the same file\n          // 2) Overriding the property in a subclass\n          // 3) Accessing the property from inside a subclass\n          // The first two have already been checked for.\n          if (currentClass \u003d\u003d null || !currentClass.isSubtype(ownerType)) {\n            compiler.report(\n                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n                    propertyName,\n                    validator.getReadableJSTypeName(\n                        getprop.getFirstChild(), true)));\n          }\n        }\n      }\n    }\n  }",
    "begin_line": 424,
    "end_line": 519,
    "comment": "/** \n * Determines whether the given property is visible in the current context.\n * @param t The current traversal.\n * @param getprop The getprop node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.isValidPrivateConstructorAccess#535",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.isValidPrivateConstructorAccess(com.google.javascript.rhino.Node)",
    "snippet": "private static boolean isValidPrivateConstructorAccess(Node parent) {\n    return !parent.isNew();\n  }",
    "begin_line": 535,
    "end_line": 537,
    "comment": "/** \n * Whether the given access of a private constructor is legal. For example, new PrivateCtor_(); // not legal PrivateCtor_.newInstance(); // legal x instanceof PrivateCtor_ // legal This is a weird special case, because our visibility system is inherited from Java, and JavaScript has no distinction between classes and constructors like Java does. We may want to revisit this if we decide to make the restrictions tighter.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.shouldEmitDeprecationWarning#545",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.shouldEmitDeprecationWarning(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private boolean shouldEmitDeprecationWarning(\n      NodeTraversal t, Node n, Node parent) {\n    // In the global scope, there are only two kinds of accesses that should\n    // be flagged for warnings:\n    // 1) Calls of deprecated functions and methods.\n    // 2) Instantiations of deprecated classes.\n    // For now, we just let everything else by.\n    if (t.inGlobalScope()) {\n      if (!((parent.isCall() \u0026\u0026 parent.getFirstChild() \u003d\u003d n) ||\n              n.isNew())) {\n        return false;\n      }\n    }\n\n    // We can always assign to a deprecated property, to keep it up to date.\n    if (n.isGetProp() \u0026\u0026 n \u003d\u003d parent.getFirstChild() \u0026\u0026\n        NodeUtil.isAssignmentOp(parent)) {\n      return false;\n    }\n\n    return !canAccessDeprecatedTypes(t);\n  }",
    "begin_line": 545,
    "end_line": 566,
    "comment": "/** \n * Determines whether a deprecation warning should be emitted.\n * @param t The current traversal.\n * @param n The node which we are checking.\n * @param parent The parent of the node which we are checking.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.canAccessDeprecatedTypes#578",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.canAccessDeprecatedTypes(com.google.javascript.jscomp.NodeTraversal)",
    "snippet": "private boolean canAccessDeprecatedTypes(NodeTraversal t) {\n    Node scopeRoot \u003d t.getScopeRoot();\n    Node scopeRootParent \u003d scopeRoot.getParent();\n    return\n      // Case #1\n      (deprecatedDepth \u003e 0) ||\n      // Case #2\n      (getTypeDeprecationInfo(t.getScope().getTypeOfThis()) !\u003d null) ||\n        // Case #3\n      (scopeRootParent !\u003d null \u0026\u0026 scopeRootParent.isAssign() \u0026\u0026\n       getTypeDeprecationInfo(\n           getClassOfMethod(scopeRoot, scopeRootParent)) !\u003d null);\n  }",
    "begin_line": 578,
    "end_line": 590,
    "comment": "/** \n * Returns whether it\u0027s currently OK to access deprecated names and properties. There are 3 exceptions when we\u0027re allowed to use a deprecated type or property: 1) When we\u0027re in a deprecated function. 2) When we\u0027re in a deprecated class. 3) When we\u0027re in a static method of a deprecated class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.isDeprecatedFunction#595",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.isDeprecatedFunction(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private static boolean isDeprecatedFunction(Node n, Node parent) {\n    if (n.isFunction()) {\n      JSType type \u003d n.getJSType();\n      if (type !\u003d null) {\n        return getTypeDeprecationInfo(type) !\u003d null;\n      }\n    }\n\n    return false;\n  }",
    "begin_line": 595,
    "end_line": 604,
    "comment": "/** \n * Returns whether this is a function node annotated as deprecated.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.getTypeDeprecationInfo#611",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.getTypeDeprecationInfo(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private static String getTypeDeprecationInfo(JSType type) {\n    if (type \u003d\u003d null) {\n      return null;\n    }\n\n    JSDocInfo info \u003d type.getJSDocInfo();\n    if (info !\u003d null \u0026\u0026 info.isDeprecated()) {\n      if (info.getDeprecationReason() !\u003d null) {\n        return info.getDeprecationReason();\n      }\n      return \"\";\n    }\n    ObjectType objType \u003d ObjectType.cast(type);\n    if (objType !\u003d null) {\n      ObjectType implicitProto \u003d objType.getImplicitPrototype();\n      if (implicitProto !\u003d null) {\n        return getTypeDeprecationInfo(implicitProto);\n      }\n    }\n    return null;\n  }",
    "begin_line": 611,
    "end_line": 631,
    "comment": "/** \n * Returns the deprecation reason for the type if it is marked as being deprecated. Returns empty string if the type is deprecated but no reason was given. Returns null if the type is not deprecated.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.isPropertyDeclaredConstant#636",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.isPropertyDeclaredConstant(com.google.javascript.rhino.jstype.ObjectType, java.lang.String)",
    "snippet": "private static boolean isPropertyDeclaredConstant(\n      ObjectType objectType, String prop) {\n    for (;\n         // Only objects with reference names can have constant properties.\n         objectType !\u003d null \u0026\u0026 objectType.hasReferenceName();\n\n         objectType \u003d objectType.getImplicitPrototype()) {\n      JSDocInfo docInfo \u003d objectType.getOwnPropertyJSDocInfo(prop);\n      if (docInfo !\u003d null \u0026\u0026 docInfo.isConstant()) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "begin_line": 636,
    "end_line": 649,
    "comment": "/** \n * Returns if a property is declared constant.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.getPropertyDeprecationInfo#656",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.getPropertyDeprecationInfo(com.google.javascript.rhino.jstype.ObjectType, java.lang.String)",
    "snippet": "private static String getPropertyDeprecationInfo(ObjectType type,\n                                                   String prop) {\n    JSDocInfo info \u003d type.getOwnPropertyJSDocInfo(prop);\n    if (info !\u003d null \u0026\u0026 info.isDeprecated()) {\n      if (info.getDeprecationReason() !\u003d null) {\n        return info.getDeprecationReason();\n      }\n\n      return \"\";\n    }\n    ObjectType implicitProto \u003d type.getImplicitPrototype();\n    if (implicitProto !\u003d null) {\n      return getPropertyDeprecationInfo(implicitProto, prop);\n    }\n    return null;\n  }",
    "begin_line": 656,
    "end_line": 671,
    "comment": "/** \n * Returns the deprecation reason for the property if it is marked as being deprecated. Returns empty string if the property is deprecated but no reason was given. Returns null if the property is not deprecated.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckAccessControls.dereference#676",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckAccessControls.java",
    "class_name": "com.google.javascript.jscomp.CheckAccessControls",
    "signature": "com.google.javascript.jscomp.CheckAccessControls.dereference(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private static JSType dereference(JSType type) {\n    return type \u003d\u003d null ? null : type.dereference();\n  }",
    "begin_line": 676,
    "end_line": 678,
    "comment": "/** \n * Dereference a type, autoboxing it and filtering out null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckDebuggerStatement.CheckDebuggerStatement#40",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckDebuggerStatement.java",
    "class_name": "com.google.javascript.jscomp.CheckDebuggerStatement",
    "signature": "com.google.javascript.jscomp.CheckDebuggerStatement.CheckDebuggerStatement(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "public CheckDebuggerStatement(AbstractCompiler compiler) {\n    this.compiler \u003d compiler;\n  }",
    "begin_line": 40,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckDebuggerStatement.process#45",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckDebuggerStatement.java",
    "class_name": "com.google.javascript.jscomp.CheckDebuggerStatement",
    "signature": "com.google.javascript.jscomp.CheckDebuggerStatement.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n  }",
    "begin_line": 45,
    "end_line": 47,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckDebuggerStatement.visit#50",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckDebuggerStatement.java",
    "class_name": "com.google.javascript.jscomp.CheckDebuggerStatement",
    "signature": "com.google.javascript.jscomp.CheckDebuggerStatement.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isDebugger()) {\n      t.report(n, DEBUGGER_STATEMENT_PRESENT);\n    }\n  }",
    "begin_line": 50,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckGlobalNames.CheckGlobalNames#63",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckGlobalNames.java",
    "class_name": "com.google.javascript.jscomp.CheckGlobalNames",
    "signature": "com.google.javascript.jscomp.CheckGlobalNames.CheckGlobalNames(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.CheckLevel)",
    "snippet": " CheckGlobalNames(AbstractCompiler compiler, CheckLevel level) {\n    this.compiler \u003d compiler;\n    this.convention \u003d compiler.getCodingConvention();\n    this.level \u003d level;\n  }",
    "begin_line": 63,
    "end_line": 67,
    "comment": "/** \n * Creates a pass to check global name references at the given warning level.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckGlobalNames.injectNamespace#73",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckGlobalNames.java",
    "class_name": "com.google.javascript.jscomp.CheckGlobalNames",
    "signature": "com.google.javascript.jscomp.CheckGlobalNames.injectNamespace(com.google.javascript.jscomp.GlobalNamespace)",
    "snippet": "CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n    Preconditions.checkArgument(namespace.hasExternsRoot());\n    this.namespace \u003d namespace;\n    return this;\n  }",
    "begin_line": 73,
    "end_line": 77,
    "comment": "/** \n * Injects a pre-computed global namespace, so that the same namespace can be re-used for multiple check passes. Returns this for easy chaining.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckGlobalNames.process#80",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckGlobalNames.java",
    "class_name": "com.google.javascript.jscomp.CheckGlobalNames",
    "signature": "com.google.javascript.jscomp.CheckGlobalNames.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void process(Node externs, Node root) {\n    if (namespace \u003d\u003d null) {\n      namespace \u003d new GlobalNamespace(compiler, externs, root);\n    }\n\n    // Find prototype properties that will affect our analysis.\n    Preconditions.checkState(namespace.hasExternsRoot());\n    findPrototypeProps(\"Object\", objectPrototypeProps);\n    findPrototypeProps(\"Function\", functionPrototypeProps);\n    objectPrototypeProps.addAll(\n        convention.getIndirectlyDeclaredProperties());\n\n    for (Name name : namespace.getNameForest()) {\n      // Skip extern names. Externs are often not runnable as real code,\n      // and will do things like:\n      // var x;\n      // x.method;\n      // which this check forbids.\n      if (name.inExterns) {\n        continue;\n      }\n\n      checkDescendantNames(name, name.globalSets + name.localSets \u003e 0);\n    }\n  }",
    "begin_line": 80,
    "end_line": 104,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckGlobalNames.findPrototypeProps#106",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckGlobalNames.java",
    "class_name": "com.google.javascript.jscomp.CheckGlobalNames",
    "signature": "com.google.javascript.jscomp.CheckGlobalNames.findPrototypeProps(java.lang.String, java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "private void findPrototypeProps(String type, Set\u003cString\u003e props) {\n    Name slot \u003d namespace.getSlot(type);\n    if (slot !\u003d null) {\n      for (Ref ref : slot.getRefs()) {\n        if (ref.type \u003d\u003d Ref.Type.PROTOTYPE_GET) {\n          Node fullName \u003d ref.getNode().getParent().getParent();\n          if (fullName.isGetProp()) {\n            props.add(fullName.getLastChild().getString());\n          }\n        }\n      }\n    }\n  }",
    "begin_line": 106,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckGlobalNames.checkDescendantNames#128",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckGlobalNames.java",
    "class_name": "com.google.javascript.jscomp.CheckGlobalNames",
    "signature": "com.google.javascript.jscomp.CheckGlobalNames.checkDescendantNames(com.google.javascript.jscomp.GlobalNamespace.Name, boolean)",
    "snippet": "private void checkDescendantNames(Name name, boolean nameIsDefined) {\n    if (name.props !\u003d null) {\n      for (Name prop : name.props) {\n        // if the ancestor of a property is not defined, then we should emit\n        // warnings for all references to the property.\n        boolean propIsDefined \u003d false;\n        if (nameIsDefined) {\n          // if the ancestor of a property is defined, then let\u0027s check that\n          // the property is also explicitly defined if it needs to be.\n          propIsDefined \u003d (!propertyMustBeInitializedByFullName(prop) ||\n              prop.globalSets + prop.localSets \u003e 0);\n        }\n\n        validateName(prop, propIsDefined);\n        checkDescendantNames(prop, propIsDefined);\n      }\n    }\n  }",
    "begin_line": 128,
    "end_line": 145,
    "comment": "/** \n * Checks to make sure all the descendants of a name are defined if they are referenced.\n * @param name A global name.\n * @param nameIsDefined If true, {@code name} is defined. Otherwise, it\u0027sundefined, and any references to descendant names should emit warnings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckGlobalNames.validateName#147",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckGlobalNames.java",
    "class_name": "com.google.javascript.jscomp.CheckGlobalNames",
    "signature": "com.google.javascript.jscomp.CheckGlobalNames.validateName(com.google.javascript.jscomp.GlobalNamespace.Name, boolean)",
    "snippet": "private void validateName(Name name, boolean isDefined) {\n    // If the name is not defined, emit warnings for each reference. While\n    // we\u0027re looking through each reference, check all the module dependencies.\n    Ref declaration \u003d name.getDeclaration();\n    Name parent \u003d name.parent;\n\n    JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n    for (Ref ref : name.getRefs()) {\n      // Don\u0027t worry about global exprs.\n      boolean isGlobalExpr \u003d ref.getNode().getParent().isExprResult();\n\n      if (!isDefined \u0026\u0026 !isTypedef(ref)) {\n        if (!isGlobalExpr) {\n          reportRefToUndefinedName(name, ref);\n        }\n      } else if (declaration !\u003d null \u0026\u0026\n          ref.getModule() !\u003d declaration.getModule() \u0026\u0026\n          !moduleGraph.dependsOn(\n              ref.getModule(), declaration.getModule())) {\n        reportBadModuleReference(name, ref);\n      } else {\n        // Check for late references.\n        if (ref.scope.isGlobal()) {\n          // Prototype references are special, because in our reference graph,\n          // A.prototype counts as a reference to A.\n          boolean isPrototypeGet \u003d (ref.type \u003d\u003d Ref.Type.PROTOTYPE_GET);\n          Name owner \u003d isPrototypeGet ? name : parent;\n          boolean singleGlobalParentDecl \u003d\n              owner !\u003d null \u0026\u0026\n              owner.getDeclaration() !\u003d null \u0026\u0026\n              owner.localSets \u003d\u003d 0;\n\n          if (singleGlobalParentDecl \u0026\u0026\n              owner.getDeclaration().preOrderIndex \u003e ref.preOrderIndex) {\n            String refName \u003d isPrototypeGet\n                ? name.getFullName() + \".prototype\"\n                : name.getFullName();\n            compiler.report(\n                JSError.make(ref.source.getName(), ref.node,\n                    NAME_DEFINED_LATE_WARNING,\n                    refName,\n                    owner.getFullName(),\n                    owner.getDeclaration().source.getName(),\n                    String.valueOf(owner.getDeclaration().node.getLineno())));\n          }\n        }\n      }\n    }\n  }",
    "begin_line": 147,
    "end_line": 195,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckGlobalNames.isTypedef#197",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckGlobalNames.java",
    "class_name": "com.google.javascript.jscomp.CheckGlobalNames",
    "signature": "com.google.javascript.jscomp.CheckGlobalNames.isTypedef(com.google.javascript.jscomp.GlobalNamespace.Ref)",
    "snippet": "private boolean isTypedef(Ref ref) {\n    // If this is an annotated EXPR-GET, don\u0027t do anything.\n    Node parent \u003d ref.node.getParent();\n    if (parent.isExprResult()) {\n      JSDocInfo info \u003d ref.node.getJSDocInfo();\n      if (info !\u003d null \u0026\u0026 info.hasTypedefType()) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "begin_line": 197,
    "end_line": 207,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckGlobalNames.reportBadModuleReference#209",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckGlobalNames.java",
    "class_name": "com.google.javascript.jscomp.CheckGlobalNames",
    "signature": "com.google.javascript.jscomp.CheckGlobalNames.reportBadModuleReference(com.google.javascript.jscomp.GlobalNamespace.Name, com.google.javascript.jscomp.GlobalNamespace.Ref)",
    "snippet": "private void reportBadModuleReference(Name name, Ref ref) {\n    compiler.report(\n        JSError.make(ref.source.getName(), ref.node, STRICT_MODULE_DEP_QNAME,\n                     ref.getModule().getName(),\n                     name.getDeclaration().getModule().getName(),\n                     name.getFullName()));\n  }",
    "begin_line": 209,
    "end_line": 215,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckGlobalNames.reportRefToUndefinedName#217",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckGlobalNames.java",
    "class_name": "com.google.javascript.jscomp.CheckGlobalNames",
    "signature": "com.google.javascript.jscomp.CheckGlobalNames.reportRefToUndefinedName(com.google.javascript.jscomp.GlobalNamespace.Name, com.google.javascript.jscomp.GlobalNamespace.Ref)",
    "snippet": "private void reportRefToUndefinedName(Name name, Ref ref) {\n    // grab the highest undefined ancestor to output in the warning message.\n    while (name.parent !\u003d null \u0026\u0026\n           name.parent.globalSets + name.parent.localSets \u003d\u003d 0) {\n      name \u003d name.parent;\n    }\n\n    compiler.report(\n        JSError.make(ref.getSourceName(), ref.node, level,\n            UNDEFINED_NAME_WARNING, name.getFullName()));\n  }",
    "begin_line": 217,
    "end_line": 227,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckGlobalNames.propertyMustBeInitializedByFullName#233",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckGlobalNames.java",
    "class_name": "com.google.javascript.jscomp.CheckGlobalNames",
    "signature": "com.google.javascript.jscomp.CheckGlobalNames.propertyMustBeInitializedByFullName(com.google.javascript.jscomp.GlobalNamespace.Name)",
    "snippet": "private boolean propertyMustBeInitializedByFullName(Name name) {\n    // If an object or function literal in the global namespace is never\n    // aliased, then its properties can only come from one of 2 places:\n    // 1) From its prototype chain, or\n    // 2) From an assignment to its fully qualified name.\n    // If we assume #1 is not the case, then #2 implies that its\n    // properties must all be modeled in the GlobalNamespace as well.\n    //\n    // We assume that for global object literals and types (constructors and\n    // interfaces), we can find all the properties inherited from the prototype\n    // chain of functions and objects.\n    if (name.parent \u003d\u003d null) {\n      return false;\n    }\n\n    boolean parentIsAliased \u003d false;\n    if (name.parent.aliasingGets \u003e 0) {\n      for (Ref ref : name.parent.getRefs()) {\n        if (ref.type \u003d\u003d Ref.Type.ALIASING_GET) {\n          Node aliaser \u003d ref.getNode().getParent();\n\n          // We don\u0027t need to worry about known aliased, because\n          // they\u0027re already covered by the getIndirectlyDeclaredProperties\n          // call at the top.\n          boolean isKnownAlias \u003d\n              aliaser.isCall() \u0026\u0026\n              (convention.getClassesDefinedByCall(aliaser) !\u003d null ||\n               convention.getSingletonGetterClassName(aliaser) !\u003d null);\n          if (!isKnownAlias) {\n            parentIsAliased \u003d true;\n          }\n        }\n      }\n    }\n\n    if (parentIsAliased) {\n      return false;\n    }\n\n    if (objectPrototypeProps.contains(name.getBaseName())) {\n      return false;\n    }\n\n    if (name.parent.type \u003d\u003d Name.Type.OBJECTLIT) {\n      return true;\n    }\n\n    if (name.parent.type \u003d\u003d Name.Type.FUNCTION \u0026\u0026\n        name.parent.isDeclaredType() \u0026\u0026\n        !functionPrototypeProps.contains(name.getBaseName())) {\n      return true;\n    }\n\n    return false;\n  }",
    "begin_line": 233,
    "end_line": 287,
    "comment": "/** \n * Checks whether the given name is a property, and whether that property must be initialized with its full qualified name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckGlobalThis.CheckGlobalThis#71",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckGlobalThis.java",
    "class_name": "com.google.javascript.jscomp.CheckGlobalThis",
    "signature": "com.google.javascript.jscomp.CheckGlobalThis.CheckGlobalThis(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": " CheckGlobalThis(AbstractCompiler compiler) {\n    this.compiler \u003d compiler;\n  }",
    "begin_line": 71,
    "end_line": 73,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckGlobalThis.shouldTraverse#80",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckGlobalThis.java",
    "class_name": "com.google.javascript.jscomp.CheckGlobalThis",
    "signature": "com.google.javascript.jscomp.CheckGlobalThis.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.isFunction()) {\n      // Don\u0027t traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n      if (jsDoc !\u003d null \u0026\u0026\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don\u0027t traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a \u003d function() { }; // or\n      // function a() {} // or\n      // a.x \u003d function() {}; // or\n      // var a \u003d {x: function() {}};\n      int pType \u003d parent.getType();\n      if (!(pType \u003d\u003d Token.BLOCK ||\n            pType \u003d\u003d Token.SCRIPT ||\n            pType \u003d\u003d Token.NAME ||\n            pType \u003d\u003d Token.ASSIGN ||\n\n            // object literal keys\n            pType \u003d\u003d Token.STRING_KEY)) {\n        return false;\n      }\n\n      // Don\u0027t traverse functions that are getting lent to a prototype.\n      Node gramps \u003d parent.getParent();\n      if (NodeUtil.isObjectLitKey(parent, gramps)) {\n        JSDocInfo maybeLends \u003d gramps.getJSDocInfo();\n        if (maybeLends !\u003d null \u0026\u0026\n            maybeLends.getLendsName() !\u003d null \u0026\u0026\n            maybeLends.getLendsName().endsWith(\".prototype\")) {\n          return false;\n        }\n      }\n    }\n\n    if (parent !\u003d null \u0026\u0026 parent.isAssign()) {\n      Node lhs \u003d parent.getFirstChild();\n      Node rhs \u003d lhs.getNext();\n\n      if (n \u003d\u003d lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a \u003d this).property \u003d c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild \u003d\u003d null) {\n          assignLhsChild \u003d lhs;\n        }\n      } else {\n        // Only traverse the right side if it\u0027s not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.isGetProp() \u0026\u0026\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs \u003d lhs.getFirstChild();\n          if (llhs.isGetProp() \u0026\u0026\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }",
    "begin_line": 80,
    "end_line": 152,
    "comment": "/** \n * Since this pass reports errors only when a global  {@code this} keywordis encountered, there is no reason to traverse non global contexts.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckGlobalThis.visit#155",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckGlobalThis.java",
    "class_name": "com.google.javascript.jscomp.CheckGlobalThis",
    "signature": "com.google.javascript.jscomp.CheckGlobalThis.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isThis() \u0026\u0026 shouldReportThis(n, parent)) {\n      compiler.report(t.makeError(n, GLOBAL_THIS));\n    }\n    if (n \u003d\u003d assignLhsChild) {\n      assignLhsChild \u003d null;\n    }\n  }",
    "begin_line": 155,
    "end_line": 162,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckGlobalThis.shouldReportThis#164",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckGlobalThis.java",
    "class_name": "com.google.javascript.jscomp.CheckGlobalThis",
    "signature": "com.google.javascript.jscomp.CheckGlobalThis.shouldReportThis(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private boolean shouldReportThis(Node n, Node parent) {\n    if (assignLhsChild !\u003d null) {\n      // Always report a THIS on the left side of an assign.\n      return true;\n    }\n\n    // Also report a THIS with a property access.\n    return parent !\u003d null \u0026\u0026 NodeUtil.isGet(parent);\n  }",
    "begin_line": 164,
    "end_line": 172,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckGlobalThis.getFunctionJsDocInfo#184",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckGlobalThis.java",
    "class_name": "com.google.javascript.jscomp.CheckGlobalThis",
    "signature": "com.google.javascript.jscomp.CheckGlobalThis.getFunctionJsDocInfo(com.google.javascript.rhino.Node)",
    "snippet": "private JSDocInfo getFunctionJsDocInfo(Node n) {\n    JSDocInfo jsDoc \u003d n.getJSDocInfo();\n    Node parent \u003d n.getParent();\n    if (jsDoc \u003d\u003d null) {\n      int parentType \u003d parent.getType();\n      if (parentType \u003d\u003d Token.NAME || parentType \u003d\u003d Token.ASSIGN) {\n        jsDoc \u003d parent.getJSDocInfo();\n        if (jsDoc \u003d\u003d null \u0026\u0026 parentType \u003d\u003d Token.NAME) {\n          Node gramps \u003d parent.getParent();\n          if (gramps.isVar()) {\n            jsDoc \u003d gramps.getJSDocInfo();\n          }\n        }\n      }\n    }\n    return jsDoc;\n  }",
    "begin_line": 184,
    "end_line": 200,
    "comment": "/** \n * Gets a function\u0027s JSDoc information, if it has any. Checks for a few patterns (ellipses show where JSDoc would be): \u003cpre\u003e ... function() {} ... x \u003d function() {}; var ... x \u003d function() {}; ... var x \u003d function() {}; \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.isOn#29",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckLevel.java",
    "class_name": "com.google.javascript.jscomp.CheckLevel",
    "signature": "com.google.javascript.jscomp.CheckLevel.isOn()",
    "snippet": "boolean isOn() {\n    return this !\u003d OFF;\n  }",
    "begin_line": 29,
    "end_line": 31,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckProvides.CheckProvides#41",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckProvides.java",
    "class_name": "com.google.javascript.jscomp.CheckProvides",
    "signature": "com.google.javascript.jscomp.CheckProvides.CheckProvides(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.CheckLevel)",
    "snippet": " CheckProvides(AbstractCompiler compiler, CheckLevel checkLevel) {\n    this.compiler \u003d compiler;\n    this.checkLevel \u003d checkLevel;\n    this.codingConvention \u003d compiler.getCodingConvention();\n  }",
    "begin_line": 41,
    "end_line": 45,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckProvides.process#48",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckProvides.java",
    "class_name": "com.google.javascript.jscomp.CheckProvides",
    "signature": "com.google.javascript.jscomp.CheckProvides.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void process(Node externs, Node root) {\n    hotSwapScript(root, null);\n  }",
    "begin_line": 48,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckProvides.hotSwapScript#53",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckProvides.java",
    "class_name": "com.google.javascript.jscomp.CheckProvides",
    "signature": "com.google.javascript.jscomp.CheckProvides.hotSwapScript(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n    CheckProvidesCallback callback \u003d\n        new CheckProvidesCallback(codingConvention);\n    new NodeTraversal(compiler, callback).traverse(scriptRoot);\n  }",
    "begin_line": 53,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckProvidesCallback.CheckProvidesCallback#64",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckProvides.java",
    "class_name": "com.google.javascript.jscomp.CheckProvides",
    "signature": "com.google.javascript.jscomp.CheckProvides.CheckProvidesCallback(com.google.javascript.jscomp.CodingConvention)",
    "snippet": " CheckProvidesCallback(CodingConvention convention){\n      this.convention \u003d convention;\n    }",
    "begin_line": 64,
    "end_line": 66,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckProvidesCallback.visit#69",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckProvides.java",
    "class_name": "com.google.javascript.jscomp.CheckProvides",
    "signature": "com.google.javascript.jscomp.CheckProvides.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      switch (n.getType()) {\n        case Token.CALL:\n          String providedClassName \u003d\n            codingConvention.extractClassNameIfProvide(n, parent);\n          if (providedClassName !\u003d null) {\n            provides.put(providedClassName, n);\n          }\n          break;\n        case Token.FUNCTION:\n          visitFunctionNode(n, parent);\n          break;\n        case Token.SCRIPT:\n          visitScriptNode(t, n);\n      }\n    }",
    "begin_line": 69,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckProvidesCallback.visitFunctionNode#86",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckProvides.java",
    "class_name": "com.google.javascript.jscomp.CheckProvides",
    "signature": "com.google.javascript.jscomp.CheckProvides.visitFunctionNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private void visitFunctionNode(Node n, Node parent) {\n      Node name \u003d null;\n      JSDocInfo info \u003d parent.getJSDocInfo();\n      if (info !\u003d null \u0026\u0026 info.isConstructor()) {\n        name \u003d parent.getFirstChild();\n      } else {\n        // look to the child, maybe it\u0027s a named function\n        info \u003d n.getJSDocInfo();\n        if (info !\u003d null \u0026\u0026 info.isConstructor()) {\n          name \u003d n.getFirstChild();\n        }\n      }\n      if (name !\u003d null \u0026\u0026 name.isQualifiedName()) {\n        String qualifiedName \u003d name.getQualifiedName();\n        if (!this.convention.isPrivate(qualifiedName)) {\n          Visibility visibility \u003d info.getVisibility();\n          if (!visibility.equals(JSDocInfo.Visibility.PRIVATE)) {\n            ctors.put(qualifiedName, name);\n          }\n        }\n      }\n    }",
    "begin_line": 86,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckProvidesCallback.visitScriptNode#109",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckProvides.java",
    "class_name": "com.google.javascript.jscomp.CheckProvides",
    "signature": "com.google.javascript.jscomp.CheckProvides.visitScriptNode(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void visitScriptNode(NodeTraversal t, Node n) {\n      for (Map.Entry\u003cString, Node\u003e ctorEntry : ctors.entrySet()) {\n        String ctor \u003d ctorEntry.getKey();\n        int index \u003d -1;\n        boolean found \u003d false;\n        do {\n          index \u003d ctor.indexOf(\u0027.\u0027, index +1);\n          String provideKey \u003d index \u003d\u003d -1 ? ctor : ctor.substring(0, index);\n          if (provides.containsKey(provideKey)) {\n            found \u003d true;\n            break;\n          }\n        } while (index !\u003d -1);\n\n        if (!found) {\n          compiler.report(\n              t.makeError(ctorEntry.getValue(), checkLevel,\n                  MISSING_PROVIDE_WARNING, ctorEntry.getKey()));\n        }\n      }\n      provides.clear();\n      ctors.clear();\n    }",
    "begin_line": 109,
    "end_line": 131,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckRegExp.isGlobalRegExpPropertiesUsed#43",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckRegExp.java",
    "class_name": "com.google.javascript.jscomp.CheckRegExp",
    "signature": "com.google.javascript.jscomp.CheckRegExp.isGlobalRegExpPropertiesUsed()",
    "snippet": "public boolean isGlobalRegExpPropertiesUsed() {\n    return globalRegExpPropertiesUsed;\n  }",
    "begin_line": 43,
    "end_line": 45,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckRegExp.CheckRegExp#47",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckRegExp.java",
    "class_name": "com.google.javascript.jscomp.CheckRegExp",
    "signature": "com.google.javascript.jscomp.CheckRegExp.CheckRegExp(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "public CheckRegExp(AbstractCompiler compiler) {\n    this.compiler \u003d compiler;\n  }",
    "begin_line": 47,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckRegExp.process#52",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckRegExp.java",
    "class_name": "com.google.javascript.jscomp.CheckRegExp",
    "signature": "com.google.javascript.jscomp.CheckRegExp.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n  }",
    "begin_line": 52,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckRegExp.visit#57",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckRegExp.java",
    "class_name": "com.google.javascript.jscomp.CheckRegExp",
    "signature": "com.google.javascript.jscomp.CheckRegExp.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (NodeUtil.isReferenceName(n)) {\n      String name \u003d n.getString();\n      if (name.equals(\"RegExp\") \u0026\u0026 t.getScope().getVar(name) \u003d\u003d null) {\n        int parentType \u003d parent.getType();\n        boolean first \u003d (n \u003d\u003d parent.getFirstChild());\n        if (!((parentType \u003d\u003d Token.NEW \u0026\u0026 first)\n               || (parentType \u003d\u003d Token.CALL \u0026\u0026 first)\n               || (parentType \u003d\u003d Token.INSTANCEOF \u0026\u0026 !first))) {\n          t.report(n, REGEXP_REFERENCE);\n          globalRegExpPropertiesUsed \u003d true;\n        }\n      }\n\n    // Check the syntax of regular expression patterns.\n    } else if (n.isRegExp()) {\n      String pattern \u003d n.getFirstChild().getString();\n      String flags \u003d n.getChildCount() \u003d\u003d 2\n          ? n.getLastChild().getString() : \"\";\n      try {\n        RegExpTree.parseRegExp(pattern, flags);\n      } catch (IllegalArgumentException ex) {\n        t.report(n, MALFORMED_REGEXP, ex.getMessage());\n      }\n    }\n  }",
    "begin_line": 57,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckSideEffects.CheckSideEffects#57",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckSideEffects.java",
    "class_name": "com.google.javascript.jscomp.CheckSideEffects",
    "signature": "com.google.javascript.jscomp.CheckSideEffects.CheckSideEffects(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.CheckLevel, boolean)",
    "snippet": " CheckSideEffects(AbstractCompiler compiler, CheckLevel level,\n      boolean protectSideEffectFreeCode) {\n    this.compiler \u003d compiler;\n    this.level \u003d level;\n    this.protectSideEffectFreeCode \u003d protectSideEffectFreeCode;\n  }",
    "begin_line": 57,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckSideEffects.process#65",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckSideEffects.java",
    "class_name": "com.google.javascript.jscomp.CheckSideEffects",
    "signature": "com.google.javascript.jscomp.CheckSideEffects.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n\n    // Code with hidden side-effect code is common, for example\n    // accessing \"el.offsetWidth\" forces a reflow in browsers, to allow this\n    // will still allowing local dead code removal in general,\n    // protect the \"side-effect free\" code in the source.\n    //\n    if (protectSideEffectFreeCode) {\n      protectSideEffects();\n    }\n  }",
    "begin_line": 65,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckSideEffects.hotSwapScript#79",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckSideEffects.java",
    "class_name": "com.google.javascript.jscomp.CheckSideEffects",
    "signature": "com.google.javascript.jscomp.CheckSideEffects.hotSwapScript(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n    NodeTraversal.traverse(compiler, scriptRoot, this);\n  }",
    "begin_line": 79,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckSideEffects.visit#84",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckSideEffects.java",
    "class_name": "com.google.javascript.jscomp.CheckSideEffects",
    "signature": "com.google.javascript.jscomp.CheckSideEffects.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I\u0027ve been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we\u0027ll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n\n    if (parent \u003d\u003d null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isExprResult() || n.isBlock()) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() \u0026\u0026 n.getJSDocInfo() !\u003d null) {\n      return;\n    }\n\n    boolean isResultUsed \u003d NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp \u003d NodeUtil.isSimpleOperator(n);\n    if (!isResultUsed \u0026\u0026\n        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg \u003d \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg \u003d \"Is there a missing \u0027+\u0027 on the previous line?\";\n      } else if (isSimpleOp) {\n        msg \u003d \"The result of the \u0027\" + Token.name(n.getType()).toLowerCase() +\n            \"\u0027 operator is not being used.\";\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }",
    "begin_line": 84,
    "end_line": 131,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckSideEffects.protectSideEffects#138",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckSideEffects.java",
    "class_name": "com.google.javascript.jscomp.CheckSideEffects",
    "signature": "com.google.javascript.jscomp.CheckSideEffects.protectSideEffects()",
    "snippet": "private void protectSideEffects() {\n    if (!problemNodes.isEmpty()) {\n      addExtern();\n      for (Node n : problemNodes) {\n        Node name \u003d IR.name(PROTECTOR_FN).srcref(n);\n        name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        Node replacement \u003d IR.call(name).srcref(n);\n        replacement.putBooleanProp(Node.FREE_CALL, true);\n        n.getParent().replaceChild(n, replacement);\n        replacement.addChildToBack(n);\n      }\n      compiler.reportCodeChange();\n    }\n  }",
    "begin_line": 138,
    "end_line": 151,
    "comment": "/** \n * Protect side-effect free nodes by making them parameters to a extern function call.  This call will be removed after all the optimizations passes have run.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckSideEffects.addExtern#153",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckSideEffects.java",
    "class_name": "com.google.javascript.jscomp.CheckSideEffects",
    "signature": "com.google.javascript.jscomp.CheckSideEffects.addExtern()",
    "snippet": "private void addExtern() {\n    Node name \u003d IR.name(PROTECTOR_FN);\n    name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n    Node var \u003d IR.var(name);\n    // Add \"@noalias\" so we can strip the method when AliasExternals is enabled.\n    JSDocInfoBuilder builder \u003d new JSDocInfoBuilder(false);\n    builder.recordNoAlias();\n    var.setJSDocInfo(builder.build(var));\n    CompilerInput input \u003d compiler.getSynthesizedExternsInput();\n    input.getAstRoot(compiler).addChildrenToBack(var);\n    compiler.reportCodeChange();\n  }",
    "begin_line": 153,
    "end_line": 164,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StripProtection.StripProtection#173",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckSideEffects.java",
    "class_name": "com.google.javascript.jscomp.CheckSideEffects",
    "signature": "com.google.javascript.jscomp.CheckSideEffects.StripProtection(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": " StripProtection(AbstractCompiler compiler) {\n      this.compiler \u003d compiler;\n    }",
    "begin_line": 173,
    "end_line": 175,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StripProtection.process#178",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckSideEffects.java",
    "class_name": "com.google.javascript.jscomp.CheckSideEffects",
    "signature": "com.google.javascript.jscomp.CheckSideEffects.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public void process(Node externs, Node root) {\n      NodeTraversal.traverse(compiler, root, this);\n    }",
    "begin_line": 178,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StripProtection.visit#183",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckSideEffects.java",
    "class_name": "com.google.javascript.jscomp.CheckSideEffects",
    "signature": "com.google.javascript.jscomp.CheckSideEffects.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isCall()) {\n        Node target \u003d n.getFirstChild();\n        // TODO(johnlenz): add this to the coding convention\n        // so we can remove goog.reflect.sinkValue as well.\n        if (target.isName() \u0026\u0026 target.getString().equals(PROTECTOR_FN)) {\n          Node expr \u003d n.getLastChild();\n          n.detachChildren();\n          parent.replaceChild(n, expr);\n        }\n      }\n    }",
    "begin_line": 183,
    "end_line": 194,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckSuspiciousCode.CheckSuspiciousCode#48",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckSuspiciousCode.java",
    "class_name": "com.google.javascript.jscomp.CheckSuspiciousCode",
    "signature": "com.google.javascript.jscomp.CheckSuspiciousCode.CheckSuspiciousCode()",
    "snippet": " CheckSuspiciousCode() {\n  }",
    "begin_line": 48,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckSuspiciousCode.visit#52",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckSuspiciousCode.java",
    "class_name": "com.google.javascript.jscomp.CheckSuspiciousCode",
    "signature": "com.google.javascript.jscomp.CheckSuspiciousCode.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    checkMissingSemicolon(t, n);\n    checkNaN(t, n);\n  }",
    "begin_line": 52,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckSuspiciousCode.checkMissingSemicolon#57",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckSuspiciousCode.java",
    "class_name": "com.google.javascript.jscomp.CheckSuspiciousCode",
    "signature": "com.google.javascript.jscomp.CheckSuspiciousCode.checkMissingSemicolon(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void checkMissingSemicolon(NodeTraversal t, Node n) {\n    switch (n.getType()) {\n      case Token.IF:\n        Node trueCase \u003d n.getFirstChild().getNext();\n        reportIfWasEmpty(t, trueCase);\n        Node elseCase \u003d trueCase.getNext();\n        if (elseCase !\u003d null) {\n          reportIfWasEmpty(t, elseCase);\n        }\n        break;\n\n      case Token.WHILE:\n      case Token.FOR:\n        reportIfWasEmpty(t, NodeUtil.getLoopCodeBlock(n));\n        break;\n    }\n  }",
    "begin_line": 57,
    "end_line": 73,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckSuspiciousCode.reportIfWasEmpty#75",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckSuspiciousCode.java",
    "class_name": "com.google.javascript.jscomp.CheckSuspiciousCode",
    "signature": "com.google.javascript.jscomp.CheckSuspiciousCode.reportIfWasEmpty(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void reportIfWasEmpty(NodeTraversal t, Node block) {\n    Preconditions.checkState(block.isBlock());\n\n    // A semicolon is distinguished from a block without children by\n    // annotating it with EMPTY_BLOCK.  Blocks without children are\n    // usually intentional, especially with loops.\n    if (!block.hasChildren() \u0026\u0026 block.wasEmptyNode()) {\n        t.getCompiler().report(\n            t.makeError(block, SUSPICIOUS_SEMICOLON));\n    }\n  }",
    "begin_line": 75,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckSuspiciousCode.checkNaN#87",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckSuspiciousCode.java",
    "class_name": "com.google.javascript.jscomp.CheckSuspiciousCode",
    "signature": "com.google.javascript.jscomp.CheckSuspiciousCode.checkNaN(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void checkNaN(NodeTraversal t, Node n) {\n    switch (n.getType()) {\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.LE:\n      case Token.LT:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n        reportIfNaN(t, n.getFirstChild());\n        reportIfNaN(t, n.getLastChild());\n    }\n  }",
    "begin_line": 87,
    "end_line": 100,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckSuspiciousCode.reportIfNaN#102",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckSuspiciousCode.java",
    "class_name": "com.google.javascript.jscomp.CheckSuspiciousCode",
    "signature": "com.google.javascript.jscomp.CheckSuspiciousCode.reportIfNaN(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void reportIfNaN(NodeTraversal t, Node n) {\n    if (NodeUtil.isNaN(n)) {\n      t.getCompiler().report(\n          t.makeError(n.getParent(), SUSPICIOUS_COMPARISON_WITH_NAN));\n    }\n  }",
    "begin_line": 102,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckUnreachableCode.CheckUnreachableCode#41",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckUnreachableCode.java",
    "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
    "signature": "com.google.javascript.jscomp.CheckUnreachableCode.CheckUnreachableCode(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.CheckLevel)",
    "snippet": " CheckUnreachableCode(AbstractCompiler compiler, CheckLevel level) {\n    this.compiler \u003d compiler;\n    this.level \u003d level;\n  }",
    "begin_line": 41,
    "end_line": 44,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckUnreachableCode.enterScope#47",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckUnreachableCode.java",
    "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
    "signature": "com.google.javascript.jscomp.CheckUnreachableCode.enterScope(com.google.javascript.jscomp.NodeTraversal)",
    "snippet": "@Override\n  public void enterScope(NodeTraversal t) {\n    initScope(t.getControlFlowGraph());\n  }",
    "begin_line": 47,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckUnreachableCode.shouldTraverse#52",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckUnreachableCode.java",
    "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
    "signature": "com.google.javascript.jscomp.CheckUnreachableCode.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    GraphNode\u003cNode, Branch\u003e gNode \u003d t.getControlFlowGraph().getNode(n);\n    if (gNode !\u003d null \u0026\u0026 gNode.getAnnotation() !\u003d GraphReachability.REACHABLE) {\n\n      // Only report error when there are some line number informations.\n      // There are synthetic nodes with no line number informations, nodes\n      // introduce by other passes (although not likely since this pass should\n      // be executed early) or some rhino bug.\n      if (n.getLineno() !\u003d -1 \u0026\u0026\n          // Allow spurious semi-colons and spurious breaks.\n          !n.isEmpty() \u0026\u0026 !n.isBreak()) {\n        compiler.report(t.makeError(n, level, UNREACHABLE_CODE));\n        // From now on, we are going to assume the user fixed the error and not\n        // give more warning related to code section reachable from this node.\n        new GraphReachability\u003cNode, ControlFlowGraph.Branch\u003e(\n            t.getControlFlowGraph()).recompute(n);\n\n        // Saves time by not traversing children.\n        return false;\n      }\n    }\n    return true;\n  }",
    "begin_line": 52,
    "end_line": 74,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckUnreachableCode.initScope#76",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckUnreachableCode.java",
    "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
    "signature": "com.google.javascript.jscomp.CheckUnreachableCode.initScope(com.google.javascript.jscomp.ControlFlowGraph\u003ccom.google.javascript.rhino.Node\u003e)",
    "snippet": "private void initScope(ControlFlowGraph\u003cNode\u003e controlFlowGraph) {\n    new GraphReachability\u003cNode, ControlFlowGraph.Branch\u003e(\n        controlFlowGraph, new ReachablePredicate()).compute(\n            controlFlowGraph.getEntry().getValue());\n  }",
    "begin_line": 76,
    "end_line": 80,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckUnreachableCode.exitScope#83",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckUnreachableCode.java",
    "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
    "signature": "com.google.javascript.jscomp.CheckUnreachableCode.exitScope(com.google.javascript.jscomp.NodeTraversal)",
    "snippet": "@Override\n  public void exitScope(NodeTraversal t) {\n  }",
    "begin_line": 83,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CheckUnreachableCode.visit#87",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckUnreachableCode.java",
    "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
    "signature": "com.google.javascript.jscomp.CheckUnreachableCode.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n  }",
    "begin_line": 87,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReachablePredicate.apply#94",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CheckUnreachableCode.java",
    "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
    "signature": "com.google.javascript.jscomp.CheckUnreachableCode.apply(com.google.javascript.jscomp.graph.GraphReachability.EdgeTuple\u003ccom.google.javascript.rhino.Node,com.google.javascript.jscomp.ControlFlowGraph.Branch\u003e)",
    "snippet": "@Override\n    public boolean apply(EdgeTuple\u003cNode, Branch\u003e input) {\n      Branch branch \u003d input.edge;\n      if (!branch.isConditional()) {\n        return true;\n      }\n      Node predecessor \u003d input.sourceNode;\n      Node condition \u003d NodeUtil.getConditionExpression(predecessor);\n\n      // TODO(user): Handle more complicated expression like true \u003d\u003d true,\n      // etc....\n      if (condition !\u003d null) {\n        TernaryValue val \u003d NodeUtil.getImpureBooleanValue(condition);\n        if (val !\u003d TernaryValue.UNKNOWN) {\n          return val.toBoolean(true) \u003d\u003d (branch \u003d\u003d Branch.ON_TRUE);\n        }\n      }\n      return true;\n    }",
    "begin_line": 94,
    "end_line": 111,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.ClosureCodingConvention#49",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.ClosureCodingConvention()",
    "snippet": "public ClosureCodingConvention() {\n    this(CodingConventions.getDefault());\n  }",
    "begin_line": 49,
    "end_line": 51,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.ClosureCodingConvention#53",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.ClosureCodingConvention(com.google.javascript.jscomp.CodingConvention)",
    "snippet": "public ClosureCodingConvention(CodingConvention wrapped) {\n    super(wrapped);\n\n    Set\u003cString\u003e props \u003d Sets.newHashSet(\n        \"superClass_\",\n        \"instance_\",\n        \"getInstance\");\n    props.addAll(wrapped.getIndirectlyDeclaredProperties());\n    indirectlyDeclaredProperties \u003d ImmutableSet.copyOf(props);\n  }",
    "begin_line": 53,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.applySubclassRelationship#69",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.applySubclassRelationship(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.jscomp.CodingConvention.SubclassType)",
    "snippet": "@Override\n  public void applySubclassRelationship(FunctionType parentCtor,\n      FunctionType childCtor, SubclassType type) {\n    super.applySubclassRelationship(parentCtor, childCtor, type);\n    if (type \u003d\u003d SubclassType.INHERITS) {\n      childCtor.defineDeclaredProperty(\"superClass_\",\n          parentCtor.getPrototype(), childCtor.getSource());\n      childCtor.getPrototype().defineDeclaredProperty(\"constructor\",\n          // Notice that constructor functions do not need to be covariant\n          // on the superclass.\n          // So if G extends F, new G() and new F() can accept completely\n          // different argument types, but G.prototype.constructor needs\n          // to be covariant on F.prototype.constructor.\n          // To get around this, we just turn off type-checking on arguments\n          // and return types of G.prototype.constructor.\n          childCtor.cloneWithoutArrowType(),\n          childCtor.getSource());\n    }\n  }",
    "begin_line": 69,
    "end_line": 86,
    "comment": "/** \n * Closure\u0027s goog.inherits adds a  {@code superClass_} property to thesubclass, and a  {@code constructor} property.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.getClassesDefinedByCall#95",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.getClassesDefinedByCall(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public SubclassRelationship getClassesDefinedByCall(Node callNode) {\n    SubclassRelationship relationship \u003d\n        super.getClassesDefinedByCall(callNode);\n    if (relationship !\u003d null) return relationship;\n\n    Node callName \u003d callNode.getFirstChild();\n    SubclassType type \u003d typeofClassDefiningName(callName);\n    if (type !\u003d null) {\n      Node subclass \u003d null;\n      Node superclass \u003d callNode.getLastChild();\n\n      // There are six possible syntaxes for a class-defining method:\n      // SubClass.inherits(SuperClass)\n      // goog.inherits(SubClass, SuperClass)\n      // goog$inherits(SubClass, SuperClass)\n      // SubClass.mixin(SuperClass.prototype)\n      // goog.mixin(SubClass.prototype, SuperClass.prototype)\n      // goog$mixin(SubClass.prototype, SuperClass.prototype)\n      boolean isDeprecatedCall \u003d callNode.getChildCount() \u003d\u003d 2 \u0026\u0026\n          callName.isGetProp();\n      if (isDeprecatedCall) {\n        // SubClass.inherits(SuperClass)\n        subclass \u003d callName.getFirstChild();\n      } else if (callNode.getChildCount() \u003d\u003d 3) {\n        // goog.inherits(SubClass, SuperClass)\n        subclass \u003d callName.getNext();\n      } else {\n        return null;\n      }\n\n      if (type \u003d\u003d SubclassType.MIXIN) {\n        // Only consider mixins that mix two prototypes as related to\n        // inheritance.\n        if (!endsWithPrototype(superclass)) {\n          return null;\n        }\n        if (!isDeprecatedCall) {\n          if (!endsWithPrototype(subclass)) {\n            return null;\n          }\n          // Strip off the prototype from the name.\n          subclass \u003d subclass.getFirstChild();\n        }\n        superclass \u003d superclass.getFirstChild();\n      }\n\n      // bail out if either of the side of the \"inherits\"\n      // isn\u0027t a real class name. This prevents us from\n      // doing something weird in cases like:\n      // goog.inherits(MySubClass, cond ? SuperClass1 : BaseClass2)\n      if (subclass !\u003d null \u0026\u0026\n          subclass.isUnscopedQualifiedName() \u0026\u0026\n          superclass.isUnscopedQualifiedName()) {\n        return new SubclassRelationship(type, subclass, superclass);\n      }\n    }\n\n    return null;\n  }",
    "begin_line": 95,
    "end_line": 153,
    "comment": "/** \n * {@inheritDoc}\u003cp\u003eUnderstands several different inheritance patterns that occur in Google code (various uses of  {@code inherits} and {@code mixin}).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.typeofClassDefiningName#160",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.typeofClassDefiningName(com.google.javascript.rhino.Node)",
    "snippet": "private SubclassType typeofClassDefiningName(Node callName) {\n    // Check if the method name matches one of the class-defining methods.\n    String methodName \u003d null;\n    if (callName.isGetProp()) {\n      methodName \u003d callName.getLastChild().getString();\n    } else if (callName.isName()) {\n      String name \u003d callName.getString();\n      int dollarIndex \u003d name.lastIndexOf(\u0027$\u0027);\n      if (dollarIndex !\u003d -1) {\n        methodName \u003d name.substring(dollarIndex + 1);\n      }\n    }\n\n    if (methodName !\u003d null) {\n      if (methodName.equals(\"inherits\")) {\n        return SubclassType.INHERITS;\n      } else if (methodName.equals(\"mixin\")) {\n        return SubclassType.MIXIN;\n      }\n    }\n    return null;\n  }",
    "begin_line": 160,
    "end_line": 181,
    "comment": "/** \n * Determines whether the given node is a class-defining name, like \"inherits\" or \"mixin.\"\n * @return The type of class-defining name, or null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.isSuperClassReference#184",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.isSuperClassReference(java.lang.String)",
    "snippet": "@Override\n  public boolean isSuperClassReference(String propertyName) {\n    return \"superClass_\".equals(propertyName) ||\n        super.isSuperClassReference(propertyName);\n  }",
    "begin_line": 184,
    "end_line": 187,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.endsWithPrototype#195",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.endsWithPrototype(com.google.javascript.rhino.Node)",
    "snippet": "private boolean endsWithPrototype(Node qualifiedName) {\n    return qualifiedName.isGetProp() \u0026\u0026\n        qualifiedName.getLastChild().getString().equals(\"prototype\");\n  }",
    "begin_line": 195,
    "end_line": 198,
    "comment": "/** \n * Given a qualified name node, returns whether \"prototype\" is at the end. For example: a.b.c \u003d\u003e false a.b.c.prototype \u003d\u003e true\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.extractClassNameIfProvide#206",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.extractClassNameIfProvide(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public String extractClassNameIfProvide(Node node, Node parent){\n    return extractClassNameIfGoog(node, parent, \"goog.provide\");\n  }",
    "begin_line": 206,
    "end_line": 208,
    "comment": "/** \n * Extracts X from goog.provide(\u0027X\u0027), if the applied Node is goog.\n * @return The extracted class name, or null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.extractClassNameIfRequire#216",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.extractClassNameIfRequire(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public String extractClassNameIfRequire(Node node, Node parent){\n    return extractClassNameIfGoog(node, parent, \"goog.require\");\n  }",
    "begin_line": 216,
    "end_line": 218,
    "comment": "/** \n * Extracts X from goog.require(\u0027X\u0027), if the applied Node is goog.\n * @return The extracted class name, or null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.extractClassNameIfGoog#220",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.extractClassNameIfGoog(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String)",
    "snippet": "private static String extractClassNameIfGoog(Node node, Node parent,\n      String functionName){\n    String className \u003d null;\n    if (NodeUtil.isExprCall(parent)) {\n      Node callee \u003d node.getFirstChild();\n      if (callee !\u003d null \u0026\u0026 callee.isGetProp()) {\n        String qualifiedName \u003d callee.getQualifiedName();\n        if (functionName.equals(qualifiedName)) {\n          Node target \u003d callee.getNext();\n          if (target !\u003d null \u0026\u0026 target.isString()) {\n            className \u003d target.getString();\n          }\n        }\n      }\n    }\n    return className;\n  }",
    "begin_line": 220,
    "end_line": 236,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.getExportPropertyFunction#243",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.getExportPropertyFunction()",
    "snippet": "@Override\n  public String getExportPropertyFunction() {\n    return \"goog.exportProperty\";\n  }",
    "begin_line": 243,
    "end_line": 245,
    "comment": "/** \n * Use closure\u0027s implementation.\n * @return closure\u0027s function name for exporting properties.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.getExportSymbolFunction#252",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.getExportSymbolFunction()",
    "snippet": "@Override\n  public String getExportSymbolFunction() {\n    return \"goog.exportSymbol\";\n  }",
    "begin_line": 252,
    "end_line": 254,
    "comment": "/** \n * Use closure\u0027s implementation.\n * @return closure\u0027s function name for exporting symbols.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.identifyTypeDeclarationCall#257",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.identifyTypeDeclarationCall(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public List\u003cString\u003e identifyTypeDeclarationCall(Node n) {\n    Node callName \u003d n.getFirstChild();\n    if (\"goog.addDependency\".equals(callName.getQualifiedName()) \u0026\u0026\n        n.getChildCount() \u003e\u003d 3) {\n      Node typeArray \u003d callName.getNext().getNext();\n      if (typeArray.isArrayLit()) {\n        List\u003cString\u003e typeNames \u003d Lists.newArrayList();\n        for (Node name \u003d typeArray.getFirstChild(); name !\u003d null;\n             name \u003d name.getNext()) {\n          if (name.isString()) {\n            typeNames.add(name.getString());\n          }\n        }\n        return typeNames;\n      }\n    }\n    return super.identifyTypeDeclarationCall(n);\n  }",
    "begin_line": 257,
    "end_line": 274,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.getAbstractMethodName#277",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.getAbstractMethodName()",
    "snippet": "@Override\n  public String getAbstractMethodName() {\n    return \"goog.abstractMethod\";\n  }",
    "begin_line": 277,
    "end_line": 279,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.getSingletonGetterClassName#282",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.getSingletonGetterClassName(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public String getSingletonGetterClassName(Node callNode) {\n    Node callArg \u003d callNode.getFirstChild();\n    String callName \u003d callArg.getQualifiedName();\n\n    // Use both the original name and the post-CollapseProperties name.\n    if (!(\"goog.addSingletonGetter\".equals(callName) ||\n          \"goog$addSingletonGetter\".equals(callName)) ||\n        callNode.getChildCount() !\u003d 2) {\n      return super.getSingletonGetterClassName(callNode);\n    }\n\n    return callArg.getNext().getQualifiedName();\n  }",
    "begin_line": 282,
    "end_line": 294,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.applySingletonGetter#297",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.applySingletonGetter(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "@Override\n  public void applySingletonGetter(FunctionType functionType,\n      FunctionType getterType, ObjectType objectType) {\n    super.applySingletonGetter(functionType, getterType, objectType);\n    functionType.defineDeclaredProperty(\"getInstance\", getterType,\n        functionType.getSource());\n    functionType.defineDeclaredProperty(\"instance_\", objectType,\n        functionType.getSource());\n  }",
    "begin_line": 297,
    "end_line": 304,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.getGlobalObject#307",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.getGlobalObject()",
    "snippet": "@Override\n  public String getGlobalObject() {\n    return \"goog.global\";\n  }",
    "begin_line": 307,
    "end_line": 309,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.isPropertyTestFunction#317",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.isPropertyTestFunction(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public boolean isPropertyTestFunction(Node call) {\n    Preconditions.checkArgument(call.isCall());\n    return propertyTestFunctions.contains(\n        call.getFirstChild().getQualifiedName()) ||\n        super.isPropertyTestFunction(call);\n  }",
    "begin_line": 317,
    "end_line": 322,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.getObjectLiteralCast#325",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.getObjectLiteralCast(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public ObjectLiteralCast getObjectLiteralCast(Node callNode) {\n    Preconditions.checkArgument(callNode.isCall());\n    ObjectLiteralCast proxyCast \u003d super.getObjectLiteralCast(callNode);\n    if (proxyCast !\u003d null) {\n      return proxyCast;\n    }\n\n    Node callName \u003d callNode.getFirstChild();\n    if (!\"goog.reflect.object\".equals(callName.getQualifiedName()) ||\n        callNode.getChildCount() !\u003d 3) {\n      return null;\n    }\n\n    Node typeNode \u003d callName.getNext();\n    if (!typeNode.isQualifiedName()) {\n      return null;\n    }\n\n    Node objectNode \u003d typeNode.getNext();\n    if (!objectNode.isObjectLit()) {\n      return new ObjectLiteralCast(null, null, OBJECTLIT_EXPECTED);\n    }\n\n    return new ObjectLiteralCast(\n        typeNode.getQualifiedName(), typeNode.getNext(), null);\n  }",
    "begin_line": 325,
    "end_line": 350,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.isOptionalParameter#353",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.isOptionalParameter(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public boolean isOptionalParameter(Node parameter) {\n    return false;\n  }",
    "begin_line": 353,
    "end_line": 355,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.isVarArgsParameter#358",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.isVarArgsParameter(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public boolean isVarArgsParameter(Node parameter) {\n    return false;\n  }",
    "begin_line": 358,
    "end_line": 360,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.isPrivate#363",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.isPrivate(java.lang.String)",
    "snippet": "@Override\n  public boolean isPrivate(String name) {\n    return false;\n  }",
    "begin_line": 363,
    "end_line": 365,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.getAssertionFunctions#368",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.getAssertionFunctions()",
    "snippet": "@Override\n  public Collection\u003cAssertionFunctionSpec\u003e getAssertionFunctions() {\n    return ImmutableList.\u003cAssertionFunctionSpec\u003eof(\n        new AssertionFunctionSpec(\"goog.asserts.assert\"),\n        new AssertionFunctionSpec(\"goog.asserts.assertNumber\",\n            JSTypeNative.NUMBER_TYPE),\n        new AssertionFunctionSpec(\"goog.asserts.assertString\",\n            JSTypeNative.STRING_TYPE),\n        new AssertionFunctionSpec(\"goog.asserts.assertFunction\",\n            JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        new AssertionFunctionSpec(\"goog.asserts.assertObject\",\n            JSTypeNative.OBJECT_TYPE),\n        new AssertionFunctionSpec(\"goog.asserts.assertArray\",\n            JSTypeNative.ARRAY_TYPE),\n        new AssertInstanceofSpec(\"goog.asserts.assertInstanceof\")\n    );\n  }",
    "begin_line": 368,
    "end_line": 383,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.describeFunctionBind#386",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.describeFunctionBind(com.google.javascript.rhino.Node, boolean)",
    "snippet": "@Override\n  public Bind describeFunctionBind(Node n, boolean useTypeInfo) {\n    Bind result \u003d super.describeFunctionBind(n, useTypeInfo);\n    if (result !\u003d null) {\n      return result;\n    }\n\n    if (!n.isCall()) {\n      return null;\n    }\n\n    Node callTarget \u003d n.getFirstChild();\n    String name \u003d callTarget.getQualifiedName();\n    if (name !\u003d null) {\n      if (name.equals(\"goog.bind\")\n          || name.equals(\"goog$bind\")) {\n        // goog.bind(fn, self, args...);\n        Node fn \u003d callTarget.getNext();\n        if (fn \u003d\u003d null) {\n          return null;\n        }\n        Node thisValue \u003d safeNext(fn);\n        Node parameters \u003d safeNext(thisValue);\n        return new Bind(fn, thisValue, parameters);\n      }\n\n      if (name.equals(\"goog.partial\") || name.equals(\"goog$partial\")) {\n        // goog.partial(fn, args...);\n        Node fn \u003d callTarget.getNext();\n        if (fn \u003d\u003d null) {\n          return null;\n        }\n        Node thisValue \u003d null;\n        Node parameters \u003d safeNext(fn);\n        return new Bind(fn, thisValue, parameters);\n      }\n    }\n\n    return null;\n  }",
    "begin_line": 386,
    "end_line": 424,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.getIndirectlyDeclaredProperties#427",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.getIndirectlyDeclaredProperties()",
    "snippet": "@Override\n  public Collection\u003cString\u003e getIndirectlyDeclaredProperties() {\n    return indirectlyDeclaredProperties;\n  }",
    "begin_line": 427,
    "end_line": 429,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClosureCodingConvention.safeNext#431",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.safeNext(com.google.javascript.rhino.Node)",
    "snippet": "private Node safeNext(Node n) {\n    if (n !\u003d null) {\n      return n.getNext();\n    }\n    return null;\n  }",
    "begin_line": 431,
    "end_line": 436,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AssertInstanceofSpec.AssertInstanceofSpec#443",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.AssertInstanceofSpec(java.lang.String)",
    "snippet": "public AssertInstanceofSpec(String functionName) {\n      super(functionName, JSTypeNative.OBJECT_TYPE);\n    }",
    "begin_line": 443,
    "end_line": 445,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AssertInstanceofSpec.getAssertedType#452",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ClosureCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
    "signature": "com.google.javascript.jscomp.ClosureCodingConvention.getAssertedType(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": "@Override\n    public JSType getAssertedType(Node call, JSTypeRegistry registry) {\n      if (call.getChildCount() \u003e 2) {\n        Node constructor \u003d call.getFirstChild().getNext().getNext();\n        if (constructor !\u003d null) {\n          JSType ownerType \u003d constructor.getJSType();\n          if (ownerType !\u003d null\n              \u0026\u0026 ownerType.isFunctionType()\n              \u0026\u0026 ownerType.isConstructor()) {\n            FunctionType functionType \u003d ((FunctionType) ownerType);\n            return functionType.getInstanceType();\n          }\n        }\n      }\n      return super.getAssertedType(call, registry);\n    }",
    "begin_line": 452,
    "end_line": 466,
    "comment": "/** \n * Returns the type for a type assertion, or null if the function asserts that the node must not be null or undefined.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeChangeHandler.reportChange#29",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodeChangeHandler.java",
    "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
    "signature": "com.google.javascript.jscomp.CodeChangeHandler.reportChange()",
    "snippet": "void reportChange();",
    "begin_line": 29,
    "end_line": 29,
    "comment": "/** \n * Report a change to the AST. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RecentChange.reportChange#39",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodeChangeHandler.java",
    "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
    "signature": "com.google.javascript.jscomp.CodeChangeHandler.reportChange()",
    "snippet": "@Override\n    public void reportChange() {\n      hasChanged \u003d true;\n    }",
    "begin_line": 39,
    "end_line": 41,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RecentChange.hasCodeChanged#43",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodeChangeHandler.java",
    "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
    "signature": "com.google.javascript.jscomp.CodeChangeHandler.hasCodeChanged()",
    "snippet": "boolean hasCodeChanged() {\n      return hasChanged;\n    }",
    "begin_line": 43,
    "end_line": 45,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RecentChange.reset#47",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodeChangeHandler.java",
    "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
    "signature": "com.google.javascript.jscomp.CodeChangeHandler.reset()",
    "snippet": "void reset() {\n      hasChanged \u003d false;\n    }",
    "begin_line": 47,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ForbiddenChange.reportChange#57",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodeChangeHandler.java",
    "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
    "signature": "com.google.javascript.jscomp.CodeChangeHandler.reportChange()",
    "snippet": "@Override\n    public void reportChange() {\n      throw new IllegalStateException(\"Code changes forbidden\");\n    }",
    "begin_line": 57,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.isConstant#45",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.isConstant(java.lang.String)",
    "snippet": "public boolean isConstant(String variableName);",
    "begin_line": 45,
    "end_line": 45,
    "comment": "/** \n * This checks whether a given variable name, such as a name in all-caps should be treated as if it had the @const annotation.\n * @param variableName potentially constant variable name\n * @return {@code true} if the name should be treated as a constant.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.isConstantKey#52",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.isConstantKey(java.lang.String)",
    "snippet": "public boolean isConstantKey(String keyName);",
    "begin_line": 52,
    "end_line": 52,
    "comment": "/** \n * This checks whether a given key of an object literal, such as a name in all-caps should be treated as if it had the @const annotation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.isValidEnumKey#61",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.isValidEnumKey(java.lang.String)",
    "snippet": "public boolean isValidEnumKey(String key);",
    "begin_line": 61,
    "end_line": 61,
    "comment": "/** \n * This checks that a given  {@code key} may be used as a key for an enum.\n * @param key the potential key to an enum\n * @return {@code true} if the {@code key} may be used as an enum key,{@code false} otherwise\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.isOptionalParameter#74",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.isOptionalParameter(com.google.javascript.rhino.Node)",
    "snippet": "public boolean isOptionalParameter(Node parameter);",
    "begin_line": 74,
    "end_line": 74,
    "comment": "/** \n * This checks whether a given parameter name should be treated as an optional parameter as far as type checking or function call arg count checking is concerned. Note that an optional function parameter may be declared as a simple type and is automatically converted to a union of the declared type and Undefined.\n * @param parameter The parameter\u0027s node.\n * @return {@code true} if the parameter should be treated as an optionalparameter.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.isVarArgsParameter#85",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.isVarArgsParameter(com.google.javascript.rhino.Node)",
    "snippet": "public boolean isVarArgsParameter(Node parameter);",
    "begin_line": 85,
    "end_line": 85,
    "comment": "/** \n * This checks whether a given parameter should be treated as a marker for a variable argument list function. A VarArgs parameter must be the last parameter in a function declaration.\n * @param parameter The parameter\u0027s node.\n * @return {@code true} if the parameter should be treated as a variablelength parameter.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.isExported#95",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.isExported(java.lang.String, boolean)",
    "snippet": "public boolean isExported(String name, boolean local);",
    "begin_line": 95,
    "end_line": 95,
    "comment": "/** \n * Checks whether a global variable or function name should be treated as exported, or externally referenceable.\n * @param name A global variable or function name.\n * @param local {@code true} if the name is a local variable.\n * @return {@code true} if the name should be considered exported.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.isExported#100",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.isExported(java.lang.String)",
    "snippet": "public boolean isExported(String name);",
    "begin_line": 100,
    "end_line": 100,
    "comment": "/** \n * Should be isExported(name, true) || isExported(name, false);\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.isPrivate#112",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.isPrivate(java.lang.String)",
    "snippet": "public boolean isPrivate(String name);",
    "begin_line": 112,
    "end_line": 112,
    "comment": "/** \n * Checks whether a name should be considered private. Private global variables and functions can only be referenced within the source file in which they are declared. Private properties and methods should only be accessed by the class that defines them.\n * @param name The name of a global variable or function, or a method orproperty.\n * @return {@code true} if the name should be considered private.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.getClassesDefinedByCall#121",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.getClassesDefinedByCall(com.google.javascript.rhino.Node)",
    "snippet": "public SubclassRelationship getClassesDefinedByCall(Node callNode);",
    "begin_line": 121,
    "end_line": 121,
    "comment": "/** \n * Checks if the given method defines a subclass relationship, and if it does, returns information on that relationship. By default, always returns null. Meant to be overridden by subclasses.\n * @param callNode A CALL node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.isSuperClassReference#128",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.isSuperClassReference(java.lang.String)",
    "snippet": "public boolean isSuperClassReference(String propertyName);",
    "begin_line": 128,
    "end_line": 128,
    "comment": "/** \n * Returns true if passed a string referring to the superclass.  The string will usually be from the string node at the right of a GETPROP, e.g. this.superClass_.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.extractClassNameIfProvide#134",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.extractClassNameIfProvide(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public String extractClassNameIfProvide(Node node, Node parent);",
    "begin_line": 134,
    "end_line": 134,
    "comment": "/** \n * Convenience method for determining provided dependencies amongst different JS scripts.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.extractClassNameIfRequire#140",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.extractClassNameIfRequire(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public String extractClassNameIfRequire(Node node, Node parent);",
    "begin_line": 140,
    "end_line": 140,
    "comment": "/** \n * Convenience method for determining required dependencies amongst different JS scripts.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.getExportPropertyFunction#147",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.getExportPropertyFunction()",
    "snippet": "public String getExportPropertyFunction();",
    "begin_line": 147,
    "end_line": 147,
    "comment": "/** \n * Function name used when exporting properties. Signature: fn(object, publicName, symbol).\n * @return function name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.getExportSymbolFunction#154",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.getExportSymbolFunction()",
    "snippet": "public String getExportSymbolFunction();",
    "begin_line": 154,
    "end_line": 154,
    "comment": "/** \n * Function name used when exporting symbols. Signature: fn(publicPath, object).\n * @return function name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.identifyTypeDeclarationCall#160",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.identifyTypeDeclarationCall(com.google.javascript.rhino.Node)",
    "snippet": "public List\u003cString\u003e identifyTypeDeclarationCall(Node n);",
    "begin_line": 160,
    "end_line": 160,
    "comment": "/** \n * Checks if the given CALL node is forward-declaring any types, and returns the name of the types if it is.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.applySubclassRelationship#166",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.applySubclassRelationship(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.jscomp.CodingConvention.SubclassType)",
    "snippet": "public void applySubclassRelationship(FunctionType parentCtor,\n      FunctionType childCtor, SubclassType type);",
    "begin_line": 166,
    "end_line": 167,
    "comment": "/** \n * In many JS libraries, the function that produces inheritance also adds properties to the superclass and/or subclass.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.getAbstractMethodName#176",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.getAbstractMethodName()",
    "snippet": "public String getAbstractMethodName();",
    "begin_line": 176,
    "end_line": 176,
    "comment": "/** \n * Function name for abstract methods. An abstract method can be assigned to an interface method instead of an function expression in order to avoid linter warnings produced by assigning a function without a return value where a return value is expected.\n * @return function name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.getSingletonGetterClassName#189",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.getSingletonGetterClassName(com.google.javascript.rhino.Node)",
    "snippet": "public String getSingletonGetterClassName(Node callNode);",
    "begin_line": 189,
    "end_line": 189,
    "comment": "/** \n * Checks if the given method defines a singleton getter, and if it does, returns the name of the class with the singleton getter. By default, always returns null. Meant to be overridden by subclasses. addSingletonGetter needs a coding convention because in the general case, it can\u0027t be inlined. The function inliner sees that it creates an alias to the given class in an inner closure, and bails out.\n * @param callNode A CALL node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.applySingletonGetter#195",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.applySingletonGetter(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "public void applySingletonGetter(FunctionType functionType,\n      FunctionType getterType, ObjectType objectType);",
    "begin_line": 195,
    "end_line": 196,
    "comment": "/** \n * In many JS libraries, the function that adds a singleton getter to a class adds properties to the class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.isInlinableFunction#201",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.isInlinableFunction(com.google.javascript.rhino.Node)",
    "snippet": "public boolean isInlinableFunction(Node n);",
    "begin_line": 201,
    "end_line": 201,
    "comment": "/** \n * @return Whether the function is inlinable by convention.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.getDelegateRelationship#206",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.getDelegateRelationship(com.google.javascript.rhino.Node)",
    "snippet": "public DelegateRelationship getDelegateRelationship(Node callNode);",
    "begin_line": 206,
    "end_line": 206,
    "comment": "/** \n * @return the delegate relationship created by the call or null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.applyDelegateRelationship#212",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.applyDelegateRelationship(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "public void applyDelegateRelationship(\n      ObjectType delegateSuperclass, ObjectType delegateBase,\n      ObjectType delegator, FunctionType delegateProxy,\n      FunctionType findDelegate);",
    "begin_line": 212,
    "end_line": 215,
    "comment": "/** \n * In many JS libraries, the function that creates a delegate relationship also adds properties to the delegator and delegate base.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.getDelegateSuperclassName#220",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.getDelegateSuperclassName()",
    "snippet": "public String getDelegateSuperclassName();",
    "begin_line": 220,
    "end_line": 220,
    "comment": "/** \n * @return the name of the delegate superclass.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.checkForCallingConventionDefiningCalls#226",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.checkForCallingConventionDefiningCalls(com.google.javascript.rhino.Node, java.util.Map\u003cjava.lang.String,java.lang.String\u003e)",
    "snippet": "public void checkForCallingConventionDefiningCalls(\n      Node n, Map\u003cString, String\u003e delegateCallingConventions);",
    "begin_line": 226,
    "end_line": 227,
    "comment": "/** \n * Checks for function calls that set the calling conventions on delegate methods.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.defineDelegateProxyPrototypeProperties#235",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.defineDelegateProxyPrototypeProperties(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e, java.util.List\u003ccom.google.javascript.rhino.jstype.ObjectType\u003e, java.util.Map\u003cjava.lang.String,java.lang.String\u003e)",
    "snippet": "public void defineDelegateProxyPrototypeProperties(\n      JSTypeRegistry registry, StaticScope\u003cJSType\u003e scope,\n      List\u003cObjectType\u003e delegateProxyPrototypes,\n      Map\u003cString, String\u003e delegateCallingConventions);",
    "begin_line": 235,
    "end_line": 238,
    "comment": "/** \n * Defines the delegate proxy prototype properties. Their types depend on properties of the delegate base methods.\n * @param delegateProxyPrototypes List of delegate proxy prototypes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.getGlobalObject#243",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.getGlobalObject()",
    "snippet": "public String getGlobalObject();",
    "begin_line": 243,
    "end_line": 243,
    "comment": "/** \n * Gets the name of the global object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.describeFunctionBind#248",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.describeFunctionBind(com.google.javascript.rhino.Node)",
    "snippet": "public Bind describeFunctionBind(Node n);",
    "begin_line": 248,
    "end_line": 248,
    "comment": "/** \n * A Bind instance or null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConvention.describeFunctionBind#255",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.describeFunctionBind(com.google.javascript.rhino.Node, boolean)",
    "snippet": "public Bind describeFunctionBind(Node n, boolean useTypeInfo);",
    "begin_line": 255,
    "end_line": 255,
    "comment": "/** \n * A Bind instance or null.\n * @param useTypeInfo If we believe type information is reliable enoughto use to figure out what the bind function is.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Bind.Bind#265",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.Bind(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public Bind(Node target, Node thisValue, Node parameters) {\n      this.target \u003d target;\n      this.thisValue \u003d thisValue;\n      this.parameters \u003d parameters;\n    }",
    "begin_line": 265,
    "end_line": 269,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Bind.getBoundParameterCount#274",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.getBoundParameterCount()",
    "snippet": "int getBoundParameterCount() {\n      if (parameters \u003d\u003d null) {\n        return 0;\n      }\n      Node paramParent \u003d parameters.getParent();\n      return paramParent.getChildCount() -\n          paramParent.getIndexOfChild(parameters);\n    }",
    "begin_line": 274,
    "end_line": 281,
    "comment": "/** \n * The number of parameters bound (not including the \u0027this\u0027 value).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Bind.isPropertyTestFunction#287",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.isPropertyTestFunction(com.google.javascript.rhino.Node)",
    "snippet": "public boolean isPropertyTestFunction(Node call);",
    "begin_line": 287,
    "end_line": 287,
    "comment": "/** \n * Whether this CALL function is testing for the existence of a property.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Bind.isPrototypeAlias#292",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.isPrototypeAlias(com.google.javascript.rhino.Node)",
    "snippet": "public boolean isPrototypeAlias(Node getProp);",
    "begin_line": 292,
    "end_line": 292,
    "comment": "/** \n * Whether this GETPROP node is an alias for an object prototype.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Bind.getObjectLiteralCast#301",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.getObjectLiteralCast(com.google.javascript.rhino.Node)",
    "snippet": "public ObjectLiteralCast getObjectLiteralCast(Node callNode);",
    "begin_line": 301,
    "end_line": 301,
    "comment": "/** \n * Checks if the given method performs a object literal cast, and if it does, returns information on the cast. By default, always returns null. Meant to be overridden by subclasses.\n * @param callNode A CALL node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Bind.getIndirectlyDeclaredProperties#308",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.getIndirectlyDeclaredProperties()",
    "snippet": "public Collection\u003cString\u003e getIndirectlyDeclaredProperties();",
    "begin_line": 308,
    "end_line": 308,
    "comment": "/** \n * Gets a collection of all properties that are defined indirectly on global objects. (For example, Closure defines superClass_ in the goog.inherits call).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Bind.getAssertionFunctions#313",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.getAssertionFunctions()",
    "snippet": "public Collection\u003cAssertionFunctionSpec\u003e getAssertionFunctions();",
    "begin_line": 313,
    "end_line": 313,
    "comment": "/** \n * Returns the set of AssertionFunction.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubclassRelationship.SubclassRelationship#325",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.SubclassRelationship(com.google.javascript.jscomp.CodingConvention.SubclassType, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public SubclassRelationship(SubclassType type,\n        Node subclassNode, Node superclassNode) {\n      this.type \u003d type;\n      this.subclassName \u003d subclassNode.getQualifiedName();\n      this.superclassName \u003d superclassNode.getQualifiedName();\n    }",
    "begin_line": 325,
    "end_line": 330,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DelegateRelationship.DelegateRelationship#346",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.DelegateRelationship(java.lang.String, java.lang.String)",
    "snippet": " DelegateRelationship(String delegateBase, String delegator) {\n      this.delegateBase \u003d delegateBase;\n      this.delegator \u003d delegator;\n    }",
    "begin_line": 346,
    "end_line": 349,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectLiteralCast.ObjectLiteralCast#366",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.jscomp.DiagnosticType)",
    "snippet": " ObjectLiteralCast(String typeName, Node objectNode,\n        DiagnosticType diagnosticType) {\n      this.typeName \u003d typeName;\n      this.objectNode \u003d objectNode;\n      this.diagnosticType \u003d diagnosticType;\n    }",
    "begin_line": 366,
    "end_line": 371,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AssertionFunctionSpec.AssertionFunctionSpec#383",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec(java.lang.String)",
    "snippet": "public AssertionFunctionSpec(String functionName) {\n      this(functionName, null);\n    }",
    "begin_line": 383,
    "end_line": 385,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AssertionFunctionSpec.AssertionFunctionSpec#387",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec(java.lang.String, com.google.javascript.rhino.jstype.JSTypeNative)",
    "snippet": "public AssertionFunctionSpec(String functionName,\n        JSTypeNative assertedType) {\n      this.functionName \u003d functionName;\n      this.assertedType \u003d assertedType;\n    }",
    "begin_line": 387,
    "end_line": 391,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AssertionFunctionSpec.getFunctionName#394",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.getFunctionName()",
    "snippet": "public String getFunctionName() {\n      return functionName;\n    }",
    "begin_line": 394,
    "end_line": 396,
    "comment": "/** \n * Returns the name of the function. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AssertionFunctionSpec.getAssertedParam#402",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.getAssertedParam(com.google.javascript.rhino.Node)",
    "snippet": "public Node getAssertedParam(Node firstParam) {\n      return firstParam;\n    }",
    "begin_line": 402,
    "end_line": 404,
    "comment": "/** \n * Returns the parameter of the assertion function that is being checked.\n * @param firstParam The first parameter of the function call.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AssertionFunctionSpec.getAssertedType#410",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConvention.java",
    "class_name": "com.google.javascript.jscomp.CodingConvention",
    "signature": "com.google.javascript.jscomp.CodingConvention.getAssertedType(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": "public JSType getAssertedType(Node call, JSTypeRegistry registry) {\n      return assertedType !\u003d null ? registry.getNativeType(assertedType) : null;\n    }",
    "begin_line": 410,
    "end_line": 412,
    "comment": "/** \n * Returns the type for a type assertion, or null if the function asserts that the node must not be null or undefined.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConventions.CodingConventions#38",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.CodingConventions()",
    "snippet": "private CodingConventions() {}",
    "begin_line": 38,
    "end_line": 38,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodingConventions.getDefault#41",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getDefault()",
    "snippet": "public static CodingConvention getDefault() {\n    return new DefaultCodingConvention();\n  }",
    "begin_line": 41,
    "end_line": 43,
    "comment": "/** \n * Gets the default coding convention. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.Proxy#59",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.Proxy(com.google.javascript.jscomp.CodingConvention)",
    "snippet": "protected Proxy(CodingConvention convention) {\n      this.nextConvention \u003d convention;\n    }",
    "begin_line": 59,
    "end_line": 61,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.isConstant#64",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isConstant(java.lang.String)",
    "snippet": "@Override\n    public boolean isConstant(String variableName) {\n      return nextConvention.isConstant(variableName);\n    }",
    "begin_line": 64,
    "end_line": 66,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.isConstantKey#68",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isConstantKey(java.lang.String)",
    "snippet": "@Override public boolean isConstantKey(String keyName) {\n      return nextConvention.isConstantKey(keyName);\n    }",
    "begin_line": 68,
    "end_line": 70,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.isValidEnumKey#73",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isValidEnumKey(java.lang.String)",
    "snippet": "@Override\n    public boolean isValidEnumKey(String key) {\n      return nextConvention.isValidEnumKey(key);\n    }",
    "begin_line": 73,
    "end_line": 75,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.isOptionalParameter#78",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isOptionalParameter(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean isOptionalParameter(Node parameter) {\n      return nextConvention.isOptionalParameter(parameter);\n    }",
    "begin_line": 78,
    "end_line": 80,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.isVarArgsParameter#83",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isVarArgsParameter(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean isVarArgsParameter(Node parameter) {\n      return nextConvention.isVarArgsParameter(parameter);\n    }",
    "begin_line": 83,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.isExported#88",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isExported(java.lang.String, boolean)",
    "snippet": "@Override\n    public boolean isExported(String name, boolean local) {\n      return nextConvention.isExported(name, local);\n    }",
    "begin_line": 88,
    "end_line": 90,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.isExported#94",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isExported(java.lang.String)",
    "snippet": "@Override\n    public final boolean isExported(String name) {\n      return isExported(name, false) || isExported(name, true);\n    }",
    "begin_line": 94,
    "end_line": 96,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.isPrivate#99",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isPrivate(java.lang.String)",
    "snippet": "@Override\n    public boolean isPrivate(String name) {\n      return nextConvention.isPrivate(name);\n    }",
    "begin_line": 99,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.getClassesDefinedByCall#104",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getClassesDefinedByCall(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public SubclassRelationship getClassesDefinedByCall(Node callNode) {\n      return nextConvention.getClassesDefinedByCall(callNode);\n    }",
    "begin_line": 104,
    "end_line": 106,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.isSuperClassReference#109",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isSuperClassReference(java.lang.String)",
    "snippet": "@Override\n    public boolean isSuperClassReference(String propertyName) {\n      return nextConvention.isSuperClassReference(propertyName);\n    }",
    "begin_line": 109,
    "end_line": 111,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.extractClassNameIfProvide#114",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.extractClassNameIfProvide(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public String extractClassNameIfProvide(Node node, Node parent) {\n      return nextConvention.extractClassNameIfProvide(node, parent);\n    }",
    "begin_line": 114,
    "end_line": 116,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.extractClassNameIfRequire#119",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.extractClassNameIfRequire(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public String extractClassNameIfRequire(Node node, Node parent) {\n      return nextConvention.extractClassNameIfRequire(node, parent);\n    }",
    "begin_line": 119,
    "end_line": 121,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.getExportPropertyFunction#124",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getExportPropertyFunction()",
    "snippet": "@Override\n    public String getExportPropertyFunction() {\n      return nextConvention.getExportPropertyFunction();\n    }",
    "begin_line": 124,
    "end_line": 126,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.getExportSymbolFunction#129",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getExportSymbolFunction()",
    "snippet": "@Override\n    public String getExportSymbolFunction() {\n      return nextConvention.getExportSymbolFunction();\n    }",
    "begin_line": 129,
    "end_line": 131,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.identifyTypeDeclarationCall#134",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.identifyTypeDeclarationCall(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public List\u003cString\u003e identifyTypeDeclarationCall(Node n) {\n      return nextConvention.identifyTypeDeclarationCall(n);\n    }",
    "begin_line": 134,
    "end_line": 136,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.applySubclassRelationship#139",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.applySubclassRelationship(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.jscomp.CodingConvention.SubclassType)",
    "snippet": "@Override\n    public void applySubclassRelationship(FunctionType parentCtor,\n        FunctionType childCtor, SubclassType type) {\n      nextConvention.applySubclassRelationship(\n          parentCtor, childCtor, type);\n    }",
    "begin_line": 139,
    "end_line": 143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.getAbstractMethodName#146",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getAbstractMethodName()",
    "snippet": "@Override\n    public String getAbstractMethodName() {\n      return nextConvention.getAbstractMethodName();\n    }",
    "begin_line": 146,
    "end_line": 148,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.getSingletonGetterClassName#151",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getSingletonGetterClassName(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public String getSingletonGetterClassName(Node callNode) {\n      return nextConvention.getSingletonGetterClassName(callNode);\n    }",
    "begin_line": 151,
    "end_line": 153,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.applySingletonGetter#156",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.applySingletonGetter(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "@Override\n    public void applySingletonGetter(FunctionType functionType,\n        FunctionType getterType, ObjectType objectType) {\n      nextConvention.applySingletonGetter(\n          functionType, getterType, objectType);\n    }",
    "begin_line": 156,
    "end_line": 160,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.isInlinableFunction#163",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isInlinableFunction(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean isInlinableFunction(Node n) {\n      return nextConvention.isInlinableFunction(n);\n    }",
    "begin_line": 163,
    "end_line": 165,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.getDelegateRelationship#168",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getDelegateRelationship(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public DelegateRelationship getDelegateRelationship(Node callNode) {\n      return nextConvention.getDelegateRelationship(callNode);\n    }",
    "begin_line": 168,
    "end_line": 170,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.applyDelegateRelationship#173",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.applyDelegateRelationship(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "@Override\n    public void applyDelegateRelationship(\n        ObjectType delegateSuperclass, ObjectType delegateBase,\n        ObjectType delegator, FunctionType delegateProxy,\n        FunctionType findDelegate) {\n      nextConvention.applyDelegateRelationship(\n          delegateSuperclass, delegateBase, delegator,\n          delegateProxy, findDelegate);\n    }",
    "begin_line": 173,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.getDelegateSuperclassName#183",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getDelegateSuperclassName()",
    "snippet": "@Override\n    public String getDelegateSuperclassName() {\n      return nextConvention.getDelegateSuperclassName();\n    }",
    "begin_line": 183,
    "end_line": 185,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.checkForCallingConventionDefiningCalls#188",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.checkForCallingConventionDefiningCalls(com.google.javascript.rhino.Node, java.util.Map\u003cjava.lang.String,java.lang.String\u003e)",
    "snippet": "@Override\n    public void checkForCallingConventionDefiningCalls(\n        Node n, Map\u003cString, String\u003e delegateCallingConventions) {\n      nextConvention.checkForCallingConventionDefiningCalls(\n          n, delegateCallingConventions);\n    }",
    "begin_line": 188,
    "end_line": 192,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.defineDelegateProxyPrototypeProperties#195",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.defineDelegateProxyPrototypeProperties(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e, java.util.List\u003ccom.google.javascript.rhino.jstype.ObjectType\u003e, java.util.Map\u003cjava.lang.String,java.lang.String\u003e)",
    "snippet": "@Override\n    public void defineDelegateProxyPrototypeProperties(\n        JSTypeRegistry registry, StaticScope\u003cJSType\u003e scope,\n        List\u003cObjectType\u003e delegateProxyPrototypes,\n        Map\u003cString, String\u003e delegateCallingConventions) {\n      nextConvention.defineDelegateProxyPrototypeProperties(\n          registry, scope, delegateProxyPrototypes, delegateCallingConventions);\n    }",
    "begin_line": 195,
    "end_line": 201,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.getGlobalObject#204",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getGlobalObject()",
    "snippet": "@Override\n    public String getGlobalObject() {\n      return nextConvention.getGlobalObject();\n    }",
    "begin_line": 204,
    "end_line": 206,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.getAssertionFunctions#209",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getAssertionFunctions()",
    "snippet": "@Override\n    public Collection\u003cAssertionFunctionSpec\u003e getAssertionFunctions() {\n      return nextConvention.getAssertionFunctions();\n    }",
    "begin_line": 209,
    "end_line": 211,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.describeFunctionBind#214",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.describeFunctionBind(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public Bind describeFunctionBind(Node n) {\n      return describeFunctionBind(n, false);\n    }",
    "begin_line": 214,
    "end_line": 216,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.describeFunctionBind#219",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.describeFunctionBind(com.google.javascript.rhino.Node, boolean)",
    "snippet": "@Override\n    public Bind describeFunctionBind(Node n, boolean useTypeInfo) {\n      return nextConvention.describeFunctionBind(n, useTypeInfo);\n    }",
    "begin_line": 219,
    "end_line": 221,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.isPropertyTestFunction#224",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isPropertyTestFunction(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean isPropertyTestFunction(Node call) {\n      return nextConvention.isPropertyTestFunction(call);\n    }",
    "begin_line": 224,
    "end_line": 226,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.isPrototypeAlias#229",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isPrototypeAlias(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean isPrototypeAlias(Node getProp) {\n      return false;\n    }",
    "begin_line": 229,
    "end_line": 231,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.getObjectLiteralCast#234",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getObjectLiteralCast(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public ObjectLiteralCast getObjectLiteralCast(Node callNode) {\n      return nextConvention.getObjectLiteralCast(callNode);\n    }",
    "begin_line": 234,
    "end_line": 236,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Proxy.getIndirectlyDeclaredProperties#239",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getIndirectlyDeclaredProperties()",
    "snippet": "@Override\n    public Collection\u003cString\u003e getIndirectlyDeclaredProperties() {\n      return nextConvention.getIndirectlyDeclaredProperties();\n    }",
    "begin_line": 239,
    "end_line": 241,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.isConstant#254",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isConstant(java.lang.String)",
    "snippet": "@Override\n    public boolean isConstant(String variableName) {\n      return false;\n    }",
    "begin_line": 254,
    "end_line": 256,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.isConstantKey#259",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isConstantKey(java.lang.String)",
    "snippet": "@Override\n    public boolean isConstantKey(String variableName) {\n      return false;\n    }",
    "begin_line": 259,
    "end_line": 261,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.isValidEnumKey#264",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isValidEnumKey(java.lang.String)",
    "snippet": "@Override\n    public boolean isValidEnumKey(String key) {\n      return key !\u003d null \u0026\u0026 key.length() \u003e 0;\n    }",
    "begin_line": 264,
    "end_line": 266,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.isOptionalParameter#269",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isOptionalParameter(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean isOptionalParameter(Node parameter) {\n      // be as lax as possible, but this must be mutually exclusive from\n      // var_args parameters.\n      return !isVarArgsParameter(parameter);\n    }",
    "begin_line": 269,
    "end_line": 273,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.isVarArgsParameter#276",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isVarArgsParameter(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean isVarArgsParameter(Node parameter) {\n      // be as lax as possible\n      return parameter.getParent().getLastChild() \u003d\u003d parameter;\n    }",
    "begin_line": 276,
    "end_line": 279,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.isExported#282",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isExported(java.lang.String, boolean)",
    "snippet": "@Override\n    public boolean isExported(String name, boolean local) {\n      return local \u0026\u0026 name.startsWith(\"$super\");\n    }",
    "begin_line": 282,
    "end_line": 284,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.isExported#287",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isExported(java.lang.String)",
    "snippet": "@Override\n    public boolean isExported(String name) {\n      return isExported(name, false) || isExported(name, true);\n    }",
    "begin_line": 287,
    "end_line": 289,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.isPrivate#292",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isPrivate(java.lang.String)",
    "snippet": "@Override\n    public boolean isPrivate(String name) {\n      return false;\n    }",
    "begin_line": 292,
    "end_line": 294,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.getClassesDefinedByCall#297",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getClassesDefinedByCall(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public SubclassRelationship getClassesDefinedByCall(Node callNode) {\n      return null;\n    }",
    "begin_line": 297,
    "end_line": 299,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.isSuperClassReference#302",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isSuperClassReference(java.lang.String)",
    "snippet": "@Override\n    public boolean isSuperClassReference(String propertyName) {\n      return false;\n    }",
    "begin_line": 302,
    "end_line": 304,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.extractClassNameIfProvide#307",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.extractClassNameIfProvide(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public String extractClassNameIfProvide(Node node, Node parent) {\n      String message \u003d \"only implemented in GoogleCodingConvention\";\n      throw new UnsupportedOperationException(message);\n    }",
    "begin_line": 307,
    "end_line": 310,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.extractClassNameIfRequire#313",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.extractClassNameIfRequire(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public String extractClassNameIfRequire(Node node, Node parent) {\n      String message \u003d \"only implemented in GoogleCodingConvention\";\n      throw new UnsupportedOperationException(message);\n    }",
    "begin_line": 313,
    "end_line": 316,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.getExportPropertyFunction#319",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getExportPropertyFunction()",
    "snippet": "@Override\n    public String getExportPropertyFunction() {\n      return null;\n    }",
    "begin_line": 319,
    "end_line": 321,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.getExportSymbolFunction#324",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getExportSymbolFunction()",
    "snippet": "@Override\n    public String getExportSymbolFunction() {\n      return null;\n    }",
    "begin_line": 324,
    "end_line": 326,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.identifyTypeDeclarationCall#329",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.identifyTypeDeclarationCall(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public List\u003cString\u003e identifyTypeDeclarationCall(Node n) {\n      return null;\n    }",
    "begin_line": 329,
    "end_line": 331,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.applySubclassRelationship#334",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.applySubclassRelationship(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.jscomp.CodingConvention.SubclassType)",
    "snippet": "@Override\n    public void applySubclassRelationship(FunctionType parentCtor,\n        FunctionType childCtor, SubclassType type) {\n      // do nothing\n    }",
    "begin_line": 334,
    "end_line": 337,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.getAbstractMethodName#340",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getAbstractMethodName()",
    "snippet": "@Override\n    public String getAbstractMethodName() {\n      return null;\n    }",
    "begin_line": 340,
    "end_line": 342,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.getSingletonGetterClassName#345",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getSingletonGetterClassName(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public String getSingletonGetterClassName(Node callNode) {\n      return null;\n    }",
    "begin_line": 345,
    "end_line": 347,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.applySingletonGetter#350",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.applySingletonGetter(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "@Override\n    public void applySingletonGetter(FunctionType functionType,\n        FunctionType getterType, ObjectType objectType) {\n      // do nothing.\n    }",
    "begin_line": 350,
    "end_line": 353,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.isInlinableFunction#356",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isInlinableFunction(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean isInlinableFunction(Node n) {\n      Preconditions.checkState(n.isFunction());\n      return true;\n    }",
    "begin_line": 356,
    "end_line": 359,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.getDelegateRelationship#362",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getDelegateRelationship(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public DelegateRelationship getDelegateRelationship(Node callNode) {\n      return null;\n    }",
    "begin_line": 362,
    "end_line": 364,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.applyDelegateRelationship#367",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.applyDelegateRelationship(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "@Override\n    public void applyDelegateRelationship(\n        ObjectType delegateSuperclass, ObjectType delegateBase,\n        ObjectType delegator, FunctionType delegateProxy,\n        FunctionType findDelegate) {\n      // do nothing.\n    }",
    "begin_line": 367,
    "end_line": 372,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.getDelegateSuperclassName#375",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getDelegateSuperclassName()",
    "snippet": "@Override\n    public String getDelegateSuperclassName() {\n      return null;\n    }",
    "begin_line": 375,
    "end_line": 377,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.checkForCallingConventionDefiningCalls#380",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.checkForCallingConventionDefiningCalls(com.google.javascript.rhino.Node, java.util.Map\u003cjava.lang.String,java.lang.String\u003e)",
    "snippet": "@Override\n    public void checkForCallingConventionDefiningCalls(Node n,\n        Map\u003cString, String\u003e delegateCallingConventions) {\n      // do nothing.\n    }",
    "begin_line": 380,
    "end_line": 383,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.defineDelegateProxyPrototypeProperties#386",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.defineDelegateProxyPrototypeProperties(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e, java.util.List\u003ccom.google.javascript.rhino.jstype.ObjectType\u003e, java.util.Map\u003cjava.lang.String,java.lang.String\u003e)",
    "snippet": "@Override\n    public void defineDelegateProxyPrototypeProperties(\n        JSTypeRegistry registry, StaticScope\u003cJSType\u003e scope,\n        List\u003cObjectType\u003e delegateProxyPrototypes,\n        Map\u003cString, String\u003e delegateCallingConventions) {\n      // do nothing.\n    }",
    "begin_line": 386,
    "end_line": 391,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.getGlobalObject#394",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getGlobalObject()",
    "snippet": "@Override\n    public String getGlobalObject() {\n      return \"window\";\n    }",
    "begin_line": 394,
    "end_line": 396,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.isPropertyTestFunction#399",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isPropertyTestFunction(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean isPropertyTestFunction(Node call) {\n      return false;\n    }",
    "begin_line": 399,
    "end_line": 401,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.isPrototypeAlias#404",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.isPrototypeAlias(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean isPrototypeAlias(Node getProp) {\n      return false;\n    }",
    "begin_line": 404,
    "end_line": 406,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.getObjectLiteralCast#409",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getObjectLiteralCast(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public ObjectLiteralCast getObjectLiteralCast(Node callNode) {\n      return null;\n    }",
    "begin_line": 409,
    "end_line": 411,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.getAssertionFunctions#414",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getAssertionFunctions()",
    "snippet": "@Override\n    public Collection\u003cAssertionFunctionSpec\u003e getAssertionFunctions() {\n      return Collections.emptySet();\n    }",
    "begin_line": 414,
    "end_line": 416,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.describeFunctionBind#419",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.describeFunctionBind(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public Bind describeFunctionBind(Node n) {\n      return describeFunctionBind(n, false);\n    }",
    "begin_line": 419,
    "end_line": 421,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.describeFunctionBind#424",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.describeFunctionBind(com.google.javascript.rhino.Node, boolean)",
    "snippet": "@Override\n    public Bind describeFunctionBind(Node n, boolean useTypeInfo) {\n      if (!n.isCall()) {\n        return null;\n      }\n\n      Node callTarget \u003d n.getFirstChild();\n      String name \u003d callTarget.getQualifiedName();\n      if (name !\u003d null) {\n        if (name.equals(\"Function.prototype.bind.call\")) {\n          // goog.bind(fn, self, args...);\n          Node fn \u003d callTarget.getNext();\n          if (fn \u003d\u003d null) {\n            return null;\n          }\n          Node thisValue \u003d safeNext(fn);\n          Node parameters \u003d safeNext(thisValue);\n          return new Bind(fn, thisValue, parameters);\n        }\n      }\n\n      if (callTarget.isGetProp()\n          \u0026\u0026 callTarget.getLastChild().getString().equals(\"bind\")) {\n        Node maybeFn \u003d callTarget.getFirstChild();\n        JSType maybeFnType \u003d maybeFn.getJSType();\n        FunctionType fnType \u003d null;\n        if (useTypeInfo \u0026\u0026 maybeFnType !\u003d null) {\n          fnType \u003d maybeFnType.restrictByNotNullOrUndefined()\n              .toMaybeFunctionType();\n        }\n\n        if (fnType !\u003d null || maybeFn.isFunction()) {\n          // (function(){}).bind(self, args...);\n          Node thisValue \u003d callTarget.getNext();\n          Node parameters \u003d safeNext(thisValue);\n          return new Bind(maybeFn, thisValue, parameters);\n        }\n      }\n\n      return null;\n    }",
    "begin_line": 424,
    "end_line": 463,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.getIndirectlyDeclaredProperties#466",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.getIndirectlyDeclaredProperties()",
    "snippet": "@Override\n    public Collection\u003cString\u003e getIndirectlyDeclaredProperties() {\n      return ImmutableList.of();\n    }",
    "begin_line": 466,
    "end_line": 468,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultCodingConvention.safeNext#470",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CodingConventions.java",
    "class_name": "com.google.javascript.jscomp.CodingConventions",
    "signature": "com.google.javascript.jscomp.CodingConventions.safeNext(com.google.javascript.rhino.Node)",
    "snippet": "private Node safeNext(Node n) {\n      if (n !\u003d null) {\n        return n.getNext();\n      }\n      return null;\n    }",
    "begin_line": 470,
    "end_line": 475,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.newThread#197",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.newThread(java.lang.Runnable)",
    "snippet": "@Override public Thread newThread(Runnable r) {\n      return new Thread(null, r, \"jscompiler\", COMPILER_STACK_SIZE);\n    }",
    "begin_line": 197,
    "end_line": 199,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.Compiler#229",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.Compiler()",
    "snippet": "public Compiler() {\n    this((PrintStream) null);\n  }",
    "begin_line": 229,
    "end_line": 231,
    "comment": "/** \n * Creates a Compiler that reports errors and warnings to its logger.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.Compiler#237",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.Compiler(java.io.PrintStream)",
    "snippet": "public Compiler(PrintStream stream) {\n    addChangeHandler(recentChange);\n    outStream \u003d stream;\n  }",
    "begin_line": 237,
    "end_line": 240,
    "comment": "/** \n * Creates n Compiler that reports errors and warnings to an output stream.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.Compiler#245",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.Compiler(com.google.javascript.jscomp.ErrorManager)",
    "snippet": "public Compiler(ErrorManager errorManager) {\n    this();\n    setErrorManager(errorManager);\n  }",
    "begin_line": 245,
    "end_line": 248,
    "comment": "/** \n * Creates a Compiler that uses a custom error manager.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.setErrorManager#255",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.setErrorManager(com.google.javascript.jscomp.ErrorManager)",
    "snippet": "public void setErrorManager(ErrorManager errorManager) {\n    Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");\n    this.errorManager \u003d errorManager;\n  }",
    "begin_line": 255,
    "end_line": 259,
    "comment": "/** \n * Sets the error manager.\n * @param errorManager the error manager, it cannot be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.createMessageFormatter#265",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.createMessageFormatter()",
    "snippet": "private MessageFormatter createMessageFormatter() {\n    boolean colorize \u003d options.shouldColorizeErrorOutput();\n    return options.errorFormat.toFormatter(this, colorize);\n  }",
    "begin_line": 265,
    "end_line": 268,
    "comment": "/** \n * Creates a message formatter instance corresponding to the value of {@link CompilerOptions}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.initOptions#274",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.initOptions(com.google.javascript.jscomp.CompilerOptions)",
    "snippet": "public void initOptions(CompilerOptions options) {\n    this.options \u003d options;\n    if (errorManager \u003d\u003d null) {\n      if (outStream \u003d\u003d null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer \u003d\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes \u003d true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes \u003d false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off the\n      // parser type warnings.\n      options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    if (options.checkGlobalThisLevel.isOn() \u0026\u0026\n        !options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    if (options.getLanguageIn() \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT) {\n      options.setWarningLevel(\n          DiagnosticGroups.ES5_STRICT,\n          CheckLevel.ERROR);\n    }\n\n    // Initialize the warnings guard.\n    List\u003cWarningsGuard\u003e guards \u003d Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard());\n\n    ComposeWarningsGuard composedGuards \u003d new ComposeWarningsGuard(guards);\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn\u0027t crash. It also\n    // checks the externs file for validity. If you don\u0027t want to warn\n    // about missing variable declarations, we shut that specific\n    // error off.\n    if (!options.checkSymbols \u0026\u0026\n        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n      composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n\n    this.warningsGuard \u003d composedGuards;\n  }",
    "begin_line": 274,
    "end_line": 337,
    "comment": "/** \n * Initialize the compiler options. Only necessary if you\u0027re not doing a normal compile() job.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.init#344",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.init(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.CompilerOptions)",
    "snippet": "@Deprecated\n  public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n      CompilerOptions options) {\n    init(Lists.\u003cJSSourceFile\u003enewArrayList(externs),\n        Lists.\u003cJSSourceFile\u003enewArrayList(inputs), options);\n  }",
    "begin_line": 344,
    "end_line": 348,
    "comment": "/** \n * Initializes the instance state needed for a compile job.\n * @deprecated Convert your arrays to lists and use the list-based API.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.init#353",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.init(java.util.List\u003cT1\u003e, java.util.List\u003cT2\u003e, com.google.javascript.jscomp.CompilerOptions)",
    "snippet": "public \u003cT1 extends SourceFile, T2 extends SourceFile\u003e void init(\n      List\u003cT1\u003e externs,\n      List\u003cT2\u003e inputs,\n      CompilerOptions options) {\n    JSModule module \u003d new JSModule(SINGLETON_MODULE_NAME);\n    for (SourceFile input : inputs) {\n      module.add(input);\n    }\n\n    initModules(externs, Lists.newArrayList(module), options);\n  }",
    "begin_line": 353,
    "end_line": 363,
    "comment": "/** \n * Initializes the instance state needed for a compile job.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.init#371",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.init(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.CompilerOptions)",
    "snippet": "@Deprecated\n  public void init(JSSourceFile[] externs, JSModule[] modules,\n      CompilerOptions options) {\n    initModules(Lists.\u003cSourceFile\u003enewArrayList(externs),\n         Lists.\u003cJSModule\u003enewArrayList(modules), options);\n  }",
    "begin_line": 371,
    "end_line": 375,
    "comment": "/** \n * Initializes the instance state needed for a compile job if the sources are in modules.\n * @deprecated Convert your arrays to lists and use the list-based API.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.initModules#381",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.initModules(java.util.List\u003cT\u003e, java.util.List\u003ccom.google.javascript.jscomp.JSModule\u003e, com.google.javascript.jscomp.CompilerOptions)",
    "snippet": "public \u003cT extends SourceFile\u003e void initModules(\n      List\u003cT\u003e externs, List\u003cJSModule\u003e modules, CompilerOptions options) {\n    initOptions(options);\n\n    checkFirstModule(modules);\n    fillEmptyModules(modules);\n\n    this.externs \u003d makeCompilerInput(externs, true);\n\n    // Generate the module graph, and report any errors in the module\n    // specification as errors.\n    this.modules \u003d modules;\n    if (modules.size() \u003e 1) {\n      try {\n        this.moduleGraph \u003d new JSModuleGraph(modules);\n      } catch (JSModuleGraph.ModuleDependenceException e) {\n        // problems with the module format.  Report as an error.  The\n        // message gives all details.\n        report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));\n        return;\n      }\n    } else {\n      this.moduleGraph \u003d null;\n    }\n\n    this.inputs \u003d getAllInputsFromModules(modules);\n    initBasedOnOptions();\n\n    initInputsByIdMap();\n  }",
    "begin_line": 381,
    "end_line": 411,
    "comment": "/** \n * Initializes the instance state needed for a compile job if the sources are in modules.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.initBasedOnOptions#416",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.initBasedOnOptions()",
    "snippet": "private void initBasedOnOptions() {\n    // Create the source map if necessary.\n    if (options.sourceMapOutputPath !\u003d null) {\n      sourceMap \u003d options.sourceMapFormat.getInstance();\n      sourceMap.setPrefixMappings(options.sourceMapLocationMappings);\n    }\n  }",
    "begin_line": 416,
    "end_line": 422,
    "comment": "/** \n * Do any initialization that is dependent on the compiler options.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.makeCompilerInput#424",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.makeCompilerInput(java.util.List\u003cT\u003e, boolean)",
    "snippet": "private \u003cT extends SourceFile\u003e List\u003cCompilerInput\u003e makeCompilerInput(\n      List\u003cT\u003e files, boolean isExtern) {\n    List\u003cCompilerInput\u003e inputs \u003d Lists.newArrayList();\n    for (T file : files) {\n      inputs.add(new CompilerInput(file, isExtern));\n    }\n    return inputs;\n  }",
    "begin_line": 424,
    "end_line": 431,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.checkFirstModule#445",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.checkFirstModule(java.util.List\u003ccom.google.javascript.jscomp.JSModule\u003e)",
    "snippet": "private void checkFirstModule(List\u003cJSModule\u003e modules) {\n    if (modules.isEmpty()) {\n      report(JSError.make(EMPTY_MODULE_LIST_ERROR));\n    } else if (modules.get(0).getInputs().isEmpty() \u0026\u0026 modules.size() \u003e 1) {\n      // The root module may only be empty if there is exactly 1 module.\n      report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));\n    }\n  }",
    "begin_line": 445,
    "end_line": 453,
    "comment": "/** \n * Verifies that at least one module has been provided and that the first one has at least one source code input.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.createFillFileName#459",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.createFillFileName(java.lang.String)",
    "snippet": "static String createFillFileName(String moduleName) {\n    return \"[\" + moduleName + \"]\";\n  }",
    "begin_line": 459,
    "end_line": 461,
    "comment": "/** \n * Empty modules get an empty \"fill\" file, so that we can move code into an empty module.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.fillEmptyModules#467",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.fillEmptyModules(java.util.List\u003ccom.google.javascript.jscomp.JSModule\u003e)",
    "snippet": "private static void fillEmptyModules(List\u003cJSModule\u003e modules) {\n    for (JSModule module : modules) {\n      if (module.getInputs().isEmpty()) {\n        module.add(SourceFile.fromCode(\n            createFillFileName(module.getName()), \"\"));\n      }\n    }\n  }",
    "begin_line": 467,
    "end_line": 474,
    "comment": "/** \n * Fill any empty modules with a place holder file. It makes any cross module motion easier.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.rebuildInputsFromModules#481",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.rebuildInputsFromModules()",
    "snippet": "public void rebuildInputsFromModules() {\n    inputs \u003d getAllInputsFromModules(modules);\n    initInputsByIdMap();\n  }",
    "begin_line": 481,
    "end_line": 484,
    "comment": "/** \n * Rebuilds the internal list of inputs by iterating over all modules. This is necessary if inputs have been added to or removed from a module after the  {@link #init(JSSourceFile[],JSModule[],CompilerOptions)} call.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.getAllInputsFromModules#490",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getAllInputsFromModules(java.util.List\u003ccom.google.javascript.jscomp.JSModule\u003e)",
    "snippet": "private static List\u003cCompilerInput\u003e getAllInputsFromModules(\n      List\u003cJSModule\u003e modules) {\n    List\u003cCompilerInput\u003e inputs \u003d Lists.newArrayList();\n    Map\u003cString, JSModule\u003e inputMap \u003d Maps.newHashMap();\n    for (JSModule module : modules) {\n      for (CompilerInput input : module.getInputs()) {\n        String inputName \u003d input.getName();\n\n        // NOTE(nicksantos): If an input is in more than one module,\n        // it will show up twice in the inputs list, and then we\n        // will get an error down the line.\n        inputs.add(input);\n        inputMap.put(inputName, module);\n      }\n    }\n    return inputs;\n  }",
    "begin_line": 490,
    "end_line": 506,
    "comment": "/** \n * Builds a single list of all module inputs. Verifies that it contains no duplicates.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.initInputsByIdMap#518",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.initInputsByIdMap()",
    "snippet": "void initInputsByIdMap() {\n    inputsById \u003d new HashMap\u003cInputId, CompilerInput\u003e();\n    for (CompilerInput input : externs) {\n      InputId id \u003d input.getInputId();\n      CompilerInput previous \u003d putCompilerInput(id, input);\n      if (previous !\u003d null) {\n        report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));\n      }\n    }\n    for (CompilerInput input : inputs) {\n      InputId id \u003d input.getInputId();\n      CompilerInput previous \u003d putCompilerInput(id, input);\n      if (previous !\u003d null) {\n        report(JSError.make(DUPLICATE_INPUT, input.getName()));\n      }\n    }\n  }",
    "begin_line": 518,
    "end_line": 534,
    "comment": "/** \n * Creates a map to make looking up an input by name fast. Also checks for duplicate inputs.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.compile#536",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.compile(com.google.javascript.jscomp.SourceFile, com.google.javascript.jscomp.SourceFile, com.google.javascript.jscomp.CompilerOptions)",
    "snippet": "public Result compile(\n      SourceFile extern, SourceFile input, CompilerOptions options) {\n     return compile(Lists.newArrayList(extern), Lists.newArrayList(input), options);\n  }",
    "begin_line": 536,
    "end_line": 539,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.compile#545",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.compile(com.google.javascript.jscomp.SourceFile, com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.CompilerOptions)",
    "snippet": "@Deprecated\n  public Result compile(\n      SourceFile extern, JSSourceFile[] input, CompilerOptions options) {\n     return compile(Lists.newArrayList(extern), Lists.newArrayList(input), options);\n  }",
    "begin_line": 545,
    "end_line": 548,
    "comment": "/** \n * @deprecated Convert your arrays to lists and use the list-based API.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.compile#555",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.compile(com.google.javascript.jscomp.JSSourceFile, com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.CompilerOptions)",
    "snippet": "@Deprecated\n  public Result compile(\n      JSSourceFile extern, JSModule[] modules, CompilerOptions options) {\n     return compileModules(\n         Lists.newArrayList(extern), Lists.newArrayList(modules), options);\n  }",
    "begin_line": 555,
    "end_line": 559,
    "comment": "/** \n * @deprecated Convert your arrays to lists and use the list-basedcompileModules method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.compile#567",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.compile(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.CompilerOptions)",
    "snippet": "@Deprecated\n  public Result compile(JSSourceFile[] externs,\n                        JSSourceFile[] inputs,\n                        CompilerOptions options) {\n    return compile(Lists.\u003cSourceFile\u003enewArrayList(externs),\n        Lists.\u003cSourceFile\u003enewArrayList(inputs),\n        options);\n  }",
    "begin_line": 567,
    "end_line": 573,
    "comment": "/** \n * Compiles a list of inputs.\n * @deprecated Convert your arrays to lists and use the list-based compilemethod.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.compile#578",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.compile(java.util.List\u003cT1\u003e, java.util.List\u003cT2\u003e, com.google.javascript.jscomp.CompilerOptions)",
    "snippet": "public \u003cT1 extends SourceFile, T2 extends SourceFile\u003e Result compile(\n      List\u003cT1\u003e externs, List\u003cT2\u003e inputs, CompilerOptions options) {\n    // The compile method should only be called once.\n    Preconditions.checkState(jsRoot \u003d\u003d null);\n\n    try {\n      init(externs, inputs, options);\n      if (hasErrors()) {\n        return getResult();\n      }\n      return compile();\n    } finally {\n      Tracer t \u003d newTracer(\"generateReport\");\n      errorManager.generateReport();\n      stopTracer(t, \"generateReport\");\n    }\n  }",
    "begin_line": 578,
    "end_line": 594,
    "comment": "/** \n * Compiles a list of inputs.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.compile#602",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.compile(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.CompilerOptions)",
    "snippet": "@Deprecated\n  public Result compile(JSSourceFile[] externs,\n                        JSModule[] modules,\n                        CompilerOptions options) {\n    return compileModules(Lists.\u003cSourceFile\u003enewArrayList(externs),\n        Lists.\u003cJSModule\u003enewArrayList(modules),\n        options);\n  }",
    "begin_line": 602,
    "end_line": 608,
    "comment": "/** \n * Compiles a list of modules.\n * @deprecated Convert your arrays to lists and use the list-basedcompileModules method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.compileModules#613",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.compileModules(java.util.List\u003cT\u003e, java.util.List\u003ccom.google.javascript.jscomp.JSModule\u003e, com.google.javascript.jscomp.CompilerOptions)",
    "snippet": "public \u003cT extends SourceFile\u003e Result compileModules(List\u003cT\u003e externs,\n      List\u003cJSModule\u003e modules, CompilerOptions options) {\n    // The compile method should only be called once.\n    Preconditions.checkState(jsRoot \u003d\u003d null);\n\n    try {\n      initModules(externs, modules, options);\n      if (hasErrors()) {\n        return getResult();\n      }\n      return compile();\n    } finally {\n      Tracer t \u003d newTracer(\"generateReport\");\n      errorManager.generateReport();\n      stopTracer(t, \"generateReport\");\n    }\n  }",
    "begin_line": 613,
    "end_line": 629,
    "comment": "/** \n * Compiles a list of modules.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.compile#631",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.compile()",
    "snippet": "private Result compile() {\n    return runInCompilerThread(new Callable\u003cResult\u003e() {\n      @Override\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n    });\n  }",
    "begin_line": 631,
    "end_line": 639,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.call#634",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.call()",
    "snippet": "@Override\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }",
    "begin_line": 634,
    "end_line": 637,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.disableThreads#645",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.disableThreads()",
    "snippet": "public void disableThreads() {\n    useThreads \u003d false;\n  }",
    "begin_line": 645,
    "end_line": 647,
    "comment": "/** \n * Disable threads. This is for clients that run on AppEngine and don\u0027t have threads.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.runInCompilerThread#650",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.runInCompilerThread(java.util.concurrent.Callable\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n  \u003cT\u003e T runInCompilerThread(final Callable\u003cT\u003e callable) {\n    final boolean dumpTraceReport \u003d options !\u003d null \u0026\u0026 options.tracer.isOn();\n    T result \u003d null;\n    final Throwable[] exception \u003d new Throwable[1];\n    Callable\u003cT\u003e bootCompilerThread \u003d new Callable\u003cT\u003e() {\n      @Override\n      public T call() {\n        try {\n          compilerThread \u003d Thread.currentThread();\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          return callable.call();\n        } catch (Throwable e) {\n          exception[0] \u003d e;\n        } finally {\n          compilerThread \u003d null;\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n            tracker.outputTracerReport(outStream \u003d\u003d null ?\n                System.out : outStream);\n          }\n        }\n        return null;\n      }\n    };\n\n    Preconditions.checkState(\n        compilerThread \u003d\u003d null || compilerThread \u003d\u003d Thread.currentThread(),\n        \"Please do not share the Compiler across threads\");\n\n    // If the compiler thread is available, use it.\n    if (useThreads \u0026\u0026 compilerThread \u003d\u003d null) {\n      try {\n        result \u003d compilerExecutor.submit(bootCompilerThread).get();\n      } catch (InterruptedException e) {\n        throw Throwables.propagate(e);\n      } catch (ExecutionException e) {\n        throw Throwables.propagate(e);\n      }\n    } else {\n      try {\n        result \u003d callable.call();\n      } catch (Exception e) {\n        exception[0] \u003d e;\n      }\n    }\n\n    // Pass on any exception caught by the runnable object.\n    if (exception[0] !\u003d null) {\n      throw new RuntimeException(exception[0]);\n    }\n\n    return result;\n  }",
    "begin_line": 650,
    "end_line": 704,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.call#656",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.call()",
    "snippet": "@Override\n      public T call() {\n        try {\n          compilerThread \u003d Thread.currentThread();\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          return callable.call();\n        } catch (Throwable e) {\n          exception[0] \u003d e;\n        } finally {\n          compilerThread \u003d null;\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n            tracker.outputTracerReport(outStream \u003d\u003d null ?\n                System.out : outStream);\n          }\n        }\n        return null;\n      }",
    "begin_line": 656,
    "end_line": 674,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.compileInternal#706",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.compileInternal()",
    "snippet": "private void compileInternal() {\n    setProgress(0.0, null);\n    parse();\n    // 15 percent of the work is assumed to be for parsing (based on some\n    // minimal analysis on big JS projects, of course this depends on options)\n    setProgress(0.15, \"parse\");\n    if (hasErrors()) {\n      return;\n    }\n\n    if (!precheck()) {\n      return;\n    }\n\n    if (options.nameAnonymousFunctionsOnly) {\n      // TODO(nicksantos): Move this into an instrument() phase maybe?\n      check();\n      return;\n    }\n\n    if (!options.skipAllPasses) {\n      check();\n      if (hasErrors()) {\n        return;\n      }\n\n      if (options.isExternExportsEnabled()\n          || options.externExportsPath !\u003d null) {\n        externExports();\n      }\n\n      // IDE-mode is defined to stop here, before the heavy rewriting begins.\n      if (!options.ideMode) {\n        optimize();\n      }\n    }\n\n    if (options.recordFunctionInformation) {\n      recordFunctionInformation();\n    }\n\n    if (options.devMode \u003d\u003d DevMode.START_AND_END) {\n      runSanityCheck();\n    }\n    setProgress(1.0, \"recordFunctionInformation\");\n  }",
    "begin_line": 706,
    "end_line": 751,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.parse#753",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.parse()",
    "snippet": "public void parse() {\n    parseInputs();\n  }",
    "begin_line": 753,
    "end_line": 755,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.getPassConfig#757",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getPassConfig()",
    "snippet": "PassConfig getPassConfig() {\n    if (passes \u003d\u003d null) {\n      passes \u003d createPassConfigInternal();\n    }\n    return passes;\n  }",
    "begin_line": 757,
    "end_line": 762,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.createPassConfigInternal#768",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.createPassConfigInternal()",
    "snippet": "PassConfig createPassConfigInternal() {\n    return new DefaultPassConfig(options);\n  }",
    "begin_line": 768,
    "end_line": 770,
    "comment": "/** \n * Create the passes object. Clients should use setPassConfig instead of overriding this.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.setPassConfig#777",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.setPassConfig(com.google.javascript.jscomp.PassConfig)",
    "snippet": "public void setPassConfig(PassConfig passes) {\n    // Important to check for null because if setPassConfig(null) is\n    // called before this.passes is set, getPassConfig() will create a\n    // new PassConfig object and use that, which is probably not what\n    // the client wanted since he or she probably meant to use their\n    // own PassConfig object.\n    Preconditions.checkNotNull(passes);\n\n    if (this.passes !\u003d null) {\n      throw new IllegalStateException(\"this.passes has already been assigned\");\n    }\n    this.passes \u003d passes;\n  }",
    "begin_line": 777,
    "end_line": 789,
    "comment": "/** \n * @param passes The PassConfig to use with this Compiler.\n * @throws NullPointerException if passes is null\n * @throws IllegalStateException if this.passes has already been assigned\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.precheck#797",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.precheck()",
    "snippet": "boolean precheck() {\n    return true;\n  }",
    "begin_line": 797,
    "end_line": 799,
    "comment": "/** \n * Carry out any special checks or procedures that need to be done before proceeding with rest of the compilation process.\n * @return true, to continue with compilation\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.check#801",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.check()",
    "snippet": "public void check() {\n    runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);\n\n    // We are currently only interested in check-passes for progress reporting\n    // as it is used for IDEs, that\u0027s why the maximum progress is set to 1.0.\n    PhaseOptimizer phaseOptimizer \u003d new PhaseOptimizer(this, tracker,\n        new PhaseOptimizer.ProgressRange(getProgress(), 1.0));\n    if (options.devMode \u003d\u003d DevMode.EVERY_PASS) {\n      phaseOptimizer.setSanityCheck(sanityCheck);\n    }\n    phaseOptimizer.consume(getPassConfig().getChecks());\n    phaseOptimizer.process(externsRoot, jsRoot);\n    if (hasErrors()) {\n      return;\n    }\n\n    // TODO(nicksantos): clean this up. The flow here is too hard to follow.\n    if (options.nameAnonymousFunctionsOnly) {\n      return;\n    }\n\n    if (options.removeTryCatchFinally) {\n      removeTryCatchFinally();\n    }\n\n    if (options.getTweakProcessing().shouldStrip() ||\n        !options.stripTypes.isEmpty() ||\n        !options.stripNameSuffixes.isEmpty() ||\n        !options.stripTypePrefixes.isEmpty() ||\n        !options.stripNamePrefixes.isEmpty()) {\n      stripCode(options.stripTypes, options.stripNameSuffixes,\n          options.stripTypePrefixes, options.stripNamePrefixes);\n    }\n\n    runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);\n  }",
    "begin_line": 801,
    "end_line": 836,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.externExports#838",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.externExports()",
    "snippet": "private void externExports() {\n    logger.fine(\"Creating extern file for exports\");\n    startPass(\"externExports\");\n\n    ExternExportsPass pass \u003d new ExternExportsPass(this);\n    process(pass);\n\n    externExports \u003d pass.getGeneratedExterns();\n\n    endPass();\n  }",
    "begin_line": 838,
    "end_line": 848,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.process#851",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.process(com.google.javascript.jscomp.CompilerPass)",
    "snippet": "@Override\n  void process(CompilerPass p) {\n    p.process(externsRoot, jsRoot);\n  }",
    "begin_line": 851,
    "end_line": 853,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.create#858",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.create(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "@Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new SanityCheck(compiler);\n    }",
    "begin_line": 858,
    "end_line": 860,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.maybeSanityCheck#863",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.maybeSanityCheck()",
    "snippet": "private void maybeSanityCheck() {\n    if (options.devMode \u003d\u003d DevMode.EVERY_PASS) {\n      runSanityCheck();\n    }\n  }",
    "begin_line": 863,
    "end_line": 867,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.runSanityCheck#869",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.runSanityCheck()",
    "snippet": "private void runSanityCheck() {\n    sanityCheck.create(this).process(externsRoot, jsRoot);\n  }",
    "begin_line": 869,
    "end_line": 871,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.removeTryCatchFinally#876",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.removeTryCatchFinally()",
    "snippet": "void removeTryCatchFinally() {\n    logger.fine(\"Remove try/catch/finally\");\n    startPass(\"removeTryCatchFinally\");\n    RemoveTryCatch r \u003d new RemoveTryCatch(this);\n    process(r);\n    endPass();\n  }",
    "begin_line": 876,
    "end_line": 882,
    "comment": "/** \n * Removes try/catch/finally statements for easier debugging.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.stripCode#888",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.stripCode(java.util.Set\u003cjava.lang.String\u003e, java.util.Set\u003cjava.lang.String\u003e, java.util.Set\u003cjava.lang.String\u003e, java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "void stripCode(Set\u003cString\u003e stripTypes, Set\u003cString\u003e stripNameSuffixes,\n      Set\u003cString\u003e stripTypePrefixes, Set\u003cString\u003e stripNamePrefixes) {\n    logger.fine(\"Strip code\");\n    startPass(\"stripCode\");\n    StripCode r \u003d new StripCode(this, stripTypes, stripNameSuffixes,\n        stripTypePrefixes, stripNamePrefixes);\n    if (options.getTweakProcessing().shouldStrip()) {\n      r.enableTweakStripping();\n    }\n    process(r);\n    endPass();\n  }",
    "begin_line": 888,
    "end_line": 899,
    "comment": "/** \n * Strips code for smaller compiled code. This is useful for removing debug statements to prevent leaking them publicly.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.runCustomPasses#904",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime)",
    "snippet": "private void runCustomPasses(CustomPassExecutionTime executionTime) {\n    if (options.customPasses !\u003d null) {\n      Tracer t \u003d newTracer(\"runCustomPasses\");\n      try {\n        for (CompilerPass p : options.customPasses.get(executionTime)) {\n          process(p);\n        }\n      } finally {\n        stopTracer(t, \"runCustomPasses\");\n      }\n    }\n  }",
    "begin_line": 904,
    "end_line": 915,
    "comment": "/** \n * Runs custom passes that are designated to run at a particular time.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.startPass#923",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.startPass(java.lang.String)",
    "snippet": "void startPass(String passName) {\n    Preconditions.checkState(currentTracer \u003d\u003d null);\n    currentPassName \u003d passName;\n    currentTracer \u003d newTracer(passName);\n  }",
    "begin_line": 923,
    "end_line": 927,
    "comment": "/** \n * Marks the beginning of a pass.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.endPass#932",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.endPass()",
    "snippet": "void endPass() {\n    Preconditions.checkState(currentTracer !\u003d null,\n        \"Tracer should not be null at the end of a pass.\");\n    stopTracer(currentTracer, currentPassName);\n    String passToCheck \u003d currentPassName;\n    currentPassName \u003d null;\n    currentTracer \u003d null;\n\n    maybeSanityCheck();\n  }",
    "begin_line": 932,
    "end_line": 941,
    "comment": "/** \n * Marks the end of a pass.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.newTracer#946",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.newTracer(java.lang.String)",
    "snippet": "Tracer newTracer(String passName) {\n    String comment \u003d passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");\n    if (options.tracer.isOn()) {\n      tracker.recordPassStart(passName);\n    }\n    return new Tracer(\"Compiler\", comment);\n  }",
    "begin_line": 946,
    "end_line": 953,
    "comment": "/** \n * Returns a new tracer for the given pass name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.stopTracer#955",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.stopTracer(com.google.javascript.jscomp.Tracer, java.lang.String)",
    "snippet": "void stopTracer(Tracer t, String passName) {\n    long result \u003d t.stop();\n    if (options.tracer.isOn()) {\n      tracker.recordPassStop(passName, result);\n    }\n  }",
    "begin_line": 955,
    "end_line": 960,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.getResult#965",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getResult()",
    "snippet": "public Result getResult() {\n    PassConfig.State state \u003d getPassConfig().getIntermediateState();\n    return new Result(getErrors(), getWarnings(), debugLog.toString(),\n        state.variableMap, state.propertyMap,\n        state.anonymousFunctionNameMap, state.stringMap, functionInformationMap,\n        sourceMap, externExports, state.cssNames, state.idGeneratorMap);\n  }",
    "begin_line": 965,
    "end_line": 971,
    "comment": "/** \n * Returns the result of the compilation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.getMessages#976",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getMessages()",
    "snippet": "public JSError[] getMessages() {\n    return getErrors();\n  }",
    "begin_line": 976,
    "end_line": 978,
    "comment": "/** \n * Returns an array constructed from errors + temporary warnings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.getErrors#983",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getErrors()",
    "snippet": "public JSError[] getErrors() {\n    return errorManager.getErrors();\n  }",
    "begin_line": 983,
    "end_line": 985,
    "comment": "/** \n * Returns the array of errors (never null).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.getWarnings#990",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getWarnings()",
    "snippet": "public JSError[] getWarnings() {\n    return errorManager.getWarnings();\n  }",
    "begin_line": 990,
    "end_line": 992,
    "comment": "/** \n * Returns the array of warnings (never null).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.getRoot#995",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getRoot()",
    "snippet": "@Override\n  public Node getRoot() {\n    return externAndJsRoot;\n  }",
    "begin_line": 995,
    "end_line": 997,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.nextUniqueNameId#1002",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.nextUniqueNameId()",
    "snippet": "private int nextUniqueNameId() {\n    return uniqueNameId++;\n  }",
    "begin_line": 1002,
    "end_line": 1004,
    "comment": "/** \n * Creates a new id for making unique names.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.resetUniqueNameId#1010",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.resetUniqueNameId()",
    "snippet": "@VisibleForTesting\n  void resetUniqueNameId() {\n    uniqueNameId \u003d 0;\n  }",
    "begin_line": 1010,
    "end_line": 1012,
    "comment": "/** \n * Resets the unique name id counter\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.getUniqueNameIdSupplier#1015",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getUniqueNameIdSupplier()",
    "snippet": "@Override\n  Supplier\u003cString\u003e getUniqueNameIdSupplier() {\n    final Compiler self \u003d this;\n    return new Supplier\u003cString\u003e() {\n      @Override\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n    };\n  }",
    "begin_line": 1015,
    "end_line": 1023,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.get#1019",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.get()",
    "snippet": "@Override\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }",
    "begin_line": 1019,
    "end_line": 1021,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.areNodesEqualForInlining#1026",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.areNodesEqualForInlining(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  boolean areNodesEqualForInlining(Node n1, Node n2) {\n    if (options.ambiguateProperties ||\n        options.disambiguateProperties) {\n      // The type based optimizations require that type information is preserved\n      // during other optimizations.\n      return n1.isEquivalentToTyped(n2);\n    } else {\n      return n1.isEquivalentTo(n2);\n    }\n  }",
    "begin_line": 1026,
    "end_line": 1035,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.getInput#1045",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getInput(com.google.javascript.rhino.InputId)",
    "snippet": "@Override\n  public CompilerInput getInput(InputId id) {\n    return inputsById.get(id);\n  }",
    "begin_line": 1045,
    "end_line": 1047,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.removeExternInput#1053",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.removeExternInput(com.google.javascript.rhino.InputId)",
    "snippet": "protected void removeExternInput(InputId id) {\n    CompilerInput input \u003d getInput(id);\n    if (input \u003d\u003d null) {\n      return;\n    }\n    Preconditions.checkState(input.isExtern(), \"Not an extern input: %s\", input.getName());\n    inputsById.remove(id);\n    externs.remove(input);\n    Node root \u003d input.getAstRoot(this);\n    if (root !\u003d null) {\n      root.detachFromParent();\n    }\n  }",
    "begin_line": 1053,
    "end_line": 1065,
    "comment": "/** \n * Removes an input file from AST.\n * @param id The id of the input to be removed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.newExternInput#1068",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.newExternInput(java.lang.String)",
    "snippet": "@Override\n  public CompilerInput newExternInput(String name) {\n    SourceAst ast \u003d new SyntheticAst(name);\n    if (inputsById.containsKey(ast.getInputId())) {\n      throw new IllegalArgumentException(\"Conflicting externs name: \" + name);\n    }\n    CompilerInput input \u003d new CompilerInput(ast, true);\n    putCompilerInput(input.getInputId(), input);\n    externsRoot.addChildToFront(ast.getAstRoot(this));\n    externs.add(0, input);\n    return input;\n  }",
    "begin_line": 1068,
    "end_line": 1078,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.putCompilerInput#1080",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.putCompilerInput(com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput)",
    "snippet": "private CompilerInput putCompilerInput(InputId id, CompilerInput input) {\n    input.setCompiler(this);\n    return inputsById.put(id, input);\n  }",
    "begin_line": 1080,
    "end_line": 1083,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.addIncrementalSourceAst#1086",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.addIncrementalSourceAst(com.google.javascript.jscomp.JsAst)",
    "snippet": "void addIncrementalSourceAst(JsAst ast) {\n    InputId id \u003d ast.getInputId();\n    Preconditions.checkState(getInput(id) \u003d\u003d null, \"Duplicate input %s\", id.getIdName());\n    putCompilerInput(id, new CompilerInput(ast));\n  }",
    "begin_line": 1086,
    "end_line": 1090,
    "comment": "/** \n * Add a source input dynamically. Intended for incremental compilation. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.replaceIncrementalSourceAst#1101",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.replaceIncrementalSourceAst(com.google.javascript.jscomp.JsAst)",
    "snippet": "boolean replaceIncrementalSourceAst(JsAst ast) {\n    CompilerInput oldInput \u003d getInput(ast.getInputId());\n    Preconditions.checkNotNull(oldInput, \"No input to replace: %s\", ast.getInputId().getIdName());\n    Node newRoot \u003d ast.getAstRoot(this);\n    if (newRoot \u003d\u003d null) {\n      return false;\n    }\n\n    Node oldRoot \u003d oldInput.getAstRoot(this);\n    if (oldRoot !\u003d null) {\n      oldRoot.getParent().replaceChild(oldRoot, newRoot);\n    } else {\n      getRoot().getLastChild().addChildToBack(newRoot);\n    }\n\n    CompilerInput newInput \u003d new CompilerInput(ast);\n    putCompilerInput(ast.getInputId(), newInput);\n\n    JSModule module \u003d oldInput.getModule();\n    if (module !\u003d null) {\n      module.addAfter(newInput, oldInput);\n      module.remove(oldInput);\n    }\n\n    // Verify the input id is set properly.\n    Preconditions.checkState(\n        newInput.getInputId().equals(oldInput.getInputId()));\n    InputId inputIdOnAst \u003d newInput.getAstRoot(this).getInputId();\n    Preconditions.checkState(newInput.getInputId().equals(inputIdOnAst));\n\n    inputs.remove(oldInput);\n    return true;\n  }",
    "begin_line": 1101,
    "end_line": 1133,
    "comment": "/** \n * Replace a source input dynamically. Intended for incremental re-compilation. If the new source input doesn\u0027t parse, then keep the old input in the AST and return false.\n * @return Whether the new AST was attached successfully.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.addNewSourceAst#1145",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.addNewSourceAst(com.google.javascript.jscomp.JsAst)",
    "snippet": "boolean addNewSourceAst(JsAst ast) {\n    CompilerInput oldInput \u003d getInput(ast.getInputId());\n    if (oldInput !\u003d null) {\n      throw new IllegalStateException(\n          \"Input already exists: \" + ast.getInputId().getIdName());\n    }\n    Node newRoot \u003d ast.getAstRoot(this);\n    if (newRoot \u003d\u003d null) {\n      return false;\n    }\n\n    getRoot().getLastChild().addChildToBack(newRoot);\n\n    CompilerInput newInput \u003d new CompilerInput(ast);\n\n    // TODO(tylerg): handle this for multiple modules at some point.\n    if (moduleGraph \u003d\u003d null \u0026\u0026 !modules.isEmpty()) {\n      // singleton module\n      modules.get(0).add(newInput);\n    }\n\n    putCompilerInput(ast.getInputId(), newInput);\n\n    return true;\n  }",
    "begin_line": 1145,
    "end_line": 1169,
    "comment": "/** \n * Add a new source input dynamically. Intended for incremental compilation. \u003cp\u003e If the new source input doesn\u0027t parse, it will not be added, and a false will be returned.\n * @param ast the JS Source to add.\n * @return true if the source was added successfully, false otherwise.\n * @throws IllegalStateException if an input for this ast already exists.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.getModuleGraph#1172",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getModuleGraph()",
    "snippet": "@Override\n  JSModuleGraph getModuleGraph() {\n    return moduleGraph;\n  }",
    "begin_line": 1172,
    "end_line": 1174,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.getDegenerateModuleGraph#1180",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getDegenerateModuleGraph()",
    "snippet": "JSModuleGraph getDegenerateModuleGraph() {\n    return moduleGraph \u003d\u003d null ? new JSModuleGraph(modules) : moduleGraph;\n  }",
    "begin_line": 1180,
    "end_line": 1182,
    "comment": "/** \n * Gets a module graph. This will always return a module graph, even in the degenerate case when there\u0027s only one module.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.getTypeRegistry#1185",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getTypeRegistry()",
    "snippet": "@Override\n  public JSTypeRegistry getTypeRegistry() {\n    if (typeRegistry \u003d\u003d null) {\n      typeRegistry \u003d new JSTypeRegistry(oldErrorReporter, options.looseTypes);\n    }\n    return typeRegistry;\n  }",
    "begin_line": 1185,
    "end_line": 1190,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.getTypedScopeCreator#1193",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getTypedScopeCreator()",
    "snippet": "@Override\n  public MemoizedScopeCreator getTypedScopeCreator() {\n    return getPassConfig().getTypedScopeCreator();\n  }",
    "begin_line": 1193,
    "end_line": 1195,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.ensureDefaultPassConfig#1198",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.ensureDefaultPassConfig()",
    "snippet": "@SuppressWarnings(\"unchecked\")\n  DefaultPassConfig ensureDefaultPassConfig() {\n    PassConfig passes \u003d getPassConfig().getBasePassConfig();\n    Preconditions.checkState(passes instanceof DefaultPassConfig,\n        \"PassConfigs must eventually delegate to the DefaultPassConfig\");\n    return (DefaultPassConfig) passes;\n  }",
    "begin_line": 1198,
    "end_line": 1203,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.buildKnownSymbolTable#1205",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.buildKnownSymbolTable()",
    "snippet": "public SymbolTable buildKnownSymbolTable() {\n    SymbolTable symbolTable \u003d new SymbolTable(getTypeRegistry());\n\n    MemoizedScopeCreator typedScopeCreator \u003d getTypedScopeCreator();\n    if (typedScopeCreator !\u003d null) {\n      symbolTable.addScopes(typedScopeCreator.getAllMemoizedScopes());\n      symbolTable.addSymbolsFrom(typedScopeCreator);\n    } else {\n      symbolTable.findScopes(this, externsRoot, jsRoot);\n    }\n\n    GlobalNamespace globalNamespace \u003d\n        ensureDefaultPassConfig().getGlobalNamespace();\n    if (globalNamespace !\u003d null) {\n      symbolTable.addSymbolsFrom(globalNamespace);\n    }\n\n    ReferenceCollectingCallback refCollector \u003d\n        new ReferenceCollectingCallback(\n            this, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);\n    NodeTraversal.traverse(this, getRoot(), refCollector);\n    symbolTable.addSymbolsFrom(refCollector);\n\n    PreprocessorSymbolTable preprocessorSymbolTable \u003d\n        ensureDefaultPassConfig().getPreprocessorSymbolTable();\n    if (preprocessorSymbolTable !\u003d null) {\n      symbolTable.addSymbolsFrom(preprocessorSymbolTable);\n    }\n\n    symbolTable.fillNamespaceReferences();\n    symbolTable.fillPropertyScopes();\n    symbolTable.fillThisReferences(this, externsRoot, jsRoot);\n    symbolTable.fillPropertySymbols(this, externsRoot, jsRoot);\n    symbolTable.fillJSDocInfo(this, externsRoot, jsRoot);\n\n    return symbolTable;\n  }",
    "begin_line": 1205,
    "end_line": 1241,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.getTopScope#1244",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getTopScope()",
    "snippet": "@Override\n  public Scope getTopScope() {\n    return getPassConfig().getTopScope();\n  }",
    "begin_line": 1244,
    "end_line": 1246,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.getReverseAbstractInterpreter#1249",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getReverseAbstractInterpreter()",
    "snippet": "@Override\n  public ReverseAbstractInterpreter getReverseAbstractInterpreter() {\n    if (abstractInterpreter \u003d\u003d null) {\n      ChainableReverseAbstractInterpreter interpreter \u003d\n          new SemanticReverseAbstractInterpreter(\n              getCodingConvention(), getTypeRegistry());\n      if (options.closurePass) {\n        interpreter \u003d new ClosureReverseAbstractInterpreter(\n            getCodingConvention(), getTypeRegistry())\n            .append(interpreter).getFirst();\n      }\n      abstractInterpreter \u003d interpreter;\n    }\n    return abstractInterpreter;\n  }",
    "begin_line": 1249,
    "end_line": 1262,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.getTypeValidator#1265",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getTypeValidator()",
    "snippet": "@Override\n  TypeValidator getTypeValidator() {\n    if (typeValidator \u003d\u003d null) {\n      typeValidator \u003d new TypeValidator(this);\n    }\n    return typeValidator;\n  }",
    "begin_line": 1265,
    "end_line": 1270,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.parseInputs#1282",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.parseInputs()",
    "snippet": "Node parseInputs() {\n    boolean devMode \u003d options.devMode !\u003d DevMode.OFF;\n\n    // If old roots exist (we are parsing a second time), detach each of the\n    // individual file parse trees.\n    if (externsRoot !\u003d null) {\n      externsRoot.detachChildren();\n    }\n    if (jsRoot !\u003d null) {\n      jsRoot.detachChildren();\n    }\n\n    // Parse main JS sources.\n    jsRoot \u003d IR.block();\n    jsRoot.setIsSyntheticBlock(true);\n\n    externsRoot \u003d IR.block();\n    externsRoot.setIsSyntheticBlock(true);\n\n    externAndJsRoot \u003d IR.block(externsRoot, jsRoot);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    if (options.tracer.isOn()) {\n      tracker \u003d new PerformanceTracker(jsRoot, options.tracer);\n      addChangeHandler(tracker.getCodeChangeHandler());\n    }\n\n    Tracer tracer \u003d newTracer(\"parseInputs\");\n\n    try {\n      // Parse externs sources.\n      for (CompilerInput input : externs) {\n        Node n \u003d input.getAstRoot(this);\n        if (hasErrors()) {\n          return null;\n        }\n        externsRoot.addChildToBack(n);\n      }\n\n      // Modules inferred in ProcessCommonJS pass.\n      if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n        processAMDAndCommonJSModules();\n      }\n\n      hoistExterns(externsRoot);\n\n      // Check if the sources need to be re-ordered.\n      boolean staleInputs \u003d false;\n      if (options.dependencyOptions.needsManagement()) {\n        for (CompilerInput input : inputs) {\n          // Forward-declare all the provided types, so that they\n          // are not flagged even if they are dropped from the process.\n          for (String provide : input.getProvides()) {\n            getTypeRegistry().forwardDeclareType(provide);\n          }\n        }\n\n        try {\n          inputs \u003d\n              (moduleGraph \u003d\u003d null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(options.dependencyOptions, inputs);\n          staleInputs \u003d true;\n        } catch (CircularDependencyException e) {\n          report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n\n          // If in IDE mode, we ignore the error and keep going.\n          if (hasErrors()) {\n            return null;\n          }\n        } catch (MissingProvideException e) {\n          report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));\n\n          // If in IDE mode, we ignore the error and keep going.\n          if (hasErrors()) {\n            return null;\n          }\n        }\n      }\n\n      hoistNoCompileFiles();\n\n      if (staleInputs) {\n        repartitionInputs();\n      }\n\n      // Build the AST.\n      for (CompilerInput input : inputs) {\n        Node n \u003d input.getAstRoot(this);\n        if (n \u003d\u003d null) {\n          continue;\n        }\n\n        if (devMode) {\n          runSanityCheck();\n          if (hasErrors()) {\n            return null;\n          }\n        }\n\n        if (options.sourceMapOutputPath !\u003d null ||\n            options.nameReferenceReportPath !\u003d null) {\n\n          // Annotate the nodes in the tree with information from the\n          // input file. This information is used to construct the SourceMap.\n          SourceInformationAnnotator sia \u003d\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode !\u003d DevMode.OFF);\n          NodeTraversal.traverse(this, n, sia);\n        }\n\n        jsRoot.addChildToBack(n);\n      }\n\n      if (hasErrors()) {\n        return null;\n      }\n      return externAndJsRoot;\n    } finally {\n      stopTracer(tracer, \"parseInputs\");\n    }\n  }",
    "begin_line": 1282,
    "end_line": 1404,
    "comment": "/** \n * Parses the externs and main inputs.\n * @return A synthetic root node whose two children are the externs rootand the main root\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.hoistExterns#1409",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.hoistExterns(com.google.javascript.rhino.Node)",
    "snippet": "private void hoistExterns(Node externsRoot) {\n    boolean staleInputs \u003d false;\n    for (CompilerInput input : inputs) {\n      if (options.dependencyOptions.needsManagement()) {\n        // If we\u0027re doing scanning dependency info anyway, use that\n        // information to skip sources that obviously aren\u0027t externs.\n        if (!input.getProvides().isEmpty() || !input.getRequires().isEmpty()) {\n          continue;\n        }\n      }\n\n      Node n \u003d input.getAstRoot(this);\n\n      // Inputs can have a null AST on a parse error.\n      if (n \u003d\u003d null) {\n        continue;\n      }\n\n      JSDocInfo info \u003d n.getJSDocInfo();\n      if (info !\u003d null \u0026\u0026 info.isExterns()) {\n        // If the input file is explicitly marked as an externs file, then\n        // assume the programmer made a mistake and throw it into\n        // the externs pile anyways.\n        externsRoot.addChildToBack(n);\n        input.setIsExtern(true);\n\n        input.getModule().remove(input);\n\n        externs.add(input);\n        staleInputs \u003d true;\n      }\n    }\n\n    if (staleInputs) {\n      repartitionInputs();\n    }\n  }",
    "begin_line": 1409,
    "end_line": 1445,
    "comment": "/** \n * Hoists inputs with the @externs annotation into the externs list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.hoistNoCompileFiles#1450",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.hoistNoCompileFiles()",
    "snippet": "private void hoistNoCompileFiles() {\n    boolean staleInputs \u003d false;\n    for (CompilerInput input : inputs) {\n      Node n \u003d input.getAstRoot(this);\n\n      // Inputs can have a null AST on a parse error.\n      if (n \u003d\u003d null) {\n        continue;\n      }\n\n      JSDocInfo info \u003d n.getJSDocInfo();\n      if (info !\u003d null \u0026\u0026 info.isNoCompile()) {\n        input.getModule().remove(input);\n        staleInputs \u003d true;\n      }\n    }\n\n    if (staleInputs) {\n      repartitionInputs();\n    }\n  }",
    "begin_line": 1450,
    "end_line": 1470,
    "comment": "/** \n * Hoists inputs with the @nocompiler annotation out of the inputs.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.repartitionInputs#1472",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.repartitionInputs()",
    "snippet": "private void repartitionInputs() {\n    fillEmptyModules(modules);\n    rebuildInputsFromModules();\n  }",
    "begin_line": 1472,
    "end_line": 1475,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.processAMDAndCommonJSModules#1482",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.processAMDAndCommonJSModules()",
    "snippet": "void processAMDAndCommonJSModules() {\n    Map\u003cString, JSModule\u003e modulesByName \u003d Maps.newLinkedHashMap();\n    Map\u003cCompilerInput, JSModule\u003e modulesByInput \u003d Maps.newLinkedHashMap();\n    // TODO(nicksantos): Refactor module dependency resolution to work nicely\n    // with multiple ways to express dependencies. Directly support JSModules\n    // that are equivalent to a signal file and which express their deps\n    // directly in the source.\n    for (CompilerInput input : inputs) {\n      input.setCompiler(this);\n      Node root \u003d input.getAstRoot(this);\n      if (root \u003d\u003d null) {\n        continue;\n      }\n      if (options.transformAMDToCJSModules) {\n        new TransformAMDToCJSModule(this).process(null, root);\n      }\n      if (options.processCommonJSModules) {\n        ProcessCommonJSModules cjs \u003d new ProcessCommonJSModules(this,\n            options.commonJSModulePathPrefix);\n        cjs.process(null, root);\n        JSModule m \u003d cjs.getModule();\n        if (m !\u003d null) {\n          modulesByName.put(m.getName(), m);\n          modulesByInput.put(input, m);\n        }\n      }\n    }\n    if (options.processCommonJSModules) {\n      List\u003cJSModule\u003e modules \u003d Lists.newArrayList(modulesByName.values());\n      if (!modules.isEmpty()) {\n        this.modules \u003d modules;\n        this.moduleGraph \u003d new JSModuleGraph(this.modules);\n      }\n      for (JSModule module : modules) {\n        for (CompilerInput input : module.getInputs()) {\n          for (String require : input.getRequires()) {\n            JSModule dependency \u003d modulesByName.get(require);\n            if (dependency \u003d\u003d null) {\n              report(JSError.make(MISSING_ENTRY_ERROR, require));\n            } else {\n              module.addDependency(dependency);\n            }\n          }\n        }\n      }\n      try {\n        modules \u003d Lists.newArrayList();\n        for (CompilerInput input : this.moduleGraph.manageDependencies(\n            options.dependencyOptions, inputs)) {\n          modules.add(modulesByInput.get(input));\n        }\n        JSModule root \u003d new JSModule(\"root\");\n        for (JSModule m : modules) {\n          m.addDependency(root);\n        }\n        modules.add(0, root);\n        SortedDependencies\u003cJSModule\u003e sorter \u003d\n          new SortedDependencies\u003cJSModule\u003e(modules);\n        modules \u003d sorter.getDependenciesOf(modules, true);\n        this.modules \u003d modules;\n\n        this.moduleGraph \u003d new JSModuleGraph(modules);\n      } catch (Exception e) {\n        Throwables.propagate(e);\n      }\n    }\n  }",
    "begin_line": 1482,
    "end_line": 1548,
    "comment": "/** \n * Transforms AMD and CJS modules to something closure compiler can process and creates JSModules and the corresponding dependency tree on the way.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.parse#1550",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.parse(com.google.javascript.jscomp.SourceFile)",
    "snippet": "public Node parse(SourceFile file) {\n    initCompilerOptionsIfTesting();\n    addToDebugLog(\"Parsing: \" + file.getName());\n    return new JsAst(file).getAstRoot(this);\n  }",
    "begin_line": 1550,
    "end_line": 1554,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.parseSyntheticCode#1559",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.parseSyntheticCode(java.lang.String)",
    "snippet": "@Override\n  Node parseSyntheticCode(String js) {\n    CompilerInput input \u003d new CompilerInput(\n        SourceFile.fromCode(\" [synthetic:\" + (++syntheticCodeId) + \"] \", js));\n    putCompilerInput(input.getInputId(), input);\n    return input.getAstRoot(this);\n  }",
    "begin_line": 1559,
    "end_line": 1564,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.newCompilerOptions#1569",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.newCompilerOptions()",
    "snippet": "protected CompilerOptions newCompilerOptions() {\n    return new CompilerOptions();\n  }",
    "begin_line": 1569,
    "end_line": 1571,
    "comment": "/** \n * Allow subclasses to override the default CompileOptions object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.initCompilerOptionsIfTesting#1573",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.initCompilerOptionsIfTesting()",
    "snippet": "void initCompilerOptionsIfTesting() {\n    if (options \u003d\u003d null) {\n      // initialization for tests that don\u0027t initialize the compiler\n      // by the normal mechanisms.\n      initOptions(newCompilerOptions());\n    }\n  }",
    "begin_line": 1573,
    "end_line": 1579,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.parseSyntheticCode#1582",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.parseSyntheticCode(java.lang.String, java.lang.String)",
    "snippet": "@Override\n  Node parseSyntheticCode(String fileName, String js) {\n    initCompilerOptionsIfTesting();\n    return parse(SourceFile.fromCode(fileName, js));\n  }",
    "begin_line": 1582,
    "end_line": 1585,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.parseTestCode#1588",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.parseTestCode(java.lang.String)",
    "snippet": "@Override\n  Node parseTestCode(String js) {\n    initCompilerOptionsIfTesting();\n    CompilerInput input \u003d new CompilerInput(\n        SourceFile.fromCode(\"[testcode]\", js));\n    if (inputsById \u003d\u003d null) {\n      inputsById \u003d Maps.newHashMap();\n    }\n    putCompilerInput(input.getInputId(), input);\n    return input.getAstRoot(this);\n  }",
    "begin_line": 1588,
    "end_line": 1597,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.getDefaultErrorReporter#1600",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getDefaultErrorReporter()",
    "snippet": "@Override\n  ErrorReporter getDefaultErrorReporter() {\n    return defaultErrorReporter;\n  }",
    "begin_line": 1600,
    "end_line": 1602,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.toSource#1611",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.toSource()",
    "snippet": "public String toSource() {\n    return runInCompilerThread(new Callable\u003cString\u003e() {\n      @Override\n      public String call() throws Exception {\n        Tracer tracer \u003d newTracer(\"toSource\");\n        try {\n          CodeBuilder cb \u003d new CodeBuilder();\n          if (jsRoot !\u003d null) {\n            int i \u003d 0;\n            for (Node scriptNode \u003d jsRoot.getFirstChild();\n                 scriptNode !\u003d null;\n                 scriptNode \u003d scriptNode.getNext()) {\n              toSource(cb, i++, scriptNode);\n            }\n          }\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n    });\n  }",
    "begin_line": 1611,
    "end_line": 1632,
    "comment": "/** \n * Converts the main parse tree back to JS code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.call#1614",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.call()",
    "snippet": "@Override\n      public String call() throws Exception {\n        Tracer tracer \u003d newTracer(\"toSource\");\n        try {\n          CodeBuilder cb \u003d new CodeBuilder();\n          if (jsRoot !\u003d null) {\n            int i \u003d 0;\n            for (Node scriptNode \u003d jsRoot.getFirstChild();\n                 scriptNode !\u003d null;\n                 scriptNode \u003d scriptNode.getNext()) {\n              toSource(cb, i++, scriptNode);\n            }\n          }\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }",
    "begin_line": 1614,
    "end_line": 1630,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.toSourceArray#1637",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.toSourceArray()",
    "snippet": "public String[] toSourceArray() {\n    return runInCompilerThread(new Callable\u003cString[]\u003e() {\n      @Override\n      public String[] call() throws Exception {\n        Tracer tracer \u003d newTracer(\"toSourceArray\");\n        try {\n          int numInputs \u003d inputs.size();\n          String[] sources \u003d new String[numInputs];\n          CodeBuilder cb \u003d new CodeBuilder();\n          for (int i \u003d 0; i \u003c numInputs; i++) {\n            Node scriptNode \u003d inputs.get(i).getAstRoot(Compiler.this);\n            cb.reset();\n            toSource(cb, i, scriptNode);\n            sources[i] \u003d cb.toString();\n          }\n          return sources;\n        } finally {\n          stopTracer(tracer, \"toSourceArray\");\n        }\n      }\n    });\n  }",
    "begin_line": 1637,
    "end_line": 1658,
    "comment": "/** \n * Converts the parse tree for each input back to JS code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.call#1640",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.call()",
    "snippet": "@Override\n      public String[] call() throws Exception {\n        Tracer tracer \u003d newTracer(\"toSourceArray\");\n        try {\n          int numInputs \u003d inputs.size();\n          String[] sources \u003d new String[numInputs];\n          CodeBuilder cb \u003d new CodeBuilder();\n          for (int i \u003d 0; i \u003c numInputs; i++) {\n            Node scriptNode \u003d inputs.get(i).getAstRoot(Compiler.this);\n            cb.reset();\n            toSource(cb, i, scriptNode);\n            sources[i] \u003d cb.toString();\n          }\n          return sources;\n        } finally {\n          stopTracer(tracer, \"toSourceArray\");\n        }\n      }",
    "begin_line": 1640,
    "end_line": 1656,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.toSource#1663",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.toSource(com.google.javascript.jscomp.JSModule)",
    "snippet": "public String toSource(final JSModule module) {\n    return runInCompilerThread(new Callable\u003cString\u003e() {\n      @Override\n      public String call() throws Exception {\n        List\u003cCompilerInput\u003e inputs \u003d module.getInputs();\n        int numInputs \u003d inputs.size();\n        if (numInputs \u003d\u003d 0) {\n          return \"\";\n        }\n        CodeBuilder cb \u003d new CodeBuilder();\n        for (int i \u003d 0; i \u003c numInputs; i++) {\n          Node scriptNode \u003d inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode \u003d\u003d null) {\n            throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());\n          }\n          toSource(cb, i, scriptNode);\n        }\n        return cb.toString();\n      }\n    });\n  }",
    "begin_line": 1663,
    "end_line": 1684,
    "comment": "/** \n * Converts the parse tree for a module back to JS code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.call#1666",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.call()",
    "snippet": "@Override\n      public String call() throws Exception {\n        List\u003cCompilerInput\u003e inputs \u003d module.getInputs();\n        int numInputs \u003d inputs.size();\n        if (numInputs \u003d\u003d 0) {\n          return \"\";\n        }\n        CodeBuilder cb \u003d new CodeBuilder();\n        for (int i \u003d 0; i \u003c numInputs; i++) {\n          Node scriptNode \u003d inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode \u003d\u003d null) {\n            throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());\n          }\n          toSource(cb, i, scriptNode);\n        }\n        return cb.toString();\n      }",
    "begin_line": 1666,
    "end_line": 1682,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.toSourceArray#1690",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.toSourceArray(com.google.javascript.jscomp.JSModule)",
    "snippet": "public String[] toSourceArray(final JSModule module) {\n    return runInCompilerThread(new Callable\u003cString[]\u003e() {\n      @Override\n      public String[] call() throws Exception {\n        List\u003cCompilerInput\u003e inputs \u003d module.getInputs();\n        int numInputs \u003d inputs.size();\n        if (numInputs \u003d\u003d 0) {\n          return new String[0];\n        }\n\n        String[] sources \u003d new String[numInputs];\n        CodeBuilder cb \u003d new CodeBuilder();\n        for (int i \u003d 0; i \u003c numInputs; i++) {\n          Node scriptNode \u003d inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode \u003d\u003d null) {\n            throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());\n          }\n\n          cb.reset();\n          toSource(cb, i, scriptNode);\n          sources[i] \u003d cb.toString();\n        }\n        return sources;\n      }\n    });\n  }",
    "begin_line": 1690,
    "end_line": 1716,
    "comment": "/** \n * Converts the parse tree for each input in a module back to JS code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.call#1693",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.call()",
    "snippet": "@Override\n      public String[] call() throws Exception {\n        List\u003cCompilerInput\u003e inputs \u003d module.getInputs();\n        int numInputs \u003d inputs.size();\n        if (numInputs \u003d\u003d 0) {\n          return new String[0];\n        }\n\n        String[] sources \u003d new String[numInputs];\n        CodeBuilder cb \u003d new CodeBuilder();\n        for (int i \u003d 0; i \u003c numInputs; i++) {\n          Node scriptNode \u003d inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode \u003d\u003d null) {\n            throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());\n          }\n\n          cb.reset();\n          toSource(cb, i, scriptNode);\n          sources[i] \u003d cb.toString();\n        }\n        return sources;\n      }",
    "begin_line": 1693,
    "end_line": 1714,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.toSource#1725",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.toSource(com.google.javascript.jscomp.Compiler.CodeBuilder, int, com.google.javascript.rhino.Node)",
    "snippet": "public void toSource(final CodeBuilder cb,\n                       final int inputSeqNum,\n                       final Node root) {\n    runInCompilerThread(new Callable\u003cVoid\u003e() {\n      @Override\n      public Void call() throws Exception {\n        if (options.printInputDelimiter) {\n          if ((cb.getLength() \u003e 0) \u0026\u0026 !cb.endsWith(\"\\n\")) {\n            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n          }\n          Preconditions.checkState(root.isScript());\n\n          String delimiter \u003d options.inputDelimiter;\n\n          String inputName \u003d root.getInputId().getIdName();\n          String sourceName \u003d root.getSourceFileName();\n          Preconditions.checkState(sourceName !\u003d null);\n          Preconditions.checkState(!sourceName.isEmpty());\n\n          delimiter \u003d delimiter\n              .replaceAll(\"%name%\", Matcher.quoteReplacement(inputName))\n              .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n\n          cb.append(delimiter)\n            .append(\"\\n\");\n        }\n        if (root.getJSDocInfo() !\u003d null \u0026\u0026\n            root.getJSDocInfo().getLicense() !\u003d null) {\n          cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node\u0027s mappings are offset by the given string builder buffer.\n        if (options.sourceMapOutputPath !\u003d null) {\n          sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());\n        }\n\n        // if LanguageMode is ECMASCRIPT5_STRICT, only print \u0027use strict\u0027\n        // for the first input file\n        String code \u003d toSource(root, sourceMap, inputSeqNum \u003d\u003d 0);\n        if (!code.isEmpty()) {\n          cb.append(code);\n\n          // In order to avoid parse ambiguity when files are concatenated\n          // together, all files should end in a semi-colon. Do a quick\n          // heuristic check if there\u0027s an obvious semi-colon already there.\n          int length \u003d code.length();\n          char lastChar \u003d code.charAt(length - 1);\n          char secondLastChar \u003d length \u003e\u003d 2 ?\n              code.charAt(length - 2) : \u0027\\0\u0027;\n          boolean hasSemiColon \u003d lastChar \u003d\u003d \u0027;\u0027 ||\n              (lastChar \u003d\u003d \u0027\\n\u0027 \u0026\u0026 secondLastChar \u003d\u003d \u0027;\u0027);\n          if (!hasSemiColon) {\n            cb.append(\";\");\n          }\n        }\n        return null;\n      }\n    });\n  }",
    "begin_line": 1725,
    "end_line": 1787,
    "comment": "/** \n * Writes out JS code from a root node. If printing input delimiters, this method will attach a comment to the start of the text indicating which input the output derived from. If there were any preserve annotations within the root\u0027s source, they will also be printed in a block comment at the beginning of the output.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.call#1730",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.call()",
    "snippet": "@Override\n      public Void call() throws Exception {\n        if (options.printInputDelimiter) {\n          if ((cb.getLength() \u003e 0) \u0026\u0026 !cb.endsWith(\"\\n\")) {\n            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n          }\n          Preconditions.checkState(root.isScript());\n\n          String delimiter \u003d options.inputDelimiter;\n\n          String inputName \u003d root.getInputId().getIdName();\n          String sourceName \u003d root.getSourceFileName();\n          Preconditions.checkState(sourceName !\u003d null);\n          Preconditions.checkState(!sourceName.isEmpty());\n\n          delimiter \u003d delimiter\n              .replaceAll(\"%name%\", Matcher.quoteReplacement(inputName))\n              .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n\n          cb.append(delimiter)\n            .append(\"\\n\");\n        }\n        if (root.getJSDocInfo() !\u003d null \u0026\u0026\n            root.getJSDocInfo().getLicense() !\u003d null) {\n          cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node\u0027s mappings are offset by the given string builder buffer.\n        if (options.sourceMapOutputPath !\u003d null) {\n          sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());\n        }\n\n        // if LanguageMode is ECMASCRIPT5_STRICT, only print \u0027use strict\u0027\n        // for the first input file\n        String code \u003d toSource(root, sourceMap, inputSeqNum \u003d\u003d 0);\n        if (!code.isEmpty()) {\n          cb.append(code);\n\n          // In order to avoid parse ambiguity when files are concatenated\n          // together, all files should end in a semi-colon. Do a quick\n          // heuristic check if there\u0027s an obvious semi-colon already there.\n          int length \u003d code.length();\n          char lastChar \u003d code.charAt(length - 1);\n          char secondLastChar \u003d length \u003e\u003d 2 ?\n              code.charAt(length - 2) : \u0027\\0\u0027;\n          boolean hasSemiColon \u003d lastChar \u003d\u003d \u0027;\u0027 ||\n              (lastChar \u003d\u003d \u0027\\n\u0027 \u0026\u0026 secondLastChar \u003d\u003d \u0027;\u0027);\n          if (!hasSemiColon) {\n            cb.append(\";\");\n          }\n        }\n        return null;\n      }",
    "begin_line": 1730,
    "end_line": 1785,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.toSource#1794",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.toSource(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  String toSource(Node n) {\n    initCompilerOptionsIfTesting();\n    return toSource(n, null, true);\n  }",
    "begin_line": 1794,
    "end_line": 1797,
    "comment": "/** \n * Generates JavaScript source code for an AST, doesn\u0027t generate source map info.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Compiler.toSource#1802",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.toSource(com.google.javascript.rhino.Node, com.google.javascript.jscomp.SourceMap, boolean)",
    "snippet": "private String toSource(Node n, SourceMap sourceMap, boolean firstOutput) {\n    CodePrinter.Builder builder \u003d new CodePrinter.Builder(n);\n    builder.setCompilerOptions(options);\n    builder.setSourceMap(sourceMap);\n    builder.setTagAsStrict(firstOutput \u0026\u0026\n        options.getLanguageOut() \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT);\n    return builder.build();\n  }",
    "begin_line": 1802,
    "end_line": 1809,
    "comment": "/** \n * Generates JavaScript source code for an AST.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.reset#1821",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.reset()",
    "snippet": "void reset() {\n      sb.setLength(0);\n    }",
    "begin_line": 1821,
    "end_line": 1823,
    "comment": "/** \n * Removes all text, but leaves the line count unchanged. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.append#1826",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.append(java.lang.String)",
    "snippet": "CodeBuilder append(String str) {\n      sb.append(str);\n\n      // Adjust the line and column information for the new text.\n      int index \u003d -1;\n      int lastIndex \u003d index;\n      while ((index \u003d str.indexOf(\u0027\\n\u0027, index + 1)) \u003e\u003d 0) {\n        ++lineCount;\n        lastIndex \u003d index;\n      }\n\n      if (lastIndex \u003d\u003d -1) {\n        // No new lines, append the new characters added.\n        colCount +\u003d str.length();\n      } else {\n        colCount \u003d str.length() - (lastIndex + 1);\n      }\n\n      return this;\n    }",
    "begin_line": 1826,
    "end_line": 1845,
    "comment": "/** \n * Appends the given string to the text buffer. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.toString#1849",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.toString()",
    "snippet": "@Override\n    public String toString() {\n      return sb.toString();\n    }",
    "begin_line": 1849,
    "end_line": 1851,
    "comment": "/** \n * Returns all text in the text buffer. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getLength#1854",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getLength()",
    "snippet": "public int getLength() {\n      return sb.length();\n    }",
    "begin_line": 1854,
    "end_line": 1856,
    "comment": "/** \n * Returns the length of the text buffer. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getLineIndex#1859",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getLineIndex()",
    "snippet": "int getLineIndex() {\n      return lineCount;\n    }",
    "begin_line": 1859,
    "end_line": 1861,
    "comment": "/** \n * Returns the (zero-based) index of the last line in the text buffer. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getColumnIndex#1864",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getColumnIndex()",
    "snippet": "int getColumnIndex() {\n      return colCount;\n    }",
    "begin_line": 1864,
    "end_line": 1866,
    "comment": "/** \n * Returns the (zero-based) index of the last column in the text buffer. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.endsWith#1869",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.endsWith(java.lang.String)",
    "snippet": "boolean endsWith(String suffix) {\n      return (sb.length() \u003e suffix.length())\n          \u0026\u0026 suffix.equals(sb.substring(sb.length() - suffix.length()));\n    }",
    "begin_line": 1869,
    "end_line": 1872,
    "comment": "/** \n * Determines whether the text ends with the given suffix. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.optimize#1879",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.optimize()",
    "snippet": "public void optimize() {\n    // Ideally, this pass should be the first pass run, however:\n    // 1) VariableReferenceCheck reports unexpected warnings if Normalize\n    // is done first.\n    // 2) ReplaceMessages, stripCode, and potentially custom passes rely on\n    // unmodified local names.\n    normalize();\n\n    PhaseOptimizer phaseOptimizer \u003d new PhaseOptimizer(this, tracker, null);\n    if (options.devMode \u003d\u003d DevMode.EVERY_PASS) {\n      phaseOptimizer.setSanityCheck(sanityCheck);\n    }\n    phaseOptimizer.consume(getPassConfig().getOptimizations());\n    phaseOptimizer.process(externsRoot, jsRoot);\n  }",
    "begin_line": 1879,
    "end_line": 1893,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.setCssRenamingMap#1896",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.setCssRenamingMap(com.google.javascript.jscomp.CssRenamingMap)",
    "snippet": "@Override\n  void setCssRenamingMap(CssRenamingMap map) {\n    options.cssRenamingMap \u003d map;\n  }",
    "begin_line": 1896,
    "end_line": 1898,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getCssRenamingMap#1901",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getCssRenamingMap()",
    "snippet": "@Override\n  CssRenamingMap getCssRenamingMap() {\n    return options.cssRenamingMap;\n  }",
    "begin_line": 1901,
    "end_line": 1903,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.processDefines#1912",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.processDefines()",
    "snippet": "public void processDefines() {\n    (new DefaultPassConfig(options)).processDefines.create(this)\n        .process(externsRoot, jsRoot);\n  }",
    "begin_line": 1912,
    "end_line": 1915,
    "comment": "/** \n * Reprocesses the current defines over the AST.  This is used by GwtCompiler to generate N outputs for different targets from the same (checked) AST. For each target, we apply the target-specific defines by calling {@code processDefines} and then {@code optimize} to optimize the ASTspecifically for that target.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.isInliningForbidden#1917",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.isInliningForbidden()",
    "snippet": "boolean isInliningForbidden() {\n    return options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.HEURISTIC ||\n        options.propertyRenaming \u003d\u003d\n            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;\n  }",
    "begin_line": 1917,
    "end_line": 1921,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.computeCFG#1924",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.computeCFG()",
    "snippet": "ControlFlowGraph\u003cNode\u003e computeCFG() {\n    logger.fine(\"Computing Control Flow Graph\");\n    Tracer tracer \u003d newTracer(\"computeCFG\");\n    ControlFlowAnalysis cfa \u003d new ControlFlowAnalysis(this, true, false);\n    process(cfa);\n    stopTracer(tracer, \"computeCFG\");\n    return cfa.getCfg();\n  }",
    "begin_line": 1924,
    "end_line": 1931,
    "comment": "/** \n * Control Flow Analysis. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.normalize#1933",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.normalize()",
    "snippet": "public void normalize() {\n    logger.fine(\"Normalizing\");\n    startPass(\"normalize\");\n    process(new Normalize(this, false));\n    endPass();\n  }",
    "begin_line": 1933,
    "end_line": 1938,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.prepareAst#1941",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.prepareAst(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  void prepareAst(Node root) {\n    CompilerPass pass \u003d new PrepareAst(this);\n    pass.process(null, root);\n  }",
    "begin_line": 1941,
    "end_line": 1944,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.recordFunctionInformation#1946",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.recordFunctionInformation()",
    "snippet": "void recordFunctionInformation() {\n    logger.fine(\"Recording function information\");\n    startPass(\"recordFunctionInformation\");\n    RecordFunctionInformation recordFunctionInfoPass \u003d\n        new RecordFunctionInformation(\n            this, getPassConfig().getIntermediateState().functionNames);\n    process(recordFunctionInfoPass);\n    functionInformationMap \u003d recordFunctionInfoPass.getMap();\n    endPass();\n  }",
    "begin_line": 1946,
    "end_line": 1955,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.addChangeHandler#1968",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.addChangeHandler(com.google.javascript.jscomp.CodeChangeHandler)",
    "snippet": "@Override\n  void addChangeHandler(CodeChangeHandler handler) {\n    codeChangeHandlers.add(handler);\n  }",
    "begin_line": 1968,
    "end_line": 1970,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.removeChangeHandler#1973",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.removeChangeHandler(com.google.javascript.jscomp.CodeChangeHandler)",
    "snippet": "@Override\n  void removeChangeHandler(CodeChangeHandler handler) {\n    codeChangeHandlers.remove(handler);\n  }",
    "begin_line": 1973,
    "end_line": 1975,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.reportCodeChange#1983",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.reportCodeChange()",
    "snippet": "@Override\n  public void reportCodeChange() {\n    for (CodeChangeHandler handler : codeChangeHandlers) {\n      handler.reportChange();\n    }\n  }",
    "begin_line": 1983,
    "end_line": 1987,
    "comment": "/** \n * All passes should call reportCodeChange() when they alter the JS tree structure. This is verified by CompilerTestCase. This allows us to optimize to a fixed point.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getCodingConvention#1990",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getCodingConvention()",
    "snippet": "@Override\n  public CodingConvention getCodingConvention() {\n    CodingConvention convention \u003d options.getCodingConvention();\n    convention \u003d convention !\u003d null ? convention : defaultCodingConvention;\n    return convention;\n  }",
    "begin_line": 1990,
    "end_line": 1994,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.isIdeMode#1997",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.isIdeMode()",
    "snippet": "@Override\n  public boolean isIdeMode() {\n    return options.ideMode;\n  }",
    "begin_line": 1997,
    "end_line": 1999,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.acceptEcmaScript5#2002",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.acceptEcmaScript5()",
    "snippet": "@Override\n  public boolean acceptEcmaScript5() {\n    switch (options.getLanguageIn()) {\n      case ECMASCRIPT5:\n      case ECMASCRIPT5_STRICT:\n        return true;\n    }\n    return false;\n  }",
    "begin_line": 2002,
    "end_line": 2009,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.languageMode#2011",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.languageMode()",
    "snippet": "public LanguageMode languageMode() {\n    return options.getLanguageIn();\n  }",
    "begin_line": 2011,
    "end_line": 2013,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.acceptConstKeyword#2016",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.acceptConstKeyword()",
    "snippet": "@Override\n  public boolean acceptConstKeyword() {\n    return options.acceptConstKeyword;\n  }",
    "begin_line": 2016,
    "end_line": 2018,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getParserConfig#2021",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getParserConfig()",
    "snippet": "@Override\n  Config getParserConfig() {\n    if (parserConfig \u003d\u003d null) {\n      Config.LanguageMode mode;\n      switch (options.getLanguageIn()) {\n        case ECMASCRIPT3:\n          mode \u003d Config.LanguageMode.ECMASCRIPT3;\n          break;\n        case ECMASCRIPT5:\n          mode \u003d Config.LanguageMode.ECMASCRIPT5;\n          break;\n        case ECMASCRIPT5_STRICT:\n          mode \u003d Config.LanguageMode.ECMASCRIPT5_STRICT;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected language mode\");\n      }\n\n      parserConfig \u003d ParserRunner.createConfig(\n        isIdeMode(),\n        mode,\n        acceptConstKeyword(),\n        options.extraAnnotationNames);\n    }\n    return parserConfig;\n  }",
    "begin_line": 2021,
    "end_line": 2045,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.isTypeCheckingEnabled#2048",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.isTypeCheckingEnabled()",
    "snippet": "@Override\n  public boolean isTypeCheckingEnabled() {\n    return options.checkTypes;\n  }",
    "begin_line": 2048,
    "end_line": 2050,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getDiagnosticGroups#2061",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getDiagnosticGroups()",
    "snippet": "protected DiagnosticGroups getDiagnosticGroups() {\n    return new DiagnosticGroups();\n  }",
    "begin_line": 2061,
    "end_line": 2063,
    "comment": "/** \n * The warning classes that are available from the command-line, and are suppressible by the  {@code @suppress} annotation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.report#2066",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.report(com.google.javascript.jscomp.JSError)",
    "snippet": "@Override\n  public void report(JSError error) {\n    CheckLevel level \u003d error.getDefaultLevel();\n    if (warningsGuard !\u003d null) {\n      CheckLevel newLevel \u003d warningsGuard.level(error);\n      if (newLevel !\u003d null) {\n        level \u003d newLevel;\n      }\n    }\n\n    if (level.isOn()) {\n      if (getOptions().errorHandler !\u003d null) {\n        getOptions().errorHandler.report(level, error);\n      }\n      errorManager.report(level, error);\n    }\n  }",
    "begin_line": 2066,
    "end_line": 2081,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getErrorLevel#2084",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getErrorLevel(com.google.javascript.jscomp.JSError)",
    "snippet": "@Override\n  public CheckLevel getErrorLevel(JSError error) {\n    Preconditions.checkNotNull(options);\n    return warningsGuard.level(error);\n  }",
    "begin_line": 2084,
    "end_line": 2087,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.throwInternalError#2093",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.throwInternalError(java.lang.String, java.lang.Exception)",
    "snippet": "@Override\n  void throwInternalError(String message, Exception cause) {\n    String finalMessage \u003d\n      \"INTERNAL COMPILER ERROR.\\n\" +\n      \"Please report this problem.\\n\" + message;\n\n    RuntimeException e \u003d new RuntimeException(finalMessage, cause);\n    if (cause !\u003d null) {\n      e.setStackTrace(cause.getStackTrace());\n    }\n    throw e;\n  }",
    "begin_line": 2093,
    "end_line": 2103,
    "comment": "/** \n * Report an internal error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getErrorCount#2109",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getErrorCount()",
    "snippet": "public int getErrorCount() {\n    return errorManager.getErrorCount();\n  }",
    "begin_line": 2109,
    "end_line": 2111,
    "comment": "/** \n * Gets the number of errors.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getWarningCount#2116",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getWarningCount()",
    "snippet": "public int getWarningCount() {\n    return errorManager.getWarningCount();\n  }",
    "begin_line": 2116,
    "end_line": 2118,
    "comment": "/** \n * Gets the number of warnings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.hasHaltingErrors#2121",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.hasHaltingErrors()",
    "snippet": "@Override\n  boolean hasHaltingErrors() {\n    return !isIdeMode() \u0026\u0026 getErrorCount() \u003e 0;\n  }",
    "begin_line": 2121,
    "end_line": 2123,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.hasErrors#2134",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.hasErrors()",
    "snippet": "public boolean hasErrors() {\n    return hasHaltingErrors();\n  }",
    "begin_line": 2134,
    "end_line": 2136,
    "comment": "/** \n * Consults the  {@link ErrorManager} to see if we\u0027ve encountered errorsthat should halt compilation. \u003cp\u003e If  {@link CompilerOptions#ideMode} is {@code true}, this function always returns  {@code false} without consulting the error manager. Theerror manager will continue to be told about new errors and warnings, but the compiler will complete compilation of all inputs.\u003cp\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.addToDebugLog#2140",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.addToDebugLog(java.lang.String)",
    "snippet": "@Override\n  void addToDebugLog(String str) {\n    debugLog.append(str);\n    debugLog.append(\u0027\\n\u0027);\n    logger.fine(str);\n  }",
    "begin_line": 2140,
    "end_line": 2144,
    "comment": "/** \n * Called from the compiler passes, adds debug info \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getSourceFileByName#2147",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getSourceFileByName(java.lang.String)",
    "snippet": "@Override\n  SourceFile getSourceFileByName(String sourceName) {\n    // Here we assume that the source name is the input name, this\n    // is try of JavaScript parsed from source.\n    if (sourceName !\u003d null) {\n      CompilerInput input \u003d inputsById.get(new InputId(sourceName));\n      if (input !\u003d null) {\n        return input.getSourceFile();\n      }\n    }\n    return null;\n  }",
    "begin_line": 2147,
    "end_line": 2157,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getSourceLine#2160",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getSourceLine(java.lang.String, int)",
    "snippet": "@Override\n  public String getSourceLine(String sourceName, int lineNumber) {\n    if (lineNumber \u003c 1) {\n      return null;\n    }\n    SourceFile input \u003d getSourceFileByName(sourceName);\n    if (input !\u003d null) {\n      return input.getLine(lineNumber);\n    }\n    return null;\n  }",
    "begin_line": 2160,
    "end_line": 2169,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getSourceRegion#2172",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getSourceRegion(java.lang.String, int)",
    "snippet": "@Override\n  public Region getSourceRegion(String sourceName, int lineNumber) {\n    if (lineNumber \u003c 1) {\n      return null;\n    }\n    SourceFile input \u003d getSourceFileByName(sourceName);\n    if (input !\u003d null) {\n      return input.getRegion(lineNumber);\n    }\n    return null;\n  }",
    "begin_line": 2172,
    "end_line": 2181,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getNodeForCodeInsertion#2188",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getNodeForCodeInsertion(com.google.javascript.jscomp.JSModule)",
    "snippet": "@Override\n  Node getNodeForCodeInsertion(JSModule module) {\n    if (module \u003d\u003d null) {\n      if (inputs.isEmpty()) {\n        throw new IllegalStateException(\"No inputs\");\n      }\n\n      return inputs.get(0).getAstRoot(this);\n    }\n\n    List\u003cCompilerInput\u003e moduleInputs \u003d module.getInputs();\n    if (moduleInputs.size() \u003e 0) {\n      return moduleInputs.get(0).getAstRoot(this);\n    }\n    throw new IllegalStateException(\"Root module has no inputs\");\n  }",
    "begin_line": 2188,
    "end_line": 2202,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getSourceMap#2204",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getSourceMap()",
    "snippet": "public SourceMap getSourceMap() {\n    return sourceMap;\n  }",
    "begin_line": 2204,
    "end_line": 2206,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getVariableMap#2208",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getVariableMap()",
    "snippet": "VariableMap getVariableMap() {\n    return getPassConfig().getIntermediateState().variableMap;\n  }",
    "begin_line": 2208,
    "end_line": 2210,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getPropertyMap#2212",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getPropertyMap()",
    "snippet": "VariableMap getPropertyMap() {\n    return getPassConfig().getIntermediateState().propertyMap;\n  }",
    "begin_line": 2212,
    "end_line": 2214,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getOptions#2216",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getOptions()",
    "snippet": "CompilerOptions getOptions() {\n    return options;\n  }",
    "begin_line": 2216,
    "end_line": 2218,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getFunctionalInformationMap#2220",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getFunctionalInformationMap()",
    "snippet": "FunctionInformationMap getFunctionalInformationMap() {\n    return functionInformationMap;\n  }",
    "begin_line": 2220,
    "end_line": 2222,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.setLoggingLevel#2227",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.setLoggingLevel(java.util.logging.Level)",
    "snippet": "public static void setLoggingLevel(Level level) {\n    logger.setLevel(level);\n  }",
    "begin_line": 2227,
    "end_line": 2229,
    "comment": "/** \n * Sets the logging level for the com.google.javascript.jscomp package.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getAstDotGraph#2232",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getAstDotGraph()",
    "snippet": "public String getAstDotGraph() throws IOException {\n    if (jsRoot !\u003d null) {\n      ControlFlowAnalysis cfa \u003d new ControlFlowAnalysis(this, true, false);\n      cfa.process(null, jsRoot);\n      return DotFormatter.toDot(jsRoot, cfa.getCfg());\n    } else {\n      return \"\";\n    }\n  }",
    "begin_line": 2232,
    "end_line": 2240,
    "comment": "/** \n * Gets the DOT graph of the AST generated at the end of compilation. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getErrorManager#2243",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getErrorManager()",
    "snippet": "@Override\n  public ErrorManager getErrorManager() {\n    if (options \u003d\u003d null) {\n      initOptions(newCompilerOptions());\n    }\n    return errorManager;\n  }",
    "begin_line": 2243,
    "end_line": 2248,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getInputsInOrder#2251",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getInputsInOrder()",
    "snippet": "@Override\n  List\u003cCompilerInput\u003e getInputsInOrder() {\n    return Collections.\u003cCompilerInput\u003eunmodifiableList(inputs);\n  }",
    "begin_line": 2251,
    "end_line": 2253,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getInputsById#2258",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getInputsById()",
    "snippet": "public Map\u003cInputId, CompilerInput\u003e getInputsById() {\n    return Collections.unmodifiableMap(inputsById);\n  }",
    "begin_line": 2258,
    "end_line": 2260,
    "comment": "/** \n * Returns an unmodifiable view of the compiler inputs indexed by id.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CodeBuilder.getExternsInOrder#2265",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getExternsInOrder()",
    "snippet": "List\u003cCompilerInput\u003e getExternsInOrder() {\n    return Collections.\u003cCompilerInput\u003eunmodifiableList(externs);\n  }",
    "begin_line": 2265,
    "end_line": 2267,
    "comment": "/** \n * Gets the externs in the order in which they are being processed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.IntermediateState#2293",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.IntermediateState()",
    "snippet": "private IntermediateState() {}",
    "begin_line": 2293,
    "end_line": 2293,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.getState#2299",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getState()",
    "snippet": "public IntermediateState getState() {\n    IntermediateState state \u003d new IntermediateState();\n    state.externsRoot \u003d externsRoot;\n    state.jsRoot \u003d jsRoot;\n    state.externs \u003d externs;\n    state.inputs \u003d inputs;\n    state.modules \u003d modules;\n    state.passConfigState \u003d getPassConfig().getIntermediateState();\n    state.typeRegistry \u003d typeRegistry;\n    state.lifeCycleStage \u003d getLifeCycleStage();\n    state.injectedLibraries \u003d Maps.newLinkedHashMap(injectedLibraries);\n\n    return state;\n  }",
    "begin_line": 2299,
    "end_line": 2312,
    "comment": "/** \n * Returns the current internal state, excluding the input files and modules.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.setState#2318",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.setState(com.google.javascript.jscomp.Compiler.IntermediateState)",
    "snippet": "public void setState(IntermediateState state) {\n    externsRoot \u003d state.externsRoot;\n    jsRoot \u003d state.jsRoot;\n    externs \u003d state.externs;\n    inputs \u003d state.inputs;\n    modules \u003d state.modules;\n    passes \u003d createPassConfigInternal();\n    getPassConfig().setIntermediateState(state.passConfigState);\n    typeRegistry \u003d state.typeRegistry;\n    setLifeCycleStage(state.lifeCycleStage);\n\n    injectedLibraries.clear();\n    injectedLibraries.putAll(state.injectedLibraries);\n  }",
    "begin_line": 2318,
    "end_line": 2331,
    "comment": "/** \n * Sets the internal state to the capture given.  Note that this assumes that the input files are already set up.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.getInputsForTesting#2334",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getInputsForTesting()",
    "snippet": "@VisibleForTesting\n  List\u003cCompilerInput\u003e getInputsForTesting() {\n    return inputs;\n  }",
    "begin_line": 2334,
    "end_line": 2336,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.getExternsForTesting#2339",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getExternsForTesting()",
    "snippet": "@VisibleForTesting\n  List\u003cCompilerInput\u003e getExternsForTesting() {\n    return externs;\n  }",
    "begin_line": 2339,
    "end_line": 2341,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.hasRegExpGlobalReferences#2344",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.hasRegExpGlobalReferences()",
    "snippet": "@Override\n  boolean hasRegExpGlobalReferences() {\n    return hasRegExpGlobalReferences;\n  }",
    "begin_line": 2344,
    "end_line": 2346,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.setHasRegExpGlobalReferences#2349",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.setHasRegExpGlobalReferences(boolean)",
    "snippet": "@Override\n  void setHasRegExpGlobalReferences(boolean references) {\n    hasRegExpGlobalReferences \u003d references;\n  }",
    "begin_line": 2349,
    "end_line": 2351,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.updateGlobalVarReferences#2354",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.updateGlobalVarReferences(java.util.Map\u003ccom.google.javascript.jscomp.Scope.Var,com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection\u003e, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  void updateGlobalVarReferences(Map\u003cVar, ReferenceCollection\u003e refMapPatch,\n      Node collectionRoot) {\n    Preconditions.checkState(collectionRoot.isScript()\n        || collectionRoot.isBlock());\n    if (globalRefMap \u003d\u003d null) {\n      globalRefMap \u003d new GlobalVarReferenceMap(getInputsInOrder(),\n          getExternsInOrder());\n    }\n    globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);\n  }",
    "begin_line": 2354,
    "end_line": 2363,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.getGlobalVarReferences#2366",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getGlobalVarReferences()",
    "snippet": "@Override\n  GlobalVarReferenceMap getGlobalVarReferences() {\n    return globalRefMap;\n  }",
    "begin_line": 2366,
    "end_line": 2368,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.getSynthesizedExternsInput#2371",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getSynthesizedExternsInput()",
    "snippet": "@Override\n  CompilerInput getSynthesizedExternsInput() {\n    if (synthesizedExternsInput \u003d\u003d null) {\n      synthesizedExternsInput \u003d newExternInput(SYNTHETIC_EXTERNS);\n    }\n    return synthesizedExternsInput;\n  }",
    "begin_line": 2371,
    "end_line": 2376,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.getProgress#2379",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getProgress()",
    "snippet": "@Override\n  public double getProgress() {\n    return progress;\n  }",
    "begin_line": 2379,
    "end_line": 2381,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.getLastPassName#2384",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getLastPassName()",
    "snippet": "@Override\n  String getLastPassName() {\n    return lastPassName;\n  }",
    "begin_line": 2384,
    "end_line": 2386,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.setProgress#2389",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.setProgress(double, java.lang.String)",
    "snippet": "@Override\n  void setProgress(double newProgress, String passName) {\n    this.lastPassName \u003d passName;\n    if (newProgress \u003e 1.0) {\n      progress \u003d 1.0;\n    } else {\n      progress \u003d newProgress;\n    }\n  }",
    "begin_line": 2389,
    "end_line": 2396,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.replaceScript#2405",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.replaceScript(com.google.javascript.jscomp.JsAst)",
    "snippet": "public void replaceScript(JsAst ast) {\n    CompilerInput input \u003d this.getInput(ast.getInputId());\n    if (!replaceIncrementalSourceAst(ast)) {\n      return;\n    }\n    Node originalRoot \u003d input.getAstRoot(this);\n\n    processNewScript(ast, originalRoot);\n  }",
    "begin_line": 2405,
    "end_line": 2413,
    "comment": "/** \n * Replaces one file in a hot-swap mode. The given JsAst should be made from a new version of a file that already was present in the last compile call. If the file is new, this will silently ignored.\n * @param ast the ast of the file that is being replaced\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.addNewScript#2422",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.addNewScript(com.google.javascript.jscomp.JsAst)",
    "snippet": "public void addNewScript(JsAst ast) {\n    if (!addNewSourceAst(ast)) {\n      return;\n    }\n    Node emptyScript \u003d new Node(Token.SCRIPT);\n    InputId inputId \u003d ast.getInputId();\n    emptyScript.setInputId(inputId);\n    emptyScript.setStaticSourceFile(\n        SourceFile.fromCode(inputId.getIdName(), \"\"));\n\n    processNewScript(ast, emptyScript);\n  }",
    "begin_line": 2422,
    "end_line": 2433,
    "comment": "/** \n * Adds a new Script AST to the compile state. If a script for the same file already exists the script will not be added, instead a call to #replaceScript should be used.\n * @param ast the ast of the new file\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.processNewScript#2435",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.processNewScript(com.google.javascript.jscomp.JsAst, com.google.javascript.rhino.Node)",
    "snippet": "private void processNewScript(JsAst ast, Node originalRoot) {\n    Node js \u003d ast.getAstRoot(this);\n    Preconditions.checkNotNull(js);\n\n    runHotSwap(originalRoot, js, this.getCleanupPassConfig());\n    // NOTE: If hot swap passes that use GlobalNamespace are added, we will need\n    // to revisit this approach to clearing GlobalNamespaces\n    runHotSwapPass(null, null, ensureDefaultPassConfig().garbageCollectChecks);\n\n    this.getTypeRegistry().clearNamedTypes();\n    this.removeSyntheticVarsInput();\n\n    runHotSwap(originalRoot, js, this.ensureDefaultPassConfig());\n  }",
    "begin_line": 2435,
    "end_line": 2448,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.runHotSwap#2453",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.runHotSwap(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.PassConfig)",
    "snippet": "private void runHotSwap(\n      Node originalRoot, Node js, PassConfig passConfig) {\n    for (PassFactory passFactory : passConfig.getChecks()) {\n      runHotSwapPass(originalRoot, js, passFactory);\n    }\n  }",
    "begin_line": 2453,
    "end_line": 2458,
    "comment": "/** \n * Execute the passes from a PassConfig instance over a single replaced file.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.runHotSwapPass#2460",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.runHotSwapPass(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.PassFactory)",
    "snippet": "private void runHotSwapPass(\n      Node originalRoot, Node js, PassFactory passFactory) {\n    HotSwapCompilerPass pass \u003d passFactory.getHotSwapPass(this);\n    if (pass !\u003d null) {\n      logger.info(\"Performing HotSwap for pass \" + passFactory.getName());\n      pass.hotSwapScript(js, originalRoot);\n    }\n  }",
    "begin_line": 2460,
    "end_line": 2467,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.getCleanupPassConfig#2469",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getCleanupPassConfig()",
    "snippet": "private PassConfig getCleanupPassConfig() {\n    return new CleanupPasses(getOptions());\n  }",
    "begin_line": 2469,
    "end_line": 2471,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.removeSyntheticVarsInput#2473",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.removeSyntheticVarsInput()",
    "snippet": "private void removeSyntheticVarsInput() {\n    String sourceName \u003d Compiler.SYNTHETIC_EXTERNS;\n    removeExternInput(new InputId(sourceName));\n  }",
    "begin_line": 2473,
    "end_line": 2476,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.ensureLibraryInjected#2479",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.ensureLibraryInjected(java.lang.String)",
    "snippet": "@Override\n  Node ensureLibraryInjected(String resourceName) {\n    if (injectedLibraries.containsKey(resourceName)) {\n      return null;\n    }\n\n    // All libraries depend on js/base.js\n    boolean isBase \u003d \"base\".equals(resourceName);\n    if (!isBase) {\n      ensureLibraryInjected(\"base\");\n    }\n\n    Node firstChild \u003d loadLibraryCode(resourceName).removeChildren();\n    Node lastChild \u003d firstChild.getLastSibling();\n\n    Node parent \u003d getNodeForCodeInsertion(null);\n    if (isBase) {\n      parent.addChildrenToFront(firstChild);\n    } else {\n      parent.addChildrenAfter(\n          firstChild, injectedLibraries.get(\"base\"));\n    }\n    reportCodeChange();\n\n    injectedLibraries.put(resourceName, lastChild);\n    return lastChild;\n  }",
    "begin_line": 2479,
    "end_line": 2504,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.loadLibraryCode#2508",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.loadLibraryCode(java.lang.String)",
    "snippet": "@VisibleForTesting\n  Node loadLibraryCode(String resourceName) {\n    String originalCode;\n    try {\n      originalCode \u003d CharStreams.toString(new InputStreamReader(\n          Compiler.class.getResourceAsStream(\n              String.format(\"js/%s.js\", resourceName)),\n          Charsets.UTF_8));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    return Normalize.parseAndNormalizeSyntheticCode(\n        this, originalCode,\n        String.format(\"jscomp_%s_\", resourceName));\n  }",
    "begin_line": 2508,
    "end_line": 2522,
    "comment": "/** \n * Load a library as a resource \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.getReleaseVersion#2525",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getReleaseVersion()",
    "snippet": "public static String getReleaseVersion() {\n    ResourceBundle config \u003d ResourceBundle.getBundle(CONFIG_RESOURCE);\n    return config.getString(\"compiler.version\");\n  }",
    "begin_line": 2525,
    "end_line": 2528,
    "comment": "/** \n * Returns the compiler version baked into the jar. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.getReleaseDate#2531",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getReleaseDate()",
    "snippet": "public static String getReleaseDate() {\n    ResourceBundle config \u003d ResourceBundle.getBundle(CONFIG_RESOURCE);\n    return config.getString(\"compiler.date\");\n  }",
    "begin_line": 2531,
    "end_line": 2534,
    "comment": "/** \n * Returns the compiler date baked into the jar. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.setOldParseTree#2541",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.setOldParseTree(java.lang.String, AstRoot)",
    "snippet": "public void setOldParseTree(String sourceName, AstRoot oldAst) {\n  }",
    "begin_line": 2541,
    "end_line": 2542,
    "comment": "/** \n * Stores the old parse tree for a given source file.\n * @param sourceName\n * @param oldAst\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntermediateState.getOldParseTreeByName#2549",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Compiler.java",
    "class_name": "com.google.javascript.jscomp.Compiler",
    "signature": "com.google.javascript.jscomp.Compiler.getOldParseTreeByName(java.lang.String)",
    "snippet": "public AstRoot getOldParseTreeByName(String sourceName) {\n    return null;\n  }",
    "begin_line": 2549,
    "end_line": 2551,
    "comment": "/** \n * Gets an old format parse tree for a given source file.\n * @param sourceName\n * @return\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.CompilerInput#60",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceAst)",
    "snippet": "public CompilerInput(SourceAst ast) {\n    this(ast, ast.getSourceFile().getName(), false);\n  }",
    "begin_line": 60,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.CompilerInput#64",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceAst, boolean)",
    "snippet": "public CompilerInput(SourceAst ast, boolean isExtern) {\n    this(ast, ast.getInputId(), isExtern);\n  }",
    "begin_line": 64,
    "end_line": 66,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.CompilerInput#68",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceAst, java.lang.String, boolean)",
    "snippet": "public CompilerInput(SourceAst ast, String inputId, boolean isExtern) {\n    this(ast, new InputId(inputId), isExtern);\n  }",
    "begin_line": 68,
    "end_line": 70,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.CompilerInput#72",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceAst, com.google.javascript.rhino.InputId, boolean)",
    "snippet": "public CompilerInput(SourceAst ast, InputId inputId, boolean isExtern) {\n    this.ast \u003d ast;\n    this.id \u003d inputId;\n\n    // TODO(nicksantos): Add a precondition check here. People are passing\n    // in null, but they should not be.\n    if (ast !\u003d null \u0026\u0026 ast.getSourceFile() !\u003d null) {\n      ast.getSourceFile().setIsExtern(isExtern);\n    }\n  }",
    "begin_line": 72,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.CompilerInput#83",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceFile)",
    "snippet": "public CompilerInput(SourceFile file) {\n    this(file, false);\n  }",
    "begin_line": 83,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.CompilerInput#87",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceFile, boolean)",
    "snippet": "public CompilerInput(SourceFile file, boolean isExtern) {\n    this(new JsAst(file), isExtern);\n  }",
    "begin_line": 87,
    "end_line": 89,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.getInputId#93",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.getInputId()",
    "snippet": "@Override\n  public InputId getInputId() {\n    return id;\n  }",
    "begin_line": 93,
    "end_line": 95,
    "comment": "/** \n * Returns a name for this input. Must be unique across all inputs. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.getName#99",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.getName()",
    "snippet": "@Override\n  public String getName() {\n    return id.getIdName();\n  }",
    "begin_line": 99,
    "end_line": 101,
    "comment": "/** \n * Returns a name for this input. Must be unique across all inputs. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.getAst#103",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.getAst()",
    "snippet": "public SourceAst getAst() {\n    return ast;\n  }",
    "begin_line": 103,
    "end_line": 105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.getPathRelativeToClosureBase#109",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.getPathRelativeToClosureBase()",
    "snippet": "@Override\n  public String getPathRelativeToClosureBase() {\n    // TODO(nicksantos): Implement me.\n    throw new UnsupportedOperationException();\n  }",
    "begin_line": 109,
    "end_line": 112,
    "comment": "/** \n * Gets the path relative to closure-base, if one is available. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.getAstRoot#115",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.getAstRoot(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "@Override\n  public Node getAstRoot(AbstractCompiler compiler) {\n    Node root \u003d ast.getAstRoot(compiler);\n    // The root maybe null if the AST can not be created.\n    if (root !\u003d null) {\n      Preconditions.checkState(root.isScript());\n      Preconditions.checkNotNull(root.getInputId());\n    }\n    return root;\n  }",
    "begin_line": 115,
    "end_line": 123,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.clearAst#126",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.clearAst()",
    "snippet": "@Override\n  public void clearAst() {\n    ast.clearAst();\n  }",
    "begin_line": 126,
    "end_line": 128,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.getSourceFile#131",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.getSourceFile()",
    "snippet": "@Override\n  public SourceFile getSourceFile() {\n    return ast.getSourceFile();\n  }",
    "begin_line": 131,
    "end_line": 133,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.setSourceFile#136",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.setSourceFile(com.google.javascript.jscomp.SourceFile)",
    "snippet": "@Override\n  public void setSourceFile(SourceFile file) {\n    ast.setSourceFile(file);\n  }",
    "begin_line": 136,
    "end_line": 138,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.getSourceAst#141",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.getSourceAst()",
    "snippet": "public SourceAst getSourceAst() {\n    return ast;\n  }",
    "begin_line": 141,
    "end_line": 143,
    "comment": "/** \n * Returns the SourceAst object on which this input is based. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.setCompiler#146",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.setCompiler(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "public void setCompiler(AbstractCompiler compiler) {\n    this.compiler \u003d compiler;\n  }",
    "begin_line": 146,
    "end_line": 148,
    "comment": "/** \n * Sets an abstract compiler for doing parsing. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.checkErrorManager#150",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.checkErrorManager()",
    "snippet": "private void checkErrorManager() {\n    Preconditions.checkNotNull(compiler,\n        \"Expected setCompiler to be called first: \" + this);\n    Preconditions.checkNotNull(compiler.getErrorManager(),\n        \"Expected compiler to call an error manager: \" + this);\n  }",
    "begin_line": 150,
    "end_line": 155,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.getRequires#159",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.getRequires()",
    "snippet": "@Override\n  public Collection\u003cString\u003e getRequires() {\n    checkErrorManager();\n    try {\n      regenerateDependencyInfoIfNecessary();\n      return Collections.\u003cString\u003eunmodifiableSet(requires);\n    } catch (IOException e) {\n      compiler.getErrorManager().report(CheckLevel.ERROR,\n          JSError.make(AbstractCompiler.READ_ERROR, getName()));\n      return ImmutableList.\u003cString\u003eof();\n    }\n  }",
    "begin_line": 159,
    "end_line": 169,
    "comment": "/** \n * Gets a list of types depended on by this input. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.getProvides#173",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.getProvides()",
    "snippet": "@Override\n  public Collection\u003cString\u003e getProvides() {\n    checkErrorManager();\n    try {\n      regenerateDependencyInfoIfNecessary();\n      return Collections.\u003cString\u003eunmodifiableSet(provides);\n    } catch (IOException e) {\n      compiler.getErrorManager().report(CheckLevel.ERROR,\n          JSError.make(AbstractCompiler.READ_ERROR, getName()));\n      return ImmutableList.\u003cString\u003eof();\n    }\n  }",
    "begin_line": 173,
    "end_line": 183,
    "comment": "/** \n * Gets a list of types provided by this input. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.addProvide#187",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.addProvide(java.lang.String)",
    "snippet": "void addProvide(String provide) {\n    getProvides();\n    provides.add(provide);\n  }",
    "begin_line": 187,
    "end_line": 190,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.addRequire#192",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.addRequire(java.lang.String)",
    "snippet": "void addRequire(String require) {\n    getRequires();\n    requires.add(require);\n  }",
    "begin_line": 192,
    "end_line": 195,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.removeRequire#197",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.removeRequire(java.lang.String)",
    "snippet": "public void removeRequire(String require) {\n    getRequires();\n    requires.remove(require);\n  }",
    "begin_line": 197,
    "end_line": 200,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerInput.regenerateDependencyInfoIfNecessary#205",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.regenerateDependencyInfoIfNecessary()",
    "snippet": "private void regenerateDependencyInfoIfNecessary() throws IOException {\n    // If the code is NOT a JsAst, then it was not originally JS code.\n    // Look at the Ast for dependency info.\n    if (!(ast instanceof JsAst)) {\n      Preconditions.checkNotNull(compiler,\n          \"Expected setCompiler to be called first\");\n      DepsFinder finder \u003d new DepsFinder();\n      Node root \u003d getAstRoot(compiler);\n      if (root \u003d\u003d null) {\n        return;\n      }\n\n      finder.visitTree(getAstRoot(compiler));\n\n      // TODO(nicksantos|user): This caching behavior is a bit\n      // odd, and only works if you assume the exact call flow that\n      // clients are currently using.  In that flow, they call\n      // getProvides(), then remove the goog.provide calls from the\n      // AST, and then call getProvides() again.\n      //\n      // This won\u0027t work for any other call flow, or any sort of incremental\n      // compilation scheme. The API needs to be fixed so callers aren\u0027t\n      // doing weird things like this, and then we should get rid of the\n      // multiple-scan strategy.\n\n      provides.addAll(finder.provides);\n      requires.addAll(finder.requires);\n    } else {\n      // Otherwise, look at the source code.\n      if (!generatedDependencyInfoFromSource) {\n        // Note: it\u0027s OK to use getName() instead of\n        // getPathRelativeToClosureBase() here because we\u0027re not using\n        // this to generate deps files. (We\u0027re only using it for\n        // symbol dependencies.)\n        DependencyInfo info \u003d\n            (new JsFileParser(compiler.getErrorManager()))\n            .setIncludeGoogBase(true)\n            .parseFile(getName(), getName(), getCode());\n\n        provides.addAll(info.getProvides());\n        requires.addAll(info.getRequires());\n\n        generatedDependencyInfoFromSource \u003d true;\n      }\n    }\n  }",
    "begin_line": 205,
    "end_line": 250,
    "comment": "/** \n * Regenerates the provides/requires if we need to do so.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DepsFinder.visitTree#258",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.visitTree(com.google.javascript.rhino.Node)",
    "snippet": "void visitTree(Node n) {\n      visitSubtree(n, null);\n    }",
    "begin_line": 258,
    "end_line": 260,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DepsFinder.visitSubtree#262",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.visitSubtree(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "void visitSubtree(Node n, Node parent) {\n      if (n.isCall()) {\n        String require \u003d\n            codingConvention.extractClassNameIfRequire(n, parent);\n        if (require !\u003d null) {\n          requires.add(require);\n        }\n\n        String provide \u003d\n            codingConvention.extractClassNameIfProvide(n, parent);\n        if (provide !\u003d null) {\n          provides.add(provide);\n        }\n        return;\n      } else if (parent !\u003d null \u0026\u0026\n          !parent.isExprResult() \u0026\u0026\n          !parent.isScript()) {\n        return;\n      }\n\n      for (Node child \u003d n.getFirstChild();\n           child !\u003d null; child \u003d child.getNext()) {\n        visitSubtree(child, n);\n      }\n    }",
    "begin_line": 262,
    "end_line": 286,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DepsFinder.getLine#297",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.getLine(int)",
    "snippet": "public String getLine(int lineNumber) {\n    return getSourceFile().getLine(lineNumber);\n  }",
    "begin_line": 297,
    "end_line": 299,
    "comment": "/** \n * Gets the source line for the indicated line number.\n * @param lineNumber the line number, 1 being the first line of the file.\n * @return The line indicated. Does not include the newline at the endof the file. Returns  {@code null} if it does not exist,or if there was an IO exception.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DepsFinder.getRegion#310",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.getRegion(int)",
    "snippet": "public Region getRegion(int lineNumber) {\n    return getSourceFile().getRegion(lineNumber);\n  }",
    "begin_line": 310,
    "end_line": 312,
    "comment": "/** \n * Get a region around the indicated line number. The exact definition of a region is implementation specific, but it must contain the line indicated by the line number. A region must not start or end by a carriage return.\n * @param lineNumber the line number, 1 being the first line of the file.\n * @return The line indicated. Returns {@code null} if it does not exist,or if there was an IO exception.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DepsFinder.getCode#314",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.getCode()",
    "snippet": "public String getCode() throws IOException {\n    return getSourceFile().getCode();\n  }",
    "begin_line": 314,
    "end_line": 316,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DepsFinder.getModule#319",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.getModule()",
    "snippet": "public JSModule getModule() {\n    return module;\n  }",
    "begin_line": 319,
    "end_line": 321,
    "comment": "/** \n * Returns the module to which the input belongs. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DepsFinder.setModule#324",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.setModule(com.google.javascript.jscomp.JSModule)",
    "snippet": "public void setModule(JSModule module) {\n    // An input may only belong to one module.\n    Preconditions.checkArgument(\n        module \u003d\u003d null || this.module \u003d\u003d null || this.module \u003d\u003d module);\n    this.module \u003d module;\n  }",
    "begin_line": 324,
    "end_line": 329,
    "comment": "/** \n * Sets the module to which the input belongs. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DepsFinder.overrideModule#332",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.overrideModule(com.google.javascript.jscomp.JSModule)",
    "snippet": "void overrideModule(JSModule module) {\n    this.module \u003d module;\n  }",
    "begin_line": 332,
    "end_line": 334,
    "comment": "/** \n * Overrides the module to which the input belongs. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DepsFinder.isExtern#336",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.isExtern()",
    "snippet": "public boolean isExtern() {\n    if (ast \u003d\u003d null || ast.getSourceFile() \u003d\u003d null) {\n      return false;\n    }\n    return ast.getSourceFile().isExtern();\n  }",
    "begin_line": 336,
    "end_line": 341,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DepsFinder.setIsExtern#343",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.setIsExtern(boolean)",
    "snippet": "void setIsExtern(boolean isExtern) {\n    if (ast \u003d\u003d null || ast.getSourceFile() \u003d\u003d null) {\n      return;\n    }\n    ast.getSourceFile().setIsExtern(isExtern);\n  }",
    "begin_line": 343,
    "end_line": 348,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DepsFinder.getLineOffset#350",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.getLineOffset(int)",
    "snippet": "public int getLineOffset(int lineno) {\n    return ast.getSourceFile().getLineOffset(lineno);\n  }",
    "begin_line": 350,
    "end_line": 352,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DepsFinder.getNumLines#355",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.getNumLines()",
    "snippet": "public int getNumLines() {\n    return ast.getSourceFile().getNumLines();\n  }",
    "begin_line": 355,
    "end_line": 357,
    "comment": "/** \n * @return The number of lines in this input. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DepsFinder.toString#360",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerInput.java",
    "class_name": "com.google.javascript.jscomp.CompilerInput",
    "signature": "com.google.javascript.jscomp.CompilerInput.toString()",
    "snippet": "@Override\n  public String toString() {\n    return getName();\n  }",
    "begin_line": 360,
    "end_line": 362,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setAggressiveVarCheck#139",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setAggressiveVarCheck(com.google.javascript.jscomp.CheckLevel)",
    "snippet": "public void setAggressiveVarCheck(CheckLevel level) {\n    this.aggressiveVarCheck \u003d level;\n  }",
    "begin_line": 139,
    "end_line": 141,
    "comment": "/** \n * Checks for suspicious variable definitions and undefined variables \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setTightenTypes#155",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setTightenTypes(boolean)",
    "snippet": "public void setTightenTypes(boolean tighten) {\n    tightenTypes \u003d tighten;\n  }",
    "begin_line": 155,
    "end_line": 157,
    "comment": "/** \n * Tightens types based on a global analysis. Experimental. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setReportMissingOverride#165",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setReportMissingOverride(com.google.javascript.jscomp.CheckLevel)",
    "snippet": "public void setReportMissingOverride(CheckLevel level) {\n    reportMissingOverride \u003d level;\n  }",
    "begin_line": 165,
    "end_line": 167,
    "comment": "/** \n * Flags a warning if a property is missing the @override annotation, but it overrides a base class property.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setReportUnknownTypes#172",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setReportUnknownTypes(com.google.javascript.jscomp.CheckLevel)",
    "snippet": "public void setReportUnknownTypes(CheckLevel level) {\n    reportUnknownTypes \u003d level;\n  }",
    "begin_line": 172,
    "end_line": 174,
    "comment": "/** \n * Flags a warning for every node whose type could not be determined. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCheckRequires#179",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCheckRequires(com.google.javascript.jscomp.CheckLevel)",
    "snippet": "public void setCheckRequires(CheckLevel level) {\n    checkRequires \u003d level;\n  }",
    "begin_line": 179,
    "end_line": 181,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCheckProvides#186",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCheckProvides(com.google.javascript.jscomp.CheckLevel)",
    "snippet": "public void setCheckProvides(CheckLevel level) {\n    checkProvides \u003d level;\n  }",
    "begin_line": 186,
    "end_line": 188,
    "comment": "/** \n * Checks for missing goog.provides() calls \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCheckGlobalNamesLevel#196",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCheckGlobalNamesLevel(com.google.javascript.jscomp.CheckLevel)",
    "snippet": "public void setCheckGlobalNamesLevel(CheckLevel level) {\n    checkGlobalNamesLevel \u003d level;\n  }",
    "begin_line": 196,
    "end_line": 198,
    "comment": "/** \n * Checks the integrity of references to qualified global names. (e.g. \"a.b\")\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setBrokenClosureRequiresLevel#203",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setBrokenClosureRequiresLevel(com.google.javascript.jscomp.CheckLevel)",
    "snippet": "public void setBrokenClosureRequiresLevel(CheckLevel level) {\n    brokenClosureRequiresLevel \u003d level;\n  }",
    "begin_line": 203,
    "end_line": 205,
    "comment": "/** \n * Sets the check level for bad Closure require calls. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCheckGlobalThisLevel#217",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCheckGlobalThisLevel(com.google.javascript.jscomp.CheckLevel)",
    "snippet": "public void setCheckGlobalThisLevel(CheckLevel level) {\n    this.checkGlobalThisLevel \u003d level;\n  }",
    "begin_line": 217,
    "end_line": 219,
    "comment": "/** \n * Checks for certain uses of the  {@code this} keyword that are consideredunsafe because they are likely to reference the global  {@code this}object unintentionally. If this is off, but collapseProperties is on, then the compiler will usually ignore you and run this check anyways.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCheckMissingGetCssNameLevel#227",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCheckMissingGetCssNameLevel(com.google.javascript.jscomp.CheckLevel)",
    "snippet": "public void setCheckMissingGetCssNameLevel(CheckLevel level) {\n    this.checkMissingGetCssNameLevel \u003d level;\n  }",
    "begin_line": 227,
    "end_line": 229,
    "comment": "/** \n * Checks that certain string literals only appear in strings used as goog.getCssName arguments.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCheckCaja#239",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCheckCaja(boolean)",
    "snippet": "public void setCheckCaja(boolean check) {\n    checkCaja \u003d check;\n  }",
    "begin_line": 239,
    "end_line": 241,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCheckUnreachableCode#303",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCheckUnreachableCode(com.google.javascript.jscomp.CheckLevel)",
    "snippet": "public void setCheckUnreachableCode(CheckLevel level) {\n    this.checkUnreachableCode \u003d level;\n  }",
    "begin_line": 303,
    "end_line": 305,
    "comment": "/** \n * Checks for unreachable code \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCheckMissingReturn#310",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCheckMissingReturn(com.google.javascript.jscomp.CheckLevel)",
    "snippet": "public void setCheckMissingReturn(CheckLevel level) {\n    this.checkMissingReturn \u003d level;\n  }",
    "begin_line": 310,
    "end_line": 312,
    "comment": "/** \n * Checks for missing return statements \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setAliasableGlobals#342",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setAliasableGlobals(java.lang.String)",
    "snippet": "public void setAliasableGlobals(String names) {\n    aliasableGlobals \u003d names;\n  }",
    "begin_line": 342,
    "end_line": 344,
    "comment": "/** \n * A comma separated white-list of global names. When  {@link #aliasExternals}is enable, if set to a non-empty string, only externals with these names will be considered for aliasing.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setUnaliasableGlobals#352",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setUnaliasableGlobals(java.lang.String)",
    "snippet": "public void setUnaliasableGlobals(String names) {\n    unaliasableGlobals \u003d names;\n  }",
    "begin_line": 352,
    "end_line": 354,
    "comment": "/** \n * A comma separated white-list of global names. When  {@link #aliasExternals}is enable, these global names will not be aliased.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCollapseObjectLiterals#466",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCollapseObjectLiterals(boolean)",
    "snippet": "public void setCollapseObjectLiterals(boolean enabled) {\n    collapseObjectLiterals \u003d enabled;\n  }",
    "begin_line": 466,
    "end_line": 468,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setSpecializeInitialModule#517",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setSpecializeInitialModule(boolean)",
    "snippet": "public void setSpecializeInitialModule(boolean enabled) {\n    specializeInitialModule \u003d enabled;\n  }",
    "begin_line": 517,
    "end_line": 519,
    "comment": "/** \n * Specialize the initial module at the cost of later modules \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setReplaceMessagesWithChromeI18n#532",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setReplaceMessagesWithChromeI18n(boolean, java.lang.String)",
    "snippet": "public void setReplaceMessagesWithChromeI18n(\n      boolean replaceMessagesWithChromeI18n,\n      String tcProjectId) {\n    if (replaceMessagesWithChromeI18n \u0026\u0026\n        messageBundle !\u003d null \u0026\u0026\n        !(messageBundle instanceof EmptyMessageBundle)) {\n      throw new RuntimeException(\"When replacing messages with \" +\n          \"chrome.i18n.getMessage, a message bundle should not be specified.\");\n    }\n\n    this.replaceMessagesWithChromeI18n \u003d replaceMessagesWithChromeI18n;\n    this.tcProjectId \u003d tcProjectId;\n  }",
    "begin_line": 532,
    "end_line": 544,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setIgnoreCajaProperties#562",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setIgnoreCajaProperties(boolean)",
    "snippet": "public void setIgnoreCajaProperties(boolean enabled) {\n    ignoreCajaProperties \u003d enabled;\n  }",
    "begin_line": 562,
    "end_line": 564,
    "comment": "/** \n * Add code to skip properties that Caja adds to Object.prototype \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setAppNameStr#634",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setAppNameStr(java.lang.String)",
    "snippet": "public void setAppNameStr(String appNameStr) {\n    this.appNameStr \u003d appNameStr;\n  }",
    "begin_line": 634,
    "end_line": 636,
    "comment": "/** \n * App identifier string for use by the instrumentation template\u0027s app_name_setter. @see #instrumentationTemplate\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setPreferSingleQuotes#714",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setPreferSingleQuotes(boolean)",
    "snippet": "public void setPreferSingleQuotes(boolean enabled) {\n    this.preferSingleQuotes \u003d enabled;\n  }",
    "begin_line": 714,
    "end_line": 716,
    "comment": "/** \n * Normally, when there are an equal number of single and double quotes in a string, the compiler will use double quotes. Set this to true to prefer single quotes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setTrustedStrings#726",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setTrustedStrings(boolean)",
    "snippet": "public void setTrustedStrings(boolean yes) {\n    trustedStrings \u003d yes;\n  }",
    "begin_line": 726,
    "end_line": 728,
    "comment": "/** \n * Some people want to put arbitrary user input into strings, which are then run through the compiler. These scripts are then put into HTML. By default, we assume strings are untrusted. If the compiler is run from the command-line, we assume that strings are trusted.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setReportPath#733",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setReportPath(java.lang.String)",
    "snippet": "public void setReportPath(String reportPath) {\n    this.reportPath \u003d reportPath;\n  }",
    "begin_line": 733,
    "end_line": 735,
    "comment": "/** \n * Where to save a report of global name usage \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.getTracerMode#739",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.getTracerMode()",
    "snippet": "public TracerMode getTracerMode() {\n    return tracer;\n  }",
    "begin_line": 739,
    "end_line": 741,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setTracerMode#743",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setTracerMode(com.google.javascript.jscomp.CompilerOptions.TracerMode)",
    "snippet": "public void setTracerMode(TracerMode mode) {\n    tracer \u003d mode;\n  }",
    "begin_line": 743,
    "end_line": 745,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setNameReferenceReportPath#773",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setNameReferenceReportPath(java.lang.String)",
    "snippet": "public void setNameReferenceReportPath(String filePath) {\n    nameReferenceReportPath \u003d filePath;\n  }",
    "begin_line": 773,
    "end_line": 775,
    "comment": "/** \n * Where to save a cross-reference report from the name reference graph \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setNameReferenceGraphPath#780",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setNameReferenceGraphPath(java.lang.String)",
    "snippet": "public void setNameReferenceGraphPath(String filePath) {\n    nameReferenceGraphPath \u003d filePath;\n  }",
    "begin_line": 780,
    "end_line": 782,
    "comment": "/** \n * Where to save the name reference graph \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setProtectHiddenSideEffects#821",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setProtectHiddenSideEffects(boolean)",
    "snippet": "public void setProtectHiddenSideEffects(boolean enable) {\n    this.protectHiddenSideEffects \u003d enable;\n  }",
    "begin_line": 821,
    "end_line": 823,
    "comment": "/** \n * When enabled, assume that apparently side-effect free code is meaningful.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.CompilerOptions#841",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.CompilerOptions()",
    "snippet": "public CompilerOptions() {\n    // Accepted language\n    languageIn \u003d LanguageMode.ECMASCRIPT3;\n\n    // Language variation\n    acceptConstKeyword \u003d false;\n\n    // Checks\n    skipAllPasses \u003d false;\n    nameAnonymousFunctionsOnly \u003d false;\n    devMode \u003d DevMode.OFF;\n    checkSymbols \u003d false;\n    aggressiveVarCheck \u003d CheckLevel.OFF;\n    checkSuspiciousCode \u003d false;\n    checkControlStructures \u003d false;\n    checkTypes \u003d false;\n    tightenTypes \u003d false;\n    reportMissingOverride \u003d CheckLevel.OFF;\n    reportUnknownTypes \u003d CheckLevel.OFF;\n    checkRequires \u003d CheckLevel.OFF;\n    checkProvides \u003d CheckLevel.OFF;\n    checkGlobalNamesLevel \u003d CheckLevel.OFF;\n    brokenClosureRequiresLevel \u003d CheckLevel.ERROR;\n    checkGlobalThisLevel \u003d CheckLevel.OFF;\n    checkUnreachableCode \u003d CheckLevel.OFF;\n    checkMissingReturn \u003d CheckLevel.OFF;\n    checkMissingGetCssNameLevel \u003d CheckLevel.OFF;\n    checkMissingGetCssNameBlacklist \u003d null;\n    checkCaja \u003d false;\n    computeFunctionSideEffects \u003d false;\n    chainCalls \u003d false;\n    extraAnnotationNames \u003d null;\n\n    // Optimizations\n    foldConstants \u003d false;\n    coalesceVariableNames \u003d false;\n    deadAssignmentElimination \u003d false;\n    inlineConstantVars \u003d false;\n    inlineFunctions \u003d false;\n    inlineLocalFunctions \u003d false;\n    assumeStrictThis \u003d false;\n    inlineProperties \u003d false;\n    crossModuleCodeMotion \u003d false;\n    crossModuleMethodMotion \u003d false;\n    inlineGetters \u003d false;\n    inlineVariables \u003d false;\n    inlineLocalVariables \u003d false;\n    smartNameRemoval \u003d false;\n    removeDeadCode \u003d false;\n    extractPrototypeMemberDeclarations \u003d false;\n    removeUnusedPrototypeProperties \u003d false;\n    removeUnusedPrototypePropertiesInExterns \u003d false;\n    removeUnusedClassProperties \u003d false;\n    removeUnusedVars \u003d false;\n    removeUnusedLocalVars \u003d false;\n    aliasExternals \u003d false;\n    collapseVariableDeclarations \u003d false;\n    groupVariableDeclarations \u003d false;\n    collapseAnonymousFunctions \u003d false;\n    aliasableStrings \u003d Collections.emptySet();\n    aliasStringsBlacklist \u003d \"\";\n    aliasAllStrings \u003d false;\n    outputJsStringUsage \u003d false;\n    convertToDottedProperties \u003d false;\n    rewriteFunctionExpressions \u003d false;\n    optimizeParameters \u003d false;\n    optimizeReturns \u003d false;\n\n    // Renaming\n    variableRenaming \u003d VariableRenamingPolicy.OFF;\n    propertyRenaming \u003d PropertyRenamingPolicy.OFF;\n    propertyAffinity \u003d false;\n    labelRenaming \u003d false;\n    generatePseudoNames \u003d false;\n    shadowVariables \u003d false;\n    renamePrefix \u003d null;\n    aliasKeywords \u003d false;\n    collapseProperties \u003d false;\n    collapsePropertiesOnExternTypes \u003d false;\n    collapseObjectLiterals \u003d false;\n    devirtualizePrototypeMethods \u003d false;\n    disambiguateProperties \u003d false;\n    ambiguateProperties \u003d false;\n    anonymousFunctionNaming \u003d AnonymousFunctionNamingPolicy.OFF;\n    exportTestFunctions \u003d false;\n\n    // Alterations\n    runtimeTypeCheck \u003d false;\n    runtimeTypeCheckLogFunction \u003d null;\n    ignoreCajaProperties \u003d false;\n    syntheticBlockStartMarker \u003d null;\n    syntheticBlockEndMarker \u003d null;\n    locale \u003d null;\n    markAsCompiled \u003d false;\n    removeTryCatchFinally \u003d false;\n    closurePass \u003d false;\n    jqueryPass \u003d false;\n    removeAbstractMethods \u003d true;\n    removeClosureAsserts \u003d false;\n    stripTypes \u003d Collections.emptySet();\n    stripNameSuffixes \u003d Collections.emptySet();\n    stripNamePrefixes \u003d Collections.emptySet();\n    stripTypePrefixes \u003d Collections.emptySet();\n    customPasses \u003d null;\n    markNoSideEffectCalls \u003d false;\n    defineReplacements \u003d Maps.newHashMap();\n    tweakProcessing \u003d TweakProcessing.OFF;\n    tweakReplacements \u003d Maps.newHashMap();\n    moveFunctionDeclarations \u003d false;\n    instrumentationTemplate \u003d null;\n    appNameStr \u003d \"\";\n    recordFunctionInformation \u003d false;\n    generateExports \u003d false;\n    cssRenamingMap \u003d null;\n    cssRenamingWhitelist \u003d null;\n    processObjectPropertyString \u003d false;\n    idGenerators \u003d Collections.emptySet();\n    replaceStringsFunctionDescriptions \u003d Collections.emptyList();\n    replaceStringsPlaceholderToken \u003d \"\";\n    replaceStringsReservedStrings \u003d Collections.emptySet();\n    propertyInvalidationErrors \u003d Maps.newHashMap();\n\n    // Output\n    printInputDelimiter \u003d false;\n    prettyPrint \u003d false;\n    lineBreak \u003d false;\n    preferLineBreakAtEndOfFile \u003d false;\n    reportPath \u003d null;\n    tracer \u003d TracerMode.OFF;\n    colorizeErrorOutput \u003d false;\n    errorFormat \u003d ErrorFormat.SINGLELINE;\n    debugFunctionSideEffectsPath \u003d null;\n    externExports \u003d false;\n    nameReferenceReportPath \u003d null;\n    nameReferenceGraphPath \u003d null;\n\n    // Debugging\n    aliasHandler \u003d NULL_ALIAS_TRANSFORMATION_HANDLER;\n    errorHandler \u003d null;\n  }",
    "begin_line": 841,
    "end_line": 980,
    "comment": "/** \n * Initializes compiler options. All options are disabled by default. Command-line frontends to the compiler should set these properties like a builder.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.isRemoveUnusedClassProperties#985",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.isRemoveUnusedClassProperties()",
    "snippet": "public boolean isRemoveUnusedClassProperties() {\n    return removeUnusedClassProperties;\n  }",
    "begin_line": 985,
    "end_line": 987,
    "comment": "/** \n * @return Whether to attempt to remove unused class properties\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setRemoveUnusedClassProperties#993",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setRemoveUnusedClassProperties(boolean)",
    "snippet": "public void setRemoveUnusedClassProperties(boolean removeUnusedClassProperties) {\n    this.removeUnusedClassProperties \u003d removeUnusedClassProperties;\n  }",
    "begin_line": 993,
    "end_line": 995,
    "comment": "/** \n * @param removeUnusedClassProperties Whether to attempt to removeunused class properties\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.getDefineReplacements#1000",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.getDefineReplacements()",
    "snippet": "public Map\u003cString, Node\u003e getDefineReplacements() {\n    return getReplacementsHelper(defineReplacements);\n  }",
    "begin_line": 1000,
    "end_line": 1002,
    "comment": "/** \n * Returns the map of define replacements.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.getTweakReplacements#1007",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.getTweakReplacements()",
    "snippet": "public Map\u003cString, Node\u003e getTweakReplacements() {\n    return getReplacementsHelper(tweakReplacements);\n  }",
    "begin_line": 1007,
    "end_line": 1009,
    "comment": "/** \n * Returns the map of tweak replacements.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.getReplacementsHelper#1014",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.getReplacementsHelper(java.util.Map\u003cjava.lang.String,java.lang.Object\u003e)",
    "snippet": "private static Map\u003cString, Node\u003e getReplacementsHelper(\n      Map\u003cString, Object\u003e source) {\n    Map\u003cString, Node\u003e map \u003d Maps.newHashMap();\n    for (Map.Entry\u003cString, Object\u003e entry : source.entrySet()) {\n      String name \u003d entry.getKey();\n      Object value \u003d entry.getValue();\n      if (value instanceof Boolean) {\n        map.put(name, NodeUtil.booleanNode(((Boolean) value).booleanValue()));\n      } else if (value instanceof Integer) {\n        map.put(name, IR.number(((Integer) value).intValue()));\n      } else if (value instanceof Double) {\n        map.put(name, IR.number(((Double) value).doubleValue()));\n      } else {\n        Preconditions.checkState(value instanceof String);\n        map.put(name, IR.string((String) value));\n      }\n    }\n    return map;\n  }",
    "begin_line": 1014,
    "end_line": 1032,
    "comment": "/** \n * Creates a map of String-\u003eNode from a map of String-\u003eNumber/String/Boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setDefineToBooleanLiteral#1038",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setDefineToBooleanLiteral(java.lang.String, boolean)",
    "snippet": "public void setDefineToBooleanLiteral(String defineName, boolean value) {\n    defineReplacements.put(defineName, new Boolean(value));\n  }",
    "begin_line": 1038,
    "end_line": 1040,
    "comment": "/** \n * Sets the value of the  {@code @define} variable in JSto a boolean literal.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setDefineToStringLiteral#1046",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setDefineToStringLiteral(java.lang.String, java.lang.String)",
    "snippet": "public void setDefineToStringLiteral(String defineName, String value) {\n    defineReplacements.put(defineName, value);\n  }",
    "begin_line": 1046,
    "end_line": 1048,
    "comment": "/** \n * Sets the value of the  {@code @define} variable in JS to aString literal.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setDefineToNumberLiteral#1054",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setDefineToNumberLiteral(java.lang.String, int)",
    "snippet": "public void setDefineToNumberLiteral(String defineName, int value) {\n    defineReplacements.put(defineName, new Integer(value));\n  }",
    "begin_line": 1054,
    "end_line": 1056,
    "comment": "/** \n * Sets the value of the  {@code @define} variable in JS to anumber literal.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setDefineToDoubleLiteral#1062",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setDefineToDoubleLiteral(java.lang.String, double)",
    "snippet": "public void setDefineToDoubleLiteral(String defineName, double value) {\n    defineReplacements.put(defineName, new Double(value));\n  }",
    "begin_line": 1062,
    "end_line": 1064,
    "comment": "/** \n * Sets the value of the  {@code @define} variable in JS to anumber literal.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setTweakToBooleanLiteral#1070",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setTweakToBooleanLiteral(java.lang.String, boolean)",
    "snippet": "public void setTweakToBooleanLiteral(String tweakId, boolean value) {\n    tweakReplacements.put(tweakId, new Boolean(value));\n  }",
    "begin_line": 1070,
    "end_line": 1072,
    "comment": "/** \n * Sets the value of the tweak in JS to a boolean literal.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setTweakToStringLiteral#1078",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setTweakToStringLiteral(java.lang.String, java.lang.String)",
    "snippet": "public void setTweakToStringLiteral(String tweakId, String value) {\n    tweakReplacements.put(tweakId, value);\n  }",
    "begin_line": 1078,
    "end_line": 1080,
    "comment": "/** \n * Sets the value of the tweak in JS to a String literal.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setTweakToNumberLiteral#1086",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setTweakToNumberLiteral(java.lang.String, int)",
    "snippet": "public void setTweakToNumberLiteral(String tweakId, int value) {\n    tweakReplacements.put(tweakId, new Integer(value));\n  }",
    "begin_line": 1086,
    "end_line": 1088,
    "comment": "/** \n * Sets the value of the tweak in JS to a number literal.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setTweakToDoubleLiteral#1094",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setTweakToDoubleLiteral(java.lang.String, double)",
    "snippet": "public void setTweakToDoubleLiteral(String tweakId, double value) {\n    tweakReplacements.put(tweakId, new Double(value));\n  }",
    "begin_line": 1094,
    "end_line": 1096,
    "comment": "/** \n * Sets the value of the tweak in JS to a number literal.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.skipAllCompilerPasses#1101",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.skipAllCompilerPasses()",
    "snippet": "public void skipAllCompilerPasses() {\n    skipAllPasses \u003d true;\n  }",
    "begin_line": 1101,
    "end_line": 1103,
    "comment": "/** \n * Skip all possible passes, to make the compiler as fast as possible.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.enables#1109",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.enables(com.google.javascript.jscomp.DiagnosticGroup)",
    "snippet": "boolean enables(DiagnosticGroup type) {\n    return warningsGuard.enables(type);\n  }",
    "begin_line": 1109,
    "end_line": 1111,
    "comment": "/** \n * Whether the warnings guard in this Options object enables the given group of warnings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.disables#1117",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.disables(com.google.javascript.jscomp.DiagnosticGroup)",
    "snippet": "boolean disables(DiagnosticGroup type) {\n    return warningsGuard.disables(type);\n  }",
    "begin_line": 1117,
    "end_line": 1119,
    "comment": "/** \n * Whether the warnings guard in this Options object disables the given group of warnings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setWarningLevel#1124",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel)",
    "snippet": "public void setWarningLevel(DiagnosticGroup type, CheckLevel level) {\n    addWarningsGuard(new DiagnosticGroupWarningsGuard(type, level));\n  }",
    "begin_line": 1124,
    "end_line": 1126,
    "comment": "/** \n * Configure the given type of warning to the given level.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.getWarningsGuard#1128",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.getWarningsGuard()",
    "snippet": "WarningsGuard getWarningsGuard() {\n    return warningsGuard;\n  }",
    "begin_line": 1128,
    "end_line": 1130,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.resetWarningsGuard#1135",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.resetWarningsGuard()",
    "snippet": "public void resetWarningsGuard() {\n    warningsGuard \u003d new ComposeWarningsGuard();\n  }",
    "begin_line": 1135,
    "end_line": 1137,
    "comment": "/** \n * Reset the warnings guard.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.useEmergencyFailSafe#1143",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.useEmergencyFailSafe()",
    "snippet": "void useEmergencyFailSafe() {\n    warningsGuard \u003d warningsGuard.makeEmergencyFailSafeGuard();\n  }",
    "begin_line": 1143,
    "end_line": 1145,
    "comment": "/** \n * The emergency fail safe removes all strict and ERROR-escalating warnings guards.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.addWarningsGuard#1150",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.addWarningsGuard(com.google.javascript.jscomp.WarningsGuard)",
    "snippet": "public void addWarningsGuard(WarningsGuard guard) {\n    warningsGuard.addGuard(guard);\n  }",
    "begin_line": 1150,
    "end_line": 1152,
    "comment": "/** \n * Add a guard to the set of warnings guards.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setRenamingPolicy#1159",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setRenamingPolicy(com.google.javascript.jscomp.VariableRenamingPolicy, com.google.javascript.jscomp.PropertyRenamingPolicy)",
    "snippet": "public void setRenamingPolicy(VariableRenamingPolicy newVariablePolicy,\n      PropertyRenamingPolicy newPropertyPolicy) {\n    this.variableRenaming \u003d newVariablePolicy;\n    this.propertyRenaming \u003d newPropertyPolicy;\n  }",
    "begin_line": 1159,
    "end_line": 1163,
    "comment": "/** \n * Sets the variable and property renaming policies for the compiler, in a way that clears warnings about the renaming policy being uninitialized from flags.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setPropertyAffinity#1165",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setPropertyAffinity(boolean)",
    "snippet": "public void setPropertyAffinity(boolean useAffinity) {\n    this.propertyAffinity \u003d useAffinity;\n  }",
    "begin_line": 1165,
    "end_line": 1167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setShadowVariables#1170",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setShadowVariables(boolean)",
    "snippet": "public void setShadowVariables(boolean shadow) {\n    this.shadowVariables \u003d shadow;\n  }",
    "begin_line": 1170,
    "end_line": 1172,
    "comment": "/** \n * Should shadow outer scope variable name during renaming. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCollapsePropertiesOnExternTypes#1179",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCollapsePropertiesOnExternTypes(boolean)",
    "snippet": "public void setCollapsePropertiesOnExternTypes(boolean collapse) {\n    collapsePropertiesOnExternTypes \u003d collapse;\n  }",
    "begin_line": 1179,
    "end_line": 1181,
    "comment": "/** \n * If true, flattens multi-level property names on extern types (e.g. String$f \u003d x). This should only be used with the typed version of the externs files.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setProcessObjectPropertyString#1186",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setProcessObjectPropertyString(boolean)",
    "snippet": "public void setProcessObjectPropertyString(boolean process) {\n    processObjectPropertyString \u003d process;\n  }",
    "begin_line": 1186,
    "end_line": 1188,
    "comment": "/** \n * If true, process goog.testing.ObjectPropertyString instances.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setReplaceIdGenerators#1193",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setReplaceIdGenerators(boolean)",
    "snippet": "public void setReplaceIdGenerators(boolean replaceIdGenerators) {\n    this.replaceIdGenerators \u003d replaceIdGenerators;\n  }",
    "begin_line": 1193,
    "end_line": 1195,
    "comment": "/** \n * @param replaceIdGenerators the replaceIdGenerators to set\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setIdGenerators#1200",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setIdGenerators(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public void setIdGenerators(Set\u003cString\u003e idGenerators) {\n    this.idGenerators \u003d Sets.newHashSet(idGenerators);\n  }",
    "begin_line": 1200,
    "end_line": 1202,
    "comment": "/** \n * Sets the id generators to replace.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setIdGeneratorsMap#1209",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setIdGeneratorsMap(java.lang.String)",
    "snippet": "public void setIdGeneratorsMap(String previousMappings) {\n    this.idGeneratorsMapSerialized \u003d previousMappings;\n  }",
    "begin_line": 1209,
    "end_line": 1211,
    "comment": "/** \n * A previous map of ids (serialized to a string by a previous compile). This will be used as a hint during the ReplaceIdGenerators pass, which will attempt to reuse the same ids.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setInlineFunctions#1216",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setInlineFunctions(com.google.javascript.jscomp.CompilerOptions.Reach)",
    "snippet": "public void setInlineFunctions(Reach reach) {\n    switch (reach) {\n      case ALL:\n        this.inlineFunctions \u003d true;\n        this.inlineLocalFunctions \u003d true;\n        break;\n      case LOCAL_ONLY:\n        this.inlineFunctions \u003d false;\n        this.inlineLocalFunctions \u003d true;\n        break;\n      case NONE:\n        this.inlineFunctions \u003d false;\n        this.inlineLocalFunctions \u003d false;\n        break;\n      default:\n        throw new IllegalStateException(\"unexpected\");\n    }\n  }",
    "begin_line": 1216,
    "end_line": 1233,
    "comment": "/** \n * Set the function inlining policy for the compiler.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setInlineVariables#1238",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setInlineVariables(com.google.javascript.jscomp.CompilerOptions.Reach)",
    "snippet": "public void setInlineVariables(Reach reach) {\n    switch (reach) {\n      case ALL:\n        this.inlineVariables \u003d true;\n        this.inlineLocalVariables \u003d true;\n        break;\n      case LOCAL_ONLY:\n        this.inlineVariables \u003d false;\n        this.inlineLocalVariables \u003d true;\n        break;\n      case NONE:\n        this.inlineVariables \u003d false;\n        this.inlineLocalVariables \u003d false;\n        break;\n      default:\n        throw new IllegalStateException(\"unexpected\");\n    }\n  }",
    "begin_line": 1238,
    "end_line": 1255,
    "comment": "/** \n * Set the variable inlining policy for the compiler.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setInlineProperties#1260",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setInlineProperties(boolean)",
    "snippet": "public void setInlineProperties(boolean enable) {\n    inlineProperties \u003d enable;\n  }",
    "begin_line": 1260,
    "end_line": 1262,
    "comment": "/** \n * Set the function inlining policy for the compiler.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setRemoveUnusedVariable#1268",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setRemoveUnusedVariable(com.google.javascript.jscomp.CompilerOptions.Reach)",
    "snippet": "@Deprecated\n  public void setRemoveUnusedVariable(Reach reach) {\n    setRemoveUnusedVariables(reach);\n  }",
    "begin_line": 1268,
    "end_line": 1270,
    "comment": "/** \n * Set the variable removal policy for the compiler.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setRemoveUnusedVariables#1275",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setRemoveUnusedVariables(com.google.javascript.jscomp.CompilerOptions.Reach)",
    "snippet": "public void setRemoveUnusedVariables(Reach reach) {\n    switch (reach) {\n      case ALL:\n        this.removeUnusedVars \u003d true;\n        this.removeUnusedLocalVars \u003d true;\n        break;\n      case LOCAL_ONLY:\n        this.removeUnusedVars \u003d false;\n        this.removeUnusedLocalVars \u003d true;\n        break;\n      case NONE:\n        this.removeUnusedVars \u003d false;\n        this.removeUnusedLocalVars \u003d false;\n        break;\n      default:\n        throw new IllegalStateException(\"unexpected\");\n    }\n  }",
    "begin_line": 1275,
    "end_line": 1292,
    "comment": "/** \n * Set the variable removal policy for the compiler.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setReplaceStringsConfiguration#1297",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setReplaceStringsConfiguration(java.lang.String, java.util.List\u003cjava.lang.String\u003e)",
    "snippet": "public void setReplaceStringsConfiguration(\n      String placeholderToken, List\u003cString\u003e functionDescriptors) {\n    this.replaceStringsPlaceholderToken \u003d placeholderToken;\n    this.replaceStringsFunctionDescriptions \u003d\n        Lists.newArrayList(functionDescriptors);\n  }",
    "begin_line": 1297,
    "end_line": 1302,
    "comment": "/** \n * Sets the functions whose debug strings to replace.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setRewriteNewDateGoogNow#1305",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setRewriteNewDateGoogNow(boolean)",
    "snippet": "@Deprecated\n  public void setRewriteNewDateGoogNow(boolean rewrite) {\n  }",
    "begin_line": 1305,
    "end_line": 1306,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setRemoveAbstractMethods#1308",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setRemoveAbstractMethods(boolean)",
    "snippet": "public void setRemoveAbstractMethods(boolean remove) {\n    this.removeAbstractMethods \u003d remove;\n  }",
    "begin_line": 1308,
    "end_line": 1310,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setRemoveClosureAsserts#1312",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setRemoveClosureAsserts(boolean)",
    "snippet": "public void setRemoveClosureAsserts(boolean remove) {\n    this.removeClosureAsserts \u003d remove;\n  }",
    "begin_line": 1312,
    "end_line": 1314,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setNameAnonymousFunctionsOnly#1319",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setNameAnonymousFunctionsOnly(boolean)",
    "snippet": "public void setNameAnonymousFunctionsOnly(boolean value) {\n    this.nameAnonymousFunctionsOnly \u003d value;\n  }",
    "begin_line": 1319,
    "end_line": 1321,
    "comment": "/** \n * If true, name anonymous functions only. All other passes will be skipped.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setColorizeErrorOutput#1323",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setColorizeErrorOutput(boolean)",
    "snippet": "public void setColorizeErrorOutput(boolean colorizeErrorOutput) {\n    this.colorizeErrorOutput \u003d colorizeErrorOutput;\n  }",
    "begin_line": 1323,
    "end_line": 1325,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.shouldColorizeErrorOutput#1327",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.shouldColorizeErrorOutput()",
    "snippet": "public boolean shouldColorizeErrorOutput() {\n    return colorizeErrorOutput;\n  }",
    "begin_line": 1327,
    "end_line": 1329,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setChainCalls#1334",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setChainCalls(boolean)",
    "snippet": "public void setChainCalls(boolean value) {\n    this.chainCalls \u003d value;\n  }",
    "begin_line": 1334,
    "end_line": 1336,
    "comment": "/** \n * If true, chain calls to functions that return this.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setAcceptConstKeyword#1341",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setAcceptConstKeyword(boolean)",
    "snippet": "public void setAcceptConstKeyword(boolean value) {\n    this.acceptConstKeyword \u003d value;\n  }",
    "begin_line": 1341,
    "end_line": 1343,
    "comment": "/** \n * If true, accept `const\u0027 keyword.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.enableRuntimeTypeCheck#1351",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.enableRuntimeTypeCheck(java.lang.String)",
    "snippet": "public void enableRuntimeTypeCheck(String logFunction) {\n    this.runtimeTypeCheck \u003d true;\n    this.runtimeTypeCheckLogFunction \u003d logFunction;\n  }",
    "begin_line": 1351,
    "end_line": 1354,
    "comment": "/** \n * Enable run-time type checking, which adds JS type assertions for debugging.\n * @param logFunction A JS function to be used for logging run-time typeassertion failures.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.disableRuntimeTypeCheck#1356",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.disableRuntimeTypeCheck()",
    "snippet": "public void disableRuntimeTypeCheck() {\n    this.runtimeTypeCheck \u003d false;\n  }",
    "begin_line": 1356,
    "end_line": 1358,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setGenerateExports#1360",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setGenerateExports(boolean)",
    "snippet": "public void setGenerateExports(boolean generateExports) {\n    this.generateExports \u003d generateExports;\n  }",
    "begin_line": 1360,
    "end_line": 1362,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCodingConvention#1364",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCodingConvention(com.google.javascript.jscomp.CodingConvention)",
    "snippet": "public void setCodingConvention(CodingConvention codingConvention) {\n    this.codingConvention \u003d codingConvention;\n  }",
    "begin_line": 1364,
    "end_line": 1366,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.getCodingConvention#1368",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.getCodingConvention()",
    "snippet": "public CodingConvention getCodingConvention() {\n    return codingConvention;\n  }",
    "begin_line": 1368,
    "end_line": 1370,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setDependencyOptions#1376",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setDependencyOptions(com.google.javascript.jscomp.DependencyOptions)",
    "snippet": "public void setDependencyOptions(DependencyOptions options) {\n    Preconditions.checkNotNull(options);\n    this.dependencyOptions \u003d options;\n  }",
    "begin_line": 1376,
    "end_line": 1379,
    "comment": "/** \n * Sets dependency options. See the DependencyOptions class for more info. This supersedes manageClosureDependencies.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setManageClosureDependencies#1385",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setManageClosureDependencies(boolean)",
    "snippet": "public void setManageClosureDependencies(boolean newVal) {\n    dependencyOptions.setDependencySorting(\n        newVal || dependencyOptions.shouldSortDependencies());\n    dependencyOptions.setDependencyPruning(\n        newVal || dependencyOptions.shouldPruneDependencies());\n    dependencyOptions.setMoocherDropping(false);\n    manageClosureDependencies \u003d newVal;\n  }",
    "begin_line": 1385,
    "end_line": 1392,
    "comment": "/** \n * Sort inputs by their goog.provide/goog.require calls, and prune inputs whose symbols are not required.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setManageClosureDependencies#1403",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setManageClosureDependencies(java.util.List\u003cjava.lang.String\u003e)",
    "snippet": "public void setManageClosureDependencies(List\u003cString\u003e entryPoints) {\n    Preconditions.checkNotNull(entryPoints);\n    setManageClosureDependencies(true);\n    dependencyOptions.setEntryPoints(entryPoints);\n  }",
    "begin_line": 1403,
    "end_line": 1407,
    "comment": "/** \n * Sort inputs by their goog.provide/goog.require calls.\n * @param entryPoints Entry points to the program. Must be goog.provide\u0027dsymbols. Any goog.provide\u0027d symbols that are not a transitive dependency of the entry points will be deleted. Files without goog.provides, and their dependencies, will always be left in.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setSummaryDetailLevel#1416",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setSummaryDetailLevel(int)",
    "snippet": "public void setSummaryDetailLevel(int summaryDetailLevel) {\n    this.summaryDetailLevel \u003d summaryDetailLevel;\n  }",
    "begin_line": 1416,
    "end_line": 1418,
    "comment": "/** \n * Controls how detailed the compilation summary is. Values: 0 (never print summary), 1 (print summary only if there are errors or warnings), 2 (print summary if type checking is on, see --check_types), 3 (always print summary). The default level is 1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.enableExternExports#1424",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.enableExternExports(boolean)",
    "snippet": "@Deprecated\n  public void enableExternExports(boolean enabled) {\n    this.externExports \u003d enabled;\n  }",
    "begin_line": 1424,
    "end_line": 1426,
    "comment": "/** \n * @deprecated replaced by {@link #setExternExports}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setExtraAnnotationNames#1428",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setExtraAnnotationNames(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public void setExtraAnnotationNames(Set\u003cString\u003e extraAnnotationNames) {\n    this.extraAnnotationNames \u003d Sets.newHashSet(extraAnnotationNames);\n  }",
    "begin_line": 1428,
    "end_line": 1430,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.isExternExportsEnabled#1432",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.isExternExportsEnabled()",
    "snippet": "public boolean isExternExportsEnabled() {\n    return externExports;\n  }",
    "begin_line": 1432,
    "end_line": 1434,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setOutputCharset#1439",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setOutputCharset(java.lang.String)",
    "snippet": "public void setOutputCharset(String charsetName) {\n    this.outputCharset \u003d charsetName;\n  }",
    "begin_line": 1439,
    "end_line": 1441,
    "comment": "/** \n * Sets the output charset by name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.getOutputCharset#1446",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.getOutputCharset()",
    "snippet": "Charset getOutputCharset() {\n    return outputCharset \u003d\u003d null ? null : Charset.forName(outputCharset);\n  }",
    "begin_line": 1446,
    "end_line": 1448,
    "comment": "/** \n * Gets the output charset as a rich object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setTweakProcessing#1453",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setTweakProcessing(com.google.javascript.jscomp.CompilerOptions.TweakProcessing)",
    "snippet": "public void setTweakProcessing(TweakProcessing tweakProcessing) {\n    this.tweakProcessing \u003d tweakProcessing;\n  }",
    "begin_line": 1453,
    "end_line": 1455,
    "comment": "/** \n * Sets how goog.tweak calls are processed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.getTweakProcessing#1457",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.getTweakProcessing()",
    "snippet": "public TweakProcessing getTweakProcessing() {\n    return tweakProcessing;\n  }",
    "begin_line": 1457,
    "end_line": 1459,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setLanguageIn#1464",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setLanguageIn(com.google.javascript.jscomp.CompilerOptions.LanguageMode)",
    "snippet": "public void setLanguageIn(LanguageMode languageIn) {\n    this.languageIn \u003d languageIn;\n    this.languageOut \u003d languageIn;\n  }",
    "begin_line": 1464,
    "end_line": 1467,
    "comment": "/** \n * Sets how goog.tweak calls are processed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.getLanguageIn#1469",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.getLanguageIn()",
    "snippet": "public LanguageMode getLanguageIn() {\n    return languageIn;\n  }",
    "begin_line": 1469,
    "end_line": 1471,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.getLanguageOut#1473",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.getLanguageOut()",
    "snippet": "public LanguageMode getLanguageOut() {\n    return languageOut;\n  }",
    "begin_line": 1473,
    "end_line": 1475,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setLooseTypes#1484",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setLooseTypes(boolean)",
    "snippet": "public void setLooseTypes(boolean looseTypes) {\n    this.looseTypes \u003d looseTypes;\n  }",
    "begin_line": 1484,
    "end_line": 1486,
    "comment": "/** \n * Whether to include \"undefined\" in the default types. For example: \"{Object}\" is normally \"Object|null\" becomes \"Object|null|undefined\" \"{?string}\" is normally \"string|null\" becomes \"string|null|undefined\" In either case \"!\" annotated types excluded both null and undefined.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.clone#1489",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.clone()",
    "snippet": "@Override\n  public Object clone() throws CloneNotSupportedException {\n    CompilerOptions clone \u003d (CompilerOptions) super.clone();\n    // TODO(bolinfest): Add relevant custom cloning.\n    return clone;\n  }",
    "begin_line": 1489,
    "end_line": 1493,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setAliasTransformationHandler#1495",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setAliasTransformationHandler(com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler)",
    "snippet": "public void setAliasTransformationHandler(\n      AliasTransformationHandler changes) {\n    this.aliasHandler \u003d changes;\n  }",
    "begin_line": 1495,
    "end_line": 1498,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.getAliasTransformationHandler#1500",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.getAliasTransformationHandler()",
    "snippet": "public AliasTransformationHandler getAliasTransformationHandler() {\n    return this.aliasHandler;\n  }",
    "begin_line": 1500,
    "end_line": 1502,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setErrorHandler#1516",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setErrorHandler(com.google.javascript.jscomp.ErrorHandler)",
    "snippet": "public void setErrorHandler(ErrorHandler handler) {\n    this.errorHandler \u003d handler;\n  }",
    "begin_line": 1516,
    "end_line": 1518,
    "comment": "/** \n * Set a custom handler for warnings and errors. This is mostly used for piping the warnings and errors to a file behind the scenes. If you want to filter warnings and errors, you should use a WarningsGuard. If you want to change how warnings and errors are reported to the user, you should set a ErrorManager on the Compiler. An ErrorManager is intended to summarize the errors for a single compile job.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setInferTypes#1524",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setInferTypes(boolean)",
    "snippet": "public void setInferTypes(boolean enable) {\n    inferTypes \u003d enable;\n  }",
    "begin_line": 1524,
    "end_line": 1526,
    "comment": "/** \n * If true, enables type inference. If checkTypes is enabled, this flag has no effect.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.getInferTypes#1532",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.getInferTypes()",
    "snippet": "public boolean getInferTypes() {\n    return inferTypes;\n  }",
    "begin_line": 1532,
    "end_line": 1534,
    "comment": "/** \n * Gets the inferTypes flag. Note that if checkTypes is enabled, this flag is ignored when configuring the compiler.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.assumeStrictThis#1539",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.assumeStrictThis()",
    "snippet": "public boolean assumeStrictThis() {\n    return assumeStrictThis;\n  }",
    "begin_line": 1539,
    "end_line": 1541,
    "comment": "/** \n * @return Whether assumeStrictThis is set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setAssumeStrictThis#1546",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setAssumeStrictThis(boolean)",
    "snippet": "public void setAssumeStrictThis(boolean enable) {\n    this.assumeStrictThis \u003d enable;\n  }",
    "begin_line": 1546,
    "end_line": 1548,
    "comment": "/** \n * If true, enables enables additional optimizations.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setPropertyInvalidationErrors#1554",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setPropertyInvalidationErrors(java.util.Map\u003cjava.lang.String,com.google.javascript.jscomp.CheckLevel\u003e)",
    "snippet": "public void setPropertyInvalidationErrors(\n      Map\u003cString, CheckLevel\u003e propertyInvalidationErrors) {\n    this.propertyInvalidationErrors \u003d\n        Maps.newHashMap(propertyInvalidationErrors);\n  }",
    "begin_line": 1554,
    "end_line": 1558,
    "comment": "/** \n * Sets the list of properties that we report property invalidation errors for.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setLanguageOut#1560",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setLanguageOut(com.google.javascript.jscomp.CompilerOptions.LanguageMode)",
    "snippet": "public void setLanguageOut(LanguageMode languageOut) {\n    this.languageOut \u003d languageOut;\n  }",
    "begin_line": 1560,
    "end_line": 1562,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setIdeMode#1564",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setIdeMode(boolean)",
    "snippet": "public void setIdeMode(boolean ideMode) {\n    this.ideMode \u003d ideMode;\n  }",
    "begin_line": 1564,
    "end_line": 1566,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setSaveDataStructures#1572",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setSaveDataStructures(boolean)",
    "snippet": "public void setSaveDataStructures(boolean save) {\n    this.saveDataStructures \u003d save;\n  }",
    "begin_line": 1572,
    "end_line": 1574,
    "comment": "/** \n * Whether to keep internal data structures around after we\u0027re finished compiling. We do this by default when IDE mode is on.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setSkipAllPasses#1576",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setSkipAllPasses(boolean)",
    "snippet": "public void setSkipAllPasses(boolean skipAllPasses) {\n    this.skipAllPasses \u003d skipAllPasses;\n  }",
    "begin_line": 1576,
    "end_line": 1578,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setDevMode#1580",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setDevMode(com.google.javascript.jscomp.CompilerOptions.DevMode)",
    "snippet": "public void setDevMode(DevMode devMode) {\n    this.devMode \u003d devMode;\n  }",
    "begin_line": 1580,
    "end_line": 1582,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setMessageBundle#1584",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setMessageBundle(com.google.javascript.jscomp.MessageBundle)",
    "snippet": "public void setMessageBundle(MessageBundle messageBundle) {\n    this.messageBundle \u003d messageBundle;\n  }",
    "begin_line": 1584,
    "end_line": 1586,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCheckSymbols#1588",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCheckSymbols(boolean)",
    "snippet": "public void setCheckSymbols(boolean checkSymbols) {\n    this.checkSymbols \u003d checkSymbols;\n  }",
    "begin_line": 1588,
    "end_line": 1590,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCheckSuspiciousCode#1592",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCheckSuspiciousCode(boolean)",
    "snippet": "public void setCheckSuspiciousCode(boolean checkSuspiciousCode) {\n    this.checkSuspiciousCode \u003d checkSuspiciousCode;\n  }",
    "begin_line": 1592,
    "end_line": 1594,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCheckControlStructures#1596",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCheckControlStructures(boolean)",
    "snippet": "public void setCheckControlStructures(boolean checkControlStructures) {\n    this.checkControlStructures \u003d checkControlStructures;\n  }",
    "begin_line": 1596,
    "end_line": 1598,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCheckTypes#1600",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCheckTypes(boolean)",
    "snippet": "public void setCheckTypes(boolean checkTypes) {\n    this.checkTypes \u003d checkTypes;\n  }",
    "begin_line": 1600,
    "end_line": 1602,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCheckMissingGetCssNameBlacklist#1604",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCheckMissingGetCssNameBlacklist(java.lang.String)",
    "snippet": "public void setCheckMissingGetCssNameBlacklist(String blackList) {\n    this.checkMissingGetCssNameBlacklist \u003d blackList;\n  }",
    "begin_line": 1604,
    "end_line": 1606,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setFoldConstants#1608",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setFoldConstants(boolean)",
    "snippet": "public void setFoldConstants(boolean foldConstants) {\n    this.foldConstants \u003d foldConstants;\n  }",
    "begin_line": 1608,
    "end_line": 1610,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setDeadAssignmentElimination#1612",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setDeadAssignmentElimination(boolean)",
    "snippet": "public void setDeadAssignmentElimination(boolean deadAssignmentElimination) {\n    this.deadAssignmentElimination \u003d deadAssignmentElimination;\n  }",
    "begin_line": 1612,
    "end_line": 1614,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setInlineConstantVars#1616",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setInlineConstantVars(boolean)",
    "snippet": "public void setInlineConstantVars(boolean inlineConstantVars) {\n    this.inlineConstantVars \u003d inlineConstantVars;\n  }",
    "begin_line": 1616,
    "end_line": 1618,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setInlineFunctions#1620",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setInlineFunctions(boolean)",
    "snippet": "public void setInlineFunctions(boolean inlineFunctions) {\n    this.inlineFunctions \u003d inlineFunctions;\n  }",
    "begin_line": 1620,
    "end_line": 1622,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setInlineLocalFunctions#1624",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setInlineLocalFunctions(boolean)",
    "snippet": "public void setInlineLocalFunctions(boolean inlineLocalFunctions) {\n    this.inlineLocalFunctions \u003d inlineLocalFunctions;\n  }",
    "begin_line": 1624,
    "end_line": 1626,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCrossModuleCodeMotion#1628",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCrossModuleCodeMotion(boolean)",
    "snippet": "public void setCrossModuleCodeMotion(boolean crossModuleCodeMotion) {\n    this.crossModuleCodeMotion \u003d crossModuleCodeMotion;\n  }",
    "begin_line": 1628,
    "end_line": 1630,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCoalesceVariableNames#1632",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCoalesceVariableNames(boolean)",
    "snippet": "public void setCoalesceVariableNames(boolean coalesceVariableNames) {\n    this.coalesceVariableNames \u003d coalesceVariableNames;\n  }",
    "begin_line": 1632,
    "end_line": 1634,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCrossModuleMethodMotion#1636",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCrossModuleMethodMotion(boolean)",
    "snippet": "public void setCrossModuleMethodMotion(boolean crossModuleMethodMotion) {\n    this.crossModuleMethodMotion \u003d crossModuleMethodMotion;\n  }",
    "begin_line": 1636,
    "end_line": 1638,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setInlineGetters#1640",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setInlineGetters(boolean)",
    "snippet": "public void setInlineGetters(boolean inlineGetters) {\n    this.inlineGetters \u003d inlineGetters;\n  }",
    "begin_line": 1640,
    "end_line": 1642,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setInlineVariables#1644",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setInlineVariables(boolean)",
    "snippet": "public void setInlineVariables(boolean inlineVariables) {\n    this.inlineVariables \u003d inlineVariables;\n  }",
    "begin_line": 1644,
    "end_line": 1646,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setInlineLocalVariables#1648",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setInlineLocalVariables(boolean)",
    "snippet": "public void setInlineLocalVariables(boolean inlineLocalVariables) {\n    this.inlineLocalVariables \u003d inlineLocalVariables;\n  }",
    "begin_line": 1648,
    "end_line": 1650,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setFlowSensitiveInlineVariables#1652",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setFlowSensitiveInlineVariables(boolean)",
    "snippet": "public void setFlowSensitiveInlineVariables(boolean enabled) {\n    this.flowSensitiveInlineVariables \u003d enabled;\n  }",
    "begin_line": 1652,
    "end_line": 1654,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setSmartNameRemoval#1656",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setSmartNameRemoval(boolean)",
    "snippet": "public void setSmartNameRemoval(boolean smartNameRemoval) {\n    this.smartNameRemoval \u003d smartNameRemoval;\n  }",
    "begin_line": 1656,
    "end_line": 1658,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setRemoveDeadCode#1660",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setRemoveDeadCode(boolean)",
    "snippet": "public void setRemoveDeadCode(boolean removeDeadCode) {\n    this.removeDeadCode \u003d removeDeadCode;\n  }",
    "begin_line": 1660,
    "end_line": 1662,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setExtractPrototypeMemberDeclarations#1664",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setExtractPrototypeMemberDeclarations(boolean)",
    "snippet": "public void setExtractPrototypeMemberDeclarations(boolean enabled) {\n    this.extractPrototypeMemberDeclarations \u003d enabled;\n  }",
    "begin_line": 1664,
    "end_line": 1666,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setRemoveUnusedPrototypeProperties#1668",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setRemoveUnusedPrototypeProperties(boolean)",
    "snippet": "public void setRemoveUnusedPrototypeProperties(boolean enabled) {\n    this.removeUnusedPrototypeProperties \u003d enabled;\n  }",
    "begin_line": 1668,
    "end_line": 1670,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setRemoveUnusedPrototypePropertiesInExterns#1672",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setRemoveUnusedPrototypePropertiesInExterns(boolean)",
    "snippet": "public void setRemoveUnusedPrototypePropertiesInExterns(\n      boolean enabled) {\n    this.removeUnusedPrototypePropertiesInExterns \u003d enabled;\n  }",
    "begin_line": 1672,
    "end_line": 1675,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setRemoveUnusedVars#1677",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setRemoveUnusedVars(boolean)",
    "snippet": "public void setRemoveUnusedVars(boolean removeUnusedVars) {\n    this.removeUnusedVars \u003d removeUnusedVars;\n  }",
    "begin_line": 1677,
    "end_line": 1679,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setRemoveUnusedLocalVars#1681",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setRemoveUnusedLocalVars(boolean)",
    "snippet": "public void setRemoveUnusedLocalVars(boolean removeUnusedLocalVars) {\n    this.removeUnusedLocalVars \u003d removeUnusedLocalVars;\n  }",
    "begin_line": 1681,
    "end_line": 1683,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setAliasExternals#1685",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setAliasExternals(boolean)",
    "snippet": "public void setAliasExternals(boolean aliasExternals) {\n    this.aliasExternals \u003d aliasExternals;\n  }",
    "begin_line": 1685,
    "end_line": 1687,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCollapseVariableDeclarations#1689",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCollapseVariableDeclarations(boolean)",
    "snippet": "public void setCollapseVariableDeclarations(boolean enabled) {\n    this.collapseVariableDeclarations \u003d enabled;\n  }",
    "begin_line": 1689,
    "end_line": 1691,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setGroupVariableDeclarations#1693",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setGroupVariableDeclarations(boolean)",
    "snippet": "public void setGroupVariableDeclarations(boolean enabled) {\n    this.groupVariableDeclarations \u003d enabled;\n  }",
    "begin_line": 1693,
    "end_line": 1695,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCollapseAnonymousFunctions#1697",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCollapseAnonymousFunctions(boolean)",
    "snippet": "public void setCollapseAnonymousFunctions(boolean enabled) {\n    this.collapseAnonymousFunctions \u003d enabled;\n  }",
    "begin_line": 1697,
    "end_line": 1699,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setAliasableStrings#1701",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setAliasableStrings(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public void setAliasableStrings(Set\u003cString\u003e aliasableStrings) {\n    this.aliasableStrings \u003d aliasableStrings;\n  }",
    "begin_line": 1701,
    "end_line": 1703,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setAliasStringsBlacklist#1705",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setAliasStringsBlacklist(java.lang.String)",
    "snippet": "public void setAliasStringsBlacklist(String aliasStringsBlacklist) {\n    this.aliasStringsBlacklist \u003d aliasStringsBlacklist;\n  }",
    "begin_line": 1705,
    "end_line": 1707,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setAliasAllStrings#1709",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setAliasAllStrings(boolean)",
    "snippet": "public void setAliasAllStrings(boolean aliasAllStrings) {\n    this.aliasAllStrings \u003d aliasAllStrings;\n  }",
    "begin_line": 1709,
    "end_line": 1711,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setOutputJsStringUsage#1713",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setOutputJsStringUsage(boolean)",
    "snippet": "public void setOutputJsStringUsage(boolean outputJsStringUsage) {\n    this.outputJsStringUsage \u003d outputJsStringUsage;\n  }",
    "begin_line": 1713,
    "end_line": 1715,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setConvertToDottedProperties#1717",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setConvertToDottedProperties(boolean)",
    "snippet": "public void setConvertToDottedProperties(boolean convertToDottedProperties) {\n    this.convertToDottedProperties \u003d convertToDottedProperties;\n  }",
    "begin_line": 1717,
    "end_line": 1719,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setRewriteFunctionExpressions#1721",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setRewriteFunctionExpressions(boolean)",
    "snippet": "public void setRewriteFunctionExpressions(boolean rewriteFunctionExpressions) {\n    this.rewriteFunctionExpressions \u003d rewriteFunctionExpressions;\n  }",
    "begin_line": 1721,
    "end_line": 1723,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setOptimizeParameters#1725",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setOptimizeParameters(boolean)",
    "snippet": "public void setOptimizeParameters(boolean optimizeParameters) {\n    this.optimizeParameters \u003d optimizeParameters;\n  }",
    "begin_line": 1725,
    "end_line": 1727,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setOptimizeReturns#1729",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setOptimizeReturns(boolean)",
    "snippet": "public void setOptimizeReturns(boolean optimizeReturns) {\n    this.optimizeReturns \u003d optimizeReturns;\n  }",
    "begin_line": 1729,
    "end_line": 1731,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setOptimizeCalls#1733",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setOptimizeCalls(boolean)",
    "snippet": "public void setOptimizeCalls(boolean optimizeCalls) {\n    this.optimizeCalls \u003d optimizeCalls;\n  }",
    "begin_line": 1733,
    "end_line": 1735,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setOptimizeArgumentsArray#1737",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setOptimizeArgumentsArray(boolean)",
    "snippet": "public void setOptimizeArgumentsArray(boolean optimizeArgumentsArray) {\n    this.optimizeArgumentsArray \u003d optimizeArgumentsArray;\n  }",
    "begin_line": 1737,
    "end_line": 1739,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setVariableRenaming#1741",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setVariableRenaming(com.google.javascript.jscomp.VariableRenamingPolicy)",
    "snippet": "public void setVariableRenaming(VariableRenamingPolicy variableRenaming) {\n    this.variableRenaming \u003d variableRenaming;\n  }",
    "begin_line": 1741,
    "end_line": 1743,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setPropertyRenaming#1745",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setPropertyRenaming(com.google.javascript.jscomp.PropertyRenamingPolicy)",
    "snippet": "public void setPropertyRenaming(PropertyRenamingPolicy propertyRenaming) {\n    this.propertyRenaming \u003d propertyRenaming;\n  }",
    "begin_line": 1745,
    "end_line": 1747,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setLabelRenaming#1749",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setLabelRenaming(boolean)",
    "snippet": "public void setLabelRenaming(boolean labelRenaming) {\n    this.labelRenaming \u003d labelRenaming;\n  }",
    "begin_line": 1749,
    "end_line": 1751,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setReserveRawExports#1753",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setReserveRawExports(boolean)",
    "snippet": "public void setReserveRawExports(boolean reserveRawExports) {\n    this.reserveRawExports \u003d reserveRawExports;\n  }",
    "begin_line": 1753,
    "end_line": 1755,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setGeneratePseudoNames#1757",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setGeneratePseudoNames(boolean)",
    "snippet": "public void setGeneratePseudoNames(boolean generatePseudoNames) {\n    this.generatePseudoNames \u003d generatePseudoNames;\n  }",
    "begin_line": 1757,
    "end_line": 1759,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setRenamePrefix#1761",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setRenamePrefix(java.lang.String)",
    "snippet": "public void setRenamePrefix(String renamePrefix) {\n    this.renamePrefix \u003d renamePrefix;\n  }",
    "begin_line": 1761,
    "end_line": 1763,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setRenamePrefixNamespace#1765",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setRenamePrefixNamespace(java.lang.String)",
    "snippet": "public void setRenamePrefixNamespace(String renamePrefixNamespace) {\n    this.renamePrefixNamespace \u003d renamePrefixNamespace;\n  }",
    "begin_line": 1765,
    "end_line": 1767,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setAliasKeywords#1769",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setAliasKeywords(boolean)",
    "snippet": "public void setAliasKeywords(boolean aliasKeywords) {\n    this.aliasKeywords \u003d aliasKeywords;\n  }",
    "begin_line": 1769,
    "end_line": 1771,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCollapseProperties#1773",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCollapseProperties(boolean)",
    "snippet": "public void setCollapseProperties(boolean collapseProperties) {\n    this.collapseProperties \u003d collapseProperties;\n  }",
    "begin_line": 1773,
    "end_line": 1775,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setDevirtualizePrototypeMethods#1777",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setDevirtualizePrototypeMethods(boolean)",
    "snippet": "public void setDevirtualizePrototypeMethods(boolean devirtualizePrototypeMethods) {\n    this.devirtualizePrototypeMethods \u003d devirtualizePrototypeMethods;\n  }",
    "begin_line": 1777,
    "end_line": 1779,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setComputeFunctionSideEffects#1781",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setComputeFunctionSideEffects(boolean)",
    "snippet": "public void setComputeFunctionSideEffects(boolean computeFunctionSideEffects) {\n    this.computeFunctionSideEffects \u003d computeFunctionSideEffects;\n  }",
    "begin_line": 1781,
    "end_line": 1783,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setDebugFunctionSideEffectsPath#1785",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setDebugFunctionSideEffectsPath(java.lang.String)",
    "snippet": "public void setDebugFunctionSideEffectsPath(String debugFunctionSideEffectsPath) {\n    this.debugFunctionSideEffectsPath \u003d debugFunctionSideEffectsPath;\n  }",
    "begin_line": 1785,
    "end_line": 1787,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setDisambiguateProperties#1789",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setDisambiguateProperties(boolean)",
    "snippet": "public void setDisambiguateProperties(boolean disambiguateProperties) {\n    this.disambiguateProperties \u003d disambiguateProperties;\n  }",
    "begin_line": 1789,
    "end_line": 1791,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setAmbiguateProperties#1793",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setAmbiguateProperties(boolean)",
    "snippet": "public void setAmbiguateProperties(boolean ambiguateProperties) {\n    this.ambiguateProperties \u003d ambiguateProperties;\n  }",
    "begin_line": 1793,
    "end_line": 1795,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setAnonymousFunctionNaming#1797",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setAnonymousFunctionNaming(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy)",
    "snippet": "public void setAnonymousFunctionNaming(\n      AnonymousFunctionNamingPolicy anonymousFunctionNaming) {\n    this.anonymousFunctionNaming \u003d anonymousFunctionNaming;\n  }",
    "begin_line": 1797,
    "end_line": 1800,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setInputAnonymousFunctionNamingMap#1802",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setInputAnonymousFunctionNamingMap(com.google.javascript.jscomp.VariableMap)",
    "snippet": "public void setInputAnonymousFunctionNamingMap(VariableMap inputMap) {\n    this.inputAnonymousFunctionNamingMap \u003d inputMap;\n  }",
    "begin_line": 1802,
    "end_line": 1804,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setInputVariableMapSerialized#1807",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setInputVariableMapSerialized(byte[])",
    "snippet": "@Deprecated\n  public void setInputVariableMapSerialized(byte[] inputVariableMapSerialized)\n      throws ParseException {\n    this.inputVariableMap \u003d VariableMap.fromBytes(inputVariableMapSerialized);\n  }",
    "begin_line": 1807,
    "end_line": 1810,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setInputVariableMap#1812",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setInputVariableMap(com.google.javascript.jscomp.VariableMap)",
    "snippet": "public void setInputVariableMap(VariableMap inputVariableMap) {\n    this.inputVariableMap \u003d inputVariableMap;\n  }",
    "begin_line": 1812,
    "end_line": 1814,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setInputPropertyMapSerialized#1817",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setInputPropertyMapSerialized(byte[])",
    "snippet": "@Deprecated\n  public void setInputPropertyMapSerialized(byte[] inputPropertyMapSerialized)\n      throws ParseException {\n    this.inputPropertyMap \u003d VariableMap.fromBytes(inputPropertyMapSerialized);\n  }",
    "begin_line": 1817,
    "end_line": 1820,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setInputPropertyMap#1822",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setInputPropertyMap(com.google.javascript.jscomp.VariableMap)",
    "snippet": "public void setInputPropertyMap(VariableMap inputPropertyMap) {\n    this.inputPropertyMap \u003d inputPropertyMap;\n  }",
    "begin_line": 1822,
    "end_line": 1824,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setExportTestFunctions#1826",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setExportTestFunctions(boolean)",
    "snippet": "public void setExportTestFunctions(boolean exportTestFunctions) {\n    this.exportTestFunctions \u003d exportTestFunctions;\n  }",
    "begin_line": 1826,
    "end_line": 1828,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setRuntimeTypeCheck#1830",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setRuntimeTypeCheck(boolean)",
    "snippet": "public void setRuntimeTypeCheck(boolean runtimeTypeCheck) {\n    this.runtimeTypeCheck \u003d runtimeTypeCheck;\n  }",
    "begin_line": 1830,
    "end_line": 1832,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setRuntimeTypeCheckLogFunction#1834",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setRuntimeTypeCheckLogFunction(java.lang.String)",
    "snippet": "public void setRuntimeTypeCheckLogFunction(String runtimeTypeCheckLogFunction) {\n    this.runtimeTypeCheckLogFunction \u003d runtimeTypeCheckLogFunction;\n  }",
    "begin_line": 1834,
    "end_line": 1836,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setSyntheticBlockStartMarker#1838",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setSyntheticBlockStartMarker(java.lang.String)",
    "snippet": "public void setSyntheticBlockStartMarker(String syntheticBlockStartMarker) {\n    this.syntheticBlockStartMarker \u003d syntheticBlockStartMarker;\n  }",
    "begin_line": 1838,
    "end_line": 1840,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setSyntheticBlockEndMarker#1842",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setSyntheticBlockEndMarker(java.lang.String)",
    "snippet": "public void setSyntheticBlockEndMarker(String syntheticBlockEndMarker) {\n    this.syntheticBlockEndMarker \u003d syntheticBlockEndMarker;\n  }",
    "begin_line": 1842,
    "end_line": 1844,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setLocale#1846",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setLocale(java.lang.String)",
    "snippet": "public void setLocale(String locale) {\n    this.locale \u003d locale;\n  }",
    "begin_line": 1846,
    "end_line": 1848,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setMarkAsCompiled#1850",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setMarkAsCompiled(boolean)",
    "snippet": "public void setMarkAsCompiled(boolean markAsCompiled) {\n    this.markAsCompiled \u003d markAsCompiled;\n  }",
    "begin_line": 1850,
    "end_line": 1852,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setRemoveTryCatchFinally#1854",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setRemoveTryCatchFinally(boolean)",
    "snippet": "public void setRemoveTryCatchFinally(boolean removeTryCatchFinally) {\n    this.removeTryCatchFinally \u003d removeTryCatchFinally;\n  }",
    "begin_line": 1854,
    "end_line": 1856,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setClosurePass#1858",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setClosurePass(boolean)",
    "snippet": "public void setClosurePass(boolean closurePass) {\n    this.closurePass \u003d closurePass;\n  }",
    "begin_line": 1858,
    "end_line": 1860,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setGatherCssNames#1862",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setGatherCssNames(boolean)",
    "snippet": "public void setGatherCssNames(boolean gatherCssNames) {\n    this.gatherCssNames \u003d gatherCssNames;\n  }",
    "begin_line": 1862,
    "end_line": 1864,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setStripTypes#1866",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setStripTypes(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public void setStripTypes(Set\u003cString\u003e stripTypes) {\n    this.stripTypes \u003d stripTypes;\n  }",
    "begin_line": 1866,
    "end_line": 1868,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setStripNameSuffixes#1870",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setStripNameSuffixes(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public void setStripNameSuffixes(Set\u003cString\u003e stripNameSuffixes) {\n    this.stripNameSuffixes \u003d stripNameSuffixes;\n  }",
    "begin_line": 1870,
    "end_line": 1872,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setStripNamePrefixes#1874",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setStripNamePrefixes(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public void setStripNamePrefixes(Set\u003cString\u003e stripNamePrefixes) {\n    this.stripNamePrefixes \u003d stripNamePrefixes;\n  }",
    "begin_line": 1874,
    "end_line": 1876,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setStripTypePrefixes#1878",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setStripTypePrefixes(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public void setStripTypePrefixes(Set\u003cString\u003e stripTypePrefixes) {\n    this.stripTypePrefixes \u003d stripTypePrefixes;\n  }",
    "begin_line": 1878,
    "end_line": 1880,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCustomPasses#1882",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCustomPasses(Multimap\u003cCustomPassExecutionTime,CompilerPass\u003e)",
    "snippet": "public void setCustomPasses(Multimap\u003cCustomPassExecutionTime, CompilerPass\u003e customPasses) {\n    this.customPasses \u003d customPasses;\n  }",
    "begin_line": 1882,
    "end_line": 1884,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setMarkNoSideEffectCalls#1886",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setMarkNoSideEffectCalls(boolean)",
    "snippet": "public void setMarkNoSideEffectCalls(boolean markNoSideEffectCalls) {\n    this.markNoSideEffectCalls \u003d markNoSideEffectCalls;\n  }",
    "begin_line": 1886,
    "end_line": 1888,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setDefineReplacements#1890",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setDefineReplacements(java.util.Map\u003cjava.lang.String,java.lang.Object\u003e)",
    "snippet": "public void setDefineReplacements(Map\u003cString, Object\u003e defineReplacements) {\n    this.defineReplacements \u003d defineReplacements;\n  }",
    "begin_line": 1890,
    "end_line": 1892,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setTweakReplacements#1894",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setTweakReplacements(java.util.Map\u003cjava.lang.String,java.lang.Object\u003e)",
    "snippet": "public void setTweakReplacements(Map\u003cString, Object\u003e tweakReplacements) {\n    this.tweakReplacements \u003d tweakReplacements;\n  }",
    "begin_line": 1894,
    "end_line": 1896,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setMoveFunctionDeclarations#1898",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setMoveFunctionDeclarations(boolean)",
    "snippet": "public void setMoveFunctionDeclarations(boolean moveFunctionDeclarations) {\n    this.moveFunctionDeclarations \u003d moveFunctionDeclarations;\n  }",
    "begin_line": 1898,
    "end_line": 1900,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setInstrumentationTemplate#1902",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setInstrumentationTemplate(java.lang.String)",
    "snippet": "public void setInstrumentationTemplate(String instrumentationTemplate) {\n    this.instrumentationTemplate \u003d instrumentationTemplate;\n  }",
    "begin_line": 1902,
    "end_line": 1904,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setRecordFunctionInformation#1906",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setRecordFunctionInformation(boolean)",
    "snippet": "public void setRecordFunctionInformation(boolean recordFunctionInformation) {\n    this.recordFunctionInformation \u003d recordFunctionInformation;\n  }",
    "begin_line": 1906,
    "end_line": 1908,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCssRenamingMap#1910",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCssRenamingMap(com.google.javascript.jscomp.CssRenamingMap)",
    "snippet": "public void setCssRenamingMap(CssRenamingMap cssRenamingMap) {\n    this.cssRenamingMap \u003d cssRenamingMap;\n  }",
    "begin_line": 1910,
    "end_line": 1912,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCssRenamingWhitelist#1914",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCssRenamingWhitelist(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public void setCssRenamingWhitelist(Set\u003cString\u003e whitelist) {\n    this.cssRenamingWhitelist \u003d whitelist;\n  }",
    "begin_line": 1914,
    "end_line": 1916,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setReplaceStringsFunctionDescriptions#1918",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setReplaceStringsFunctionDescriptions(java.util.List\u003cjava.lang.String\u003e)",
    "snippet": "public void setReplaceStringsFunctionDescriptions(List\u003cString\u003e replaceStringsFunctionDescriptions) {\n    this.replaceStringsFunctionDescriptions \u003d replaceStringsFunctionDescriptions;\n  }",
    "begin_line": 1918,
    "end_line": 1920,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setReplaceStringsPlaceholderToken#1922",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setReplaceStringsPlaceholderToken(java.lang.String)",
    "snippet": "public void setReplaceStringsPlaceholderToken(String replaceStringsPlaceholderToken) {\n    this.replaceStringsPlaceholderToken \u003d replaceStringsPlaceholderToken;\n  }",
    "begin_line": 1922,
    "end_line": 1924,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setReplaceStringsReservedStrings#1926",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setReplaceStringsReservedStrings(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public void setReplaceStringsReservedStrings(Set\u003cString\u003e replaceStringsReservedStrings) {\n    this.replaceStringsReservedStrings \u003d replaceStringsReservedStrings;\n  }",
    "begin_line": 1926,
    "end_line": 1928,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setReplaceStringsInputMap#1930",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setReplaceStringsInputMap(com.google.javascript.jscomp.VariableMap)",
    "snippet": "public void setReplaceStringsInputMap(VariableMap serializedMap) {\n    this.replaceStringsInputMap \u003d serializedMap;\n  }",
    "begin_line": 1930,
    "end_line": 1932,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setPrettyPrint#1934",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setPrettyPrint(boolean)",
    "snippet": "public void setPrettyPrint(boolean prettyPrint) {\n    this.prettyPrint \u003d prettyPrint;\n  }",
    "begin_line": 1934,
    "end_line": 1936,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setLineBreak#1938",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setLineBreak(boolean)",
    "snippet": "public void setLineBreak(boolean lineBreak) {\n    this.lineBreak \u003d lineBreak;\n  }",
    "begin_line": 1938,
    "end_line": 1940,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setPreferLineBreakAtEndOfFile#1942",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setPreferLineBreakAtEndOfFile(boolean)",
    "snippet": "public void setPreferLineBreakAtEndOfFile(boolean lineBreakAtEnd) {\n    this.preferLineBreakAtEndOfFile \u003d lineBreakAtEnd;\n  }",
    "begin_line": 1942,
    "end_line": 1944,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setPrintInputDelimiter#1946",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setPrintInputDelimiter(boolean)",
    "snippet": "public void setPrintInputDelimiter(boolean printInputDelimiter) {\n    this.printInputDelimiter \u003d printInputDelimiter;\n  }",
    "begin_line": 1946,
    "end_line": 1948,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setInputDelimiter#1950",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setInputDelimiter(java.lang.String)",
    "snippet": "public void setInputDelimiter(String inputDelimiter) {\n    this.inputDelimiter \u003d inputDelimiter;\n  }",
    "begin_line": 1950,
    "end_line": 1952,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setTracer#1954",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setTracer(com.google.javascript.jscomp.CompilerOptions.TracerMode)",
    "snippet": "public void setTracer(TracerMode tracer) {\n    this.tracer \u003d tracer;\n  }",
    "begin_line": 1954,
    "end_line": 1956,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setErrorFormat#1958",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setErrorFormat(com.google.javascript.jscomp.ErrorFormat)",
    "snippet": "public void setErrorFormat(ErrorFormat errorFormat) {\n    this.errorFormat \u003d errorFormat;\n  }",
    "begin_line": 1958,
    "end_line": 1960,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setWarningsGuard#1962",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setWarningsGuard(com.google.javascript.jscomp.ComposeWarningsGuard)",
    "snippet": "public void setWarningsGuard(ComposeWarningsGuard warningsGuard) {\n    this.warningsGuard \u003d warningsGuard;\n  }",
    "begin_line": 1962,
    "end_line": 1964,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setLineLengthThreshold#1966",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setLineLengthThreshold(int)",
    "snippet": "public void setLineLengthThreshold(int lineLengthThreshold) {\n    this.lineLengthThreshold \u003d lineLengthThreshold;\n  }",
    "begin_line": 1966,
    "end_line": 1968,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setExternExports#1970",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setExternExports(boolean)",
    "snippet": "public void setExternExports(boolean externExports) {\n    this.externExports \u003d externExports;\n  }",
    "begin_line": 1970,
    "end_line": 1972,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setExternExportsPath#1974",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setExternExportsPath(java.lang.String)",
    "snippet": "public void setExternExportsPath(String externExportsPath) {\n    this.externExportsPath \u003d externExportsPath;\n  }",
    "begin_line": 1974,
    "end_line": 1976,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setSourceMapOutputPath#1978",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setSourceMapOutputPath(java.lang.String)",
    "snippet": "public void setSourceMapOutputPath(String sourceMapOutputPath) {\n    this.sourceMapOutputPath \u003d sourceMapOutputPath;\n  }",
    "begin_line": 1978,
    "end_line": 1980,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setSourceMapDetailLevel#1982",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setSourceMapDetailLevel(com.google.javascript.jscomp.SourceMap.DetailLevel)",
    "snippet": "public void setSourceMapDetailLevel(SourceMap.DetailLevel sourceMapDetailLevel) {\n    this.sourceMapDetailLevel \u003d sourceMapDetailLevel;\n  }",
    "begin_line": 1982,
    "end_line": 1984,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setSourceMapFormat#1986",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setSourceMapFormat(com.google.javascript.jscomp.SourceMap.Format)",
    "snippet": "public void setSourceMapFormat(SourceMap.Format sourceMapFormat) {\n    this.sourceMapFormat \u003d sourceMapFormat;\n  }",
    "begin_line": 1986,
    "end_line": 1988,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setSourceMapLocationMappings#1990",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setSourceMapLocationMappings(java.util.List\u003ccom.google.javascript.jscomp.SourceMap.LocationMapping\u003e)",
    "snippet": "public void setSourceMapLocationMappings(List\u003cSourceMap.LocationMapping\u003e sourceMapLocationMappings) {\n    this.sourceMapLocationMappings \u003d sourceMapLocationMappings;\n  }",
    "begin_line": 1990,
    "end_line": 1992,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setTransformAMDToCJSModules#1997",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setTransformAMDToCJSModules(boolean)",
    "snippet": "public void setTransformAMDToCJSModules(boolean transformAMDToCJSModules) {\n    this.transformAMDToCJSModules \u003d transformAMDToCJSModules;\n  }",
    "begin_line": 1997,
    "end_line": 1999,
    "comment": "/** \n * Activates transformation of AMD to CommonJS modules.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setProcessCommonJSModules#2005",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setProcessCommonJSModules(boolean)",
    "snippet": "public void setProcessCommonJSModules(boolean processCommonJSModules) {\n    this.processCommonJSModules \u003d processCommonJSModules;\n  }",
    "begin_line": 2005,
    "end_line": 2007,
    "comment": "/** \n * Rewrites CommonJS modules so that modules can be concatenated together, by renaming all globals to avoid conflicting with other modules.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.setCommonJSModulePathPrefix#2012",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.setCommonJSModulePathPrefix(java.lang.String)",
    "snippet": "public void setCommonJSModulePathPrefix(String commonJSModulePathPrefix) {\n    this.commonJSModulePathPrefix \u003d commonJSModulePathPrefix;\n  }",
    "begin_line": 2012,
    "end_line": 2014,
    "comment": "/** \n * Sets a path prefix for CommonJS modules.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.fromString#2037",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.fromString(java.lang.String)",
    "snippet": "public static LanguageMode fromString(String value) {\n      if (value.equals(\"ECMASCRIPT5_STRICT\") ||\n          value.equals(\"ES5_STRICT\")) {\n        return CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;\n      } else if (value.equals(\"ECMASCRIPT5\") ||\n          value.equals(\"ES5\")) {\n        return CompilerOptions.LanguageMode.ECMASCRIPT5;\n      } else if (value.equals(\"ECMASCRIPT3\") ||\n                 value.equals(\"ES3\")) {\n        return CompilerOptions.LanguageMode.ECMASCRIPT3;\n      }\n      return null;\n    }",
    "begin_line": 2037,
    "end_line": 2049,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.isOn#2081",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.isOn()",
    "snippet": "boolean isOn() {\n      return this !\u003d OFF;\n    }",
    "begin_line": 2081,
    "end_line": 2083,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.isOn#2091",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.isOn()",
    "snippet": "public boolean isOn() {\n      return this !\u003d OFF;\n    }",
    "begin_line": 2091,
    "end_line": 2093,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CompilerOptions.shouldStrip#2095",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.shouldStrip()",
    "snippet": "public boolean shouldStrip() {\n      return this \u003d\u003d STRIP;\n    }",
    "begin_line": 2095,
    "end_line": 2097,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AliasTransformationHandler.logAliasTransformation#2133",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.logAliasTransformation(java.lang.String, com.google.javascript.rhino.SourcePosition\u003ccom.google.javascript.jscomp.CompilerOptions.AliasTransformation\u003e)",
    "snippet": "public AliasTransformation logAliasTransformation(\n        String sourceFile, SourcePosition\u003cAliasTransformation\u003e position);",
    "begin_line": 2133,
    "end_line": 2134,
    "comment": "/** \n * Builds an AliasTransformation implementation and returns it to the caller. \u003cp\u003e Callers are allowed to request multiple AliasTransformation instances for the same file, though it is expected that the first and last char values for multiple instances will not overlap. \u003cp\u003e This method is expected to have a side-effect of storing off the created AliasTransformation, which guarantees that invokers of this interface cannot leak AliasTransformation to this implementation that the implementor did not create\n * @param sourceFile the source file the aliases re contained in.\n * @param position the region of the source file associated with thegoog.scope call. The item of the SourcePosition is the returned AliasTransformation\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AliasTransformation.addAlias#2155",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.addAlias(java.lang.String, java.lang.String)",
    "snippet": "void addAlias(String alias, String definition);",
    "begin_line": 2155,
    "end_line": 2155,
    "comment": "/** \n * Adds an alias definition to the AliasTransformation instance. \u003cp\u003e Last definition for a given alias is kept if an alias is inserted multiple times (since this is generally the behavior in JavaScript code).\n * @param alias the name of the alias.\n * @param definition the definition of the alias.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullAliasTransformationHandler.logAliasTransformation#2173",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.logAliasTransformation(java.lang.String, com.google.javascript.rhino.SourcePosition\u003ccom.google.javascript.jscomp.CompilerOptions.AliasTransformation\u003e)",
    "snippet": "@Override\n    public AliasTransformation logAliasTransformation(\n        String sourceFile, SourcePosition\u003cAliasTransformation\u003e position) {\n      position.setItem(NULL_ALIAS_TRANSFORMATION);\n      return NULL_ALIAS_TRANSFORMATION;\n    }",
    "begin_line": 2173,
    "end_line": 2177,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullAliasTransformation.addAlias#2184",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/CompilerOptions.java",
    "class_name": "com.google.javascript.jscomp.CompilerOptions",
    "signature": "com.google.javascript.jscomp.CompilerOptions.addAlias(java.lang.String, java.lang.String)",
    "snippet": "@Override\n      public void addAlias(String alias, String definition) {\n      }",
    "begin_line": 2184,
    "end_line": 2185,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GuardComparator.GuardComparator#57",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ComposeWarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
    "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.GuardComparator(java.util.Map\u003ccom.google.javascript.jscomp.WarningsGuard,java.lang.Integer\u003e)",
    "snippet": "private GuardComparator(Map\u003cWarningsGuard, Integer\u003e orderOfAddition) {\n      this.orderOfAddition \u003d orderOfAddition;\n    }",
    "begin_line": 57,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GuardComparator.compare#62",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ComposeWarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
    "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.compare(com.google.javascript.jscomp.WarningsGuard, com.google.javascript.jscomp.WarningsGuard)",
    "snippet": "@Override\n    public int compare(WarningsGuard a, WarningsGuard b) {\n      int priorityDiff \u003d a.getPriority() - b.getPriority();\n      if (priorityDiff !\u003d 0) {\n        return priorityDiff;\n      }\n\n      // If the warnings guards have the same priority, the one that\n      // was added last wins.\n      return orderOfAddition.get(b).intValue() -\n          orderOfAddition.get(a).intValue();\n    }",
    "begin_line": 62,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GuardComparator.ComposeWarningsGuard#79",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ComposeWarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
    "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.ComposeWarningsGuard(java.util.List\u003ccom.google.javascript.jscomp.WarningsGuard\u003e)",
    "snippet": "public ComposeWarningsGuard(List\u003cWarningsGuard\u003e guards) {\n    addGuards(guards);\n  }",
    "begin_line": 79,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GuardComparator.ComposeWarningsGuard#83",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ComposeWarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
    "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.ComposeWarningsGuard(com.google.javascript.jscomp.WarningsGuard)",
    "snippet": "public ComposeWarningsGuard(WarningsGuard... guards) {\n    this(Lists.newArrayList(guards));\n  }",
    "begin_line": 83,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GuardComparator.addGuard#87",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ComposeWarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
    "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.addGuard(com.google.javascript.jscomp.WarningsGuard)",
    "snippet": "void addGuard(WarningsGuard guard) {\n    if (guard instanceof ComposeWarningsGuard) {\n      ComposeWarningsGuard composeGuard \u003d (ComposeWarningsGuard) guard;\n      if (composeGuard.demoteErrors) {\n        this.demoteErrors \u003d composeGuard.demoteErrors;\n      }\n\n      // Reverse the guards, so that they have the same order in the result.\n      addGuards(Lists.newArrayList(composeGuard.guards.descendingSet()));\n    } else {\n      numberOfAdds++;\n      orderOfAddition.put(guard, numberOfAdds);\n      guards.remove(guard);\n      guards.add(guard);\n    }\n  }",
    "begin_line": 87,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GuardComparator.addGuards#104",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ComposeWarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
    "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.addGuards(java.lang.Iterable\u003ccom.google.javascript.jscomp.WarningsGuard\u003e)",
    "snippet": "private void addGuards(Iterable\u003cWarningsGuard\u003e guards) {\n    for (WarningsGuard guard : guards) {\n      addGuard(guard);\n    }\n  }",
    "begin_line": 104,
    "end_line": 108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GuardComparator.level#111",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ComposeWarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
    "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.level(com.google.javascript.jscomp.JSError)",
    "snippet": "@Override\n  public CheckLevel level(JSError error) {\n    for (WarningsGuard guard : guards) {\n      CheckLevel newLevel \u003d guard.level(error);\n      if (newLevel !\u003d null) {\n        if (demoteErrors \u0026\u0026 newLevel \u003d\u003d CheckLevel.ERROR) {\n          return CheckLevel.WARNING;\n        }\n        return newLevel;\n      }\n    }\n    return null;\n  }",
    "begin_line": 111,
    "end_line": 122,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GuardComparator.disables#125",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ComposeWarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
    "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.disables(com.google.javascript.jscomp.DiagnosticGroup)",
    "snippet": "@Override\n  public boolean disables(DiagnosticGroup group) {\n    nextSingleton:\n    for (DiagnosticType type : group.getTypes()) {\n      DiagnosticGroup singleton \u003d DiagnosticGroup.forType(type);\n\n      for (WarningsGuard guard : guards) {\n        if (guard.disables(singleton)) {\n          continue nextSingleton;\n        } else if (guard.enables(singleton)) {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    return true;\n  }",
    "begin_line": 125,
    "end_line": 142,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GuardComparator.enables#149",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ComposeWarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
    "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
    "snippet": "@Override\n  public boolean enables(DiagnosticGroup group) {\n    for (WarningsGuard guard : guards) {\n      if (guard.enables(group)) {\n        return true;\n      } else if (guard.disables(group)) {\n        return false;\n      }\n    }\n\n    return false;\n  }",
    "begin_line": 149,
    "end_line": 159,
    "comment": "/** \n * Determines whether this guard will \"elevate\" the status of any disabled diagnostic type in the group to a warning or an error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GuardComparator.getGuards#161",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ComposeWarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
    "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.getGuards()",
    "snippet": "List\u003cWarningsGuard\u003e getGuards() {\n    return Collections.unmodifiableList(Lists.newArrayList(guards));\n  }",
    "begin_line": 161,
    "end_line": 163,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GuardComparator.makeEmergencyFailSafeGuard#169",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ComposeWarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
    "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.makeEmergencyFailSafeGuard()",
    "snippet": "ComposeWarningsGuard makeEmergencyFailSafeGuard() {\n    ComposeWarningsGuard safeGuard \u003d new ComposeWarningsGuard();\n    safeGuard.demoteErrors \u003d true;\n    for (WarningsGuard guard : guards.descendingSet()) {\n      safeGuard.addGuard(guard);\n    }\n    return safeGuard;\n  }",
    "begin_line": 169,
    "end_line": 176,
    "comment": "/** \n * Make a warnings guard that\u0027s the same as this one but with all escalating guards turned down.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GuardComparator.toString#179",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ComposeWarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
    "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.toString()",
    "snippet": "@Override\n  public String toString() {\n    return Joiner.on(\", \").join(guards);\n  }",
    "begin_line": 179,
    "end_line": 181,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConstCheck.ConstCheck#47",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ConstCheck.java",
    "class_name": "com.google.javascript.jscomp.ConstCheck",
    "signature": "com.google.javascript.jscomp.ConstCheck.ConstCheck(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "public ConstCheck(AbstractCompiler compiler) {\n    this.compiler \u003d compiler;\n    this.initializedConstants \u003d new HashSet\u003cScope.Var\u003e();\n  }",
    "begin_line": 47,
    "end_line": 50,
    "comment": "/** \n * Creates an instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConstCheck.process#53",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ConstCheck.java",
    "class_name": "com.google.javascript.jscomp.ConstCheck",
    "signature": "com.google.javascript.jscomp.ConstCheck.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void process(Node externs, Node root) {\n    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n    NodeTraversal.traverse(compiler, root, this);\n  }",
    "begin_line": 53,
    "end_line": 56,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConstCheck.visit#59",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ConstCheck.java",
    "class_name": "com.google.javascript.jscomp.ConstCheck",
    "signature": "com.google.javascript.jscomp.ConstCheck.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.NAME:\n        if (parent !\u003d null \u0026\u0026\n            parent.isVar() \u0026\u0026\n            n.hasChildren()) {\n          String name \u003d n.getString();\n          Scope.Var var \u003d t.getScope().getVar(name);\n          if (isConstant(var)) {\n            if (initializedConstants.contains(var)) {\n              reportError(t, n, name);\n            } else {\n              initializedConstants.add(var);\n            }\n          }\n        }\n        break;\n\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD: {\n        Node lhs \u003d n.getFirstChild();\n        if (lhs.isName()) {\n          String name \u003d lhs.getString();\n          Scope.Var var \u003d t.getScope().getVar(name);\n          if (isConstant(var)) {\n            if (initializedConstants.contains(var)) {\n              reportError(t, n, name);\n            } else {\n              initializedConstants.add(var);\n            }\n          }\n        }\n        break;\n      }\n\n      case Token.INC:\n      case Token.DEC: {\n        Node lhs \u003d n.getFirstChild();\n        if (lhs.isName()) {\n          String name \u003d lhs.getString();\n          Scope.Var var \u003d t.getScope().getVar(name);\n          if (isConstant(var)) {\n            reportError(t, n, name);\n          }\n        }\n        break;\n      }\n    }\n  }",
    "begin_line": 59,
    "end_line": 117,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConstCheck.isConstant#123",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ConstCheck.java",
    "class_name": "com.google.javascript.jscomp.ConstCheck",
    "signature": "com.google.javascript.jscomp.ConstCheck.isConstant(com.google.javascript.jscomp.Scope.Var)",
    "snippet": "private boolean isConstant(Scope.Var var) {\n    return var !\u003d null \u0026\u0026 var.isConst();\n  }",
    "begin_line": 123,
    "end_line": 125,
    "comment": "/** \n * Gets whether a variable is a constant initialized to a literal value at the point where it is declared.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConstCheck.reportError#130",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ConstCheck.java",
    "class_name": "com.google.javascript.jscomp.ConstCheck",
    "signature": "com.google.javascript.jscomp.ConstCheck.reportError(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, java.lang.String)",
    "snippet": "void reportError(NodeTraversal t, Node n, String name) {\n    compiler.report(t.makeError(n, CONST_REASSIGNED_VALUE_ERROR, name));\n  }",
    "begin_line": 130,
    "end_line": 132,
    "comment": "/** \n * Reports a reassigned constant error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.compare#73",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003ccom.google.javascript.rhino.Node,com.google.javascript.jscomp.ControlFlowGraph.Branch\u003e, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003ccom.google.javascript.rhino.Node,com.google.javascript.jscomp.ControlFlowGraph.Branch\u003e)",
    "snippet": "@Override\n    public int compare(\n        DiGraphNode\u003cNode, Branch\u003e a, DiGraphNode\u003cNode, Branch\u003e b) {\n      return astPosition.get(a.getValue()) - astPosition.get(b.getValue());\n    }",
    "begin_line": 73,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.ControlFlowAnalysis#137",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.ControlFlowAnalysis(com.google.javascript.jscomp.AbstractCompiler, boolean, boolean)",
    "snippet": " ControlFlowAnalysis(AbstractCompiler compiler,\n      boolean shouldTraverseFunctions, boolean edgeAnnotations) {\n    this.compiler \u003d compiler;\n    this.shouldTraverseFunctions \u003d shouldTraverseFunctions;\n    this.edgeAnnotations \u003d edgeAnnotations;\n  }",
    "begin_line": 137,
    "end_line": 142,
    "comment": "/** \n * Constructor.\n * @param compiler Compiler instance.\n * @param shouldTraverseFunctions Whether functions should be traversed (trueby default).\n * @param edgeAnnotations Whether to allow edge annotations. By default,only node annotations are allowed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.getCfg#144",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.getCfg()",
    "snippet": "ControlFlowGraph\u003cNode\u003e getCfg() {\n    return cfg;\n  }",
    "begin_line": 144,
    "end_line": 146,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.process#149",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void process(Node externs, Node root) {\n    this.root \u003d root;\n    astPositionCounter \u003d 0;\n    astPosition \u003d Maps.newHashMap();\n    nodePriorities \u003d Maps.newHashMap();\n    cfg \u003d new AstControlFlowGraph(computeFallThrough(root), nodePriorities,\n                                  edgeAnnotations);\n    NodeTraversal.traverse(compiler, root, this);\n    astPosition.put(null, ++astPositionCounter); // the implicit return is last.\n\n    // Now, generate the priority of nodes by doing a depth-first\n    // search on the CFG.\n    priorityCounter \u003d 0;\n    DiGraphNode\u003cNode, Branch\u003e entry \u003d cfg.getEntry();\n    prioritizeFromEntryNode(entry);\n\n    if (shouldTraverseFunctions) {\n      // If we\u0027re traversing inner functions, we need to rank the\n      // priority of them too.\n      for (DiGraphNode\u003cNode, Branch\u003e candidate : cfg.getDirectedGraphNodes()) {\n        Node value \u003d candidate.getValue();\n        if (value !\u003d null \u0026\u0026 value.isFunction()) {\n          Preconditions.checkState(\n              !nodePriorities.containsKey(candidate) || candidate \u003d\u003d entry);\n          prioritizeFromEntryNode(candidate);\n        }\n      }\n    }\n\n    // At this point, all reachable nodes have been given a priority, but\n    // unreachable nodes have not been given a priority. Put them last.\n    // Presumably, it doesn\u0027t really matter what priority they get, since\n    // this shouldn\u0027t happen in real code.\n    for (DiGraphNode\u003cNode, Branch\u003e candidate : cfg.getDirectedGraphNodes()) {\n      if (!nodePriorities.containsKey(candidate)) {\n        nodePriorities.put(candidate, ++priorityCounter);\n      }\n    }\n\n    // Again, the implicit return node is always last.\n    nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter);\n  }",
    "begin_line": 149,
    "end_line": 190,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.prioritizeFromEntryNode#196",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.prioritizeFromEntryNode(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003ccom.google.javascript.rhino.Node,com.google.javascript.jscomp.ControlFlowGraph.Branch\u003e)",
    "snippet": "private void prioritizeFromEntryNode(DiGraphNode\u003cNode, Branch\u003e entry) {\n    PriorityQueue\u003cDiGraphNode\u003cNode, Branch\u003e\u003e worklist \u003d\n        new PriorityQueue\u003cDiGraphNode\u003cNode, Branch\u003e\u003e(10, priorityComparator);\n    worklist.add(entry);\n\n    while (!worklist.isEmpty()) {\n      DiGraphNode\u003cNode, Branch\u003e current \u003d worklist.remove();\n      if (nodePriorities.containsKey(current)) {\n        continue;\n      }\n\n      nodePriorities.put(current, ++priorityCounter);\n\n      List\u003cDiGraphNode\u003cNode, Branch\u003e\u003e successors \u003d\n          cfg.getDirectedSuccNodes(current);\n      for (DiGraphNode\u003cNode, Branch\u003e candidate : successors) {\n        worklist.add(candidate);\n      }\n    }\n  }",
    "begin_line": 196,
    "end_line": 215,
    "comment": "/** \n * Given an entry node, find all the nodes reachable from that node and prioritize them.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.shouldTraverse#218",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public boolean shouldTraverse(\n      NodeTraversal nodeTraversal, Node n, Node parent) {\n    astPosition.put(n, astPositionCounter++);\n\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        if (shouldTraverseFunctions || n \u003d\u003d cfg.getEntry().getValue()) {\n          exceptionHandler.push(n);\n          return true;\n        }\n        return false;\n      case Token.TRY:\n        exceptionHandler.push(n);\n        return true;\n    }\n\n    /*\n     * We are going to stop the traversal depending on what the node\u0027s parent\n     * is.\n     *\n     * We are only interested in adding edges between nodes that change control\n     * flow. The most obvious ones are loops and IF-ELSE\u0027s. A statement\n     * transfers control to its next sibling.\n     *\n     * In case of an expression tree, there is no control flow within the tree\n     * even when there are short circuited operators and conditionals. When we\n     * are doing data flow analysis, we will simply synthesize lattices up the\n     * expression tree by finding the meet at each expression node.\n     *\n     * For example: within a Token.SWITCH, the expression in question does not\n     * change the control flow and need not to be considered.\n     */\n    if (parent !\u003d null) {\n      switch (parent.getType()) {\n        case Token.FOR:\n          // Only traverse the body of the for loop.\n          return n \u003d\u003d parent.getLastChild();\n\n        // Skip the conditions.\n        case Token.IF:\n        case Token.WHILE:\n        case Token.WITH:\n          return n !\u003d parent.getFirstChild();\n        case Token.DO:\n          return n !\u003d parent.getFirstChild().getNext();\n        // Only traverse the body of the cases\n        case Token.SWITCH:\n        case Token.CASE:\n        case Token.CATCH:\n        case Token.LABEL:\n          return n !\u003d parent.getFirstChild();\n        case Token.FUNCTION:\n          return n \u003d\u003d parent.getFirstChild().getNext().getNext();\n        case Token.CONTINUE:\n        case Token.BREAK:\n        case Token.EXPR_RESULT:\n        case Token.VAR:\n        case Token.RETURN:\n        case Token.THROW:\n          return false;\n        case Token.TRY:\n          /* Just before we are about to visit the second child of the TRY node,\n           * we know that we will be visiting either the CATCH or the FINALLY.\n           * In other words, we know that the post order traversal of the TRY\n           * block has been finished, no more exceptions can be caught by the\n           * handler at this TRY block and should be taken out of the stack.\n           */\n          if (n \u003d\u003d parent.getFirstChild().getNext()) {\n            Preconditions.checkState(exceptionHandler.peek() \u003d\u003d parent);\n            exceptionHandler.pop();\n          }\n      }\n    }\n    return true;\n  }",
    "begin_line": 218,
    "end_line": 292,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.visit#295",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.IF:\n        handleIf(n);\n        return;\n      case Token.WHILE:\n        handleWhile(n);\n        return;\n      case Token.DO:\n        handleDo(n);\n        return;\n      case Token.FOR:\n        handleFor(n);\n        return;\n      case Token.SWITCH:\n        handleSwitch(n);\n        return;\n      case Token.CASE:\n        handleCase(n);\n        return;\n      case Token.DEFAULT_CASE:\n        handleDefault(n);\n        return;\n      case Token.BLOCK:\n      case Token.SCRIPT:\n        handleStmtList(n);\n        return;\n      case Token.FUNCTION:\n        handleFunction(n);\n        return;\n      case Token.EXPR_RESULT:\n        handleExpr(n);\n        return;\n      case Token.THROW:\n        handleThrow(n);\n        return;\n      case Token.TRY:\n        handleTry(n);\n        return;\n      case Token.CATCH:\n        handleCatch(n);\n        return;\n      case Token.BREAK:\n        handleBreak(n);\n        return;\n      case Token.CONTINUE:\n        handleContinue(n);\n        return;\n      case Token.RETURN:\n        handleReturn(n);\n        return;\n      case Token.WITH:\n        handleWith(n);\n        return;\n      case Token.LABEL:\n        return;\n      default:\n        handleStmt(n);\n        return;\n    }\n  }",
    "begin_line": 295,
    "end_line": 355,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.handleIf#357",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleIf(com.google.javascript.rhino.Node)",
    "snippet": "private void handleIf(Node node) {\n    Node thenBlock \u003d node.getFirstChild().getNext();\n    Node elseBlock \u003d thenBlock.getNext();\n    createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock));\n\n    if (elseBlock \u003d\u003d null) {\n      createEdge(node, Branch.ON_FALSE,\n          computeFollowNode(node, this)); // not taken branch\n    } else {\n      createEdge(node, Branch.ON_FALSE, computeFallThrough(elseBlock));\n    }\n    connectToPossibleExceptionHandler(\n        node, NodeUtil.getConditionExpression(node));\n  }",
    "begin_line": 357,
    "end_line": 370,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.handleWhile#372",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleWhile(com.google.javascript.rhino.Node)",
    "snippet": "private void handleWhile(Node node) {\n    // Control goes to the first statement if the condition evaluates to true.\n    createEdge(node, Branch.ON_TRUE,\n        computeFallThrough(node.getFirstChild().getNext()));\n\n    // Control goes to the follow() if the condition evaluates to false.\n    createEdge(node, Branch.ON_FALSE,\n        computeFollowNode(node, this));\n    connectToPossibleExceptionHandler(\n        node, NodeUtil.getConditionExpression(node));\n  }",
    "begin_line": 372,
    "end_line": 382,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.handleDo#384",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleDo(com.google.javascript.rhino.Node)",
    "snippet": "private void handleDo(Node node) {\n    // The first edge can be the initial iteration as well as the iterations\n    // after.\n    createEdge(node, Branch.ON_TRUE, computeFallThrough(node.getFirstChild()));\n    // The edge that leaves the do loop if the condition fails.\n    createEdge(node, Branch.ON_FALSE,\n        computeFollowNode(node, this));\n    connectToPossibleExceptionHandler(\n        node, NodeUtil.getConditionExpression(node));\n  }",
    "begin_line": 384,
    "end_line": 393,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.handleFor#395",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleFor(com.google.javascript.rhino.Node)",
    "snippet": "private void handleFor(Node forNode) {\n    if (forNode.getChildCount() \u003d\u003d 4) {\n      // We have for (init; cond; iter) { body }\n      Node init \u003d forNode.getFirstChild();\n      Node cond \u003d init.getNext();\n      Node iter \u003d cond.getNext();\n      Node body \u003d iter.getNext();\n      // After initialization, we transfer to the FOR which is in charge of\n      // checking the condition (for the first time).\n      createEdge(init, Branch.UNCOND, forNode);\n      // The edge that transfer control to the beginning of the loop body.\n      createEdge(forNode, Branch.ON_TRUE, computeFallThrough(body));\n      // The edge to end of the loop.\n      createEdge(forNode, Branch.ON_FALSE,\n          computeFollowNode(forNode, this));\n      // The end of the body will have a unconditional branch to our iter\n      // (handled by calling computeFollowNode of the last instruction of the\n      // body. Our iter will jump to the forNode again to another condition\n      // check.\n      createEdge(iter, Branch.UNCOND, forNode);\n      connectToPossibleExceptionHandler(init, init);\n      connectToPossibleExceptionHandler(forNode, cond);\n      connectToPossibleExceptionHandler(iter, iter);\n    } else {\n      // We have for (item in collection) { body }\n      Node item \u003d forNode.getFirstChild();\n      Node collection \u003d item.getNext();\n      Node body \u003d collection.getNext();\n      // The collection behaves like init.\n      createEdge(collection, Branch.UNCOND, forNode);\n      // The edge that transfer control to the beginning of the loop body.\n      createEdge(forNode, Branch.ON_TRUE, computeFallThrough(body));\n      // The edge to end of the loop.\n      createEdge(forNode, Branch.ON_FALSE,\n          computeFollowNode(forNode, this));\n      connectToPossibleExceptionHandler(forNode, collection);\n    }\n  }",
    "begin_line": 395,
    "end_line": 432,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.handleSwitch#434",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleSwitch(com.google.javascript.rhino.Node)",
    "snippet": "private void handleSwitch(Node node) {\n    // Transfer to the first non-DEFAULT CASE. if there are none, transfer\n    // to the DEFAULT or the EMPTY node.\n    Node next \u003d getNextSiblingOfType(\n        node.getFirstChild().getNext(), Token.CASE, Token.EMPTY);\n    if (next !\u003d null) { // Has at least one CASE or EMPTY\n      createEdge(node, Branch.UNCOND, next);\n    } else { // Has no CASE but possibly a DEFAULT\n      if (node.getFirstChild().getNext() !\u003d null) {\n        createEdge(node, Branch.UNCOND, node.getFirstChild().getNext());\n      } else { // No CASE, no DEFAULT\n        createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n      }\n    }\n    connectToPossibleExceptionHandler(node, node.getFirstChild());\n  }",
    "begin_line": 434,
    "end_line": 449,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.handleCase#451",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleCase(com.google.javascript.rhino.Node)",
    "snippet": "private void handleCase(Node node) {\n    // Case is a bit tricky....First it goes into the body if condition is true.\n    createEdge(node, Branch.ON_TRUE,\n        node.getFirstChild().getNext());\n    // Look for the next CASE, skipping over DEFAULT.\n    Node next \u003d getNextSiblingOfType(node.getNext(), Token.CASE);\n    if (next !\u003d null) { // Found a CASE\n      Preconditions.checkState(next.isCase());\n      createEdge(node, Branch.ON_FALSE, next);\n    } else { // No more CASE found, go back and search for a DEFAULT.\n      Node parent \u003d node.getParent();\n      Node deflt \u003d getNextSiblingOfType(\n        parent.getFirstChild().getNext(), Token.DEFAULT_CASE);\n      if (deflt !\u003d null) { // Has a DEFAULT\n        createEdge(node, Branch.ON_FALSE, deflt);\n      } else { // No DEFAULT found, go to the follow of the SWITCH.\n        createEdge(node, Branch.ON_FALSE, computeFollowNode(node, this));\n      }\n    }\n    connectToPossibleExceptionHandler(node, node.getFirstChild());\n  }",
    "begin_line": 451,
    "end_line": 471,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.handleDefault#473",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleDefault(com.google.javascript.rhino.Node)",
    "snippet": "private void handleDefault(Node node) {\n    // Directly goes to the body. It should not transfer to the next case.\n    createEdge(node, Branch.UNCOND, node.getFirstChild());\n  }",
    "begin_line": 473,
    "end_line": 476,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.handleWith#478",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleWith(com.google.javascript.rhino.Node)",
    "snippet": "private void handleWith(Node node) {\n    // Directly goes to the body. It should not transfer to the next case.\n    createEdge(node, Branch.UNCOND, node.getLastChild());\n    connectToPossibleExceptionHandler(node, node.getFirstChild());\n  }",
    "begin_line": 478,
    "end_line": 482,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.handleStmtList#484",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleStmtList(com.google.javascript.rhino.Node)",
    "snippet": "private void handleStmtList(Node node) {\n    Node parent \u003d node.getParent();\n    // Special case, don\u0027t add a block of empty CATCH block to the graph.\n    if (node.isBlock() \u0026\u0026 parent !\u003d null \u0026\u0026\n        parent.isTry() \u0026\u0026\n        NodeUtil.getCatchBlock(parent) \u003d\u003d node \u0026\u0026\n        !NodeUtil.hasCatchHandler(node)) {\n      return;\n    }\n\n    // A block transfer control to its first child if it is not empty.\n    Node child \u003d node.getFirstChild();\n\n    // Function declarations are skipped since control doesn\u0027t go into that\n    // function (unless it is called)\n    while (child !\u003d null \u0026\u0026 child.isFunction()) {\n      child \u003d child.getNext();\n    }\n\n    if (child !\u003d null) {\n      createEdge(node, Branch.UNCOND, computeFallThrough(child));\n    } else {\n      createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n    }\n\n    // Synthetic blocks\n    if (parent !\u003d null) {\n      switch (parent.getType()) {\n        case Token.DEFAULT_CASE:\n        case Token.CASE:\n        case Token.TRY:\n          break;\n        default:\n          if (node.isBlock() \u0026\u0026 node.isSyntheticBlock()) {\n            createEdge(node, Branch.SYN_BLOCK, computeFollowNode(node, this));\n          }\n          break;\n      }\n    }\n  }",
    "begin_line": 484,
    "end_line": 523,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.handleFunction#525",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleFunction(com.google.javascript.rhino.Node)",
    "snippet": "private void handleFunction(Node node) {\n    // A block transfer control to its first child if it is not empty.\n    Preconditions.checkState(node.getChildCount() \u003e\u003d 3);\n    createEdge(node, Branch.UNCOND,\n        computeFallThrough(node.getFirstChild().getNext().getNext()));\n    Preconditions.checkState(exceptionHandler.peek() \u003d\u003d node);\n    exceptionHandler.pop();\n  }",
    "begin_line": 525,
    "end_line": 532,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.handleExpr#534",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleExpr(com.google.javascript.rhino.Node)",
    "snippet": "private void handleExpr(Node node) {\n    createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n    connectToPossibleExceptionHandler(node, node);\n  }",
    "begin_line": 534,
    "end_line": 537,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.handleThrow#539",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleThrow(com.google.javascript.rhino.Node)",
    "snippet": "private void handleThrow(Node node) {\n    connectToPossibleExceptionHandler(node, node);\n  }",
    "begin_line": 539,
    "end_line": 541,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.handleTry#543",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleTry(com.google.javascript.rhino.Node)",
    "snippet": "private void handleTry(Node node) {\n    createEdge(node, Branch.UNCOND, node.getFirstChild());\n  }",
    "begin_line": 543,
    "end_line": 545,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.handleCatch#547",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleCatch(com.google.javascript.rhino.Node)",
    "snippet": "private void handleCatch(Node node) {\n    createEdge(node, Branch.UNCOND, node.getLastChild());\n  }",
    "begin_line": 547,
    "end_line": 549,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.handleBreak#551",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleBreak(com.google.javascript.rhino.Node)",
    "snippet": "private void handleBreak(Node node) {\n    String label \u003d null;\n    // See if it is a break with label.\n    if (node.hasChildren()) {\n      label \u003d node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous \u003d null;\n    Node lastJump;\n    Node parent \u003d node.getParent();\n    /*\n     * Continuously look up the ancestor tree for the BREAK target or the target\n     * with the corresponding label and connect to it. If along the path we\n     * discover a FINALLY, we will connect the BREAK to that FINALLY. From then\n     * on, we will just record the control flow changes in the finallyMap. This\n     * is due to the fact that we need to connect any node that leaves its own\n     * FINALLY block to the outer FINALLY or the BREAK\u0027s target but those nodes\n     * are not known yet due to the way we traverse the nodes.\n     */\n    for (cur \u003d node, lastJump \u003d node;\n        !isBreakTarget(cur, label);\n        cur \u003d parent, parent \u003d parent.getParent()) {\n      if (cur.isTry() \u0026\u0026 NodeUtil.hasFinally(cur)\n          \u0026\u0026 cur.getLastChild() !\u003d previous) {\n        if (lastJump \u003d\u003d node) {\n          createEdge(lastJump, Branch.UNCOND, computeFallThrough(\n              cur.getLastChild()));\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump \u003d cur;\n      }\n      if (parent \u003d\u003d null) {\n        if (compiler.isIdeMode()) {\n          // In IDE mode, we expect that the data flow graph may\n          // not be well-formed.\n          return;\n        } else {\n          throw new IllegalStateException(\"Cannot find break target.\");\n        }\n      }\n      previous \u003d cur;\n    }\n    if (lastJump \u003d\u003d node) {\n      createEdge(lastJump, Branch.UNCOND, computeFollowNode(cur, this));\n    } else {\n      finallyMap.put(lastJump, computeFollowNode(cur, this));\n    }\n  }",
    "begin_line": 551,
    "end_line": 599,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.handleContinue#601",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleContinue(com.google.javascript.rhino.Node)",
    "snippet": "private void handleContinue(Node node) {\n    String label \u003d null;\n    if (node.hasChildren()) {\n      label \u003d node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous \u003d null;\n    Node lastJump;\n\n    // Similar to handBreak\u0027s logic with a few minor variation.\n    Node parent \u003d node.getParent();\n    for (cur \u003d node, lastJump \u003d node;\n        !isContinueTarget(cur, parent, label);\n        cur \u003d parent, parent \u003d parent.getParent()) {\n      if (cur.isTry() \u0026\u0026 NodeUtil.hasFinally(cur)\n          \u0026\u0026 cur.getLastChild() !\u003d previous) {\n        if (lastJump \u003d\u003d node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump \u003d cur;\n      }\n      Preconditions.checkState(parent !\u003d null, \"Cannot find continue target.\");\n      previous \u003d cur;\n    }\n    Node iter \u003d cur;\n    if (cur.getChildCount() \u003d\u003d 4) {\n      iter \u003d cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump \u003d\u003d node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
    "begin_line": 601,
    "end_line": 637,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.handleReturn#639",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleReturn(com.google.javascript.rhino.Node)",
    "snippet": "private void handleReturn(Node node) {\n    Node lastJump \u003d null;\n    for (Iterator\u003cNode\u003e iter \u003d exceptionHandler.iterator(); iter.hasNext();) {\n      Node curHandler \u003d iter.next();\n      if (curHandler.isFunction()) {\n        break;\n      }\n      if (NodeUtil.hasFinally(curHandler)) {\n        if (lastJump \u003d\u003d null) {\n          createEdge(node, Branch.UNCOND, curHandler.getLastChild());\n        } else {\n          finallyMap.put(lastJump,\n              computeFallThrough(curHandler.getLastChild()));\n        }\n        lastJump \u003d curHandler;\n      }\n    }\n\n    if (node.hasChildren()) {\n      connectToPossibleExceptionHandler(node, node.getFirstChild());\n    }\n\n    if (lastJump \u003d\u003d null) {\n      createEdge(node, Branch.UNCOND, null);\n    } else {\n      finallyMap.put(lastJump, null);\n    }\n  }",
    "begin_line": 639,
    "end_line": 666,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.handleStmt#668",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleStmt(com.google.javascript.rhino.Node)",
    "snippet": "private void handleStmt(Node node) {\n    // Simply transfer to the next line.\n    createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n    connectToPossibleExceptionHandler(node, node);\n  }",
    "begin_line": 668,
    "end_line": 672,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.computeFollowNode#674",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowAnalysis)",
    "snippet": "static Node computeFollowNode(Node node, ControlFlowAnalysis cfa) {\n    return computeFollowNode(node, node, cfa);\n  }",
    "begin_line": 674,
    "end_line": 676,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.computeFollowNode#678",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(com.google.javascript.rhino.Node)",
    "snippet": "static Node computeFollowNode(Node node) {\n    return computeFollowNode(node, node, null);\n  }",
    "begin_line": 678,
    "end_line": 680,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.computeFollowNode#692",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowAnalysis)",
    "snippet": "private static Node computeFollowNode(\n      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    /*\n     * This is the case where:\n     *\n     * 1. Parent is null implies that we are transferring control to the end of\n     * the script.\n     *\n     * 2. Parent is a function implies that we are transferring control back to\n     * the caller of the function.\n     *\n     * 3. If the node is a return statement, we should also transfer control\n     * back to the caller of the function.\n     *\n     * 4. If the node is root then we have reached the end of what we have been\n     * asked to traverse.\n     *\n     * In all cases we should transfer control to a \"symbolic return\" node.\n     * This will make life easier for DFAs.\n     */\n    Node parent \u003d node.getParent();\n    if (parent \u003d\u003d null || parent.isFunction() ||\n        (cfa !\u003d null \u0026\u0026 node \u003d\u003d cfa.root)) {\n      return null;\n    }\n\n    // If we are just before a IF/WHILE/DO/FOR:\n    switch (parent.getType()) {\n      // The follow() of any of the path from IF would be what follows IF.\n      case Token.IF:\n        return computeFollowNode(fromNode, parent, cfa);\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        // After the body of a CASE, the control goes to the body of the next\n        // case, without having to go to the case condition.\n        if (parent.getNext() !\u003d null) {\n          if (parent.getNext().isCase()) {\n            return parent.getNext().getFirstChild().getNext();\n          } else if (parent.getNext().isDefaultCase()) {\n            return parent.getNext().getFirstChild();\n          } else {\n            Preconditions.checkState(false, \"Not reachable\");\n          }\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n        break;\n      case Token.FOR:\n        if (NodeUtil.isForIn(parent)) {\n          return parent;\n        } else {\n          return parent.getFirstChild().getNext().getNext();\n        }\n      case Token.WHILE:\n      case Token.DO:\n        return parent;\n      case Token.TRY:\n        // If we are coming out of the TRY block...\n        if (parent.getFirstChild() \u003d\u003d node) {\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(parent.getLastChild());\n          } else { // and have no FINALLY.\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // CATCH block.\n        } else if (NodeUtil.getCatchBlock(parent) \u003d\u003d node){\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(node.getNext());\n          } else {\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // If we are coming out of the FINALLY block...\n        } else if (parent.getLastChild() \u003d\u003d node){\n          if (cfa !\u003d null) {\n            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n              cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);\n            }\n          }\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n    }\n\n    // Now that we are done with the special cases follow should be its\n    // immediate sibling, unless its sibling is a function\n    Node nextSibling \u003d node.getNext();\n\n    // Skip function declarations because control doesn\u0027t get pass into it.\n    while (nextSibling !\u003d null \u0026\u0026 nextSibling.isFunction()) {\n      nextSibling \u003d nextSibling.getNext();\n    }\n\n    if (nextSibling !\u003d null) {\n      return computeFallThrough(nextSibling);\n    } else {\n      // If there are no more siblings, control is transferred up the AST.\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  }",
    "begin_line": 692,
    "end_line": 789,
    "comment": "/** \n * Computes the follow() node of a given node and its parent. There is a side effect when calling this function. If this function computed an edge that exists a FINALLY, it\u0027ll attempt to connect the fromNode to the outer FINALLY according to the finallyMap.\n * @param fromNode The original source node since {@code node} is changedduring recursion.\n * @param node The node that follow() should compute.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.computeFallThrough#796",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(com.google.javascript.rhino.Node)",
    "snippet": "static Node computeFallThrough(Node n) {\n    switch (n.getType()) {\n      case Token.DO:\n        return computeFallThrough(n.getFirstChild());\n      case Token.FOR:\n        if (NodeUtil.isForIn(n)) {\n          return n.getFirstChild().getNext();\n        }\n        return computeFallThrough(n.getFirstChild());\n      case Token.LABEL:\n        return computeFallThrough(n.getLastChild());\n      default:\n        return n;\n    }\n  }",
    "begin_line": 796,
    "end_line": 810,
    "comment": "/** \n * Computes the destination node of n when we want to fallthrough into the subtree of n. We don\u0027t always create a CFG edge into n itself because of DOs and FORs.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.createEdge#818",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.createEdge(com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch, com.google.javascript.rhino.Node)",
    "snippet": "private void createEdge(Node fromNode, ControlFlowGraph.Branch branch,\n      Node toNode) {\n    cfg.createNode(fromNode);\n    cfg.createNode(toNode);\n    cfg.connectIfNotFound(fromNode, branch, toNode);\n  }",
    "begin_line": 818,
    "end_line": 823,
    "comment": "/** \n * Connects the two nodes in the control flow graph.\n * @param fromNode Source.\n * @param toNode Destination.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.connectToPossibleExceptionHandler#830",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.connectToPossibleExceptionHandler(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private void connectToPossibleExceptionHandler(Node cfgNode, Node target) {\n    if (mayThrowException(target) \u0026\u0026 !exceptionHandler.isEmpty()) {\n      Node lastJump \u003d cfgNode;\n      for (Node handler : exceptionHandler) {\n        if (handler.isFunction()) {\n          return;\n        }\n        Preconditions.checkState(handler.isTry());\n        Node catchBlock \u003d NodeUtil.getCatchBlock(handler);\n\n        if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n          if (lastJump \u003d\u003d cfgNode) {\n            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n          } else {\n            finallyMap.put(lastJump, handler.getLastChild());\n          }\n        } else { // Has a catch.\n          if (lastJump \u003d\u003d cfgNode) {\n            createEdge(cfgNode, Branch.ON_EX, catchBlock);\n            return;\n          } else {\n            finallyMap.put(lastJump, catchBlock);\n          }\n        }\n        lastJump \u003d handler;\n      }\n    }\n  }",
    "begin_line": 830,
    "end_line": 857,
    "comment": "/** \n * Connects cfgNode to the proper CATCH block if target subtree might throw an exception. If there are FINALLY blocks reached before a CATCH, it will make the corresponding entry in finallyMap.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.getNextSiblingOfType#862",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(com.google.javascript.rhino.Node, int)",
    "snippet": "private static Node getNextSiblingOfType(Node first, int ... types) {\n    for (Node c \u003d first; c !\u003d null; c \u003d c.getNext()) {\n      for (int type : types) {\n        if (c.getType() \u003d\u003d type) {\n          return c;\n        }\n      }\n    }\n    return null;\n  }",
    "begin_line": 862,
    "end_line": 871,
    "comment": "/** \n * Get the next sibling (including itself) of one of the given types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.isBreakTarget#877",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.isBreakTarget(com.google.javascript.rhino.Node, java.lang.String)",
    "snippet": "public static boolean isBreakTarget(Node target, String label) {\n    return isBreakStructure(target, label !\u003d null) \u0026\u0026\n      matchLabel(target.getParent(), label);\n  }",
    "begin_line": 877,
    "end_line": 880,
    "comment": "/** \n * Checks if target is actually the break target of labeled continue. The label can be null if it is an unlabeled break.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.isContinueTarget#886",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.isContinueTarget(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String)",
    "snippet": "private static boolean isContinueTarget(\n      Node target, Node parent, String label) {\n    return isContinueStructure(target) \u0026\u0026 matchLabel(parent, label);\n  }",
    "begin_line": 886,
    "end_line": 889,
    "comment": "/** \n * Checks if target is actually the continue target of labeled continue. The label can be null if it is an unlabeled continue.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.matchLabel#894",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.matchLabel(com.google.javascript.rhino.Node, java.lang.String)",
    "snippet": "private static boolean matchLabel(Node target, String label) {\n    if (label \u003d\u003d null) {\n      return true;\n    }\n    while (target.isLabel()) {\n      if (target.getFirstChild().getString().equals(label)) {\n        return true;\n      }\n      target \u003d target.getParent();\n    }\n    return false;\n  }",
    "begin_line": 894,
    "end_line": 905,
    "comment": "/** \n * Check if label is actually referencing the target control structure. If label is null, it always returns true.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.mayThrowException#910",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(com.google.javascript.rhino.Node)",
    "snippet": "public static boolean mayThrowException(Node n) {\n    switch (n.getType()) {\n      case Token.CALL:\n      case Token.GETPROP:\n      case Token.GETELEM:\n      case Token.THROW:\n      case Token.NEW:\n      case Token.ASSIGN:\n      case Token.INC:\n      case Token.DEC:\n      case Token.INSTANCEOF:\n        return true;\n      case Token.FUNCTION:\n        return false;\n    }\n    for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(c) \u0026\u0026 mayThrowException(c)) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "begin_line": 910,
    "end_line": 931,
    "comment": "/** \n * Determines if the subtree might throw an exception.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.isBreakStructure#936",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.isBreakStructure(com.google.javascript.rhino.Node, boolean)",
    "snippet": "static boolean isBreakStructure(Node n, boolean labeled) {\n    switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.SWITCH:\n        return true;\n      case Token.BLOCK:\n      case Token.IF:\n      case Token.TRY:\n        return labeled;\n      default:\n        return false;\n    }\n  }",
    "begin_line": 936,
    "end_line": 950,
    "comment": "/** \n * Determines whether the given node can be terminated with a BREAK node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.isContinueStructure#955",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.isContinueStructure(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isContinueStructure(Node n) {\n    switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }\n  }",
    "begin_line": 955,
    "end_line": 964,
    "comment": "/** \n * Determines whether the given node can be advanced with a CONTINUE node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.getExceptionHandler#971",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.getExceptionHandler(com.google.javascript.rhino.Node)",
    "snippet": "static Node getExceptionHandler(Node n) {\n    for (Node cur \u003d n;\n        !cur.isScript() \u0026\u0026 !cur.isFunction();\n        cur \u003d cur.getParent()) {\n      Node catchNode \u003d getCatchHandlerForBlock(cur);\n      if (catchNode !\u003d null) {\n        return catchNode;\n      }\n    }\n    return null;\n  }",
    "begin_line": 971,
    "end_line": 981,
    "comment": "/** \n * Get the TRY block with a CATCH that would be run if n throws an exception.\n * @return The CATCH node or null if it there isn\u0027t a CATCH before thethe function terminates.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowAnalysis.getCatchHandlerForBlock#987",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.getCatchHandlerForBlock(com.google.javascript.rhino.Node)",
    "snippet": "static Node getCatchHandlerForBlock(Node block) {\n    if (block.isBlock() \u0026\u0026\n        block.getParent().isTry() \u0026\u0026\n        block.getParent().getFirstChild() \u003d\u003d block) {\n      for (Node s \u003d block.getNext(); s !\u003d null; s \u003d s.getNext()) {\n        if (NodeUtil.hasCatchHandler(s)) {\n          return s.getFirstChild();\n        }\n      }\n    }\n    return null;\n  }",
    "begin_line": 987,
    "end_line": 998,
    "comment": "/** \n * Locate the catch BLOCK given the first block in a TRY.\n * @return The CATCH node or null there is no catch handler.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AstControlFlowGraph.AstControlFlowGraph#1013",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph(com.google.javascript.rhino.Node, java.util.Map\u003ccom.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003ccom.google.javascript.rhino.Node,com.google.javascript.jscomp.ControlFlowGraph.Branch\u003e,java.lang.Integer\u003e, boolean)",
    "snippet": "private AstControlFlowGraph(Node entry,\n        Map\u003cDiGraphNode\u003cNode, Branch\u003e, Integer\u003e priorities,\n        boolean edgeAnnotations) {\n      super(entry,\n          true /* node annotations */, edgeAnnotations);\n      this.priorities \u003d priorities;\n    }",
    "begin_line": 1013,
    "end_line": 1019,
    "comment": "/** \n * Constructor.\n * @param entry The entry node.\n * @param priorities The map from nodes to position in the AST (to befilled by the  {@link ControlFlowAnalysis#shouldTraverse}).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AstControlFlowGraph.getOptionalNodeComparator#1027",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.getOptionalNodeComparator(boolean)",
    "snippet": "@Override\n    \n    public Comparator\u003cDiGraphNode\u003cNode, Branch\u003e\u003e getOptionalNodeComparator(\n        boolean isForward) {\n      if (isForward) {\n        return new Comparator\u003cDiGraphNode\u003cNode, Branch\u003e\u003e() {\n          @Override\n          public int compare(\n              DiGraphNode\u003cNode, Branch\u003e n1, DiGraphNode\u003cNode, Branch\u003e n2) {\n            return getPosition(n1) - getPosition(n2);\n          }\n        };\n      } else {\n        return new Comparator\u003cDiGraphNode\u003cNode, Branch\u003e\u003e() {\n          @Override\n          public int compare(\n              DiGraphNode\u003cNode, Branch\u003e n1, DiGraphNode\u003cNode, Branch\u003e n2) {\n            return getPosition(n2) - getPosition(n1);\n          }\n        };\n      }\n    }",
    "begin_line": 1027,
    "end_line": 1046,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AstControlFlowGraph.compare#1032",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003ccom.google.javascript.rhino.Node,com.google.javascript.jscomp.ControlFlowGraph.Branch\u003e, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003ccom.google.javascript.rhino.Node,com.google.javascript.jscomp.ControlFlowGraph.Branch\u003e)",
    "snippet": "@Override\n          public int compare(\n              DiGraphNode\u003cNode, Branch\u003e n1, DiGraphNode\u003cNode, Branch\u003e n2) {\n            return getPosition(n1) - getPosition(n2);\n          }",
    "begin_line": 1032,
    "end_line": 1035,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AstControlFlowGraph.compare#1040",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003ccom.google.javascript.rhino.Node,com.google.javascript.jscomp.ControlFlowGraph.Branch\u003e, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003ccom.google.javascript.rhino.Node,com.google.javascript.jscomp.ControlFlowGraph.Branch\u003e)",
    "snippet": "@Override\n          public int compare(\n              DiGraphNode\u003cNode, Branch\u003e n1, DiGraphNode\u003cNode, Branch\u003e n2) {\n            return getPosition(n2) - getPosition(n1);\n          }",
    "begin_line": 1040,
    "end_line": 1043,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AstControlFlowGraph.getPosition#1052",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
    "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.getPosition(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003ccom.google.javascript.rhino.Node,com.google.javascript.jscomp.ControlFlowGraph.Branch\u003e)",
    "snippet": "private int getPosition(DiGraphNode\u003cNode, Branch\u003e n) {\n      Integer priority \u003d priorities.get(n);\n      Preconditions.checkNotNull(priority);\n      return priority;\n    }",
    "begin_line": 1052,
    "end_line": 1056,
    "comment": "/** \n * Gets the pre-order traversal position of the given node.\n * @return An arbitrary counter used for comparing positions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowGraph.ControlFlowGraph#47",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowGraph.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
    "signature": "com.google.javascript.jscomp.ControlFlowGraph.ControlFlowGraph(N, boolean, boolean)",
    "snippet": " ControlFlowGraph(\n      N entry, boolean nodeAnnotations, boolean edgeAnnotations) {\n    super(nodeAnnotations, edgeAnnotations);\n    implicitReturn \u003d createDirectedGraphNode(null);\n    this.entry \u003d createDirectedGraphNode(entry);\n  }",
    "begin_line": 47,
    "end_line": 52,
    "comment": "/** \n * Constructor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowGraph.getImplicitReturn#59",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowGraph.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
    "signature": "com.google.javascript.jscomp.ControlFlowGraph.getImplicitReturn()",
    "snippet": "public DiGraphNode\u003cN, ControlFlowGraph.Branch\u003e getImplicitReturn() {\n    return implicitReturn;\n  }",
    "begin_line": 59,
    "end_line": 61,
    "comment": "/** \n * Gets the implicit return node.\n * @return Return node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowGraph.getEntry#69",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowGraph.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
    "signature": "com.google.javascript.jscomp.ControlFlowGraph.getEntry()",
    "snippet": "public DiGraphNode\u003cN, ControlFlowGraph.Branch\u003e getEntry() {\n    return entry;\n  }",
    "begin_line": 69,
    "end_line": 71,
    "comment": "/** \n * Gets the entry point of the control flow graph. In general, this should be the beginning of the global script or beginning of a function.\n * @return The entry point.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowGraph.isImplicitReturn#79",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowGraph.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
    "signature": "com.google.javascript.jscomp.ControlFlowGraph.isImplicitReturn(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003cN,com.google.javascript.jscomp.ControlFlowGraph.Branch\u003e)",
    "snippet": "public boolean isImplicitReturn(\n      DiGraphNode\u003cN, ControlFlowGraph.Branch\u003e node) {\n    return node \u003d\u003d implicitReturn;\n  }",
    "begin_line": 79,
    "end_line": 82,
    "comment": "/** \n * Checks whether node is the implicit return.\n * @param node Node.\n * @return True if the node is the implicit return.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowGraph.connectToImplicitReturn#90",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowGraph.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
    "signature": "com.google.javascript.jscomp.ControlFlowGraph.connectToImplicitReturn(N, com.google.javascript.jscomp.ControlFlowGraph.Branch)",
    "snippet": "public void connectToImplicitReturn(N srcValue, Branch edgeValue) {\n    super.connect(srcValue, edgeValue, null);\n  }",
    "begin_line": 90,
    "end_line": 92,
    "comment": "/** \n * Connects the node to the explicit return.\n * @param srcValue Node.\n * @param edgeValue Edge.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowGraph.getOptionalNodeComparator#101",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowGraph.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
    "signature": "com.google.javascript.jscomp.ControlFlowGraph.getOptionalNodeComparator(boolean)",
    "snippet": "public Comparator\u003cDiGraphNode\u003cN, Branch\u003e\u003e getOptionalNodeComparator(\n      boolean isForward) {\n    return null;\n  }",
    "begin_line": 101,
    "end_line": 104,
    "comment": "/** \n * Gets a comparator for the nodes. The default implementation returns {@code null}. See  {@link ControlFlowGraph#getOptionalNodeComparator}.\n * @param isForward Whether the comparator sorts the nodes in the direction ofthe flow.\n * @return a comparator or null (in particular, if not overridden)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlFlowGraph.isConditional#129",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowGraph.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
    "signature": "com.google.javascript.jscomp.ControlFlowGraph.isConditional()",
    "snippet": "public boolean isConditional() {\n      return this \u003d\u003d ON_TRUE || this \u003d\u003d ON_FALSE;\n    }",
    "begin_line": 129,
    "end_line": 131,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCfgNodeTraversalCallback.shouldTraverse#146",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowGraph.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
    "signature": "com.google.javascript.jscomp.ControlFlowGraph.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      if (parent \u003d\u003d null) {\n        return true;\n      }\n      return !isEnteringNewCfgNode(n);\n    }",
    "begin_line": 146,
    "end_line": 152,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractCfgNodeTraversalCallback.isEnteringNewCfgNode#159",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlFlowGraph.java",
    "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
    "signature": "com.google.javascript.jscomp.ControlFlowGraph.isEnteringNewCfgNode(com.google.javascript.rhino.Node)",
    "snippet": "public static boolean isEnteringNewCfgNode(Node n) {\n    Node parent \u003d n.getParent();\n    switch (parent.getType()) {\n      case Token.BLOCK:\n      case Token.SCRIPT:\n      case Token.TRY:\n        return true;\n      case Token.FUNCTION:\n        // A function node represents the start of a function where the name\n        // bleeds into the local scope and parameters are assigned\n        // to the formal argument names. The node includes the name of the\n        // function and the LP list since we assume the whole set up process\n        // is atomic without change in control flow. The next change of\n        // control is going into the function\u0027s body, represented by the second\n        // child.\n        return n !\u003d parent.getFirstChild().getNext();\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        // These control structures are represented by a node that holds the\n        // condition. Each of them is a branch node based on its condition.\n        return NodeUtil.getConditionExpression(parent) !\u003d n;\n\n      case Token.FOR:\n        // The FOR(;;) node differs from other control structures in that\n        // it has an initialization and an increment statement. Those\n        // two statements have corresponding CFG nodes to represent them.\n        // The FOR node only represents the condition check for each iteration.\n        // That way the following:\n        // for(var x \u003d 0; x \u003c 10; x++) { } has a graph that is isomorphic to\n        // var x \u003d 0; while(x\u003c10) {  x++; }\n        if (NodeUtil.isForIn(parent)) {\n          // TODO(user): Investigate how we should handle the case where\n          // we have a very complex expression inside the FOR-IN header.\n          return n !\u003d parent.getFirstChild();\n        } else {\n          return NodeUtil.getConditionExpression(parent) !\u003d n;\n        }\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.CATCH:\n      case Token.WITH:\n        return n !\u003d parent.getFirstChild();\n      default:\n        return false;\n    }\n  }",
    "begin_line": 159,
    "end_line": 205,
    "comment": "/** \n * @return True if n should be represented by a new CFG node in the controlflow graph.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlStructureCheck.ControlStructureCheck#35",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlStructureCheck.java",
    "class_name": "com.google.javascript.jscomp.ControlStructureCheck",
    "signature": "com.google.javascript.jscomp.ControlStructureCheck.ControlStructureCheck(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": " ControlStructureCheck(AbstractCompiler compiler) {\n    this.compiler \u003d compiler;\n  }",
    "begin_line": 35,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlStructureCheck.process#40",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlStructureCheck.java",
    "class_name": "com.google.javascript.jscomp.ControlStructureCheck",
    "signature": "com.google.javascript.jscomp.ControlStructureCheck.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void process(Node externs, Node root) {\n    check(root);\n  }",
    "begin_line": 40,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlStructureCheck.hotSwapScript#45",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlStructureCheck.java",
    "class_name": "com.google.javascript.jscomp.ControlStructureCheck",
    "signature": "com.google.javascript.jscomp.ControlStructureCheck.hotSwapScript(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n    check(scriptRoot);\n  }",
    "begin_line": 45,
    "end_line": 47,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlStructureCheck.check#54",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlStructureCheck.java",
    "class_name": "com.google.javascript.jscomp.ControlStructureCheck",
    "signature": "com.google.javascript.jscomp.ControlStructureCheck.check(com.google.javascript.rhino.Node)",
    "snippet": "private void check(Node node) {\n    switch (node.getType()) {\n      case Token.WITH:\n        JSDocInfo info \u003d node.getJSDocInfo();\n        boolean allowWith \u003d\n            info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"with\");\n        if (!allowWith) {\n          report(node, USE_OF_WITH);\n        }\n        break;\n    }\n\n    for (Node bChild \u003d node.getFirstChild(); bChild !\u003d null;) {\n      Node next \u003d bChild.getNext();\n      check(bChild);\n      bChild \u003d next;\n    }\n  }",
    "begin_line": 54,
    "end_line": 71,
    "comment": "/** \n * Reports errors for any invalid use of control structures.\n * @param node Current node to check.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ControlStructureCheck.report#73",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ControlStructureCheck.java",
    "class_name": "com.google.javascript.jscomp.ControlStructureCheck",
    "signature": "com.google.javascript.jscomp.ControlStructureCheck.report(com.google.javascript.rhino.Node, com.google.javascript.jscomp.DiagnosticType)",
    "snippet": "private void report(Node n, DiagnosticType error) {\n    compiler.report(JSError.make(n.getSourceFileName(), n, error));\n  }",
    "begin_line": 73,
    "end_line": 75,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DataFlowAnalysis.DataFlowAnalysis#120",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.DataFlowAnalysis(com.google.javascript.jscomp.ControlFlowGraph\u003cN\u003e, com.google.javascript.jscomp.JoinOp\u003cL\u003e)",
    "snippet": " DataFlowAnalysis(ControlFlowGraph\u003cN\u003e targetCfg, JoinOp\u003cL\u003e joinOp) {\n    this.cfg \u003d targetCfg;\n    this.joinOp \u003d joinOp;\n    Comparator\u003cDiGraphNode\u003cN, Branch\u003e\u003e nodeComparator \u003d\n      cfg.getOptionalNodeComparator(isForward());\n    if (nodeComparator !\u003d null) {\n      this.orderedWorkSet \u003d Sets.newTreeSet(nodeComparator);\n    } else {\n      this.orderedWorkSet \u003d Sets.newLinkedHashSet();\n    }\n  }",
    "begin_line": 120,
    "end_line": 130,
    "comment": "/** \n * Constructs a data flow analysis. \u003cp\u003eTypical usage \u003cpre\u003e DataFlowAnalysis dfa \u003d ... dfa.analyze(); \u003c/pre\u003e {@link #analyze()} annotates the result to the control flow graph bymeans of  {@link DiGraphNode#setAnnotation} without anymodification of the graph itself. Additional calls to  {@link #analyze()}recomputes the analysis which can be useful if the control flow graph has been modified.\n * @param targetCfg The control flow graph object that this object performson. Modification of the graph requires a separate call to {@link #analyze()}.\n * @see #analyze()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DataFlowAnalysis.getCfg#138",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.getCfg()",
    "snippet": "final ControlFlowGraph\u003cN\u003e getCfg() {\n    return cfg;\n  }",
    "begin_line": 138,
    "end_line": 140,
    "comment": "/** \n * Returns the control flow graph that this analysis was performed on. Modifications can be done on this graph, however, the only time that the annotations are correct is after  {@link #analyze()} is called and beforethe graph has been modified.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DataFlowAnalysis.getExitLatticeElement#145",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.getExitLatticeElement()",
    "snippet": "L getExitLatticeElement() {\n    DiGraphNode\u003cN, Branch\u003e node \u003d getCfg().getImplicitReturn();\n    FlowState\u003cL\u003e state \u003d node.getAnnotation();\n    return state.getIn();\n  }",
    "begin_line": 145,
    "end_line": 149,
    "comment": "/** \n * Returns the lattice element at the exit point.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DataFlowAnalysis.join#152",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.join(L, L)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n  protected L join(L latticeA, L latticeB) {\n    return joinOp.apply(Lists.\u003cL\u003enewArrayList(latticeA, latticeB));\n  }",
    "begin_line": 152,
    "end_line": 154,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DataFlowAnalysis.isForward#162",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.isForward()",
    "snippet": "abstract boolean isForward();",
    "begin_line": 162,
    "end_line": 162,
    "comment": "/** \n * Checks whether the analysis is a forward flow analysis or backward flow analysis.\n * @return {@code true} if it is a forward analysis.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DataFlowAnalysis.flowThrough#171",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.flowThrough(N, L)",
    "snippet": "abstract L flowThrough(N node, L input);",
    "begin_line": 171,
    "end_line": 171,
    "comment": "/** \n * Computes the output state for a given node and input state.\n * @param node The node.\n * @param input Input lattice that should be read-only.\n * @return Output lattice.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DataFlowAnalysis.analyze#179",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.analyze()",
    "snippet": "final void analyze() {\n    analyze(MAX_STEPS);\n  }",
    "begin_line": 179,
    "end_line": 181,
    "comment": "/** \n * Finds a fixed-point solution using at most  {@link #MAX_STEPS}iterations.\n * @see #analyze(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DataFlowAnalysis.analyze#201",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.analyze(int)",
    "snippet": "final void analyze(int maxSteps) {\n    initialize();\n    int step \u003d 0;\n    while (!orderedWorkSet.isEmpty()) {\n      if (step \u003e maxSteps) {\n        throw new MaxIterationsExceededException(\n          \"Analysis did not terminate after \" + maxSteps + \" iterations\");\n      }\n      DiGraphNode\u003cN, Branch\u003e curNode \u003d orderedWorkSet.iterator().next();\n      orderedWorkSet.remove(curNode);\n      joinInputs(curNode);\n      if (flow(curNode)) {\n        // If there is a change in the current node, we want to grab the list\n        // of nodes that this node affects.\n        List\u003cDiGraphNode\u003cN, Branch\u003e\u003e nextNodes \u003d isForward() ?\n            cfg.getDirectedSuccNodes(curNode) :\n            cfg.getDirectedPredNodes(curNode);\n        for (DiGraphNode\u003cN, Branch\u003e nextNode : nextNodes) {\n          if (nextNode !\u003d cfg.getImplicitReturn()) {\n            orderedWorkSet.add(nextNode);\n          }\n        }\n      }\n      step++;\n    }\n    if (isForward()) {\n      joinInputs(getCfg().getImplicitReturn());\n    }\n  }",
    "begin_line": 201,
    "end_line": 229,
    "comment": "/** \n * Finds a fixed-point solution. The function has the side effect of replacing the existing node annotations with the computed solutions using  {@link com.google.javascript.jscomp.graph.GraphNode#setAnnotation(Annotation)}. \u003cp\u003eInitially, each node\u0027s input and output flow state contains the value given by  {@link #createInitialEstimateLattice()} (with the exception of theentry node of the graph which takes on the  {@link #createEntryLattice()}value. Each node will use the output state of its predecessor and compute a output state according to the instruction. At that time, any nodes that depends on the node\u0027s newly modified output value will need to recompute their output state again. Each step will perform a computation at one node until no extra computation will modify any existing output state anymore.\n * @param maxSteps Max number of iterations before the method stops and throwa  {@link MaxIterationsExceededException}. This will prevent the analysis from going into a infinite loop.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DataFlowAnalysis.createInitialEstimateLattice#236",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.createInitialEstimateLattice()",
    "snippet": "abstract L createInitialEstimateLattice();",
    "begin_line": 236,
    "end_line": 236,
    "comment": "/** \n * Gets the state of the initial estimation at each node.\n * @return Initial state.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DataFlowAnalysis.createEntryLattice#243",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.createEntryLattice()",
    "snippet": "abstract L createEntryLattice();",
    "begin_line": 243,
    "end_line": 243,
    "comment": "/** \n * Gets the incoming state of the entry node.\n * @return Entry state.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DataFlowAnalysis.initialize#248",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.initialize()",
    "snippet": "protected void initialize() {\n    // TODO(user): Calling clear doesn\u0027t deallocate the memory in a\n    // LinkedHashSet. Consider creating a new work set if we plan to repeatedly\n    // call analyze.\n    orderedWorkSet.clear();\n    for (DiGraphNode\u003cN, Branch\u003e node : cfg.getDirectedGraphNodes()) {\n      node.setAnnotation(new FlowState\u003cL\u003e(createInitialEstimateLattice(),\n          createInitialEstimateLattice()));\n      if (node !\u003d cfg.getImplicitReturn()) {\n        orderedWorkSet.add(node);\n      }\n    }\n  }",
    "begin_line": 248,
    "end_line": 260,
    "comment": "/** \n * Initializes the work list and the control flow graph.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DataFlowAnalysis.flow#267",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.flow(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003cN,com.google.javascript.jscomp.ControlFlowGraph.Branch\u003e)",
    "snippet": "protected boolean flow(DiGraphNode\u003cN, Branch\u003e node) {\n    FlowState\u003cL\u003e state \u003d node.getAnnotation();\n    if (isForward()) {\n      L outBefore \u003d state.out;\n      state.out \u003d flowThrough(node.getValue(), state.in);\n      return !outBefore.equals(state.out);\n    } else {\n      L inBefore \u003d state.in;\n      state.in \u003d flowThrough(node.getValue(), state.out);\n      return !inBefore.equals(state.in);\n    }\n  }",
    "begin_line": 267,
    "end_line": 278,
    "comment": "/** \n * Performs a single flow through a node.\n * @return {@code true} if the flow state differs from the previous state.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DataFlowAnalysis.joinInputs#286",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.joinInputs(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003cN,com.google.javascript.jscomp.ControlFlowGraph.Branch\u003e)",
    "snippet": "protected void joinInputs(DiGraphNode\u003cN, Branch\u003e node) {\n    FlowState\u003cL\u003e state \u003d node.getAnnotation();\n    if (isForward()) {\n      if (cfg.getEntry() \u003d\u003d node) {\n        state.setIn(createEntryLattice());\n      } else {\n        List\u003cDiGraphNode\u003cN, Branch\u003e\u003e inNodes \u003d cfg.getDirectedPredNodes(node);\n        if (inNodes.size() \u003d\u003d 1) {\n          FlowState\u003cL\u003e inNodeState \u003d inNodes.get(0).getAnnotation();\n          state.setIn(inNodeState.getOut());\n        } else if (inNodes.size() \u003e 1) {\n          List\u003cL\u003e values \u003d new ArrayList\u003cL\u003e(inNodes.size());\n          for (DiGraphNode\u003cN, Branch\u003e currentNode : inNodes) {\n            FlowState\u003cL\u003e currentNodeState \u003d currentNode.getAnnotation();\n            values.add(currentNodeState.getOut());\n          }\n          state.setIn(joinOp.apply(values));\n        }\n      }\n    } else {\n      List\u003cDiGraphNode\u003cN, Branch\u003e\u003e inNodes \u003d cfg.getDirectedSuccNodes(node);\n      if (inNodes.size() \u003d\u003d 1) {\n        DiGraphNode\u003cN, Branch\u003e inNode \u003d inNodes.get(0);\n        if (inNode \u003d\u003d cfg.getImplicitReturn()) {\n          state.setOut(createEntryLattice());\n        } else {\n          FlowState\u003cL\u003e inNodeState \u003d inNode.getAnnotation();\n          state.setOut(inNodeState.getIn());\n        }\n      } else if (inNodes.size() \u003e 1) {\n        List\u003cL\u003e values \u003d new ArrayList\u003cL\u003e(inNodes.size());\n        for (DiGraphNode\u003cN, Branch\u003e currentNode : inNodes) {\n          FlowState\u003cL\u003e currentNodeState \u003d currentNode.getAnnotation();\n          values.add(currentNodeState.getIn());\n        }\n        state.setOut(joinOp.apply(values));\n      }\n    }\n  }",
    "begin_line": 286,
    "end_line": 324,
    "comment": "/** \n * Computes the new flow state at a given node\u0027s entry by merging the output (input) lattice of the node\u0027s predecessor (successor).\n * @param node Node to compute new join.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowState.FlowState#341",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.FlowState(L, L)",
    "snippet": "private FlowState(L inState, L outState) {\n      Preconditions.checkNotNull(inState);\n      Preconditions.checkNotNull(outState);\n      this.in \u003d inState;\n      this.out \u003d outState;\n    }",
    "begin_line": 341,
    "end_line": 346,
    "comment": "/** \n * Private constructor. No other classes should create new states.\n * @param inState Input.\n * @param outState Output.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowState.getIn#348",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.getIn()",
    "snippet": "L getIn() {\n      return in;\n    }",
    "begin_line": 348,
    "end_line": 350,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowState.setIn#352",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.setIn(L)",
    "snippet": "void setIn(L in) {\n      Preconditions.checkNotNull(in);\n      this.in \u003d in;\n    }",
    "begin_line": 352,
    "end_line": 355,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowState.getOut#357",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.getOut()",
    "snippet": "L getOut() {\n      return out;\n    }",
    "begin_line": 357,
    "end_line": 359,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowState.setOut#361",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.setOut(L)",
    "snippet": "void setOut(L out) {\n      Preconditions.checkNotNull(out);\n      this.out \u003d out;\n    }",
    "begin_line": 361,
    "end_line": 364,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowState.toString#367",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.toString()",
    "snippet": "@Override\n    public String toString() {\n      return String.format(\"IN: %s OUT: %s\", in, out);\n    }",
    "begin_line": 367,
    "end_line": 369,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowState.hashCode#372",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n      return Objects.hashCode(in, out);\n    }",
    "begin_line": 372,
    "end_line": 374,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MaxIterationsExceededException.MaxIterationsExceededException#384",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.MaxIterationsExceededException(java.lang.String)",
    "snippet": " MaxIterationsExceededException(String msg) {\n      super(msg);\n    }",
    "begin_line": 384,
    "end_line": 386,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BranchedForwardDataFlowAnalysis.initialize#393",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.initialize()",
    "snippet": "@Override\n    protected void initialize() {\n      orderedWorkSet.clear();\n      for (DiGraphNode\u003cN, Branch\u003e node : getCfg().getDirectedGraphNodes()) {\n        int outEdgeCount \u003d getCfg().getOutEdges(node.getValue()).size();\n        List\u003cL\u003e outLattices \u003d Lists.newArrayList();\n        for (int i \u003d 0; i \u003c outEdgeCount; i++) {\n          outLattices.add(createInitialEstimateLattice());\n        }\n        node.setAnnotation(new BranchedFlowState\u003cL\u003e(\n            createInitialEstimateLattice(), outLattices));\n        if (node !\u003d getCfg().getImplicitReturn()) {\n          orderedWorkSet.add(node);\n        }\n      }\n    }",
    "begin_line": 393,
    "end_line": 407,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BranchedForwardDataFlowAnalysis.BranchedForwardDataFlowAnalysis#409",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.BranchedForwardDataFlowAnalysis(com.google.javascript.jscomp.ControlFlowGraph\u003cN\u003e, com.google.javascript.jscomp.JoinOp\u003cL\u003e)",
    "snippet": " BranchedForwardDataFlowAnalysis(ControlFlowGraph\u003cN\u003e targetCfg,\n                                    JoinOp\u003cL\u003e joinOp) {\n      super(targetCfg, joinOp);\n    }",
    "begin_line": 409,
    "end_line": 412,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BranchedForwardDataFlowAnalysis.getExitLatticeElement#419",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.getExitLatticeElement()",
    "snippet": "@Override\n    L getExitLatticeElement() {\n      DiGraphNode\u003cN, Branch\u003e node \u003d getCfg().getImplicitReturn();\n      BranchedFlowState\u003cL\u003e state \u003d node.getAnnotation();\n      return state.getIn();\n    }",
    "begin_line": 419,
    "end_line": 423,
    "comment": "/** \n * Returns the lattice element at the exit point. Needs to be overridden because we use a BranchedFlowState instead of a FlowState; ugh.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BranchedForwardDataFlowAnalysis.isForward#426",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.isForward()",
    "snippet": "@Override\n    final boolean isForward() {\n      return true;\n    }",
    "begin_line": 426,
    "end_line": 428,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BranchedForwardDataFlowAnalysis.branchedFlowThrough#441",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.branchedFlowThrough(N, L)",
    "snippet": "abstract List\u003cL\u003e branchedFlowThrough(N node, L input);",
    "begin_line": 441,
    "end_line": 441,
    "comment": "/** \n * The branched flow function maps a single lattice to a list of output lattices. \u003cp\u003eEach outgoing edge of a node will have a corresponding output lattice in the ordered returned by {@link com.google.javascript.jscomp.graph.DiGraph#getOutEdges(Object)}in the returned list.\n * @return A list of output values depending on the edge\u0027s branch type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BranchedForwardDataFlowAnalysis.flow#444",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.flow(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003cN,com.google.javascript.jscomp.ControlFlowGraph.Branch\u003e)",
    "snippet": "@Override\n    protected final boolean flow(DiGraphNode\u003cN, Branch\u003e node) {\n      BranchedFlowState\u003cL\u003e state \u003d node.getAnnotation();\n      List\u003cL\u003e outBefore \u003d state.out;\n      state.out \u003d branchedFlowThrough(node.getValue(), state.in);\n      Preconditions.checkState(outBefore.size() \u003d\u003d state.out.size());\n      for (int i \u003d 0; i \u003c outBefore.size(); i++) {\n        if (!outBefore.get(i).equals(state.out.get(i))) {\n          return true;\n        }\n      }\n      return false;\n    }",
    "begin_line": 444,
    "end_line": 455,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BranchedForwardDataFlowAnalysis.joinInputs#458",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.joinInputs(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003cN,com.google.javascript.jscomp.ControlFlowGraph.Branch\u003e)",
    "snippet": "@Override\n    protected void joinInputs(DiGraphNode\u003cN, Branch\u003e node) {\n      BranchedFlowState\u003cL\u003e state \u003d node.getAnnotation();\n      List\u003cDiGraphNode\u003cN, Branch\u003e\u003e predNodes \u003d\n          getCfg().getDirectedPredNodes(node);\n      List\u003cL\u003e values \u003d new ArrayList\u003cL\u003e(predNodes.size());\n\n      for (DiGraphNode\u003cN, Branch\u003e predNode : predNodes) {\n        BranchedFlowState\u003cL\u003e predNodeState \u003d predNode.getAnnotation();\n\n        L in \u003d predNodeState.out.get(\n            getCfg().getDirectedSuccNodes(predNode).indexOf(node));\n\n        values.add(in);\n      }\n      if (getCfg().getEntry() \u003d\u003d node) {\n        state.setIn(createEntryLattice());\n      } else if (!values.isEmpty()) {\n        state.setIn(joinOp.apply(values));\n      }\n    }",
    "begin_line": 458,
    "end_line": 477,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BranchedFlowState.BranchedFlowState#496",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState(L, java.util.List\u003cL\u003e)",
    "snippet": "private BranchedFlowState(L inState, List\u003cL\u003e outState) {\n      Preconditions.checkNotNull(inState);\n      Preconditions.checkNotNull(outState);\n      this.in \u003d inState;\n      this.out \u003d outState;\n    }",
    "begin_line": 496,
    "end_line": 501,
    "comment": "/** \n * Private constructor. No other classes should create new states.\n * @param inState Input.\n * @param outState Output.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BranchedFlowState.getIn#503",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.getIn()",
    "snippet": "L getIn() {\n      return in;\n    }",
    "begin_line": 503,
    "end_line": 505,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BranchedFlowState.setIn#507",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.setIn(L)",
    "snippet": "void setIn(L in) {\n      Preconditions.checkNotNull(in);\n      this.in \u003d in;\n    }",
    "begin_line": 507,
    "end_line": 510,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BranchedFlowState.getOut#512",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.getOut()",
    "snippet": "List\u003cL\u003e getOut() {\n      return out;\n    }",
    "begin_line": 512,
    "end_line": 514,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BranchedFlowState.setOut#516",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.setOut(java.util.List\u003cL\u003e)",
    "snippet": "void setOut(List\u003cL\u003e out) {\n      Preconditions.checkNotNull(out);\n      for (L item : out) {\n        Preconditions.checkNotNull(item);\n      }\n      this.out \u003d out;\n    }",
    "begin_line": 516,
    "end_line": 522,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BranchedFlowState.toString#525",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.toString()",
    "snippet": "@Override\n    public String toString() {\n      return String.format(\"IN: %s OUT: %s\", in, out);\n    }",
    "begin_line": 525,
    "end_line": 527,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BranchedFlowState.hashCode#530",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n      return Objects.hashCode(in, out);\n    }",
    "begin_line": 530,
    "end_line": 532,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BranchedFlowState.computeEscaped#548",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.computeEscaped(com.google.javascript.jscomp.Scope, java.util.Set\u003ccom.google.javascript.jscomp.Scope.Var\u003e, com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "static void computeEscaped(final Scope jsScope, final Set\u003cVar\u003e escaped,\n      AbstractCompiler compiler) {\n    // TODO(user): Very good place to store this information somewhere.\n    AbstractPostOrderCallback finder \u003d new AbstractPostOrderCallback() {\n      @Override\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        if (jsScope \u003d\u003d t.getScope() || !n.isName()\n            || parent.isFunction()) {\n          return;\n        }\n        String name \u003d n.getString();\n        Var var \u003d t.getScope().getVar(name);\n        if (var !\u003d null \u0026\u0026 var.scope \u003d\u003d jsScope) {\n          escaped.add(jsScope.getVar(name));\n        }\n      }\n    };\n\n    NodeTraversal t \u003d new NodeTraversal(compiler, finder);\n    t.traverseAtScope(jsScope);\n\n    // 1: Remove the exception name in CATCH which technically isn\u0027t local to\n    //    begin with.\n    for (Iterator\u003cVar\u003e i \u003d jsScope.getVars(); i.hasNext();) {\n      Var var \u003d i.next();\n      if (var.getParentNode().isCatch() ||\n          compiler.getCodingConvention().isExported(var.getName())) {\n        escaped.add(var);\n      }\n    }\n  }",
    "begin_line": 548,
    "end_line": 578,
    "comment": "/** \n * Compute set of escaped variables. When a variable is escaped in a dataflow analysis, it can be reference outside of the code that we are analyzing. A variable is escaped if any of the following is true: \u003cp\u003e\u003col\u003e \u003cli\u003eIt is defined as the exception name in CATCH clause so it became a variable local not to our definition of scope.\u003c/li\u003e \u003cli\u003eExported variables as they can be needed after the script terminates. \u003c/li\u003e \u003cli\u003eNames of named functions because in JavaScript, \u003ci\u003efunction foo(){}\u003c/i\u003e does not kill \u003ci\u003efoo\u003c/i\u003e in the dataflow.\u003c/li\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BranchedFlowState.visit#553",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DataFlowAnalysis.java",
    "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
    "signature": "com.google.javascript.jscomp.DataFlowAnalysis.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        if (jsScope \u003d\u003d t.getScope() || !n.isName()\n            || parent.isFunction()) {\n          return;\n        }\n        String name \u003d n.getString();\n        Var var \u003d t.getScope().getVar(name);\n        if (var !\u003d null \u0026\u0026 var.scope \u003d\u003d jsScope) {\n          escaped.add(jsScope.getVar(name));\n        }\n      }",
    "begin_line": 553,
    "end_line": 563,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DependencyOptions.setDependencySorting#55",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DependencyOptions.java",
    "class_name": "com.google.javascript.jscomp.DependencyOptions",
    "signature": "com.google.javascript.jscomp.DependencyOptions.setDependencySorting(boolean)",
    "snippet": "public DependencyOptions setDependencySorting(boolean enabled) {\n    this.sortDependencies \u003d enabled;\n    return this;\n  }",
    "begin_line": 55,
    "end_line": 58,
    "comment": "/** \n * Enables or disables dependency sorting mode. If true, we will sort the input files based on dependency information in them. Otherwise, we will use the order of files specified on the command-line.\n * @return this for easy building.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DependencyOptions.setDependencyPruning#72",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DependencyOptions.java",
    "class_name": "com.google.javascript.jscomp.DependencyOptions",
    "signature": "com.google.javascript.jscomp.DependencyOptions.setDependencyPruning(boolean)",
    "snippet": "public DependencyOptions setDependencyPruning(boolean enabled) {\n    this.pruneDependencies \u003d enabled;\n    return this;\n  }",
    "begin_line": 72,
    "end_line": 75,
    "comment": "/** \n * Enables or disables dependency pruning mode. In dependency pruning mode, we will look for all files that provide a symbol. Unless that file is a transitive dependency of a file that we\u0027re using, we will remove it from the compilation job. This does not affect how we handle files that do not provide symbols. See setMoocherDropping for information on how these are handled.\n * @return this for easy chaining.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DependencyOptions.setMoocherDropping#95",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DependencyOptions.java",
    "class_name": "com.google.javascript.jscomp.DependencyOptions",
    "signature": "com.google.javascript.jscomp.DependencyOptions.setMoocherDropping(boolean)",
    "snippet": "public DependencyOptions setMoocherDropping(boolean enabled) {\n    this.dropMoochers \u003d enabled;\n    return this;\n  }",
    "begin_line": 95,
    "end_line": 98,
    "comment": "/** \n * Enables or disables moocher dropping mode. A \u0027moocher\u0027 is a file that does not provide any symbols (though they may require symbols). This is usually because they don\u0027t want to tie themselves to a particular dependency system (e.g., Closure\u0027s goog.provide, CommonJS modules). So they rely on other people to manage dependencies on them. If true, we drop these files when we prune dependencies. If false, we always keep these files an anything they depend on. The default is false. Notice that this option only makes sense if dependency pruning is on, and a set of entry points is specified.\n * @return this for easy chaining.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DependencyOptions.setEntryPoints#112",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DependencyOptions.java",
    "class_name": "com.google.javascript.jscomp.DependencyOptions",
    "signature": "com.google.javascript.jscomp.DependencyOptions.setEntryPoints(java.util.Collection\u003cjava.lang.String\u003e)",
    "snippet": "public DependencyOptions setEntryPoints(Collection\u003cString\u003e symbols) {\n    entryPoints.clear();\n    entryPoints.addAll(symbols);\n    return this;\n  }",
    "begin_line": 112,
    "end_line": 116,
    "comment": "/** \n * Adds a collection of symbols to always keep. In dependency pruning mode, we will automatically keep all the transitive dependencies of these symbols. The syntactic form of a symbol depends on the type of dependency primitives we\u0027re using. For example, goog.provide(\u0027foo.bar\u0027) provides the symbol \u0027foo.bar\u0027.\n * @return this for easy chaining.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DependencyOptions.needsManagement#119",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DependencyOptions.java",
    "class_name": "com.google.javascript.jscomp.DependencyOptions",
    "signature": "com.google.javascript.jscomp.DependencyOptions.needsManagement()",
    "snippet": "boolean needsManagement() {\n    return sortDependencies || pruneDependencies;\n  }",
    "begin_line": 119,
    "end_line": 121,
    "comment": "/** \n * Returns whether re-ordering of files is needed. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DependencyOptions.shouldSortDependencies#123",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DependencyOptions.java",
    "class_name": "com.google.javascript.jscomp.DependencyOptions",
    "signature": "com.google.javascript.jscomp.DependencyOptions.shouldSortDependencies()",
    "snippet": "boolean shouldSortDependencies() {\n    return sortDependencies;\n  }",
    "begin_line": 123,
    "end_line": 125,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DependencyOptions.shouldPruneDependencies#127",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DependencyOptions.java",
    "class_name": "com.google.javascript.jscomp.DependencyOptions",
    "signature": "com.google.javascript.jscomp.DependencyOptions.shouldPruneDependencies()",
    "snippet": "boolean shouldPruneDependencies() {\n    return pruneDependencies;\n  }",
    "begin_line": 127,
    "end_line": 129,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DependencyOptions.shouldDropMoochers#131",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DependencyOptions.java",
    "class_name": "com.google.javascript.jscomp.DependencyOptions",
    "signature": "com.google.javascript.jscomp.DependencyOptions.shouldDropMoochers()",
    "snippet": "boolean shouldDropMoochers() {\n    return pruneDependencies \u0026\u0026 dropMoochers;\n  }",
    "begin_line": 131,
    "end_line": 133,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DependencyOptions.getEntryPoints#135",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DependencyOptions.java",
    "class_name": "com.google.javascript.jscomp.DependencyOptions",
    "signature": "com.google.javascript.jscomp.DependencyOptions.getEntryPoints()",
    "snippet": "Collection\u003cString\u003e getEntryPoints() {\n    return entryPoints;\n  }",
    "begin_line": 135,
    "end_line": 137,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroup.DiagnosticGroup#45",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroup.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
    "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
    "snippet": " DiagnosticGroup(String name, DiagnosticType ...types) {\n    this.name \u003d name;\n    this.types \u003d ImmutableSet.copyOf(Arrays.asList(types));\n  }",
    "begin_line": 45,
    "end_line": 48,
    "comment": "/** \n * Create a group that matches all errors of the given types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroup.DiagnosticGroup#53",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroup.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
    "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(com.google.javascript.jscomp.DiagnosticType)",
    "snippet": "public DiagnosticGroup(DiagnosticType ...types) {\n    this(null, types);\n  }",
    "begin_line": 53,
    "end_line": 55,
    "comment": "/** \n * Create a group that matches all errors of the given types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroup.DiagnosticGroup#60",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroup.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
    "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(com.google.javascript.jscomp.DiagnosticType)",
    "snippet": "private DiagnosticGroup(DiagnosticType type) {\n    this.name \u003d null;\n    this.types \u003d ImmutableSet.of(type);\n  }",
    "begin_line": 60,
    "end_line": 63,
    "comment": "/** \n * Create a diagnostic group with no name that only matches the given type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroup.forType#70",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroup.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
    "signature": "com.google.javascript.jscomp.DiagnosticGroup.forType(com.google.javascript.jscomp.DiagnosticType)",
    "snippet": "public static DiagnosticGroup forType(DiagnosticType type) {\n    if (!singletons.containsKey(type)) {\n      singletons.put(type, new DiagnosticGroup(type));\n    }\n    return singletons.get(type);\n  }",
    "begin_line": 70,
    "end_line": 75,
    "comment": "/** \n * Create a diagnostic group that matches only the given type. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroup.DiagnosticGroup#80",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroup.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
    "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(com.google.javascript.jscomp.DiagnosticGroup)",
    "snippet": "public DiagnosticGroup(DiagnosticGroup ...groups) {\n    this(null, groups);\n  }",
    "begin_line": 80,
    "end_line": 82,
    "comment": "/** \n * Create a composite group.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroup.DiagnosticGroup#87",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroup.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
    "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup)",
    "snippet": "public DiagnosticGroup(String name, DiagnosticGroup ...groups) {\n    Set\u003cDiagnosticType\u003e set \u003d Sets.newHashSet();\n\n    for (DiagnosticGroup group : groups) {\n      set.addAll(group.types);\n    }\n\n    this.name \u003d name;\n    this.types \u003d ImmutableSet.copyOf(set);\n  }",
    "begin_line": 87,
    "end_line": 96,
    "comment": "/** \n * Create a composite group.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroup.matches#102",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroup.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
    "signature": "com.google.javascript.jscomp.DiagnosticGroup.matches(com.google.javascript.jscomp.JSError)",
    "snippet": "public boolean matches(JSError error) {\n    return matches(error.getType());\n  }",
    "begin_line": 102,
    "end_line": 104,
    "comment": "/** \n * Returns whether the given error\u0027s type matches a type in this group.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroup.matches#109",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroup.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
    "signature": "com.google.javascript.jscomp.DiagnosticGroup.matches(com.google.javascript.jscomp.DiagnosticType)",
    "snippet": "public boolean matches(DiagnosticType type) {\n    return types.contains(type);\n  }",
    "begin_line": 109,
    "end_line": 111,
    "comment": "/** \n * Returns whether the given type matches a type in this group.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroup.isSubGroup#116",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroup.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
    "signature": "com.google.javascript.jscomp.DiagnosticGroup.isSubGroup(com.google.javascript.jscomp.DiagnosticGroup)",
    "snippet": "boolean isSubGroup(DiagnosticGroup group) {\n    for (DiagnosticType type : group.types) {\n      if (!matches(type)) {\n        return false;\n      }\n    }\n    return true;\n  }",
    "begin_line": 116,
    "end_line": 123,
    "comment": "/** \n * Returns whether all of the types in the given group are in this group.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroup.getTypes#128",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroup.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
    "signature": "com.google.javascript.jscomp.DiagnosticGroup.getTypes()",
    "snippet": "public Iterable\u003cDiagnosticType\u003e getTypes() {\n    return types;\n  }",
    "begin_line": 128,
    "end_line": 130,
    "comment": "/** \n * Returns an iterable over all the types in this group.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroup.toString#133",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroup.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
    "signature": "com.google.javascript.jscomp.DiagnosticGroup.toString()",
    "snippet": "@Override\n  public String toString() {\n    return name \u003d\u003d null ? super.toString() : \"DiagnosticGroup\u003c\" + name + \"\u003e\";\n  }",
    "begin_line": 133,
    "end_line": 135,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroupWarningsGuard.DiagnosticGroupWarningsGuard#32",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
    "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.DiagnosticGroupWarningsGuard(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel)",
    "snippet": "public DiagnosticGroupWarningsGuard(\n      DiagnosticGroup group, CheckLevel level) {\n    this.group \u003d group;\n    this.level \u003d level;\n  }",
    "begin_line": 32,
    "end_line": 36,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroupWarningsGuard.level#39",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
    "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.level(com.google.javascript.jscomp.JSError)",
    "snippet": "@Override\n  public CheckLevel level(JSError error) {\n    return group.matches(error) ? level : null;\n  }",
    "begin_line": 39,
    "end_line": 41,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroupWarningsGuard.disables#44",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
    "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.disables(com.google.javascript.jscomp.DiagnosticGroup)",
    "snippet": "@Override\n  public boolean disables(DiagnosticGroup otherGroup) {\n    return !level.isOn() \u0026\u0026 group.isSubGroup(otherGroup);\n  }",
    "begin_line": 44,
    "end_line": 46,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroupWarningsGuard.enables#49",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
    "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
    "snippet": "@Override\n  public boolean enables(DiagnosticGroup otherGroup) {\n    if (level.isOn()) {\n      for (DiagnosticType type : otherGroup.getTypes()) {\n        if (group.matches(type)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }",
    "begin_line": 49,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroupWarningsGuard.toString#62",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
    "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.toString()",
    "snippet": "@Override\n  public String toString() {\n    return group + \"(\" + level + \")\";\n  }",
    "begin_line": 62,
    "end_line": 64,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroups.DiagnosticGroups#33",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroups.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
    "signature": "com.google.javascript.jscomp.DiagnosticGroups.DiagnosticGroups()",
    "snippet": "public DiagnosticGroups() {}",
    "begin_line": 33,
    "end_line": 33,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroups.registerDeprecatedGroup#38",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroups.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
    "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerDeprecatedGroup(java.lang.String)",
    "snippet": "static DiagnosticGroup registerDeprecatedGroup(String name) {\n    return registerGroup(name, new DiagnosticGroup(name, UNUSED));\n  }",
    "begin_line": 38,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroups.registerGroup#42",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroups.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
    "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup)",
    "snippet": "static DiagnosticGroup registerGroup(String name,\n      DiagnosticGroup group) {\n    groupsByName.put(name, group);\n    return group;\n  }",
    "begin_line": 42,
    "end_line": 46,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroups.registerGroup#48",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroups.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
    "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
    "snippet": "static DiagnosticGroup registerGroup(String name,\n      DiagnosticType ... types) {\n    DiagnosticGroup group \u003d new DiagnosticGroup(name, types);\n    groupsByName.put(name, group);\n    return group;\n  }",
    "begin_line": 48,
    "end_line": 53,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroups.registerGroup#55",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroups.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
    "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup)",
    "snippet": "static DiagnosticGroup registerGroup(String name,\n      DiagnosticGroup ... groups) {\n    DiagnosticGroup group \u003d new DiagnosticGroup(name, groups);\n    groupsByName.put(name, group);\n    return group;\n  }",
    "begin_line": 55,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroups.getRegisteredGroups#63",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroups.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
    "signature": "com.google.javascript.jscomp.DiagnosticGroups.getRegisteredGroups()",
    "snippet": "protected Map\u003cString, DiagnosticGroup\u003e getRegisteredGroups() {\n    return ImmutableMap.copyOf(groupsByName);\n  }",
    "begin_line": 63,
    "end_line": 65,
    "comment": "/** \n * Get the registered diagnostic groups, indexed by name. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroups.forName#68",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroups.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
    "signature": "com.google.javascript.jscomp.DiagnosticGroups.forName(java.lang.String)",
    "snippet": "public DiagnosticGroup forName(String name) {\n    return groupsByName.get(name);\n  }",
    "begin_line": 68,
    "end_line": 70,
    "comment": "/** \n * Find the diagnostic group registered under the given name. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticGroups.setWarningLevel#249",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticGroups.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
    "signature": "com.google.javascript.jscomp.DiagnosticGroups.setWarningLevel(com.google.javascript.jscomp.CompilerOptions, java.lang.String, com.google.javascript.jscomp.CheckLevel)",
    "snippet": "void setWarningLevel(CompilerOptions options,\n      String name, CheckLevel level) {\n    DiagnosticGroup group \u003d forName(name);\n    Preconditions.checkNotNull(group, \"No warning class for name: %s\", name);\n    options.setWarningLevel(group, level);\n  }",
    "begin_line": 249,
    "end_line": 254,
    "comment": "/** \n * Adds warning levels by name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticType.error#53",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticType.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticType",
    "signature": "com.google.javascript.jscomp.DiagnosticType.error(java.lang.String, java.lang.String)",
    "snippet": "public static DiagnosticType error(String name, String descriptionFormat) {\n    return make(name, CheckLevel.ERROR, descriptionFormat);\n  }",
    "begin_line": 53,
    "end_line": 55,
    "comment": "/** \n * Create a DiagnosticType at level CheckLevel.ERROR\n * @param name An identifier\n * @param descriptionFormat A format string\n * @return A new DiagnosticType\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticType.warning#64",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticType.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticType",
    "signature": "com.google.javascript.jscomp.DiagnosticType.warning(java.lang.String, java.lang.String)",
    "snippet": "public static DiagnosticType warning(String name, String descriptionFormat) {\n    return make(name, CheckLevel.WARNING, descriptionFormat);\n  }",
    "begin_line": 64,
    "end_line": 66,
    "comment": "/** \n * Create a DiagnosticType at level CheckLevel.WARNING\n * @param name An identifier\n * @param descriptionFormat A format string\n * @return A new DiagnosticType\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticType.disabled#75",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticType.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticType",
    "signature": "com.google.javascript.jscomp.DiagnosticType.disabled(java.lang.String, java.lang.String)",
    "snippet": "public static DiagnosticType disabled(String name,\n      String descriptionFormat) {\n    return make(name, CheckLevel.OFF, descriptionFormat);\n  }",
    "begin_line": 75,
    "end_line": 78,
    "comment": "/** \n * Create a DiagnosticType at level CheckLevel.OFF\n * @param name An identifier\n * @param descriptionFormat A format string\n * @return A new DiagnosticType\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticType.make#88",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticType.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticType",
    "signature": "com.google.javascript.jscomp.DiagnosticType.make(java.lang.String, com.google.javascript.jscomp.CheckLevel, java.lang.String)",
    "snippet": "public static DiagnosticType make(String name, CheckLevel level,\n                                    String descriptionFormat) {\n    return\n        new DiagnosticType(name, level, new MessageFormat(descriptionFormat));\n  }",
    "begin_line": 88,
    "end_line": 92,
    "comment": "/** \n * Create a DiagnosticType at a given CheckLevel.\n * @param name An identifier\n * @param level Either CheckLevel.ERROR or CheckLevel.WARNING\n * @param descriptionFormat A format string\n * @return A new DiagnosticType\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticType.DiagnosticType#97",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticType.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticType",
    "signature": "com.google.javascript.jscomp.DiagnosticType.DiagnosticType(java.lang.String, com.google.javascript.jscomp.CheckLevel, java.text.MessageFormat)",
    "snippet": "private DiagnosticType(String key, CheckLevel level, MessageFormat format) {\n    this.key \u003d key;\n    this.defaultLevel \u003d level;\n    this.format \u003d format;\n\n    this.level \u003d this.defaultLevel;\n  }",
    "begin_line": 97,
    "end_line": 103,
    "comment": "/** \n * Create a DiagnosticType. Private to force use of static factory methods.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticType.format#109",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticType.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticType",
    "signature": "com.google.javascript.jscomp.DiagnosticType.format(java.lang.Object)",
    "snippet": "String format(Object ... arguments) {\n    return format.format(arguments);\n  }",
    "begin_line": 109,
    "end_line": 111,
    "comment": "/** \n * Create a description from the MessageFormat and the arguments. Used by unit tests.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticType.equals#114",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticType.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticType",
    "signature": "com.google.javascript.jscomp.DiagnosticType.equals(java.lang.Object)",
    "snippet": "@Override\n  public boolean equals(Object type) {\n    return type instanceof DiagnosticType \u0026\u0026\n        ((DiagnosticType) type).key.equals(key);\n  }",
    "begin_line": 114,
    "end_line": 117,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticType.hashCode#120",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticType.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticType",
    "signature": "com.google.javascript.jscomp.DiagnosticType.hashCode()",
    "snippet": "@Override\n  public int hashCode() {\n    return key.hashCode();\n  }",
    "begin_line": 120,
    "end_line": 122,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticType.compareTo#125",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticType.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticType",
    "signature": "com.google.javascript.jscomp.DiagnosticType.compareTo(com.google.javascript.jscomp.DiagnosticType)",
    "snippet": "@Override\n  public int compareTo(DiagnosticType diagnosticType) {\n    return key.compareTo(diagnosticType.key);\n  }",
    "begin_line": 125,
    "end_line": 127,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiagnosticType.toString#130",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DiagnosticType.java",
    "class_name": "com.google.javascript.jscomp.DiagnosticType",
    "signature": "com.google.javascript.jscomp.DiagnosticType.toString()",
    "snippet": "@Override\n  public String toString() {\n    return key + \": \" + format.toPattern();\n  }",
    "begin_line": 130,
    "end_line": 132,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.Property#143",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.Property(java.lang.String)",
    "snippet": " Property(String name) {\n      this.name \u003d name;\n    }",
    "begin_line": 143,
    "end_line": 145,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.getTypes#148",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getTypes()",
    "snippet": "UnionFind\u003cT\u003e getTypes() {\n      if (types \u003d\u003d null) {\n        types \u003d new StandardUnionFind\u003cT\u003e();\n      }\n      return types;\n    }",
    "begin_line": 148,
    "end_line": 153,
    "comment": "/** \n * Returns the types on which this field is referenced. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.addType#160",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.addType(T, T, T)",
    "snippet": "boolean addType(T type, T top, T relatedType) {\n      checkState(!skipRenaming, \"Attempt to record skipped property: %s\", name);\n      if (typeSystem.isInvalidatingType(top)) {\n        invalidate();\n        return false;\n      } else {\n        if (typeSystem.isTypeToSkip(top)) {\n          addTypeToSkip(top);\n        }\n\n        if (relatedType \u003d\u003d null) {\n          getTypes().add(top);\n        } else {\n          getTypes().union(top, relatedType);\n        }\n        typeSystem.recordInterfaces(type, top, this);\n        return true;\n      }\n    }",
    "begin_line": 160,
    "end_line": 178,
    "comment": "/** \n * Record that this property is referenced from this type.\n * @return true if the type was recorded for this property, else false,which would happen if the type was invalidating.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.addTypeToSkip#181",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.addTypeToSkip(T)",
    "snippet": "void addTypeToSkip(T type) {\n      for (T skipType : typeSystem.getTypesToSkipForType(type)) {\n        typesToSkip.add(skipType);\n        getTypes().union(skipType, type);\n      }\n    }",
    "begin_line": 181,
    "end_line": 186,
    "comment": "/** \n * Records the given type as one to skip for this property. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.expandTypesToSkip#189",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.expandTypesToSkip()",
    "snippet": "void expandTypesToSkip() {\n      // If we are not going to rename any properties, then we do not need to\n      // update the list of invalid types, as they are all invalid.\n      if (shouldRename()) {\n        int count \u003d 0;\n        while (true) {\n          // It should usually only take one time through this do-while.\n          checkState(++count \u003c 10, \"Stuck in loop expanding types to skip.\");\n\n          // Make sure that the representative type for each type to skip is\n          // marked as being skipped.\n          Set\u003cT\u003e rootTypesToSkip \u003d Sets.newHashSet();\n          for (T subType : typesToSkip) {\n            rootTypesToSkip.add(types.find(subType));\n          }\n          typesToSkip.addAll(rootTypesToSkip);\n\n          Set\u003cT\u003e newTypesToSkip \u003d Sets.newHashSet();\n          Set\u003cT\u003e allTypes \u003d types.elements();\n          int originalTypesSize \u003d allTypes.size();\n          for (T subType : allTypes) {\n            if (!typesToSkip.contains(subType)\n                \u0026\u0026 typesToSkip.contains(types.find(subType))) {\n              newTypesToSkip.add(subType);\n            }\n          }\n\n          for (T newType : newTypesToSkip) {\n            addTypeToSkip(newType);\n          }\n\n          // If there were not any new types added, we are done here.\n          if (types.elements().size() \u003d\u003d originalTypesSize) {\n            break;\n          }\n        }\n      }\n    }",
    "begin_line": 189,
    "end_line": 226,
    "comment": "/** \n * Invalidates any types related to invalid types. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.shouldRename#229",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.shouldRename()",
    "snippet": "boolean shouldRename() {\n      return !skipRenaming \u0026\u0026 types !\u003d null\n          \u0026\u0026 types.allEquivalenceClasses().size() \u003e 1;\n    }",
    "begin_line": 229,
    "end_line": 232,
    "comment": "/** \n * Returns true if any instance of this property should be renamed. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.shouldRename#239",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.shouldRename(T)",
    "snippet": "boolean shouldRename(T type) {\n      return !skipRenaming \u0026\u0026 !typesToSkip.contains(type);\n    }",
    "begin_line": 239,
    "end_line": 241,
    "comment": "/** \n * Returns true if this property should be renamed on this type. expandTypesToSkip() should be called before this, if anything has been added to the typesToSkip list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.invalidate#247",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.invalidate()",
    "snippet": "boolean invalidate() {\n      boolean changed \u003d !skipRenaming;\n      skipRenaming \u003d true;\n      types \u003d null;\n      return changed;\n    }",
    "begin_line": 247,
    "end_line": 252,
    "comment": "/** \n * Invalidates a field from renaming.  Used for field references on an object with unknown type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.scheduleRenaming#263",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.scheduleRenaming(com.google.javascript.rhino.Node, T)",
    "snippet": "boolean scheduleRenaming(Node node, T type) {\n      if (!skipRenaming) {\n        if (typeSystem.isInvalidatingType(type)) {\n          invalidate();\n          return false;\n        }\n        renameNodes.add(node);\n        rootTypes.put(node, type);\n      }\n      return true;\n    }",
    "begin_line": 263,
    "end_line": 273,
    "comment": "/** \n * Schedule the node to potentially be renamed.\n * @param node the node to rename\n * @param type the highest type in the prototype chain for which theproperty is defined\n * @return True if type was accepted without invalidation or if the propertywas already invalidated.  False if this property was invalidated this time.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.forJSTypeSystem#278",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.forJSTypeSystem(com.google.javascript.jscomp.AbstractCompiler, java.util.Map\u003cjava.lang.String,com.google.javascript.jscomp.CheckLevel\u003e)",
    "snippet": "static DisambiguateProperties\u003cJSType\u003e forJSTypeSystem(\n      AbstractCompiler compiler,\n      Map\u003cString, CheckLevel\u003e propertiesToErrorFor) {\n    return new DisambiguateProperties\u003cJSType\u003e(\n        compiler, new JSTypeSystem(compiler), propertiesToErrorFor);\n  }",
    "begin_line": 278,
    "end_line": 283,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.forConcreteTypeSystem#285",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.forConcreteTypeSystem(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.TightenTypes, java.util.Map\u003cjava.lang.String,com.google.javascript.jscomp.CheckLevel\u003e)",
    "snippet": "static DisambiguateProperties\u003cConcreteType\u003e forConcreteTypeSystem(\n      AbstractCompiler compiler, TightenTypes tt,\n      Map\u003cString, CheckLevel\u003e propertiesToErrorFor) {\n    return new DisambiguateProperties\u003cConcreteType\u003e(\n        compiler, new ConcreteTypeSystem(tt, compiler.getCodingConvention()),\n            propertiesToErrorFor);\n  }",
    "begin_line": 285,
    "end_line": 291,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.DisambiguateProperties#297",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.DisambiguateProperties(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.DisambiguateProperties.TypeSystem\u003cT\u003e, java.util.Map\u003cjava.lang.String,com.google.javascript.jscomp.CheckLevel\u003e)",
    "snippet": "private DisambiguateProperties(AbstractCompiler compiler,\n      TypeSystem\u003cT\u003e typeSystem, Map\u003cString, CheckLevel\u003e propertiesToErrorFor) {\n    this.compiler \u003d compiler;\n    this.typeSystem \u003d typeSystem;\n    this.propertiesToErrorFor \u003d propertiesToErrorFor;\n    if (!this.propertiesToErrorFor.isEmpty()) {\n      this.invalidationMap \u003d LinkedHashMultimap.create();\n    } else {\n      this.invalidationMap \u003d null;\n    }\n  }",
    "begin_line": 297,
    "end_line": 307,
    "comment": "/** \n * This constructor should only be called by one of the helper functions above for either the JSType system, or the concrete type system.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.process#310",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void process(Node externs, Node root) {\n    Preconditions.checkState(\n        compiler.getLifeCycleStage() \u003d\u003d LifeCycleStage.NORMALIZED);\n    for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) {\n      addInvalidatingType(mis.typeA, mis.src);\n      addInvalidatingType(mis.typeB, mis.src);\n    }\n\n    StaticScope\u003cT\u003e scope \u003d typeSystem.getRootScope();\n    NodeTraversal.traverse(compiler, externs, new FindExternProperties());\n    NodeTraversal.traverse(compiler, root, new FindRenameableProperties());\n    renameProperties();\n  }",
    "begin_line": 310,
    "end_line": 322,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.recordInvalidationError#324",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.recordInvalidationError(com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.JSError)",
    "snippet": "private void recordInvalidationError(JSType t, JSError error) {\n    if (!t.isObject()) {\n      return;\n    }\n    if (invalidationMap !\u003d null) {\n      invalidationMap.put(t, error);\n    }\n  }",
    "begin_line": 324,
    "end_line": 331,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.addInvalidatingType#336",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.addInvalidatingType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.JSError)",
    "snippet": "private void addInvalidatingType(JSType type, JSError error) {\n    type \u003d type.restrictByNotNullOrUndefined();\n    if (type.isUnionType()) {\n      for (JSType alt : type.toMaybeUnionType().getAlternates()) {\n        addInvalidatingType(alt, error);\n      }\n    } else if (type.isEnumElementType()) {\n      addInvalidatingType(\n          type.toMaybeEnumElementType().getPrimitiveType(), error);\n    } else {\n      typeSystem.addInvalidatingType(type);\n      recordInvalidationError(type, error);\n      ObjectType objType \u003d ObjectType.cast(type);\n      if (objType !\u003d null \u0026\u0026 objType.getImplicitPrototype() !\u003d null) {\n        typeSystem.addInvalidatingType(objType.getImplicitPrototype());\n        recordInvalidationError(objType.getImplicitPrototype(), error);\n      }\n    }\n  }",
    "begin_line": 336,
    "end_line": 354,
    "comment": "/** \n * Invalidates the given type, so that no properties on it will be renamed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.getProperty#358",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getProperty(java.lang.String)",
    "snippet": "protected Property getProperty(String name) {\n    if (!properties.containsKey(name)) {\n      properties.put(name, new Property(name));\n    }\n    return properties.get(name);\n  }",
    "begin_line": 358,
    "end_line": 363,
    "comment": "/** \n * Returns the property for the given name, creating it if necessary. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.getTypeWithProperty#366",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getTypeWithProperty(java.lang.String, T)",
    "snippet": "T getTypeWithProperty(String field, T type) {\n    return typeSystem.getTypeWithProperty(field, type);\n  }",
    "begin_line": 366,
    "end_line": 368,
    "comment": "/** \n * Public for testing. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopingCallback.shouldTraverse#376",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      return true;\n    }",
    "begin_line": 376,
    "end_line": 378,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopingCallback.enterScope#381",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.enterScope(com.google.javascript.jscomp.NodeTraversal)",
    "snippet": "@Override\n    public void enterScope(NodeTraversal t) {\n      if (t.inGlobalScope()) {\n        scopes.push(typeSystem.getRootScope());\n      } else {\n        scopes.push(typeSystem.getFunctionScope(t.getScopeRoot()));\n      }\n    }",
    "begin_line": 381,
    "end_line": 387,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopingCallback.exitScope#390",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.exitScope(com.google.javascript.jscomp.NodeTraversal)",
    "snippet": "@Override\n    public void exitScope(NodeTraversal t) {\n      scopes.pop();\n    }",
    "begin_line": 390,
    "end_line": 392,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopingCallback.getScope#395",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getScope()",
    "snippet": "protected StaticScope\u003cT\u003e getScope() {\n      return scopes.peek();\n    }",
    "begin_line": 395,
    "end_line": 397,
    "comment": "/** \n * Returns the current scope at this point in the file. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FindExternProperties.visit#405",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n      // TODO(johnlenz): Support object-literal property definitions.\n      if (n.isGetProp()) {\n        String field \u003d n.getLastChild().getString();\n        T type \u003d typeSystem.getType(getScope(), n.getFirstChild(), field);\n        Property prop \u003d getProperty(field);\n        if (typeSystem.isInvalidatingType(type)) {\n          prop.invalidate();\n        } else {\n          prop.addTypeToSkip(type);\n\n          // If this is a prototype property, then we want to skip assignments\n          // to the instance type as well.  These assignments are not usually\n          // seen in the extern code itself, so we must handle them here.\n          if ((type \u003d typeSystem.getInstanceFromPrototype(type)) !\u003d null) {\n            prop.getTypes().add(type);\n            prop.typesToSkip.add(type);\n          }\n        }\n      }\n    }",
    "begin_line": 405,
    "end_line": 425,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FindRenameableProperties.visit#434",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isGetProp()) {\n        handleGetProp(t, n);\n      } else if (n.isObjectLit()) {\n        handleObjectLit(t, n);\n      }\n    }",
    "begin_line": 434,
    "end_line": 440,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FindRenameableProperties.handleGetProp#445",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.handleGetProp(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void handleGetProp(NodeTraversal t, Node n) {\n      String name \u003d n.getLastChild().getString();\n      T type \u003d typeSystem.getType(getScope(), n.getFirstChild(), name);\n\n      Property prop \u003d getProperty(name);\n      if (!prop.scheduleRenaming(n.getLastChild(),\n                                 processProperty(t, prop, type, null))) {\n        if (propertiesToErrorFor.containsKey(name)) {\n          String suggestion \u003d \"\";\n          if (type instanceof JSType) {\n            JSType jsType \u003d (JSType) type;\n            if (jsType.isAllType() || jsType.isUnknownType()) {\n              if (n.getFirstChild().isThis()) {\n                suggestion \u003d \"The \\\"this\\\" object is unknown in the function,\"+\n                    \"consider using @this\";\n              } else {\n                String qName \u003d n.getFirstChild().getQualifiedName();\n                suggestion \u003d \"Consider casting \" + qName +\n                    \" if you know it\u0027s type.\";\n              }\n            } else {\n              List\u003cString\u003e errors \u003d Lists.newArrayList();\n              printErrorLocations(errors, jsType);\n              if (!errors.isEmpty()) {\n                suggestion \u003d \"Consider fixing errors for the following types:\\n\";\n                suggestion +\u003d Joiner.on(\"\\n\").join(errors);\n              }\n            }\n          }\n          compiler.report(JSError.make(\n              t.getSourceName(), n, propertiesToErrorFor.get(name),\n              Warnings.INVALIDATION, name,\n              (type \u003d\u003d null ? \"null\" : type.toString()),\n              n.toString(), suggestion));\n        }\n      }\n    }",
    "begin_line": 445,
    "end_line": 481,
    "comment": "/** \n * Processes a GETPROP node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FindRenameableProperties.handleObjectLit#486",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.handleObjectLit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void handleObjectLit(NodeTraversal t, Node n) {\n      Node child \u003d n.getFirstChild();\n      while (child !\u003d null) {\n        // Maybe STRING, GET, SET\n\n        // We should never see a mix of numbers and strings.\n        String name \u003d child.getString();\n        T type \u003d typeSystem.getType(getScope(), n, name);\n\n        Property prop \u003d getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn\u0027t look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type \u003d\u003d null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n        child \u003d child.getNext();\n      }\n    }",
    "begin_line": 486,
    "end_line": 509,
    "comment": "/** \n * Processes a OBJECTLIT node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FindRenameableProperties.printErrorLocations#511",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.printErrorLocations(java.util.List\u003cjava.lang.String\u003e, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private void printErrorLocations(List\u003cString\u003e errors, JSType t) {\n      if (!t.isObject() || t.isAllType()) {\n        return;\n      }\n\n      if (t.isUnionType()) {\n        for (JSType alt : t.toMaybeUnionType().getAlternates()) {\n          printErrorLocations(errors, alt);\n        }\n        return;\n      }\n\n      for (JSError error : invalidationMap.get(t)) {\n        if (errors.size() \u003e MAX_INVALDIATION_WARNINGS_PER_PROPERTY) {\n          return;\n        }\n\n        errors.add(\n            t.toString() + \" at \" + error.sourceName + \":\" + error.lineNumber);\n      }\n    }",
    "begin_line": 511,
    "end_line": 531,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FindRenameableProperties.processProperty#540",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.processProperty(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.jscomp.DisambiguateProperties\u003cT\u003e.Property, T, T)",
    "snippet": "private T processProperty(\n        NodeTraversal t, Property prop, T type, T relatedType) {\n      type \u003d typeSystem.restrictByNotNullOrUndefined(type);\n      if (prop.skipRenaming || typeSystem.isInvalidatingType(type)) {\n        return null;\n      }\n\n      Iterable\u003cT\u003e alternatives \u003d typeSystem.getTypeAlternatives(type);\n      if (alternatives !\u003d null) {\n        T firstType \u003d relatedType;\n        for (T subType : alternatives) {\n          T lastType \u003d processProperty(t, prop, subType, firstType);\n          if (lastType !\u003d null) {\n            firstType \u003d firstType \u003d\u003d null ? lastType : firstType;\n          }\n        }\n        return firstType;\n      } else {\n        T topType \u003d typeSystem.getTypeWithProperty(prop.name, type);\n        if (typeSystem.isInvalidatingType(topType)) {\n          return null;\n        }\n        prop.addType(type, topType, relatedType);\n        return topType;\n      }\n    }",
    "begin_line": 540,
    "end_line": 565,
    "comment": "/** \n * Processes a property, adding it to the list of properties to rename.\n * @return a representative type for the property reference, which will bethe highest type on the prototype chain of the provided type.  In the case of a union type, it will be the highest type on the prototype chain of one of the members of the union.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FindRenameableProperties.renameProperties#569",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.renameProperties()",
    "snippet": "void renameProperties() {\n    int propsRenamed \u003d 0, propsSkipped \u003d 0, instancesRenamed \u003d 0,\n        instancesSkipped \u003d 0, singleTypeProps \u003d 0;\n\n    for (Property prop : properties.values()) {\n      if (prop.shouldRename()) {\n        Map\u003cT, String\u003e propNames \u003d buildPropNames(prop.getTypes(), prop.name);\n\n        ++propsRenamed;\n        prop.expandTypesToSkip();\n        UnionFind\u003cT\u003e types \u003d prop.getTypes();\n        for (Node node : prop.renameNodes) {\n          T rootType \u003d prop.rootTypes.get(node);\n          if (prop.shouldRename(rootType)) {\n            String newName \u003d propNames.get(rootType);\n            node.setString(newName);\n            compiler.reportCodeChange();\n            ++instancesRenamed;\n          } else {\n            ++instancesSkipped;\n          }\n        }\n      } else {\n        if (prop.skipRenaming) {\n          ++propsSkipped;\n        } else {\n          ++singleTypeProps;\n        }\n      }\n    }\n    logger.fine(\"Renamed \" + instancesRenamed + \" instances of \"\n                + propsRenamed + \" properties.\");\n    logger.fine(\"Skipped renaming \" + instancesSkipped + \" invalidated \"\n                + \"properties, \" + propsSkipped + \" instances of properties \"\n                + \"that were skipped for specific types and \" + singleTypeProps\n                + \" properties that were referenced from only one type.\");\n  }",
    "begin_line": 569,
    "end_line": 605,
    "comment": "/** \n * Renames all properties with references on more than one type. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FindRenameableProperties.buildPropNames#611",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.buildPropNames(com.google.javascript.jscomp.graph.UnionFind\u003cT\u003e, java.lang.String)",
    "snippet": "private Map\u003cT, String\u003e buildPropNames(UnionFind\u003cT\u003e types, String name) {\n    Map\u003cT, String\u003e names \u003d Maps.newHashMap();\n    for (Set\u003cT\u003e set : types.allEquivalenceClasses()) {\n      checkState(!set.isEmpty());\n\n      String typeName \u003d null;\n      for (T type : set) {\n        if (typeName \u003d\u003d null || type.toString().compareTo(typeName) \u003c 0) {\n          typeName \u003d type.toString();\n        }\n      }\n\n      String newName;\n      if (\"{...}\".equals(typeName)) {\n        newName \u003d name;\n      } else {\n        newName \u003d typeName.replaceAll(\"[^\\\\w$]\", \"_\") + \"$\" + name;\n      }\n\n      for (T type : set) {\n        names.put(type, newName);\n      }\n    }\n    return names;\n  }",
    "begin_line": 611,
    "end_line": 635,
    "comment": "/** \n * Chooses a name to use for renaming in each equivalence class and maps each type in that class to it.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FindRenameableProperties.getRenamedTypesForTesting#638",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getRenamedTypesForTesting()",
    "snippet": "Multimap\u003cString, Collection\u003cT\u003e\u003e getRenamedTypesForTesting() {\n    Multimap\u003cString, Collection\u003cT\u003e\u003e ret \u003d HashMultimap.create();\n    for (Map.Entry\u003cString, Property\u003e entry: properties.entrySet()) {\n      Property prop \u003d entry.getValue();\n      if (!prop.skipRenaming) {\n        for (Collection\u003cT\u003e c : prop.getTypes().allEquivalenceClasses()) {\n          if (!c.isEmpty() \u0026\u0026 !prop.typesToSkip.contains(c.iterator().next())) {\n            ret.put(entry.getKey(), c);\n          }\n        }\n      }\n    }\n    return ret;\n  }",
    "begin_line": 638,
    "end_line": 651,
    "comment": "/** \n * Returns a map from field name to types for which it will be renamed. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSystem.getRootScope#659",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getRootScope()",
    "snippet": "StaticScope\u003cT\u003e getRootScope();",
    "begin_line": 659,
    "end_line": 659,
    "comment": "/** \n * Returns the top-most scope used by the type system (if any). \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSystem.getFunctionScope#662",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getFunctionScope(com.google.javascript.rhino.Node)",
    "snippet": "StaticScope\u003cT\u003e getFunctionScope(Node node);",
    "begin_line": 662,
    "end_line": 662,
    "comment": "/** \n * Returns the new scope started at the given function node. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSystem.getType#672",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getType(com.google.javascript.rhino.jstype.StaticScope\u003cT\u003e, com.google.javascript.rhino.Node, java.lang.String)",
    "snippet": "T getType(StaticScope\u003cT\u003e scope, Node node, String prop);",
    "begin_line": 672,
    "end_line": 672,
    "comment": "/** \n * Returns the type of the given node.\n * @param prop Only types with this property need to be returned. In generalwith type tightening, this will require no special processing, but in the case of an unknown JSType, we might need to add in the native types since we don\u0027t track them, but only if they have the given property.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSystem.isInvalidatingType#680",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.isInvalidatingType(T)",
    "snippet": "boolean isInvalidatingType(T type);",
    "begin_line": 680,
    "end_line": 680,
    "comment": "/** \n * Returns true if a field reference on this type will invalidate all references to that field as candidates for renaming. This is true if the type is unknown or all-inclusive, as variables with such a type could be references to any object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSystem.addInvalidatingType#686",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.addInvalidatingType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "void addInvalidatingType(JSType type);",
    "begin_line": 686,
    "end_line": 686,
    "comment": "/** \n * Informs the given type system that a type is invalidating due to a type mismatch found during type checking.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSystem.getTypesToSkipForType#693",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getTypesToSkipForType(T)",
    "snippet": "ImmutableSet\u003cT\u003e getTypesToSkipForType(T type);",
    "begin_line": 693,
    "end_line": 693,
    "comment": "/** \n * Returns a set of types that should be skipped given the given type. This is necessary for interfaces when using JSTypes, as all super interfaces must also be skipped.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSystem.isTypeToSkip#699",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.isTypeToSkip(T)",
    "snippet": "boolean isTypeToSkip(T type);",
    "begin_line": 699,
    "end_line": 699,
    "comment": "/** \n * Determines whether the given type is one whose properties should not be considered for renaming.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSystem.restrictByNotNullOrUndefined#702",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.restrictByNotNullOrUndefined(T)",
    "snippet": "T restrictByNotNullOrUndefined(T type);",
    "begin_line": 702,
    "end_line": 702,
    "comment": "/** \n * Remove null and undefined from the options in the given type. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSystem.getTypeAlternatives#709",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getTypeAlternatives(T)",
    "snippet": "Iterable\u003cT\u003e getTypeAlternatives(T type);",
    "begin_line": 709,
    "end_line": 709,
    "comment": "/** \n * Returns the alternatives if this is a type that represents multiple types, and null if not. Union and interface types can correspond to multiple other types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSystem.getTypeWithProperty#715",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getTypeWithProperty(java.lang.String, T)",
    "snippet": "T getTypeWithProperty(String field, T type);",
    "begin_line": 715,
    "end_line": 715,
    "comment": "/** \n * Returns the type in the chain from the given type that contains the given field or null if it is not found anywhere.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSystem.getInstanceFromPrototype#721",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getInstanceFromPrototype(T)",
    "snippet": "T getInstanceFromPrototype(T type);",
    "begin_line": 721,
    "end_line": 721,
    "comment": "/** \n * Returns the type of the instance of which this is the prototype or null if this is not a function prototype.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSystem.recordInterfaces#727",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.recordInterfaces(T, T, com.google.javascript.jscomp.DisambiguateProperties\u003cT\u003e.Property)",
    "snippet": "void recordInterfaces(T type, T relatedType,\n                          DisambiguateProperties\u003cT\u003e.Property p);",
    "begin_line": 727,
    "end_line": 728,
    "comment": "/** \n * Records that this property could be referenced from any interface that this type, or any type in its superclass chain, implements.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeSystem.JSTypeSystem#736",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.JSTypeSystem(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "public JSTypeSystem(AbstractCompiler compiler) {\n      registry \u003d compiler.getTypeRegistry();\n      invalidatingTypes \u003d Sets.newHashSet(\n          registry.getNativeType(JSTypeNative.ALL_TYPE),\n          registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n          registry.getNativeType(JSTypeNative.NO_TYPE),\n          registry.getNativeType(JSTypeNative.FUNCTION_PROTOTYPE),\n          registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n          registry.getNativeType(JSTypeNative.OBJECT_PROTOTYPE),\n          registry.getNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE),\n          registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n\n    }",
    "begin_line": 736,
    "end_line": 748,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeSystem.addInvalidatingType#750",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.addInvalidatingType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override public void addInvalidatingType(JSType type) {\n      checkState(!type.isUnionType());\n      invalidatingTypes.add(type);\n    }",
    "begin_line": 750,
    "end_line": 753,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeSystem.getRootScope#755",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getRootScope()",
    "snippet": "@Override public StaticScope\u003cJSType\u003e getRootScope() { return null; }",
    "begin_line": 755,
    "end_line": 755,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeSystem.getFunctionScope#757",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getFunctionScope(com.google.javascript.rhino.Node)",
    "snippet": "@Override public StaticScope\u003cJSType\u003e getFunctionScope(Node node) {\n      return null;\n    }",
    "begin_line": 757,
    "end_line": 759,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeSystem.getType#761",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getType(com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e, com.google.javascript.rhino.Node, java.lang.String)",
    "snippet": "@Override public JSType getType(\n        StaticScope\u003cJSType\u003e scope, Node node, String prop) {\n      if (node.getJSType() \u003d\u003d null) {\n        return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n      }\n      return node.getJSType();\n    }",
    "begin_line": 761,
    "end_line": 767,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeSystem.isInvalidatingType#769",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.isInvalidatingType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override public boolean isInvalidatingType(JSType type) {\n      if (type \u003d\u003d null || invalidatingTypes.contains(type) ||\n          type.isUnknownType() /* unresolved types */) {\n        return true;\n      }\n\n      ObjectType objType \u003d ObjectType.cast(type);\n      return objType !\u003d null \u0026\u0026 !objType.hasReferenceName();\n    }",
    "begin_line": 769,
    "end_line": 777,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeSystem.getTypesToSkipForType#779",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getTypesToSkipForType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override public ImmutableSet\u003cJSType\u003e getTypesToSkipForType(JSType type) {\n      type \u003d type.restrictByNotNullOrUndefined();\n      if (type.isUnionType()) {\n        Set\u003cJSType\u003e types \u003d Sets.newHashSet(type);\n        for (JSType alt : type.toMaybeUnionType().getAlternates()) {\n          types.addAll(getTypesToSkipForTypeNonUnion(type));\n        }\n        return ImmutableSet.copyOf(types);\n      } else if (type.isEnumElementType()) {\n        return getTypesToSkipForType(\n            type.toMaybeEnumElementType().getPrimitiveType());\n      }\n      return ImmutableSet.copyOf(getTypesToSkipForTypeNonUnion(type));\n    }",
    "begin_line": 779,
    "end_line": 792,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeSystem.getTypesToSkipForTypeNonUnion#794",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getTypesToSkipForTypeNonUnion(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private Set\u003cJSType\u003e getTypesToSkipForTypeNonUnion(JSType type) {\n      Set\u003cJSType\u003e types \u003d Sets.newHashSet();\n      JSType skipType \u003d type;\n      while (skipType !\u003d null) {\n        types.add(skipType);\n\n        ObjectType objSkipType \u003d skipType.toObjectType();\n        if (objSkipType !\u003d null) {\n          skipType \u003d objSkipType.getImplicitPrototype();\n        } else {\n          break;\n        }\n      }\n      return types;\n    }",
    "begin_line": 794,
    "end_line": 808,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeSystem.isTypeToSkip#810",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.isTypeToSkip(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override public boolean isTypeToSkip(JSType type) {\n      return type.isEnumType() || (type.autoboxesTo() !\u003d null);\n    }",
    "begin_line": 810,
    "end_line": 812,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeSystem.restrictByNotNullOrUndefined#814",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.restrictByNotNullOrUndefined(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override public JSType restrictByNotNullOrUndefined(JSType type) {\n      return type.restrictByNotNullOrUndefined();\n    }",
    "begin_line": 814,
    "end_line": 816,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeSystem.getTypeAlternatives#818",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getTypeAlternatives(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override public Iterable\u003cJSType\u003e getTypeAlternatives(JSType type) {\n      if (type.isUnionType()) {\n        return type.toMaybeUnionType().getAlternates();\n      } else {\n        ObjectType objType \u003d type.toObjectType();\n        if (objType !\u003d null \u0026\u0026\n            objType.getConstructor() !\u003d null \u0026\u0026\n            objType.getConstructor().isInterface()) {\n          List\u003cJSType\u003e list \u003d Lists.newArrayList();\n          for (FunctionType impl\n                   : registry.getDirectImplementors(objType)) {\n            list.add(impl.getInstanceType());\n          }\n          return list;\n        } else {\n          return null;\n        }\n      }\n    }",
    "begin_line": 818,
    "end_line": 836,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeSystem.getTypeWithProperty#838",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getTypeWithProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override public ObjectType getTypeWithProperty(String field, JSType type) {\n      if (type \u003d\u003d null) {\n        return null;\n      }\n\n      if (type.isEnumElementType()) {\n        return getTypeWithProperty(\n            field, type.toMaybeEnumElementType().getPrimitiveType());\n      }\n\n      if (!(type instanceof ObjectType)) {\n        if (type.autoboxesTo() !\u003d null) {\n          type \u003d type.autoboxesTo();\n        } else {\n          return null;\n        }\n      }\n\n      // Ignore the prototype itself at all times.\n      if (\"prototype\".equals(field)) {\n        return null;\n      }\n\n      // We look up the prototype chain to find the highest place (if any) that\n      // this appears.  This will make references to overridden properties look\n      // like references to the initial property, so they are renamed alike.\n      ObjectType foundType \u003d null;\n      ObjectType objType \u003d ObjectType.cast(type);\n      if (objType !\u003d null \u0026\u0026 objType.getConstructor() !\u003d null\n          \u0026\u0026 objType.getConstructor().isInterface()) {\n        ObjectType topInterface \u003d FunctionType.getTopDefiningInterface(\n            objType, field);\n        if (topInterface !\u003d null \u0026\u0026 topInterface.getConstructor() !\u003d null) {\n          foundType \u003d topInterface.getConstructor().getPrototype();\n        }\n      } else {\n        while (objType !\u003d null \u0026\u0026 objType.getImplicitPrototype() !\u003d objType) {\n          if (objType.hasOwnProperty(field)) {\n            foundType \u003d objType;\n          }\n          objType \u003d objType.getImplicitPrototype();\n        }\n      }\n\n      // If the property does not exist on the referenced type but the original\n      // type is an object type, see if any subtype has the property.\n      if (foundType \u003d\u003d null) {\n        ObjectType maybeType \u003d ObjectType.cast(\n            registry.getGreatestSubtypeWithProperty(type, field));\n        // getGreatestSubtypeWithProperty does not guarantee that the property\n        // is defined on the returned type, it just indicates that it might be,\n        // so we have to double check.\n        if (maybeType !\u003d null \u0026\u0026 maybeType.hasOwnProperty(field)) {\n          foundType \u003d maybeType;\n        }\n      }\n      return foundType;\n    }",
    "begin_line": 838,
    "end_line": 895,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeSystem.getInstanceFromPrototype#897",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getInstanceFromPrototype(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override public JSType getInstanceFromPrototype(JSType type) {\n      if (type.isFunctionPrototypeType()) {\n        ObjectType prototype \u003d (ObjectType) type;\n        FunctionType owner \u003d prototype.getOwnerFunction();\n        if (owner.isConstructor() || owner.isInterface()) {\n          return prototype.getOwnerFunction().getInstanceType();\n        }\n      }\n      return null;\n    }",
    "begin_line": 897,
    "end_line": 906,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeSystem.recordInterfaces#909",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.recordInterfaces(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.DisambiguateProperties\u003ccom.google.javascript.rhino.jstype.JSType\u003e.Property)",
    "snippet": "@Override\n    public void recordInterfaces(JSType type, JSType relatedType,\n                                 DisambiguateProperties\u003cJSType\u003e.Property p) {\n      ObjectType objType \u003d ObjectType.cast(type);\n      if (objType !\u003d null) {\n        FunctionType constructor;\n        if (objType.isFunctionType()) {\n          constructor \u003d objType.toMaybeFunctionType();\n        } else if (objType.isFunctionPrototypeType()) {\n          constructor \u003d objType.getOwnerFunction();\n        } else {\n          constructor \u003d objType.getConstructor();\n        }\n        while (constructor !\u003d null) {\n          for (ObjectType itype : constructor.getImplementedInterfaces()) {\n            JSType top \u003d getTypeWithProperty(p.name, itype);\n            if (top !\u003d null) {\n              p.addType(itype, top, relatedType);\n            } else {\n              recordInterfaces(itype, relatedType, p);\n            }\n\n            // If this interface invalidated this property, return now.\n            if (p.skipRenaming) return;\n          }\n          if (constructor.isInterface() || constructor.isConstructor()) {\n            constructor \u003d constructor.getSuperClassConstructor();\n          } else {\n            constructor \u003d null;\n          }\n        }\n      }\n    }",
    "begin_line": 909,
    "end_line": 940,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteTypeSystem.ConcreteTypeSystem#958",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.ConcreteTypeSystem(com.google.javascript.jscomp.TightenTypes, com.google.javascript.jscomp.CodingConvention)",
    "snippet": "public ConcreteTypeSystem(TightenTypes tt, CodingConvention convention) {\n      this.tt \u003d tt;\n      this.codingConvention \u003d convention;\n    }",
    "begin_line": 958,
    "end_line": 961,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteTypeSystem.addInvalidatingType#963",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.addInvalidatingType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override public void addInvalidatingType(JSType type) {\n      checkState(!type.isUnionType());\n      invalidatingTypes.add(type);\n    }",
    "begin_line": 963,
    "end_line": 966,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteTypeSystem.getRootScope#968",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getRootScope()",
    "snippet": "@Override public StaticScope\u003cConcreteType\u003e getRootScope() {\n      return tt.getTopScope();\n    }",
    "begin_line": 968,
    "end_line": 970,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteTypeSystem.getFunctionScope#972",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getFunctionScope(com.google.javascript.rhino.Node)",
    "snippet": "@Override public StaticScope\u003cConcreteType\u003e getFunctionScope(Node decl) {\n      ConcreteFunctionType func \u003d tt.getConcreteFunction(decl);\n      return (func !\u003d null) ?\n          func.getScope() : (StaticScope\u003cConcreteType\u003e) null;\n    }",
    "begin_line": 972,
    "end_line": 976,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteTypeSystem.getType#979",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getType(com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.jscomp.ConcreteType\u003e, com.google.javascript.rhino.Node, java.lang.String)",
    "snippet": "@Override\n    public ConcreteType getType(\n        StaticScope\u003cConcreteType\u003e scope, Node node, String prop) {\n      if (scope !\u003d null) {\n        ConcreteType c \u003d tt.inferConcreteType(\n            (TightenTypes.ConcreteScope) scope, node);\n        return maybeAddAutoboxes(c, node, prop);\n      } else {\n        return null;\n      }\n    }",
    "begin_line": 979,
    "end_line": 988,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteTypeSystem.maybeAddAutoboxes#995",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.maybeAddAutoboxes(com.google.javascript.jscomp.ConcreteType, com.google.javascript.rhino.Node, java.lang.String)",
    "snippet": "private ConcreteType maybeAddAutoboxes(\n        ConcreteType cType, Node node, String prop) {\n      JSType jsType \u003d node.getJSType();\n      if (jsType \u003d\u003d null) {\n        return cType;\n      } else if (jsType.isUnknownType()) {\n        for (JSTypeNative nativeType : nativeTypes) {\n          ConcreteType concrete \u003d tt.getConcreteInstance(\n              tt.getTypeRegistry().getNativeObjectType(nativeType));\n          if (concrete !\u003d null \u0026\u0026 !concrete.getPropertyType(prop).isNone()) {\n            cType \u003d cType.unionWith(concrete);\n          }\n        }\n        return cType;\n      }\n\n      return maybeAddAutoboxes(cType, jsType, prop);\n    }",
    "begin_line": 995,
    "end_line": 1012,
    "comment": "/** \n * Add concrete types for autoboxing types if necessary. The concrete type system does not track native types, like string, so add them if they are present in the JSType for the node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteTypeSystem.maybeAddAutoboxes#1014",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.maybeAddAutoboxes(com.google.javascript.jscomp.ConcreteType, com.google.javascript.rhino.jstype.JSType, java.lang.String)",
    "snippet": "private ConcreteType maybeAddAutoboxes(\n        ConcreteType cType, JSType jsType, String prop) {\n      jsType \u003d jsType.restrictByNotNullOrUndefined();\n      if (jsType.isUnionType()) {\n        for (JSType alt : jsType.toMaybeUnionType().getAlternates()) {\n          cType \u003d maybeAddAutoboxes(cType, alt, prop);\n        }\n        return cType;\n      } else if (jsType.isEnumElementType()) {\n        return maybeAddAutoboxes(\n            cType, jsType.toMaybeEnumElementType().getPrimitiveType(), prop);\n      }\n\n      if (jsType.autoboxesTo() !\u003d null) {\n        JSType autoboxed \u003d jsType.autoboxesTo();\n        return cType.unionWith(tt.getConcreteInstance((ObjectType) autoboxed));\n      } else if (jsType.unboxesTo() !\u003d null) {\n        return cType.unionWith(tt.getConcreteInstance((ObjectType) jsType));\n      }\n\n      return cType;\n    }",
    "begin_line": 1014,
    "end_line": 1035,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteTypeSystem.isInvalidatingType#1037",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.isInvalidatingType(com.google.javascript.jscomp.ConcreteType)",
    "snippet": "@Override public boolean isInvalidatingType(ConcreteType type) {\n      // We will disallow types on functions so that \u0027prototype\u0027 is not renamed.\n      // TODO(user): Support properties on functions as well.\n      return (type \u003d\u003d null) || type.isAll() || type.isFunction()\n        || (type.isInstance()\n            \u0026\u0026 invalidatingTypes.contains(type.toInstance().instanceType));\n    }",
    "begin_line": 1037,
    "end_line": 1043,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteTypeSystem.getTypesToSkipForType#1046",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getTypesToSkipForType(com.google.javascript.jscomp.ConcreteType)",
    "snippet": "@Override\n    public ImmutableSet\u003cConcreteType\u003e getTypesToSkipForType(ConcreteType type) {\n      return ImmutableSet.of(type);\n    }",
    "begin_line": 1046,
    "end_line": 1048,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteTypeSystem.isTypeToSkip#1050",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.isTypeToSkip(com.google.javascript.jscomp.ConcreteType)",
    "snippet": "@Override public boolean isTypeToSkip(ConcreteType type) {\n      // Skip anonymous object literals and enum types.\n      return type.isInstance()\n        \u0026\u0026 !(type.toInstance().isFunctionPrototype()\n             || type.toInstance().instanceType.isInstanceType());\n    }",
    "begin_line": 1050,
    "end_line": 1055,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteTypeSystem.restrictByNotNullOrUndefined#1058",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.restrictByNotNullOrUndefined(com.google.javascript.jscomp.ConcreteType)",
    "snippet": "@Override\n    public ConcreteType restrictByNotNullOrUndefined(ConcreteType type) {\n      // These are not represented in concrete types.\n      return type;\n    }",
    "begin_line": 1058,
    "end_line": 1061,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteTypeSystem.getTypeAlternatives#1064",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getTypeAlternatives(com.google.javascript.jscomp.ConcreteType)",
    "snippet": "@Override\n    public Iterable\u003cConcreteType\u003e getTypeAlternatives(ConcreteType type) {\n      if (type.isUnion()) {\n        return ((ConcreteUnionType) type).getAlternatives();\n      } else {\n        return null;\n      }\n    }",
    "begin_line": 1064,
    "end_line": 1070,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteTypeSystem.getTypeWithProperty#1072",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getTypeWithProperty(java.lang.String, com.google.javascript.jscomp.ConcreteType)",
    "snippet": "@Override public ConcreteType getTypeWithProperty(String field,\n                                                      ConcreteType type) {\n      if (type.isInstance()) {\n        ConcreteInstanceType instanceType \u003d (ConcreteInstanceType) type;\n        return instanceType.getInstanceTypeWithProperty(field);\n      } else if (type.isFunction()) {\n        if (\"prototype\".equals(field)\n            || codingConvention.isSuperClassReference(field)) {\n          return type;\n        }\n      } else if (type.isNone()) {\n        // If the receiver is none, then this code is never reached.  We will\n        // return a new fake type to ensure that this access is renamed\n        // differently from any other, so it can be easily removed.\n        return new ConcreteUniqueType(++nextUniqueId);\n      } else if (type.isUnion()) {\n        // If only one has the property, return that.\n        for (ConcreteType t : ((ConcreteUnionType) type).getAlternatives()) {\n          ConcreteType ret \u003d getTypeWithProperty(field, t);\n          if (ret !\u003d null) {\n            return ret;\n          }\n        }\n      }\n      return null;\n    }",
    "begin_line": 1072,
    "end_line": 1097,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteTypeSystem.getInstanceFromPrototype#1099",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.getInstanceFromPrototype(com.google.javascript.jscomp.ConcreteType)",
    "snippet": "@Override public ConcreteType getInstanceFromPrototype(ConcreteType type) {\n      if (type.isInstance()) {\n        ConcreteInstanceType instanceType \u003d (ConcreteInstanceType) type;\n        if (instanceType.isFunctionPrototype()) {\n          return instanceType.getConstructorType().getInstanceType();\n        }\n      }\n      return null;\n    }",
    "begin_line": 1099,
    "end_line": 1107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteTypeSystem.recordInterfaces#1110",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
    "signature": "com.google.javascript.jscomp.DisambiguateProperties.recordInterfaces(com.google.javascript.jscomp.ConcreteType, com.google.javascript.jscomp.ConcreteType, com.google.javascript.jscomp.DisambiguateProperties\u003ccom.google.javascript.jscomp.ConcreteType\u003e.Property)",
    "snippet": "@Override\n    public void recordInterfaces(ConcreteType type, ConcreteType relatedType,\n        DisambiguateProperties\u003cConcreteType\u003e.Property p) {\n      // No need to record interfaces when using concrete types.\n    }",
    "begin_line": 1110,
    "end_line": 1113,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.toFormatter#27",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ErrorFormat.java",
    "class_name": "com.google.javascript.jscomp.ErrorFormat",
    "signature": "com.google.javascript.jscomp.ErrorFormat.toFormatter(com.google.javascript.jscomp.SourceExcerptProvider, boolean)",
    "snippet": "@Override\n    public MessageFormatter toFormatter(\n        SourceExcerptProvider source, boolean colorize) {\n      VerboseMessageFormatter formatter \u003d new VerboseMessageFormatter(source);\n      formatter.setColorize(colorize);\n      return formatter;\n    }",
    "begin_line": 27,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.toFormatter#36",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ErrorFormat.java",
    "class_name": "com.google.javascript.jscomp.ErrorFormat",
    "signature": "com.google.javascript.jscomp.ErrorFormat.toFormatter(com.google.javascript.jscomp.SourceExcerptProvider, boolean)",
    "snippet": "@Override\n    public MessageFormatter toFormatter(\n        SourceExcerptProvider source, boolean colorize) {\n      LightweightMessageFormatter formatter \u003d new LightweightMessageFormatter(\n          source);\n      formatter.setColorize(colorize);\n      return formatter;\n    }",
    "begin_line": 36,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.toFormatter#46",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ErrorFormat.java",
    "class_name": "com.google.javascript.jscomp.ErrorFormat",
    "signature": "com.google.javascript.jscomp.ErrorFormat.toFormatter(com.google.javascript.jscomp.SourceExcerptProvider, boolean)",
    "snippet": "@Override\n    public MessageFormatter toFormatter(\n        SourceExcerptProvider source, boolean colorize) {\n      LightweightMessageFormatter formatter \u003d new LightweightMessageFormatter(\n          source, SourceExcerpt.REGION);\n      formatter.setColorize(colorize);\n      return formatter;\n    }",
    "begin_line": 46,
    "end_line": 52,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.toFormatter#56",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ErrorFormat.java",
    "class_name": "com.google.javascript.jscomp.ErrorFormat",
    "signature": "com.google.javascript.jscomp.ErrorFormat.toFormatter(com.google.javascript.jscomp.SourceExcerptProvider, boolean)",
    "snippet": "@Override\n    public MessageFormatter toFormatter(\n        SourceExcerptProvider source, boolean colorize) {\n      LightweightMessageFormatter formatter \u003d\n          LightweightMessageFormatter.withoutSource();\n      formatter.setColorize(colorize);\n      return formatter;\n    }",
    "begin_line": 56,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.toFormatter#68",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ErrorFormat.java",
    "class_name": "com.google.javascript.jscomp.ErrorFormat",
    "signature": "com.google.javascript.jscomp.ErrorFormat.toFormatter(com.google.javascript.jscomp.SourceExcerptProvider, boolean)",
    "snippet": "public abstract MessageFormatter toFormatter(\n      SourceExcerptProvider source, boolean colorize);",
    "begin_line": 68,
    "end_line": 69,
    "comment": "/** \n * Convert to a concrete formatter.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeValidator.apply#148",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.apply(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n    public boolean apply(JSType type) {\n      ObjectType objectType \u003d ObjectType.cast(type);\n      if (objectType \u003d\u003d null) {\n        reportWarning(EXTENDS_NON_OBJECT, fnName, type.toString());\n        return false;\n      } else if (objectType.isEmptyType()) {\n        reportWarning(RESOLVED_TAG_EMPTY, \"@extends\", fnName);\n        return false;\n      } else if (objectType.isUnknownType()) {\n        if (hasMoreTagsToResolve(objectType)) {\n          return true;\n        } else {\n          reportWarning(RESOLVED_TAG_EMPTY, \"@extends\", fnName);\n          return false;\n        }\n      } else {\n        return true;\n      }\n    }",
    "begin_line": 148,
    "end_line": 166,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.apply#171",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.apply(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n    public boolean apply(JSType type) {\n      ObjectType objectType \u003d ObjectType.cast(type);\n      if (objectType \u003d\u003d null) {\n        reportError(BAD_IMPLEMENTED_TYPE, fnName);\n        return false;\n      } else if (objectType.isEmptyType()) {\n        reportWarning(RESOLVED_TAG_EMPTY, \"@implements\", fnName);\n        return false;\n      } else if (objectType.isUnknownType()) {\n        if (hasMoreTagsToResolve(objectType)) {\n          return true;\n        } else {\n          reportWarning(RESOLVED_TAG_EMPTY, \"@implements\", fnName);\n          return false;\n        }\n      } else {\n        return true;\n      }\n    }",
    "begin_line": 171,
    "end_line": 189,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.FunctionTypeBuilder#201",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.FunctionTypeBuilder(java.lang.String, com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.jscomp.Scope)",
    "snippet": " FunctionTypeBuilder(String fnName, AbstractCompiler compiler,\n      Node errorRoot, String sourceName, Scope scope) {\n    Preconditions.checkNotNull(errorRoot);\n\n    this.fnName \u003d fnName \u003d\u003d null ? \"\" : fnName;\n    this.codingConvention \u003d compiler.getCodingConvention();\n    this.typeRegistry \u003d compiler.getTypeRegistry();\n    this.errorRoot \u003d errorRoot;\n    this.sourceName \u003d sourceName;\n    this.compiler \u003d compiler;\n    this.scope \u003d scope;\n  }",
    "begin_line": 201,
    "end_line": 212,
    "comment": "/** \n * @param fnName The function name.\n * @param compiler The compiler.\n * @param errorRoot The node to associate with any warning generated bythis builder.\n * @param sourceName A source name for associating any warnings thatwe have to emit.\n * @param scope The syntactic scope.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.setContents#217",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.setContents(com.google.javascript.jscomp.FunctionTypeBuilder.FunctionContents)",
    "snippet": "FunctionTypeBuilder setContents(@Nullable FunctionContents contents) {\n    if (contents !\u003d null) {\n      this.contents \u003d contents;\n    }\n    return this;\n  }",
    "begin_line": 217,
    "end_line": 222,
    "comment": "/** \n * Sets the contents of this function.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.inferFromOverriddenFunction#233",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.inferFromOverriddenFunction(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.Node)",
    "snippet": "FunctionTypeBuilder inferFromOverriddenFunction(\n      @Nullable FunctionType oldType, @Nullable Node paramsParent) {\n    if (oldType \u003d\u003d null) {\n      return this;\n    }\n\n    returnType \u003d oldType.getReturnType();\n    returnTypeInferred \u003d oldType.isReturnTypeInferred();\n    if (paramsParent \u003d\u003d null) {\n      // Not a function literal.\n      parametersNode \u003d oldType.getParametersNode();\n      if (parametersNode \u003d\u003d null) {\n        parametersNode \u003d new FunctionParamBuilder(typeRegistry).build();\n      }\n    } else {\n      // We\u0027re overriding with a function literal. Apply type information\n      // to each parameter of the literal.\n      FunctionParamBuilder paramBuilder \u003d\n          new FunctionParamBuilder(typeRegistry);\n      Iterator\u003cNode\u003e oldParams \u003d oldType.getParameters().iterator();\n      boolean warnedAboutArgList \u003d false;\n      boolean oldParamsListHitOptArgs \u003d false;\n      for (Node currentParam \u003d paramsParent.getFirstChild();\n           currentParam !\u003d null; currentParam \u003d currentParam.getNext()) {\n        if (oldParams.hasNext()) {\n          Node oldParam \u003d oldParams.next();\n          Node newParam \u003d paramBuilder.newParameterFromNode(oldParam);\n\n          oldParamsListHitOptArgs \u003d oldParamsListHitOptArgs ||\n              oldParam.isVarArgs() ||\n              oldParam.isOptionalArg();\n\n          // The subclass method might write its var_args as individual\n          // arguments.\n          if (currentParam.getNext() !\u003d null \u0026\u0026 newParam.isVarArgs()) {\n            newParam.setVarArgs(false);\n            newParam.setOptionalArg(true);\n          }\n        } else {\n          warnedAboutArgList |\u003d addParameter(\n              paramBuilder,\n              typeRegistry.getNativeType(UNKNOWN_TYPE),\n              warnedAboutArgList,\n              codingConvention.isOptionalParameter(currentParam) ||\n                  oldParamsListHitOptArgs,\n              codingConvention.isVarArgsParameter(currentParam));\n        }\n      }\n\n      // Clone any remaining params that aren\u0027t in the function literal,\n      // but make them optional.\n      while (oldParams.hasNext()) {\n        paramBuilder.newOptionalParameterFromNode(oldParams.next());\n      }\n\n      parametersNode \u003d paramBuilder.build();\n    }\n    return this;\n  }",
    "begin_line": 233,
    "end_line": 291,
    "comment": "/** \n * Infer the parameter and return types of a function from the parameter and return types of the function it is overriding.\n * @param oldType The function being overridden. Does nothing if this is null.\n * @param paramsParent The LP node of the function that we\u0027re assigning to.If null, that just means we\u0027re not initializing this to a function literal.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.inferReturnType#296",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.inferReturnType(com.google.javascript.rhino.JSDocInfo)",
    "snippet": "FunctionTypeBuilder inferReturnType(@Nullable JSDocInfo info) {\n    if (info !\u003d null \u0026\u0026 info.hasReturnType()) {\n      returnType \u003d info.getReturnType().evaluate(scope, typeRegistry);\n      returnTypeInferred \u003d false;\n    }\n\n    return this;\n  }",
    "begin_line": 296,
    "end_line": 303,
    "comment": "/** \n * Infer the return type from JSDocInfo.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.inferInheritance#309",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.inferInheritance(com.google.javascript.rhino.JSDocInfo)",
    "snippet": "FunctionTypeBuilder inferInheritance(@Nullable JSDocInfo info) {\n    if (info !\u003d null) {\n      isConstructor \u003d info.isConstructor();\n      makesStructs \u003d info.makesStructs();\n      makesDicts \u003d info.makesDicts();\n      isInterface \u003d info.isInterface();\n\n      if (makesStructs \u0026\u0026 !isConstructor) {\n        reportWarning(CONSTRUCTOR_REQUIRED, \"@struct\", fnName);\n      } else if (makesDicts \u0026\u0026 !isConstructor) {\n        reportWarning(CONSTRUCTOR_REQUIRED, \"@dict\", fnName);\n      }\n\n      // base type\n      if (info.hasBaseType()) {\n        if (isConstructor) {\n          JSType maybeBaseType \u003d\n              info.getBaseType().evaluate(scope, typeRegistry);\n          if (maybeBaseType !\u003d null \u0026\u0026\n              maybeBaseType.setValidator(new ExtendedTypeValidator())) {\n            baseType \u003d (ObjectType) maybeBaseType;\n          }\n        } else {\n          reportWarning(EXTENDS_WITHOUT_TYPEDEF, fnName);\n        }\n      }\n\n      // Implemented interfaces (for constructors only).\n      if (info.getImplementedInterfaceCount() \u003e 0) {\n        if (isConstructor) {\n          implementedInterfaces \u003d Lists.newArrayList();\n          for (JSTypeExpression t : info.getImplementedInterfaces()) {\n            JSType maybeInterType \u003d t.evaluate(scope, typeRegistry);\n            if (maybeInterType !\u003d null \u0026\u0026\n                maybeInterType.setValidator(new ImplementedTypeValidator())) {\n              implementedInterfaces.add((ObjectType) maybeInterType);\n            }\n          }\n        } else if (isInterface) {\n          reportWarning(\n              TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, fnName);\n        } else {\n          reportWarning(CONSTRUCTOR_REQUIRED, \"@implements\", fnName);\n        }\n      }\n\n      // extended interfaces (for interfaces only)\n      // We\u0027ve already emitted a warning if this is not an interface.\n      if (isInterface) {\n        extendedInterfaces \u003d Lists.newArrayList();\n        for (JSTypeExpression t : info.getExtendedInterfaces()) {\n          JSType maybeInterfaceType \u003d t.evaluate(scope, typeRegistry);\n          if (maybeInterfaceType !\u003d null \u0026\u0026\n              maybeInterfaceType.setValidator(new ExtendedTypeValidator())) {\n            extendedInterfaces.add((ObjectType) maybeInterfaceType);\n          }\n        }\n      }\n    }\n\n    return this;\n  }",
    "begin_line": 309,
    "end_line": 370,
    "comment": "/** \n * Infer the role of the function (whether it\u0027s a constructor or interface) and what it inherits from in JSDocInfo.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.inferThisType#376",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.inferThisType(com.google.javascript.rhino.JSDocInfo, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "FunctionTypeBuilder inferThisType(JSDocInfo info, JSType type) {\n    // Look at the @this annotation first.\n    inferThisType(info);\n\n    if (thisType \u003d\u003d null) {\n      ObjectType objType \u003d ObjectType.cast(type);\n      if (objType !\u003d null \u0026\u0026 (info \u003d\u003d null || !info.hasType())) {\n        thisType \u003d objType;\n      }\n    }\n\n    return this;\n  }",
    "begin_line": 376,
    "end_line": 388,
    "comment": "/** \n * Infers the type of  {@code this}.\n * @param type The type of this if the info is missing.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.inferThisType#394",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.inferThisType(com.google.javascript.rhino.JSDocInfo)",
    "snippet": "FunctionTypeBuilder inferThisType(JSDocInfo info) {\n    JSType maybeThisType \u003d null;\n    if (info !\u003d null \u0026\u0026 info.hasThisType()) {\n      // TODO(johnlenz): In ES5 strict mode a function can have a null or\n      // undefined \"this\" value, but all the existing \"@this\" annotations\n      // don\u0027t declare restricted types.\n      maybeThisType \u003d info.getThisType().evaluate(scope, typeRegistry)\n          .restrictByNotNullOrUndefined();\n    }\n    if (maybeThisType !\u003d null) {\n      thisType \u003d maybeThisType;\n    }\n\n    return this;\n  }",
    "begin_line": 394,
    "end_line": 408,
    "comment": "/** \n * Infers the type of  {@code this}.\n * @param info The JSDocInfo for this function.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.inferParameterTypes#413",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.inferParameterTypes(com.google.javascript.rhino.JSDocInfo)",
    "snippet": "FunctionTypeBuilder inferParameterTypes(JSDocInfo info) {\n    // Create a fake args parent.\n    Node lp \u003d IR.paramList();\n    for (String name : info.getParameterNames()) {\n      lp.addChildToBack(IR.name(name));\n    }\n\n    return inferParameterTypes(lp, info);\n  }",
    "begin_line": 413,
    "end_line": 421,
    "comment": "/** \n * Infer the parameter types from the doc info alone.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.inferParameterTypes#427",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.inferParameterTypes(com.google.javascript.rhino.Node, com.google.javascript.rhino.JSDocInfo)",
    "snippet": "FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent,\n      @Nullable JSDocInfo info) {\n    if (argsParent \u003d\u003d null) {\n      if (info \u003d\u003d null) {\n        return this;\n      } else {\n        return inferParameterTypes(info);\n      }\n    }\n\n    // arguments\n    Node oldParameterType \u003d null;\n    if (parametersNode !\u003d null) {\n      oldParameterType \u003d parametersNode.getFirstChild();\n    }\n\n    FunctionParamBuilder builder \u003d new FunctionParamBuilder(typeRegistry);\n    boolean warnedAboutArgList \u003d false;\n    Set\u003cString\u003e allJsDocParams \u003d (info \u003d\u003d null) ?\n        Sets.\u003cString\u003enewHashSet() :\n        Sets.newHashSet(info.getParameterNames());\n    boolean foundTemplateType \u003d false;\n    boolean isVarArgs \u003d false;\n    for (Node arg : argsParent.children()) {\n      String argumentName \u003d arg.getString();\n      allJsDocParams.remove(argumentName);\n\n      // type from JSDocInfo\n      JSType parameterType \u003d null;\n      boolean isOptionalParam \u003d isOptionalParameter(arg, info);\n      isVarArgs \u003d isVarArgsParameter(arg, info);\n\n      if (info !\u003d null \u0026\u0026 info.hasParameterType(argumentName)) {\n        parameterType \u003d\n            info.getParameterType(argumentName).evaluate(scope, typeRegistry);\n      } else if (oldParameterType !\u003d null \u0026\u0026\n          oldParameterType.getJSType() !\u003d null) {\n        parameterType \u003d oldParameterType.getJSType();\n        isOptionalParam \u003d oldParameterType.isOptionalArg();\n        isVarArgs \u003d oldParameterType.isVarArgs();\n      } else {\n        parameterType \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n      }\n\n      warnedAboutArgList |\u003d addParameter(\n          builder, parameterType, warnedAboutArgList,\n          isOptionalParam,\n          isVarArgs);\n\n      if (oldParameterType !\u003d null) {\n        oldParameterType \u003d oldParameterType.getNext();\n      }\n    }\n\n    // Copy over any old parameters that aren\u0027t in the param list.\n    if (!isVarArgs) {\n      while (oldParameterType !\u003d null \u0026\u0026 !isVarArgs) {\n        builder.newParameterFromNode(oldParameterType);\n        oldParameterType \u003d oldParameterType.getNext();\n      }\n    }\n\n    for (String inexistentName : allJsDocParams) {\n      reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n    }\n\n    parametersNode \u003d builder.build();\n    return this;\n  }",
    "begin_line": 427,
    "end_line": 495,
    "comment": "/** \n * Infer the parameter types from the list of argument names and the doc info.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.isOptionalParameter#500",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.isOptionalParameter(com.google.javascript.rhino.Node, com.google.javascript.rhino.JSDocInfo)",
    "snippet": "private boolean isOptionalParameter(\n      Node param, @Nullable JSDocInfo info) {\n    if (codingConvention.isOptionalParameter(param)) {\n      return true;\n    }\n\n    String paramName \u003d param.getString();\n    return info !\u003d null \u0026\u0026 info.hasParameterType(paramName) \u0026\u0026\n        info.getParameterType(paramName).isOptionalArg();\n  }",
    "begin_line": 500,
    "end_line": 509,
    "comment": "/** \n * @return Whether the given param is an optional param.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.isVarArgsParameter#515",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.isVarArgsParameter(com.google.javascript.rhino.Node, com.google.javascript.rhino.JSDocInfo)",
    "snippet": "private boolean isVarArgsParameter(\n      Node param, @Nullable JSDocInfo info) {\n    if (codingConvention.isVarArgsParameter(param)) {\n      return true;\n    }\n\n    String paramName \u003d param.getString();\n    return info !\u003d null \u0026\u0026 info.hasParameterType(paramName) \u0026\u0026\n        info.getParameterType(paramName).isVarArgs();\n  }",
    "begin_line": 515,
    "end_line": 524,
    "comment": "/** \n * Determine whether this is a var args parameter.\n * @return Whether the given param is a var args param.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.inferTemplateTypeName#529",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.inferTemplateTypeName(com.google.javascript.rhino.JSDocInfo)",
    "snippet": "FunctionTypeBuilder inferTemplateTypeName(@Nullable JSDocInfo info) {\n    if (info !\u003d null) {\n      templateTypeNames \u003d info.getTemplateTypeNames();\n      typeRegistry.setTemplateTypeNames(templateTypeNames);\n    }\n    return this;\n  }",
    "begin_line": 529,
    "end_line": 535,
    "comment": "/** \n * Infer the template type from the doc info.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.addParameter#547",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.addParameter(com.google.javascript.rhino.jstype.FunctionParamBuilder, com.google.javascript.rhino.jstype.JSType, boolean, boolean, boolean)",
    "snippet": "private boolean addParameter(FunctionParamBuilder builder,\n      JSType paramType, boolean warnedAboutArgList,\n      boolean isOptional, boolean isVarArgs) {\n    boolean emittedWarning \u003d false;\n    if (isOptional) {\n      // Remembering that an optional parameter has been encountered\n      // so that if a non optional param is encountered later, an\n      // error can be reported.\n      if (!builder.addOptionalParams(paramType) \u0026\u0026 !warnedAboutArgList) {\n        reportWarning(VAR_ARGS_MUST_BE_LAST);\n        emittedWarning \u003d true;\n      }\n    } else if (isVarArgs) {\n      if (!builder.addVarArgs(paramType) \u0026\u0026 !warnedAboutArgList) {\n        reportWarning(VAR_ARGS_MUST_BE_LAST);\n        emittedWarning \u003d true;\n      }\n    } else {\n      if (!builder.addRequiredParams(paramType) \u0026\u0026 !warnedAboutArgList) {\n        // An optional parameter was seen and this argument is not an optional\n        // or var arg so it is an error.\n        if (builder.hasVarArgs()) {\n          reportWarning(VAR_ARGS_MUST_BE_LAST);\n        } else {\n          reportWarning(OPTIONAL_ARG_AT_END);\n        }\n        emittedWarning \u003d true;\n      }\n    }\n    return emittedWarning;\n  }",
    "begin_line": 547,
    "end_line": 577,
    "comment": "/** \n * Add a parameter to the param list.\n * @param builder A builder.\n * @param paramType The parameter type.\n * @param warnedAboutArgList Whether we\u0027ve already warned about arg orderingissues (like if optional args appeared before required ones).\n * @param isOptional Is this an optional parameter?\n * @param isVarArgs Is this a var args parameter?\n * @return Whether a warning was emitted.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.buildAndRegister#582",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.buildAndRegister()",
    "snippet": "FunctionType buildAndRegister() {\n    if (returnType \u003d\u003d null) {\n      // Infer return types.\n      // We need to be extremely conservative about this, because of two\n      // competing needs.\n      // 1) If we infer the return type of f too widely, then we won\u0027t be able\n      //    to assign f to other functions.\n      // 2) If we infer the return type of f too narrowly, then we won\u0027t be\n      //    able to override f in subclasses.\n      // So we only infer in cases where the user doesn\u0027t expect to write\n      // @return annotations--when it\u0027s very obvious that the function returns\n      // nothing.\n      if (!contents.mayHaveNonEmptyReturns() \u0026\u0026\n          !contents.mayHaveSingleThrow() \u0026\u0026\n          !contents.mayBeFromExterns()) {\n        returnType \u003d typeRegistry.getNativeType(VOID_TYPE);\n        returnTypeInferred \u003d true;\n      }\n    }\n\n    if (returnType \u003d\u003d null) {\n      returnType \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n    }\n\n    if (parametersNode \u003d\u003d null) {\n      throw new IllegalStateException(\n          \"All Function types must have params and a return type\");\n    }\n\n    FunctionType fnType;\n    if (isConstructor) {\n      fnType \u003d getOrCreateConstructor();\n    } else if (isInterface) {\n      fnType \u003d typeRegistry.createInterfaceType(\n          fnName, contents.getSourceNode());\n      if (getScopeDeclaredIn().isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n        typeRegistry.declareType(fnName, fnType.getInstanceType());\n      }\n      maybeSetBaseType(fnType);\n    } else {\n      fnType \u003d new FunctionBuilder(typeRegistry)\n          .withName(fnName)\n          .withSourceNode(contents.getSourceNode())\n          .withParamsNode(parametersNode)\n          .withReturnType(returnType, returnTypeInferred)\n          .withTypeOfThis(thisType)\n          .withTemplateKeys(templateTypeNames)\n          .build();\n      maybeSetBaseType(fnType);\n    }\n\n    if (implementedInterfaces !\u003d null) {\n      fnType.setImplementedInterfaces(implementedInterfaces);\n    }\n\n    if (extendedInterfaces !\u003d null) {\n      fnType.setExtendedInterfaces(extendedInterfaces);\n    }\n\n    typeRegistry.clearTemplateTypeNames();\n\n    return fnType;\n  }",
    "begin_line": 582,
    "end_line": 644,
    "comment": "/** \n * Builds the function type, and puts it in the registry.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.maybeSetBaseType#646",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.maybeSetBaseType(com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "private void maybeSetBaseType(FunctionType fnType) {\n    if (!fnType.isInterface() \u0026\u0026 baseType !\u003d null) {\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
    "begin_line": 646,
    "end_line": 650,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.getOrCreateConstructor#665",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.getOrCreateConstructor()",
    "snippet": "private FunctionType getOrCreateConstructor() {\n    FunctionType fnType \u003d typeRegistry.createConstructorType(\n        fnName, contents.getSourceNode(), parametersNode, returnType, null);\n    JSType existingType \u003d typeRegistry.getType(fnName);\n\n    if (makesStructs) {\n      fnType.setStruct();\n    } else if (makesDicts) {\n      fnType.setDict();\n    }\n    if (existingType !\u003d null) {\n      boolean isInstanceObject \u003d existingType.isInstanceType();\n      if (isInstanceObject || fnName.equals(\"Function\")) {\n        FunctionType existingFn \u003d\n            isInstanceObject ?\n            existingType.toObjectType().getConstructor() :\n            typeRegistry.getNativeFunctionType(FUNCTION_FUNCTION_TYPE);\n\n        if (existingFn.getSource() \u003d\u003d null) {\n          existingFn.setSource(contents.getSourceNode());\n        }\n\n        if (!existingFn.hasEqualCallType(fnType)) {\n          reportWarning(TYPE_REDEFINITION, fnName,\n              fnType.toString(), existingFn.toString());\n        }\n\n        return existingFn;\n      } else {\n        // We fall through and return the created type, even though it will fail\n        // to register. We have no choice as we have to return a function. We\n        // issue an error elsewhere though, so the user should fix it.\n      }\n    }\n\n    maybeSetBaseType(fnType);\n\n    if (getScopeDeclaredIn().isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n      typeRegistry.declareType(fnName, fnType.getInstanceType());\n    }\n    return fnType;\n  }",
    "begin_line": 665,
    "end_line": 706,
    "comment": "/** \n * Returns a constructor function either by returning it from the registry if it exists or creating and registering a new type. If there is already a type, then warn if the existing type is different than the one we are creating, though still return the existing function if possible.  The primary purpose of this is that registering a constructor will fail for all built-in types that are initialized in  {@link JSTypeRegistry}.  We a) want to make sure that the type information specified in the externs file matches what is in the registry and b) annotate the externs with the  {@link JSType} from the registry so that there are not twoseparate JSType objects for one type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.reportWarning#708",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.reportWarning(com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
    "snippet": "private void reportWarning(DiagnosticType warning, String ... args) {\n    compiler.report(JSError.make(sourceName, errorRoot, warning, args));\n  }",
    "begin_line": 708,
    "end_line": 710,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.reportError#712",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.reportError(com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
    "snippet": "private void reportError(DiagnosticType error, String ... args) {\n    compiler.report(JSError.make(sourceName, errorRoot, error, args));\n  }",
    "begin_line": 712,
    "end_line": 714,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.isFunctionTypeDeclaration#719",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.isFunctionTypeDeclaration(com.google.javascript.rhino.JSDocInfo)",
    "snippet": "static boolean isFunctionTypeDeclaration(JSDocInfo info) {\n    return info.getParameterCount() \u003e 0 ||\n        info.hasReturnType() ||\n        info.hasThisType() ||\n        info.isConstructor() ||\n        info.isInterface();\n  }",
    "begin_line": 719,
    "end_line": 725,
    "comment": "/** \n * Determines whether the given JsDoc info declares a function type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.getScopeDeclaredIn#732",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.getScopeDeclaredIn()",
    "snippet": "private Scope getScopeDeclaredIn() {\n    int dotIndex \u003d fnName.indexOf(\".\");\n    if (dotIndex !\u003d -1) {\n      String rootVarName \u003d fnName.substring(0, dotIndex);\n      Var rootVar \u003d scope.getVar(rootVarName);\n      if (rootVar !\u003d null) {\n        return rootVar.getScope();\n      }\n    }\n    return scope;\n  }",
    "begin_line": 732,
    "end_line": 742,
    "comment": "/** \n * The scope that we should declare this function in, if it needs to be declared in a scope. Notice that TypedScopeCreator takes care of most scope-declaring.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ImplementedTypeValidator.hasMoreTagsToResolve#751",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.hasMoreTagsToResolve(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "private static boolean hasMoreTagsToResolve(ObjectType objectType) {\n    Preconditions.checkArgument(objectType.isUnknownType());\n    if (objectType.getImplicitPrototype() !\u003d null) {\n      // constructor extends class\n      if (objectType.getImplicitPrototype().isResolved()) {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      // interface extends interfaces\n      FunctionType ctor \u003d objectType.getConstructor();\n      if (ctor !\u003d null) {\n        for (ObjectType interfaceType : ctor.getExtendedInterfaces()) {\n          if (!interfaceType.isResolved()) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }",
    "begin_line": 751,
    "end_line": 772,
    "comment": "/** \n * Check whether a type is resolvable in the future If this has a supertype that hasn\u0027t been resolved yet, then we can assume this type will be OK once the super type resolves.\n * @param objectType\n * @return true if objectType is resolvable in the future\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionContents.getSourceNode#777",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.getSourceNode()",
    "snippet": "Node getSourceNode();",
    "begin_line": 777,
    "end_line": 777,
    "comment": "/** \n * Returns the source node of this function. May be null. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionContents.mayBeFromExterns#780",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.mayBeFromExterns()",
    "snippet": "boolean mayBeFromExterns();",
    "begin_line": 780,
    "end_line": 780,
    "comment": "/** \n * Returns if the function may be in externs. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionContents.mayHaveNonEmptyReturns#783",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.mayHaveNonEmptyReturns()",
    "snippet": "boolean mayHaveNonEmptyReturns();",
    "begin_line": 783,
    "end_line": 783,
    "comment": "/** \n * Returns if a return of a real value (not undefined) appears. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionContents.mayHaveSingleThrow#786",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.mayHaveSingleThrow()",
    "snippet": "boolean mayHaveSingleThrow();",
    "begin_line": 786,
    "end_line": 786,
    "comment": "/** \n * Returns if this consists of a single throw. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionContents.getEscapedVarNames#789",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.getEscapedVarNames()",
    "snippet": "Iterable\u003cString\u003e getEscapedVarNames();",
    "begin_line": 789,
    "end_line": 789,
    "comment": "/** \n * Gets a list of variables in this scope that are escaped. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionContents.getEscapedQualifiedNames#792",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.getEscapedQualifiedNames()",
    "snippet": "Set\u003cString\u003e getEscapedQualifiedNames();",
    "begin_line": 792,
    "end_line": 792,
    "comment": "/** \n * Gets a list of variables whose properties are escaped. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionContents.getAssignedNameCounts#795",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.getAssignedNameCounts()",
    "snippet": "Multiset\u003cString\u003e getAssignedNameCounts();",
    "begin_line": 795,
    "end_line": 795,
    "comment": "/** \n * Gets the number of times each variable has been assigned. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownFunctionContents.get#802",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.get()",
    "snippet": "static FunctionContents get() {\n      return singleton;\n    }",
    "begin_line": 802,
    "end_line": 804,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownFunctionContents.getSourceNode#807",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.getSourceNode()",
    "snippet": "@Override\n    public Node getSourceNode() {\n      return null;\n    }",
    "begin_line": 807,
    "end_line": 809,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownFunctionContents.mayBeFromExterns#812",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.mayBeFromExterns()",
    "snippet": "@Override\n    public boolean mayBeFromExterns() {\n      return true;\n    }",
    "begin_line": 812,
    "end_line": 814,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownFunctionContents.mayHaveNonEmptyReturns#817",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.mayHaveNonEmptyReturns()",
    "snippet": "@Override\n    public boolean mayHaveNonEmptyReturns() {\n      return true;\n    }",
    "begin_line": 817,
    "end_line": 819,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownFunctionContents.mayHaveSingleThrow#822",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.mayHaveSingleThrow()",
    "snippet": "@Override\n    public boolean mayHaveSingleThrow() {\n      return true;\n    }",
    "begin_line": 822,
    "end_line": 824,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownFunctionContents.getEscapedVarNames#827",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.getEscapedVarNames()",
    "snippet": "@Override\n    public Iterable\u003cString\u003e getEscapedVarNames() {\n      return ImmutableList.of();\n    }",
    "begin_line": 827,
    "end_line": 829,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownFunctionContents.getEscapedQualifiedNames#832",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.getEscapedQualifiedNames()",
    "snippet": "@Override\n    public Set\u003cString\u003e getEscapedQualifiedNames() {\n      return ImmutableSet.of();\n    }",
    "begin_line": 832,
    "end_line": 834,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownFunctionContents.getAssignedNameCounts#837",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.getAssignedNameCounts()",
    "snippet": "@Override\n    public Multiset\u003cString\u003e getAssignedNameCounts() {\n      return ImmutableMultiset.of();\n    }",
    "begin_line": 837,
    "end_line": 839,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AstFunctionContents.AstFunctionContents#849",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.AstFunctionContents(com.google.javascript.rhino.Node)",
    "snippet": " AstFunctionContents(Node n) {\n      this.n \u003d n;\n    }",
    "begin_line": 849,
    "end_line": 851,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AstFunctionContents.getSourceNode#854",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.getSourceNode()",
    "snippet": "@Override\n    public Node getSourceNode() {\n      return n;\n    }",
    "begin_line": 854,
    "end_line": 856,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AstFunctionContents.mayBeFromExterns#859",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.mayBeFromExterns()",
    "snippet": "@Override\n    public boolean mayBeFromExterns() {\n      return n.isFromExterns();\n    }",
    "begin_line": 859,
    "end_line": 861,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AstFunctionContents.mayHaveNonEmptyReturns#864",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.mayHaveNonEmptyReturns()",
    "snippet": "@Override\n    public boolean mayHaveNonEmptyReturns() {\n      return hasNonEmptyReturns;\n    }",
    "begin_line": 864,
    "end_line": 866,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AstFunctionContents.recordNonEmptyReturn#868",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.recordNonEmptyReturn()",
    "snippet": "void recordNonEmptyReturn() {\n      hasNonEmptyReturns \u003d true;\n    }",
    "begin_line": 868,
    "end_line": 870,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AstFunctionContents.mayHaveSingleThrow#873",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.mayHaveSingleThrow()",
    "snippet": "@Override\n    public boolean mayHaveSingleThrow() {\n      Node block \u003d n.getLastChild();\n      return block.hasOneChild() \u0026\u0026 block.getFirstChild().isThrow();\n    }",
    "begin_line": 873,
    "end_line": 876,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AstFunctionContents.getEscapedVarNames#879",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.getEscapedVarNames()",
    "snippet": "@Override\n    public Iterable\u003cString\u003e getEscapedVarNames() {\n      return escapedVarNames \u003d\u003d null\n          ? ImmutableList.\u003cString\u003eof() : escapedVarNames;\n    }",
    "begin_line": 879,
    "end_line": 882,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AstFunctionContents.recordEscapedVarName#884",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.recordEscapedVarName(java.lang.String)",
    "snippet": "void recordEscapedVarName(String name) {\n      if (escapedVarNames \u003d\u003d null) {\n        escapedVarNames \u003d Sets.newHashSet();\n      }\n      escapedVarNames.add(name);\n    }",
    "begin_line": 884,
    "end_line": 889,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AstFunctionContents.getEscapedQualifiedNames#892",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.getEscapedQualifiedNames()",
    "snippet": "@Override\n    public Set\u003cString\u003e getEscapedQualifiedNames() {\n      return escapedQualifiedNames \u003d\u003d null\n          ? ImmutableSet.\u003cString\u003eof() : escapedQualifiedNames;\n    }",
    "begin_line": 892,
    "end_line": 895,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AstFunctionContents.recordEscapedQualifiedName#897",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.recordEscapedQualifiedName(java.lang.String)",
    "snippet": "void recordEscapedQualifiedName(String name) {\n      if (escapedQualifiedNames \u003d\u003d null) {\n        escapedQualifiedNames \u003d Sets.newHashSet();\n      }\n      escapedQualifiedNames.add(name);\n    }",
    "begin_line": 897,
    "end_line": 902,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AstFunctionContents.getAssignedNameCounts#905",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.getAssignedNameCounts()",
    "snippet": "@Override\n    public Multiset\u003cString\u003e getAssignedNameCounts() {\n      return assignedVarNames;\n    }",
    "begin_line": 905,
    "end_line": 907,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AstFunctionContents.recordAssignedName#909",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/FunctionTypeBuilder.java",
    "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
    "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.recordAssignedName(java.lang.String)",
    "snippet": "void recordAssignedName(String name) {\n      assignedVarNames.add(name);\n    }",
    "begin_line": 909,
    "end_line": 911,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GoogleCodingConvention.GoogleCodingConvention#43",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/GoogleCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
    "signature": "com.google.javascript.jscomp.GoogleCodingConvention.GoogleCodingConvention()",
    "snippet": "public GoogleCodingConvention() {\n    this(new ClosureCodingConvention());\n  }",
    "begin_line": 43,
    "end_line": 45,
    "comment": "/** \n * By default, decorate the ClosureCodingConvention. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GoogleCodingConvention.GoogleCodingConvention#48",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/GoogleCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
    "signature": "com.google.javascript.jscomp.GoogleCodingConvention.GoogleCodingConvention(com.google.javascript.jscomp.CodingConvention)",
    "snippet": "public GoogleCodingConvention(CodingConvention convention) {\n    super(convention);\n  }",
    "begin_line": 48,
    "end_line": 50,
    "comment": "/** \n * Decorates a wrapped CodingConvention. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GoogleCodingConvention.isConstant#71",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/GoogleCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
    "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isConstant(java.lang.String)",
    "snippet": "@Override\n  public boolean isConstant(String name) {\n    if (name.length() \u003c\u003d 1) {\n      return false;\n    }\n\n    // In compiled code, \u0027$\u0027 is often a namespace delimiter. To allow inlining\n    // of namespaced constants, we strip off any namespaces here.\n    int pos \u003d name.lastIndexOf(\u0027$\u0027);\n    if (pos \u003e\u003d 0) {\n      name \u003d name.substring(pos + 1);\n      if (name.length() \u003d\u003d 0) {\n        return false;\n      }\n    }\n\n    return isConstantKey(name);\n  }",
    "begin_line": 71,
    "end_line": 87,
    "comment": "/** \n * {@inheritDoc}\u003cp\u003eThis enforces the Google const name convention, that the first character after the last $ must be an upper-case letter and all subsequent letters must be upper case. The name must be at least 2 characters long. \u003cp\u003eExamples: \u003cpre\u003e aaa          Not constant - lower-case letters in the name A            Not constant - too short goog$A       Constant - letters after the $ are upper-case. AA17         Constant - digits can appear after the first letter goog$7A      Not constant - first character after the $ must be upper case. $A           Constant - doesn\u0027t have to be anything in front of the $ \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GoogleCodingConvention.isConstantKey#90",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/GoogleCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
    "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isConstantKey(java.lang.String)",
    "snippet": "@Override\n  public boolean isConstantKey(String name) {\n    if (name.isEmpty() || !Character.isUpperCase(name.charAt(0))) {\n      return false;\n    }\n\n    // hack way of checking that there aren\u0027t any lower-case letters\n    return name.toUpperCase().equals(name);\n  }",
    "begin_line": 90,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GoogleCodingConvention.isValidEnumKey#113",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/GoogleCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
    "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isValidEnumKey(java.lang.String)",
    "snippet": "@Override\n  public boolean isValidEnumKey(String key) {\n    return ENUM_KEY_PATTERN.matcher(key).matches();\n  }",
    "begin_line": 113,
    "end_line": 115,
    "comment": "/** \n * {@inheritDoc}\u003cp\u003eThis enforces Google\u0027s convention about enum key names. They must match the regular expression  {@code [A-Z0-9][A-Z0-9_]*}. \u003cp\u003eExamples: \u003cul\u003e \u003cli\u003eA\u003c/li\u003e \u003cli\u003e213\u003c/li\u003e \u003cli\u003eFOO_BAR\u003c/li\u003e \u003c/ul\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GoogleCodingConvention.isOptionalParameter#124",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/GoogleCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
    "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isOptionalParameter(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public boolean isOptionalParameter(Node parameter) {\n    return parameter.getString().startsWith(OPTIONAL_ARG_PREFIX);\n  }",
    "begin_line": 124,
    "end_line": 126,
    "comment": "/** \n * {@inheritDoc}\u003cp\u003eIn Google code, parameter names beginning with  {@code opt_} aretreated as optional arguments.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GoogleCodingConvention.isVarArgsParameter#129",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/GoogleCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
    "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isVarArgsParameter(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public boolean isVarArgsParameter(Node parameter) {\n    return VAR_ARGS_NAME.equals(parameter.getString());\n  }",
    "begin_line": 129,
    "end_line": 131,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GoogleCodingConvention.isExported#140",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/GoogleCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
    "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isExported(java.lang.String, boolean)",
    "snippet": "@Override\n  public boolean isExported(String name, boolean local) {\n    return super.isExported(name, local) ||\n        (!local \u0026\u0026 name.startsWith(\"_\"));\n  }",
    "begin_line": 140,
    "end_line": 143,
    "comment": "/** \n * {@inheritDoc}\u003cp\u003eIn Google code, any global name starting with an underscore is considered exported.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GoogleCodingConvention.isPrivate#152",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/GoogleCodingConvention.java",
    "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
    "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isPrivate(java.lang.String)",
    "snippet": "@Override\n  public boolean isPrivate(String name) {\n    return name.endsWith(\"_\") \u0026\u0026 !isExported(name);\n  }",
    "begin_line": 152,
    "end_line": 154,
    "comment": "/** \n * {@inheritDoc}\u003cp\u003eIn Google code, private names end with an underscore, and exported names are never considered private (see  {@link #isExported}).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InferJSDocInfo.InferJSDocInfo#68",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/InferJSDocInfo.java",
    "class_name": "com.google.javascript.jscomp.InferJSDocInfo",
    "signature": "com.google.javascript.jscomp.InferJSDocInfo.InferJSDocInfo(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": " InferJSDocInfo(AbstractCompiler compiler) {\n    this.compiler \u003d compiler;\n  }",
    "begin_line": 68,
    "end_line": 70,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InferJSDocInfo.process#73",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/InferJSDocInfo.java",
    "class_name": "com.google.javascript.jscomp.InferJSDocInfo",
    "signature": "com.google.javascript.jscomp.InferJSDocInfo.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void process(Node externs, Node root) {\n    if (externs !\u003d null) {\n      inExterns \u003d true;\n      NodeTraversal.traverse(compiler, externs, this);\n    }\n    if (root !\u003d null) {\n      inExterns \u003d false;\n      NodeTraversal.traverse(compiler, root, this);\n    }\n  }",
    "begin_line": 73,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InferJSDocInfo.hotSwapScript#85",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/InferJSDocInfo.java",
    "class_name": "com.google.javascript.jscomp.InferJSDocInfo",
    "signature": "com.google.javascript.jscomp.InferJSDocInfo.hotSwapScript(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void hotSwapScript(Node root, Node originalRoot) {\n    Preconditions.checkNotNull(root);\n    Preconditions.checkState(root.isScript());\n    inExterns \u003d false;\n    NodeTraversal.traverse(compiler, root, this);\n  }",
    "begin_line": 85,
    "end_line": 90,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InferJSDocInfo.visit#93",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/InferJSDocInfo.java",
    "class_name": "com.google.javascript.jscomp.InferJSDocInfo",
    "signature": "com.google.javascript.jscomp.InferJSDocInfo.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    JSDocInfo docInfo;\n\n    switch (n.getType()) {\n      // Infer JSDocInfo on types of all type declarations on variables.\n      case Token.NAME:\n        if (parent \u003d\u003d null) {\n          return;\n        }\n\n        // Only allow JSDoc on VARs, function declarations, and assigns.\n        if (!parent.isVar() \u0026\u0026\n            !NodeUtil.isFunctionDeclaration(parent) \u0026\u0026\n            !(parent.isAssign() \u0026\u0026\n              n \u003d\u003d parent.getFirstChild())) {\n          return;\n        }\n\n        // There are four places the doc info could live.\n        // 1) A FUNCTION node.\n        // /** ... */ function f() { ... }\n        // 2) An ASSIGN parent.\n        // /** ... */ x \u003d function () { ... }\n        // 3) A NAME parent.\n        // var x, /** ... */ y \u003d function() { ... }\n        // 4) A VAR gramps.\n        // /** ... */ var x \u003d function() { ... }\n        docInfo \u003d n.getJSDocInfo();\n        if (docInfo \u003d\u003d null \u0026\u0026\n            !(parent.isVar() \u0026\u0026\n                !parent.hasOneChild())) {\n          docInfo \u003d parent.getJSDocInfo();\n        }\n\n        // Try to find the type of the NAME.\n        JSType varType \u003d n.getJSType();\n        if (varType \u003d\u003d null \u0026\u0026 parent.isFunction()) {\n          varType \u003d parent.getJSType();\n        }\n\n        // If we have no type to attach JSDocInfo to, then there\u0027s nothing\n        // we can do.\n        if (varType \u003d\u003d null || docInfo \u003d\u003d null) {\n          return;\n        }\n\n        // Dereference the type. If the result is not an object, or already\n        // has docs attached, then do nothing.\n        ObjectType objType \u003d dereferenceToObject(varType);\n        if (objType \u003d\u003d null || objType.getJSDocInfo() !\u003d null) {\n          return;\n        }\n\n        attachJSDocInfoToNominalTypeOrShape(objType, docInfo, n.getString());\n        break;\n\n      case Token.GETPROP:\n        // Infer JSDocInfo on properties.\n        // There are two ways to write doc comments on a property.\n        //\n        // 1)\n        // /** @deprecated */\n        // obj.prop \u003d ...\n        //\n        // 2)\n        // /** @deprecated */\n        // obj.prop;\n        if (parent.isExprResult() ||\n            (parent.isAssign() \u0026\u0026\n             parent.getFirstChild() \u003d\u003d n)) {\n          docInfo \u003d n.getJSDocInfo();\n          if (docInfo \u003d\u003d null) {\n            docInfo \u003d parent.getJSDocInfo();\n          }\n          if (docInfo !\u003d null) {\n            ObjectType lhsType \u003d\n                dereferenceToObject(n.getFirstChild().getJSType());\n            if (lhsType !\u003d null) {\n              // Put the JSDoc in the property slot, if there is one.\n              String propName \u003d n.getLastChild().getString();\n              if (lhsType.hasOwnProperty(propName)) {\n                lhsType.setPropertyJSDocInfo(propName, docInfo);\n              }\n\n              // Put the JSDoc in any constructors or function shapes as well.\n              ObjectType propType \u003d\n                  dereferenceToObject(lhsType.getPropertyType(propName));\n              if (propType !\u003d null) {\n                attachJSDocInfoToNominalTypeOrShape(\n                    propType, docInfo, n.getQualifiedName());\n              }\n            }\n          }\n        }\n        break;\n    }\n  }",
    "begin_line": 93,
    "end_line": 189,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InferJSDocInfo.dereferenceToObject#194",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/InferJSDocInfo.java",
    "class_name": "com.google.javascript.jscomp.InferJSDocInfo",
    "signature": "com.google.javascript.jscomp.InferJSDocInfo.dereferenceToObject(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private ObjectType dereferenceToObject(JSType type) {\n    return ObjectType.cast(type \u003d\u003d null ? null : type.dereference());\n  }",
    "begin_line": 194,
    "end_line": 196,
    "comment": "/** \n * Dereferences the given type to an object, or returns null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InferJSDocInfo.attachJSDocInfoToNominalTypeOrShape#201",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/InferJSDocInfo.java",
    "class_name": "com.google.javascript.jscomp.InferJSDocInfo",
    "signature": "com.google.javascript.jscomp.InferJSDocInfo.attachJSDocInfoToNominalTypeOrShape(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.JSDocInfo, java.lang.String)",
    "snippet": "private void attachJSDocInfoToNominalTypeOrShape(\n      ObjectType objType, JSDocInfo docInfo, @Nullable String qName) {\n    if (objType.isConstructor() ||\n        objType.isEnumType() ||\n        objType.isInterface()) {\n      // Named types.\n      if (objType.hasReferenceName() \u0026\u0026\n          objType.getReferenceName().equals(qName)) {\n        objType.setJSDocInfo(docInfo);\n\n        if (objType.isConstructor() || objType.isInterface()) {\n          JSType.toMaybeFunctionType(objType).getInstanceType().setJSDocInfo(\n              docInfo);\n        } else if (objType instanceof EnumType) {\n          ((EnumType) objType).getElementsType().setJSDocInfo(docInfo);\n        }\n      }\n    } else if (!objType.isNativeObjectType() \u0026\u0026\n        objType.isFunctionType()) {\n      // Structural functions.\n      objType.setJSDocInfo(docInfo);\n    }\n  }",
    "begin_line": 201,
    "end_line": 223,
    "comment": "/** \n * Handle cases #1 and #3 in the class doc.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSError.make#72",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JSError.java",
    "class_name": "com.google.javascript.jscomp.JSError",
    "signature": "com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
    "snippet": "public static JSError make(DiagnosticType type, String... arguments) {\n    return new JSError(null, null, -1, -1, type, null, arguments);\n  }",
    "begin_line": 72,
    "end_line": 74,
    "comment": "/** \n * Creates a JSError with no source information\n * @param type The DiagnosticType\n * @param arguments Arguments to be incorporated into the message\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSError.make#85",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JSError.java",
    "class_name": "com.google.javascript.jscomp.JSError",
    "signature": "com.google.javascript.jscomp.JSError.make(java.lang.String, int, int, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
    "snippet": "public static JSError make(String sourceName, int lineno, int charno,\n                             DiagnosticType type, String... arguments) {\n    return new JSError(sourceName, null, lineno, charno, type, null, arguments);\n  }",
    "begin_line": 85,
    "end_line": 88,
    "comment": "/** \n * Creates a JSError at a given source location\n * @param sourceName The source file name\n * @param lineno Line number with source file, or -1 if unknown\n * @param charno Column number within line, or -1 for whole line.\n * @param type The DiagnosticType\n * @param arguments Arguments to be incorporated into the message\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSError.make#99",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JSError.java",
    "class_name": "com.google.javascript.jscomp.JSError",
    "signature": "com.google.javascript.jscomp.JSError.make(java.lang.String, int, int, com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
    "snippet": "public static JSError make(String sourceName, int lineno, int charno,\n      CheckLevel level, DiagnosticType type, String... arguments) {\n    return new JSError(\n        sourceName, null, lineno, charno, type, level, arguments);\n  }",
    "begin_line": 99,
    "end_line": 103,
    "comment": "/** \n * Creates a JSError at a given source location\n * @param sourceName The source file name\n * @param lineno Line number with source file, or -1 if unknown\n * @param charno Column number within line, or -1 for whole line.\n * @param type The DiagnosticType\n * @param arguments Arguments to be incorporated into the message\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSError.make#113",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JSError.java",
    "class_name": "com.google.javascript.jscomp.JSError",
    "signature": "com.google.javascript.jscomp.JSError.make(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
    "snippet": "public static JSError make(String sourceName, Node n,\n                             DiagnosticType type, String... arguments) {\n    return new JSError(sourceName, n, type, arguments);\n  }",
    "begin_line": 113,
    "end_line": 116,
    "comment": "/** \n * Creates a JSError from a file and Node position.\n * @param sourceName The source file name\n * @param n Determines the line and char position within the source file name\n * @param type The DiagnosticType\n * @param arguments Arguments to be incorporated into the message\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSError.make#125",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JSError.java",
    "class_name": "com.google.javascript.jscomp.JSError",
    "signature": "com.google.javascript.jscomp.JSError.make(com.google.javascript.rhino.Node, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
    "snippet": "public static JSError make(Node n, DiagnosticType type, String... arguments) {\n    return new JSError(n.getSourceFileName(), n, type, arguments);\n  }",
    "begin_line": 125,
    "end_line": 127,
    "comment": "/** \n * Creates a JSError from a file and Node position.\n * @param n Determines the line and char position and source file name\n * @param type The DiagnosticType\n * @param arguments Arguments to be incorporated into the message\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSError.make#137",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JSError.java",
    "class_name": "com.google.javascript.jscomp.JSError",
    "signature": "com.google.javascript.jscomp.JSError.make(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
    "snippet": "public static JSError make(String sourceName, Node n, CheckLevel level,\n      DiagnosticType type, String... arguments) {\n\n    return new JSError(sourceName, n, n.getLineno(), n.getCharno(), type, level,\n        arguments);\n  }",
    "begin_line": 137,
    "end_line": 142,
    "comment": "/** \n * Creates a JSError from a file and Node position.\n * @param sourceName The source file name\n * @param n Determines the line and char position within the source file name\n * @param type The DiagnosticType\n * @param arguments Arguments to be incorporated into the message\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSError.JSError#152",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JSError.java",
    "class_name": "com.google.javascript.jscomp.JSError",
    "signature": "com.google.javascript.jscomp.JSError.JSError(java.lang.String, com.google.javascript.rhino.Node, int, int, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.CheckLevel, java.lang.String)",
    "snippet": "private JSError(\n      String sourceName, @Nullable Node node, int lineno, int charno,\n      DiagnosticType type, CheckLevel level, String... arguments) {\n    this.type \u003d type;\n    this.node \u003d node;\n    this.description \u003d type.format.format(arguments);\n    this.lineNumber \u003d lineno;\n    this.charno \u003d charno;\n    this.sourceName \u003d sourceName;\n    this.defaultLevel \u003d level \u003d\u003d null ? type.level : level;\n    this.level \u003d level \u003d\u003d null ? type.level : level;\n  }",
    "begin_line": 152,
    "end_line": 163,
    "comment": "/** \n * Creates a JSError at a CheckLevel for a source file location. Private to avoid any entanglement with code outside of the compiler.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSError.JSError#169",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JSError.java",
    "class_name": "com.google.javascript.jscomp.JSError",
    "signature": "com.google.javascript.jscomp.JSError.JSError(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
    "snippet": "private JSError(String sourceName, @Nullable Node node,\n                  DiagnosticType type, String... arguments) {\n    this(sourceName,\n         node,\n         (node !\u003d null) ? node.getLineno() : -1,\n         (node !\u003d null) ? node.getCharno() : -1,\n         type, null, arguments);\n  }",
    "begin_line": 169,
    "end_line": 176,
    "comment": "/** \n * Creates a JSError for a source file location.  Private to avoid any entanglement with code outside of the compiler.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSError.getType#178",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JSError.java",
    "class_name": "com.google.javascript.jscomp.JSError",
    "signature": "com.google.javascript.jscomp.JSError.getType()",
    "snippet": "public DiagnosticType getType() {\n    return type;\n  }",
    "begin_line": 178,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSError.format#187",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JSError.java",
    "class_name": "com.google.javascript.jscomp.JSError",
    "signature": "com.google.javascript.jscomp.JSError.format(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.MessageFormatter)",
    "snippet": "public String format(CheckLevel level, MessageFormatter formatter) {\n    switch (level) {\n      case ERROR:\n        return formatter.formatError(this);\n\n      case WARNING:\n        return formatter.formatWarning(this);\n\n      default:\n        return null;\n    }\n  }",
    "begin_line": 187,
    "end_line": 198,
    "comment": "/** \n * Format a message at the given level.\n * @return the formatted message or {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSError.toString#201",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JSError.java",
    "class_name": "com.google.javascript.jscomp.JSError",
    "signature": "com.google.javascript.jscomp.JSError.toString()",
    "snippet": "@Override\n  public String toString() {\n    // TODO(user): remove custom toString.\n    return type.key + \". \" + description + \" at \" +\n      (sourceName !\u003d null \u0026\u0026 sourceName.length() \u003e 0 ?\n       sourceName : \"(unknown source)\") + \" line \" +\n      (lineNumber !\u003d -1 ? String.valueOf(lineNumber) : \"(unknown line)\") +\n      \" : \" + (charno !\u003d -1 ? String.valueOf(charno) : \"(unknown column)\");\n  }",
    "begin_line": 201,
    "end_line": 208,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSError.getCharno#213",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JSError.java",
    "class_name": "com.google.javascript.jscomp.JSError",
    "signature": "com.google.javascript.jscomp.JSError.getCharno()",
    "snippet": "public int getCharno() {\n    return charno;\n  }",
    "begin_line": 213,
    "end_line": 215,
    "comment": "/** \n * Get the character number.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSError.getLineNumber#220",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JSError.java",
    "class_name": "com.google.javascript.jscomp.JSError",
    "signature": "com.google.javascript.jscomp.JSError.getLineNumber()",
    "snippet": "public int getLineNumber() {\n    return lineNumber;\n  }",
    "begin_line": 220,
    "end_line": 222,
    "comment": "/** \n * Get the line number. One-based.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSError.getNodeSourceOffset#228",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JSError.java",
    "class_name": "com.google.javascript.jscomp.JSError",
    "signature": "com.google.javascript.jscomp.JSError.getNodeSourceOffset()",
    "snippet": "public int getNodeSourceOffset() {\n    return node !\u003d null ? node.getSourceOffset() : -1;\n  }",
    "begin_line": 228,
    "end_line": 230,
    "comment": "/** \n * @return the offset of the region the Error applies to, or -1 if the offsetis unknown.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSError.getNodeLength#236",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JSError.java",
    "class_name": "com.google.javascript.jscomp.JSError",
    "signature": "com.google.javascript.jscomp.JSError.getNodeLength()",
    "snippet": "public int getNodeLength() {\n    return node !\u003d null ? node.getLength() : 0;\n  }",
    "begin_line": 236,
    "end_line": 238,
    "comment": "/** \n * @return the length of the region the Error applies to, or 0 if the lengthis unknown.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSError.getDefaultLevel#241",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JSError.java",
    "class_name": "com.google.javascript.jscomp.JSError",
    "signature": "com.google.javascript.jscomp.JSError.getDefaultLevel()",
    "snippet": "public CheckLevel getDefaultLevel() {\n    return defaultLevel;\n  }",
    "begin_line": 241,
    "end_line": 243,
    "comment": "/** \n * The default level, before any of the WarningsGuards are applied. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSError.equals#246",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JSError.java",
    "class_name": "com.google.javascript.jscomp.JSError",
    "signature": "com.google.javascript.jscomp.JSError.equals(java.lang.Object)",
    "snippet": "@Override\n  public boolean equals(Object o) {\n    // Generated by Intellij IDEA\n    if (this \u003d\u003d o) {\n      return true;\n    }\n    if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {\n      return false;\n    }\n\n    JSError jsError \u003d (JSError) o;\n\n    if (charno !\u003d jsError.charno) {\n      return false;\n    }\n    if (lineNumber !\u003d jsError.lineNumber) {\n      return false;\n    }\n    if (!description.equals(jsError.description)) {\n      return false;\n    }\n    if (defaultLevel !\u003d jsError.defaultLevel) {\n      return false;\n    }\n    if (sourceName !\u003d null ? !sourceName.equals(jsError.sourceName)\n        : jsError.sourceName !\u003d null) {\n      return false;\n    }\n    if (!type.equals(jsError.type)) {\n      return false;\n    }\n\n    return true;\n  }",
    "begin_line": 246,
    "end_line": 278,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSError.hashCode#281",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JSError.java",
    "class_name": "com.google.javascript.jscomp.JSError",
    "signature": "com.google.javascript.jscomp.JSError.hashCode()",
    "snippet": "@Override\n  public int hashCode() {\n    // Generated by Intellij IDEA\n    int result \u003d type.hashCode();\n    result \u003d 31 * result + description.hashCode();\n    result \u003d 31 * result + (sourceName !\u003d null ? sourceName.hashCode() : 0);\n    result \u003d 31 * result + lineNumber;\n    result \u003d 31 * result + defaultLevel.hashCode();\n    result \u003d 31 * result + charno;\n    return result;\n  }",
    "begin_line": 281,
    "end_line": 290,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BinaryJoinOp.apply#37",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JoinOp.java",
    "class_name": "com.google.javascript.jscomp.JoinOp",
    "signature": "com.google.javascript.jscomp.JoinOp.apply(java.util.List\u003cL\u003e)",
    "snippet": "@Override\n    public final L apply(List\u003cL\u003e values) {\n      Preconditions.checkArgument(!values.isEmpty());\n      int size \u003d values.size();\n      if (size \u003d\u003d 1) {\n        return values.get(0);\n      } else if (size \u003d\u003d 2) {\n        return apply(values.get(0), values.get(1));\n      } else {\n        int mid \u003d computeMidPoint(size);\n        return apply(\n            apply(values.subList(0, mid)),\n            apply(values.subList(mid, size)));\n      }\n    }",
    "begin_line": 37,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BinaryJoinOp.apply#57",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JoinOp.java",
    "class_name": "com.google.javascript.jscomp.JoinOp",
    "signature": "com.google.javascript.jscomp.JoinOp.apply(L, L)",
    "snippet": "abstract L apply(L latticeA, L latticeB);",
    "begin_line": 57,
    "end_line": 57,
    "comment": "/** \n * Creates a new lattice that will be the join of two input lattices.\n * @return The join of {@code latticeA} and {@code latticeB}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BinaryJoinOp.computeMidPoint#66",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JoinOp.java",
    "class_name": "com.google.javascript.jscomp.JoinOp",
    "signature": "com.google.javascript.jscomp.JoinOp.computeMidPoint(int)",
    "snippet": "static int computeMidPoint(int size) {\n      int midpoint \u003d size \u003e\u003e\u003e 1;\n      if (size \u003e 4) {\n        /* Any list longer than 4 should prefer an even split point\n         * over the true midpoint, so that [0,6] splits at 2, not 3. */\n        midpoint \u0026\u003d -2; // (0xfffffffe) clears low bit so midpoint is even\n      }\n      return midpoint;\n    }",
    "begin_line": 66,
    "end_line": 74,
    "comment": "/** \n * Finds the midpoint of a list. The function will favor two lists of even length instead of two lists of the same odd length. The list must be at least length two.\n * @param size Size of the list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsAst.JsAst#43",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsAst.java",
    "class_name": "com.google.javascript.jscomp.JsAst",
    "signature": "com.google.javascript.jscomp.JsAst.JsAst(com.google.javascript.jscomp.SourceFile)",
    "snippet": "public JsAst(SourceFile sourceFile) {\n    this.inputId \u003d new InputId(sourceFile.getName());\n    this.sourceFile \u003d sourceFile;\n    this.fileName \u003d sourceFile.getName();\n  }",
    "begin_line": 43,
    "end_line": 47,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsAst.getAstRoot#50",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsAst.java",
    "class_name": "com.google.javascript.jscomp.JsAst",
    "signature": "com.google.javascript.jscomp.JsAst.getAstRoot(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "@Override\n  public Node getAstRoot(AbstractCompiler compiler) {\n    if (root \u003d\u003d null) {\n      parse(compiler);\n      root.setInputId(inputId);\n    }\n    return root;\n  }",
    "begin_line": 50,
    "end_line": 56,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsAst.clearAst#59",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsAst.java",
    "class_name": "com.google.javascript.jscomp.JsAst",
    "signature": "com.google.javascript.jscomp.JsAst.clearAst()",
    "snippet": "@Override\n  public void clearAst() {\n    root \u003d null;\n    // While we\u0027re at it, clear out any saved text in the source file on\n    // the assumption that if we\u0027re dumping the parse tree, then we probably\n    // assume regenerating everything else is a smart idea also.\n    sourceFile.clearCachedSource();\n  }",
    "begin_line": 59,
    "end_line": 65,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsAst.getInputId#68",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsAst.java",
    "class_name": "com.google.javascript.jscomp.JsAst",
    "signature": "com.google.javascript.jscomp.JsAst.getInputId()",
    "snippet": "@Override\n  public InputId getInputId() {\n    return inputId;\n  }",
    "begin_line": 68,
    "end_line": 70,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsAst.getSourceFile#73",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsAst.java",
    "class_name": "com.google.javascript.jscomp.JsAst",
    "signature": "com.google.javascript.jscomp.JsAst.getSourceFile()",
    "snippet": "@Override\n  public SourceFile getSourceFile() {\n    return sourceFile;\n  }",
    "begin_line": 73,
    "end_line": 75,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsAst.setSourceFile#78",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsAst.java",
    "class_name": "com.google.javascript.jscomp.JsAst",
    "signature": "com.google.javascript.jscomp.JsAst.setSourceFile(com.google.javascript.jscomp.SourceFile)",
    "snippet": "@Override\n  public void setSourceFile(SourceFile file) {\n    Preconditions.checkState(fileName.equals(file.getName()));\n    sourceFile \u003d file;\n  }",
    "begin_line": 78,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsAst.parse#83",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsAst.java",
    "class_name": "com.google.javascript.jscomp.JsAst",
    "signature": "com.google.javascript.jscomp.JsAst.parse(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "private void parse(AbstractCompiler compiler) {\n    try {\n      logger_.fine(\"Parsing: \" + sourceFile.getName());\n      ParserRunner.ParseResult result \u003d ParserRunner.parse(sourceFile, sourceFile.getCode(),\n          compiler.getParserConfig(),\n          compiler.getDefaultErrorReporter(),\n          logger_);\n      root \u003d result.ast;\n      compiler.setOldParseTree(sourceFile.getName(), result.oldAst);\n    } catch (IOException e) {\n      compiler.report(\n          JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n    }\n\n    if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n      // There was a parse error or IOException, so use a dummy block.\n      root \u003d IR.script();\n    } else {\n      compiler.prepareAst(root);\n    }\n\n    // Set the source name so that the compiler passes can track\n    // the source file and module.\n    root.setStaticSourceFile(sourceFile);\n  }",
    "begin_line": 83,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.JsMessageVisitor#154",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.JsMessageVisitor(com.google.javascript.jscomp.AbstractCompiler, boolean, com.google.javascript.jscomp.JsMessage.Style, com.google.javascript.jscomp.JsMessage.IdGenerator)",
    "snippet": " JsMessageVisitor(AbstractCompiler compiler,\n      boolean needToCheckDuplications,\n      JsMessage.Style style, JsMessage.IdGenerator idGenerator) {\n\n    this.compiler \u003d compiler;\n    this.needToCheckDuplications \u003d needToCheckDuplications;\n    this.style \u003d style;\n    this.idGenerator \u003d idGenerator;\n\n    checkLevel \u003d (style \u003d\u003d JsMessage.Style.CLOSURE)\n        ? CheckLevel.ERROR : CheckLevel.WARNING;\n\n    // TODO(anatol): add flag that decides whether to process UNNAMED messages.\n    // Some projects would not want such functionality (unnamed) as they don\u0027t\n    // use SOY templates.\n  }",
    "begin_line": 154,
    "end_line": 169,
    "comment": "/** \n * Creates JS message visitor.\n * @param compiler the compiler instance\n * @param needToCheckDuplications whether to check duplicated messages intraversed\n * @param style style that should be used during parsing\n * @param idGenerator generator that used for creating unique ID for themessage\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.process#172",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n\n    for (Map.Entry\u003cNode, String\u003e msgNode : googMsgNodes.entrySet()) {\n      compiler.report(JSError.make(msgNode.getValue(), msgNode.getKey(),\n          checkLevel, MESSAGE_NODE_IS_ORPHANED));\n    }\n  }",
    "begin_line": 172,
    "end_line": 179,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.visit#182",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void visit(NodeTraversal traversal, Node node, Node parent) {\n    String messageKey;\n    boolean isVar;\n    Node msgNode, msgNodeParent;\n\n    switch (node.getType()) {\n      case Token.NAME:\n        // var MSG_HELLO \u003d \u0027Message\u0027\n        if ((parent !\u003d null) \u0026\u0026 (parent.isVar())) {\n          messageKey \u003d node.getString();\n          isVar \u003d true;\n        } else {\n          return;\n        }\n\n        msgNode \u003d node.getFirstChild();\n        msgNodeParent \u003d node;\n        break;\n      case Token.ASSIGN:\n        // somenamespace.someclass.MSG_HELLO \u003d \u0027Message\u0027\n        isVar \u003d false;\n\n        Node getProp \u003d node.getFirstChild();\n        if (!getProp.isGetProp()) {\n          return;\n        }\n\n        Node propNode \u003d getProp.getLastChild();\n\n        messageKey \u003d propNode.getString();\n        msgNode \u003d node.getLastChild();\n        msgNodeParent \u003d node;\n        break;\n      case Token.CALL:\n        // goog.getMsg()\n        String fnName \u003d node.getFirstChild().getQualifiedName();\n        if (MSG_FUNCTION_NAME.equals(fnName)) {\n          googMsgNodes.put(node, traversal.getSourceName());\n        } else if (MSG_FALLBACK_FUNCTION_NAME.equals(fnName)) {\n          visitFallbackFunctionCall(traversal, node);\n        }\n        return;\n      default:\n        return;\n    }\n\n    // Is this a message name?\n    boolean isNewStyleMessage \u003d\n        msgNode !\u003d null \u0026\u0026 msgNode.isCall();\n    if (!isMessageName(messageKey, isNewStyleMessage)) {\n      return;\n    }\n\n    if (msgNode \u003d\u003d null) {\n      compiler.report(\n          traversal.makeError(node, MESSAGE_HAS_NO_VALUE, messageKey));\n      return;\n    }\n\n    // Just report a warning if a qualified messageKey that looks like a message\n    // (e.g. \"a.b.MSG_X\") doesn\u0027t use goog.getMsg().\n    if (isNewStyleMessage) {\n      googMsgNodes.remove(msgNode);\n    } else if (style !\u003d JsMessage.Style.LEGACY) {\n      compiler.report(traversal.makeError(node, checkLevel,\n          MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX));\n    }\n\n    boolean isUnnamedMsg \u003d isUnnamedMessageName(messageKey);\n\n    Builder builder \u003d new Builder(\n        isUnnamedMsg ? null : messageKey);\n    builder.setSourceName(traversal.getSourceName());\n\n    try {\n      if (isVar) {\n        extractMessageFromVariable(builder, node, parent, parent.getParent());\n      } else {\n        extractMessageFromProperty(builder, node.getFirstChild(), node);\n      }\n    } catch (MalformedException ex) {\n      compiler.report(traversal.makeError(ex.getNode(),\n          MESSAGE_TREE_MALFORMED, ex.getMessage()));\n      return;\n    }\n\n    JsMessage extractedMessage \u003d builder.build(idGenerator);\n\n    // If asked to check named internal messages.\n    if (needToCheckDuplications\n        \u0026\u0026 !isUnnamedMsg\n        \u0026\u0026 !extractedMessage.isExternal()) {\n      checkIfMessageDuplicated(messageKey, msgNode);\n    }\n    trackMessage(traversal, extractedMessage,\n        messageKey, msgNode, isUnnamedMsg);\n\n    if (extractedMessage.isEmpty()) {\n      // value of the message is an empty string. Translators do not like it.\n      compiler.report(traversal.makeError(node, MESSAGE_HAS_NO_TEXT,\n          messageKey));\n    }\n\n    // New-style messages must have descriptions. We don\u0027t emit a warning\n    // for legacy-style messages, because there are thousands of\n    // them in legacy code that are not worth the effort to fix, since they\u0027ve\n    // already been translated anyway.\n    String desc \u003d extractedMessage.getDesc();\n    if (isNewStyleMessage\n        \u0026\u0026 (desc \u003d\u003d null || desc.trim().isEmpty())\n        \u0026\u0026 !extractedMessage.isExternal()) {\n      compiler.report(traversal.makeError(node, MESSAGE_HAS_NO_DESCRIPTION,\n          messageKey));\n    }\n\n    JsMessageDefinition msgDefinition \u003d new JsMessageDefinition(\n        node, msgNode, msgNodeParent);\n    processJsMessage(extractedMessage, msgDefinition);\n  }",
    "begin_line": 182,
    "end_line": 300,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.trackMessage#310",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.trackMessage(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.jscomp.JsMessage, java.lang.String, com.google.javascript.rhino.Node, boolean)",
    "snippet": "private void trackMessage(\n      NodeTraversal t, JsMessage message, String msgName,\n      Node msgNode, boolean isUnnamedMessage) {\n    if (!isUnnamedMessage) {\n      MessageLocation location \u003d new MessageLocation(message, msgNode);\n      messageNames.put(msgName, location);\n    } else if (msgNode.isName()) {\n      Var var \u003d t.getScope().getVar(msgName);\n      if (var !\u003d null) {\n        unnamedMessages.put(var, message);\n      }\n    }\n  }",
    "begin_line": 310,
    "end_line": 322,
    "comment": "/** \n * Track a message for later retrieval. This is used for tracking duplicates, and for figuring out message fallback. Not all message types are trackable, because that would require a more sophisticated analysis. e.g., function f(s) { s.MSG_UNNAMED_X \u003d \u0027Some untrackable message\u0027; }\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.getTrackedMessage#325",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.getTrackedMessage(com.google.javascript.jscomp.NodeTraversal, java.lang.String)",
    "snippet": "private JsMessage getTrackedMessage(NodeTraversal t, String msgName) {\n    boolean isUnnamedMessage \u003d isUnnamedMessageName(msgName);\n    if (!isUnnamedMessage) {\n      MessageLocation location \u003d messageNames.get(msgName);\n      return location \u003d\u003d null ? null : location.message;\n    } else {\n      Var var \u003d t.getScope().getVar(msgName);\n      if (var !\u003d null) {\n        return unnamedMessages.get(var);\n      }\n    }\n    return null;\n  }",
    "begin_line": 325,
    "end_line": 337,
    "comment": "/** \n * Get a previously tracked message. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.checkIfMessageDuplicated#346",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.checkIfMessageDuplicated(java.lang.String, com.google.javascript.rhino.Node)",
    "snippet": "private void checkIfMessageDuplicated(String msgName, Node msgNode) {\n    if (messageNames.containsKey(msgName)) {\n      MessageLocation location \u003d messageNames.get(msgName);\n      compiler.report(JSError.make(msgNode, MESSAGE_DUPLICATE_KEY,\n          msgName, location.messageNode.getSourceFileName(),\n          Integer.toString(location.messageNode.getLineno())));\n    }\n  }",
    "begin_line": 346,
    "end_line": 353,
    "comment": "/** \n * Checks if message already processed. If so - it generates \u0027message duplicated\u0027 compiler error.\n * @param msgName the name of the message\n * @param msgNode the node that represents JS message\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.extractMessageFromVariable#369",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.extractMessageFromVariable(com.google.javascript.jscomp.JsMessage.Builder, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private void extractMessageFromVariable(\n      Builder builder, Node nameNode, Node parentNode,\n      @Nullable Node grandParentNode) throws MalformedException {\n\n    // Determine the message\u0027s value\n    Node valueNode \u003d nameNode.getFirstChild();\n    switch (valueNode.getType()) {\n      case Token.STRING:\n      case Token.ADD:\n        maybeInitMetaDataFromJsDocOrHelpVar(builder, parentNode,\n            grandParentNode);\n        builder.appendStringPart(extractStringFromStringExprNode(valueNode));\n        break;\n      case Token.FUNCTION:\n        maybeInitMetaDataFromJsDocOrHelpVar(builder, parentNode,\n            grandParentNode);\n        extractFromFunctionNode(builder, valueNode);\n        break;\n      case Token.CALL:\n        maybeInitMetaDataFromJsDoc(builder, parentNode);\n        extractFromCallNode(builder, valueNode);\n        break;\n      default:\n        throw new MalformedException(\"Cannot parse value of message \"\n            + builder.getKey(), valueNode);\n    }\n  }",
    "begin_line": 369,
    "end_line": 395,
    "comment": "/** \n * Creates a  {@link JsMessage} for a JS message defined using a JS variabledeclaration (e.g \u003ccode\u003evar MSG_X \u003d ...;\u003c/code\u003e).\n * @param builder the message builder\n * @param nameNode a NAME node for a JS message variable\n * @param parentNode a VAR node, parent of {@code nameNode}\n * @param grandParentNode the grandparent of {@code nameNode}. This node is only used to get meta data about the message that might be surrounding it (e.g. a message description). This argument may be null if the meta data is not needed.\n * @throws MalformedException if {@code varNode} does notcorrespond to a valid JS message VAR node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.extractMessageFromProperty#407",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.extractMessageFromProperty(com.google.javascript.jscomp.JsMessage.Builder, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private void extractMessageFromProperty(\n      Builder builder, Node getPropNode, Node assignNode)\n      throws MalformedException {\n    Node callNode \u003d getPropNode.getNext();\n    maybeInitMetaDataFromJsDoc(builder, assignNode);\n    extractFromCallNode(builder, callNode);\n  }",
    "begin_line": 407,
    "end_line": 413,
    "comment": "/** \n * Creates a  {@link JsMessage} for a JS message defined using an assignment toa qualified name (e.g \u003ccode\u003ea.b.MSG_X \u003d goog.getMsg(...);\u003c/code\u003e).\n * @param builder the message builder\n * @param getPropNode a GETPROP node in a JS message assignment\n * @param assignNode an ASSIGN node, parent of {@code getPropNode}.\n * @throws MalformedException if {@code getPropNode} does notcorrespond to a valid JS message node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.maybeInitMetaDataFromJsDocOrHelpVar#423",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.maybeInitMetaDataFromJsDocOrHelpVar(com.google.javascript.jscomp.JsMessage.Builder, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private void maybeInitMetaDataFromJsDocOrHelpVar(\n      Builder builder, Node varNode, @Nullable Node parentOfVarNode)\n      throws MalformedException {\n\n    // First check description in @desc\n    if (maybeInitMetaDataFromJsDoc(builder, varNode)) {\n      return;\n    }\n\n    // Check the preceding node for meta data\n    if ((parentOfVarNode !\u003d null) \u0026\u0026\n        maybeInitMetaDataFromHelpVar(builder,\n            parentOfVarNode.getChildBefore(varNode))) {\n      return;\n    }\n\n    // Check the subsequent node for meta data\n    maybeInitMetaDataFromHelpVar(builder, varNode.getNext());\n  }",
    "begin_line": 423,
    "end_line": 441,
    "comment": "/** \n * Initializes the meta data in a JsMessage by examining the nodes just before and after a message VAR node.\n * @param builder the message builder whose meta data will be initialized\n * @param varNode the message VAR node\n * @param parentOfVarNode {@code varNode}\u0027s parent node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.maybeInitMetaDataFromHelpVar#451",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.maybeInitMetaDataFromHelpVar(com.google.javascript.jscomp.JsMessage.Builder, com.google.javascript.rhino.Node)",
    "snippet": "private boolean maybeInitMetaDataFromHelpVar(Builder builder,\n      @Nullable Node sibling) throws MalformedException {\n    if ((sibling !\u003d null) \u0026\u0026 (sibling.isVar())) {\n      Node nameNode \u003d sibling.getFirstChild();\n      String name \u003d nameNode.getString();\n      if (name.equals(builder.getKey() + DESC_SUFFIX)) {\n        Node valueNode \u003d nameNode.getFirstChild();\n        String desc \u003d extractStringFromStringExprNode(valueNode);\n        if (desc.startsWith(HIDDEN_DESC_PREFIX)) {\n          builder.setDesc(desc.substring(HIDDEN_DESC_PREFIX.length()).trim());\n          builder.setIsHidden(true);\n        } else {\n          builder.setDesc(desc);\n        }\n        return true;\n      }\n    }\n    return false;\n  }",
    "begin_line": 451,
    "end_line": 469,
    "comment": "/** \n * Initializes the meta data in a JsMessage by examining a node just before or after a message VAR node.\n * @param builder the message builder whose meta data will be initialized\n * @param sibling a node adjacent to the message VAR node\n * @return true iff message has corresponding description variable\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.maybeInitMetaDataFromJsDoc#480",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.maybeInitMetaDataFromJsDoc(com.google.javascript.jscomp.JsMessage.Builder, com.google.javascript.rhino.Node)",
    "snippet": "private boolean maybeInitMetaDataFromJsDoc(Builder builder, Node node) {\n    boolean messageHasDesc \u003d false;\n    JSDocInfo info \u003d node.getJSDocInfo();\n    if (info !\u003d null) {\n      String desc \u003d info.getDescription();\n      if (desc !\u003d null) {\n        builder.setDesc(desc);\n        messageHasDesc \u003d true;\n      }\n      if (info.isHidden()) {\n        builder.setIsHidden(true);\n      }\n      if (info.getMeaning() !\u003d null) {\n        builder.setMeaning(info.getMeaning());\n      }\n    }\n\n    return messageHasDesc;\n  }",
    "begin_line": 480,
    "end_line": 498,
    "comment": "/** \n * Initializes the meta data in a message builder given a node that may contain JsDoc properties.\n * @param builder the message builder whose meta data will be initialized\n * @param node the node with the message\u0027s JSDoc properties\n * @return true if message has JsDoc with valid description in @descannotation\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.extractStringFromStringExprNode#509",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.extractStringFromStringExprNode(com.google.javascript.rhino.Node)",
    "snippet": "private static String extractStringFromStringExprNode(Node node)\n      throws MalformedException {\n    switch (node.getType()) {\n      case Token.STRING:\n        return node.getString();\n      case Token.ADD:\n        StringBuilder sb \u003d new StringBuilder();\n        for (Node child : node.children()) {\n          sb.append(extractStringFromStringExprNode(child));\n        }\n        return sb.toString();\n      default:\n        throw new MalformedException(\"STRING or ADD node expected; found: \" +\n                getReadableTokenName(node), node);\n    }\n  }",
    "begin_line": 509,
    "end_line": 524,
    "comment": "/** \n * Returns the string value associated with a node representing a JS string or several JS strings added together (e.g.  {@code \u0027str\u0027} or {@code \u0027s\u0027 + \u0027t\u0027 +\u0027r\u0027}).\n * @param node the node from where we extract the string\n * @return String representation of the node\n * @throws MalformedException if the parsed message is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.extractFromFunctionNode#550",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.extractFromFunctionNode(com.google.javascript.jscomp.JsMessage.Builder, com.google.javascript.rhino.Node)",
    "snippet": "private void extractFromFunctionNode(Builder builder, Node node)\n      throws MalformedException {\n    Set\u003cString\u003e phNames \u003d Sets.newHashSet();\n\n    for (Node fnChild : node.children()) {\n      switch (fnChild.getType()) {\n        case Token.NAME:\n          // This is okay. The function has a name, but it is empty.\n          break;\n        case Token.PARAM_LIST:\n          // Parse the placeholder names from the function argument list.\n          for (Node argumentNode : fnChild.children()) {\n            if (argumentNode.isName()) {\n              String phName \u003d argumentNode.getString();\n              if (phNames.contains(phName)) {\n                throw new MalformedException(\"Duplicate placeholder name: \"\n                    + phName, argumentNode);\n              } else {\n                phNames.add(phName);\n              }\n            }\n          }\n          break;\n        case Token.BLOCK:\n          // Build the message\u0027s value by examining the return statement\n          Node returnNode \u003d fnChild.getFirstChild();\n          if (!returnNode.isReturn()) {\n            throw new MalformedException(\"RETURN node expected; found: \"\n                + getReadableTokenName(returnNode), returnNode);\n          }\n          for (Node child : returnNode.children()) {\n            extractFromReturnDescendant(builder, child);\n          }\n\n          // Check that all placeholders from the message text have appropriate\n          // object literal keys\n          for (String phName : builder.getPlaceholders()) {\n            if(!phNames.contains(phName)) {\n              throw new MalformedException(\n                  \"Unrecognized message placeholder referenced: \" + phName,\n                  returnNode);\n            }\n          }\n          break;\n        default:\n          throw new MalformedException(\n              \"NAME, LP, or BLOCK node expected; found: \"\n                  + getReadableTokenName(node), fnChild);\n      }\n    }\n  }",
    "begin_line": 550,
    "end_line": 600,
    "comment": "/** \n * Initializes a message builder from a FUNCTION node. \u003cp\u003e \u003cpre\u003e The tree should look something like: function |-- name |-- lp |   |-- name \u003carg1\u003e |    -- name \u003carg2\u003e -- block | --return | --add |-- string foo -- name \u003carg1\u003e \u003c/pre\u003e\n * @param builder the message builder\n * @param node the function node that contains a message\n * @throws MalformedException if the parsed message is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.extractFromReturnDescendant#610",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.extractFromReturnDescendant(com.google.javascript.jscomp.JsMessage.Builder, com.google.javascript.rhino.Node)",
    "snippet": "private void extractFromReturnDescendant(Builder builder, Node node)\n      throws MalformedException {\n\n    switch (node.getType()) {\n      case Token.STRING:\n        builder.appendStringPart(node.getString());\n        break;\n      case Token.NAME:\n        builder.appendPlaceholderReference(node.getString());\n        break;\n      case Token.ADD:\n        for (Node child : node.children()) {\n          extractFromReturnDescendant(builder, child);\n        }\n        break;\n      default:\n        throw new MalformedException(\n            \"STRING, NAME, or ADD node expected; found: \"\n                + getReadableTokenName(node), node);\n    }\n  }",
    "begin_line": 610,
    "end_line": 630,
    "comment": "/** \n * Appends value parts to the message builder by traversing the descendants of the given RETURN node.\n * @param builder the message builder\n * @param node the node from where we extract a message\n * @throws MalformedException if the parsed message is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.extractFromCallNode#656",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.extractFromCallNode(com.google.javascript.jscomp.JsMessage.Builder, com.google.javascript.rhino.Node)",
    "snippet": "private void extractFromCallNode(Builder builder,\n      Node node) throws MalformedException {\n    // Check the function being called\n    if (!node.isCall()) {\n      throw new MalformedException(\n          \"Message must be initialized using \" + MSG_FUNCTION_NAME +\n          \" function.\", node);\n    }\n\n    Node fnNameNode \u003d node.getFirstChild();\n    if (!MSG_FUNCTION_NAME.equals(fnNameNode.getQualifiedName())) {\n      throw new MalformedException(\n          \"Message initialized using unrecognized function. \" +\n          \"Please use \" + MSG_FUNCTION_NAME + \"() instead.\", fnNameNode);\n    }\n\n    // Get the message string\n    Node stringLiteralNode \u003d fnNameNode.getNext();\n    if (stringLiteralNode \u003d\u003d null) {\n      throw new MalformedException(\"Message string literal expected\",\n          stringLiteralNode);\n    }\n    // Parse the message string and append parts to the builder\n    parseMessageTextNode(builder, stringLiteralNode);\n\n    Node objLitNode \u003d stringLiteralNode.getNext();\n    Set\u003cString\u003e phNames \u003d Sets.newHashSet();\n    if (objLitNode !\u003d null) {\n      // Register the placeholder names\n      if (!objLitNode.isObjectLit()) {\n        throw new MalformedException(\"OBJLIT node expected\", objLitNode);\n      }\n      for (Node aNode \u003d objLitNode.getFirstChild(); aNode !\u003d null;\n           aNode \u003d aNode.getNext()) {\n        if (!aNode.isStringKey()) {\n          throw new MalformedException(\"STRING_KEY node expected as OBJLIT key\",\n              aNode);\n        }\n        String phName \u003d aNode.getString();\n        if (!isLowerCamelCaseWithNumericSuffixes(phName)) {\n          throw new MalformedException(\n              \"Placeholder name not in lowerCamelCase: \" + phName, aNode);\n        }\n\n        if (phNames.contains(phName)) {\n          throw new MalformedException(\"Duplicate placeholder name: \"\n              + phName, aNode);\n        }\n\n        phNames.add(phName);\n      }\n    }\n\n    // Check that all placeholders from the message text have appropriate objlit\n    // values\n    Set\u003cString\u003e usedPlaceholders \u003d builder.getPlaceholders();\n    for (String phName : usedPlaceholders) {\n      if(!phNames.contains(phName)) {\n        throw new MalformedException(\n            \"Unrecognized message placeholder referenced: \" + phName,\n            objLitNode);\n      }\n    }\n\n    // Check that objLiteral have only names that are present in the\n    // message text\n    for (String phName : phNames) {\n      if(!usedPlaceholders.contains(phName)) {\n        throw new MalformedException(\n            \"Unused message placeholder: \" + phName,\n            objLitNode);\n      }\n    }\n  }",
    "begin_line": 656,
    "end_line": 729,
    "comment": "/** \n * Initializes a message builder from a CALL node. \u003cp\u003e The tree should look something like: \u003cpre\u003e call |-- getprop |   |-- name \u0027goog\u0027 |   +-- string \u0027getMsg\u0027 | |-- string \u0027Hi {$userName}! Welcome to {$product}.\u0027 +-- objlit |-- string \u0027userName\u0027 |-- name \u0027someUserName\u0027 |-- string \u0027product\u0027 +-- call +-- name \u0027getProductName\u0027 \u003c/pre\u003e\n * @param builder the message builder\n * @param node the call node from where we extract the message\n * @throws MalformedException if the parsed message is invalid\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.parseMessageTextNode#740",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.parseMessageTextNode(com.google.javascript.jscomp.JsMessage.Builder, com.google.javascript.rhino.Node)",
    "snippet": "private void parseMessageTextNode(Builder builder, Node node)\n      throws MalformedException {\n    String value \u003d extractStringFromStringExprNode(node);\n\n    while(true) {\n      int phBegin \u003d value.indexOf(PH_JS_PREFIX);\n      if (phBegin \u003c 0) {\n        // Just a string literal\n        builder.appendStringPart(value);\n        return;\n      } else {\n        if (phBegin \u003e 0) {\n          // A string literal followed by a placeholder\n          builder.appendStringPart(value.substring(0, phBegin));\n        }\n\n        // A placeholder. Find where it ends\n        int phEnd \u003d value.indexOf(PH_JS_SUFFIX, phBegin);\n        if (phEnd \u003c 0) {\n          throw new MalformedException(\n              \"Placeholder incorrectly formatted in: \" + builder.getKey(),\n              node);\n        }\n\n        String phName \u003d value.substring(phBegin + PH_JS_PREFIX.length(),\n            phEnd);\n        builder.appendPlaceholderReference(phName);\n        int nextPos \u003d phEnd + PH_JS_SUFFIX.length();\n        if (nextPos \u003c value.length()) {\n          // Iterate on the rest of the message value\n          value \u003d value.substring(nextPos);\n        } else {\n          // The message is parsed\n          return;\n        }\n      }\n    }\n  }",
    "begin_line": 740,
    "end_line": 777,
    "comment": "/** \n * Appends the message parts in a JS message value extracted from the given text node.\n * @param builder the JS message builder to append parts to\n * @param node the node with string literal that contains the message text\n * @throws MalformedException if {@code value} contains a reference toan unregistered placeholder\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.visitFallbackFunctionCall#780",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.visitFallbackFunctionCall(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void visitFallbackFunctionCall(NodeTraversal t, Node call) {\n    // Check to make sure the function call looks like:\n    // goog.getMsgWithFallback(MSG_1, MSG_2);\n    if (call.getChildCount() !\u003d 3 ||\n        !call.getChildAtIndex(1).isName() ||\n        !call.getChildAtIndex(2).isName()) {\n      compiler.report(t.makeError(call, BAD_FALLBACK_SYNTAX));\n      return;\n    }\n\n    Node firstArg \u003d call.getChildAtIndex(1);\n    JsMessage firstMessage \u003d getTrackedMessage(t, firstArg.getString());\n    if (firstMessage \u003d\u003d null) {\n      compiler.report(\n          t.makeError(firstArg, FALLBACK_ARG_ERROR, firstArg.getString()));\n      return;\n    }\n\n    Node secondArg \u003d firstArg.getNext();\n    JsMessage secondMessage \u003d getTrackedMessage(\n        t, call.getChildAtIndex(2).getString());\n    if (secondMessage \u003d\u003d null) {\n      compiler.report(\n          t.makeError(secondArg, FALLBACK_ARG_ERROR, secondArg.getString()));\n      return;\n    }\n\n    processMessageFallback(call, firstMessage, secondMessage);\n  }",
    "begin_line": 780,
    "end_line": 808,
    "comment": "/** \n * Visit a call to goog.getMsgWithFallback. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.processJsMessage#825",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.processJsMessage(com.google.javascript.jscomp.JsMessage, com.google.javascript.jscomp.JsMessageDefinition)",
    "snippet": "abstract void processJsMessage(JsMessage message,\n      JsMessageDefinition definition);",
    "begin_line": 825,
    "end_line": 826,
    "comment": "/** \n * Processes found JS message. Several examples of \"standard\" processing routines are: \u003col\u003e \u003cli\u003eextract all JS messages \u003cli\u003ereplace JS messages with localized versions for some specific language \u003cli\u003echeck that messages have correct syntax and present in localization bundle \u003c/ol\u003e\n * @param message the found message\n * @param definition the definition of the object and usually contains alladditional message information like message node/parent\u0027s node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.processMessageFallback#834",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.processMessageFallback(com.google.javascript.rhino.Node, com.google.javascript.jscomp.JsMessage, com.google.javascript.jscomp.JsMessage)",
    "snippet": "void processMessageFallback(Node callNode, JsMessage message1,\n      JsMessage message2) {}",
    "begin_line": 834,
    "end_line": 835,
    "comment": "/** \n * Processes the goog.getMsgWithFallback primitive. goog.getMsgWithFallback(MSG_1, MSG_2); By default, does nothing.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.isMessageName#840",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.isMessageName(java.lang.String, boolean)",
    "snippet": "boolean isMessageName(String identifier, boolean isNewStyleMessage) {\n    return identifier.startsWith(MSG_PREFIX) \u0026\u0026\n        (style \u003d\u003d JsMessage.Style.CLOSURE || isNewStyleMessage ||\n         !identifier.endsWith(DESC_SUFFIX));\n  }",
    "begin_line": 840,
    "end_line": 844,
    "comment": "/** \n * Returns whether the given JS identifier is a valid JS message name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.isUnnamedMessageName#849",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.isUnnamedMessageName(java.lang.String)",
    "snippet": "private static boolean isUnnamedMessageName(String identifier) {\n    return MSG_UNNAMED_PATTERN.matcher(identifier).matches();\n  }",
    "begin_line": 849,
    "end_line": 851,
    "comment": "/** \n * Returns whether the given message name is in the unnamed namespace.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.isLowerCamelCaseWithNumericSuffixes#857",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.isLowerCamelCaseWithNumericSuffixes(java.lang.String)",
    "snippet": "static boolean isLowerCamelCaseWithNumericSuffixes(String input) {\n    return CAMELCASE_PATTERN.matcher(input).matches();\n  }",
    "begin_line": 857,
    "end_line": 859,
    "comment": "/** \n * Returns whether a string is nonempty, begins with a lowercase letter, and contains only digits and underscores after the first underscore.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.getReadableTokenName#864",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.getReadableTokenName(com.google.javascript.rhino.Node)",
    "snippet": "private static String getReadableTokenName(Node node) {\n    return Token.name(node.getType());\n  }",
    "begin_line": 864,
    "end_line": 866,
    "comment": "/** \n * Returns human-readable name of the given node\u0027s type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.toLowerCamelCaseWithNumericSuffixes#873",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.toLowerCamelCaseWithNumericSuffixes(java.lang.String)",
    "snippet": "static String toLowerCamelCaseWithNumericSuffixes(String input) {\n    // Determine where the numeric suffixes begin\n    int suffixStart \u003d input.length();\n    while (suffixStart \u003e 0) {\n      char ch \u003d \u0027\\0\u0027;\n      int numberStart \u003d suffixStart;\n      while (numberStart \u003e 0) {\n        ch \u003d input.charAt(numberStart - 1);\n        if (Character.isDigit(ch)) {\n          numberStart--;\n        } else {\n          break;\n        }\n      }\n      if ((numberStart \u003e 0) \u0026\u0026 (numberStart \u003c suffixStart) \u0026\u0026 (ch \u003d\u003d \u0027_\u0027)) {\n        suffixStart \u003d numberStart - 1;\n      } else {\n        break;\n      }\n    }\n\n    if (suffixStart \u003d\u003d input.length()) {\n      return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, input);\n    } else {\n      return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL,\n          input.substring(0, suffixStart)) +\n          input.substring(suffixStart);\n    }\n  }",
    "begin_line": 873,
    "end_line": 901,
    "comment": "/** \n * Converts the given string from upper-underscore case to lower-camel case, preserving numeric suffixes. For example: \"NAME\" -\u003e \"name\" \"A4_LETTER\" -\u003e \"a4Letter\" \"START_SPAN_1_23\" -\u003e \"startSpan_1_23\".\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsMessageVisitor.checkNode#908",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.checkNode(com.google.javascript.rhino.Node, int)",
    "snippet": "protected void checkNode(@Nullable Node node, int type) throws MalformedException {\n    if (node \u003d\u003d null) {\n      throw new MalformedException(\n          \"Expected node type \" + type + \"; found: null\", node);\n    }\n    if (node.getType() !\u003d type) {\n      throw new MalformedException(\n          \"Expected node type \" + type + \"; found: \" + node.getType(), node);\n    }\n  }",
    "begin_line": 908,
    "end_line": 917,
    "comment": "/** \n * Checks a node\u0027s type.\n * @throws MalformedException if the node is null or the wrong type\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MalformedException.MalformedException#924",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.MalformedException(java.lang.String, com.google.javascript.rhino.Node)",
    "snippet": " MalformedException(String message, Node node) {\n      super(message);\n      this.node \u003d node;\n    }",
    "begin_line": 924,
    "end_line": 927,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MalformedException.getNode#929",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.getNode()",
    "snippet": "Node getNode() {\n      return node;\n    }",
    "begin_line": 929,
    "end_line": 931,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MessageLocation.MessageLocation#938",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/JsMessageVisitor.java",
    "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
    "signature": "com.google.javascript.jscomp.JsMessageVisitor.MessageLocation(com.google.javascript.jscomp.JsMessage, com.google.javascript.rhino.Node)",
    "snippet": "private MessageLocation(JsMessage message, Node messageNode) {\n      this.message \u003d message;\n      this.messageNode \u003d messageNode;\n    }",
    "begin_line": 938,
    "end_line": 941,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LightweightMessageFormatter.LightweightMessageFormatter#39",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LightweightMessageFormatter.java",
    "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
    "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter()",
    "snippet": "private LightweightMessageFormatter() {\n    super(null);\n    this.excerpt \u003d LINE;\n  }",
    "begin_line": 39,
    "end_line": 42,
    "comment": "/** \n * A constructor for when the client doesn\u0027t care about source information.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LightweightMessageFormatter.LightweightMessageFormatter#44",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LightweightMessageFormatter.java",
    "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
    "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider)",
    "snippet": "public LightweightMessageFormatter(SourceExcerptProvider source) {\n    this(source, LINE);\n  }",
    "begin_line": 44,
    "end_line": 46,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LightweightMessageFormatter.LightweightMessageFormatter#48",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LightweightMessageFormatter.java",
    "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
    "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider, com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt)",
    "snippet": "public LightweightMessageFormatter(SourceExcerptProvider source,\n      SourceExcerpt excerpt) {\n    super(source);\n    Preconditions.checkNotNull(source);\n    this.excerpt \u003d excerpt;\n  }",
    "begin_line": 48,
    "end_line": 53,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LightweightMessageFormatter.withoutSource#55",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LightweightMessageFormatter.java",
    "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
    "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.withoutSource()",
    "snippet": "static LightweightMessageFormatter withoutSource() {\n    return new LightweightMessageFormatter();\n  }",
    "begin_line": 55,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LightweightMessageFormatter.formatError#60",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LightweightMessageFormatter.java",
    "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
    "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.formatError(com.google.javascript.jscomp.JSError)",
    "snippet": "@Override\n  public String formatError(JSError error) {\n    return format(error, false);\n  }",
    "begin_line": 60,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LightweightMessageFormatter.formatWarning#65",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LightweightMessageFormatter.java",
    "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
    "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.formatWarning(com.google.javascript.jscomp.JSError)",
    "snippet": "@Override\n  public String formatWarning(JSError warning) {\n    return format(warning, true);\n  }",
    "begin_line": 65,
    "end_line": 67,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LightweightMessageFormatter.format#69",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LightweightMessageFormatter.java",
    "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
    "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.format(com.google.javascript.jscomp.JSError, boolean)",
    "snippet": "private String format(JSError error, boolean warning) {\n    // extract source excerpt\n    SourceExcerptProvider source \u003d getSource();\n    String sourceExcerpt \u003d source \u003d\u003d null ? null :\n        excerpt.get(\n            source, error.sourceName, error.lineNumber, excerptFormatter);\n\n    // formatting the message\n    StringBuilder b \u003d new StringBuilder();\n    if (error.sourceName !\u003d null) {\n      b.append(error.sourceName);\n      if (error.lineNumber \u003e 0) {\n        b.append(\u0027:\u0027);\n        b.append(error.lineNumber);\n      }\n      b.append(\": \");\n    }\n\n    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n\n    b.append(error.description);\n    b.append(\u0027\\n\u0027);\n    if (sourceExcerpt !\u003d null) {\n      b.append(sourceExcerpt);\n      b.append(\u0027\\n\u0027);\n      int charno \u003d error.getCharno();\n\n      // padding equal to the excerpt and arrow at the end\n      // charno \u003d\u003d sourceExpert.length() means something is missing\n      // at the end of the line\n      if (excerpt.equals(LINE)\n          \u0026\u0026 0 \u003c\u003d charno \u0026\u0026 charno \u003c\u003d sourceExcerpt.length()) {\n        for (int i \u003d 0; i \u003c charno; i++) {\n          char c \u003d sourceExcerpt.charAt(i);\n          if (Character.isWhitespace(c)) {\n            b.append(c);\n          } else {\n            b.append(\u0027 \u0027);\n          }\n        }\n        b.append(\"^\\n\");\n      }\n    }\n    return b.toString();\n  }",
    "begin_line": 69,
    "end_line": 114,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LineNumberingFormatter.formatLine#125",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LightweightMessageFormatter.java",
    "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
    "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.formatLine(java.lang.String, int)",
    "snippet": "@Override\n    public String formatLine(String line, int lineNumber) {\n      return line;\n    }",
    "begin_line": 125,
    "end_line": 127,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LineNumberingFormatter.formatRegion#130",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LightweightMessageFormatter.java",
    "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
    "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.formatRegion(com.google.javascript.jscomp.Region)",
    "snippet": "@Override\n    public String formatRegion(Region region) {\n      if (region \u003d\u003d null) {\n        return null;\n      }\n      String code \u003d region.getSourceExcerpt();\n      if (code.length() \u003d\u003d 0) {\n        return null;\n      }\n\n      // max length of the number display\n      int numberLength \u003d Integer.toString(region.getEndingLineNumber())\n          .length();\n\n      // formatting\n      StringBuilder builder \u003d new StringBuilder(code.length() * 2);\n      int start \u003d 0;\n      int end \u003d code.indexOf(\u0027\\n\u0027, start);\n      int lineNumber \u003d region.getBeginningLineNumber();\n      while (start \u003e\u003d 0) {\n        // line extraction\n        String line;\n        if (end \u003c 0) {\n          line \u003d code.substring(start);\n          if (line.length() \u003d\u003d 0) {\n            return builder.substring(0, builder.length() - 1);\n          }\n        } else {\n          line \u003d code.substring(start, end);\n        }\n        builder.append(\"  \");\n\n        // nice spaces for the line number\n        int spaces \u003d numberLength - Integer.toString(lineNumber).length();\n        builder.append(Strings.repeat(\" \", spaces));\n        builder.append(lineNumber);\n        builder.append(\"| \");\n\n        // end \u0026 update\n        if (end \u003c 0) {\n          builder.append(line);\n          start \u003d -1;\n        } else {\n          builder.append(line);\n          builder.append(\u0027\\n\u0027);\n          start \u003d end + 1;\n          end \u003d code.indexOf(\u0027\\n\u0027, start);\n          lineNumber++;\n        }\n      }\n      return builder.toString();\n    }",
    "begin_line": 130,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedFlowScope.LinkedFlowScope#64",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowScope(com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache, com.google.javascript.jscomp.LinkedFlowScope)",
    "snippet": "private LinkedFlowScope(FlatFlowScopeCache cache,\n      LinkedFlowScope directParent) {\n    this.cache \u003d cache;\n    if (directParent \u003d\u003d null) {\n      this.lastSlot \u003d null;\n      this.depth \u003d 0;\n      this.parent \u003d cache.linkedEquivalent;\n    } else {\n      this.lastSlot \u003d directParent.lastSlot;\n      this.depth \u003d directParent.depth + 1;\n      this.parent \u003d directParent;\n    }\n  }",
    "begin_line": 64,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedFlowScope.LinkedFlowScope#78",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowScope(com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache)",
    "snippet": " LinkedFlowScope(FlatFlowScopeCache cache) {\n    this(cache, null);\n  }",
    "begin_line": 78,
    "end_line": 80,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedFlowScope.LinkedFlowScope#82",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowScope(com.google.javascript.jscomp.LinkedFlowScope)",
    "snippet": " LinkedFlowScope(LinkedFlowScope directParent) {\n    this(directParent.cache, directParent);\n  }",
    "begin_line": 82,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedFlowScope.getFunctionScope#87",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.getFunctionScope()",
    "snippet": "private Scope getFunctionScope() {\n    return cache.functionScope;\n  }",
    "begin_line": 87,
    "end_line": 89,
    "comment": "/** \n * Gets the function scope for this flow scope. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedFlowScope.flowsFromBottom#92",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.flowsFromBottom()",
    "snippet": "private boolean flowsFromBottom() {\n    return getFunctionScope().isBottom();\n  }",
    "begin_line": 92,
    "end_line": 94,
    "comment": "/** \n * Whether this flows from a bottom scope. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedFlowScope.createEntryLattice#99",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.createEntryLattice(com.google.javascript.jscomp.Scope)",
    "snippet": "public static LinkedFlowScope createEntryLattice(Scope scope) {\n    return new LinkedFlowScope(new FlatFlowScopeCache(scope));\n  }",
    "begin_line": 99,
    "end_line": 101,
    "comment": "/** \n * Creates an entry lattice for the flow.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedFlowScope.inferSlotType#104",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.inferSlotType(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public void inferSlotType(String symbol, JSType type) {\n    Preconditions.checkState(!frozen);\n    lastSlot \u003d new LinkedFlowSlot(symbol, type, lastSlot);\n    depth++;\n    cache.dirtySymbols.add(symbol);\n  }",
    "begin_line": 104,
    "end_line": 109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedFlowScope.inferQualifiedSlot#112",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.inferQualifiedSlot(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public void inferQualifiedSlot(Node node, String symbol, JSType bottomType,\n      JSType inferredType) {\n    Scope functionScope \u003d getFunctionScope();\n    if (functionScope.isLocal()) {\n      if (functionScope.getVar(symbol) \u003d\u003d null \u0026\u0026 !functionScope.isBottom()) {\n        functionScope.declare(symbol, node, bottomType, null);\n      }\n\n      inferSlotType(symbol, inferredType);\n    }\n  }",
    "begin_line": 112,
    "end_line": 122,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedFlowScope.getTypeOfThis#125",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.getTypeOfThis()",
    "snippet": "@Override\n  public JSType getTypeOfThis() {\n    return cache.functionScope.getTypeOfThis();\n  }",
    "begin_line": 125,
    "end_line": 127,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedFlowScope.getRootNode#130",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.getRootNode()",
    "snippet": "@Override\n  public Node getRootNode() {\n    return getFunctionScope().getRootNode();\n  }",
    "begin_line": 130,
    "end_line": 132,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedFlowScope.getParentScope#135",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.getParentScope()",
    "snippet": "@Override\n  public StaticScope\u003cJSType\u003e getParentScope() {\n    return getFunctionScope().getParentScope();\n  }",
    "begin_line": 135,
    "end_line": 137,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedFlowScope.getSlot#143",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.getSlot(java.lang.String)",
    "snippet": "@Override\n  public StaticSlot\u003cJSType\u003e getSlot(String name) {\n    if (cache.dirtySymbols.contains(name)) {\n      for (LinkedFlowSlot slot \u003d lastSlot;\n           slot !\u003d null; slot \u003d slot.parent) {\n        if (slot.getName().equals(name)) {\n          return slot;\n        }\n      }\n    }\n    return cache.getSlot(name);\n  }",
    "begin_line": 143,
    "end_line": 153,
    "comment": "/** \n * Get the slot for the given symbol.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedFlowScope.getOwnSlot#156",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.getOwnSlot(java.lang.String)",
    "snippet": "@Override\n  public StaticSlot\u003cJSType\u003e getOwnSlot(String name) {\n    throw new UnsupportedOperationException();\n  }",
    "begin_line": 156,
    "end_line": 158,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedFlowScope.createChildFlowScope#161",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.createChildFlowScope()",
    "snippet": "@Override\n  public FlowScope createChildFlowScope() {\n    frozen \u003d true;\n\n    if (depth \u003e MAX_DEPTH) {\n      if (flattened \u003d\u003d null) {\n        flattened \u003d new FlatFlowScopeCache(this);\n      }\n      return new LinkedFlowScope(flattened);\n    }\n\n    return new LinkedFlowScope(this);\n  }",
    "begin_line": 161,
    "end_line": 172,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedFlowScope.findUniqueRefinedSlot#180",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.findUniqueRefinedSlot(com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "@Override\n  public StaticSlot\u003cJSType\u003e findUniqueRefinedSlot(FlowScope blindScope) {\n    StaticSlot\u003cJSType\u003e result \u003d null;\n\n    for (LinkedFlowScope currentScope \u003d this;\n         currentScope !\u003d blindScope;\n         currentScope \u003d currentScope.parent) {\n      for (LinkedFlowSlot currentSlot \u003d currentScope.lastSlot;\n           currentSlot !\u003d null \u0026\u0026\n           (currentScope.parent \u003d\u003d null ||\n            currentScope.parent.lastSlot !\u003d currentSlot);\n           currentSlot \u003d currentSlot.parent) {\n        if (result \u003d\u003d null) {\n          result \u003d currentSlot;\n        } else if (!currentSlot.getName().equals(result.getName())) {\n          return null;\n        }\n      }\n    }\n\n    return result;\n  }",
    "begin_line": 180,
    "end_line": 200,
    "comment": "/** \n * Iterate through all the linked flow scopes before this one. If there\u0027s one and only one slot defined between this scope and the blind scope, return it.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedFlowScope.completeScope#208",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.completeScope(com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "@Override\n  public void completeScope(StaticScope\u003cJSType\u003e staticScope) {\n    Scope scope \u003d (Scope) staticScope;\n    for (Iterator\u003cVar\u003e it \u003d scope.getVars(); it.hasNext();) {\n      Var var \u003d it.next();\n      if (var.isTypeInferred()) {\n        JSType type \u003d var.getType();\n        if (type \u003d\u003d null || type.isUnknownType()) {\n          JSType flowType \u003d getSlot(var.getName()).getType();\n          var.setType(flowType);\n        }\n      }\n    }\n  }",
    "begin_line": 208,
    "end_line": 220,
    "comment": "/** \n * Look through the given scope, and try to find slots where it doesn\u0027t have enough type information. Then fill in that type information with stuff that we\u0027ve inferred in the local flow.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedFlowScope.optimize#232",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.optimize()",
    "snippet": " optimize() {\n    LinkedFlowScope current;\n    for (current \u003d this;\n         current.parent !\u003d null \u0026\u0026\n             current.lastSlot \u003d\u003d current.parent.lastSlot;\n         current \u003d current.parent) {}\n    return current;\n  }",
    "begin_line": 232,
    "end_line": 239,
    "comment": "/** \n * Remove flow scopes that add nothing to the flow.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowScopeJoinOp.apply#245",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.apply(com.google.javascript.jscomp.type.FlowScope, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public FlowScope apply(FlowScope a, FlowScope b) {\n      // To join the two scopes, we have to\n      LinkedFlowScope linkedA \u003d (LinkedFlowScope) a;\n      LinkedFlowScope linkedB \u003d (LinkedFlowScope) b;\n      linkedA.frozen \u003d true;\n      linkedB.frozen \u003d true;\n      if (linkedA.optimize() \u003d\u003d linkedB.optimize()) {\n        return linkedA.createChildFlowScope();\n      }\n      return new LinkedFlowScope(new FlatFlowScopeCache(linkedA, linkedB));\n    }",
    "begin_line": 245,
    "end_line": 255,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowScopeJoinOp.equals#259",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.equals(java.lang.Object)",
    "snippet": "@Override\n  public boolean equals(Object other) {\n    if (other instanceof LinkedFlowScope) {\n      LinkedFlowScope that \u003d (LinkedFlowScope) other;\n      if (this.optimize() \u003d\u003d that.optimize()) {\n        return true;\n      }\n\n      // If two flow scopes are in the same function, then they could have\n      // two possible function scopes: the real one and the BOTTOM scope.\n      // If they have different function scopes, we *should* iterate through all\n      // the variables in each scope and compare. However, 99.9% of the time,\n      // they\u0027re not equal. And the other .1% of the time, we can pretend\n      // they\u0027re equal--this just means that data flow analysis will have\n      // to propagate the entry lattice a little bit further than it\n      // really needs to. Everything will still come out ok.\n      if (this.getFunctionScope() !\u003d that.getFunctionScope()) {\n        return false;\n      }\n\n      if (cache \u003d\u003d that.cache) {\n        // If the two flow scopes have the same cache, then we can check\n        // equality a lot faster: by just looking at the \"dirty\" elements\n        // in the cache, and comparing them in both scopes.\n        for (String name : cache.dirtySymbols) {\n          if (diffSlots(getSlot(name), that.getSlot(name))) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      Map\u003cString, StaticSlot\u003cJSType\u003e\u003e myFlowSlots \u003d allFlowSlots();\n      Map\u003cString, StaticSlot\u003cJSType\u003e\u003e otherFlowSlots \u003d that.allFlowSlots();\n\n      for (StaticSlot\u003cJSType\u003e slot : myFlowSlots.values()) {\n        if (diffSlots(slot, otherFlowSlots.get(slot.getName()))) {\n          return false;\n        }\n        otherFlowSlots.remove(slot.getName());\n      }\n      for (StaticSlot\u003cJSType\u003e slot : otherFlowSlots.values()) {\n        if (diffSlots(slot, myFlowSlots.get(slot.getName()))) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }",
    "begin_line": 259,
    "end_line": 308,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowScopeJoinOp.diffSlots#314",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.diffSlots(com.google.javascript.rhino.jstype.StaticSlot\u003ccom.google.javascript.rhino.jstype.JSType\u003e, com.google.javascript.rhino.jstype.StaticSlot\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "private boolean diffSlots(StaticSlot\u003cJSType\u003e slotA,\n                            StaticSlot\u003cJSType\u003e slotB) {\n    boolean aIsNull \u003d slotA \u003d\u003d null || slotA.getType() \u003d\u003d null;\n    boolean bIsNull \u003d slotB \u003d\u003d null || slotB.getType() \u003d\u003d null;\n    if (aIsNull \u0026\u0026 bIsNull) {\n      return false;\n    } else if (aIsNull ^ bIsNull) {\n      return true;\n    }\n\n    // Both slots and types must be non-null.\n    return slotA.getType().differsFrom(slotB.getType());\n  }",
    "begin_line": 314,
    "end_line": 326,
    "comment": "/** \n * Determines whether two slots are meaningfully different for the purposes of data flow analysis.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowScopeJoinOp.allFlowSlots#346",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.allFlowSlots()",
    "snippet": "private Map\u003cString, StaticSlot\u003cJSType\u003e\u003e allFlowSlots() {\n    Map\u003cString, StaticSlot\u003cJSType\u003e\u003e slots \u003d Maps.newHashMap();\n    for (LinkedFlowSlot slot \u003d lastSlot;\n         slot !\u003d null; slot \u003d slot.parent) {\n      if (!slots.containsKey(slot.getName())) {\n        slots.put(slot.getName(), slot);\n      }\n    }\n\n    for (Map.Entry\u003cString, StaticSlot\u003cJSType\u003e\u003e symbolEntry : cache.symbols.entrySet()) {\n      if (!slots.containsKey(symbolEntry.getKey())) {\n        slots.put(symbolEntry.getKey(), symbolEntry.getValue());\n      }\n    }\n\n    return slots;\n  }",
    "begin_line": 346,
    "end_line": 362,
    "comment": "/** \n * Gets all the symbols that have been defined before this point in the current flow. Does not return slots that have not changed during the flow. For example, consider the code: \u003ccode\u003e var x \u003d 3; function f() { var y \u003d 5; y \u003d 6; // FLOW POINT var z \u003d y; return z; } \u003c/code\u003e A FlowScope at FLOW POINT will return a slot for y, but not a slot for x or z.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedFlowSlot.LinkedFlowSlot#370",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowSlot(java.lang.String, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowSlot)",
    "snippet": " LinkedFlowSlot(String name, JSType type, LinkedFlowSlot parent) {\n      super(name, type, true);\n      this.parent \u003d parent;\n    }",
    "begin_line": 370,
    "end_line": 373,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlatFlowScopeCache.FlatFlowScopeCache#402",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache(com.google.javascript.jscomp.Scope)",
    "snippet": " FlatFlowScopeCache(Scope functionScope) {\n      this.functionScope \u003d functionScope;\n      symbols \u003d ImmutableMap.of();\n      linkedEquivalent \u003d null;\n    }",
    "begin_line": 402,
    "end_line": 406,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlatFlowScopeCache.FlatFlowScopeCache#409",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache(com.google.javascript.jscomp.LinkedFlowScope)",
    "snippet": " FlatFlowScopeCache(LinkedFlowScope directParent) {\n      FlatFlowScopeCache cache \u003d directParent.cache;\n\n      functionScope \u003d cache.functionScope;\n      symbols \u003d directParent.allFlowSlots();\n      linkedEquivalent \u003d directParent;\n    }",
    "begin_line": 409,
    "end_line": 415,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlatFlowScopeCache.FlatFlowScopeCache#418",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache(com.google.javascript.jscomp.LinkedFlowScope, com.google.javascript.jscomp.LinkedFlowScope)",
    "snippet": " FlatFlowScopeCache(LinkedFlowScope joinedScopeA,\n        LinkedFlowScope joinedScopeB) {\n      linkedEquivalent \u003d null;\n\n      // Always prefer the \"real\" function scope to the faked-out\n      // bottom scope.\n      functionScope \u003d joinedScopeA.flowsFromBottom() ?\n          joinedScopeB.getFunctionScope() : joinedScopeA.getFunctionScope();\n\n      Map\u003cString, StaticSlot\u003cJSType\u003e\u003e slotsA \u003d joinedScopeA.allFlowSlots();\n      Map\u003cString, StaticSlot\u003cJSType\u003e\u003e slotsB \u003d joinedScopeB.allFlowSlots();\n\n      symbols \u003d slotsA;\n\n      // There are 5 different join cases:\n      // 1) The type is declared in joinedScopeA, not in joinedScopeB,\n      //    and not in functionScope. Just use the one in A.\n      // 2) The type is declared in joinedScopeB, not in joinedScopeA,\n      //    and not in functionScope. Just use the one in B.\n      // 3) The type is declared in functionScope and joinedScopeA, but\n      //    not in joinedScopeB. Join the two types.\n      // 4) The type is declared in functionScope and joinedScopeB, but\n      //    not in joinedScopeA. Join the two types.\n      // 5) The type is declared in joinedScopeA and joinedScopeB. Join\n      //    the two types.\n      Set\u003cString\u003e symbolNames \u003d Sets.newHashSet(symbols.keySet());\n      symbolNames.addAll(slotsB.keySet());\n\n      for (String name : symbolNames) {\n        StaticSlot\u003cJSType\u003e slotA \u003d slotsA.get(name);\n        StaticSlot\u003cJSType\u003e slotB \u003d slotsB.get(name);\n\n        JSType joinedType \u003d null;\n        if (slotB \u003d\u003d null || slotB.getType() \u003d\u003d null) {\n          StaticSlot\u003cJSType\u003e fnSlot\n              \u003d joinedScopeB.getFunctionScope().getSlot(name);\n          JSType fnSlotType \u003d fnSlot \u003d\u003d null ? null : fnSlot.getType();\n          if (fnSlotType \u003d\u003d null) {\n            // Case #1 -- already inserted.\n          } else {\n            // Case #3\n            joinedType \u003d slotA.getType().getLeastSupertype(fnSlotType);\n          }\n        } else if (slotA \u003d\u003d null || slotA.getType() \u003d\u003d null) {\n          StaticSlot\u003cJSType\u003e fnSlot\n              \u003d joinedScopeA.getFunctionScope().getSlot(name);\n          JSType fnSlotType \u003d fnSlot \u003d\u003d null ? null : fnSlot.getType();\n          if (fnSlotType \u003d\u003d null) {\n            // Case #2\n            symbols.put(name, slotB);\n          } else {\n            // Case #4\n            joinedType \u003d slotB.getType().getLeastSupertype(fnSlotType);\n          }\n        } else {\n          // Case #5\n          joinedType \u003d\n              slotA.getType().getLeastSupertype(slotB.getType());\n        }\n\n        if (joinedType !\u003d null) {\n          symbols.put(name, new SimpleSlot(name, joinedType, true));\n        }\n      }\n    }",
    "begin_line": 418,
    "end_line": 482,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlatFlowScopeCache.getSlot#487",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LinkedFlowScope.java",
    "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
    "signature": "com.google.javascript.jscomp.LinkedFlowScope.getSlot(java.lang.String)",
    "snippet": "public StaticSlot\u003cJSType\u003e getSlot(String name) {\n      if (symbols.containsKey(name)) {\n        return symbols.get(name);\n      } else {\n        return functionScope.getSlot(name);\n      }\n    }",
    "begin_line": 487,
    "end_line": 493,
    "comment": "/** \n * Get the slot for the given symbol.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LoggerErrorManager.LoggerErrorManager#37",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LoggerErrorManager.java",
    "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
    "signature": "com.google.javascript.jscomp.LoggerErrorManager.LoggerErrorManager(com.google.javascript.jscomp.MessageFormatter, java.util.logging.Logger)",
    "snippet": "public LoggerErrorManager(MessageFormatter formatter, Logger logger) {\n    this.formatter \u003d formatter;\n    this.logger \u003d logger;\n  }",
    "begin_line": 37,
    "end_line": 40,
    "comment": "/** \n * Creates an instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LoggerErrorManager.LoggerErrorManager#45",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LoggerErrorManager.java",
    "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
    "signature": "com.google.javascript.jscomp.LoggerErrorManager.LoggerErrorManager(java.util.logging.Logger)",
    "snippet": "public LoggerErrorManager(Logger logger) {\n    this(ErrorFormat.SOURCELESS.toFormatter(null, false), logger);\n  }",
    "begin_line": 45,
    "end_line": 47,
    "comment": "/** \n * Creates an instance with a source-less error formatter.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LoggerErrorManager.println#50",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LoggerErrorManager.java",
    "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
    "signature": "com.google.javascript.jscomp.LoggerErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
    "snippet": "@Override\n  public void println(CheckLevel level, JSError error) {\n    switch (level) {\n      case ERROR:\n        logger.severe(error.format(level, formatter));\n        break;\n      case WARNING:\n        logger.warning(error.format(level, formatter));\n        break;\n    }\n  }",
    "begin_line": 50,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LoggerErrorManager.printSummary#62",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/LoggerErrorManager.java",
    "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
    "signature": "com.google.javascript.jscomp.LoggerErrorManager.printSummary()",
    "snippet": "@Override\n  protected void printSummary() {\n    Level level \u003d (getErrorCount() + getWarningCount() \u003d\u003d 0) ?\n        Level.INFO : Level.WARNING;\n    if (getTypedPercent() \u003e 0.0) {\n      logger.log(level, \"{0} error(s), {1} warning(s), {2,number,#.#}% typed\",\n          new Object[] {getErrorCount(), getWarningCount(), getTypedPercent()});\n    } else {\n      if (getErrorCount() + getWarningCount() \u003e 0) {\n        logger.log(level, \"{0} error(s), {1} warning(s)\",\n            new Object[] {getErrorCount(), getWarningCount()});\n      }\n    }\n  }",
    "begin_line": 62,
    "end_line": 74,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemoizedScopeCreator.MemoizedScopeCreator#55",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/MemoizedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.MemoizedScopeCreator",
    "signature": "com.google.javascript.jscomp.MemoizedScopeCreator.MemoizedScopeCreator(com.google.javascript.jscomp.ScopeCreator)",
    "snippet": " MemoizedScopeCreator(ScopeCreator delegate) {\n    this.delegate \u003d delegate;\n  }",
    "begin_line": 55,
    "end_line": 57,
    "comment": "/** \n * @param delegate The real source of Scope objects.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemoizedScopeCreator.getReferences#60",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/MemoizedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.MemoizedScopeCreator",
    "signature": "com.google.javascript.jscomp.MemoizedScopeCreator.getReferences(com.google.javascript.jscomp.Scope.Var)",
    "snippet": "@Override\n  public Iterable\u003cVar\u003e getReferences(Var var) {\n    return ImmutableList.of(var);\n  }",
    "begin_line": 60,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemoizedScopeCreator.getScope#65",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/MemoizedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.MemoizedScopeCreator",
    "signature": "com.google.javascript.jscomp.MemoizedScopeCreator.getScope(com.google.javascript.jscomp.Scope.Var)",
    "snippet": "@Override\n  public Scope getScope(Var var) {\n    return var.scope;\n  }",
    "begin_line": 65,
    "end_line": 67,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemoizedScopeCreator.getAllSymbols#70",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/MemoizedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.MemoizedScopeCreator",
    "signature": "com.google.javascript.jscomp.MemoizedScopeCreator.getAllSymbols()",
    "snippet": "@Override\n  public Iterable\u003cVar\u003e getAllSymbols() {\n    List\u003cVar\u003e vars \u003d Lists.newArrayList();\n    for (Scope s : scopes.values()) {\n      Iterables.addAll(vars, s.getAllSymbols());\n    }\n    return vars;\n  }",
    "begin_line": 70,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemoizedScopeCreator.createScope#79",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/MemoizedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.MemoizedScopeCreator",
    "signature": "com.google.javascript.jscomp.MemoizedScopeCreator.createScope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
    "snippet": "@Override\n  public Scope createScope(Node n, Scope parent) {\n    Scope scope \u003d scopes.get(n);\n    if (scope \u003d\u003d null) {\n      scope \u003d delegate.createScope(n, parent);\n      scopes.put(n, scope);\n    } else {\n      Preconditions.checkState(parent \u003d\u003d scope.getParent());\n    }\n    return scope;\n  }",
    "begin_line": 79,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemoizedScopeCreator.getAllMemoizedScopes#90",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/MemoizedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.MemoizedScopeCreator",
    "signature": "com.google.javascript.jscomp.MemoizedScopeCreator.getAllMemoizedScopes()",
    "snippet": "Collection\u003cScope\u003e getAllMemoizedScopes() {\n    return Collections.unmodifiableCollection(scopes.values());\n  }",
    "begin_line": 90,
    "end_line": 92,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemoizedScopeCreator.getScopeIfMemoized#94",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/MemoizedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.MemoizedScopeCreator",
    "signature": "com.google.javascript.jscomp.MemoizedScopeCreator.getScopeIfMemoized(com.google.javascript.rhino.Node)",
    "snippet": "Scope getScopeIfMemoized(Node n) {\n    return scopes.get(n);\n  }",
    "begin_line": 94,
    "end_line": 96,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemoizedScopeCreator.removeScopesForScript#103",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/MemoizedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.MemoizedScopeCreator",
    "signature": "com.google.javascript.jscomp.MemoizedScopeCreator.removeScopesForScript(java.lang.String)",
    "snippet": "void removeScopesForScript(String scriptName) {\n    for (Node scopeRoot : ImmutableSet.copyOf(scopes.keySet())) {\n      if (scriptName.equals(scopeRoot.getSourceFileName())) {\n        scopes.remove(scopeRoot);\n      }\n    }\n  }",
    "begin_line": 103,
    "end_line": 109,
    "comment": "/** \n * Removes all scopes with root nodes from a given script file.\n * @param scriptName the name of the script file to remove nodes for.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Callback.shouldTraverse#96",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent);",
    "begin_line": 96,
    "end_line": 96,
    "comment": "/** \n * \u003cp\u003eVisits a node in pre order (before visiting its children) and decides whether this node\u0027s children should be traversed. If children are traversed, they will be visited by {@link #visit(NodeTraversal,Node,Node)} in post order.\u003c/p\u003e\u003cp\u003eImplementations can have side effects (e.g. modifying the parse tree).\u003c/p\u003e\n * @return whether the children of this node should be visited\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Callback.visit#105",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "void visit(NodeTraversal t, Node n, Node parent);",
    "begin_line": 105,
    "end_line": 105,
    "comment": "/** \n * \u003cp\u003eVisits a node in post order (after its children have been visited). A node is visited only if all its parents should be traversed ( {@link #shouldTraverse(NodeTraversal,Node,Node)}).\u003c/p\u003e \u003cp\u003eImplementations can have side effects (e.g. modifying the parse tree).\u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ScopedCallback.enterScope#117",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.enterScope(com.google.javascript.jscomp.NodeTraversal)",
    "snippet": "void enterScope(NodeTraversal t);",
    "begin_line": 117,
    "end_line": 117,
    "comment": "/** \n * Called immediately after entering a new scope. The new scope can be accessed through t.getScope()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ScopedCallback.exitScope#123",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.exitScope(com.google.javascript.jscomp.NodeTraversal)",
    "snippet": "void exitScope(NodeTraversal t);",
    "begin_line": 123,
    "end_line": 123,
    "comment": "/** \n * Called immediately before exiting a scope. The ending scope can be accessed through t.getScope()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractPostOrderCallback.shouldTraverse#131",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      return true;\n    }",
    "begin_line": 131,
    "end_line": 134,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopedCallback.shouldTraverse#143",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      return true;\n    }",
    "begin_line": 143,
    "end_line": 146,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopedCallback.enterScope#149",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.enterScope(com.google.javascript.jscomp.NodeTraversal)",
    "snippet": "@Override\n    public void enterScope(NodeTraversal t) {}",
    "begin_line": 149,
    "end_line": 149,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopedCallback.exitScope#152",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.exitScope(com.google.javascript.jscomp.NodeTraversal)",
    "snippet": "@Override\n    public void exitScope(NodeTraversal t) {}",
    "begin_line": 152,
    "end_line": 152,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractShallowCallback.shouldTraverse#161",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      // We do want to traverse the name of a named function, but we don\u0027t\n      // want to traverse the arguments or body.\n      return parent \u003d\u003d null || !parent.isFunction() ||\n          n \u003d\u003d parent.getFirstChild();\n    }",
    "begin_line": 161,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractShallowStatementCallback.shouldTraverse#177",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      return parent \u003d\u003d null || NodeUtil.isControlStructure(parent)\n         || NodeUtil.isStatementBlock(parent);\n    }",
    "begin_line": 177,
    "end_line": 181,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.AbstractNodeTypePruningCallback#196",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.AbstractNodeTypePruningCallback(java.util.Set\u003cjava.lang.Integer\u003e)",
    "snippet": "public AbstractNodeTypePruningCallback(Set\u003cInteger\u003e nodeTypes) {\n      this(nodeTypes, true);\n    }",
    "begin_line": 196,
    "end_line": 198,
    "comment": "/** \n * Creates an abstract pruned callback.\n * @param nodeTypes the nodes to include in the traversal\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.AbstractNodeTypePruningCallback#205",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.AbstractNodeTypePruningCallback(java.util.Set\u003cjava.lang.Integer\u003e, boolean)",
    "snippet": "public AbstractNodeTypePruningCallback(Set\u003cInteger\u003e nodeTypes,\n          boolean include) {\n      this.nodeTypes \u003d nodeTypes;\n      this.include \u003d include;\n    }",
    "begin_line": 205,
    "end_line": 209,
    "comment": "/** \n * Creates an abstract pruned callback.\n * @param nodeTypes the nodes to include/exclude in the traversal\n * @param include whether to include or exclude the nodes in the traversal\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.shouldTraverse#212",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      return include \u003d\u003d nodeTypes.contains(n.getType());\n    }",
    "begin_line": 212,
    "end_line": 215,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.NodeTraversal#221",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback)",
    "snippet": "public NodeTraversal(AbstractCompiler compiler, Callback cb) {\n    this(compiler, cb, new SyntacticScopeCreator(compiler));\n  }",
    "begin_line": 221,
    "end_line": 223,
    "comment": "/** \n * Creates a node traversal using the specified callback interface.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.NodeTraversal#229",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback, com.google.javascript.jscomp.ScopeCreator)",
    "snippet": "public NodeTraversal(AbstractCompiler compiler, Callback cb,\n      ScopeCreator scopeCreator) {\n    this.callback \u003d cb;\n    if (cb instanceof ScopedCallback) {\n      this.scopeCallback \u003d (ScopedCallback) cb;\n    }\n    this.compiler \u003d compiler;\n    this.inputId \u003d null;\n    this.sourceName \u003d \"\";\n    this.scopeCreator \u003d scopeCreator;\n  }",
    "begin_line": 229,
    "end_line": 239,
    "comment": "/** \n * Creates a node traversal using the specified callback interface and the scope creator.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.throwUnexpectedException#241",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.throwUnexpectedException(java.lang.Exception)",
    "snippet": "private void throwUnexpectedException(Exception unexpectedException) {\n    // If there\u0027s an unexpected exception, try to get the\n    // line number of the code that caused it.\n    String message \u003d unexpectedException.getMessage();\n\n    // TODO(user): It is possible to get more information if curNode or\n    // its parent is missing. We still have the scope stack in which it is still\n    // very useful to find out at least which function caused the exception.\n    if (inputId !\u003d null) {\n      message \u003d\n          unexpectedException.getMessage() + \"\\n\" +\n          formatNodeContext(\"Node\", curNode) +\n          (curNode \u003d\u003d null ?\n              \"\" :\n              formatNodeContext(\"Parent\", curNode.getParent()));\n    }\n    compiler.throwInternalError(message, unexpectedException);\n  }",
    "begin_line": 241,
    "end_line": 258,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.formatNodeContext#260",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.formatNodeContext(java.lang.String, com.google.javascript.rhino.Node)",
    "snippet": "private String formatNodeContext(String label, Node n) {\n    if (n \u003d\u003d null) {\n      return \"  \" + label + \": NULL\";\n    }\n    return \"  \" + label + \"(\" + n.toString(false, false, false) + \"): \"\n        + formatNodePosition(n);\n  }",
    "begin_line": 260,
    "end_line": 266,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.traverse#271",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.traverse(com.google.javascript.rhino.Node)",
    "snippet": "public void traverse(Node root) {\n    try {\n      inputId \u003d NodeUtil.getInputId(root);\n      sourceName \u003d \"\";\n      curNode \u003d root;\n      pushScope(root);\n      traverseBranch(root, null);\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }",
    "begin_line": 271,
    "end_line": 282,
    "comment": "/** \n * Traverses a parse tree recursively.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.traverseRoots#284",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.traverseRoots(com.google.javascript.rhino.Node)",
    "snippet": "public void traverseRoots(Node ... roots) {\n    traverseRoots(Lists.newArrayList(roots));\n  }",
    "begin_line": 284,
    "end_line": 286,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.traverseRoots#288",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.traverseRoots(java.util.List\u003ccom.google.javascript.rhino.Node\u003e)",
    "snippet": "public void traverseRoots(List\u003cNode\u003e roots) {\n    if (roots.isEmpty()) {\n      return;\n    }\n\n    try {\n      Node scopeRoot \u003d roots.get(0).getParent();\n      Preconditions.checkState(scopeRoot !\u003d null);\n\n      inputId \u003d NodeUtil.getInputId(scopeRoot);\n      sourceName \u003d \"\";\n      curNode \u003d scopeRoot;\n      pushScope(scopeRoot);\n\n      for (Node root : roots) {\n        Preconditions.checkState(root.getParent() \u003d\u003d scopeRoot);\n        traverseBranch(root, scopeRoot);\n      }\n\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }",
    "begin_line": 288,
    "end_line": 311,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.formatNodePosition#315",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.formatNodePosition(com.google.javascript.rhino.Node)",
    "snippet": "private String formatNodePosition(Node n) {\n    String sourceFileName \u003d getBestSourceFileName(n);\n    if (sourceFileName \u003d\u003d null) {\n      return MISSING_SOURCE + \"\\n\";\n    }\n\n    int lineNumber \u003d n.getLineno();\n    int columnNumber \u003d n.getCharno();\n    String src \u003d compiler.getSourceLine(sourceFileName, lineNumber);\n    if (src \u003d\u003d null) {\n      src \u003d MISSING_SOURCE;\n    }\n    return sourceFileName + \":\" + lineNumber + \":\" + columnNumber + \"\\n\"\n        + src + \"\\n\";\n  }",
    "begin_line": 315,
    "end_line": 329,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.traverseWithScope#336",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.traverseWithScope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
    "snippet": "void traverseWithScope(Node root, Scope s) {\n    Preconditions.checkState(s.isGlobal());\n\n    inputId \u003d null;\n    sourceName \u003d \"\";\n    curNode \u003d root;\n    pushScope(s);\n    traverseBranch(root, null);\n    popScope();\n  }",
    "begin_line": 336,
    "end_line": 345,
    "comment": "/** \n * Traverses a parse tree recursively with a scope, starting with the given root. This should only be used in the global scope. Otherwise, use {@link #traverseAtScope}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.traverseAtScope#351",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.traverseAtScope(com.google.javascript.jscomp.Scope)",
    "snippet": "void traverseAtScope(Scope s) {\n    Node n \u003d s.getRootNode();\n    if (n.isFunction()) {\n      // We need to do some extra magic to make sure that the scope doesn\u0027t\n      // get re-created when we dive into the function.\n      if (inputId \u003d\u003d null) {\n        inputId \u003d NodeUtil.getInputId(n);\n      }\n      sourceName \u003d getSourceName(n);\n      curNode \u003d n;\n      pushScope(s);\n\n      Node args \u003d n.getFirstChild().getNext();\n      Node body \u003d args.getNext();\n      traverseBranch(args, n);\n      traverseBranch(body, n);\n\n      popScope();\n    } else {\n      traverseWithScope(n, s);\n    }\n  }",
    "begin_line": 351,
    "end_line": 372,
    "comment": "/** \n * Traverses a parse tree recursively with a scope, starting at that scope\u0027s root.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.traverseInnerNode#384",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.traverseInnerNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
    "snippet": "protected void traverseInnerNode(Node node, Node parent, Scope refinedScope) {\n    Preconditions.checkNotNull(parent);\n    if (refinedScope !\u003d null \u0026\u0026 getScope() !\u003d refinedScope) {\n      curNode \u003d node;\n      pushScope(refinedScope);\n      traverseBranch(node, parent);\n      popScope();\n    } else {\n      traverseBranch(node, parent);\n    }\n  }",
    "begin_line": 384,
    "end_line": 394,
    "comment": "/** \n * Traverses an inner node recursively with a refined scope. An inner node may be any node with a non  {@code null} parent (i.e. all nodes except theroot).\n * @param node the node to traverse\n * @param parent the node\u0027s parent, it may not be {@code null}\n * @param refinedScope the refined scope of the scope currently at the top ofthe scope stack or in trivial cases that very scope or  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.getCompiler#399",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.getCompiler()",
    "snippet": "public Compiler getCompiler() {\n    // TODO(nicksantos): Remove this type cast. This is just temporary\n    // while refactoring.\n    return (Compiler) compiler;\n  }",
    "begin_line": 399,
    "end_line": 403,
    "comment": "/** \n * Gets the compiler.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.getLineNumber#409",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.getLineNumber()",
    "snippet": "public int getLineNumber() {\n    Node cur \u003d curNode;\n    while (cur !\u003d null) {\n      int line \u003d cur.getLineno();\n      if (line \u003e\u003d0) {\n        return line;\n      }\n      cur \u003d cur.getParent();\n    }\n    return 0;\n  }",
    "begin_line": 409,
    "end_line": 419,
    "comment": "/** \n * Gets the current line number, or zero if it cannot be determined. The line number is retrieved lazily as a running time optimization.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.getSourceName#426",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.getSourceName()",
    "snippet": "public String getSourceName() {\n    return sourceName;\n  }",
    "begin_line": 426,
    "end_line": 428,
    "comment": "/** \n * Gets the current input source name.\n * @return A string that may be empty, but not null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.getInput#433",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.getInput()",
    "snippet": "public CompilerInput getInput() {\n    return compiler.getInput(inputId);\n  }",
    "begin_line": 433,
    "end_line": 435,
    "comment": "/** \n * Gets the current input source.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.getModule#440",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.getModule()",
    "snippet": "public JSModule getModule() {\n    CompilerInput input \u003d getInput();\n    return input \u003d\u003d null ? null : input.getModule();\n  }",
    "begin_line": 440,
    "end_line": 443,
    "comment": "/** \n * Gets the current input module.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.getCurrentNode#446",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.getCurrentNode()",
    "snippet": "public Node getCurrentNode() {\n    return curNode;\n  }",
    "begin_line": 446,
    "end_line": 448,
    "comment": "/** \n * Returns the node currently being traversed. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.traverse#453",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.traverse(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node, com.google.javascript.jscomp.NodeTraversal.Callback)",
    "snippet": "public static void traverse(\n      AbstractCompiler compiler, Node root, Callback cb) {\n    NodeTraversal t \u003d new NodeTraversal(compiler, cb);\n    t.traverse(root);\n  }",
    "begin_line": 453,
    "end_line": 457,
    "comment": "/** \n * Traverses a node recursively.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.traverseRoots#462",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.traverseRoots(com.google.javascript.jscomp.AbstractCompiler, java.util.List\u003ccom.google.javascript.rhino.Node\u003e, com.google.javascript.jscomp.NodeTraversal.Callback)",
    "snippet": "public static void traverseRoots(\n      AbstractCompiler compiler, List\u003cNode\u003e roots, Callback cb) {\n    NodeTraversal t \u003d new NodeTraversal(compiler, cb);\n    t.traverseRoots(roots);\n  }",
    "begin_line": 462,
    "end_line": 466,
    "comment": "/** \n * Traverses a list of node trees.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.traverseRoots#468",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.traverseRoots(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback, com.google.javascript.rhino.Node)",
    "snippet": "public static void traverseRoots(\n      AbstractCompiler compiler, Callback cb, Node ... roots) {\n    NodeTraversal t \u003d new NodeTraversal(compiler, cb);\n    t.traverseRoots(roots);\n  }",
    "begin_line": 468,
    "end_line": 472,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.traverseBranch#478",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.traverseBranch(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type \u003d n.getType();\n    if (type \u003d\u003d Token.SCRIPT) {\n      inputId \u003d n.getInputId();\n      sourceName \u003d getSourceName(n);\n    }\n\n    curNode \u003d n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child \u003d n.getFirstChild(); child !\u003d null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next \u003d child.getNext();\n          traverseBranch(child, n);\n          child \u003d next;\n        }\n        break;\n    }\n\n    curNode \u003d n;\n    callback.visit(this, n, parent);\n  }",
    "begin_line": 478,
    "end_line": 506,
    "comment": "/** \n * Traverses a branch.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.traverseFunction#511",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.traverseFunction(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() \u003d\u003d 3);\n    Preconditions.checkState(n.isFunction());\n\n    final Node fnName \u003d n.getFirstChild();\n\n    boolean isFunctionExpression \u003d (parent !\u003d null)\n        \u0026\u0026 NodeUtil.isFunctionExpression(n);\n\n    if (!isFunctionExpression) {\n      // Functions declarations are in the scope containing the declaration.\n      traverseBranch(fnName, n);\n    }\n\n    curNode \u003d n;\n    pushScope(n);\n\n    if (isFunctionExpression) {\n      // Function expression names are only accessible within the function\n      // scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args \u003d fnName.getNext();\n    final Node body \u003d args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() \u003d\u003d null \u0026\u0026\n            body.isBlock(), body);\n    traverseBranch(body, n);\n\n    popScope();\n  }",
    "begin_line": 511,
    "end_line": 546,
    "comment": "/** \n * Traverses a function.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.getEnclosingFunction#550",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.getEnclosingFunction()",
    "snippet": "@SuppressWarnings(\"unchecked\")\n  public Node getEnclosingFunction() {\n    if (scopes.size() + scopeRoots.size() \u003c 2) {\n      return null;\n    } else {\n      if (scopeRoots.isEmpty()) {\n        return scopes.peek().getRootNode();\n      } else {\n        return scopeRoots.peek();\n      }\n    }\n  }",
    "begin_line": 550,
    "end_line": 560,
    "comment": "/** \n * Examines the functions stack for the last instance of a function node. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.pushScope#563",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.pushScope(com.google.javascript.rhino.Node)",
    "snippet": "private void pushScope(Node node) {\n    Preconditions.checkState(curNode !\u003d null);\n    scopeRoots.push(node);\n    cfgs.push(null);\n    if (scopeCallback !\u003d null) {\n      scopeCallback.enterScope(this);\n    }\n  }",
    "begin_line": 563,
    "end_line": 570,
    "comment": "/** \n * Creates a new scope (e.g. when entering a function). \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.pushScope#573",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.pushScope(com.google.javascript.jscomp.Scope)",
    "snippet": "private void pushScope(Scope s) {\n    Preconditions.checkState(curNode !\u003d null);\n    scopes.push(s);\n    cfgs.push(null);\n    if (scopeCallback !\u003d null) {\n      scopeCallback.enterScope(this);\n    }\n  }",
    "begin_line": 573,
    "end_line": 580,
    "comment": "/** \n * Creates a new scope (e.g. when entering a function). \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.popScope#583",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.popScope()",
    "snippet": "private void popScope() {\n    if (scopeCallback !\u003d null) {\n      scopeCallback.exitScope(this);\n    }\n    if (scopeRoots.isEmpty()) {\n      scopes.pop();\n    } else {\n      scopeRoots.pop();\n    }\n    cfgs.pop();\n  }",
    "begin_line": 583,
    "end_line": 593,
    "comment": "/** \n * Pops back to the previous scope (e.g. when leaving a function). \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.getScope#596",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.getScope()",
    "snippet": "public Scope getScope() {\n    Scope scope \u003d scopes.isEmpty() ? null : scopes.peek();\n    if (scopeRoots.isEmpty()) {\n      return scope;\n    }\n\n    Iterator\u003cNode\u003e it \u003d scopeRoots.descendingIterator();\n    while (it.hasNext()) {\n      scope \u003d scopeCreator.createScope(it.next(), scope);\n      scopes.push(scope);\n    }\n    scopeRoots.clear();\n\n    return scope;\n  }",
    "begin_line": 596,
    "end_line": 610,
    "comment": "/** \n * Gets the current scope. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.getControlFlowGraph#613",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.getControlFlowGraph()",
    "snippet": "public ControlFlowGraph\u003cNode\u003e getControlFlowGraph() {\n    if (cfgs.peek() \u003d\u003d null) {\n      ControlFlowAnalysis cfa \u003d new ControlFlowAnalysis(compiler, false, true);\n      cfa.process(null, getScopeRoot());\n      cfgs.pop();\n      cfgs.push(cfa.getCfg());\n    }\n    return cfgs.peek();\n  }",
    "begin_line": 613,
    "end_line": 621,
    "comment": "/** \n * Gets the control flow graph for the current JS scope. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.getScopeRoot#624",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.getScopeRoot()",
    "snippet": "public Node getScopeRoot() {\n    if (scopeRoots.isEmpty()) {\n      return scopes.peek().getRootNode();\n    } else {\n      return scopeRoots.peek();\n    }\n  }",
    "begin_line": 624,
    "end_line": 630,
    "comment": "/** \n * Returns the current scope\u0027s root. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.inGlobalScope#635",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.inGlobalScope()",
    "snippet": "boolean inGlobalScope() {\n    return getScopeDepth() \u003c\u003d 1;\n  }",
    "begin_line": 635,
    "end_line": 637,
    "comment": "/** \n * Determines whether the traversal is currently in the global scope.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.getScopeDepth#639",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.getScopeDepth()",
    "snippet": "int getScopeDepth() {\n    return scopes.size() + scopeRoots.size();\n  }",
    "begin_line": 639,
    "end_line": 641,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.hasScope#643",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.hasScope()",
    "snippet": "public boolean hasScope() {\n    return !(scopes.isEmpty() \u0026\u0026 scopeRoots.isEmpty());\n  }",
    "begin_line": 643,
    "end_line": 645,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.report#648",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.report(com.google.javascript.rhino.Node, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
    "snippet": "public void report(Node n, DiagnosticType diagnosticType,\n      String... arguments) {\n    JSError error \u003d JSError.make(getBestSourceFileName(n),\n        n, diagnosticType, arguments);\n    compiler.report(error);\n  }",
    "begin_line": 648,
    "end_line": 653,
    "comment": "/** \n * Reports a diagnostic (error or warning) \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.getSourceName#655",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.getSourceName(com.google.javascript.rhino.Node)",
    "snippet": "private static String getSourceName(Node n) {\n    String name \u003d n.getSourceFileName();\n    return name \u003d\u003d null ? \"\" : name;\n  }",
    "begin_line": 655,
    "end_line": 658,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.getInputId#660",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.getInputId()",
    "snippet": "InputId getInputId() {\n    return inputId;\n  }",
    "begin_line": 660,
    "end_line": 662,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.makeError#671",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.makeError(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
    "snippet": "public JSError makeError(Node n, CheckLevel level, DiagnosticType type,\n      String... arguments) {\n    return JSError.make(getBestSourceFileName(n), n, level, type, arguments);\n  }",
    "begin_line": 671,
    "end_line": 674,
    "comment": "/** \n * Creates a JSError during NodeTraversal.\n * @param n Determines the line and char position within the source file name\n * @param type The DiagnosticType\n * @param arguments Arguments to be incorporated into the message\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.makeError#683",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.makeError(com.google.javascript.rhino.Node, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
    "snippet": "public JSError makeError(Node n, DiagnosticType type, String... arguments) {\n    return JSError.make(getBestSourceFileName(n), n, type, arguments);\n  }",
    "begin_line": 683,
    "end_line": 685,
    "comment": "/** \n * Creates a JSError during NodeTraversal.\n * @param n Determines the line and char position within the source file name\n * @param type The DiagnosticType\n * @param arguments Arguments to be incorporated into the message\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractNodeTypePruningCallback.getBestSourceFileName#687",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeTraversal.java",
    "class_name": "com.google.javascript.jscomp.NodeTraversal",
    "signature": "com.google.javascript.jscomp.NodeTraversal.getBestSourceFileName(com.google.javascript.rhino.Node)",
    "snippet": "private String getBestSourceFileName(Node n) {\n    return n \u003d\u003d null ? sourceName : n.getSourceFileName();\n  }",
    "begin_line": 687,
    "end_line": 689,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.NodeUtil#67",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.NodeUtil()",
    "snippet": "private NodeUtil() {}",
    "begin_line": 67,
    "end_line": 67,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.getImpureBooleanValue#75",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(com.google.javascript.rhino.Node)",
    "snippet": "static TernaryValue getImpureBooleanValue(Node n) {\n    switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getImpureBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value \u003d getImpureBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs \u003d getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs \u003d getImpureBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs \u003d getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs \u003d getImpureBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue \u003d getImpureBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue \u003d getImpureBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // ignoring side-effects\n        return TernaryValue.TRUE;\n\n      case Token.VOID:\n        return TernaryValue.FALSE;\n\n      default:\n        return getPureBooleanValue(n);\n    }\n  }",
    "begin_line": 75,
    "end_line": 115,
    "comment": "/** \n * Gets the boolean value of a node that represents a expression. This method effectively emulates the \u003ccode\u003eBoolean()\u003c/code\u003e JavaScript cast function. Note: unlike getBooleanValue this function does not return UNKNOWN for expressions with side-effects.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.getPureBooleanValue#123",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(com.google.javascript.rhino.Node)",
    "snippet": "static TernaryValue getPureBooleanValue(Node n) {\n    switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() \u003e 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() !\u003d 0);\n\n      case Token.NOT:\n        return getPureBooleanValue(n.getLastChild()).not();\n\n      case Token.NULL:\n      case Token.FALSE:\n        return TernaryValue.FALSE;\n\n      case Token.VOID:\n        if (!mayHaveSideEffects(n.getFirstChild())) {\n          return TernaryValue.FALSE;\n        }\n        break;\n\n      case Token.NAME:\n        String name \u003d n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don\u0027t change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        if (!mayHaveSideEffects(n)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n    }\n\n    return TernaryValue.UNKNOWN;\n  }",
    "begin_line": 123,
    "end_line": 169,
    "comment": "/** \n * Gets the boolean value of a node that represents a literal. This method effectively emulates the \u003ccode\u003eBoolean()\u003c/code\u003e JavaScript cast function except it return UNKNOWN for known values with side-effects, use getImpureBooleanValue if you don\u0027t care about side-effects.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.getStringValue#176",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getStringValue(com.google.javascript.rhino.Node)",
    "snippet": "static String getStringValue(Node n) {\n    // TODO(user): regex literals as well.\n    switch (n.getType()) {\n      case Token.STRING:\n      case Token.STRING_KEY:\n        return n.getString();\n\n      case Token.NAME:\n        String name \u003d n.getString();\n        if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name)) {\n          return name;\n        }\n        break;\n\n      case Token.NUMBER:\n        return getStringValue(n.getDouble());\n\n      case Token.FALSE:\n        return \"false\";\n\n      case Token.TRUE:\n        return \"true\";\n\n      case Token.NULL:\n        return \"null\";\n\n      case Token.VOID:\n        return \"undefined\";\n\n      case Token.NOT:\n        TernaryValue child \u003d getPureBooleanValue(n.getFirstChild());\n        if (child !\u003d TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? \"false\" : \"true\"; // reversed.\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        return arrayToString(n);\n\n      case Token.OBJECTLIT:\n        return \"[object Object]\";\n    }\n    return null;\n  }",
    "begin_line": 176,
    "end_line": 221,
    "comment": "/** \n * Gets the value of a node as a String, or null if it cannot be converted. When it returns a non-null String, this method effectively emulates the \u003ccode\u003eString()\u003c/code\u003e JavaScript cast function.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.getStringValue#223",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getStringValue(double)",
    "snippet": "static String getStringValue(double value) {\n    long longValue \u003d (long) value;\n\n    // Return \"1\" instead of \"1.0\"\n    if (longValue \u003d\u003d value) {\n      return Long.toString(longValue);\n    } else {\n      return Double.toString(value);\n    }\n  }",
    "begin_line": 223,
    "end_line": 232,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.getArrayElementStringValue#242",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getArrayElementStringValue(com.google.javascript.rhino.Node)",
    "snippet": "static String getArrayElementStringValue(Node n) {\n    return (NodeUtil.isNullOrUndefined(n) || n.isEmpty())\n        ? \"\" : getStringValue(n);\n  }",
    "begin_line": 242,
    "end_line": 245,
    "comment": "/** \n * When converting arrays to string using Array.prototype.toString or Array.prototype.join, the rules for conversion to String are different than converting each element individually.  Specifically, \"null\" and \"undefined\" are converted to an empty string.\n * @param n A node that is a member of an Array.\n * @return The string representation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.arrayToString#247",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.arrayToString(com.google.javascript.rhino.Node)",
    "snippet": "static String arrayToString(Node literal) {\n    Node first \u003d literal.getFirstChild();\n    StringBuilder result \u003d new StringBuilder();\n    int nextSlot \u003d 0;\n    int nextSkipSlot \u003d 0;\n    for (Node n \u003d first; n !\u003d null; n \u003d n.getNext()) {\n      String childValue \u003d getArrayElementStringValue(n);\n      if (childValue \u003d\u003d null) {\n        return null;\n      }\n      if (n !\u003d first) {\n        result.append(\u0027,\u0027);\n      }\n      result.append(childValue);\n\n      nextSlot++;\n    }\n    return result.toString();\n  }",
    "begin_line": 247,
    "end_line": 265,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.getNumberValue#272",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getNumberValue(com.google.javascript.rhino.Node)",
    "snippet": "static Double getNumberValue(Node n) {\n    switch (n.getType()) {\n      case Token.TRUE:\n        return 1.0;\n\n      case Token.FALSE:\n      case Token.NULL:\n        return 0.0;\n\n      case Token.NUMBER:\n        return n.getDouble();\n\n      case Token.VOID:\n        if (mayHaveSideEffects(n.getFirstChild())) {\n          return null;\n        } else {\n          return Double.NaN;\n        }\n\n      case Token.NAME:\n        // Check for known constants\n        String name \u003d n.getString();\n        if (name.equals(\"undefined\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"NaN\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"Infinity\")) {\n          return Double.POSITIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NEG:\n        if (n.getChildCount() \u003d\u003d 1 \u0026\u0026 n.getFirstChild().isName()\n            \u0026\u0026 n.getFirstChild().getString().equals(\"Infinity\")) {\n          return Double.NEGATIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NOT:\n        TernaryValue child \u003d getPureBooleanValue(n.getFirstChild());\n        if (child !\u003d TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? 0.0 : 1.0; // reversed.\n        }\n        break;\n\n      case Token.STRING:\n        return getStringNumberValue(n.getString());\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        String value \u003d getStringValue(n);\n        return value !\u003d null ? getStringNumberValue(value) : null;\n    }\n\n    return null;\n  }",
    "begin_line": 272,
    "end_line": 329,
    "comment": "/** \n * Gets the value of a node as a Number, or null if it cannot be converted. When it returns a non-null Double, this method effectively emulates the \u003ccode\u003eNumber()\u003c/code\u003e JavaScript cast function.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.getStringNumberValue#331",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getStringNumberValue(java.lang.String)",
    "snippet": "static Double getStringNumberValue(String rawJsString) {\n    if (rawJsString.contains(\"\\u000b\")) {\n      // vertical tab is not always whitespace\n      return null;\n    }\n\n    String s \u003d trimJsWhiteSpace(rawJsString);\n    // return ScriptRuntime.toNumber(s);\n    if (s.length() \u003d\u003d 0) {\n      return 0.0;\n    }\n\n    if (s.length() \u003e 2\n        \u0026\u0026 s.charAt(0) \u003d\u003d \u00270\u0027\n        \u0026\u0026 (s.charAt(1) \u003d\u003d \u0027x\u0027 || s.charAt(1) \u003d\u003d \u0027X\u0027)) {\n      // Attempt to convert hex numbers.\n      try {\n        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n      } catch (NumberFormatException e) {\n        return Double.NaN;\n      }\n    }\n\n    if (s.length() \u003e 3\n        \u0026\u0026 (s.charAt(0) \u003d\u003d \u0027-\u0027 || s.charAt(0) \u003d\u003d \u0027+\u0027)\n        \u0026\u0026 s.charAt(1) \u003d\u003d \u00270\u0027\n        \u0026\u0026 (s.charAt(2) \u003d\u003d \u0027x\u0027 || s.charAt(2) \u003d\u003d \u0027X\u0027)) {\n      // hex numbers with explicit signs vary between browsers.\n      return null;\n    }\n\n    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n    if (s.equals(\"infinity\")\n        || s.equals(\"-infinity\")\n        || s.equals(\"+infinity\")) {\n      return null;\n    }\n\n    try {\n      return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n      return Double.NaN;\n    }\n  }",
    "begin_line": 331,
    "end_line": 375,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.trimJsWhiteSpace#377",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.trimJsWhiteSpace(java.lang.String)",
    "snippet": "static String trimJsWhiteSpace(String s) {\n    int start \u003d 0;\n    int end \u003d s.length();\n    while (end \u003e 0\n        \u0026\u0026 isStrWhiteSpaceChar(s.charAt(end - 1)) \u003d\u003d TernaryValue.TRUE) {\n      end--;\n    }\n    while (start \u003c end\n        \u0026\u0026 isStrWhiteSpaceChar(s.charAt(start)) \u003d\u003d TernaryValue.TRUE) {\n      start++;\n    }\n    return s.substring(start, end);\n  }",
    "begin_line": 377,
    "end_line": 389,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.isStrWhiteSpaceChar#394",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(int)",
    "snippet": "public static TernaryValue isStrWhiteSpaceChar(int c) {\n    switch (c) {\n      case \u0027\\u000B\u0027: // \u003cVT\u003e\n        return TernaryValue.UNKNOWN;  // IE says \"no\", ECMAScript says \"yes\"\n      case \u0027 \u0027: // \u003cSP\u003e\n      case \u0027\\n\u0027: // \u003cLF\u003e\n      case \u0027\\r\u0027: // \u003cCR\u003e\n      case \u0027\\t\u0027: // \u003cTAB\u003e\n      case \u0027\\u00A0\u0027: // \u003cNBSP\u003e\n      case \u0027\\u000C\u0027: // \u003cFF\u003e\n      case \u0027\\u2028\u0027: // \u003cLS\u003e\n      case \u0027\\u2029\u0027: // \u003cPS\u003e\n      case \u0027\\uFEFF\u0027: // \u003cBOM\u003e\n        return TernaryValue.TRUE;\n      default:\n        return (Character.getType(c) \u003d\u003d Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;\n    }\n  }",
    "begin_line": 394,
    "end_line": 412,
    "comment": "/** \n * Copied from Rhino\u0027s ScriptRuntime\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.getFunctionName#429",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getFunctionName(com.google.javascript.rhino.Node)",
    "snippet": "static String getFunctionName(Node n) {\n    Preconditions.checkState(n.isFunction());\n    Node parent \u003d n.getParent();\n    switch (parent.getType()) {\n      case Token.NAME:\n        // var name \u003d function() ...\n        // var name2 \u003d function name1() ...\n        return parent.getQualifiedName();\n\n      case Token.ASSIGN:\n        // qualified.name \u003d function() ...\n        // qualified.name2 \u003d function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        String name \u003d n.getFirstChild().getQualifiedName();\n        return name;\n    }\n  }",
    "begin_line": 429,
    "end_line": 448,
    "comment": "/** \n * Gets the function\u0027s name. This method recognizes five forms: \u003cul\u003e \u003cli\u003e {@code function name() ...}\u003c/li\u003e \u003cli\u003e {@code var name \u003d function() ...}\u003c/li\u003e \u003cli\u003e {@code qualified.name \u003d function() ...}\u003c/li\u003e \u003cli\u003e {@code var name2 \u003d function name1() ...}\u003c/li\u003e \u003cli\u003e {@code qualified.name2 \u003d function name1() ...}\u003c/li\u003e \u003c/ul\u003e In two last cases with named function expressions, the second name is returned (the variable of qualified name).\n * @param n a node whose type is {@link Token#FUNCTION}\n * @return the function\u0027s name, or {@code null} if it has no name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.getNearestFunctionName#465",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(com.google.javascript.rhino.Node)",
    "snippet": "public static String getNearestFunctionName(Node n) {\n    if (!n.isFunction()) {\n      return null;\n    }\n\n    String name \u003d getFunctionName(n);\n    if (name !\u003d null) {\n      return name;\n    }\n\n    // Check for the form { \u0027x\u0027 : function() { } }\n    Node parent \u003d n.getParent();\n    switch (parent.getType()) {\n      case Token.SETTER_DEF:\n      case Token.GETTER_DEF:\n      case Token.STRING_KEY:\n        // Return the name of the literal\u0027s key.\n        return parent.getString();\n      case Token.NUMBER:\n        return getStringValue(parent);\n    }\n\n    return null;\n  }",
    "begin_line": 465,
    "end_line": 488,
    "comment": "/** \n * Gets the function\u0027s name. This method recognizes the forms: \u003cul\u003e \u003cli\u003e {@code \u0026#123;\u0027name\u0027: function() ...\u0026#125;}\u003c/li\u003e \u003cli\u003e {@code \u0026#123;name: function() ...\u0026#125;}\u003c/li\u003e \u003cli\u003e {@code function name() ...}\u003c/li\u003e \u003cli\u003e {@code var name \u003d function() ...}\u003c/li\u003e \u003cli\u003e {@code qualified.name \u003d function() ...}\u003c/li\u003e \u003cli\u003e {@code var name2 \u003d function name1() ...}\u003c/li\u003e \u003cli\u003e {@code qualified.name2 \u003d function name1() ...}\u003c/li\u003e \u003c/ul\u003e\n * @param n a node whose type is {@link Token#FUNCTION}\n * @return the function\u0027s name, or {@code null} if it has no name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.isImmutableValue#494",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isImmutableValue(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isImmutableValue(Node n) {\n    switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.CAST:\n      case Token.NOT:\n        return isImmutableValue(n.getFirstChild());\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name \u003d n.getString();\n        // We assume here that programs don\u0027t change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }\n\n    return false;\n  }",
    "begin_line": 494,
    "end_line": 518,
    "comment": "/** \n * Returns true if this is an immutable value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.isSymmetricOperation#523",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isSymmetricOperation(Node n) {\n    switch (n.getType()) {\n      case Token.EQ: // equal\n      case Token.NE: // not equal\n      case Token.SHEQ: // exactly equal\n      case Token.SHNE: // exactly not equal\n      case Token.MUL: // multiply, unlike add it only works on numbers\n                      // or results NaN if any of the operators is not a number\n        return true;\n    }\n    return false;\n  }",
    "begin_line": 523,
    "end_line": 534,
    "comment": "/** \n * Returns true if the operator on this node is symmetric\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.isRelationalOperation#540",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isRelationalOperation(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isRelationalOperation(Node n) {\n    switch (n.getType()) {\n      case Token.GT: // equal\n      case Token.GE: // not equal\n      case Token.LT: // exactly equal\n      case Token.LE: // exactly not equal\n        return true;\n    }\n    return false;\n  }",
    "begin_line": 540,
    "end_line": 549,
    "comment": "/** \n * Returns true if the operator on this node is relational. the returned set does not include the equalities.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.getInverseOperator#555",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getInverseOperator(int)",
    "snippet": "static int getInverseOperator(int type) {\n    switch (type) {\n      case Token.GT:\n        return Token.LT;\n      case Token.LT:\n        return Token.GT;\n      case Token.GE:\n        return Token.LE;\n      case Token.LE:\n        return Token.GE;\n    }\n    return Token.ERROR;\n  }",
    "begin_line": 555,
    "end_line": 567,
    "comment": "/** \n * Returns the inverse of an operator if it is invertible. ex. \u0027\u003e\u0027 \u003d\u003d\u003e \u0027\u003c\u0027\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.isLiteralValue#591",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isLiteralValue(com.google.javascript.rhino.Node, boolean)",
    "snippet": "static boolean isLiteralValue(Node n, boolean includeFunctions) {\n    switch (n.getType()) {\n      case Token.CAST:\n        return isLiteralValue(n.getFirstChild(), includeFunctions);\n\n      case Token.ARRAYLIT:\n        for (Node child \u003d n.getFirstChild(); child !\u003d null;\n             child \u003d child.getNext()) {\n          if ((!child.isEmpty()) \u0026\u0026 !isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child \u003d n.getFirstChild(); child !\u003d null;\n             child \u003d child.getNext()) {\n          if (!isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.OBJECTLIT:\n        // Return true only if all values are const.\n        for (Node child \u003d n.getFirstChild(); child !\u003d null;\n             child \u003d child.getNext()) {\n          if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.FUNCTION:\n        return includeFunctions \u0026\u0026 !NodeUtil.isFunctionDeclaration(n);\n\n      default:\n        return isImmutableValue(n);\n    }\n  }",
    "begin_line": 591,
    "end_line": 631,
    "comment": "/** \n * Returns true if this is a literal value. We define a literal value as any node that evaluates to the same thing regardless of when or where it is evaluated. So /xyz/ and [3, 5] are literals, but the name a is not. Function literals do not meet this definition, because they lexically capture variables. For example, if you have \u003ccode\u003e function() { return a; } \u003c/code\u003e If it is evaluated in a different scope, then it captures a different variable. Even if the function did not read any captured variables directly, it would still fail this definition, because it affects the lifecycle of variables in the enclosing scope. However, a function literal with respect to a particular scope is a literal.\n * @param includeFunctions If true, all function expressions will betreated as literals.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.isValidDefineValue#639",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isValidDefineValue(com.google.javascript.rhino.Node, java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "static boolean isValidDefineValue(Node val, Set\u003cString\u003e defines) {\n    switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Binary operators are only valid if both children are valid.\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return isValidDefineValue(val.getFirstChild(), defines)\n            \u0026\u0026 isValidDefineValue(val.getLastChild(), defines);\n\n      // Unary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n      case Token.POS:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }\n    return false;\n  }",
    "begin_line": 639,
    "end_line": 685,
    "comment": "/** \n * Determines whether the given value may be assigned to a define.\n * @param val The value being assigned.\n * @param defines The list of names of existing defines.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.isEmptyBlock#692",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isEmptyBlock(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isEmptyBlock(Node block) {\n    if (!block.isBlock()) {\n      return false;\n    }\n\n    for (Node n \u003d block.getFirstChild(); n !\u003d null; n \u003d n.getNext()) {\n      if (!n.isEmpty()) {\n        return false;\n      }\n    }\n    return true;\n  }",
    "begin_line": 692,
    "end_line": 703,
    "comment": "/** \n * Returns whether this a BLOCK node with no children.\n * @param block The node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.isSimpleOperator#705",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isSimpleOperator(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isSimpleOperator(Node n) {\n    return isSimpleOperatorType(n.getType());\n  }",
    "begin_line": 705,
    "end_line": 707,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.isSimpleOperatorType#714",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(int)",
    "snippet": "static boolean isSimpleOperatorType(int type) {\n    switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }\n  }",
    "begin_line": 714,
    "end_line": 750,
    "comment": "/** \n * A \"simple\" operator is one whose children are expressions, has no direct side-effects (unlike \u0027+\u003d\u0027), and has no conditional aspects (unlike \u0027||\u0027).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.newExpr#758",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.newExpr(com.google.javascript.rhino.Node)",
    "snippet": "static Node newExpr(Node child) {\n    return IR.exprResult(child).srcref(child);\n  }",
    "begin_line": 758,
    "end_line": 760,
    "comment": "/** \n * Creates an EXPR_RESULT.\n * @param child The expression itself.\n * @return Newly created EXPR node with the child as subexpression.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.mayEffectMutableState#768",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(com.google.javascript.rhino.Node)",
    "snippet": "static boolean mayEffectMutableState(Node n) {\n    return mayEffectMutableState(n, null);\n  }",
    "begin_line": 768,
    "end_line": 770,
    "comment": "/** \n * Returns true if the node may create new mutable state, or change existing state.\n * @see \u003ca href\u003d\"http://www.xkcd.org/326/\"\u003eXKCD Cartoon\u003c/a\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.mayEffectMutableState#772",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "static boolean mayEffectMutableState(Node n, AbstractCompiler compiler) {\n    return checkForStateChangeHelper(n, true, compiler);\n  }",
    "begin_line": 772,
    "end_line": 774,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.mayHaveSideEffects#779",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(com.google.javascript.rhino.Node)",
    "snippet": "static boolean mayHaveSideEffects(Node n) {\n    return mayHaveSideEffects(n, null);\n  }",
    "begin_line": 779,
    "end_line": 781,
    "comment": "/** \n * Returns true if the node which may have side effects when executed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.mayHaveSideEffects#783",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "static boolean mayHaveSideEffects(Node n, AbstractCompiler compiler) {\n    return checkForStateChangeHelper(n, false, compiler);\n  }",
    "begin_line": 783,
    "end_line": 785,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.checkForStateChangeHelper#793",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(com.google.javascript.rhino.Node, boolean, com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects, AbstractCompiler compiler) {\n    // Rather than id which ops may have side effects, id the ones\n    // that we know to be safe\n    switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.CAST:\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.PARAM_LIST:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.STRING_KEY:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() !\u003d null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don\u0027t have side-effects, but function\n        // declarations change the namespace. Either way, we don\u0027t need to\n        // check the children, since they aren\u0027t executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperator(n)) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget \u003d n.getFirstChild();\n          if (assignTarget.isName()) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don\u0027t\n            // consider this a side-effect as it can\u0027t be referenced\n            // elsewhere.  Don\u0027t do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current \u003d assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don\u0027t consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current \u003d current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }\n\n    for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n      if (checkForStateChangeHelper(c, checkForNewObjects, compiler)) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
    "begin_line": 793,
    "end_line": 938,
    "comment": "/** \n * Returns true if some node in n\u0027s subtree changes application state. If  {@code checkForNewObjects} is true, we assume that newly createdmutable objects (like object literals) change state. Otherwise, we assume that they have no side effects.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.constructorCallHasSideEffects#945",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(com.google.javascript.rhino.Node)",
    "snippet": "static boolean constructorCallHasSideEffects(Node callNode) {\n    return constructorCallHasSideEffects(callNode, null);\n  }",
    "begin_line": 945,
    "end_line": 947,
    "comment": "/** \n * Do calls to this constructor have side effects?\n * @param callNode - constructor call node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.constructorCallHasSideEffects#949",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "static boolean constructorCallHasSideEffects(\n      Node callNode, AbstractCompiler compiler) {\n    if (!callNode.isNew()) {\n      throw new IllegalStateException(\n          \"Expected NEW node, got \" + Token.name(callNode.getType()));\n    }\n\n    if (callNode.isNoSideEffectsCall()) {\n      return false;\n    }\n\n    Node nameNode \u003d callNode.getFirstChild();\n    if (nameNode.isName() \u0026\u0026\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {\n      return false;\n    }\n\n    return true;\n  }",
    "begin_line": 949,
    "end_line": 967,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.functionCallHasSideEffects#987",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(com.google.javascript.rhino.Node)",
    "snippet": "static boolean functionCallHasSideEffects(Node callNode) {\n    return functionCallHasSideEffects(callNode, null);\n  }",
    "begin_line": 987,
    "end_line": 989,
    "comment": "/** \n * Returns true if calls to this function have side effects.\n * @param callNode - function call node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.functionCallHasSideEffects#998",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler) {\n    if (!callNode.isCall()) {\n      throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n    }\n\n    if (callNode.isNoSideEffectsCall()) {\n      return false;\n    }\n\n    Node nameNode \u003d callNode.getFirstChild();\n\n    // Built-in functions with no side effects.\n    if (nameNode.isName()) {\n      String name \u003d nameNode.getString();\n      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n        return false;\n      }\n    } else if (nameNode.isGetProp()) {\n      if (callNode.hasOneChild()\n          \u0026\u0026 OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString())) {\n        return false;\n      }\n\n      if (callNode.isOnlyModifiesThisCall()\n          \u0026\u0026 evaluatesToLocalValue(nameNode.getFirstChild())) {\n        return false;\n      }\n\n      // Math.floor has no side-effects.\n      // TODO(nicksantos): This is a terrible terrible hack, until\n      // I create a definitionProvider that understands namespacing.\n      if (nameNode.getFirstChild().isName()) {\n        if (\"Math.floor\".equals(nameNode.getQualifiedName())) {\n          return false;\n        }\n      }\n\n      if (compiler !\u003d null \u0026\u0026 !compiler.hasRegExpGlobalReferences()) {\n        if (nameNode.getFirstChild().isRegExp()\n            \u0026\u0026 REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n          return false;\n        } else if (nameNode.getFirstChild().isString()\n            \u0026\u0026 STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString())) {\n          Node param \u003d nameNode.getNext();\n          if (param !\u003d null \u0026\u0026\n              (param.isString() || param.isRegExp())) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }",
    "begin_line": 998,
    "end_line": 1055,
    "comment": "/** \n * Returns true if calls to this function have side effects.\n * @param callNode The call node to inspected.\n * @param compiler A compiler object to provide program state changingcontext information. Can be null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.callHasLocalResult#1060",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.callHasLocalResult(com.google.javascript.rhino.Node)",
    "snippet": "static boolean callHasLocalResult(Node n) {\n    Preconditions.checkState(n.isCall());\n    return (n.getSideEffectFlags() \u0026 Node.FLAG_LOCAL_RESULTS) \u003e 0;\n  }",
    "begin_line": 1060,
    "end_line": 1063,
    "comment": "/** \n * @return Whether the call has a local result.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.newHasLocalResult#1068",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.newHasLocalResult(com.google.javascript.rhino.Node)",
    "snippet": "static boolean newHasLocalResult(Node n) {\n    Preconditions.checkState(n.isNew());\n    return n.isOnlyModifiesThisCall();\n  }",
    "begin_line": 1068,
    "end_line": 1071,
    "comment": "/** \n * @return Whether the new has a local result.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.nodeTypeMayHaveSideEffects#1080",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node)",
    "snippet": "static boolean nodeTypeMayHaveSideEffects(Node n) {\n    return nodeTypeMayHaveSideEffects(n, null);\n  }",
    "begin_line": 1080,
    "end_line": 1082,
    "comment": "/** \n * Returns true if the current node\u0027s type implies side effects. This is a non-recursive version of the may have side effects check; used to check wherever the current node\u0027s type is one of the reason\u0027s why a subtree has side effects.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.nodeTypeMayHaveSideEffects#1084",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "static boolean nodeTypeMayHaveSideEffects(Node n, AbstractCompiler compiler) {\n    if (isAssignmentOp(n)) {\n      return true;\n    }\n\n    switch(n.getType()) {\n      case Token.DELPROP:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.CALL:\n        return NodeUtil.functionCallHasSideEffects(n, compiler);\n      case Token.NEW:\n        return NodeUtil.constructorCallHasSideEffects(n, compiler);\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }\n  }",
    "begin_line": 1084,
    "end_line": 1105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.canBeSideEffected#1111",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.canBeSideEffected(com.google.javascript.rhino.Node)",
    "snippet": "static boolean canBeSideEffected(Node n) {\n    Set\u003cString\u003e emptySet \u003d Collections.emptySet();\n    return canBeSideEffected(n, emptySet);\n  }",
    "begin_line": 1111,
    "end_line": 1114,
    "comment": "/** \n * @return Whether the tree can be affected by side-effects orhas side-effects.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.canBeSideEffected#1122",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.canBeSideEffected(com.google.javascript.rhino.Node, java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "static boolean canBeSideEffected(Node n, Set\u003cString\u003e knownConstants) {\n    switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !isConstantName(n)\n            \u0026\u0026 !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n      case Token.FUNCTION:\n        // Function expression are not changed by side-effects,\n        // and function declarations are not part of expressions.\n        Preconditions.checkState(isFunctionExpression(n));\n        return false;\n    }\n\n    for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n      if (canBeSideEffected(c, knownConstants)) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
    "begin_line": 1122,
    "end_line": 1154,
    "comment": "/** \n * @param knownConstants A set of names known to be constant value atnode \u0027n\u0027 (such as locals that are last written before n can execute).\n * @return Whether the tree can be affected by side-effects orhas side-effects.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.precedence#1173",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.precedence(int)",
    "snippet": "static int precedence(int type) {\n    switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.CALL:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      // Data values\n      case Token.ARRAYLIT:\n      case Token.EMPTY:  // TODO(johnlenz): remove this.\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.STRING:\n      case Token.STRING_KEY:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n      case Token.CAST:\n        return 16;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Token.name(type) +\n                               \" (type \" + type + \")\");\n    }\n  }",
    "begin_line": 1173,
    "end_line": 1248,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.isUndefined#1250",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isUndefined(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isUndefined(Node n) {\n    switch (n.getType()) {\n      case Token.VOID:\n        return true;\n      case Token.NAME:\n        return n.getString().equals(\"undefined\");\n    }\n    return false;\n  }",
    "begin_line": 1250,
    "end_line": 1258,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.isNullOrUndefined#1260",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isNullOrUndefined(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isNullOrUndefined(Node n) {\n    return n.isNull() || isUndefined(n);\n  }",
    "begin_line": 1260,
    "end_line": 1262,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.allResultsMatch#1268",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.allResultsMatch(com.google.javascript.rhino.Node, Predicate\u003cNode\u003e)",
    "snippet": "static boolean allResultsMatch(Node n, Predicate\u003cNode\u003e p) {\n    switch (n.getType()) {\n      case Token.CAST:\n        return allResultsMatch(n.getFirstChild(), p);\n      case Token.ASSIGN:\n      case Token.COMMA:\n        return allResultsMatch(n.getLastChild(), p);\n      case Token.AND:\n      case Token.OR:\n        return allResultsMatch(n.getFirstChild(), p)\n            \u0026\u0026 allResultsMatch(n.getLastChild(), p);\n      case Token.HOOK:\n        return allResultsMatch(n.getFirstChild().getNext(), p)\n            \u0026\u0026 allResultsMatch(n.getLastChild(), p);\n      default:\n        return p.apply(n);\n    }\n  }",
    "begin_line": 1268,
    "end_line": 1285,
    "comment": "/** \n * Apply the supplied predicate against all possible result Nodes of the expression.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeUtil.anyResultsMatch#1291",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.anyResultsMatch(com.google.javascript.rhino.Node, Predicate\u003cNode\u003e)",
    "snippet": "static boolean anyResultsMatch(Node n, Predicate\u003cNode\u003e p) {\n    switch (n.getType()) {\n      case Token.CAST:\n        return anyResultsMatch(n.getFirstChild(), p);\n      case Token.ASSIGN:\n      case Token.COMMA:\n        return anyResultsMatch(n.getLastChild(), p);\n      case Token.AND:\n      case Token.OR:\n        return anyResultsMatch(n.getFirstChild(), p)\n            || anyResultsMatch(n.getLastChild(), p);\n      case Token.HOOK:\n        return anyResultsMatch(n.getFirstChild().getNext(), p)\n            || anyResultsMatch(n.getLastChild(), p);\n      default:\n        return p.apply(n);\n    }\n  }",
    "begin_line": 1291,
    "end_line": 1308,
    "comment": "/** \n * Apply the supplied predicate against all possible result Nodes of the expression.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumbericResultPredicate.apply#1312",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.apply(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean apply(Node n) {\n      return isNumericResultHelper(n);\n    }",
    "begin_line": 1312,
    "end_line": 1314,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumbericResultPredicate.isNumericResult#1323",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isNumericResult(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isNumericResult(Node n) {\n    return allResultsMatch(n, NUMBERIC_RESULT_PREDICATE);\n  }",
    "begin_line": 1323,
    "end_line": 1325,
    "comment": "/** \n * Returns true if the result of node evaluation is always a number\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumbericResultPredicate.isNumericResultHelper#1327",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isNumericResultHelper(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isNumericResultHelper(Node n) {\n    switch (n.getType()) {\n      case Token.ADD:\n        return !mayBeString(n.getFirstChild())\n            \u0026\u0026 !mayBeString(n.getLastChild());\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.INC:\n      case Token.DEC:\n      case Token.POS:\n      case Token.NEG:\n      case Token.NUMBER:\n        return true;\n      case Token.NAME:\n        String name \u003d n.getString();\n        if (name.equals(\"NaN\")) {\n          return true;\n        }\n        if (name.equals(\"Infinity\")) {\n          return true;\n        }\n        return false;\n      default:\n        return false;\n    }\n  }",
    "begin_line": 1327,
    "end_line": 1361,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanResultPredicate.apply#1365",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.apply(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean apply(Node n) {\n      return isBooleanResultHelper(n);\n    }",
    "begin_line": 1365,
    "end_line": 1367,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanResultPredicate.isBooleanResult#1376",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isBooleanResult(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isBooleanResult(Node n) {\n    return allResultsMatch(n, BOOLEAN_RESULT_PREDICATE);\n  }",
    "begin_line": 1376,
    "end_line": 1378,
    "comment": "/** \n * @return Whether the result of node evaluation is always a boolean\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanResultPredicate.isBooleanResultHelper#1380",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isBooleanResultHelper(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isBooleanResultHelper(Node n) {\n    switch (n.getType()) {\n      // Primitives\n      case Token.TRUE:\n      case Token.FALSE:\n      // Comparisons\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      // Queries\n      case Token.IN:\n      case Token.INSTANCEOF:\n      // Inversion\n      case Token.NOT:\n      // delete operator returns a boolean.\n      case Token.DELPROP:\n        return true;\n      default:\n        return false;\n    }\n  }",
    "begin_line": 1380,
    "end_line": 1405,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.apply#1411",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.apply(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean apply(Node n) {\n      return mayBeStringHelper(n);\n    }",
    "begin_line": 1411,
    "end_line": 1413,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.mayBeString#1422",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.mayBeString(com.google.javascript.rhino.Node)",
    "snippet": "static boolean mayBeString(Node n) {\n    return mayBeString(n, true);\n  }",
    "begin_line": 1422,
    "end_line": 1424,
    "comment": "/** \n * @returns Whether the results is possibly a string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.mayBeString#1426",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.mayBeString(com.google.javascript.rhino.Node, boolean)",
    "snippet": "static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\n      return anyResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
    "begin_line": 1426,
    "end_line": 1432,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.mayBeStringHelper#1434",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(com.google.javascript.rhino.Node)",
    "snippet": "static boolean mayBeStringHelper(Node n) {\n    return !isNumericResult(n) \u0026\u0026 !isBooleanResult(n)\n        \u0026\u0026 !isUndefined(n) \u0026\u0026 !n.isNull();\n  }",
    "begin_line": 1434,
    "end_line": 1437,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isAssociative#1445",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isAssociative(int)",
    "snippet": "static boolean isAssociative(int type) {\n    switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }\n  }",
    "begin_line": 1445,
    "end_line": 1457,
    "comment": "/** \n * Returns true if the operator is associative. e.g. (a * b) * c \u003d a * (b * c) Note: \"+\" is not associative because it is also the concatenation for strings. e.g. \"a\" + (1 + 2) is not \"a\" + 1 + 2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isCommutative#1466",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isCommutative(int)",
    "snippet": "static boolean isCommutative(int type) {\n    switch (type) {\n      case Token.MUL:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }\n  }",
    "begin_line": 1466,
    "end_line": 1476,
    "comment": "/** \n * Returns true if the operator is commutative. e.g. (a * b) * c \u003d c * (b * a) Note 1: \"+\" is not commutative because it is also the concatenation for strings. e.g. \"a\" + (1 + 2) is not \"a\" + 1 + 2 Note 2: only operations on literals and pure functions are commutative.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isAssignmentOp#1478",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isAssignmentOp(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isAssignmentOp(Node n) {\n    switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }\n    return false;\n  }",
    "begin_line": 1478,
    "end_line": 1495,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.getOpFromAssignmentOp#1497",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getOpFromAssignmentOp(com.google.javascript.rhino.Node)",
    "snippet": "static int getOpFromAssignmentOp(Node n) {\n    switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }\n    throw new IllegalArgumentException(\"Not an assignment op:\" + n);\n  }",
    "begin_line": 1497,
    "end_line": 1523,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.containsFunction#1529",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.containsFunction(com.google.javascript.rhino.Node)",
    "snippet": "static boolean containsFunction(Node n) {\n    return containsType(n, Token.FUNCTION);\n  }",
    "begin_line": 1529,
    "end_line": 1531,
    "comment": "/** \n * Determines if the given node contains a function statement or function expression.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.referencesThis#1536",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.referencesThis(com.google.javascript.rhino.Node)",
    "snippet": "static boolean referencesThis(Node n) {\n    Node start \u003d (n.isFunction()) ? n.getLastChild() : n;\n    return containsType(start, Token.THIS, MATCH_NOT_FUNCTION);\n  }",
    "begin_line": 1536,
    "end_line": 1539,
    "comment": "/** \n * Returns true if the shallow scope contains references to \u0027this\u0027 keyword\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isGet#1544",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isGet(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isGet(Node n) {\n    return n.isGetProp() || n.isGetElem();\n  }",
    "begin_line": 1544,
    "end_line": 1546,
    "comment": "/** \n * Is this a GETPROP or GETELEM node?\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isVarDeclaration#1554",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isVarDeclaration(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isVarDeclaration(Node n) {\n    // There is no need to verify that parent !\u003d null because a NAME node\n    // always has a parent in a valid parse tree.\n    return n.isName() \u0026\u0026 n.getParent().isVar();\n  }",
    "begin_line": 1554,
    "end_line": 1558,
    "comment": "/** \n * Is this node the name of a variable being declared?\n * @param n The node\n * @return True if {@code n} is NAME and {@code parent} is VAR\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.getAssignedValue#1564",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getAssignedValue(com.google.javascript.rhino.Node)",
    "snippet": "static Node getAssignedValue(Node n) {\n    Preconditions.checkState(n.isName());\n    Node parent \u003d n.getParent();\n    if (parent.isVar()) {\n      return n.getFirstChild();\n    } else if (parent.isAssign() \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n      return n.getNext();\n    } else {\n      return null;\n    }\n  }",
    "begin_line": 1564,
    "end_line": 1574,
    "comment": "/** \n * For an assignment or variable declaration get the assigned value.\n * @return The value node representing the new value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isExprAssign#1583",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isExprAssign(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isExprAssign(Node n) {\n    return n.isExprResult()\n        \u0026\u0026 n.getFirstChild().isAssign();\n  }",
    "begin_line": 1583,
    "end_line": 1586,
    "comment": "/** \n * Is this node an assignment expression statement?\n * @param n The node\n * @return True if {@code n} is EXPR_RESULT and {@code n}\u0027s first child is ASSIGN\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isExprCall#1595",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isExprCall(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isExprCall(Node n) {\n    return n.isExprResult()\n        \u0026\u0026 n.getFirstChild().isCall();\n  }",
    "begin_line": 1595,
    "end_line": 1598,
    "comment": "/** \n * Is this node a call expression statement?\n * @param n The node\n * @return True if {@code n} is EXPR_RESULT and {@code n}\u0027s first child is CALL\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isForIn#1603",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isForIn(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isForIn(Node n) {\n    return n.isFor()\n        \u0026\u0026 n.getChildCount() \u003d\u003d 3;\n  }",
    "begin_line": 1603,
    "end_line": 1606,
    "comment": "/** \n * @return Whether the node represents a FOR-IN loop.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isLoopStructure#1611",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isLoopStructure(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isLoopStructure(Node n) {\n    switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }\n  }",
    "begin_line": 1611,
    "end_line": 1620,
    "comment": "/** \n * Determines whether the given node is a FOR, DO, or WHILE node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.getLoopCodeBlock#1627",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getLoopCodeBlock(com.google.javascript.rhino.Node)",
    "snippet": "static Node getLoopCodeBlock(Node n) {\n    switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }\n  }",
    "begin_line": 1627,
    "end_line": 1637,
    "comment": "/** \n * @param n The node to inspect.\n * @return If the node, is a FOR, WHILE, or DO, it returns the node forthe code BLOCK, null otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isWithinLoop#1643",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isWithinLoop(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isWithinLoop(Node n) {\n    for (Node parent : n.getAncestors()) {\n      if (NodeUtil.isLoopStructure(parent)) {\n        return true;\n      }\n\n      if (parent.isFunction()) {\n        break;\n      }\n    }\n    return false;\n  }",
    "begin_line": 1643,
    "end_line": 1654,
    "comment": "/** \n * @return Whether the specified node has a loop parent thatis within the current scope.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isControlStructure#1659",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isControlStructure(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isControlStructure(Node n) {\n    switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        return true;\n      default:\n        return false;\n    }\n  }",
    "begin_line": 1659,
    "end_line": 1676,
    "comment": "/** \n * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isControlStructureCodeBlock#1682",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isControlStructureCodeBlock(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "static boolean isControlStructureCodeBlock(Node parent, Node n) {\n    switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() \u003d\u003d n;\n      case Token.DO:\n        return parent.getFirstChild() \u003d\u003d n;\n      case Token.IF:\n        return parent.getFirstChild() !\u003d n;\n      case Token.TRY:\n        return parent.getFirstChild() \u003d\u003d n || parent.getLastChild() \u003d\u003d n;\n      case Token.CATCH:\n        return parent.getLastChild() \u003d\u003d n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() !\u003d n;\n      case Token.DEFAULT_CASE:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }\n  }",
    "begin_line": 1682,
    "end_line": 1706,
    "comment": "/** \n * Determines whether the given node is code node for FOR, DO, WHILE, WITH, or IF node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.getConditionExpression#1713",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getConditionExpression(com.google.javascript.rhino.Node)",
    "snippet": "static Node getConditionExpression(Node n) {\n    switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed \u0027for\u0027 statement \" + n);\n      case Token.CASE:\n        return null;\n    }\n    throw new IllegalArgumentException(n + \" does not have a condition.\");\n  }",
    "begin_line": 1713,
    "end_line": 1732,
    "comment": "/** \n * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.\n * @param n a node with an outgoing conditional CFG edge\n * @return the condition node or null if the condition is not obviously a node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isStatementBlock#1737",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isStatementBlock(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isStatementBlock(Node n) {\n    return n.isScript() || n.isBlock();\n  }",
    "begin_line": 1737,
    "end_line": 1739,
    "comment": "/** \n * @return Whether the node is of a type that contain other statements.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isStatement#1744",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isStatement(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isStatement(Node n) {\n    return isStatementParent(n.getParent());\n  }",
    "begin_line": 1744,
    "end_line": 1746,
    "comment": "/** \n * @return Whether the node is used as a statement.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isStatementParent#1748",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isStatementParent(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isStatementParent(Node parent) {\n    // It is not possible to determine definitely if a node is a statement\n    // or not if it is not part of the AST.  A FUNCTION node can be\n    // either part of an expression or a statement.\n    Preconditions.checkState(parent !\u003d null);\n    switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }\n  }",
    "begin_line": 1748,
    "end_line": 1761,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isSwitchCase#1764",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isSwitchCase(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isSwitchCase(Node n) {\n    return n.isCase() || n.isDefaultCase();\n  }",
    "begin_line": 1764,
    "end_line": 1766,
    "comment": "/** \n * Whether the node is part of a switch statement. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isReferenceName#1772",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isReferenceName(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isReferenceName(Node n) {\n    return n.isName() \u0026\u0026 !n.getString().isEmpty();\n  }",
    "begin_line": 1772,
    "end_line": 1774,
    "comment": "/** \n * @return Whether the name is a reference to a variable, function orfunction parameter (not a label or a empty function expression name).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isTryFinallyNode#1777",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isTryFinallyNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "static boolean isTryFinallyNode(Node parent, Node child) {\n    return parent.isTry() \u0026\u0026 parent.getChildCount() \u003d\u003d 3\n        \u0026\u0026 child \u003d\u003d parent.getLastChild();\n  }",
    "begin_line": 1777,
    "end_line": 1780,
    "comment": "/** \n * Whether the child node is the FINALLY block of a try. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isTryCatchNodeContainer#1783",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isTryCatchNodeContainer(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isTryCatchNodeContainer(Node n) {\n    Node parent \u003d n.getParent();\n    return parent.isTry()\n        \u0026\u0026 parent.getFirstChild().getNext() \u003d\u003d n;\n  }",
    "begin_line": 1783,
    "end_line": 1787,
    "comment": "/** \n * Whether the node is a CATCH container BLOCK. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.removeChild#1790",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.removeChild(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "static void removeChild(Node parent, Node node) {\n    if (isTryFinallyNode(parent, node)) {\n      if (NodeUtil.hasCatchHandler(getCatchBlock(parent))) {\n        // A finally can only be removed if there is a catch.\n        parent.removeChild(node);\n      } else {\n        // Otherwise, only its children can be removed.\n        node.detachChildren();\n      }\n    } else if (node.isCatch()) {\n      // The CATCH can can only be removed if there is a finally clause.\n      Node tryNode \u003d node.getParent().getParent();\n      Preconditions.checkState(NodeUtil.hasFinally(tryNode));\n      node.detachFromParent();\n    } else if (isTryCatchNodeContainer(node)) {\n      // The container node itself can\u0027t be removed, but the contained CATCH\n      // can if there is a \u0027finally\u0027 clause\n      Node tryNode \u003d node.getParent();\n      Preconditions.checkState(NodeUtil.hasFinally(tryNode));\n      node.detachChildren();\n    } else if (node.isBlock()) {\n      // Simply empty the block.  This maintains source location and\n      // \"synthetic\"-ness.\n      node.detachChildren();\n    } else if (isStatementBlock(parent)\n        || isSwitchCase(node)) {\n      // A statement in a block can simply be removed.\n      parent.removeChild(node);\n    } else if (parent.isVar()) {\n      if (parent.hasMoreThanOneChild()) {\n        parent.removeChild(node);\n      } else {\n        // Remove the node from the parent, so it can be reused.\n        parent.removeChild(node);\n        // This would leave an empty VAR, remove the VAR itself.\n        removeChild(parent.getParent(), parent);\n      }\n    } else if (parent.isLabel()\n        \u0026\u0026 node \u003d\u003d parent.getLastChild()) {\n      // Remove the node from the parent, so it can be reused.\n      parent.removeChild(node);\n      // A LABEL without children can not be referred to, remove it.\n      removeChild(parent.getParent(), parent);\n    } else if (parent.isFor()\n        \u0026\u0026 parent.getChildCount() \u003d\u003d 4) {\n      // Only Token.FOR can have an Token.EMPTY other control structure\n      // need something for the condition. Others need to be replaced\n      // or the structure removed.\n      parent.replaceChild(node, IR.empty());\n    } else {\n      throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \" + parent.toString());\n    }\n  }",
    "begin_line": 1790,
    "end_line": 1843,
    "comment": "/** \n * Safely remove children while maintaining a valid node structure. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.maybeAddFinally#1848",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.maybeAddFinally(com.google.javascript.rhino.Node)",
    "snippet": "static void maybeAddFinally(Node tryNode) {\n    Preconditions.checkState(tryNode.isTry());\n    if (!NodeUtil.hasFinally(tryNode)) {\n      tryNode.addChildrenToBack(IR.block().srcref(tryNode));\n    }\n  }",
    "begin_line": 1848,
    "end_line": 1853,
    "comment": "/** \n * Add a finally block if one does not exist.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.tryMergeBlock#1859",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.tryMergeBlock(com.google.javascript.rhino.Node)",
    "snippet": "static boolean tryMergeBlock(Node block) {\n    Preconditions.checkState(block.isBlock());\n    Node parent \u003d block.getParent();\n    // Try to remove the block if its parent is a block/script or if its\n    // parent is label and it has exactly one child.\n    if (isStatementBlock(parent)) {\n      Node previous \u003d block;\n      while (block.hasChildren()) {\n        Node child \u003d block.removeFirstChild();\n        parent.addChildAfter(child, previous);\n        previous \u003d child;\n      }\n      parent.removeChild(block);\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 1859,
    "end_line": 1876,
    "comment": "/** \n * Merge a block with its parent block.\n * @return Whether the block was removed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isCallOrNew#1882",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isCallOrNew(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isCallOrNew(Node node) {\n    return node.isCall() || node.isNew();\n  }",
    "begin_line": 1882,
    "end_line": 1884,
    "comment": "/** \n * @param node A node\n * @return Whether the call is a NEW or CALL node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.getFunctionBody#1889",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getFunctionBody(com.google.javascript.rhino.Node)",
    "snippet": "static Node getFunctionBody(Node fn) {\n    Preconditions.checkArgument(fn.isFunction());\n    return fn.getLastChild();\n  }",
    "begin_line": 1889,
    "end_line": 1892,
    "comment": "/** \n * Return a BLOCK node for the given FUNCTION node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isFunctionDeclaration#1899",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isFunctionDeclaration(Node n) {\n    return n.isFunction() \u0026\u0026 isStatement(n);\n  }",
    "begin_line": 1899,
    "end_line": 1901,
    "comment": "/** \n * Is this node a function declaration? A function declaration is a function that has a name that is added to the current scope (i.e. a function that is not part of a expression; see  {@link #isFunctionExpression}).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isHoistedFunctionDeclaration#1908",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isHoistedFunctionDeclaration(Node n) {\n    return isFunctionDeclaration(n)\n        \u0026\u0026 (n.getParent().isScript()\n            || n.getParent().getParent().isFunction());\n  }",
    "begin_line": 1908,
    "end_line": 1912,
    "comment": "/** \n * Is this node a hoisted function declaration? A function declaration in the scope root is hoisted to the top of the scope. See  {@link #isFunctionDeclaration}).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isFunctionExpression#1937",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionExpression(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isFunctionExpression(Node n) {\n    return n.isFunction() \u0026\u0026 !isStatement(n);\n  }",
    "begin_line": 1937,
    "end_line": 1939,
    "comment": "/** \n * Is a FUNCTION node an function expression? An function expression is one that has either no name or a name that is not added to the current scope. \u003cp\u003eSome examples of function expressions: \u003cpre\u003e (function () {}) (function f() {})() [ function f() {} ] var f \u003d function f() {}; for (function f() {};;) {} \u003c/pre\u003e \u003cp\u003eSome examples of functions that are \u003cem\u003enot\u003c/em\u003e expressions: \u003cpre\u003e function f() {} if (x); else function f() {} for (;;) { function f() {} } \u003c/pre\u003e\n * @param n A node\n * @return Whether n is an function used within an expression.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isBleedingFunctionName#1945",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isBleedingFunctionName(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isBleedingFunctionName(Node n) {\n    return n.isName() \u0026\u0026 !n.getString().isEmpty() \u0026\u0026\n        isFunctionExpression(n.getParent());\n  }",
    "begin_line": 1945,
    "end_line": 1948,
    "comment": "/** \n * Returns whether this is a bleeding function (an anonymous named function that bleeds into the inner scope).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isEmptyFunctionExpression#1956",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isEmptyFunctionExpression(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isEmptyFunctionExpression(Node node) {\n    return isFunctionExpression(node) \u0026\u0026 isEmptyBlock(node.getLastChild());\n  }",
    "begin_line": 1956,
    "end_line": 1958,
    "comment": "/** \n * Determines if a node is a function expression that has an empty body.\n * @param node a node\n * @return whether the given node is a function expression that is empty\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isVarArgsFunction#1964",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isVarArgsFunction(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isVarArgsFunction(Node function) {\n    // TODO(johnlenz): rename this function\n    Preconditions.checkArgument(function.isFunction());\n    return isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        MATCH_NOT_FUNCTION);\n  }",
    "begin_line": 1964,
    "end_line": 1971,
    "comment": "/** \n * Determines if a function takes a variable number of arguments by looking for references to the \"arguments\" var_args object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isObjectCallMethod#1978",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(com.google.javascript.rhino.Node, java.lang.String)",
    "snippet": "static boolean isObjectCallMethod(Node callNode, String methodName) {\n    if (callNode.isCall()) {\n      Node functionIndentifyingExpression \u003d callNode.getFirstChild();\n      if (isGet(functionIndentifyingExpression)) {\n        Node last \u003d functionIndentifyingExpression.getLastChild();\n        if (last !\u003d null \u0026\u0026 last.isString()) {\n          String propName \u003d last.getString();\n          return (propName.equals(methodName));\n        }\n      }\n    }\n    return false;\n  }",
    "begin_line": 1978,
    "end_line": 1990,
    "comment": "/** \n * @return Whether node is a call to methodName.a.f(...) a[\u0027f\u0027](...)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isFunctionObjectCall#1998",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isFunctionObjectCall(Node callNode) {\n    return isObjectCallMethod(callNode, \"call\");\n  }",
    "begin_line": 1998,
    "end_line": 2000,
    "comment": "/** \n * @return Whether the callNode represents an expression in the form of:x.call(...) x[\u0027call\u0027](...)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isFunctionObjectApply#2007",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isFunctionObjectApply(Node callNode) {\n    return isObjectCallMethod(callNode, \"apply\");\n  }",
    "begin_line": 2007,
    "end_line": 2009,
    "comment": "/** \n * @return Whether the callNode represents an expression in the form of:x.apply(...) x[\u0027apply\u0027](...)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isVarOrSimpleAssignLhs#2020",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isVarOrSimpleAssignLhs(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "static boolean isVarOrSimpleAssignLhs(Node n, Node parent) {\n    return (parent.isAssign() \u0026\u0026 parent.getFirstChild() \u003d\u003d n) ||\n           parent.isVar();\n  }",
    "begin_line": 2020,
    "end_line": 2023,
    "comment": "/** \n * Determines whether this node is strictly on the left hand side of an assign or var initialization. Notably, this does not include all L-values, only statements where the node is used only as an L-value.\n * @param n The node\n * @param parent Parent of the node\n * @return True if n is the left hand of an assign\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isLValue#2038",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isLValue(com.google.javascript.rhino.Node)",
    "snippet": "public static boolean isLValue(Node n) {\n    Preconditions.checkArgument(n.isName() || n.isGetProp() ||\n        n.isGetElem());\n    Node parent \u003d n.getParent();\n    if (parent \u003d\u003d null) {\n      return false;\n    }\n    return (NodeUtil.isAssignmentOp(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n)\n        || (NodeUtil.isForIn(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n)\n        || parent.isVar()\n        || (parent.isFunction() \u0026\u0026 parent.getFirstChild() \u003d\u003d n)\n        || parent.isDec()\n        || parent.isInc()\n        || parent.isParamList()\n        || parent.isCatch();\n  }",
    "begin_line": 2038,
    "end_line": 2053,
    "comment": "/** \n * Determines whether this node is used as an L-value. Notice that sometimes names are used as both L-values and R-values. We treat \"var x;\" as a pseudo-L-value, which kind of makes sense if you treat it as \"assignment to \u0027undefined\u0027 at the top of the scope\". But if we\u0027re honest with ourselves, it doesn\u0027t make sense, and we only do this because it makes sense to treat this as syntactically similar to \"var x \u003d 0;\".\n * @param n The node\n * @return True if n is an L-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isObjectLitKey#2062",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isObjectLitKey(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "static boolean isObjectLitKey(Node node, Node parent) {\n    switch (node.getType()) {\n      case Token.STRING_KEY:\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        return true;\n    }\n    return false;\n  }",
    "begin_line": 2062,
    "end_line": 2070,
    "comment": "/** \n * Determines whether a node represents an object literal key (e.g. key1 in {key1: value1, key2: value2}).\n * @param node A node\n * @param parent The node\u0027s parent\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.getObjectLitKeyName#2077",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(com.google.javascript.rhino.Node)",
    "snippet": "static String getObjectLitKeyName(Node key) {\n    switch (key.getType()) {\n      case Token.STRING_KEY:\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        return key.getString();\n    }\n    throw new IllegalStateException(\"Unexpected node type: \" + key);\n  }",
    "begin_line": 2077,
    "end_line": 2085,
    "comment": "/** \n * Get the name of an object literal key.\n * @param key A node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.getObjectLitKeyTypeFromValueType#2091",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getObjectLitKeyTypeFromValueType(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "static JSType getObjectLitKeyTypeFromValueType(Node key, JSType valueType) {\n    if (valueType !\u003d null) {\n      switch (key.getType()) {\n        case Token.GETTER_DEF:\n          // GET must always return a function type.\n          if (valueType.isFunctionType()) {\n            FunctionType fntype \u003d valueType.toMaybeFunctionType();\n            valueType \u003d fntype.getReturnType();\n          } else {\n            return null;\n          }\n          break;\n        case Token.SETTER_DEF:\n          if (valueType.isFunctionType()) {\n            // SET must always return a function type.\n            FunctionType fntype \u003d valueType.toMaybeFunctionType();\n            Node param \u003d fntype.getParametersNode().getFirstChild();\n            // SET function must always have one parameter.\n            valueType \u003d param.getJSType();\n          } else {\n            return null;\n          }\n          break;\n      }\n    }\n    return valueType;\n  }",
    "begin_line": 2091,
    "end_line": 2117,
    "comment": "/** \n * @param key A OBJECTLIT key node.\n * @return The type expected when using the key.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isGetOrSetKey#2125",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isGetOrSetKey(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isGetOrSetKey(Node node) {\n    switch (node.getType()) {\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        return true;\n    }\n    return false;\n  }",
    "begin_line": 2125,
    "end_line": 2132,
    "comment": "/** \n * Determines whether a node represents an object literal get or set key (e.g. key1 in {get key1() {}, set key2(a){}).\n * @param node A node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.opToStr#2142",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.opToStr(int)",
    "snippet": "static String opToStr(int operator) {\n    switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"\u0026\u0026\";\n      case Token.BITAND: return \"\u0026\";\n      case Token.SHEQ: return \"\u003d\u003d\u003d\";\n      case Token.EQ: return \"\u003d\u003d\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!\u003d\";\n      case Token.SHNE: return \"!\u003d\u003d\";\n      case Token.LSH: return \"\u003c\u003c\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"\u003c\u003d\";\n      case Token.LT: return \"\u003c\";\n      case Token.URSH: return \"\u003e\u003e\u003e\";\n      case Token.RSH: return \"\u003e\u003e\";\n      case Token.GE: return \"\u003e\u003d\";\n      case Token.GT: return \"\u003e\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"\u003d\";\n      case Token.ASSIGN_BITOR: return \"|\u003d\";\n      case Token.ASSIGN_BITXOR: return \"^\u003d\";\n      case Token.ASSIGN_BITAND: return \"\u0026\u003d\";\n      case Token.ASSIGN_LSH: return \"\u003c\u003c\u003d\";\n      case Token.ASSIGN_RSH: return \"\u003e\u003e\u003d\";\n      case Token.ASSIGN_URSH: return \"\u003e\u003e\u003e\u003d\";\n      case Token.ASSIGN_ADD: return \"+\u003d\";\n      case Token.ASSIGN_SUB: return \"-\u003d\";\n      case Token.ASSIGN_MUL: return \"*\u003d\";\n      case Token.ASSIGN_DIV: return \"/\u003d\";\n      case Token.ASSIGN_MOD: return \"%\u003d\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }\n  }",
    "begin_line": 2142,
    "end_line": 2187,
    "comment": "/** \n * Converts an operator\u0027s token value (see  {@link Token}) to a string representation.\n * @param operator the operator\u0027s token value to convert\n * @return the string representation or {@code null} if the token value isnot an operator\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.opToStrNoFail#2197",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.opToStrNoFail(int)",
    "snippet": "static String opToStrNoFail(int operator) {\n    String res \u003d opToStr(operator);\n    if (res \u003d\u003d null) {\n      throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));\n    }\n    return res;\n  }",
    "begin_line": 2197,
    "end_line": 2204,
    "comment": "/** \n * Converts an operator\u0027s token value (see  {@link Token}) to a string representation or fails.\n * @param operator the operator\u0027s token value to convert\n * @return the string representation\n * @throws Error if the token value is not an operator\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.containsType#2209",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.containsType(com.google.javascript.rhino.Node, int, Predicate\u003cNode\u003e)",
    "snippet": "static boolean containsType(Node node,\n                              int type,\n                              Predicate\u003cNode\u003e traverseChildrenPred) {\n    return has(node, new MatchNodeType(type), traverseChildrenPred);\n  }",
    "begin_line": 2209,
    "end_line": 2213,
    "comment": "/** \n * @return true if n or any of its children are of the specified type\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.containsType#2218",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.containsType(com.google.javascript.rhino.Node, int)",
    "snippet": "static boolean containsType(Node node, int type) {\n    return containsType(node, type, Predicates.\u003cNode\u003ealwaysTrue());\n  }",
    "begin_line": 2218,
    "end_line": 2220,
    "comment": "/** \n * @return true if n or any of its children are of the specified type\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.redeclareVarsInsideBranch#2228",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(com.google.javascript.rhino.Node)",
    "snippet": "static void redeclareVarsInsideBranch(Node branch) {\n    Collection\u003cNode\u003e vars \u003d getVarsDeclaredInBranch(branch);\n    if (vars.isEmpty()) {\n      return;\n    }\n\n    Node parent \u003d getAddingRoot(branch);\n    for (Node nameNode : vars) {\n      Node var \u003d IR.var(\n          IR.name(nameNode.getString())\n              .srcref(nameNode))\n          .srcref(nameNode);\n      copyNameAnnotations(nameNode, var.getFirstChild());\n      parent.addChildToFront(var);\n    }\n  }",
    "begin_line": 2228,
    "end_line": 2243,
    "comment": "/** \n * Given a node tree, finds all the VAR declarations in that tree that are not in an inner scope. Then adds a new VAR node at the top of the current scope that redeclares them, if necessary.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.copyNameAnnotations#2250",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.copyNameAnnotations(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "static void copyNameAnnotations(Node source, Node destination) {\n    if (source.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n      destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n    }\n  }",
    "begin_line": 2250,
    "end_line": 2254,
    "comment": "/** \n * Copy any annotations that follow a named value.\n * @param source\n * @param destination\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.getAddingRoot#2260",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getAddingRoot(com.google.javascript.rhino.Node)",
    "snippet": "private static Node getAddingRoot(Node n) {\n    Node addingRoot \u003d null;\n    Node ancestor \u003d n;\n    while (null !\u003d (ancestor \u003d ancestor.getParent())) {\n      int type \u003d ancestor.getType();\n      if (type \u003d\u003d Token.SCRIPT) {\n        addingRoot \u003d ancestor;\n        break;\n      } else if (type \u003d\u003d Token.FUNCTION) {\n        addingRoot \u003d ancestor.getLastChild();\n        break;\n      }\n    }\n\n    // make sure that the adding root looks ok\n    Preconditions.checkState(addingRoot.isBlock() ||\n        addingRoot.isScript());\n    Preconditions.checkState(addingRoot.getFirstChild() \u003d\u003d null ||\n        !addingRoot.getFirstChild().isScript());\n    return addingRoot;\n  }",
    "begin_line": 2260,
    "end_line": 2280,
    "comment": "/** \n * Gets a Node at the top of the current scope where we can add new var declarations as children.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.newQualifiedNameNode#2288",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention, java.lang.String)",
    "snippet": "public static Node newQualifiedNameNode(\n      CodingConvention convention, String name) {\n    int endPos \u003d name.indexOf(\u0027.\u0027);\n    if (endPos \u003d\u003d -1) {\n      return newName(convention, name);\n    }\n    Node node \u003d newName(convention, name.substring(0, endPos));\n    int startPos;\n    do {\n      startPos \u003d endPos + 1;\n      endPos \u003d name.indexOf(\u0027.\u0027, startPos);\n      String part \u003d (endPos \u003d\u003d -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));\n      Node propNode \u003d IR.string(part);\n      if (convention.isConstantKey(part)) {\n        propNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n      }\n      node \u003d IR.getprop(node, propNode);\n    } while (endPos !\u003d -1);\n\n    return node;\n  }",
    "begin_line": 2288,
    "end_line": 2310,
    "comment": "/** \n * Creates a node representing a qualified name.\n * @param name A qualified name (e.g. \"foo\" or \"foo.bar.baz\")\n * @return A NAME or GETPROP node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.newQualifiedNameNode#2325",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention, java.lang.String, com.google.javascript.rhino.Node, java.lang.String)",
    "snippet": "static Node newQualifiedNameNode(\n      CodingConvention convention, String name, Node basisNode,\n      String originalName) {\n    Node node \u003d newQualifiedNameNode(convention, name);\n    setDebugInformation(node, basisNode, originalName);\n    return node;\n  }",
    "begin_line": 2325,
    "end_line": 2331,
    "comment": "/** \n * Creates a node representing a qualified name, copying over the source location information from the basis node and assigning the given original name to the node.\n * @param name A qualified name (e.g. \"foo\" or \"foo.bar.baz\")\n * @param basisNode The node that represents the name as currently found inthe AST.\n * @param originalName The original name of the item being represented by theNAME node. Used for debugging information.\n * @return A NAME or GETPROP node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.getRootOfQualifiedName#2336",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(com.google.javascript.rhino.Node)",
    "snippet": "static Node getRootOfQualifiedName(Node qName) {\n    for (Node current \u003d qName; true;\n         current \u003d current.getFirstChild()) {\n      if (current.isName() || current.isThis()) {\n        return current;\n      }\n      Preconditions.checkState(current.isGetProp());\n    }\n  }",
    "begin_line": 2336,
    "end_line": 2344,
    "comment": "/** \n * Gets the root node of a qualified name. Must be either NAME or THIS.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.setDebugInformation#2354",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.setDebugInformation(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String)",
    "snippet": "static void setDebugInformation(Node node, Node basisNode,\n                                  String originalName) {\n    node.copyInformationFromForTree(basisNode);\n    node.putProp(Node.ORIGINALNAME_PROP, originalName);\n  }",
    "begin_line": 2354,
    "end_line": 2358,
    "comment": "/** \n * Sets the debug information (source file info and original name) on the given node.\n * @param node The node on which to set the debug information.\n * @param basisNode The basis node from which to copy the source file info.\n * @param originalName The original name of the node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.newName#2360",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.newName(com.google.javascript.jscomp.CodingConvention, java.lang.String)",
    "snippet": "private static Node newName(\n      CodingConvention convention, String name) {\n    Node nameNode \u003d IR.name(name);\n    if (convention.isConstant(name)) {\n      nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n    }\n    return nameNode;\n  }",
    "begin_line": 2360,
    "end_line": 2367,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.newName#2379",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.newName(com.google.javascript.jscomp.CodingConvention, java.lang.String, com.google.javascript.rhino.Node)",
    "snippet": "static Node newName(CodingConvention convention, String name, Node srcref) {\n    return newName(convention, name).srcref(srcref);\n  }",
    "begin_line": 2379,
    "end_line": 2381,
    "comment": "/** \n * Creates a new node representing an *existing* name, copying over the source location information from the basis node.\n * @param name The name for the new NAME node.\n * @param srcref The node that represents the name as currently found inthe AST.\n * @return The node created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.newName#2396",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.newName(com.google.javascript.jscomp.CodingConvention, java.lang.String, com.google.javascript.rhino.Node, java.lang.String)",
    "snippet": "static Node newName(\n      CodingConvention convention, String name,\n      Node basisNode, String originalName) {\n    Node nameNode \u003d newName(convention, name, basisNode);\n    nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);\n    return nameNode;\n  }",
    "begin_line": 2396,
    "end_line": 2402,
    "comment": "/** \n * Creates a new node representing an *existing* name, copying over the source location information from the basis node and assigning the given original name to the node.\n * @param name The name for the new NAME node.\n * @param basisNode The node that represents the name as currently found inthe AST.\n * @param originalName The original name of the item being represented by theNAME node. Used for debugging information.\n * @return The node created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isLatin#2417",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isLatin(java.lang.String)",
    "snippet": "static boolean isLatin(String s) {\n    int len \u003d s.length();\n    for (int index \u003d 0; index \u003c len; index++) {\n      char c \u003d s.charAt(index);\n      if (c \u003e LARGEST_BASIC_LATIN) {\n        return false;\n      }\n    }\n    return true;\n  }",
    "begin_line": 2417,
    "end_line": 2426,
    "comment": "/** \n * Test if all characters in the string are in the Basic Latin (aka ASCII) character set - that they have UTF-16 values equal to or below 0x7f. This check can find which identifiers with Unicode characters need to be escaped in order to allow resulting files to be processed by non-Unicode aware UNIX tools and editors. * See http://en.wikipedia.org/wiki/Latin_characters_in_Unicode for more on Basic Latin.\n * @param s The string to be checked for ASCII-goodness.\n * @return True if all characters in the string are in Basic Latin set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isValidSimpleName#2431",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isValidSimpleName(java.lang.String)",
    "snippet": "static boolean isValidSimpleName(String name) {\n    return TokenStream.isJSIdentifier(name) \u0026\u0026\n        !TokenStream.isKeyword(name) \u0026\u0026\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, Unicode escapes have been converted\n        // to UTF-16 characters, so we\u0027re only searching for character\n        // values, not escapes.\n        isLatin(name);\n  }",
    "begin_line": 2431,
    "end_line": 2441,
    "comment": "/** \n * Determines whether the given name is a valid variable name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isValidQualifiedName#2448",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isValidQualifiedName(java.lang.String)",
    "snippet": " isValidQualifiedName(String name) {\n    if (name.endsWith(\".\") || name.startsWith(\".\")) {\n      return false;\n    }\n    String[] parts \u003d name.split(\"\\\\.\");\n    for (String part : parts) {\n      if (!isValidSimpleName(part)) {\n        return false;\n      }\n    }\n    return true;\n  }",
    "begin_line": 2448,
    "end_line": 2459,
    "comment": "/** \n * Determines whether the given name is a valid qualified name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MayBeStringResultPredicate.isValidPropertyName#2465",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isValidPropertyName(java.lang.String)",
    "snippet": "static boolean isValidPropertyName(String name) {\n    return isValidSimpleName(name);\n  }",
    "begin_line": 2465,
    "end_line": 2467,
    "comment": "/** \n * Determines whether the given name can appear on the right side of the dot operator. Many properties (like reserved words) cannot.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VarCollector.visit#2473",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.visit(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public void visit(Node n) {\n      if (n.isName()) {\n        Node parent \u003d n.getParent();\n        if (parent !\u003d null \u0026\u0026 parent.isVar()) {\n          String name \u003d n.getString();\n          if (!vars.containsKey(name)) {\n            vars.put(name, n);\n          }\n        }\n      }\n    }",
    "begin_line": 2473,
    "end_line": 2483,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VarCollector.getVarsDeclaredInBranch#2489",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(com.google.javascript.rhino.Node)",
    "snippet": "static Collection\u003cNode\u003e getVarsDeclaredInBranch(Node root) {\n    VarCollector collector \u003d new VarCollector();\n    visitPreOrder(\n        root,\n        collector,\n        MATCH_NOT_FUNCTION);\n    return collector.vars.values();\n  }",
    "begin_line": 2489,
    "end_line": 2496,
    "comment": "/** \n * Retrieves vars declared in the current node tree, excluding descent scopes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VarCollector.isPrototypePropertyDeclaration#2502",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isPrototypePropertyDeclaration(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isPrototypePropertyDeclaration(Node n) {\n    if (!isExprAssign(n)) {\n      return false;\n    }\n    return isPrototypeProperty(n.getFirstChild().getFirstChild());\n  }",
    "begin_line": 2502,
    "end_line": 2507,
    "comment": "/** \n * @return {@code true} if the node an assignment to a prototype property ofsome constructor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VarCollector.isPrototypeProperty#2512",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isPrototypeProperty(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isPrototypeProperty(Node n) {\n    String lhsString \u003d n.getQualifiedName();\n    if (lhsString \u003d\u003d null) {\n      return false;\n    }\n    int prototypeIdx \u003d lhsString.indexOf(\".prototype.\");\n    return prototypeIdx !\u003d -1;\n  }",
    "begin_line": 2512,
    "end_line": 2519,
    "comment": "/** \n * @return Whether the node represents a qualified prototype property.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VarCollector.getPrototypeClassName#2524",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getPrototypeClassName(com.google.javascript.rhino.Node)",
    "snippet": "static Node getPrototypeClassName(Node qName) {\n    Node cur \u003d qName;\n    while (cur.isGetProp()) {\n      if (cur.getLastChild().getString().equals(\"prototype\")) {\n        return cur.getFirstChild();\n      } else {\n        cur \u003d cur.getFirstChild();\n      }\n    }\n    return null;\n  }",
    "begin_line": 2524,
    "end_line": 2534,
    "comment": "/** \n * @return The class name part of a qualified prototype name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VarCollector.getPrototypePropertyName#2539",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getPrototypePropertyName(com.google.javascript.rhino.Node)",
    "snippet": "static String getPrototypePropertyName(Node qName) {\n    String qNameStr \u003d qName.getQualifiedName();\n    int prototypeIdx \u003d qNameStr.lastIndexOf(\".prototype.\");\n    int memberIndex \u003d prototypeIdx + \".prototype\".length() + 1;\n    return qNameStr.substring(memberIndex);\n  }",
    "begin_line": 2539,
    "end_line": 2544,
    "comment": "/** \n * @return The string property name part of a qualified prototype name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VarCollector.newUndefinedNode#2550",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.newUndefinedNode(com.google.javascript.rhino.Node)",
    "snippet": "static Node newUndefinedNode(Node srcReferenceNode) {\n    Node node \u003d IR.voidNode(IR.number(0));\n    if (srcReferenceNode !\u003d null) {\n        node.copyInformationFromForTree(srcReferenceNode);\n    }\n    return node;\n  }",
    "begin_line": 2550,
    "end_line": 2556,
    "comment": "/** \n * Create a node for an empty result expression: \"void 0\"\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VarCollector.newVarNode#2561",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.newVarNode(java.lang.String, com.google.javascript.rhino.Node)",
    "snippet": "static Node newVarNode(String name, Node value) {\n    Node nodeName \u003d IR.name(name);\n    if (value !\u003d null) {\n      Preconditions.checkState(value.getNext() \u003d\u003d null);\n      nodeName.addChildToBack(value);\n      nodeName.srcref(value);\n    }\n    Node var \u003d IR.var(nodeName).srcref(nodeName);\n\n    return var;\n  }",
    "begin_line": 2561,
    "end_line": 2571,
    "comment": "/** \n * Create a VAR node containing the given name and initial value expression.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MatchNameNode.MatchNameNode#2579",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.MatchNameNode(java.lang.String)",
    "snippet": " MatchNameNode(String name){\n      this.name \u003d name;\n    }",
    "begin_line": 2579,
    "end_line": 2581,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MatchNameNode.apply#2584",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.apply(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean apply(Node n) {\n      return n.isName() \u0026\u0026 n.getString().equals(name);\n    }",
    "begin_line": 2584,
    "end_line": 2586,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MatchNodeType.MatchNodeType#2595",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.MatchNodeType(int)",
    "snippet": " MatchNodeType(int type){\n      this.type \u003d type;\n    }",
    "begin_line": 2595,
    "end_line": 2597,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MatchNodeType.apply#2600",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.apply(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean apply(Node n) {\n      return n.getType() \u003d\u003d type;\n    }",
    "begin_line": 2600,
    "end_line": 2602,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MatchDeclaration.apply#2611",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.apply(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean apply(Node n) {\n      return isFunctionDeclaration(n) || n.isVar();\n    }",
    "begin_line": 2611,
    "end_line": 2613,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MatchNotFunction.apply#2621",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.apply(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean apply(Node n) {\n      return !n.isFunction();\n    }",
    "begin_line": 2621,
    "end_line": 2623,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MatchShallowStatement.apply#2633",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.apply(com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean apply(Node n) {\n      Node parent \u003d n.getParent();\n      return n.isBlock()\n          || (!n.isFunction() \u0026\u0026 (parent \u003d\u003d null\n              || isControlStructure(parent)\n              || isStatementBlock(parent)));\n    }",
    "begin_line": 2633,
    "end_line": 2639,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MatchShallowStatement.getNodeTypeReferenceCount#2645",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getNodeTypeReferenceCount(com.google.javascript.rhino.Node, int, Predicate\u003cNode\u003e)",
    "snippet": "static int getNodeTypeReferenceCount(\n      Node node, int type, Predicate\u003cNode\u003e traverseChildrenPred) {\n    return getCount(node, new MatchNodeType(type), traverseChildrenPred);\n  }",
    "begin_line": 2645,
    "end_line": 2648,
    "comment": "/** \n * Finds the number of times a type is referenced within the node tree.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MatchShallowStatement.isNameReferenced#2653",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isNameReferenced(com.google.javascript.rhino.Node, java.lang.String, Predicate\u003cNode\u003e)",
    "snippet": "static boolean isNameReferenced(Node node,\n                                  String name,\n                                  Predicate\u003cNode\u003e traverseChildrenPred) {\n    return has(node, new MatchNameNode(name), traverseChildrenPred);\n  }",
    "begin_line": 2653,
    "end_line": 2657,
    "comment": "/** \n * Whether a simple name is referenced within the node tree.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MatchShallowStatement.isNameReferenced#2662",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isNameReferenced(com.google.javascript.rhino.Node, java.lang.String)",
    "snippet": "static boolean isNameReferenced(Node node, String name) {\n    return isNameReferenced(node, name, Predicates.\u003cNode\u003ealwaysTrue());\n  }",
    "begin_line": 2662,
    "end_line": 2664,
    "comment": "/** \n * Whether a simple name is referenced within the node tree.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MatchShallowStatement.getNameReferenceCount#2669",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getNameReferenceCount(com.google.javascript.rhino.Node, java.lang.String)",
    "snippet": "static int getNameReferenceCount(Node node, String name) {\n    return getCount(\n        node, new MatchNameNode(name), Predicates.\u003cNode\u003ealwaysTrue());\n  }",
    "begin_line": 2669,
    "end_line": 2672,
    "comment": "/** \n * Finds the number of times a simple name is referenced within the node tree.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MatchShallowStatement.has#2677",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.has(com.google.javascript.rhino.Node, Predicate\u003cNode\u003e, Predicate\u003cNode\u003e)",
    "snippet": "static boolean has(Node node,\n                     Predicate\u003cNode\u003e pred,\n                     Predicate\u003cNode\u003e traverseChildrenPred) {\n    if (pred.apply(node)) {\n      return true;\n    }\n\n    if (!traverseChildrenPred.apply(node)) {\n      return false;\n    }\n\n    for (Node c \u003d node.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n      if (has(c, pred, traverseChildrenPred)) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
    "begin_line": 2677,
    "end_line": 2695,
    "comment": "/** \n * @return Whether the predicate is true for the node or any of its children.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MatchShallowStatement.getCount#2701",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getCount(com.google.javascript.rhino.Node, Predicate\u003cNode\u003e, Predicate\u003cNode\u003e)",
    "snippet": "static int getCount(\n      Node n, Predicate\u003cNode\u003e pred, Predicate\u003cNode\u003e traverseChildrenPred) {\n    int total \u003d 0;\n\n    if (pred.apply(n)) {\n      total++;\n    }\n\n    if (traverseChildrenPred.apply(n)) {\n      for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n        total +\u003d getCount(c, pred, traverseChildrenPred);\n      }\n    }\n\n    return total;\n  }",
    "begin_line": 2701,
    "end_line": 2716,
    "comment": "/** \n * @return The number of times the the predicate is true for the nodeor any of its children.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.visit#2723",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.visit(com.google.javascript.rhino.Node)",
    "snippet": "void visit(Node node);",
    "begin_line": 2723,
    "end_line": 2723,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.visitPreOrder#2730",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.visitPreOrder(com.google.javascript.rhino.Node, com.google.javascript.jscomp.NodeUtil.Visitor, Predicate\u003cNode\u003e)",
    "snippet": "static void visitPreOrder(Node node,\n                     Visitor visitor,\n                     Predicate\u003cNode\u003e traverseChildrenPred) {\n    visitor.visit(node);\n\n    if (traverseChildrenPred.apply(node)) {\n      for (Node c \u003d node.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n        visitPreOrder(c, visitor, traverseChildrenPred);\n      }\n    }\n  }",
    "begin_line": 2730,
    "end_line": 2740,
    "comment": "/** \n * A pre-order traversal, calling Visitor.visit for each child matching the predicate.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.visitPostOrder#2746",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.visitPostOrder(com.google.javascript.rhino.Node, com.google.javascript.jscomp.NodeUtil.Visitor, Predicate\u003cNode\u003e)",
    "snippet": "static void visitPostOrder(Node node,\n                     Visitor visitor,\n                     Predicate\u003cNode\u003e traverseChildrenPred) {\n    if (traverseChildrenPred.apply(node)) {\n      for (Node c \u003d node.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n        visitPostOrder(c, visitor, traverseChildrenPred);\n      }\n    }\n\n    visitor.visit(node);\n  }",
    "begin_line": 2746,
    "end_line": 2756,
    "comment": "/** \n * A post-order traversal, calling Visitor.visit for each child matching the predicate.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.hasFinally#2761",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.hasFinally(com.google.javascript.rhino.Node)",
    "snippet": "static boolean hasFinally(Node n) {\n    Preconditions.checkArgument(n.isTry());\n    return n.getChildCount() \u003d\u003d 3;\n  }",
    "begin_line": 2761,
    "end_line": 2764,
    "comment": "/** \n * @return Whether a TRY node has a finally block.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.getCatchBlock#2770",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getCatchBlock(com.google.javascript.rhino.Node)",
    "snippet": "static Node getCatchBlock(Node n) {\n    Preconditions.checkArgument(n.isTry());\n    return n.getFirstChild().getNext();\n  }",
    "begin_line": 2770,
    "end_line": 2773,
    "comment": "/** \n * @return The BLOCK node containing the CATCH node (if any)of a TRY.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.hasCatchHandler#2779",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.hasCatchHandler(com.google.javascript.rhino.Node)",
    "snippet": "static boolean hasCatchHandler(Node n) {\n    Preconditions.checkArgument(n.isBlock());\n    return n.hasChildren() \u0026\u0026 n.getFirstChild().isCatch();\n  }",
    "begin_line": 2779,
    "end_line": 2782,
    "comment": "/** \n * @return Whether BLOCK (from a TRY node) contains a CATCH.\n * @see NodeUtil#getCatchBlock\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.getFunctionParameters#2788",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getFunctionParameters(com.google.javascript.rhino.Node)",
    "snippet": "public static Node getFunctionParameters(Node fnNode) {\n    // Function NODE: [ FUNCTION -\u003e NAME, LP -\u003e ARG1, ARG2, ... ]\n    Preconditions.checkArgument(fnNode.isFunction());\n    return fnNode.getFirstChild().getNext();\n  }",
    "begin_line": 2788,
    "end_line": 2792,
    "comment": "/** \n * @param fnNode The function.\n * @return The Node containing the Function parameters.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.isConstantName#2811",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isConstantName(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isConstantName(Node node) {\n    return node.getBooleanProp(Node.IS_CONSTANT_NAME);\n  }",
    "begin_line": 2811,
    "end_line": 2813,
    "comment": "/** \n * Returns true if a name node represents a constant variable. \u003cp\u003eDetermining whether a variable is constant has three steps: \u003col\u003e \u003cli\u003eIn CodingConventionAnnotator, any name that matches the {@link CodingConvention#isConstant(String)} is annotated with anIS_CONSTANT_NAME property. \u003cli\u003eThe normalize pass renames any variable with the IS_CONSTANT_NAME annotation and that is initialized to a constant value with a variable name including $$constant. \u003cli\u003eReturn true here if the variable includes $$constant in its name. \u003c/ol\u003e\n * @param node A NAME or STRING node\n * @return True if the variable is constant\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.isConstantByConvention#2816",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isConstantByConvention(com.google.javascript.jscomp.CodingConvention, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "static boolean isConstantByConvention(\n      CodingConvention convention, Node node, Node parent) {\n    String name \u003d node.getString();\n    if (parent.isGetProp() \u0026\u0026\n        node \u003d\u003d parent.getLastChild()) {\n      return convention.isConstantKey(name);\n    } else if (isObjectLitKey(node, parent)) {\n      return convention.isConstantKey(name);\n    } else {\n      return convention.isConstant(name);\n    }\n  }",
    "begin_line": 2816,
    "end_line": 2827,
    "comment": "/** \n * Whether the given name is constant by coding convention. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.getFunctionJSDocInfo#2832",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(com.google.javascript.rhino.Node)",
    "snippet": "public static JSDocInfo getFunctionJSDocInfo(Node n) {\n    Preconditions.checkState(n.isFunction());\n    JSDocInfo fnInfo \u003d n.getJSDocInfo();\n    if (fnInfo \u003d\u003d null \u0026\u0026 NodeUtil.isFunctionExpression(n)) {\n      // Look for the info on other nodes.\n      Node parent \u003d n.getParent();\n      if (parent.isAssign()) {\n        // on ASSIGNs\n        fnInfo \u003d parent.getJSDocInfo();\n      } else if (parent.isName()) {\n        // on var NAME \u003d function() { ... };\n        fnInfo \u003d parent.getParent().getJSDocInfo();\n      }\n    }\n    return fnInfo;\n  }",
    "begin_line": 2832,
    "end_line": 2847,
    "comment": "/** \n * Get the JSDocInfo for a function.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.getSourceName#2853",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getSourceName(com.google.javascript.rhino.Node)",
    "snippet": "public static String getSourceName(Node n) {\n    String sourceName \u003d null;\n    while (sourceName \u003d\u003d null \u0026\u0026 n !\u003d null) {\n      sourceName \u003d n.getSourceFileName();\n      n \u003d n.getParent();\n    }\n    return sourceName;\n  }",
    "begin_line": 2853,
    "end_line": 2860,
    "comment": "/** \n * @param n The node.\n * @return The source name property on the node or its ancestors.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.getSourceFile#2866",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getSourceFile(com.google.javascript.rhino.Node)",
    "snippet": "public static StaticSourceFile getSourceFile(Node n) {\n    StaticSourceFile sourceName \u003d null;\n    while (sourceName \u003d\u003d null \u0026\u0026 n !\u003d null) {\n      sourceName \u003d n.getStaticSourceFile();\n      n \u003d n.getParent();\n    }\n    return sourceName;\n  }",
    "begin_line": 2866,
    "end_line": 2873,
    "comment": "/** \n * @param n The node.\n * @return The source name property on the node or its ancestors.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.getInputId#2879",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getInputId(com.google.javascript.rhino.Node)",
    "snippet": "public static InputId getInputId(Node n) {\n    while (n !\u003d null \u0026\u0026 !n.isScript()) {\n      n \u003d n.getParent();\n    }\n\n    return (n !\u003d null \u0026\u0026 n.isScript()) ? n.getInputId() : null;\n  }",
    "begin_line": 2879,
    "end_line": 2885,
    "comment": "/** \n * @param n The node.\n * @return The InputId property on the node or its ancestors.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.newCallNode#2890",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.newCallNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "static Node newCallNode(Node callTarget, Node... parameters) {\n    boolean isFreeCall \u003d !isGet(callTarget);\n    Node call \u003d IR.call(callTarget);\n    call.putBooleanProp(Node.FREE_CALL, isFreeCall);\n    for (Node parameter : parameters) {\n      call.addChildToBack(parameter);\n    }\n    return call;\n  }",
    "begin_line": 2890,
    "end_line": 2898,
    "comment": "/** \n * A new CALL node with the \"FREE_CALL\" set based on call target.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.evaluatesToLocalValue#2904",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(com.google.javascript.rhino.Node)",
    "snippet": "static boolean evaluatesToLocalValue(Node value) {\n    return evaluatesToLocalValue(value, Predicates.\u003cNode\u003ealwaysFalse());\n  }",
    "begin_line": 2904,
    "end_line": 2906,
    "comment": "/** \n * @return Whether the node is known to be a value that is not referencedelsewhere.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.evaluatesToLocalValue#2913",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(com.google.javascript.rhino.Node, Predicate\u003cNode\u003e)",
    "snippet": "static boolean evaluatesToLocalValue(Node value, Predicate\u003cNode\u003e locals) {\n    switch (value.getType()) {\n      case Token.CAST:\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn\u0027t matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.DELPROP:\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x \u003d \u0027\u0027 + g (x is now an local string)\n        //  x -\u003d g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }",
    "begin_line": 2913,
    "end_line": 2979,
    "comment": "/** \n * @param locals A predicate to apply to unknown local values.\n * @return Whether the node is known to be a value that is not a referenceoutside the expression scope.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.getNthSibling#2986",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getNthSibling(com.google.javascript.rhino.Node, int)",
    "snippet": "private static Node getNthSibling(Node first, int index) {\n    Node sibling \u003d first;\n    while (index !\u003d 0 \u0026\u0026 sibling !\u003d null) {\n      sibling \u003d sibling.getNext();\n      index--;\n    }\n    return sibling;\n  }",
    "begin_line": 2986,
    "end_line": 2993,
    "comment": "/** \n * Given the first sibling, this returns the nth sibling or null if no such sibling exists. This is like \"getChildAtIndex\" but returns null for non-existent indexes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.getArgumentForFunction#2999",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getArgumentForFunction(com.google.javascript.rhino.Node, int)",
    "snippet": "static Node getArgumentForFunction(Node function, int index) {\n    Preconditions.checkState(function.isFunction());\n    return getNthSibling(\n        function.getFirstChild().getNext().getFirstChild(), index);\n  }",
    "begin_line": 2999,
    "end_line": 3003,
    "comment": "/** \n * Given the function, this returns the nth argument or null if no such parameter exists.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.getArgumentForCallOrNew#3009",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getArgumentForCallOrNew(com.google.javascript.rhino.Node, int)",
    "snippet": "static Node getArgumentForCallOrNew(Node call, int index) {\n    Preconditions.checkState(isCallOrNew(call));\n    return getNthSibling(\n      call.getFirstChild().getNext(), index);\n  }",
    "begin_line": 3009,
    "end_line": 3013,
    "comment": "/** \n * Given the new or call, this returns the nth argument of the call or null if no such argument exists.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.isCallOrNewTarget#3018",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isCallOrNewTarget(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isCallOrNewTarget(Node target) {\n    Node parent \u003d target.getParent();\n    return parent !\u003d null\n        \u0026\u0026 NodeUtil.isCallOrNew(parent)\n        \u0026\u0026 parent.getFirstChild() \u003d\u003d target;\n  }",
    "begin_line": 3018,
    "end_line": 3023,
    "comment": "/** \n * Returns whether this is a target of a call or new.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.isToStringMethodCall#3025",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isToStringMethodCall(com.google.javascript.rhino.Node)",
    "snippet": "private static boolean isToStringMethodCall(Node call) {\n    Node getNode \u003d call.getFirstChild();\n    if (isGet(getNode)) {\n      Node propNode \u003d getNode.getLastChild();\n      return propNode.isString() \u0026\u0026 \"toString\".equals(propNode.getString());\n    }\n    return false;\n  }",
    "begin_line": 3025,
    "end_line": 3032,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.getBestJSDocInfo#3035",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(com.google.javascript.rhino.Node)",
    "snippet": "static JSDocInfo getBestJSDocInfo(Node n) {\n    JSDocInfo info \u003d n.getJSDocInfo();\n    if (info \u003d\u003d null) {\n      Node parent \u003d n.getParent();\n      if (parent \u003d\u003d null) {\n        return null;\n      }\n\n      if (parent.isName()) {\n        return getBestJSDocInfo(parent);\n      } else if (parent.isAssign()) {\n        return parent.getJSDocInfo();\n      } else if (isObjectLitKey(parent, parent.getParent())) {\n        return parent.getJSDocInfo();\n      } else if (parent.isFunction()) {\n        return parent.getJSDocInfo();\n      } else if (parent.isVar() \u0026\u0026 parent.hasOneChild()) {\n        return parent.getJSDocInfo();\n      } else if ((parent.isHook() \u0026\u0026 parent.getFirstChild() !\u003d n) ||\n                 parent.isOr() ||\n                 parent.isAnd() ||\n                 (parent.isComma() \u0026\u0026 parent.getFirstChild() !\u003d n)) {\n        return getBestJSDocInfo(parent);\n      } else if (parent.isCast()) {\n        return parent.getJSDocInfo();\n      }\n    }\n    return info;\n  }",
    "begin_line": 3035,
    "end_line": 3063,
    "comment": "/** \n * Find the best JSDoc for the given node. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.getBestLValue#3066",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getBestLValue(com.google.javascript.rhino.Node)",
    "snippet": "static Node getBestLValue(Node n) {\n    Node parent \u003d n.getParent();\n    boolean isFunctionDeclaration \u003d isFunctionDeclaration(n);\n    if (isFunctionDeclaration) {\n      return n.getFirstChild();\n    } else if (parent.isName()) {\n      return parent;\n    } else if (parent.isAssign()) {\n      return parent.getFirstChild();\n    } else if (isObjectLitKey(parent, parent.getParent())) {\n      return parent;\n    } else if (\n        (parent.isHook() \u0026\u0026 parent.getFirstChild() !\u003d n) ||\n        parent.isOr() ||\n        parent.isAnd() ||\n        (parent.isComma() \u0026\u0026 parent.getFirstChild() !\u003d n)) {\n      return getBestLValue(parent);\n    } else if (parent.isCast()) {\n      return getBestLValue(parent);\n    }\n    return null;\n  }",
    "begin_line": 3066,
    "end_line": 3087,
    "comment": "/** \n * Find the l-value that the given r-value is being assigned to. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.getRValueOfLValue#3090",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getRValueOfLValue(com.google.javascript.rhino.Node)",
    "snippet": "static Node getRValueOfLValue(Node n) {\n    Node parent \u003d n.getParent();\n    switch (parent.getType()) {\n      case Token.ASSIGN:\n        return n.getNext();\n      case Token.VAR:\n        return n.getFirstChild();\n      case Token.FUNCTION:\n        return parent;\n    }\n    return null;\n  }",
    "begin_line": 3090,
    "end_line": 3101,
    "comment": "/** \n * Gets the r-value of a node returned by getBestLValue. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.getBestLValueOwner#3104",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getBestLValueOwner(com.google.javascript.rhino.Node)",
    "snippet": "static Node getBestLValueOwner(@Nullable Node lValue) {\n    if (lValue \u003d\u003d null || lValue.getParent() \u003d\u003d null) {\n      return null;\n    }\n    if (isObjectLitKey(lValue, lValue.getParent())) {\n      return getBestLValue(lValue.getParent());\n    } else if (isGet(lValue)) {\n      return lValue.getFirstChild();\n    }\n\n    return null;\n  }",
    "begin_line": 3104,
    "end_line": 3115,
    "comment": "/** \n * Get the owner of the given l-value node. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.getBestLValueName#3118",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.getBestLValueName(com.google.javascript.rhino.Node)",
    "snippet": "static String getBestLValueName(@Nullable Node lValue) {\n    if (lValue \u003d\u003d null || lValue.getParent() \u003d\u003d null) {\n      return null;\n    }\n    if (isObjectLitKey(lValue, lValue.getParent())) {\n      Node owner \u003d getBestLValue(lValue.getParent());\n      if (owner !\u003d null) {\n        String ownerName \u003d getBestLValueName(owner);\n        if (ownerName !\u003d null) {\n          return ownerName + \".\" + getObjectLitKeyName(lValue);\n        }\n      }\n      return null;\n    }\n    return lValue.getQualifiedName();\n  }",
    "begin_line": 3118,
    "end_line": 3133,
    "comment": "/** \n * Get the name of the given l-value node. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.isExpressionResultUsed#3138",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isExpressionResultUsed(Node expr) {\n    // TODO(johnlenz): consider sharing some code with trySimpleUnusedResult.\n    Node parent \u003d expr.getParent();\n    switch (parent.getType()) {\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n        return false;\n      case Token.CAST:\n        return isExpressionResultUsed(parent);\n      case Token.HOOK:\n      case Token.AND:\n      case Token.OR:\n        return (expr \u003d\u003d parent.getFirstChild())\n            ? true : isExpressionResultUsed(parent);\n      case Token.COMMA:\n        Node gramps \u003d parent.getParent();\n        if (gramps.isCall() \u0026\u0026\n            parent \u003d\u003d gramps.getFirstChild()) {\n          // Semantically, a direct call to eval is different from an indirect\n          // call to an eval. See ECMA-262 S15.1.2.1. So it\u0027s OK for the first\n          // expression to a comma to be a no-op if it\u0027s used to indirect\n          // an eval. This we pretend that this is \"used\".\n          if (expr \u003d\u003d parent.getFirstChild() \u0026\u0026\n              parent.getChildCount() \u003d\u003d 2 \u0026\u0026\n              expr.getNext().isName() \u0026\u0026\n              \"eval\".equals(expr.getNext().getString())) {\n            return true;\n          }\n        }\n\n        return (expr \u003d\u003d parent.getFirstChild())\n            ? false : isExpressionResultUsed(parent);\n      case Token.FOR:\n        if (!NodeUtil.isForIn(parent)) {\n          // Only an expression whose result is in the condition part of the\n          // expression is used.\n          return (parent.getChildAtIndex(1) \u003d\u003d expr);\n        }\n        break;\n    }\n    return true;\n  }",
    "begin_line": 3138,
    "end_line": 3179,
    "comment": "/** \n * @returns false iff the result of the expression is not consumed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.isExecutedExactlyOnce#3186",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isExecutedExactlyOnce(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isExecutedExactlyOnce(Node n) {\n    inspect: do {\n      Node parent \u003d n.getParent();\n      switch (parent.getType()) {\n        case Token.IF:\n        case Token.HOOK:\n        case Token.AND:\n        case Token.OR:\n          if (parent.getFirstChild() !\u003d n) {\n            return false;\n          }\n          // other ancestors may be conditional\n          continue inspect;\n        case Token.FOR:\n          if (NodeUtil.isForIn(parent)) {\n            if (parent.getChildAtIndex(1) !\u003d n) {\n              return false;\n            }\n          } else {\n            if (parent.getFirstChild() !\u003d n) {\n              return false;\n            }\n          }\n          // other ancestors may be conditional\n          continue inspect;\n        case Token.WHILE:\n        case Token.DO:\n          return false;\n        case Token.TRY:\n          // Consider all code under a try/catch to be conditionally executed.\n          if (!hasFinally(parent) || parent.getLastChild() !\u003d n) {\n            return false;\n          }\n          continue inspect;\n        case Token.CASE:\n        case Token.DEFAULT_CASE:\n          return false;\n        case Token.SCRIPT:\n        case Token.FUNCTION:\n          // Done, we\u0027ve reached the scope root.\n          break inspect;\n      }\n    } while ((n \u003d n.getParent()) !\u003d null);\n    return true;\n  }",
    "begin_line": 3186,
    "end_line": 3230,
    "comment": "/** \n * @param n The expression to check.\n * @return Whether the expression is unconditionally executed only once in thecontaining execution scope.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.booleanNode#3235",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.booleanNode(boolean)",
    "snippet": "static Node booleanNode(boolean value) {\n    return value ? IR.trueNode() : IR.falseNode();\n  }",
    "begin_line": 3235,
    "end_line": 3237,
    "comment": "/** \n * @return An appropriate AST node for the boolean value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.numberNode#3242",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.numberNode(double, com.google.javascript.rhino.Node)",
    "snippet": "static Node numberNode(double value, Node srcref) {\n    Node result;\n    if (Double.isNaN(value)) {\n      result \u003d IR.name(\"NaN\");\n    } else if (value \u003d\u003d Double.POSITIVE_INFINITY) {\n      result \u003d IR.name(\"Infinity\");\n    } else if (value \u003d\u003d Double.NEGATIVE_INFINITY) {\n      result \u003d IR.neg(IR.name(\"Infinity\"));\n    } else {\n      result \u003d IR.number(value);\n    }\n    if (srcref !\u003d null) {\n      result.srcrefTree(srcref);\n    }\n    return result;\n  }",
    "begin_line": 3242,
    "end_line": 3257,
    "comment": "/** \n * @return An appropriate AST node for the double value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Visitor.isNaN#3259",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/NodeUtil.java",
    "class_name": "com.google.javascript.jscomp.NodeUtil",
    "signature": "com.google.javascript.jscomp.NodeUtil.isNaN(com.google.javascript.rhino.Node)",
    "snippet": "static boolean isNaN(Node n) {\n    if ((n.isName() \u0026\u0026 n.getString().equals(\"NaN\")) ||\n        (n.getType() \u003d\u003d Token.DIV \u0026\u0026\n         n.getFirstChild().isNumber() \u0026\u0026 n.getFirstChild().getDouble() \u003d\u003d 0 \u0026\u0026\n         n.getLastChild().isNumber() \u0026\u0026 n.getLastChild().getDouble() \u003d\u003d 0)) {\n      return true;\n    }\n    return false;\n  }",
    "begin_line": 3259,
    "end_line": 3267,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PassFactory.PassFactory#37",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/PassFactory.java",
    "class_name": "com.google.javascript.jscomp.PassFactory",
    "signature": "com.google.javascript.jscomp.PassFactory.PassFactory(java.lang.String, boolean)",
    "snippet": "protected PassFactory(String name, boolean isOneTimePass) {\n    this.name \u003d name;\n    this.isOneTimePass \u003d isOneTimePass;\n  }",
    "begin_line": 37,
    "end_line": 40,
    "comment": "/** \n * @param name The name of the pass that this factory creates.\n * @param isOneTimePass If true, the pass produced by this factory canonly be run once.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PassFactory.getName#45",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/PassFactory.java",
    "class_name": "com.google.javascript.jscomp.PassFactory",
    "signature": "com.google.javascript.jscomp.PassFactory.getName()",
    "snippet": "String getName() {\n    return name;\n  }",
    "begin_line": 45,
    "end_line": 47,
    "comment": "/** \n * @return The name of this pass.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PassFactory.isOneTimePass#52",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/PassFactory.java",
    "class_name": "com.google.javascript.jscomp.PassFactory",
    "signature": "com.google.javascript.jscomp.PassFactory.isOneTimePass()",
    "snippet": "boolean isOneTimePass() {\n    return isOneTimePass;\n  }",
    "begin_line": 52,
    "end_line": 54,
    "comment": "/** \n * @return Whether the pass produced by this factory can only be run once.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PassFactory.create#59",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/PassFactory.java",
    "class_name": "com.google.javascript.jscomp.PassFactory",
    "signature": "com.google.javascript.jscomp.PassFactory.create(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "abstract CompilerPass create(AbstractCompiler compiler);",
    "begin_line": 59,
    "end_line": 59,
    "comment": "/** \n * Creates a new compiler pass to be run.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PassFactory.getHotSwapPass#67",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/PassFactory.java",
    "class_name": "com.google.javascript.jscomp.PassFactory",
    "signature": "com.google.javascript.jscomp.PassFactory.getHotSwapPass(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "HotSwapCompilerPass getHotSwapPass(AbstractCompiler compiler) {\n    // TODO(bashir): If in future most of PassFactory\u0027s in DefaultPassConfig\n    // turns out to be DefaultPassConfig.HotSwapPassFactory, we should probably\n    // change the implementation here by the one in HotSwapPassFactory.\n    return null;\n  }",
    "begin_line": 67,
    "end_line": 72,
    "comment": "/** \n * Any factory whose CompilerPass has a corresponding hot-swap version should override this.\n * @param compiler The compiler that can has been used to do the full compile.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrepareAst.PrepareAst#39",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/PrepareAst.java",
    "class_name": "com.google.javascript.jscomp.PrepareAst",
    "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAst(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": " PrepareAst(AbstractCompiler compiler) {\n    this(compiler, false);\n  }",
    "begin_line": 39,
    "end_line": 41,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrepareAst.PrepareAst#43",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/PrepareAst.java",
    "class_name": "com.google.javascript.jscomp.PrepareAst",
    "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAst(com.google.javascript.jscomp.AbstractCompiler, boolean)",
    "snippet": " PrepareAst(AbstractCompiler compiler, boolean checkOnly) {\n    this.compiler \u003d compiler;\n    this.checkOnly \u003d checkOnly;\n  }",
    "begin_line": 43,
    "end_line": 46,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrepareAst.reportChange#48",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/PrepareAst.java",
    "class_name": "com.google.javascript.jscomp.PrepareAst",
    "signature": "com.google.javascript.jscomp.PrepareAst.reportChange()",
    "snippet": "private void reportChange() {\n    if (checkOnly) {\n      Preconditions.checkState(false, \"normalizeNodeType constraints violated\");\n    }\n  }",
    "begin_line": 48,
    "end_line": 52,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrepareAst.process#55",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/PrepareAst.java",
    "class_name": "com.google.javascript.jscomp.PrepareAst",
    "signature": "com.google.javascript.jscomp.PrepareAst.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void process(Node externs, Node root) {\n    if (checkOnly) {\n      normalizeNodeTypes(root);\n    } else {\n      // Don\u0027t perform \"PrepareAnnotations\" when doing checks as\n      // they currently aren\u0027t valid during sanity checks.  In particular,\n      // they DIRECT_EVAL shouldn\u0027t be applied after inlining has been\n      // performed.\n      if (externs !\u003d null) {\n        NodeTraversal.traverse(\n            compiler, externs, new PrepareAnnotations());\n      }\n      if (root !\u003d null) {\n        NodeTraversal.traverse(\n            compiler, root, new PrepareAnnotations());\n      }\n    }\n  }",
    "begin_line": 55,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrepareAst.normalizeNodeTypes#77",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/PrepareAst.java",
    "class_name": "com.google.javascript.jscomp.PrepareAst",
    "signature": "com.google.javascript.jscomp.PrepareAst.normalizeNodeTypes(com.google.javascript.rhino.Node)",
    "snippet": "private void normalizeNodeTypes(Node n) {\n    normalizeBlocks(n);\n\n    for (Node child \u003d n.getFirstChild();\n         child !\u003d null; child \u003d child.getNext()) {\n      // This pass is run during the CompilerTestCase validation, so this\n      // parent pointer check serves as a more general check.\n      Preconditions.checkState(child.getParent() \u003d\u003d n);\n\n      normalizeNodeTypes(child);\n    }\n  }",
    "begin_line": 77,
    "end_line": 88,
    "comment": "/** \n * Covert EXPR_VOID to EXPR_RESULT to simplify the rest of the code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrepareAst.normalizeBlocks#93",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/PrepareAst.java",
    "class_name": "com.google.javascript.jscomp.PrepareAst",
    "signature": "com.google.javascript.jscomp.PrepareAst.normalizeBlocks(com.google.javascript.rhino.Node)",
    "snippet": "private void normalizeBlocks(Node n) {\n    if (NodeUtil.isControlStructure(n)\n        \u0026\u0026 !n.isLabel()\n        \u0026\u0026 !n.isSwitch()) {\n      for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n        if (NodeUtil.isControlStructureCodeBlock(n,c) \u0026\u0026\n            !c.isBlock()) {\n          Node newBlock \u003d IR.block().srcref(n);\n          n.replaceChild(c, newBlock);\n          if (!c.isEmpty()) {\n            newBlock.addChildrenToFront(c);\n          } else {\n            newBlock.setWasEmptyNode(true);\n          }\n          c \u003d newBlock;\n          reportChange();\n        }\n      }\n    }\n  }",
    "begin_line": 93,
    "end_line": 112,
    "comment": "/** \n * Add blocks to IF, WHILE, DO, etc.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrepareAnnotations.PrepareAnnotations#121",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/PrepareAst.java",
    "class_name": "com.google.javascript.jscomp.PrepareAst",
    "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations()",
    "snippet": " PrepareAnnotations() {\n    }",
    "begin_line": 121,
    "end_line": 122,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrepareAnnotations.shouldTraverse#125",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/PrepareAst.java",
    "class_name": "com.google.javascript.jscomp.PrepareAst",
    "signature": "com.google.javascript.jscomp.PrepareAst.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      if (n.isObjectLit()) {\n        normalizeObjectLiteralAnnotations(n);\n      }\n      return true;\n    }",
    "begin_line": 125,
    "end_line": 130,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrepareAnnotations.visit#133",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/PrepareAst.java",
    "class_name": "com.google.javascript.jscomp.PrepareAst",
    "signature": "com.google.javascript.jscomp.PrepareAst.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      switch (n.getType()) {\n        case Token.CALL:\n          annotateCalls(n);\n          break;\n\n        case Token.FUNCTION:\n          annotateDispatchers(n, parent);\n          break;\n      }\n    }",
    "begin_line": 133,
    "end_line": 143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrepareAnnotations.normalizeObjectLiteralAnnotations#145",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/PrepareAst.java",
    "class_name": "com.google.javascript.jscomp.PrepareAst",
    "signature": "com.google.javascript.jscomp.PrepareAst.normalizeObjectLiteralAnnotations(com.google.javascript.rhino.Node)",
    "snippet": "private void normalizeObjectLiteralAnnotations(Node objlit) {\n      Preconditions.checkState(objlit.isObjectLit());\n      for (Node key \u003d objlit.getFirstChild();\n           key !\u003d null; key \u003d key.getNext()) {\n        Node value \u003d key.getFirstChild();\n        normalizeObjectLiteralKeyAnnotations(objlit, key, value);\n      }\n    }",
    "begin_line": 145,
    "end_line": 152,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrepareAnnotations.annotateCalls#158",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/PrepareAst.java",
    "class_name": "com.google.javascript.jscomp.PrepareAst",
    "signature": "com.google.javascript.jscomp.PrepareAst.annotateCalls(com.google.javascript.rhino.Node)",
    "snippet": "private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // Keep track of of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node first \u003d n.getFirstChild();\n      if (!NodeUtil.isGet(first)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      if (first.isName() \u0026\u0026\n          \"eval\".equals(first.getString())) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }",
    "begin_line": 158,
    "end_line": 174,
    "comment": "/** \n * There are two types of calls we are interested in calls without explicit \"this\" values (what we are call \"free\" calls) and direct call to eval.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrepareAnnotations.annotateDispatchers#179",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/PrepareAst.java",
    "class_name": "com.google.javascript.jscomp.PrepareAst",
    "signature": "com.google.javascript.jscomp.PrepareAst.annotateDispatchers(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private void annotateDispatchers(Node n, Node parent) {\n      Preconditions.checkState(n.isFunction());\n      if (parent.getJSDocInfo() !\u003d null\n          \u0026\u0026 parent.getJSDocInfo().isJavaDispatch()) {\n        if (parent.isAssign()) {\n          Preconditions.checkState(parent.getLastChild() \u003d\u003d n);\n          n.putBooleanProp(Node.IS_DISPATCHER, true);\n        }\n      }\n    }",
    "begin_line": 179,
    "end_line": 188,
    "comment": "/** \n * Translate dispatcher info into the property expected node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrepareAnnotations.normalizeObjectLiteralKeyAnnotations#205",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/PrepareAst.java",
    "class_name": "com.google.javascript.jscomp.PrepareAst",
    "signature": "com.google.javascript.jscomp.PrepareAst.normalizeObjectLiteralKeyAnnotations(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private void normalizeObjectLiteralKeyAnnotations(\n        Node objlit, Node key, Node value) {\n      Preconditions.checkState(objlit.isObjectLit());\n      if (key.getJSDocInfo() !\u003d null \u0026\u0026\n          value.isFunction()) {\n        value.setJSDocInfo(key.getJSDocInfo());\n      }\n    }",
    "begin_line": 205,
    "end_line": 212,
    "comment": "/** \n * In the AST that Rhino gives us, it needs to make a distinction between JsDoc on the object literal node and JsDoc on the object literal value. For example, \u003cpre\u003e var x \u003d { / JSDOC / a: \u0027b\u0027, c: / JSDOC / \u0027d\u0027 }; \u003c/pre\u003e But in few narrow cases (in particular, function literals), it\u0027s a lot easier for us if the doc is attached to the value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessDefines.ProcessDefines#100",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.ProcessDefines(com.google.javascript.jscomp.AbstractCompiler, java.util.Map\u003cjava.lang.String,com.google.javascript.rhino.Node\u003e)",
    "snippet": " ProcessDefines(AbstractCompiler compiler, Map\u003cString, Node\u003e replacements) {\n    this.compiler \u003d compiler;\n    dominantReplacements \u003d replacements;\n  }",
    "begin_line": 100,
    "end_line": 103,
    "comment": "/** \n * Create a pass that overrides define constants. TODO(nicksantos): Write a builder to help JSCompiler induce {@code replacements} from command-line flags\n * @param replacements A hash table of names of defines to their replacements.All replacements \u003cb\u003emust\u003c/b\u003e be literals.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessDefines.injectNamespace#110",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.injectNamespace(com.google.javascript.jscomp.GlobalNamespace)",
    "snippet": "ProcessDefines injectNamespace(GlobalNamespace namespace) {\n    this.namespace \u003d namespace;\n    return this;\n  }",
    "begin_line": 110,
    "end_line": 113,
    "comment": "/** \n * Injects a pre-computed global namespace, so that the same namespace can be re-used for multiple check passes. Returns  {@code this} foreasy chaining.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessDefines.process#116",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void process(Node externs, Node root) {\n    if (namespace \u003d\u003d null) {\n      namespace \u003d new GlobalNamespace(compiler, root);\n    }\n    overrideDefines(collectDefines(root, namespace));\n  }",
    "begin_line": 116,
    "end_line": 121,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessDefines.overrideDefines#123",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.overrideDefines(java.util.Map\u003cjava.lang.String,com.google.javascript.jscomp.ProcessDefines.DefineInfo\u003e)",
    "snippet": "private void overrideDefines(Map\u003cString, DefineInfo\u003e allDefines) {\n    boolean changed \u003d false;\n    for (Map.Entry\u003cString, DefineInfo\u003e def : allDefines.entrySet()) {\n      String defineName \u003d def.getKey();\n      DefineInfo info \u003d def.getValue();\n      Node inputValue \u003d dominantReplacements.get(defineName);\n      Node finalValue \u003d inputValue !\u003d null ?\n          inputValue : info.getLastValue();\n      if (finalValue !\u003d info.initialValue) {\n        info.initialValueParent.replaceChild(\n            info.initialValue, finalValue.cloneTree());\n        compiler.addToDebugLog(\"Overriding @define variable \" + defineName);\n        changed \u003d changed ||\n            finalValue.getType() !\u003d info.initialValue.getType() ||\n            !finalValue.isEquivalentTo(info.initialValue);\n      }\n    }\n\n    if (changed) {\n      compiler.reportCodeChange();\n    }\n\n    Set\u003cString\u003e unusedReplacements \u003d dominantReplacements.keySet();\n    unusedReplacements.removeAll(allDefines.keySet());\n    unusedReplacements.removeAll(KNOWN_DEFINES);\n    for (String unknownDefine : unusedReplacements) {\n      compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));\n    }\n  }",
    "begin_line": 123,
    "end_line": 151,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessDefines.format#153",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.format(java.text.MessageFormat, java.lang.Object)",
    "snippet": "private static String format(MessageFormat format, Object... params) {\n    return format.format(params);\n  }",
    "begin_line": 153,
    "end_line": 155,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessDefines.isValidDefineType#160",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.isValidDefineType(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "private boolean isValidDefineType(JSTypeExpression expression) {\n    JSType type \u003d expression.evaluate(null, compiler.getTypeRegistry());\n    return !type.isUnknownType() \u0026\u0026 type.isSubtype(\n        compiler.getTypeRegistry().getNativeType(\n            JSTypeNative.NUMBER_STRING_BOOLEAN));\n  }",
    "begin_line": 160,
    "end_line": 165,
    "comment": "/** \n * Only defines of literal number, string, or boolean are supported.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessDefines.collectDefines#172",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.collectDefines(com.google.javascript.rhino.Node, com.google.javascript.jscomp.GlobalNamespace)",
    "snippet": "private Map\u003cString, DefineInfo\u003e collectDefines(Node root,\n      GlobalNamespace namespace) {\n    // Find all the global names with a @define annotation\n    List\u003cName\u003e allDefines \u003d Lists.newArrayList();\n    for (Name name : namespace.getNameIndex().values()) {\n      Ref decl \u003d name.getDeclaration();\n      if (name.docInfo !\u003d null \u0026\u0026 name.docInfo.isDefine()) {\n        // Process defines should not depend on check types being enabled,\n        // so we look for the JSDoc instead of the inferred type.\n        if (isValidDefineType(name.docInfo.getType())) {\n          allDefines.add(name);\n        } else {\n          JSError error \u003d JSError.make(\n              decl.getSourceName(),\n              decl.node, INVALID_DEFINE_TYPE_ERROR);\n          compiler.report(error);\n        }\n      } else {\n        for (Ref ref : name.getRefs()) {\n          if (ref \u003d\u003d decl) {\n            // Declarations were handled above.\n            continue;\n          }\n\n          Node n \u003d ref.node;\n          Node parent \u003d ref.node.getParent();\n          JSDocInfo info \u003d n.getJSDocInfo();\n          if (info \u003d\u003d null \u0026\u0026\n              parent.isVar() \u0026\u0026 parent.hasOneChild()) {\n            info \u003d parent.getJSDocInfo();\n          }\n\n          if (info !\u003d null \u0026\u0026 info.isDefine()) {\n            allDefines.add(name);\n            break;\n          }\n        }\n      }\n    }\n\n    CollectDefines pass \u003d new CollectDefines(compiler, allDefines);\n    NodeTraversal.traverse(compiler, root, pass);\n    return pass.getAllDefines();\n  }",
    "begin_line": 172,
    "end_line": 215,
    "comment": "/** \n * Finds all defines, and creates a  {@link DefineInfo} data structure foreach one.\n * @return A map of {@link DefineInfo} structures, keyed by name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectDefines.CollectDefines#237",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.CollectDefines(com.google.javascript.jscomp.AbstractCompiler, java.util.List\u003ccom.google.javascript.jscomp.GlobalNamespace.Name\u003e)",
    "snippet": " CollectDefines(AbstractCompiler compiler, List\u003cName\u003e listOfDefines) {\n      this.compiler \u003d compiler;\n      this.allDefines \u003d Maps.newHashMap();\n\n      assignableDefines \u003d Maps.newHashMap();\n      assignAllowed \u003d new ArrayDeque\u003cInteger\u003e();\n      assignAllowed.push(1);\n\n      // Create a map of references to defines keyed by node for easy lookup\n      allRefInfo \u003d Maps.newHashMap();\n      for (Name name : listOfDefines) {\n        Ref decl \u003d name.getDeclaration();\n        if (decl !\u003d null) {\n          allRefInfo.put(decl.node,\n                         new RefInfo(decl, name));\n        }\n        for (Ref ref : name.getRefs()) {\n          if (ref \u003d\u003d decl) {\n            // Declarations were handled above.\n            continue;\n          }\n\n          // If there\u0027s a TWIN def, only put one of the twins in.\n          if (ref.getTwin() \u003d\u003d null || !ref.getTwin().isSet()) {\n            allRefInfo.put(ref.node, new RefInfo(ref, name));\n          }\n        }\n      }\n    }",
    "begin_line": 237,
    "end_line": 265,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectDefines.getAllDefines#271",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.getAllDefines()",
    "snippet": "Map\u003cString, DefineInfo\u003e getAllDefines() {\n      return allDefines;\n    }",
    "begin_line": 271,
    "end_line": 273,
    "comment": "/** \n * Get a map of  {@link DefineInfo} structures, keyed by the name ofthe define.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectDefines.shouldTraverse#280",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      updateAssignAllowedStack(n, true);\n      return true;\n    }",
    "begin_line": 280,
    "end_line": 284,
    "comment": "/** \n * Keeps track of whether the traversal is in a conditional branch. We traverse all nodes of the parse tree.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectDefines.visit#287",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      RefInfo refInfo \u003d allRefInfo.get(n);\n      if (refInfo !\u003d null) {\n        Ref ref \u003d refInfo.ref;\n        Name name \u003d refInfo.name;\n        String fullName \u003d name.getFullName();\n        switch (ref.type) {\n          case SET_FROM_GLOBAL:\n          case SET_FROM_LOCAL:\n            Node valParent \u003d getValueParent(ref);\n            Node val \u003d valParent.getLastChild();\n            if (valParent.isAssign() \u0026\u0026 name.isSimpleName() \u0026\u0026\n                name.getDeclaration() \u003d\u003d ref) {\n              // For defines, it\u0027s an error if a simple name is assigned\n              // before it\u0027s declared\n              compiler.report(\n                  t.makeError(val, INVALID_DEFINE_INIT_ERROR, fullName));\n            } else if (processDefineAssignment(t, fullName, val, valParent)) {\n              // remove the assignment so that the variable is still declared,\n              // but no longer assigned to a value, e.g.,\n              // DEF_FOO \u003d 5; // becomes \"5;\"\n\n              // We can\u0027t remove the ASSIGN/VAR when we\u0027re still visiting its\n              // children, so we\u0027ll have to come back later to remove it.\n              refInfo.name.removeRef(ref);\n              lvalueToRemoveLater \u003d valParent;\n            }\n            break;\n          default:\n            if (t.inGlobalScope()) {\n              // Treat this as a reference to a define in the global scope.\n              // After this point, the define must not be reassigned,\n              // or it\u0027s an error.\n              DefineInfo info \u003d assignableDefines.get(fullName);\n              if (info !\u003d null) {\n                setDefineInfoNotAssignable(info, t);\n                assignableDefines.remove(fullName);\n              }\n            }\n            break;\n        }\n      }\n\n      if (!t.inGlobalScope() \u0026\u0026\n          n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().isDefine()) {\n        // warn about @define annotations in local scopes\n        compiler.report(\n            t.makeError(n, NON_GLOBAL_DEFINE_INIT_ERROR, \"\"));\n      }\n\n      if (lvalueToRemoveLater \u003d\u003d n) {\n        lvalueToRemoveLater \u003d null;\n        if (n.isAssign()) {\n          Node last \u003d n.getLastChild();\n          n.removeChild(last);\n          parent.replaceChild(n, last);\n        } else {\n          Preconditions.checkState(n.isName());\n          n.removeChild(n.getFirstChild());\n        }\n        compiler.reportCodeChange();\n      }\n\n      if (n.isCall()) {\n        if (t.inGlobalScope()) {\n          // If there\u0027s a function call in the global scope,\n          // we just say it\u0027s unsafe and freeze all the defines.\n          //\n          // NOTE(nicksantos): We could be a lot smarter here. For example,\n          // ReplaceOverriddenVars keeps a call graph of all functions and\n          // which functions/variables that they reference, and tries\n          // to statically determine which functions are \"safe\" and which\n          // are not. But this would be overkill, especially because\n          // the intended use of defines is with config_files, where\n          // all the defines are at the top of the bundle.\n          for (DefineInfo info : assignableDefines.values()) {\n            setDefineInfoNotAssignable(info, t);\n          }\n\n          assignableDefines.clear();\n        }\n      }\n\n      updateAssignAllowedStack(n, false);\n    }",
    "begin_line": 287,
    "end_line": 371,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectDefines.updateAssignAllowedStack#380",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.updateAssignAllowedStack(com.google.javascript.rhino.Node, boolean)",
    "snippet": "private void updateAssignAllowedStack(Node n, boolean entering) {\n      switch (n.getType()) {\n        case Token.CASE:\n        case Token.FOR:\n        case Token.FUNCTION:\n        case Token.HOOK:\n        case Token.IF:\n        case Token.SWITCH:\n        case Token.WHILE:\n          if (entering) {\n            assignAllowed.push(0);\n          } else {\n            assignAllowed.remove();\n          }\n          break;\n      }\n    }",
    "begin_line": 380,
    "end_line": 396,
    "comment": "/** \n * Determines whether assignment to a define should be allowed in the subtree of the given node, and if not, records that fact.\n * @param n The node whose subtree we\u0027re about to enter or exit.\n * @param entering True if we\u0027re entering the subtree, false otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectDefines.isAssignAllowed#402",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.isAssignAllowed()",
    "snippet": "private boolean isAssignAllowed() {\n      return assignAllowed.element() \u003d\u003d 1;\n    }",
    "begin_line": 402,
    "end_line": 404,
    "comment": "/** \n * Determines whether assignment to a define should be allowed at the current point of the traversal.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectDefines.processDefineAssignment#415",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.processDefineAssignment(com.google.javascript.jscomp.NodeTraversal, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private boolean processDefineAssignment(NodeTraversal t,\n        String name, Node value, Node valueParent) {\n      if (value \u003d\u003d null || !NodeUtil.isValidDefineValue(value,\n                                                        allDefines.keySet())) {\n        compiler.report(\n            t.makeError(value, INVALID_DEFINE_INIT_ERROR, name));\n      } else if (!isAssignAllowed()) {\n        compiler.report(\n            t.makeError(valueParent, NON_GLOBAL_DEFINE_INIT_ERROR, name));\n      } else {\n        DefineInfo info \u003d allDefines.get(name);\n        if (info \u003d\u003d null) {\n          // First declaration of this define.\n          info \u003d new DefineInfo(value, valueParent);\n          allDefines.put(name, info);\n          assignableDefines.put(name, info);\n        } else if (info.recordAssignment(value)) {\n          // The define was already initialized, but this is a safe\n          // re-assignment.\n          return true;\n        } else {\n          // The define was already initialized, and this is an unsafe\n          // re-assignment.\n          compiler.report(\n              t.makeError(valueParent, DEFINE_NOT_ASSIGNABLE_ERROR,\n                  name, info.getReasonWhyNotAssignable()));\n        }\n      }\n\n      return false;\n    }",
    "begin_line": 415,
    "end_line": 445,
    "comment": "/** \n * Tracks the given define.\n * @param t The current traversal, for context.\n * @param name The full name for this define.\n * @param value The value assigned to the define.\n * @param valueParent The parent node of value.\n * @return Whether we should remove this assignment from the parse tree.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectDefines.getValueParent#453",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.getValueParent(com.google.javascript.jscomp.GlobalNamespace.Ref)",
    "snippet": "private static Node getValueParent(Ref ref) {\n      // there are two types of declarations: VARs and ASSIGNs\n      return ref.node.getParent() !\u003d null \u0026\u0026\n          ref.node.getParent().isVar() ?\n          ref.node : ref.node.getParent();\n    }",
    "begin_line": 453,
    "end_line": 458,
    "comment": "/** \n * Gets the parent node of the value for any assignment to a Name. For example, in the assignment {@code var x \u003d 3;}the parent would be the NAME node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectDefines.setDefineInfoNotAssignable#467",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.setDefineInfoNotAssignable(com.google.javascript.jscomp.ProcessDefines.DefineInfo, com.google.javascript.jscomp.NodeTraversal)",
    "snippet": "private void setDefineInfoNotAssignable(DefineInfo info, NodeTraversal t) {\n      info.setNotAssignable(format(REASON_DEFINE_NOT_ASSIGNABLE,\n                                t.getLineNumber(), t.getSourceName()));\n    }",
    "begin_line": 467,
    "end_line": 470,
    "comment": "/** \n * Records the fact that because of the current node in the node traversal, the define can\u0027t ever be assigned again.\n * @param info Represents the define variable.\n * @param t The current traversal.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RefInfo.RefInfo#480",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.RefInfo(com.google.javascript.jscomp.GlobalNamespace.Ref, com.google.javascript.jscomp.GlobalNamespace.Name)",
    "snippet": " RefInfo(Ref ref, Name name) {\n        this.ref \u003d ref;\n        this.name \u003d name;\n      }",
    "begin_line": 480,
    "end_line": 483,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefineInfo.DefineInfo#502",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.DefineInfo(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public DefineInfo(Node initialValue, Node initialValueParent) {\n      this.initialValueParent \u003d initialValueParent;\n      this.initialValue \u003d initialValue;\n      lastValue \u003d initialValue;\n      isAssignable \u003d true;\n    }",
    "begin_line": 502,
    "end_line": 507,
    "comment": "/** \n * Initializes a define.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefineInfo.setNotAssignable#514",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.setNotAssignable(java.lang.String)",
    "snippet": "public void setNotAssignable(String reason) {\n      isAssignable \u003d false;\n      reasonNotAssignable \u003d reason;\n    }",
    "begin_line": 514,
    "end_line": 517,
    "comment": "/** \n * Records the fact that this define can\u0027t be assigned a value anymore.\n * @param reason A message describing the reason why it can\u0027t be assigned.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefineInfo.getReasonWhyNotAssignable#522",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.getReasonWhyNotAssignable()",
    "snippet": "public String getReasonWhyNotAssignable() {\n      return reasonNotAssignable;\n    }",
    "begin_line": 522,
    "end_line": 524,
    "comment": "/** \n * Gets the reason why a define is not assignable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefineInfo.recordAssignment#531",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.recordAssignment(com.google.javascript.rhino.Node)",
    "snippet": "public boolean recordAssignment(Node value) {\n      lastValue \u003d value;\n      return isAssignable;\n    }",
    "begin_line": 531,
    "end_line": 534,
    "comment": "/** \n * Records an assigned value.\n * @return False if there was an error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefineInfo.getLastValue#539",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessDefines.java",
    "class_name": "com.google.javascript.jscomp.ProcessDefines",
    "signature": "com.google.javascript.jscomp.ProcessDefines.getLastValue()",
    "snippet": "public Node getLastValue() {\n      return lastValue;\n    }",
    "begin_line": 539,
    "end_line": 541,
    "comment": "/** \n * Gets the last assigned value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessTweaks.TweakFunction#123",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction(java.lang.String)",
    "snippet": " TweakFunction(String name) {\n      this(name, null, Token.ERROR, Token.ERROR, null);\n    }",
    "begin_line": 123,
    "end_line": 125,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessTweaks.TweakFunction#127",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction(java.lang.String, java.lang.String, int)",
    "snippet": " TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA) {\n      this(name, expectedTypeName, validNodeTypeA, Token.ERROR, null);\n    }",
    "begin_line": 127,
    "end_line": 130,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessTweaks.TweakFunction#132",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction(java.lang.String, java.lang.String, int, int)",
    "snippet": " TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA, int validNodeTypeB) {\n      this(name, expectedTypeName, validNodeTypeA, validNodeTypeB, null);\n    }",
    "begin_line": 132,
    "end_line": 135,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessTweaks.TweakFunction#137",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction(java.lang.String, com.google.javascript.jscomp.ProcessTweaks.TweakFunction)",
    "snippet": " TweakFunction(String name, TweakFunction registerFunction) {\n      this(name, null, Token.ERROR, Token.ERROR, registerFunction);\n    }",
    "begin_line": 137,
    "end_line": 139,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessTweaks.TweakFunction#141",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction(java.lang.String, java.lang.String, int, int, com.google.javascript.jscomp.ProcessTweaks.TweakFunction)",
    "snippet": " TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA, int validNodeTypeB,\n        TweakFunction registerFunction) {\n      this.name \u003d name;\n      this.expectedTypeName \u003d expectedTypeName;\n      this.validNodeTypeA \u003d validNodeTypeA;\n      this.validNodeTypeB \u003d validNodeTypeB;\n      this.registerFunction \u003d registerFunction;\n    }",
    "begin_line": 141,
    "end_line": 149,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessTweaks.isValidNodeType#151",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.isValidNodeType(int)",
    "snippet": "boolean isValidNodeType(int type) {\n      return type \u003d\u003d validNodeTypeA || type \u003d\u003d validNodeTypeB;\n    }",
    "begin_line": 151,
    "end_line": 153,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessTweaks.isCorrectRegisterFunction#155",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.isCorrectRegisterFunction(com.google.javascript.jscomp.ProcessTweaks.TweakFunction)",
    "snippet": "boolean isCorrectRegisterFunction(TweakFunction registerFunction) {\n      Preconditions.checkNotNull(registerFunction);\n      return this.registerFunction \u003d\u003d registerFunction;\n    }",
    "begin_line": 155,
    "end_line": 158,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessTweaks.isGetterFunction#160",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.isGetterFunction()",
    "snippet": "boolean isGetterFunction() {\n      return registerFunction !\u003d null;\n    }",
    "begin_line": 160,
    "end_line": 162,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessTweaks.getName#164",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.getName()",
    "snippet": "String getName() {\n      return name;\n    }",
    "begin_line": 164,
    "end_line": 166,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessTweaks.getExpectedTypeName#168",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.getExpectedTypeName()",
    "snippet": "String getExpectedTypeName() {\n      return expectedTypeName;\n    }",
    "begin_line": 168,
    "end_line": 170,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessTweaks.createDefaultValueNode#172",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.createDefaultValueNode()",
    "snippet": "Node createDefaultValueNode() {\n      switch (this) {\n        case REGISTER_BOOLEAN:\n          return IR.falseNode();\n        case REGISTER_NUMBER:\n          return IR.number(0);\n        case REGISTER_STRING:\n          return IR.string(\"\");\n      }\n      throw new IllegalStateException();\n    }",
    "begin_line": 172,
    "end_line": 182,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessTweaks.ProcessTweaks#194",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.ProcessTweaks(com.google.javascript.jscomp.AbstractCompiler, boolean, java.util.Map\u003cjava.lang.String,com.google.javascript.rhino.Node\u003e)",
    "snippet": " ProcessTweaks(AbstractCompiler compiler, boolean stripTweaks,\n      Map\u003cString, Node\u003e compilerDefaultValueOverrides) {\n    this.compiler \u003d compiler;\n    this.stripTweaks \u003d stripTweaks;\n    // Having the map sorted is required for the unit tests to be deterministic.\n    this.compilerDefaultValueOverrides \u003d Maps.newTreeMap();\n    this.compilerDefaultValueOverrides.putAll(compilerDefaultValueOverrides);\n  }",
    "begin_line": 194,
    "end_line": 201,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessTweaks.process#204",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void process(Node externs, Node root) {\n    CollectTweaksResult result \u003d collectTweaks(root);\n    applyCompilerDefaultValueOverrides(result.tweakInfos);\n\n    boolean changed \u003d false;\n\n    if (stripTweaks) {\n      changed \u003d stripAllCalls(result.tweakInfos);\n    } else if (!compilerDefaultValueOverrides.isEmpty()) {\n      changed \u003d replaceGetCompilerOverridesCalls(result.getOverridesCalls);\n    }\n    if (changed) {\n      compiler.reportCodeChange();\n    }\n  }",
    "begin_line": 204,
    "end_line": 218,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessTweaks.replaceGetCompilerOverridesCalls#224",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.replaceGetCompilerOverridesCalls(java.util.List\u003ccom.google.javascript.jscomp.ProcessTweaks.TweakFunctionCall\u003e)",
    "snippet": "private boolean replaceGetCompilerOverridesCalls(\n      List\u003cTweakFunctionCall\u003e calls) {\n    for (TweakFunctionCall call : calls) {\n      Node callNode \u003d call.callNode;\n      Node objNode \u003d createCompilerDefaultValueOverridesVarNode(callNode);\n      callNode.getParent().replaceChild(callNode, objNode);\n    }\n    return !calls.isEmpty();\n  }",
    "begin_line": 224,
    "end_line": 232,
    "comment": "/** \n * Passes the compiler default value overrides to the JS by replacing calls to goog.tweak.getCompilerOverrids_ with a map of tweak ID-\u003edefault value;\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessTweaks.stripAllCalls#238",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.stripAllCalls(java.util.Map\u003cjava.lang.String,com.google.javascript.jscomp.ProcessTweaks.TweakInfo\u003e)",
    "snippet": "private boolean stripAllCalls(Map\u003cString, TweakInfo\u003e tweakInfos) {\n    for (TweakInfo tweakInfo : tweakInfos.values()) {\n      boolean isRegistered \u003d tweakInfo.isRegistered();\n      for (TweakFunctionCall functionCall : tweakInfo.functionCalls) {\n        Node callNode \u003d functionCall.callNode;\n        Node parent \u003d callNode.getParent();\n        if (functionCall.tweakFunc.isGetterFunction()) {\n          Node newValue;\n          if (isRegistered) {\n            newValue \u003d tweakInfo.getDefaultValueNode().cloneNode();\n          } else {\n            // When we find a getter of an unregistered tweak, there has\n            // already been a warning about it, so now just use a default\n            // value when stripping.\n            TweakFunction registerFunction \u003d\n                functionCall.tweakFunc.registerFunction;\n            newValue \u003d registerFunction.createDefaultValueNode();\n          }\n          parent.replaceChild(callNode, newValue);\n        } else {\n          Node voidZeroNode \u003d IR.voidNode(IR.number(0).srcref(callNode))\n              .srcref(callNode);\n          parent.replaceChild(callNode, voidZeroNode);\n        }\n      }\n    }\n    return !tweakInfos.isEmpty();\n  }",
    "begin_line": 238,
    "end_line": 265,
    "comment": "/** \n * Removes all CALL nodes in the given TweakInfos, replacing calls to getter functions with the tweak\u0027s default value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessTweaks.createCompilerDefaultValueOverridesVarNode#270",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.createCompilerDefaultValueOverridesVarNode(com.google.javascript.rhino.Node)",
    "snippet": "private Node createCompilerDefaultValueOverridesVarNode(\n      Node sourceInformationNode) {\n    Node objNode \u003d IR.objectlit().srcref(sourceInformationNode);\n    for (Entry\u003cString, Node\u003e entry : compilerDefaultValueOverrides.entrySet()) {\n      Node objKeyNode \u003d IR.stringKey(entry.getKey())\n          .copyInformationFrom(sourceInformationNode);\n      Node objValueNode \u003d entry.getValue().cloneNode()\n          .copyInformationFrom(sourceInformationNode);\n      objKeyNode.addChildToBack(objValueNode);\n      objNode.addChildToBack(objKeyNode);\n    }\n    return objNode;\n  }",
    "begin_line": 270,
    "end_line": 282,
    "comment": "/** \n * Creates a JS object that holds a map of tweakId -\u003e default value override.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessTweaks.applyCompilerDefaultValueOverrides#285",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.applyCompilerDefaultValueOverrides(java.util.Map\u003cjava.lang.String,com.google.javascript.jscomp.ProcessTweaks.TweakInfo\u003e)",
    "snippet": "private void applyCompilerDefaultValueOverrides(\n      Map\u003cString, TweakInfo\u003e tweakInfos) {\n    for (Entry\u003cString, Node\u003e entry : compilerDefaultValueOverrides.entrySet()) {\n      String tweakId \u003d entry.getKey();\n      TweakInfo tweakInfo \u003d tweakInfos.get(tweakId);\n      if (tweakInfo \u003d\u003d null) {\n        compiler.report(JSError.make(UNKNOWN_TWEAK_WARNING, tweakId));\n      } else {\n        TweakFunction registerFunc \u003d tweakInfo.registerCall.tweakFunc;\n        Node value \u003d entry.getValue();\n        if (!registerFunc.isValidNodeType(value.getType())) {\n          compiler.report(JSError.make(INVALID_TWEAK_DEFAULT_VALUE_WARNING,\n              tweakId, registerFunc.getName(),\n              registerFunc.getExpectedTypeName()));\n        } else {\n          tweakInfo.defaultValueNode \u003d value;\n        }\n      }\n    }\n  }",
    "begin_line": 285,
    "end_line": 304,
    "comment": "/** \n * Sets the default values of tweaks based on compiler options. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProcessTweaks.collectTweaks#311",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.collectTweaks(com.google.javascript.rhino.Node)",
    "snippet": "private CollectTweaksResult collectTweaks(Node root) {\n    CollectTweaks pass \u003d new CollectTweaks();\n    NodeTraversal.traverse(compiler, root, pass);\n\n    Map\u003cString, TweakInfo\u003e tweakInfos \u003d pass.allTweaks;\n    for (TweakInfo tweakInfo: tweakInfos.values()) {\n      tweakInfo.emitAllWarnings();\n    }\n    return new CollectTweaksResult(tweakInfos, pass.getOverridesCalls);\n  }",
    "begin_line": 311,
    "end_line": 320,
    "comment": "/** \n * Finds all calls to goog.tweak functions and emits warnings/errors if any of the calls have issues.\n * @return A map of {@link TweakInfo} structures, keyed by tweak ID.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectTweaksResult.CollectTweaksResult#326",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.CollectTweaksResult(java.util.Map\u003cjava.lang.String,com.google.javascript.jscomp.ProcessTweaks.TweakInfo\u003e, java.util.List\u003ccom.google.javascript.jscomp.ProcessTweaks.TweakFunctionCall\u003e)",
    "snippet": " CollectTweaksResult(Map\u003cString, TweakInfo\u003e tweakInfos,\n        List\u003cTweakFunctionCall\u003e getOverridesCalls) {\n      this.tweakInfos \u003d tweakInfos;\n      this.getOverridesCalls \u003d getOverridesCalls;\n    }",
    "begin_line": 326,
    "end_line": 330,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectTweaks.visit#341",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (!n.isCall()) {\n        return;\n      }\n\n      String callName \u003d n.getFirstChild().getQualifiedName();\n      TweakFunction tweakFunc \u003d TWEAK_FUNCTIONS_MAP.get(callName);\n      if (tweakFunc \u003d\u003d null) {\n        return;\n      }\n\n      if (tweakFunc \u003d\u003d TweakFunction.GET_COMPILER_OVERRIDES) {\n        getOverridesCalls.add(\n            new TweakFunctionCall(t.getSourceName(), tweakFunc, n));\n        return;\n      }\n\n      // Ensure the first parameter (the tweak ID) is a string literal.\n      Node tweakIdNode \u003d n.getFirstChild().getNext();\n      if (!tweakIdNode.isString()) {\n        compiler.report(t.makeError(tweakIdNode, NON_LITERAL_TWEAK_ID_ERROR));\n        return;\n      }\n      String tweakId \u003d tweakIdNode.getString();\n\n      // Make sure there is a TweakInfo structure for it.\n      TweakInfo tweakInfo \u003d allTweaks.get(tweakId);\n      if (tweakInfo \u003d\u003d null) {\n        tweakInfo \u003d new TweakInfo(tweakId);\n        allTweaks.put(tweakId, tweakInfo);\n      }\n\n      switch (tweakFunc) {\n        case REGISTER_BOOLEAN:\n        case REGISTER_NUMBER:\n        case REGISTER_STRING:\n          // Ensure the ID contains only valid characters.\n          if (!ID_MATCHER.matchesAllOf(tweakId)) {\n            compiler.report(t.makeError(tweakIdNode, INVALID_TWEAK_ID_ERROR));\n          }\n\n          // Ensure tweaks are registered in the global scope.\n          if (!t.inGlobalScope()) {\n            compiler.report(\n                t.makeError(n, NON_GLOBAL_TWEAK_INIT_ERROR, tweakId));\n            break;\n          }\n\n          // Ensure tweaks are registered only once.\n          if (tweakInfo.isRegistered()) {\n            compiler.report(\n                t.makeError(n, TWEAK_MULTIPLY_REGISTERED_ERROR, tweakId));\n            break;\n          }\n\n          Node tweakDefaultValueNode \u003d tweakIdNode.getNext().getNext();\n          tweakInfo.addRegisterCall(t.getSourceName(), tweakFunc, n,\n              tweakDefaultValueNode);\n          break;\n        case OVERRIDE_DEFAULT_VALUE:\n          // Ensure tweaks overrides occur in the global scope.\n          if (!t.inGlobalScope()) {\n            compiler.report(\n                t.makeError(n, NON_GLOBAL_TWEAK_INIT_ERROR, tweakId));\n            break;\n          }\n          // Ensure tweak overrides occur before the tweak is registered.\n          if (tweakInfo.isRegistered()) {\n            compiler.report(\n                t.makeError(n, TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR, tweakId));\n            break;\n          }\n\n          tweakDefaultValueNode \u003d tweakIdNode.getNext();\n          tweakInfo.addOverrideDefaultValueCall(t.getSourceName(), tweakFunc, n,\n              tweakDefaultValueNode);\n          break;\n        case GET_BOOLEAN:\n        case GET_NUMBER:\n        case GET_STRING:\n          tweakInfo.addGetterCall(t.getSourceName(), tweakFunc, n);\n      }\n    }",
    "begin_line": 341,
    "end_line": 423,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TweakFunctionCall.TweakFunctionCall#435",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunctionCall(java.lang.String, com.google.javascript.jscomp.ProcessTweaks.TweakFunction, com.google.javascript.rhino.Node)",
    "snippet": " TweakFunctionCall(String sourceName, TweakFunction tweakFunc,\n        Node callNode) {\n      this(sourceName, tweakFunc, callNode, null);\n    }",
    "begin_line": 435,
    "end_line": 438,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TweakFunctionCall.TweakFunctionCall#440",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunctionCall(java.lang.String, com.google.javascript.jscomp.ProcessTweaks.TweakFunction, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": " TweakFunctionCall(String sourceName, TweakFunction tweakFunc, Node callNode,\n        Node valueNode) {\n      this.sourceName \u003d sourceName;\n      this.callNode \u003d callNode;\n      this.tweakFunc \u003d tweakFunc;\n      this.valueNode \u003d valueNode;\n    }",
    "begin_line": 440,
    "end_line": 446,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TweakFunctionCall.getIdNode#448",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.getIdNode()",
    "snippet": "Node getIdNode() {\n      return callNode.getFirstChild().getNext();\n    }",
    "begin_line": 448,
    "end_line": 450,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TweakInfo.TweakInfo#462",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakInfo(java.lang.String)",
    "snippet": " TweakInfo(String tweakId) {\n      this.tweakId \u003d tweakId;\n      functionCalls \u003d Lists.newArrayList();\n    }",
    "begin_line": 462,
    "end_line": 465,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TweakInfo.emitAllWarnings#472",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.emitAllWarnings()",
    "snippet": "void emitAllWarnings() {\n      if (isRegistered()) {\n        emitAllTypeWarnings();\n      } else {\n        emitUnknownTweakErrors();\n      }\n    }",
    "begin_line": 472,
    "end_line": 478,
    "comment": "/** \n * If this tweak is registered, then looks for type warnings in default value parameters and getter functions. If it is not registered, emits an error for each function call.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TweakInfo.emitAllTypeWarnings#484",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.emitAllTypeWarnings()",
    "snippet": "void emitAllTypeWarnings() {\n      for (TweakFunctionCall call : functionCalls) {\n        Node valueNode \u003d call.valueNode;\n        TweakFunction tweakFunc \u003d call.tweakFunc;\n        TweakFunction registerFunc \u003d registerCall.tweakFunc;\n        if (valueNode !\u003d null) {\n          // For register* and overrideDefaultValue calls, ensure the default\n          // value is a literal of the correct type.\n          if (!registerFunc.isValidNodeType(valueNode.getType())) {\n            compiler.report(JSError.make(call.sourceName,\n                valueNode, INVALID_TWEAK_DEFAULT_VALUE_WARNING,\n                tweakId, registerFunc.getName(),\n                registerFunc.getExpectedTypeName()));\n          }\n        } else if (tweakFunc.isGetterFunction()) {\n          // For getter calls, ensure the correct getter was used.\n          if (!tweakFunc.isCorrectRegisterFunction(registerFunc)) {\n            compiler.report(JSError.make(call.sourceName,\n                call.callNode, TWEAK_WRONG_GETTER_TYPE_WARNING,\n                tweakFunc.getName(), registerFunc.getName()));\n          }\n        }\n      }\n    }",
    "begin_line": 484,
    "end_line": 507,
    "comment": "/** \n * Emits a warning for each default value parameter that has the wrong type and for each getter function that was used for the wrong type of tweak.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TweakInfo.emitUnknownTweakErrors#512",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.emitUnknownTweakErrors()",
    "snippet": "void emitUnknownTweakErrors() {\n      for (TweakFunctionCall call : functionCalls) {\n        compiler.report(JSError.make(call.sourceName,\n            call.getIdNode(), UNKNOWN_TWEAK_WARNING, tweakId));\n      }\n    }",
    "begin_line": 512,
    "end_line": 517,
    "comment": "/** \n * Emits an error for each function call that was found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TweakInfo.addRegisterCall#519",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.addRegisterCall(java.lang.String, com.google.javascript.jscomp.ProcessTweaks.TweakFunction, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "void addRegisterCall(String sourceName, TweakFunction tweakFunc,\n        Node callNode, Node defaultValueNode) {\n      registerCall \u003d new TweakFunctionCall(sourceName, tweakFunc, callNode,\n          defaultValueNode);\n      functionCalls.add(registerCall);\n    }",
    "begin_line": 519,
    "end_line": 524,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TweakInfo.addOverrideDefaultValueCall#526",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.addOverrideDefaultValueCall(java.lang.String, com.google.javascript.jscomp.ProcessTweaks.TweakFunction, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "void addOverrideDefaultValueCall(String sourceName,\n        TweakFunction tweakFunc, Node callNode, Node defaultValueNode) {\n      functionCalls.add(new TweakFunctionCall(sourceName, tweakFunc, callNode,\n          defaultValueNode));\n      this.defaultValueNode \u003d defaultValueNode;\n    }",
    "begin_line": 526,
    "end_line": 531,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TweakInfo.addGetterCall#533",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.addGetterCall(java.lang.String, com.google.javascript.jscomp.ProcessTweaks.TweakFunction, com.google.javascript.rhino.Node)",
    "snippet": "void addGetterCall(String sourceName, TweakFunction tweakFunc,\n        Node callNode) {\n      functionCalls.add(new TweakFunctionCall(sourceName, tweakFunc, callNode));\n    }",
    "begin_line": 533,
    "end_line": 536,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TweakInfo.isRegistered#538",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.isRegistered()",
    "snippet": "boolean isRegistered() {\n      return registerCall !\u003d null;\n    }",
    "begin_line": 538,
    "end_line": 540,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TweakInfo.getDefaultValueNode#542",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/ProcessTweaks.java",
    "class_name": "com.google.javascript.jscomp.ProcessTweaks",
    "signature": "com.google.javascript.jscomp.ProcessTweaks.getDefaultValueNode()",
    "snippet": "Node getDefaultValueNode() {\n      Preconditions.checkState(isRegistered());\n      // Use calls to goog.tweak.overrideDefaultValue() first.\n      if (defaultValueNode !\u003d null) {\n        return defaultValueNode;\n      }\n      // Use the value passed to the register function next.\n      if (registerCall.valueNode !\u003d null) {\n        return registerCall.valueNode;\n      }\n      // Otherwise, use the default value for the tweak\u0027s type.\n      return registerCall.tweakFunc.createDefaultValueNode();\n    }",
    "begin_line": 542,
    "end_line": 554,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RhinoErrorReporter.replacePlaceHolders#70",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/RhinoErrorReporter.java",
    "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
    "signature": "com.google.javascript.jscomp.RhinoErrorReporter.replacePlaceHolders(java.lang.String)",
    "snippet": "private Pattern replacePlaceHolders(String s) {\n    s \u003d Pattern.quote(s);\n    return Pattern.compile(s.replaceAll(\"\\\\{\\\\d+\\\\}\", \"\\\\\\\\E.*\\\\\\\\Q\"));\n  }",
    "begin_line": 70,
    "end_line": 73,
    "comment": "/** \n * For each message such as \"Not a good use of {0}\", replace the place holder {0} with a wild card that matches all possible strings. Also put the any non-place-holder in quotes for regex matching later.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RhinoErrorReporter.RhinoErrorReporter#75",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/RhinoErrorReporter.java",
    "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
    "signature": "com.google.javascript.jscomp.RhinoErrorReporter.RhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "private RhinoErrorReporter(AbstractCompiler compiler) {\n    this.compiler \u003d compiler;\n    typeMap \u003d ImmutableMap.of(\n        // Trailing comma\n        replacePlaceHolders(\n            com.google.javascript.rhino.head.ScriptRuntime\n              .getMessage0(\"msg.extra.trailing.comma\")),\n        TRAILING_COMMA,\n\n        // Duplicate parameter\n        replacePlaceHolders(\n            com.google.javascript.rhino.head.ScriptRuntime\n              .getMessage0(\"msg.dup.parms\")),\n        DUPLICATE_PARAM,\n\n        // Unknown @annotations.\n        replacePlaceHolders(ScriptRuntime.getMessage0(\"msg.bad.jsdoc.tag\")),\n        BAD_JSDOC_ANNOTATION,\n\n        Pattern.compile(\"^Type annotations are not allowed here.*\"),\n        MISPLACED_TYPE_ANNOTATION,\n\n        // Type annotation errors.\n        Pattern.compile(\"^Bad type annotation.*\"),\n        TYPE_PARSE_ERROR\n        );\n  }",
    "begin_line": 75,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RhinoErrorReporter.forNewRhino#104",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/RhinoErrorReporter.java",
    "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
    "signature": "com.google.javascript.jscomp.RhinoErrorReporter.forNewRhino(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "public static com.google.javascript.rhino.head.ErrorReporter forNewRhino(AbstractCompiler compiler) {\n    return new NewRhinoErrorReporter(compiler);\n  }",
    "begin_line": 104,
    "end_line": 106,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RhinoErrorReporter.forOldRhino#108",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/RhinoErrorReporter.java",
    "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
    "signature": "com.google.javascript.jscomp.RhinoErrorReporter.forOldRhino(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "public static ErrorReporter forOldRhino(AbstractCompiler compiler) {\n    return new OldRhinoErrorReporter(compiler);\n  }",
    "begin_line": 108,
    "end_line": 110,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RhinoErrorReporter.warningAtLine#112",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/RhinoErrorReporter.java",
    "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
    "signature": "com.google.javascript.jscomp.RhinoErrorReporter.warningAtLine(java.lang.String, java.lang.String, int, int)",
    "snippet": "void warningAtLine(String message, String sourceName, int line,\n      int lineOffset) {\n    compiler.report(\n        makeError(message, sourceName, line, lineOffset, CheckLevel.WARNING));\n  }",
    "begin_line": 112,
    "end_line": 116,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RhinoErrorReporter.errorAtLine#118",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/RhinoErrorReporter.java",
    "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
    "signature": "com.google.javascript.jscomp.RhinoErrorReporter.errorAtLine(java.lang.String, java.lang.String, int, int)",
    "snippet": "void errorAtLine(String message, String sourceName, int line,\n      int lineOffset) {\n    compiler.report(\n        makeError(message, sourceName, line, lineOffset, CheckLevel.ERROR));\n  }",
    "begin_line": 118,
    "end_line": 122,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RhinoErrorReporter.makeError#124",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/RhinoErrorReporter.java",
    "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
    "signature": "com.google.javascript.jscomp.RhinoErrorReporter.makeError(java.lang.String, java.lang.String, int, int, com.google.javascript.jscomp.CheckLevel)",
    "snippet": "private JSError makeError(String message, String sourceName, int line,\n      int lineOffset, CheckLevel defaultLevel) {\n\n    // Try to see if the message is one of the rhino errors we want to\n    // expose as DiagnosticType by matching it with the regex key.\n    for (Entry\u003cPattern, DiagnosticType\u003e entry : typeMap.entrySet()) {\n      if (entry.getKey().matcher(message).matches()) {\n        return JSError.make(\n            sourceName, line, lineOffset, entry.getValue(), message);\n      }\n    }\n\n    return JSError.make(sourceName, line, lineOffset, defaultLevel,\n        PARSE_ERROR, message);\n  }",
    "begin_line": 124,
    "end_line": 138,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OldRhinoErrorReporter.OldRhinoErrorReporter#143",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/RhinoErrorReporter.java",
    "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
    "signature": "com.google.javascript.jscomp.RhinoErrorReporter.OldRhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "private OldRhinoErrorReporter(AbstractCompiler compiler) {\n      super(compiler);\n    }",
    "begin_line": 143,
    "end_line": 145,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OldRhinoErrorReporter.error#148",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/RhinoErrorReporter.java",
    "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
    "signature": "com.google.javascript.jscomp.RhinoErrorReporter.error(java.lang.String, java.lang.String, int, int)",
    "snippet": "@Override\n    public void error(String message, String sourceName, int line,\n        int lineOffset) {\n      super.errorAtLine(message, sourceName, line, lineOffset);\n    }",
    "begin_line": 148,
    "end_line": 151,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OldRhinoErrorReporter.warning#154",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/RhinoErrorReporter.java",
    "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
    "signature": "com.google.javascript.jscomp.RhinoErrorReporter.warning(java.lang.String, java.lang.String, int, int)",
    "snippet": "@Override\n    public void warning(String message, String sourceName, int line,\n        int lineOffset) {\n      super.warningAtLine(message, sourceName, line, lineOffset);\n    }",
    "begin_line": 154,
    "end_line": 157,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NewRhinoErrorReporter.NewRhinoErrorReporter#163",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/RhinoErrorReporter.java",
    "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
    "signature": "com.google.javascript.jscomp.RhinoErrorReporter.NewRhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "private NewRhinoErrorReporter(AbstractCompiler compiler) {\n      super(compiler);\n    }",
    "begin_line": 163,
    "end_line": 165,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NewRhinoErrorReporter.runtimeError#169",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/RhinoErrorReporter.java",
    "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
    "signature": "com.google.javascript.jscomp.RhinoErrorReporter.runtimeError(java.lang.String, java.lang.String, int, java.lang.String, int)",
    "snippet": "@Override\n    public com.google.javascript.rhino.head.EvaluatorException runtimeError(String message, String sourceName, int line,\n            String lineSource, int lineOffset) {\n      return new com.google.javascript.rhino.head.EvaluatorException(\n          message, sourceName, line, lineSource, lineOffset);\n    }",
    "begin_line": 169,
    "end_line": 173,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NewRhinoErrorReporter.error#176",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/RhinoErrorReporter.java",
    "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
    "signature": "com.google.javascript.jscomp.RhinoErrorReporter.error(java.lang.String, java.lang.String, int, java.lang.String, int)",
    "snippet": "@Override\n    public void error(String message, String sourceName, int line,\n        String sourceLine, int lineOffset) {\n      super.errorAtLine(message, sourceName, line, lineOffset);\n    }",
    "begin_line": 176,
    "end_line": 179,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NewRhinoErrorReporter.error#182",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/RhinoErrorReporter.java",
    "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
    "signature": "com.google.javascript.jscomp.RhinoErrorReporter.error(java.lang.String, java.lang.String, int, int)",
    "snippet": "@Override\n    public void error(String message, String sourceName,\n        int offset, int length) {\n      int line \u003d 1;\n      int column \u003d 0;\n      SourceFile file \u003d this.compiler.getSourceFileByName(sourceName);\n      if (file !\u003d null) {\n        line \u003d file.getLineOfOffset(offset);\n        column \u003d file.getColumnOfOffset(offset);\n      }\n      super.errorAtLine(message, sourceName, line, column);\n    }",
    "begin_line": 182,
    "end_line": 192,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NewRhinoErrorReporter.warning#195",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/RhinoErrorReporter.java",
    "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
    "signature": "com.google.javascript.jscomp.RhinoErrorReporter.warning(java.lang.String, java.lang.String, int, java.lang.String, int)",
    "snippet": "@Override\n    public void warning(String message, String sourceName, int line,\n        String sourceLine, int lineOffset) {\n      super.warningAtLine(message, sourceName, line, lineOffset);\n    }",
    "begin_line": 195,
    "end_line": 198,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NewRhinoErrorReporter.warning#201",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/RhinoErrorReporter.java",
    "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
    "signature": "com.google.javascript.jscomp.RhinoErrorReporter.warning(java.lang.String, java.lang.String, int, int)",
    "snippet": "@Override\n    public void warning(String message, String sourceName,\n        int offset, int length) {\n      int line \u003d 1;\n      int column \u003d 0;\n      SourceFile file \u003d this.compiler.getSourceFileByName(sourceName);\n      if (file !\u003d null) {\n        line \u003d file.getLineOfOffset(offset);\n        column \u003d file.getColumnOfOffset(offset);\n      }\n      super.errorAtLine(message, sourceName, line, column);\n    }",
    "begin_line": 201,
    "end_line": 211,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Scope.apply#68",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.apply(com.google.javascript.jscomp.Scope.Var)",
    "snippet": "@Override public boolean apply(Var var) {\n      return var.getParentNode() !\u003d null \u0026\u0026\n          var.getType() \u003d\u003d null \u0026\u0026 // no declared type\n          var.getParentNode().isVar() \u0026\u0026\n          !var.isExtern();\n    }",
    "begin_line": 68,
    "end_line": 73,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.Var#120",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.Var(boolean, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.Scope, int, com.google.javascript.jscomp.CompilerInput)",
    "snippet": "private Var(boolean inferred, String name, Node nameNode, JSType type,\n                Scope scope, int index, CompilerInput input) {\n      this.name \u003d name;\n      this.nameNode \u003d nameNode;\n      this.type \u003d type;\n      this.scope \u003d scope;\n      this.index \u003d index;\n      this.input \u003d input;\n      this.typeInferred \u003d inferred;\n    }",
    "begin_line": 120,
    "end_line": 129,
    "comment": "/** \n * Creates a variable.\n * @param inferred whether its type is inferred (as opposed to declared)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.getName#135",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getName()",
    "snippet": "@Override\n    public String getName() {\n      return name;\n    }",
    "begin_line": 135,
    "end_line": 137,
    "comment": "/** \n * Gets the name of the variable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.getNode#143",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getNode()",
    "snippet": "@Override\n    public Node getNode() {\n      return nameNode;\n    }",
    "begin_line": 143,
    "end_line": 145,
    "comment": "/** \n * Gets the node for the name of the variable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.getInput#147",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getInput()",
    "snippet": "CompilerInput getInput() {\n      return input;\n    }",
    "begin_line": 147,
    "end_line": 149,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.getSourceFile#152",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getSourceFile()",
    "snippet": "@Override\n    public StaticSourceFile getSourceFile() {\n      return nameNode.getStaticSourceFile();\n    }",
    "begin_line": 152,
    "end_line": 154,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.getSymbol#157",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getSymbol()",
    "snippet": "@Override\n    public Var getSymbol() {\n      return this;\n    }",
    "begin_line": 157,
    "end_line": 159,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.getDeclaration#162",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getDeclaration()",
    "snippet": "@Override\n    public Var getDeclaration() {\n      return nameNode \u003d\u003d null ? null : this;\n    }",
    "begin_line": 162,
    "end_line": 164,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.getParentNode#169",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getParentNode()",
    "snippet": "public Node getParentNode() {\n      return nameNode \u003d\u003d null ? null : nameNode.getParent();\n    }",
    "begin_line": 169,
    "end_line": 171,
    "comment": "/** \n * Gets the parent of the name node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.isBleedingFunction#177",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.isBleedingFunction()",
    "snippet": "public boolean isBleedingFunction() {\n      return NodeUtil.isFunctionExpression(getParentNode());\n    }",
    "begin_line": 177,
    "end_line": 179,
    "comment": "/** \n * Whether this is a bleeding function (an anonymous named function that bleeds into the inner scope).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.getScope#184",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getScope()",
    "snippet": "Scope getScope() {\n      return scope;\n    }",
    "begin_line": 184,
    "end_line": 186,
    "comment": "/** \n * Gets the scope where this variable is declared.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.isGlobal#191",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.isGlobal()",
    "snippet": "public boolean isGlobal() {\n      return scope.isGlobal();\n    }",
    "begin_line": 191,
    "end_line": 193,
    "comment": "/** \n * Returns whether this is a global variable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.isLocal#198",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.isLocal()",
    "snippet": "public boolean isLocal() {\n      return scope.isLocal();\n    }",
    "begin_line": 198,
    "end_line": 200,
    "comment": "/** \n * Returns whether this is a local variable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.isExtern#205",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.isExtern()",
    "snippet": "boolean isExtern() {\n      return input \u003d\u003d null || input.isExtern();\n    }",
    "begin_line": 205,
    "end_line": 207,
    "comment": "/** \n * Returns whether this is defined in an extern file.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.isConst#213",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.isConst()",
    "snippet": "public boolean isConst() {\n      return nameNode !\u003d null \u0026\u0026 NodeUtil.isConstantName(nameNode);\n    }",
    "begin_line": 213,
    "end_line": 215,
    "comment": "/** \n * Returns  {@code true} if the variable is declared as a constant,based on the value reported by  {@code NodeUtil}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.isDefine#221",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.isDefine()",
    "snippet": "public boolean isDefine() {\n      JSDocInfo info \u003d getJSDocInfo();\n      return info !\u003d null \u0026\u0026 info.isDefine();\n    }",
    "begin_line": 221,
    "end_line": 224,
    "comment": "/** \n * Returns  {@code true} if the variable is declared as a define.A variable is a define if it is annotated by  {@code @define}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.getInitialValue#226",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getInitialValue()",
    "snippet": "public Node getInitialValue() {\n      return NodeUtil.getRValueOfLValue(nameNode);\n    }",
    "begin_line": 226,
    "end_line": 228,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.getType#235",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getType()",
    "snippet": "@Override\n    public JSType getType() {\n      return type;\n    }",
    "begin_line": 235,
    "end_line": 237,
    "comment": "/** \n * Gets this variable\u0027s type. To know whether this type has been inferred, see  {@code #isTypeInferred()}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.getNameNode#242",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getNameNode()",
    "snippet": "public Node getNameNode() {\n      return nameNode;\n    }",
    "begin_line": 242,
    "end_line": 244,
    "comment": "/** \n * Returns the name node that produced this variable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.getJSDocInfo#250",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getJSDocInfo()",
    "snippet": "@Override\n    public JSDocInfo getJSDocInfo() {\n      return nameNode \u003d\u003d null ? null : NodeUtil.getBestJSDocInfo(nameNode);\n    }",
    "begin_line": 250,
    "end_line": 252,
    "comment": "/** \n * Gets the JSDocInfo for the variable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.setType#258",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.setType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "void setType(JSType type) {\n      Preconditions.checkState(isTypeInferred());\n      this.type \u003d type;\n    }",
    "begin_line": 258,
    "end_line": 261,
    "comment": "/** \n * Sets this variable\u0027s type.\n * @throws IllegalStateException if the variable\u0027s type is not inferred\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.resolveType#266",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.resolveType(com.google.javascript.rhino.ErrorReporter)",
    "snippet": "void resolveType(ErrorReporter errorReporter) {\n      if (type !\u003d null) {\n        type \u003d type.resolve(errorReporter, scope);\n      }\n    }",
    "begin_line": 266,
    "end_line": 270,
    "comment": "/** \n * Resolve this variable\u0027s type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.isTypeInferred#277",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.isTypeInferred()",
    "snippet": "@Override\n    public boolean isTypeInferred() {\n      return typeInferred;\n    }",
    "begin_line": 277,
    "end_line": 279,
    "comment": "/** \n * Returns whether this variable\u0027s type is inferred. To get the variable\u0027s type, see  {@link #getType()}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.getInputName#281",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getInputName()",
    "snippet": "public String getInputName() {\n      if (input \u003d\u003d null)\n        return \"\u003cnon-file\u003e\";\n      else\n        return input.getName();\n    }",
    "begin_line": 281,
    "end_line": 286,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.isNoShadow#288",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.isNoShadow()",
    "snippet": "public boolean isNoShadow() {\n      JSDocInfo info \u003d getJSDocInfo();\n      return info !\u003d null \u0026\u0026 info.isNoShadow();\n    }",
    "begin_line": 288,
    "end_line": 291,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.equals#293",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object other) {\n      if (!(other instanceof Var)) {\n        return false;\n      }\n\n      Var otherVar \u003d (Var) other;\n      return otherVar.nameNode \u003d\u003d nameNode;\n    }",
    "begin_line": 293,
    "end_line": 300,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.hashCode#302",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.hashCode()",
    "snippet": "@Override public int hashCode() {\n      return nameNode.hashCode();\n    }",
    "begin_line": 302,
    "end_line": 304,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.toString#307",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.toString()",
    "snippet": "@Override\n    public String toString() {\n      return \"Scope.Var \" + name + \"{\" + type + \"}\";\n    }",
    "begin_line": 307,
    "end_line": 309,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.markEscaped#317",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.markEscaped()",
    "snippet": "void markEscaped() {\n      markedEscaped \u003d true;\n    }",
    "begin_line": 317,
    "end_line": 319,
    "comment": "/** \n * Record that this is escaped by an inner scope. In other words, it\u0027s assigned in an inner scope so that it\u0027s much harder to make assertions about its value at a given point.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.isMarkedEscaped#325",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.isMarkedEscaped()",
    "snippet": "boolean isMarkedEscaped() {\n      return markedEscaped;\n    }",
    "begin_line": 325,
    "end_line": 327,
    "comment": "/** \n * Whether this is escaped by an inner scope. Notice that not all scope creators record this information.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.markAssignedExactlyOnce#335",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.markAssignedExactlyOnce()",
    "snippet": "void markAssignedExactlyOnce() {\n      markedAssignedExactlyOnce \u003d true;\n    }",
    "begin_line": 335,
    "end_line": 337,
    "comment": "/** \n * Record that this is assigned exactly once.. In other words, it\u0027s assigned in an inner scope so that it\u0027s much harder to make assertions about its value at a given point.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Var.isMarkedAssignedExactlyOnce#343",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.isMarkedAssignedExactlyOnce()",
    "snippet": "boolean isMarkedAssignedExactlyOnce() {\n      return markedAssignedExactlyOnce;\n    }",
    "begin_line": 343,
    "end_line": 345,
    "comment": "/** \n * Whether this is assigned exactly once. Notice that not all scope creators record this information.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.Arguments#354",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.Arguments(com.google.javascript.jscomp.Scope)",
    "snippet": " Arguments(Scope scope) {\n      super(\n        false, // no inferred\n        \"arguments\", // always arguments\n        null,  // no declaration node\n        // TODO(johnlenz): provide the type of \"Arguments\".\n        null,  // no type info\n        scope,\n        -1,    // no variable index\n        null   // input\n        );\n    }",
    "begin_line": 354,
    "end_line": 365,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.equals#367",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object other) {\n      if (!(other instanceof Arguments)) {\n        return false;\n      }\n\n      Arguments otherVar \u003d (Arguments) other;\n      return otherVar.scope.getRootNode() \u003d\u003d scope.getRootNode();\n    }",
    "begin_line": 367,
    "end_line": 374,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.hashCode#376",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.hashCode()",
    "snippet": "@Override public int hashCode() {\n      return System.identityHashCode(this);\n    }",
    "begin_line": 376,
    "end_line": 378,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.Scope#386",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.Scope(com.google.javascript.jscomp.Scope, com.google.javascript.rhino.Node)",
    "snippet": " Scope(Scope parent, Node rootNode) {\n    Preconditions.checkNotNull(parent);\n    Preconditions.checkArgument(rootNode !\u003d parent.rootNode);\n\n    this.parent \u003d parent;\n    this.rootNode \u003d rootNode;\n    this.isBottom \u003d false;\n    this.depth \u003d parent.depth + 1;\n  }",
    "begin_line": 386,
    "end_line": 394,
    "comment": "/** \n * Creates a Scope given the parent Scope and the root node of the scope.\n * @param parent  The parent Scope. Cannot be null.\n * @param rootNode  Typically the FUNCTION node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.Scope#402",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.Scope(com.google.javascript.rhino.Node, boolean)",
    "snippet": "private Scope(Node rootNode, boolean isBottom) {\n    this.parent \u003d null;\n    this.rootNode \u003d rootNode;\n    this.isBottom \u003d isBottom;\n    this.depth \u003d 0;\n  }",
    "begin_line": 402,
    "end_line": 407,
    "comment": "/** \n * Creates a empty Scope (bottom of the lattice).\n * @param rootNode Typically a FUNCTION node or the global BLOCK node.\n * @param isBottom Whether this is the bottom of a lattice. Otherwise,it must be a global scope.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.createGlobalScope#409",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.createGlobalScope(com.google.javascript.rhino.Node)",
    "snippet": "static Scope createGlobalScope(Node rootNode) {\n    return new Scope(rootNode, false);\n  }",
    "begin_line": 409,
    "end_line": 411,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.createLatticeBottom#413",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.createLatticeBottom(com.google.javascript.rhino.Node)",
    "snippet": "static Scope createLatticeBottom(Node rootNode) {\n    return new Scope(rootNode, true);\n  }",
    "begin_line": 413,
    "end_line": 415,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.getDepth#418",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getDepth()",
    "snippet": "int getDepth() {\n    return depth;\n  }",
    "begin_line": 418,
    "end_line": 420,
    "comment": "/** \n * The depth of the scope. The global scope has depth 0. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.isBottom#423",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.isBottom()",
    "snippet": "boolean isBottom() {\n    return isBottom;\n  }",
    "begin_line": 423,
    "end_line": 425,
    "comment": "/** \n * Whether this is the bottom of the lattice. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.getRootNode#432",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getRootNode()",
    "snippet": "@Override\n  public Node getRootNode() {\n    return rootNode;\n  }",
    "begin_line": 432,
    "end_line": 434,
    "comment": "/** \n * Gets the container node of the scope. This is typically the FUNCTION node or the global BLOCK/SCRIPT node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.getParent#436",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getParent()",
    "snippet": "public Scope getParent() {\n    return parent;\n  }",
    "begin_line": 436,
    "end_line": 438,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.getGlobalScope#440",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getGlobalScope()",
    "snippet": "Scope getGlobalScope() {\n    Scope result \u003d this;\n    while (result.getParent() !\u003d null) {\n      result \u003d result.getParent();\n    }\n    return result;\n  }",
    "begin_line": 440,
    "end_line": 446,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.getParentScope#449",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getParentScope()",
    "snippet": "@Override\n  public StaticScope\u003cJSType\u003e getParentScope() {\n    return parent;\n  }",
    "begin_line": 449,
    "end_line": 451,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.getTypeOfThis#457",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getTypeOfThis()",
    "snippet": "@Override\n  public JSType getTypeOfThis() {\n    if (isGlobal()) {\n      return ObjectType.cast(rootNode.getJSType());\n    }\n\n    Preconditions.checkState(rootNode.isFunction());\n    JSType nodeType \u003d rootNode.getJSType();\n    if (nodeType !\u003d null \u0026\u0026 nodeType.isFunctionType()) {\n      return nodeType.toMaybeFunctionType().getTypeOfThis();\n    } else {\n      return parent.getTypeOfThis();\n    }\n  }",
    "begin_line": 457,
    "end_line": 469,
    "comment": "/** \n * Gets the type of  {@code this} in the current scope.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.declare#479",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.declare(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.CompilerInput)",
    "snippet": "Var declare(String name, Node nameNode, JSType type, CompilerInput input) {\n    return declare(name, nameNode, type, input, true);\n  }",
    "begin_line": 479,
    "end_line": 481,
    "comment": "/** \n * Declares a variable whose type is inferred.\n * @param name name of the variable\n * @param nameNode the NAME node declaring the variable\n * @param type the variable\u0027s type\n * @param input the input in which this variable is defined.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.declare#493",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.declare(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.CompilerInput, boolean)",
    "snippet": "Var declare(String name, Node nameNode,\n      JSType type, CompilerInput input, boolean inferred) {\n    Preconditions.checkState(name !\u003d null \u0026\u0026 name.length() \u003e 0);\n\n    // Make sure that it\u0027s declared only once\n    Preconditions.checkState(vars.get(name) \u003d\u003d null);\n\n    Var var \u003d new Var(inferred, name, nameNode, type, this, vars.size(), input);\n    vars.put(name, var);\n    return var;\n  }",
    "begin_line": 493,
    "end_line": 503,
    "comment": "/** \n * Declares a variable.\n * @param name name of the variable\n * @param nameNode the NAME node declaring the variable\n * @param type the variable\u0027s type\n * @param input the input in which this variable is defined.\n * @param inferred Whether this variable\u0027s type is inferred (as opposedto declared).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.undeclare#509",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.undeclare(com.google.javascript.jscomp.Scope.Var)",
    "snippet": "void undeclare(Var var) {\n    Preconditions.checkState(var.scope \u003d\u003d this);\n    Preconditions.checkState(vars.get(var.name) \u003d\u003d var);\n    vars.remove(var.name);\n  }",
    "begin_line": 509,
    "end_line": 513,
    "comment": "/** \n * Undeclares a variable, to be used when the compiler optimizes out a variable and removes it from the scope.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.getSlot#516",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getSlot(java.lang.String)",
    "snippet": "@Override\n  public Var getSlot(String name) {\n    return getVar(name);\n  }",
    "begin_line": 516,
    "end_line": 518,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.getOwnSlot#521",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getOwnSlot(java.lang.String)",
    "snippet": "@Override\n  public Var getOwnSlot(String name) {\n    return vars.get(name);\n  }",
    "begin_line": 521,
    "end_line": 523,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.getVar#528",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getVar(java.lang.String)",
    "snippet": "public Var getVar(String name) {\n    Var var \u003d vars.get(name);\n    if (var !\u003d null) {\n      return var;\n    } else if (parent !\u003d null) { // Recurse up the parent Scope\n      return parent.getVar(name);\n    } else {\n      return null;\n    }\n  }",
    "begin_line": 528,
    "end_line": 537,
    "comment": "/** \n * Returns the variable, may be null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.getArgumentsVar#542",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getArgumentsVar()",
    "snippet": "public Var getArgumentsVar() {\n    if (arguments \u003d\u003d null) {\n      arguments \u003d new Arguments(this);\n    }\n    return arguments;\n  }",
    "begin_line": 542,
    "end_line": 547,
    "comment": "/** \n * Get a unique VAR object to represents \"arguments\" within this scope\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.isDeclared#552",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.isDeclared(java.lang.String, boolean)",
    "snippet": "public boolean isDeclared(String name, boolean recurse) {\n    Scope scope \u003d this;\n    if (scope.vars.containsKey(name))\n      return true;\n\n    if (scope.parent !\u003d null \u0026\u0026 recurse) {\n      return scope.parent.isDeclared(name, recurse);\n    }\n    return false;\n  }",
    "begin_line": 552,
    "end_line": 561,
    "comment": "/** \n * Returns true if a variable is declared.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.getVars#566",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getVars()",
    "snippet": "public Iterator\u003cVar\u003e getVars() {\n    return vars.values().iterator();\n  }",
    "begin_line": 566,
    "end_line": 568,
    "comment": "/** \n * Return an iterator over all of the variables declared in this scope.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.getVarIterable#573",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getVarIterable()",
    "snippet": "Iterable\u003cVar\u003e getVarIterable() {\n    return vars.values();\n  }",
    "begin_line": 573,
    "end_line": 575,
    "comment": "/** \n * Return an iterable over all of the variables declared in this scope.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.getReferences#578",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getReferences(com.google.javascript.jscomp.Scope.Var)",
    "snippet": "@Override\n  public Iterable\u003cVar\u003e getReferences(Var var) {\n    return ImmutableList.of(var);\n  }",
    "begin_line": 578,
    "end_line": 580,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.getScope#583",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getScope(com.google.javascript.jscomp.Scope.Var)",
    "snippet": "@Override\n  public StaticScope\u003cJSType\u003e getScope(Var var) {\n    return var.scope;\n  }",
    "begin_line": 583,
    "end_line": 585,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.getAllSymbols#588",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getAllSymbols()",
    "snippet": "@Override\n  public Iterable\u003cVar\u003e getAllSymbols() {\n    return Collections.unmodifiableCollection(vars.values());\n  }",
    "begin_line": 588,
    "end_line": 590,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.getVarCount#595",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getVarCount()",
    "snippet": "public int getVarCount() {\n    return vars.size();\n  }",
    "begin_line": 595,
    "end_line": 597,
    "comment": "/** \n * Returns number of variables in this scope\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.isGlobal#602",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.isGlobal()",
    "snippet": "public boolean isGlobal() {\n    return parent \u003d\u003d null;\n  }",
    "begin_line": 602,
    "end_line": 604,
    "comment": "/** \n * Returns whether this is the global scope.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.isLocal#609",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.isLocal()",
    "snippet": "public boolean isLocal() {\n    return !isGlobal();\n  }",
    "begin_line": 609,
    "end_line": 611,
    "comment": "/** \n * Returns whether this is a local scope (i.e. not the global scope).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Arguments.getDeclarativelyUnboundVarsWithoutTypes#616",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/Scope.java",
    "class_name": "com.google.javascript.jscomp.Scope",
    "signature": "com.google.javascript.jscomp.Scope.getDeclarativelyUnboundVarsWithoutTypes()",
    "snippet": "public Iterator\u003cVar\u003e getDeclarativelyUnboundVarsWithoutTypes() {\n    return Iterators.filter(\n        getVars(), DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);\n  }",
    "begin_line": 616,
    "end_line": 619,
    "comment": "/** \n * Gets all variables declared with \"var\" but without declared types attached.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SourceExcerptProvider.get#34",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceExcerptProvider.java",
    "class_name": "com.google.javascript.jscomp.SourceExcerptProvider",
    "signature": "com.google.javascript.jscomp.SourceExcerptProvider.get(com.google.javascript.jscomp.SourceExcerptProvider, java.lang.String, int, com.google.javascript.jscomp.SourceExcerptProvider.ExcerptFormatter)",
    "snippet": "@Override\n      public String get(SourceExcerptProvider source, String sourceName,\n          int lineNumber, ExcerptFormatter formatter) {\n        return formatter.formatLine(\n            source.getSourceLine(sourceName, lineNumber), lineNumber);\n      }",
    "begin_line": 34,
    "end_line": 38,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SourceExcerptProvider.get#45",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceExcerptProvider.java",
    "class_name": "com.google.javascript.jscomp.SourceExcerptProvider",
    "signature": "com.google.javascript.jscomp.SourceExcerptProvider.get(com.google.javascript.jscomp.SourceExcerptProvider, java.lang.String, int, com.google.javascript.jscomp.SourceExcerptProvider.ExcerptFormatter)",
    "snippet": "@Override\n      public String get(SourceExcerptProvider source, String sourceName,\n          int lineNumber, ExcerptFormatter formatter) {\n        return formatter.formatRegion(\n            source.getSourceRegion(sourceName, lineNumber));\n      }",
    "begin_line": 45,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SourceExcerptProvider.get#55",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceExcerptProvider.java",
    "class_name": "com.google.javascript.jscomp.SourceExcerptProvider",
    "signature": "com.google.javascript.jscomp.SourceExcerptProvider.get(com.google.javascript.jscomp.SourceExcerptProvider, java.lang.String, int, com.google.javascript.jscomp.SourceExcerptProvider.ExcerptFormatter)",
    "snippet": "public abstract String get(SourceExcerptProvider source, String sourceName,\n        int lineNumber, ExcerptFormatter formatter);",
    "begin_line": 55,
    "end_line": 56,
    "comment": "/** \n * Get a source excerpt string based on the type of the source excerpt.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SourceExcerptProvider.getSourceLine#66",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceExcerptProvider.java",
    "class_name": "com.google.javascript.jscomp.SourceExcerptProvider",
    "signature": "com.google.javascript.jscomp.SourceExcerptProvider.getSourceLine(java.lang.String, int)",
    "snippet": "String getSourceLine(String sourceName, int lineNumber);",
    "begin_line": 66,
    "end_line": 66,
    "comment": "/** \n * Get the line indicated by the line number. This call will return only the specific line.\n * @param lineNumber the line number, 1 being the first line of the file\n * @return the line indicated, or {@code null} if it does not exist\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SourceExcerptProvider.getSourceRegion#77",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceExcerptProvider.java",
    "class_name": "com.google.javascript.jscomp.SourceExcerptProvider",
    "signature": "com.google.javascript.jscomp.SourceExcerptProvider.getSourceRegion(java.lang.String, int)",
    "snippet": "Region getSourceRegion(String sourceName, int lineNumber);",
    "begin_line": 77,
    "end_line": 77,
    "comment": "/** \n * Get a region around the indicated line number. The exact definition of a region is implementation specific, but it must contain the line indicated by the line number. A region must not start or end by a carriage return.\n * @param lineNumber the line number, 1 being the first line of the file\n * @return the region around the line number indicated, or \u003ccode\u003enull\u003c/null\u003eif it does not exist\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExcerptFormatter.formatLine#86",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceExcerptProvider.java",
    "class_name": "com.google.javascript.jscomp.SourceExcerptProvider",
    "signature": "com.google.javascript.jscomp.SourceExcerptProvider.formatLine(java.lang.String, int)",
    "snippet": "String formatLine(String line, int lineNumber);",
    "begin_line": 86,
    "end_line": 86,
    "comment": "/** \n * Format a line excerpt.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExcerptFormatter.formatRegion#91",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceExcerptProvider.java",
    "class_name": "com.google.javascript.jscomp.SourceExcerptProvider",
    "signature": "com.google.javascript.jscomp.SourceExcerptProvider.formatRegion(com.google.javascript.jscomp.Region)",
    "snippet": "String formatRegion(Region region);",
    "begin_line": 91,
    "end_line": 91,
    "comment": "/** \n * Format a region excerpt.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.getCode#50",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.getCode()",
    "snippet": "public String getCode();",
    "begin_line": 50,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.SourceFile#81",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.SourceFile(java.lang.String)",
    "snippet": "public SourceFile(String fileName) {\n    if (fileName \u003d\u003d null || fileName.isEmpty()) {\n      throw new IllegalArgumentException(\"a source must have a name\");\n    }\n    this.fileName \u003d fileName;\n  }",
    "begin_line": 81,
    "end_line": 86,
    "comment": "/** \n * Construct a new abstract source file.\n * @param fileName The file name of the source file. It does not necessarilyneed to correspond to a real path. But it should be unique. Will appear in warning messages emitted by the compiler.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.getLineOffset#89",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.getLineOffset(int)",
    "snippet": "@Override\n  public int getLineOffset(int lineno) {\n    findLineOffsets();\n    if (lineno \u003c 1 || lineno \u003e lineOffsets.length) {\n      throw new IllegalArgumentException(\n          \"Expected line number between 1 and \" + lineOffsets.length +\n          \"\\nActual: \" + lineno);\n    }\n    return lineOffsets[lineno - 1];\n  }",
    "begin_line": 89,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.getNumLines#100",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.getNumLines()",
    "snippet": "int getNumLines() {\n    findLineOffsets();\n    return lineOffsets.length;\n  }",
    "begin_line": 100,
    "end_line": 103,
    "comment": "/** \n * @return The number of lines in this source file. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.findLineOffsets#106",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.findLineOffsets()",
    "snippet": "private void findLineOffsets() {\n    if (lineOffsets !\u003d null) {\n      return;\n    }\n    try {\n      String[] sourceLines \u003d getCode().split(\"\\n\");\n      lineOffsets \u003d new int[sourceLines.length];\n      for (int ii \u003d 1; ii \u003c sourceLines.length; ++ii) {\n        lineOffsets[ii] \u003d\n            lineOffsets[ii - 1] + sourceLines[ii - 1].length() + 1;\n      }\n    } catch (IOException e) {\n      lineOffsets \u003d new int[1];\n      lineOffsets[0] \u003d 0;\n    }\n  }",
    "begin_line": 106,
    "end_line": 121,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.getCode#131",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.getCode()",
    "snippet": "public String getCode() throws IOException {\n    return code;\n  }",
    "begin_line": 131,
    "end_line": 133,
    "comment": "/** \n * Gets all the code in this source file.\n * @throws IOException\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.getCodeReader#138",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.getCodeReader()",
    "snippet": "public Reader getCodeReader() throws IOException {\n    return new StringReader(getCode());\n  }",
    "begin_line": 138,
    "end_line": 140,
    "comment": "/** \n * Gets a reader for the code in this source file.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.getCodeNoCache#143",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.getCodeNoCache()",
    "snippet": "@VisibleForTesting\n  String getCodeNoCache() {\n    return code;\n  }",
    "begin_line": 143,
    "end_line": 145,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.setCode#147",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.setCode(java.lang.String)",
    "snippet": "private void setCode(String sourceCode) {\n    code \u003d sourceCode;\n  }",
    "begin_line": 147,
    "end_line": 149,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.getOriginalPath#151",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.getOriginalPath()",
    "snippet": "public String getOriginalPath() {\n    return originalPath !\u003d null ? originalPath : fileName;\n  }",
    "begin_line": 151,
    "end_line": 153,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.setOriginalPath#155",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.setOriginalPath(java.lang.String)",
    "snippet": "public void setOriginalPath(String originalPath) {\n    this.originalPath \u003d originalPath;\n  }",
    "begin_line": 155,
    "end_line": 157,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.clearCachedSource#163",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.clearCachedSource()",
    "snippet": "public void clearCachedSource() {\n    // By default, do nothing.  Not all kinds of SourceFiles can regenerate\n    // code.\n  }",
    "begin_line": 163,
    "end_line": 166,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.hasSourceInMemory#168",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.hasSourceInMemory()",
    "snippet": "boolean hasSourceInMemory() {\n    return code !\u003d null;\n  }",
    "begin_line": 168,
    "end_line": 170,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.getName#174",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.getName()",
    "snippet": "@Override\n  public String getName() {\n    return fileName;\n  }",
    "begin_line": 174,
    "end_line": 176,
    "comment": "/** \n * Returns a unique name for the source file. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.isExtern#180",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.isExtern()",
    "snippet": "@Override\n  public boolean isExtern() {\n    return isExternFile;\n  }",
    "begin_line": 180,
    "end_line": 182,
    "comment": "/** \n * Returns whether this is an extern. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.setIsExtern#185",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.setIsExtern(boolean)",
    "snippet": "void setIsExtern(boolean newVal) {\n    isExternFile \u003d newVal;\n  }",
    "begin_line": 185,
    "end_line": 187,
    "comment": "/** \n * Sets that this is an extern. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.getLineOfOffset#190",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.getLineOfOffset(int)",
    "snippet": "@Override\n  public int getLineOfOffset(int offset) {\n    findLineOffsets();\n    int search \u003d Arrays.binarySearch(lineOffsets, offset);\n    if (search \u003e\u003d 0) {\n      return search + 1; // lines are 1-based.\n    } else {\n      int insertionPoint \u003d -1 * (search + 1);\n      return Math.min(insertionPoint - 1, lineOffsets.length - 1) + 1;\n    }\n  }",
    "begin_line": 190,
    "end_line": 199,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.getColumnOfOffset#202",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.getColumnOfOffset(int)",
    "snippet": "@Override\n  public int getColumnOfOffset(int offset) {\n    int line \u003d getLineOfOffset(offset);\n    return offset - lineOffsets[line - 1];\n  }",
    "begin_line": 202,
    "end_line": 205,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.getLine#215",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.getLine(int)",
    "snippet": "public String getLine(int lineNumber) {\n    findLineOffsets();\n    if (lineNumber \u003e lineOffsets.length) {\n      return null;\n    }\n\n    if (lineNumber \u003c 1) {\n      lineNumber \u003d 1;\n    }\n\n    int pos \u003d lineOffsets[lineNumber - 1];\n    String js \u003d \"\";\n    try {\n      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n      // This is probably the right trade-off, but will be slow if there\n      // are lots of warnings in one file.\n      js \u003d getCode();\n    } catch (IOException e) {\n      return null;\n    }\n\n    if (js.indexOf(\u0027\\n\u0027, pos) \u003d\u003d -1) {\n      // If next new line cannot be found, there are two cases\n      // 1. pos already reaches the end of file, then null should be returned\n      // 2. otherwise, return the contents between pos and the end of file.\n      if (pos \u003e\u003d js.length()) {\n        return null;\n      } else {\n        return js.substring(pos, js.length());\n      }\n    } else {\n      return js.substring(pos, js.indexOf(\u0027\\n\u0027, pos));\n    }\n  }",
    "begin_line": 215,
    "end_line": 248,
    "comment": "/** \n * Gets the source line for the indicated line number.\n * @param lineNumber the line number, 1 being the first line of the file.\n * @return The line indicated. Does not include the newline at the endof the file. Returns  {@code null} if it does not exist,or if there was an IO exception.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.getRegion#259",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.getRegion(int)",
    "snippet": "public Region getRegion(int lineNumber) {\n    String js \u003d \"\";\n    try {\n      js \u003d getCode();\n    } catch (IOException e) {\n      return null;\n    }\n    int pos \u003d 0;\n    int startLine \u003d Math.max(1,\n        lineNumber - (SOURCE_EXCERPT_REGION_LENGTH + 1) / 2 + 1);\n    for (int n \u003d 1; n \u003c startLine; n++) {\n      int nextpos \u003d js.indexOf(\u0027\\n\u0027, pos);\n      if (nextpos \u003d\u003d -1) {\n        break;\n      }\n      pos \u003d nextpos + 1;\n    }\n    int end \u003d pos;\n    int endLine \u003d startLine;\n    for (int n \u003d 0; n \u003c SOURCE_EXCERPT_REGION_LENGTH; n++, endLine++) {\n      end \u003d js.indexOf(\u0027\\n\u0027, end);\n      if (end \u003d\u003d -1) {\n        break;\n      }\n      end++;\n    }\n    if (lineNumber \u003e\u003d endLine) {\n      return null;\n    }\n    if (end \u003d\u003d -1) {\n      int last \u003d js.length() - 1;\n      if (js.charAt(last) \u003d\u003d \u0027\\n\u0027) {\n        return\n            new SimpleRegion(startLine, endLine, js.substring(pos, last));\n      } else {\n        return new SimpleRegion(startLine, endLine, js.substring(pos));\n      }\n    } else {\n      return new SimpleRegion(startLine, endLine, js.substring(pos, end));\n    }\n  }",
    "begin_line": 259,
    "end_line": 299,
    "comment": "/** \n * Get a region around the indicated line number. The exact definition of a region is implementation specific, but it must contain the line indicated by the line number. A region must not start or end by a carriage return.\n * @param lineNumber the line number, 1 being the first line of the file.\n * @return The line indicated. Returns {@code null} if it does not exist,or if there was an IO exception.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.toString#302",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.toString()",
    "snippet": "@Override\n  public String toString() {\n    return fileName;\n  }",
    "begin_line": 302,
    "end_line": 304,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.fromFile#306",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.fromFile(java.lang.String, java.nio.charset.Charset)",
    "snippet": "public static SourceFile fromFile(String fileName, Charset c) {\n    return builder().withCharset(c).buildFromFile(fileName);\n  }",
    "begin_line": 306,
    "end_line": 308,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.fromFile#310",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.fromFile(java.lang.String)",
    "snippet": "public static SourceFile fromFile(String fileName) {\n    return builder().buildFromFile(fileName);\n  }",
    "begin_line": 310,
    "end_line": 312,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.fromFile#314",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.fromFile(java.io.File, java.nio.charset.Charset)",
    "snippet": "public static SourceFile fromFile(File file, Charset c) {\n    return builder().withCharset(c).buildFromFile(file);\n  }",
    "begin_line": 314,
    "end_line": 316,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.fromFile#318",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.fromFile(java.io.File)",
    "snippet": "public static SourceFile fromFile(File file) {\n    return builder().buildFromFile(file);\n  }",
    "begin_line": 318,
    "end_line": 320,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.fromCode#322",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.fromCode(java.lang.String, java.lang.String)",
    "snippet": "public static SourceFile fromCode(String fileName, String code) {\n    return builder().buildFromCode(fileName, code);\n  }",
    "begin_line": 322,
    "end_line": 324,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.fromCode#326",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.fromCode(java.lang.String, java.lang.String, java.lang.String)",
    "snippet": "public static SourceFile fromCode(String fileName,\n      String originalPath, String code) {\n    return builder().withOriginalPath(originalPath)\n        .buildFromCode(fileName, code);\n  }",
    "begin_line": 326,
    "end_line": 330,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.fromInputStream#332",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.fromInputStream(java.lang.String, java.io.InputStream)",
    "snippet": "public static SourceFile fromInputStream(String fileName, InputStream s)\n      throws IOException {\n    return builder().buildFromInputStream(fileName, s);\n  }",
    "begin_line": 332,
    "end_line": 335,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.fromInputStream#337",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.fromInputStream(java.lang.String, java.lang.String, java.io.InputStream)",
    "snippet": "public static SourceFile fromInputStream(String fileName,\n      String originalPath, InputStream s) throws IOException {\n    return builder().withOriginalPath(originalPath)\n        .buildFromInputStream(fileName, s);\n  }",
    "begin_line": 337,
    "end_line": 341,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.fromReader#343",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.fromReader(java.lang.String, java.io.Reader)",
    "snippet": "public static SourceFile fromReader(String fileName, Reader r)\n      throws IOException {\n    return builder().buildFromReader(fileName, r);\n  }",
    "begin_line": 343,
    "end_line": 346,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.fromGenerator#348",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.fromGenerator(java.lang.String, com.google.javascript.jscomp.SourceFile.Generator)",
    "snippet": "public static SourceFile fromGenerator(String fileName,\n      Generator generator) {\n    return builder().buildFromGenerator(fileName, generator);\n  }",
    "begin_line": 348,
    "end_line": 351,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generator.builder#354",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.builder()",
    "snippet": "public static Builder builder() {\n    return new Builder();\n  }",
    "begin_line": 354,
    "end_line": 356,
    "comment": "/** \n * Create a new builder for source files. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.Builder#368",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.Builder()",
    "snippet": "public Builder() {}",
    "begin_line": 368,
    "end_line": 368,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.withCharset#371",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.withCharset(java.nio.charset.Charset)",
    "snippet": "public Builder withCharset(Charset charset) {\n      this.charset \u003d charset;\n      return this;\n    }",
    "begin_line": 371,
    "end_line": 374,
    "comment": "/** \n * Set the charset to use when reading from an input stream or file. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.withOriginalPath#377",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.withOriginalPath(java.lang.String)",
    "snippet": "public Builder withOriginalPath(String originalPath) {\n      this.originalPath \u003d originalPath;\n      return this;\n    }",
    "begin_line": 377,
    "end_line": 380,
    "comment": "/** \n * Set the original path to use. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.buildFromFile#382",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.buildFromFile(java.lang.String)",
    "snippet": "public SourceFile buildFromFile(String fileName) {\n      return buildFromFile(new File(fileName));\n    }",
    "begin_line": 382,
    "end_line": 384,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.buildFromFile#386",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.buildFromFile(java.io.File)",
    "snippet": "public SourceFile buildFromFile(File file) {\n      return new OnDisk(file, originalPath, charset);\n    }",
    "begin_line": 386,
    "end_line": 388,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.buildFromCode#390",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.buildFromCode(java.lang.String, java.lang.String)",
    "snippet": "public SourceFile buildFromCode(String fileName, String code) {\n      return new Preloaded(fileName, originalPath, code);\n    }",
    "begin_line": 390,
    "end_line": 392,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.buildFromInputStream#394",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.buildFromInputStream(java.lang.String, java.io.InputStream)",
    "snippet": "public SourceFile buildFromInputStream(String fileName, InputStream s)\n        throws IOException {\n      return buildFromCode(fileName,\n          CharStreams.toString(new InputStreamReader(s, charset)));\n    }",
    "begin_line": 394,
    "end_line": 398,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.buildFromReader#400",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.buildFromReader(java.lang.String, java.io.Reader)",
    "snippet": "public SourceFile buildFromReader(String fileName, Reader r)\n        throws IOException {\n      return buildFromCode(fileName, CharStreams.toString(r));\n    }",
    "begin_line": 400,
    "end_line": 403,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.buildFromGenerator#405",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.buildFromGenerator(java.lang.String, com.google.javascript.jscomp.SourceFile.Generator)",
    "snippet": "public SourceFile buildFromGenerator(String fileName,\n        Generator generator) {\n      return new Generated(fileName, originalPath, generator);\n    }",
    "begin_line": 405,
    "end_line": 408,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Preloaded.Preloaded#421",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.Preloaded(java.lang.String, java.lang.String, java.lang.String)",
    "snippet": " Preloaded(String fileName, String originalPath, String code) {\n      super(fileName);\n      super.setOriginalPath(originalPath);\n      super.setCode(code);\n    }",
    "begin_line": 421,
    "end_line": 425,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generated.Generated#437",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.Generated(java.lang.String, java.lang.String, com.google.javascript.jscomp.SourceFile.Generator)",
    "snippet": " Generated(String fileName, String originalPath, Generator generator) {\n      super(fileName);\n      super.setOriginalPath(originalPath);\n      this.generator \u003d generator;\n    }",
    "begin_line": 437,
    "end_line": 441,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generated.getCode#444",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.getCode()",
    "snippet": "@Override\n    public synchronized String getCode() throws IOException {\n      String cachedCode \u003d super.getCode();\n\n      if (cachedCode \u003d\u003d null) {\n        cachedCode \u003d generator.getCode();\n        super.setCode(cachedCode);\n      }\n      return cachedCode;\n    }",
    "begin_line": 444,
    "end_line": 452,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Generated.clearCachedSource#457",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.clearCachedSource()",
    "snippet": "@Override\n    public void clearCachedSource() {\n      super.setCode(null);\n    }",
    "begin_line": 457,
    "end_line": 459,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OnDisk.OnDisk#476",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.OnDisk(java.io.File, java.lang.String, java.nio.charset.Charset)",
    "snippet": " OnDisk(File file, String originalPath, Charset c) {\n      super(file.getPath());\n      this.file \u003d file;\n      super.setOriginalPath(originalPath);\n      if (c !\u003d null) {\n        this.setCharset(c);\n      }\n    }",
    "begin_line": 476,
    "end_line": 483,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OnDisk.getCode#486",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.getCode()",
    "snippet": "@Override\n    public synchronized String getCode() throws IOException {\n      String cachedCode \u003d super.getCode();\n\n      if (cachedCode \u003d\u003d null) {\n        cachedCode \u003d Files.toString(file, this.getCharset());\n        super.setCode(cachedCode);\n      }\n      return cachedCode;\n    }",
    "begin_line": 486,
    "end_line": 494,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OnDisk.getCodeReader#500",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.getCodeReader()",
    "snippet": "@Override\n    public Reader getCodeReader() throws IOException {\n      if (hasSourceInMemory()) {\n        return super.getCodeReader();\n      } else {\n        // If we haven\u0027t pulled the code into memory yet, don\u0027t.\n        return new FileReader(file);\n      }\n    }",
    "begin_line": 500,
    "end_line": 507,
    "comment": "/** \n * Gets a reader for the code in this source file.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OnDisk.clearCachedSource#512",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.clearCachedSource()",
    "snippet": "@Override\n    public void clearCachedSource() {\n      super.setCode(null);\n    }",
    "begin_line": 512,
    "end_line": 514,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OnDisk.setCharset#522",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.setCharset(java.nio.charset.Charset)",
    "snippet": "public void setCharset(Charset c) {\n      inputCharset \u003d c.name();\n    }",
    "begin_line": 522,
    "end_line": 524,
    "comment": "/** \n * Store the Charset specification as the string version of the name, rather than the Charset itself.  This allows us to serialize the SourceFile class.\n * @param c charset to use when reading the input.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OnDisk.getCharset#532",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceFile.java",
    "class_name": "com.google.javascript.jscomp.SourceFile",
    "signature": "com.google.javascript.jscomp.SourceFile.getCharset()",
    "snippet": "public Charset getCharset() {\n      return Charset.forName(inputCharset);\n    }",
    "begin_line": 532,
    "end_line": 534,
    "comment": "/** \n * Get the Charset specifying how we\u0027re supposed to read the file in off disk and into UTF-16.  This is stored as a strong to allow SourceFile to be serialized.\n * @return Charset object representing charset to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SourceMap.getInstance#47",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceMap.java",
    "class_name": "com.google.javascript.jscomp.SourceMap",
    "signature": "com.google.javascript.jscomp.SourceMap.getInstance()",
    "snippet": "@Override SourceMap getInstance() {\n         return new SourceMap(\n           SourceMapGeneratorFactory.getInstance(SourceMapFormat.V1));\n       }",
    "begin_line": 47,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SourceMap.getInstance#53",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceMap.java",
    "class_name": "com.google.javascript.jscomp.SourceMap",
    "signature": "com.google.javascript.jscomp.SourceMap.getInstance()",
    "snippet": "@Override SourceMap getInstance() {\n         return new SourceMap(\n           SourceMapGeneratorFactory.getInstance(SourceMapFormat.DEFAULT));\n       }",
    "begin_line": 53,
    "end_line": 56,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SourceMap.getInstance#59",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceMap.java",
    "class_name": "com.google.javascript.jscomp.SourceMap",
    "signature": "com.google.javascript.jscomp.SourceMap.getInstance()",
    "snippet": "@Override SourceMap getInstance() {\n         return new SourceMap(\n           SourceMapGeneratorFactory.getInstance(SourceMapFormat.V2));\n        }",
    "begin_line": 59,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SourceMap.getInstance#65",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceMap.java",
    "class_name": "com.google.javascript.jscomp.SourceMap",
    "signature": "com.google.javascript.jscomp.SourceMap.getInstance()",
    "snippet": "@Override SourceMap getInstance() {\n         return new SourceMap(\n           SourceMapGeneratorFactory.getInstance(SourceMapFormat.V3));\n        }",
    "begin_line": 65,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SourceMap.getInstance#70",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceMap.java",
    "class_name": "com.google.javascript.jscomp.SourceMap",
    "signature": "com.google.javascript.jscomp.SourceMap.getInstance()",
    "snippet": "abstract SourceMap getInstance();",
    "begin_line": 70,
    "end_line": 70,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SourceMap.apply#80",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceMap.java",
    "class_name": "com.google.javascript.jscomp.SourceMap",
    "signature": "com.google.javascript.jscomp.SourceMap.apply(com.google.javascript.rhino.Node)",
    "snippet": "@Override public boolean apply(Node node) {\n        return true;\n      }",
    "begin_line": 80,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SourceMap.apply#87",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceMap.java",
    "class_name": "com.google.javascript.jscomp.SourceMap",
    "signature": "com.google.javascript.jscomp.SourceMap.apply(com.google.javascript.rhino.Node)",
    "snippet": "@Override public boolean apply(Node node) {\n        return node.isCall()\n            || node.isNew()\n            || node.isFunction()\n            || node.isName()\n            || NodeUtil.isGet(node)\n            || NodeUtil.isObjectLitKey(node, node.getParent())\n            || (node.isString() \u0026\u0026 NodeUtil.isGet(node.getParent()));\n      }",
    "begin_line": 87,
    "end_line": 95,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocationMapping.LocationMapping#102",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceMap.java",
    "class_name": "com.google.javascript.jscomp.SourceMap",
    "signature": "com.google.javascript.jscomp.SourceMap.LocationMapping(java.lang.String, java.lang.String)",
    "snippet": "public LocationMapping(String prefix, String replacement) {\n      this.prefix \u003d prefix;\n      this.replacement \u003d replacement;\n    }",
    "begin_line": 102,
    "end_line": 105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocationMapping.SourceMap#113",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceMap.java",
    "class_name": "com.google.javascript.jscomp.SourceMap",
    "signature": "com.google.javascript.jscomp.SourceMap.SourceMap(com.google.debugging.sourcemap.SourceMapGenerator)",
    "snippet": "private SourceMap(SourceMapGenerator generator) {\n    this.generator \u003d generator;\n  }",
    "begin_line": 113,
    "end_line": 115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocationMapping.addMapping#117",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceMap.java",
    "class_name": "com.google.javascript.jscomp.SourceMap",
    "signature": "com.google.javascript.jscomp.SourceMap.addMapping(com.google.javascript.rhino.Node, com.google.debugging.sourcemap.FilePosition, com.google.debugging.sourcemap.FilePosition)",
    "snippet": "public void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile \u003d node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile \u003d\u003d null || node.getLineno() \u003c 0) {\n      return;\n    }\n\n    sourceFile \u003d fixupSourceLocation(sourceFile);\n\n    String originalName \u003d (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // Strangely, Rhino source lines are one based but columns are\n    // zero based.\n    // We don\u0027t change this for the v1 or v2 source maps but for\n    // v3 we make them both 0 based.\n    int lineBaseOffset \u003d 1;\n    if (generator instanceof SourceMapGeneratorV1\n        || generator instanceof SourceMapGeneratorV2) {\n      lineBaseOffset \u003d 0;\n    }\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(node.getLineno() - lineBaseOffset, node.getCharno()),\n        outputStartPosition, outputEndPosition);\n  }",
    "begin_line": 117,
    "end_line": 148,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocationMapping.fixupSourceLocation#154",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceMap.java",
    "class_name": "com.google.javascript.jscomp.SourceMap",
    "signature": "com.google.javascript.jscomp.SourceMap.fixupSourceLocation(java.lang.String)",
    "snippet": "private String fixupSourceLocation(String sourceFile) {\n    if (prefixMappings.isEmpty()) {\n      return sourceFile;\n    }\n\n    String fixed \u003d sourceLocationFixupCache.get(sourceFile);\n    if (fixed !\u003d null) {\n      return fixed;\n    }\n\n    // Replace the first prefix found with its replacement\n    for (LocationMapping mapping : prefixMappings) {\n      if (sourceFile.startsWith(mapping.prefix)) {\n        fixed \u003d mapping.replacement + sourceFile.substring(\n          mapping.prefix.length());\n        break;\n      }\n    }\n\n    // If none of the mappings match then use the original file path.\n    if (fixed \u003d\u003d null) {\n      fixed \u003d sourceFile;\n    }\n\n    sourceLocationFixupCache.put(sourceFile, fixed);\n    return fixed;\n  }",
    "begin_line": 154,
    "end_line": 180,
    "comment": "/** \n * @param sourceFile The source file location to fixup.\n * @return a remapped source file.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocationMapping.appendTo#182",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceMap.java",
    "class_name": "com.google.javascript.jscomp.SourceMap",
    "signature": "com.google.javascript.jscomp.SourceMap.appendTo(java.lang.Appendable, java.lang.String)",
    "snippet": "public void appendTo(Appendable out, String name) throws IOException {\n    generator.appendTo(out, name);\n  }",
    "begin_line": 182,
    "end_line": 184,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocationMapping.reset#186",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceMap.java",
    "class_name": "com.google.javascript.jscomp.SourceMap",
    "signature": "com.google.javascript.jscomp.SourceMap.reset()",
    "snippet": "public void reset() {\n    generator.reset();\n    sourceLocationFixupCache.clear();\n  }",
    "begin_line": 186,
    "end_line": 189,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocationMapping.setStartingPosition#191",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceMap.java",
    "class_name": "com.google.javascript.jscomp.SourceMap",
    "signature": "com.google.javascript.jscomp.SourceMap.setStartingPosition(int, int)",
    "snippet": "public void setStartingPosition(int offsetLine, int offsetIndex) {\n    generator.setStartingPosition(offsetLine, offsetIndex);\n  }",
    "begin_line": 191,
    "end_line": 193,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocationMapping.setWrapperPrefix#195",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceMap.java",
    "class_name": "com.google.javascript.jscomp.SourceMap",
    "signature": "com.google.javascript.jscomp.SourceMap.setWrapperPrefix(java.lang.String)",
    "snippet": "public void setWrapperPrefix(String prefix) {\n    generator.setWrapperPrefix(prefix);\n  }",
    "begin_line": 195,
    "end_line": 197,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocationMapping.validate#199",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceMap.java",
    "class_name": "com.google.javascript.jscomp.SourceMap",
    "signature": "com.google.javascript.jscomp.SourceMap.validate(boolean)",
    "snippet": "public void validate(boolean validate) {\n    generator.validate(validate);\n  }",
    "begin_line": 199,
    "end_line": 201,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocationMapping.setPrefixMappings#206",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SourceMap.java",
    "class_name": "com.google.javascript.jscomp.SourceMap",
    "signature": "com.google.javascript.jscomp.SourceMap.setPrefixMappings(java.util.List\u003ccom.google.javascript.jscomp.SourceMap.LocationMapping\u003e)",
    "snippet": "public void setPrefixMappings(List\u003cLocationMapping\u003e sourceMapLocationMappings) {\n     this.prefixMappings \u003d sourceMapLocationMappings;\n  }",
    "begin_line": 206,
    "end_line": 208,
    "comment": "/** \n * @param sourceMapLocationMappings\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrictModeCheck.StrictModeCheck#79",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/StrictModeCheck.java",
    "class_name": "com.google.javascript.jscomp.StrictModeCheck",
    "signature": "com.google.javascript.jscomp.StrictModeCheck.StrictModeCheck(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": " StrictModeCheck(AbstractCompiler compiler) {\n    this(compiler, false, false);\n  }",
    "begin_line": 79,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrictModeCheck.StrictModeCheck#83",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/StrictModeCheck.java",
    "class_name": "com.google.javascript.jscomp.StrictModeCheck",
    "signature": "com.google.javascript.jscomp.StrictModeCheck.StrictModeCheck(com.google.javascript.jscomp.AbstractCompiler, boolean, boolean)",
    "snippet": " StrictModeCheck(\n      AbstractCompiler compiler, boolean noVarCheck, boolean noCajaChecks) {\n    this.compiler \u003d compiler;\n    this.noVarCheck \u003d noVarCheck;\n    this.noCajaChecks \u003d noCajaChecks;\n  }",
    "begin_line": 83,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrictModeCheck.process#90",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/StrictModeCheck.java",
    "class_name": "com.google.javascript.jscomp.StrictModeCheck",
    "signature": "com.google.javascript.jscomp.StrictModeCheck.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override public void process(Node externs, Node root) {\n    NodeTraversal.traverseRoots(\n        compiler, Lists.newArrayList(externs, root), this);\n    NodeTraversal.traverse(compiler, root, new NonExternChecks());\n  }",
    "begin_line": 90,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrictModeCheck.visit#96",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/StrictModeCheck.java",
    "class_name": "com.google.javascript.jscomp.StrictModeCheck",
    "signature": "com.google.javascript.jscomp.StrictModeCheck.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isName()) {\n      if (!isDeclaration(n)) {\n        checkNameUse(t, n);\n      }\n    } else if (n.isAssign()) {\n      checkAssignment(t, n);\n    } else if (n.isDelProp()) {\n      checkDelete(t, n);\n    } else if (n.isObjectLit()) {\n      checkObjectLiteral(t, n);\n    } else if (n.isLabel()) {\n      checkLabel(t, n);\n    }\n  }",
    "begin_line": 96,
    "end_line": 110,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrictModeCheck.isDeclaration#116",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/StrictModeCheck.java",
    "class_name": "com.google.javascript.jscomp.StrictModeCheck",
    "signature": "com.google.javascript.jscomp.StrictModeCheck.isDeclaration(com.google.javascript.rhino.Node)",
    "snippet": "private static boolean isDeclaration(Node n) {\n    switch (n.getParent().getType()) {\n      case Token.VAR:\n      case Token.FUNCTION:\n      case Token.CATCH:\n        return true;\n\n      case Token.PARAM_LIST:\n        return n.getParent().getParent().isFunction();\n\n      default:\n        return false;\n    }\n  }",
    "begin_line": 116,
    "end_line": 129,
    "comment": "/** \n * Determines if the given name is a declaration, which can be a declaration of a variable, function, or argument.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrictModeCheck.checkNameUse#132",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/StrictModeCheck.java",
    "class_name": "com.google.javascript.jscomp.StrictModeCheck",
    "signature": "com.google.javascript.jscomp.StrictModeCheck.checkNameUse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void checkNameUse(NodeTraversal t, Node n) {\n    Var v \u003d t.getScope().getVar(n.getString());\n    if (v \u003d\u003d null) {\n      // In particular, this prevents creating a global variable by assigning\n      // to it without a declaration.\n      if (!noVarCheck) {\n        t.report(n, UNKNOWN_VARIABLE, n.getString());\n      }\n    }\n\n    if (!noCajaChecks) {\n      if (\"eval\".equals(n.getString())) {\n        t.report(n, EVAL_USE);\n      } else if (n.getString().endsWith(\"__\")) {\n        t.report(n, ILLEGAL_NAME);\n      }\n    }\n  }",
    "begin_line": 132,
    "end_line": 149,
    "comment": "/** \n * Checks that the given name is used legally. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrictModeCheck.checkAssignment#152",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/StrictModeCheck.java",
    "class_name": "com.google.javascript.jscomp.StrictModeCheck",
    "signature": "com.google.javascript.jscomp.StrictModeCheck.checkAssignment(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void checkAssignment(NodeTraversal t, Node n) {\n    if (n.getFirstChild().isName()) {\n      if (\"arguments\".equals(n.getFirstChild().getString())) {\n        t.report(n, ARGUMENTS_ASSIGNMENT);\n      } else if (\"eval\".equals(n.getFirstChild().getString())) {\n        // Note that assignment to eval is already illegal because any use of\n        // that name is illegal.\n        if (noCajaChecks) {\n          t.report(n, EVAL_ASSIGNMENT);\n        }\n      }\n    }\n  }",
    "begin_line": 152,
    "end_line": 164,
    "comment": "/** \n * Checks that an assignment is not to the \"arguments\" object. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrictModeCheck.checkDelete#167",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/StrictModeCheck.java",
    "class_name": "com.google.javascript.jscomp.StrictModeCheck",
    "signature": "com.google.javascript.jscomp.StrictModeCheck.checkDelete(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void checkDelete(NodeTraversal t, Node n) {\n    if (n.getFirstChild().isName()) {\n      Var v \u003d t.getScope().getVar(n.getFirstChild().getString());\n      if (v !\u003d null) {\n        t.report(n, DELETE_VARIABLE);\n      }\n    }\n  }",
    "begin_line": 167,
    "end_line": 174,
    "comment": "/** \n * Checks that variables, functions, and arguments are not deleted. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrictModeCheck.checkObjectLiteral#177",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/StrictModeCheck.java",
    "class_name": "com.google.javascript.jscomp.StrictModeCheck",
    "signature": "com.google.javascript.jscomp.StrictModeCheck.checkObjectLiteral(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set\u003cString\u003e getters \u003d Sets.newHashSet();\n    Set\u003cString\u003e setters \u003d Sets.newHashSet();\n    for (Node key \u003d n.getFirstChild();\n         key !\u003d null;\n         key \u003d key.getNext()) {\n      if (!noCajaChecks \u0026\u0026 key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\n        if (setters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
    "begin_line": 177,
    "end_line": 203,
    "comment": "/** \n * Checks that object literal keys are valid. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrictModeCheck.checkLabel#206",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/StrictModeCheck.java",
    "class_name": "com.google.javascript.jscomp.StrictModeCheck",
    "signature": "com.google.javascript.jscomp.StrictModeCheck.checkLabel(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void checkLabel(NodeTraversal t, Node n) {\n    if (n.getFirstChild().getString().endsWith(\"__\")) {\n      if (!noCajaChecks) {\n        t.report(n.getFirstChild(), ILLEGAL_NAME);\n      }\n    }\n  }",
    "begin_line": 206,
    "end_line": 212,
    "comment": "/** \n * Checks that label names are valid. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NonExternChecks.visit#216",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/StrictModeCheck.java",
    "class_name": "com.google.javascript.jscomp.StrictModeCheck",
    "signature": "com.google.javascript.jscomp.StrictModeCheck.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if ((n.isName()) \u0026\u0026 isDeclaration(n)) {\n        checkDeclaration(t, n);\n      } else if (n.isGetProp()) {\n        checkProperty(t, n);\n      }\n    }",
    "begin_line": 216,
    "end_line": 222,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NonExternChecks.checkDeclaration#225",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/StrictModeCheck.java",
    "class_name": "com.google.javascript.jscomp.StrictModeCheck",
    "signature": "com.google.javascript.jscomp.StrictModeCheck.checkDeclaration(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void checkDeclaration(NodeTraversal t, Node n) {\n      if (\"eval\".equals(n.getString())) {\n        t.report(n, EVAL_DECLARATION);\n      } else if (\"arguments\".equals(n.getString())) {\n        t.report(n, ARGUMENTS_DECLARATION);\n      } else if (n.getString().endsWith(\"__\")) {\n        if (!noCajaChecks) {\n          t.report(n, ILLEGAL_NAME);\n        }\n      }\n    }",
    "begin_line": 225,
    "end_line": 235,
    "comment": "/** \n * Checks for illegal declarations. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NonExternChecks.checkProperty#238",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/StrictModeCheck.java",
    "class_name": "com.google.javascript.jscomp.StrictModeCheck",
    "signature": "com.google.javascript.jscomp.StrictModeCheck.checkProperty(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void checkProperty(NodeTraversal t, Node n) {\n      if (n.getLastChild().getString().endsWith(\"__\")) {\n        if (!noCajaChecks) {\n          t.report(n.getLastChild(), ILLEGAL_NAME);\n        }\n      }\n    }",
    "begin_line": 238,
    "end_line": 244,
    "comment": "/** \n * Checks for illegal property accesses. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SuppressDocWarningsGuard.SuppressDocWarningsGuard#40",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
    "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.SuppressDocWarningsGuard(java.util.Map\u003cjava.lang.String,com.google.javascript.jscomp.DiagnosticGroup\u003e)",
    "snippet": " SuppressDocWarningsGuard(Map\u003cString, DiagnosticGroup\u003e suppressibleGroups) {\n    for (Map.Entry\u003cString, DiagnosticGroup\u003e entry :\n             suppressibleGroups.entrySet()) {\n      suppressors.put(\n          entry.getKey(),\n          new DiagnosticGroupWarningsGuard(\n              entry.getValue(),\n              CheckLevel.OFF));\n    }\n  }",
    "begin_line": 40,
    "end_line": 49,
    "comment": "/** \n * The suppressible groups, indexed by name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SuppressDocWarningsGuard.level#52",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
    "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.level(com.google.javascript.jscomp.JSError)",
    "snippet": "@Override\n  public CheckLevel level(JSError error) {\n    Node node \u003d error.node;\n    if (node !\u003d null) {\n      for (Node current \u003d node;\n           current !\u003d null;\n           current \u003d current.getParent()) {\n        int type \u003d current.getType();\n        JSDocInfo info \u003d null;\n\n        // We only care about function annotations at the FUNCTION and SCRIPT\n        // level. Otherwise, the @suppress annotation has an implicit\n        // dependency on the exact structure of our AST, and that seems like\n        // a bad idea.\n        if (type \u003d\u003d Token.FUNCTION) {\n          info \u003d NodeUtil.getFunctionJSDocInfo(current);\n        } else if (type \u003d\u003d Token.SCRIPT) {\n          info \u003d current.getJSDocInfo();\n        } else if (type \u003d\u003d Token.ASSIGN) {\n          Node rhs \u003d current.getLastChild();\n          if (rhs.isFunction()) {\n            info \u003d NodeUtil.getFunctionJSDocInfo(rhs);\n          }\n        }\n\n        if (info !\u003d null) {\n          for (String suppressor : info.getSuppressions()) {\n            WarningsGuard guard \u003d suppressors.get(suppressor);\n\n            // Some @suppress tags are for other tools, and\n            // may not have a warnings guard.\n            if (guard !\u003d null) {\n              CheckLevel newLevel \u003d guard.level(error);\n              if (newLevel !\u003d null) {\n                return newLevel;\n              }\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }",
    "begin_line": 52,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SuppressDocWarningsGuard.getPriority#96",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
    "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.getPriority()",
    "snippet": "@Override\n  public int getPriority() {\n    // Happens after path-based filtering, but before other times\n    // of filtering.\n    return WarningsGuard.Priority.SUPPRESS_DOC.value;\n  }",
    "begin_line": 96,
    "end_line": 100,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SyntacticScopeCreator.SyntacticScopeCreator#56",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SyntacticScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
    "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.SyntacticScopeCreator(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": " SyntacticScopeCreator(AbstractCompiler compiler) {\n    this.compiler \u003d compiler;\n    this.redeclarationHandler \u003d new DefaultRedeclarationHandler();\n  }",
    "begin_line": 56,
    "end_line": 59,
    "comment": "/** \n * Creates a ScopeCreator.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SyntacticScopeCreator.SyntacticScopeCreator#61",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SyntacticScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
    "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.SyntacticScopeCreator(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.SyntacticScopeCreator.RedeclarationHandler)",
    "snippet": " SyntacticScopeCreator(\n      AbstractCompiler compiler, RedeclarationHandler redeclarationHandler) {\n    this.compiler \u003d compiler;\n    this.redeclarationHandler \u003d redeclarationHandler;\n  }",
    "begin_line": 61,
    "end_line": 65,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SyntacticScopeCreator.createScope#68",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SyntacticScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
    "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.createScope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
    "snippet": "@Override\n  public Scope createScope(Node n, Scope parent) {\n    inputId \u003d null;\n    if (parent \u003d\u003d null) {\n      scope \u003d Scope.createGlobalScope(n);\n    } else {\n      scope \u003d new Scope(parent, n);\n    }\n\n    scanRoot(n, parent);\n\n    inputId \u003d null;\n    Scope returnedScope \u003d scope;\n    scope \u003d null;\n    return returnedScope;\n  }",
    "begin_line": 68,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SyntacticScopeCreator.scanRoot#84",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SyntacticScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
    "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scanRoot(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
    "snippet": "private void scanRoot(Node n, Scope parent) {\n    if (n.isFunction()) {\n      if (inputId \u003d\u003d null) {\n        inputId \u003d NodeUtil.getInputId(n);\n        // TODO(johnlenz): inputId maybe null if the FUNCTION node is detached\n        // from the AST.\n        // Is it meaningful to build a scope for detached FUNCTION node?\n      }\n\n      final Node fnNameNode \u003d n.getFirstChild();\n      final Node args \u003d fnNameNode.getNext();\n      final Node body \u003d args.getNext();\n\n      // Bleed the function name into the scope, if it hasn\u0027t\n      // been declared in the outer scope.\n      String fnName \u003d fnNameNode.getString();\n      if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionExpression(n)) {\n        declareVar(fnNameNode);\n      }\n\n      // Args: Declare function variables\n      Preconditions.checkState(args.isParamList());\n      for (Node a \u003d args.getFirstChild(); a !\u003d null;\n           a \u003d a.getNext()) {\n        Preconditions.checkState(a.isName());\n        declareVar(a);\n      }\n\n      // Body\n      scanVars(body, n);\n    } else {\n      // It\u0027s the global block\n      Preconditions.checkState(scope.getParent() \u003d\u003d null);\n      scanVars(n, null);\n    }\n  }",
    "begin_line": 84,
    "end_line": 119,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SyntacticScopeCreator.scanVars#124",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SyntacticScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
    "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private void scanVars(Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.VAR:\n        // Declare all variables. e.g. var x \u003d 1, y, z;\n        for (Node child \u003d n.getFirstChild();\n             child !\u003d null;) {\n          Node next \u003d child.getNext();\n          declareVar(child);\n          child \u003d next;\n        }\n        return;\n\n      case Token.FUNCTION:\n        if (NodeUtil.isFunctionExpression(n)) {\n          return;\n        }\n\n        String fnName \u003d n.getFirstChild().getString();\n        if (fnName.isEmpty()) {\n          // This is invalid, but allow it so the checks can catch it.\n          return;\n        }\n        declareVar(n.getFirstChild());\n        return;   // should not examine function\u0027s children\n\n      case Token.CATCH:\n        Preconditions.checkState(n.getChildCount() \u003d\u003d 2);\n        Preconditions.checkState(n.getFirstChild().isName());\n        // the first child is the catch var and the third child\n        // is the code block\n\n        final Node var \u003d n.getFirstChild();\n        final Node block \u003d var.getNext();\n\n        declareVar(var);\n        scanVars(block, n);\n        return;  // only one child to scan\n\n      case Token.SCRIPT:\n        inputId \u003d n.getInputId();\n        Preconditions.checkNotNull(inputId);\n        break;\n    }\n\n    // Variables can only occur in statement-level nodes, so\n    // we only need to traverse children in a couple special cases.\n    if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) {\n      for (Node child \u003d n.getFirstChild();\n           child !\u003d null;) {\n        Node next \u003d child.getNext();\n        scanVars(child, n);\n        child \u003d next;\n      }\n    }\n  }",
    "begin_line": 124,
    "end_line": 178,
    "comment": "/** \n * Scans and gather variables declarations under a Node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RedeclarationHandler.onRedeclaration#184",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SyntacticScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
    "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.onRedeclaration(com.google.javascript.jscomp.Scope, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.jscomp.CompilerInput)",
    "snippet": "void onRedeclaration(\n        Scope s, String name, Node n, CompilerInput input);",
    "begin_line": 184,
    "end_line": 185,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultRedeclarationHandler.onRedeclaration#193",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SyntacticScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
    "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.onRedeclaration(com.google.javascript.jscomp.Scope, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.jscomp.CompilerInput)",
    "snippet": "@Override\n    public void onRedeclaration(\n        Scope s, String name, Node n, CompilerInput input) {\n      Node parent \u003d n.getParent();\n\n      // Don\u0027t allow multiple variables to be declared at the top-level scope\n      if (scope.isGlobal()) {\n        Scope.Var origVar \u003d scope.getVar(name);\n        Node origParent \u003d origVar.getParentNode();\n        if (origParent.isCatch() \u0026\u0026\n            parent.isCatch()) {\n          // Okay, both are \u0027catch(x)\u0027 variables.\n          return;\n        }\n\n        boolean allowDupe \u003d hasDuplicateDeclarationSuppression(n, origVar);\n\n        if (!allowDupe) {\n          compiler.report(\n              JSError.make(NodeUtil.getSourceName(n), n,\n                           VAR_MULTIPLY_DECLARED_ERROR,\n                           name,\n                           (origVar.input !\u003d null\n                            ? origVar.input.getName()\n                            : \"??\")));\n        }\n      } else if (name.equals(ARGUMENTS) \u0026\u0026 !NodeUtil.isVarDeclaration(n)) {\n        // Disallow shadowing \"arguments\" as we can\u0027t handle with our current\n        // scope modeling.\n        compiler.report(\n            JSError.make(NodeUtil.getSourceName(n), n,\n                VAR_ARGUMENTS_SHADOWED_ERROR));\n      }\n    }",
    "begin_line": 193,
    "end_line": 225,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultRedeclarationHandler.declareVar#233",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SyntacticScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
    "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.declareVar(com.google.javascript.rhino.Node)",
    "snippet": "private void declareVar(Node n) {\n    Preconditions.checkState(n.isName());\n\n    CompilerInput input \u003d compiler.getInput(inputId);\n    String name \u003d n.getString();\n    if (scope.isDeclared(name, false)\n        || (scope.isLocal() \u0026\u0026 name.equals(ARGUMENTS))) {\n      redeclarationHandler.onRedeclaration(\n          scope, name, n, input);\n    } else {\n      scope.declare(name, n, null, input);\n    }\n  }",
    "begin_line": 233,
    "end_line": 245,
    "comment": "/** \n * Declares a variable.\n * @param n The node corresponding to the variable name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultRedeclarationHandler.hasDuplicateDeclarationSuppression#254",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SyntacticScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
    "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.hasDuplicateDeclarationSuppression(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope.Var)",
    "snippet": "static boolean hasDuplicateDeclarationSuppression(Node n, Scope.Var origVar) {\n    Preconditions.checkState(n.isName());\n    Node parent \u003d n.getParent();\n    Node origParent \u003d origVar.getParentNode();\n\n    JSDocInfo info \u003d n.getJSDocInfo();\n    if (info \u003d\u003d null) {\n      info \u003d parent.getJSDocInfo();\n    }\n    if (info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\")) {\n      return true;\n    }\n\n    info \u003d origVar.nameNode.getJSDocInfo();\n    if (info \u003d\u003d null) {\n      info \u003d origParent.getJSDocInfo();\n    }\n    return (info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\"));\n  }",
    "begin_line": 254,
    "end_line": 272,
    "comment": "/** \n * @param n The name node to check.\n * @param origVar The associated Var.\n * @return Whether duplicated declarations warnings should be suppressedfor the given node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultRedeclarationHandler.generateUntypedTopScope#281",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/SyntacticScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
    "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.generateUntypedTopScope(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": "static Scope generateUntypedTopScope(AbstractCompiler compiler) {\n    return new SyntacticScopeCreator(compiler).createScope(compiler.getRoot(),\n        null);\n  }",
    "begin_line": 281,
    "end_line": 284,
    "comment": "/** \n * Generates an untyped global scope from the root of AST of compiler (which includes externs).\n * @param compiler The compiler for which the scope is generated.\n * @return The new untyped global scope generated as a result of this call.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.TypeCheck#315",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.TypeCheck(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.jscomp.Scope, com.google.javascript.jscomp.MemoizedScopeCreator, com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.CheckLevel)",
    "snippet": "public TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry,\n      Scope topScope,\n      MemoizedScopeCreator scopeCreator,\n      CheckLevel reportMissingOverride,\n      CheckLevel reportUnknownTypes) {\n    this.compiler \u003d compiler;\n    this.validator \u003d compiler.getTypeValidator();\n    this.reverseInterpreter \u003d reverseInterpreter;\n    this.typeRegistry \u003d typeRegistry;\n    this.topScope \u003d topScope;\n    this.scopeCreator \u003d scopeCreator;\n    this.reportMissingOverride \u003d reportMissingOverride;\n    this.reportUnknownTypes \u003d reportUnknownTypes;\n    this.inferJSDocInfo \u003d new InferJSDocInfo(compiler);\n  }",
    "begin_line": 315,
    "end_line": 331,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.TypeCheck#333",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.TypeCheck(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.CheckLevel)",
    "snippet": "public TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry,\n      CheckLevel reportMissingOverride,\n      CheckLevel reportUnknownTypes) {\n    this(compiler, reverseInterpreter, typeRegistry, null, null,\n        reportMissingOverride, reportUnknownTypes);\n  }",
    "begin_line": 333,
    "end_line": 340,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.TypeCheck#342",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.TypeCheck(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": " TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry) {\n    this(compiler, reverseInterpreter, typeRegistry, null, null,\n         CheckLevel.WARNING, CheckLevel.OFF);\n  }",
    "begin_line": 342,
    "end_line": 347,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.reportMissingProperties#350",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.reportMissingProperties(boolean)",
    "snippet": "TypeCheck reportMissingProperties(boolean report) {\n    reportMissingProperties \u003d report;\n    return this;\n  }",
    "begin_line": 350,
    "end_line": 353,
    "comment": "/** \n * Turn on the missing property check. Returns this for easy chaining. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.process#363",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void process(Node externsRoot, Node jsRoot) {\n    Preconditions.checkNotNull(scopeCreator);\n    Preconditions.checkNotNull(topScope);\n\n    Node externsAndJs \u003d jsRoot.getParent();\n    Preconditions.checkState(externsAndJs !\u003d null);\n    Preconditions.checkState(\n        externsRoot \u003d\u003d null || externsAndJs.hasChild(externsRoot));\n\n    if (externsRoot !\u003d null) {\n      check(externsRoot, true);\n    }\n    check(jsRoot, false);\n  }",
    "begin_line": 363,
    "end_line": 376,
    "comment": "/** \n * Main entry point for this phase of processing. This follows the pattern for JSCompiler phases.\n * @param externsRoot The root of the externs parse tree.\n * @param jsRoot The root of the input parse tree to be checked.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.processForTesting#379",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.processForTesting(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public Scope processForTesting(Node externsRoot, Node jsRoot) {\n    Preconditions.checkState(scopeCreator \u003d\u003d null);\n    Preconditions.checkState(topScope \u003d\u003d null);\n\n    Preconditions.checkState(jsRoot.getParent() !\u003d null);\n    Node externsAndJsRoot \u003d jsRoot.getParent();\n\n    scopeCreator \u003d new MemoizedScopeCreator(new TypedScopeCreator(compiler));\n    topScope \u003d scopeCreator.createScope(externsAndJsRoot, null);\n\n    TypeInferencePass inference \u003d new TypeInferencePass(compiler,\n        reverseInterpreter, topScope, scopeCreator);\n\n    inference.process(externsRoot, jsRoot);\n    process(externsRoot, jsRoot);\n\n    return topScope;\n  }",
    "begin_line": 379,
    "end_line": 396,
    "comment": "/** \n * Main entry point of this phase for testing code. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.check#399",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.check(com.google.javascript.rhino.Node, boolean)",
    "snippet": "public void check(Node node, boolean externs) {\n    Preconditions.checkNotNull(node);\n\n    NodeTraversal t \u003d new NodeTraversal(compiler, this, scopeCreator);\n    inExterns \u003d externs;\n    t.traverseWithScope(node, topScope);\n    if (externs) {\n      inferJSDocInfo.process(node, null);\n    } else {\n      inferJSDocInfo.process(null, node);\n    }\n  }",
    "begin_line": 399,
    "end_line": 410,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.checkNoTypeCheckSection#413",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.checkNoTypeCheckSection(com.google.javascript.rhino.Node, boolean)",
    "snippet": "private void checkNoTypeCheckSection(Node n, boolean enterSection) {\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.VAR:\n      case Token.FUNCTION:\n      case Token.ASSIGN:\n        JSDocInfo info \u003d n.getJSDocInfo();\n        if (info !\u003d null \u0026\u0026 info.isNoTypeCheck()) {\n          if (enterSection) {\n            noTypeCheckSection++;\n          } else {\n            noTypeCheckSection--;\n          }\n        }\n        validator.setShouldReport(noTypeCheckSection \u003d\u003d 0);\n        break;\n    }\n  }",
    "begin_line": 413,
    "end_line": 431,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.report#433",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.report(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
    "snippet": "private void report(NodeTraversal t, Node n, DiagnosticType diagnosticType,\n      String... arguments) {\n    if (noTypeCheckSection \u003d\u003d 0) {\n      t.report(n, diagnosticType, arguments);\n    }\n  }",
    "begin_line": 433,
    "end_line": 438,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.shouldTraverse#441",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public boolean shouldTraverse(\n      NodeTraversal t, Node n, Node parent) {\n    checkNoTypeCheckSection(n, true);\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        // normal type checking\n        final Scope outerScope \u003d t.getScope();\n        final String functionPrivateName \u003d n.getFirstChild().getString();\n        if (functionPrivateName !\u003d null \u0026\u0026 functionPrivateName.length() \u003e 0 \u0026\u0026\n            outerScope.isDeclared(functionPrivateName, false) \u0026\u0026\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType)) {\n          report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n        }\n\n        // TODO(user): Only traverse the function\u0027s body. The function\u0027s\n        // name and arguments are traversed by the scope creator, and ideally\n        // should not be traversed by the type checker.\n        break;\n    }\n    return true;\n  }",
    "begin_line": 441,
    "end_line": 465,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.visit#478",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    JSType childType;\n    JSType leftType, rightType;\n    Node left, right;\n    // To be explicitly set to false if the node is not typeable.\n    boolean typeable \u003d true;\n\n    switch (n.getType()) {\n      case Token.CAST:\n        Node expr \u003d n.getFirstChild();\n        ensureTyped(t, n, getJSType(expr));\n\n        // If the cast, tightens the type apply it, so it is available post\n        // normalization.\n        JSType castType \u003d getJSType(n);\n        JSType exprType \u003d getJSType(expr);\n        if (castType.isSubtype(exprType)) {\n          expr.setJSType(castType);\n        }\n        break;\n\n      case Token.NAME:\n        typeable \u003d visitName(t, n, parent);\n        break;\n\n      case Token.PARAM_LIST:\n        typeable \u003d false;\n        break;\n\n      case Token.COMMA:\n        ensureTyped(t, n, getJSType(n.getLastChild()));\n        break;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.THIS:\n        ensureTyped(t, n, t.getScope().getTypeOfThis());\n        break;\n\n      case Token.NULL:\n        ensureTyped(t, n, NULL_TYPE);\n        break;\n\n      case Token.NUMBER:\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.STRING:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.STRING_KEY:\n        typeable \u003d false;\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        // Object literal keys are handled with OBJECTLIT\n        break;\n\n      case Token.ARRAYLIT:\n        ensureTyped(t, n, ARRAY_TYPE);\n        break;\n\n      case Token.REGEXP:\n        ensureTyped(t, n, REGEXP_TYPE);\n        break;\n\n      case Token.GETPROP:\n        visitGetProp(t, n, parent);\n        typeable \u003d !(parent.isAssign() \u0026\u0026\n                     parent.getFirstChild() \u003d\u003d n);\n        break;\n\n      case Token.GETELEM:\n        visitGetElem(t, n);\n        // The type of GETELEM is always unknown, so no point counting that.\n        // If that unknown leaks elsewhere (say by an assignment to another\n        // variable), then it will be counted.\n        typeable \u003d false;\n        break;\n\n      case Token.VAR:\n        visitVar(t, n);\n        typeable \u003d false;\n        break;\n\n      case Token.NEW:\n        visitNew(t, n);\n        break;\n\n      case Token.CALL:\n        visitCall(t, n);\n        typeable \u003d !parent.isExprResult();\n        break;\n\n      case Token.RETURN:\n        visitReturn(t, n);\n        typeable \u003d false;\n        break;\n\n      case Token.DEC:\n      case Token.INC:\n        left \u003d n.getFirstChild();\n        checkPropCreation(t, left);\n        validator.expectNumber(t, left, getJSType(left), \"increment/decrement\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.NOT:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.VOID:\n        ensureTyped(t, n, VOID_TYPE);\n        break;\n\n      case Token.TYPEOF:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.BITNOT:\n        childType \u003d getJSType(n.getFirstChild());\n        if (!childType.matchesInt32Context()) {\n          report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());\n        }\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        left \u003d n.getFirstChild();\n        validator.expectNumber(t, left, getJSType(left), \"sign operator\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE: {\n        left \u003d n.getFirstChild();\n        right \u003d n.getLastChild();\n\n        if (left.isTypeOf()) {\n          if (right.isString()) {\n            checkTypeofString(t, right, right.getString());\n          }\n        } else if (right.isTypeOf() \u0026\u0026 left.isString()) {\n          checkTypeofString(t, left, left.getString());\n        }\n\n        leftType \u003d getJSType(left);\n        rightType \u003d getJSType(right);\n\n        // We do not want to warn about explicit comparisons to VOID. People\n        // often do this if they think their type annotations screwed up.\n        //\n        // We do want to warn about cases where people compare things like\n        // (Array|null) \u003d\u003d (Function|null)\n        // because it probably means they screwed up.\n        //\n        // This heuristic here is not perfect, but should catch cases we\n        // care about without too many false negatives.\n        JSType leftTypeRestricted \u003d leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted \u003d rightType.restrictByNotNullOrUndefined();\n\n        TernaryValue result \u003d TernaryValue.UNKNOWN;\n        if (n.getType() \u003d\u003d Token.EQ || n.getType() \u003d\u003d Token.NE) {\n          result \u003d leftTypeRestricted.testForEquality(rightTypeRestricted);\n          if (n.isNE()) {\n            result \u003d result.not();\n          }\n        } else {\n          // SHEQ or SHNE\n          if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                  rightTypeRestricted)) {\n            result \u003d n.getType() \u003d\u003d Token.SHEQ ?\n                TernaryValue.FALSE : TernaryValue.TRUE;\n          }\n        }\n\n        if (result !\u003d TernaryValue.UNKNOWN) {\n          report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n        leftType \u003d getJSType(n.getFirstChild());\n        rightType \u003d getJSType(n.getLastChild());\n        if (rightType.isNumber()) {\n          validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");\n        } else if (leftType.isNumber()) {\n          validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");\n        } else if (leftType.matchesNumberContext() \u0026\u0026\n                   rightType.matchesNumberContext()) {\n          // OK.\n        } else {\n          // Whether the comparison is numeric will be determined at runtime\n          // each time the expression is evaluated. Regardless, both operands\n          // should match a string context.\n          String message \u003d \"left side of comparison\";\n          validator.expectString(t, n, leftType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));\n          message \u003d \"right side of comparison\";\n          validator.expectString(t, n, rightType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.IN:\n        left \u003d n.getFirstChild();\n        right \u003d n.getLastChild();\n        rightType \u003d getJSType(right);\n        validator.expectString(t, left, getJSType(left), \"left side of \u0027in\u0027\");\n        validator.expectObject(t, n, rightType, \"\u0027in\u0027 requires an object\");\n        if (rightType.isStruct()) {\n          report(t, right, IN_USED_WITH_STRUCT);\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.INSTANCEOF:\n        left \u003d n.getFirstChild();\n        right \u003d n.getLastChild();\n        rightType \u003d getJSType(right).restrictByNotNullOrUndefined();\n        validator.expectAnyObject(\n            t, left, getJSType(left), \"deterministic instanceof yields false\");\n        validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.ASSIGN:\n        visitAssign(t, n);\n        typeable \u003d false;\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_MUL:\n        checkPropCreation(t, n.getFirstChild());\n        // fall through\n\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n        visitBinaryOperator(n.getType(), t, n);\n        break;\n\n      case Token.DELPROP:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.CASE:\n        JSType switchType \u003d getJSType(parent.getFirstChild());\n        JSType caseType \u003d getJSType(n.getFirstChild());\n        validator.expectSwitchMatchesCase(t, n, switchType, caseType);\n        typeable \u003d false;\n        break;\n\n      case Token.WITH: {\n        Node child \u003d n.getFirstChild();\n        childType \u003d getJSType(child);\n        validator.expectObject(t, child, childType, \"with requires an object\");\n        typeable \u003d false;\n        break;\n      }\n\n      case Token.FUNCTION:\n        visitFunction(t, n);\n        break;\n\n      // These nodes have no interesting type behavior.\n      case Token.LABEL:\n      case Token.LABEL_NAME:\n      case Token.SWITCH:\n      case Token.BREAK:\n      case Token.CATCH:\n      case Token.TRY:\n      case Token.SCRIPT:\n      case Token.EXPR_RESULT:\n      case Token.BLOCK:\n      case Token.EMPTY:\n      case Token.DEFAULT_CASE:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.THROW:\n        typeable \u003d false;\n        break;\n\n      // These nodes require data flow analysis.\n      case Token.DO:\n      case Token.IF:\n      case Token.WHILE:\n        typeable \u003d false;\n        break;\n\n      case Token.FOR:\n        if (NodeUtil.isForIn(n)) {\n          Node obj \u003d n.getChildAtIndex(1);\n          if (getJSType(obj).isStruct()) {\n            report(t, obj, IN_USED_WITH_STRUCT);\n          }\n        }\n        typeable \u003d false;\n        break;\n\n      // These nodes are typed during the type inference.\n      case Token.AND:\n      case Token.HOOK:\n      case Token.OBJECTLIT:\n      case Token.OR:\n        if (n.getJSType() !\u003d null) { // If we didn\u0027t run type inference.\n          ensureTyped(t, n);\n        } else {\n          // If this is an enum, then give that type to the objectlit as well.\n          if ((n.isObjectLit())\n              \u0026\u0026 (parent.getJSType() instanceof EnumType)) {\n            ensureTyped(t, n, parent.getJSType());\n          } else {\n            ensureTyped(t, n);\n          }\n        }\n        if (n.isObjectLit()) {\n          JSType typ \u003d getJSType(n);\n          for (Node key : n.children()) {\n            visitObjLitKey(t, key, n, typ);\n          }\n        }\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));\n        ensureTyped(t, n);\n        break;\n    }\n\n    // Don\u0027t count externs since the user\u0027s code may not even use that part.\n    typeable \u003d typeable \u0026\u0026 !inExterns;\n\n    if (typeable) {\n      doPercentTypedAccounting(t, n);\n    }\n\n    checkNoTypeCheckSection(n, false);\n  }",
    "begin_line": 478,
    "end_line": 854,
    "comment": "/** \n * This is the meat of the type checking.  It is basically one big switch, with each case representing one type of parse tree node.  The individual cases are usually pretty straightforward.\n * @param t The node traversal object that supplies context, such as thescope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n * @param parent The parent of the node n.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.checkTypeofString#856",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.checkTypeofString(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, java.lang.String)",
    "snippet": "private void checkTypeofString(NodeTraversal t, Node n, String s) {\n    if (!(s.equals(\"number\") || s.equals(\"string\") || s.equals(\"boolean\") ||\n          s.equals(\"undefined\") || s.equals(\"function\") ||\n          s.equals(\"object\") || s.equals(\"unknown\"))) {\n      validator.expectValidTypeofName(t, n, s);\n    }\n  }",
    "begin_line": 856,
    "end_line": 862,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.doPercentTypedAccounting#868",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.doPercentTypedAccounting(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void doPercentTypedAccounting(NodeTraversal t, Node n) {\n    JSType type \u003d n.getJSType();\n    if (type \u003d\u003d null) {\n      nullCount++;\n    } else if (type.isUnknownType()) {\n      if (reportUnknownTypes.isOn()) {\n        compiler.report(\n            t.makeError(n, reportUnknownTypes, UNKNOWN_EXPR_TYPE));\n      }\n      unknownCount++;\n    } else {\n      typedCount++;\n    }\n  }",
    "begin_line": 868,
    "end_line": 881,
    "comment": "/** \n * Counts the given node in the typed statistics.\n * @param n a node that should be typed\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.visitAssign#891",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.visitAssign(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void visitAssign(NodeTraversal t, Node assign) {\n    JSDocInfo info \u003d assign.getJSDocInfo();\n    Node lvalue \u003d assign.getFirstChild();\n    Node rvalue \u003d assign.getLastChild();\n\n    // Check property sets to \u0027object.property\u0027 when \u0027object\u0027 is known.\n    if (lvalue.isGetProp()) {\n      Node object \u003d lvalue.getFirstChild();\n      JSType objectJsType \u003d getJSType(object);\n      Node property \u003d lvalue.getLastChild();\n      String pname \u003d property.getString();\n\n      // the first name in this getprop refers to an interface\n      // we perform checks in addition to the ones below\n      if (object.isGetProp()) {\n        JSType jsType \u003d getJSType(object.getFirstChild());\n        if (jsType.isInterface() \u0026\u0026\n            object.getLastChild().getString().equals(\"prototype\")) {\n          visitInterfaceGetprop(t, assign, object, pname, lvalue, rvalue);\n        }\n      }\n\n      checkEnumAlias(t, info, rvalue);\n      checkPropCreation(t, lvalue);\n\n      // Prototype assignments are special, because they actually affect\n      // the definition of a class. These are mostly validated\n      // during TypedScopeCreator, and we only look for the \"dumb\" cases here.\n      // object.prototype \u003d ...;\n      if (pname.equals(\"prototype\")) {\n        if (objectJsType !\u003d null \u0026\u0026 objectJsType.isFunctionType()) {\n          FunctionType functionType \u003d objectJsType.toMaybeFunctionType();\n          if (functionType.isConstructor()) {\n            JSType rvalueType \u003d rvalue.getJSType();\n            validator.expectObject(t, rvalue, rvalueType,\n                OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);\n            // Only assign structs to the prototype of a @struct constructor\n            if (functionType.makesStructs() \u0026\u0026 !rvalueType.isStruct()) {\n              String funName \u003d functionType.getTypeOfThis().toString();\n              compiler.report(t.makeError(assign, CONFLICTING_EXTENDED_TYPE,\n                                          \"struct\", funName));\n            }\n            return;\n          }\n        }\n      }\n\n      // The generic checks for \u0027object.property\u0027 when \u0027object\u0027 is known,\n      // and \u0027property\u0027 is declared on it.\n      // object.property \u003d ...;\n      ObjectType type \u003d ObjectType.cast(\n          objectJsType.restrictByNotNullOrUndefined());\n      if (type !\u003d null) {\n        if (type.hasProperty(pname) \u0026\u0026\n            !type.isPropertyTypeInferred(pname) \u0026\u0026\n            !propertyIsImplicitCast(type, pname)) {\n          JSType expectedType \u003d type.getPropertyType(pname);\n          if (!expectedType.isUnknownType()) {\n            validator.expectCanAssignToPropertyOf(\n                t, assign, getJSType(rvalue),\n                expectedType, object, pname);\n            checkPropertyInheritanceOnGetpropAssign(\n                t, assign, object, pname, info, expectedType);\n            return;\n          }\n        }\n      }\n\n      // If we couldn\u0027t get the property type with normal object property\n      // lookups, then check inheritance anyway with the unknown type.\n      checkPropertyInheritanceOnGetpropAssign(\n          t, assign, object, pname, info, getNativeType(UNKNOWN_TYPE));\n    }\n\n    // Check qualified name sets to \u0027object\u0027 and \u0027object.property\u0027.\n    // This can sometimes handle cases when the type of \u0027object\u0027 is not known.\n    // e.g.,\n    // var obj \u003d createUnknownType();\n    // /** @type {number} */ obj.foo \u003d true;\n    JSType leftType \u003d getJSType(lvalue);\n    if (lvalue.isQualifiedName()) {\n      // variable with inferred type case\n      JSType rvalueType \u003d getJSType(assign.getLastChild());\n      Var var \u003d t.getScope().getVar(lvalue.getQualifiedName());\n      if (var !\u003d null) {\n        if (var.isTypeInferred()) {\n          return;\n        }\n\n        if (NodeUtil.getRootOfQualifiedName(lvalue).isThis() \u0026\u0026\n            t.getScope() !\u003d var.getScope()) {\n          // Don\u0027t look at \"this.foo\" variables from other scopes.\n          return;\n        }\n\n        if (var.getType() !\u003d null) {\n          leftType \u003d var.getType();\n        }\n      }\n    }\n\n    // Fall through case for arbitrary LHS and arbitrary RHS.\n    Node rightChild \u003d assign.getLastChild();\n    JSType rightType \u003d getJSType(rightChild);\n    if (validator.expectCanAssignTo(\n            t, assign, rightType, leftType, \"assignment\")) {\n      ensureTyped(t, assign, rightType);\n    } else {\n      ensureTyped(t, assign);\n    }\n  }",
    "begin_line": 891,
    "end_line": 1001,
    "comment": "/** \n * Visits an assignment \u003ccode\u003elvalue \u003d rvalue\u003c/code\u003e. If the \u003ccode\u003elvalue\u003c/code\u003e is a prototype modification, we change the schema of the object type it is referring to.\n * @param t the traversal\n * @param assign the assign node(\u003ccode\u003eassign.isAssign()\u003c/code\u003e is an implicit invariant)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.checkPropCreation#1004",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.checkPropCreation(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void checkPropCreation(NodeTraversal t, Node lvalue) {\n    if (lvalue.isGetProp()) {\n      Node obj \u003d lvalue.getFirstChild();\n      Node prop \u003d lvalue.getLastChild();\n      JSType objType \u003d getJSType(obj);\n      String pname \u003d prop.getString();\n      if (objType.isStruct() \u0026\u0026 !objType.hasProperty(pname)) {\n        if (!(obj.isThis() \u0026\u0026\n              getJSType(t.getScope().getRootNode()).isConstructor())) {\n          report(t, prop, ILLEGAL_PROPERTY_CREATION);\n        }\n      }\n    }\n  }",
    "begin_line": 1004,
    "end_line": 1017,
    "comment": "/** \n * Check that we don\u0027t create new properties on structs. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.checkPropertyInheritanceOnGetpropAssign#1019",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.checkPropertyInheritanceOnGetpropAssign(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.JSDocInfo, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private void checkPropertyInheritanceOnGetpropAssign(\n      NodeTraversal t, Node assign, Node object, String property,\n      JSDocInfo info, JSType propertyType) {\n    // Inheritance checks for prototype properties.\n    //\n    // TODO(nicksantos): This isn\u0027t the right place to do this check. We\n    // really want to do this when we\u0027re looking at the constructor.\n    // We\u0027d find all its properties and make sure they followed inheritance\n    // rules, like we currently do for @implements to make sure\n    // all the methods are implemented.\n    //\n    // As-is, this misses many other ways to override a property.\n    //\n    // object.prototype.property \u003d ...;\n    if (object.isGetProp()) {\n      Node object2 \u003d object.getFirstChild();\n      String property2 \u003d NodeUtil.getStringValue(object.getLastChild());\n\n      if (\"prototype\".equals(property2)) {\n        JSType jsType \u003d getJSType(object2);\n        if (jsType.isFunctionType()) {\n          FunctionType functionType \u003d jsType.toMaybeFunctionType();\n          if (functionType.isConstructor() || functionType.isInterface()) {\n            checkDeclaredPropertyInheritance(\n                t, assign, functionType, property, info, propertyType);\n          }\n        }\n      }\n    }\n  }",
    "begin_line": 1019,
    "end_line": 1048,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.visitObjLitKey#1059",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.visitObjLitKey(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private void visitObjLitKey(\n      NodeTraversal t, Node key, Node objlit, JSType litType) {\n    // Do not validate object lit value types in externs. We don\u0027t really care,\n    // and it makes it easier to generate externs.\n    if (objlit.isFromExterns()) {\n      ensureTyped(t, key);\n      return;\n    }\n\n    // Structs must have unquoted keys and dicts must have quoted keys\n    if (litType.isStruct() \u0026\u0026 key.isQuotedString()) {\n      report(t, key, ILLEGAL_OBJLIT_KEY, \"struct\");\n    } else if (litType.isDict() \u0026\u0026 !key.isQuotedString()) {\n      report(t, key, ILLEGAL_OBJLIT_KEY, \"dict\");\n    }\n\n    // TODO(johnlenz): Validate get and set function declarations are valid\n    // as is the functions can have \"extraneous\" bits.\n\n    // For getter and setter property definitions the\n    // r-value type !\u003d the property type.\n    Node rvalue \u003d key.getFirstChild();\n    JSType rightType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(\n        key, getJSType(rvalue));\n    if (rightType \u003d\u003d null) {\n      rightType \u003d getNativeType(UNKNOWN_TYPE);\n    }\n\n    Node owner \u003d objlit;\n\n    // Validate value is assignable to the key type.\n\n    JSType keyType \u003d getJSType(key);\n\n    JSType allowedValueType \u003d keyType;\n    if (allowedValueType.isEnumElementType()) {\n      allowedValueType \u003d\n          allowedValueType.toMaybeEnumElementType().getPrimitiveType();\n    }\n\n    boolean valid \u003d validator.expectCanAssignToPropertyOf(t, key,\n        rightType, allowedValueType,\n        owner, NodeUtil.getObjectLitKeyName(key));\n    if (valid) {\n      ensureTyped(t, key, rightType);\n    } else {\n      ensureTyped(t, key);\n    }\n\n    // Validate that the key type is assignable to the object property type.\n    // This is necessary as the objlit may have been cast to a non-literal\n    // object type.\n    // TODO(johnlenz): consider introducing a CAST node to the AST (or\n    // perhaps a parentheses node).\n\n    JSType objlitType \u003d getJSType(objlit);\n    ObjectType type \u003d ObjectType.cast(\n        objlitType.restrictByNotNullOrUndefined());\n    if (type !\u003d null) {\n      String property \u003d NodeUtil.getObjectLitKeyName(key);\n      if (type.hasProperty(property) \u0026\u0026\n          !type.isPropertyTypeInferred(property) \u0026\u0026\n          !propertyIsImplicitCast(type, property)) {\n        validator.expectCanAssignToPropertyOf(\n            t, key, keyType,\n            type.getPropertyType(property), owner, property);\n      }\n      return;\n    }\n  }",
    "begin_line": 1059,
    "end_line": 1128,
    "comment": "/** \n * Visits an object literal field definition \u003ccode\u003ekey : value\u003c/code\u003e. If the \u003ccode\u003elvalue\u003c/code\u003e is a prototype modification, we change the schema of the object type it is referring to.\n * @param t the traversal\n * @param key the assign node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.propertyIsImplicitCast#1134",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.propertyIsImplicitCast(com.google.javascript.rhino.jstype.ObjectType, java.lang.String)",
    "snippet": "private boolean propertyIsImplicitCast(ObjectType type, String prop) {\n    for (; type !\u003d null; type \u003d type.getImplicitPrototype()) {\n      JSDocInfo docInfo \u003d type.getOwnPropertyJSDocInfo(prop);\n      if (docInfo !\u003d null \u0026\u0026 docInfo.isImplicitCast()) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "begin_line": 1134,
    "end_line": 1142,
    "comment": "/** \n * Returns true if any type in the chain has an implicitCast annotation for the given property.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.checkDeclaredPropertyInheritance#1150",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.checkDeclaredPropertyInheritance(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.FunctionType, java.lang.String, com.google.javascript.rhino.JSDocInfo, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private void checkDeclaredPropertyInheritance(\n      NodeTraversal t, Node n, FunctionType ctorType, String propertyName,\n      JSDocInfo info, JSType propertyType) {\n    // If the supertype doesn\u0027t resolve correctly, we\u0027ve warned about this\n    // already.\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n      return;\n    }\n\n    FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026\n        superClass.getInstanceType().hasProperty(propertyName);\n    boolean superClassHasDeclaredProperty \u003d superClass !\u003d null \u0026\u0026\n        superClass.getInstanceType().isPropertyTypeDeclared(propertyName);\n\n    // For interface\n    boolean superInterfaceHasProperty \u003d false;\n    boolean superInterfaceHasDeclaredProperty \u003d false;\n    if (ctorType.isInterface()) {\n      for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {\n        superInterfaceHasProperty \u003d\n            superInterfaceHasProperty ||\n            interfaceType.hasProperty(propertyName);\n        superInterfaceHasDeclaredProperty \u003d\n            superInterfaceHasDeclaredProperty ||\n            interfaceType.isPropertyTypeDeclared(propertyName);\n      }\n    }\n    boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n\n    boolean foundInterfaceProperty \u003d false;\n    if (ctorType.isConstructor()) {\n      for (JSType implementedInterface :\n          ctorType.getAllImplementedInterfaces()) {\n        if (implementedInterface.isUnknownType() ||\n            implementedInterface.isEmptyType()) {\n          continue;\n        }\n        FunctionType interfaceType \u003d\n            implementedInterface.toObjectType().getConstructor();\n        Preconditions.checkNotNull(interfaceType);\n\n        boolean interfaceHasProperty \u003d\n            interfaceType.getPrototype().hasProperty(propertyName);\n        foundInterfaceProperty \u003d foundInterfaceProperty ||\n            interfaceHasProperty;\n        if (reportMissingOverride.isOn()\n            \u0026\u0026 !declaredOverride\n            \u0026\u0026 interfaceHasProperty) {\n          // @override not present, but the property does override an interface\n          // property\n          compiler.report(t.makeError(n, reportMissingOverride,\n              HIDDEN_INTERFACE_PROPERTY, propertyName,\n              interfaceType.getTopMostDefiningType(propertyName).toString()));\n        }\n      }\n    }\n\n    if (!declaredOverride\n        \u0026\u0026 !superClassHasProperty\n        \u0026\u0026 !superInterfaceHasProperty) {\n      // nothing to do here, it\u0027s just a plain new property\n      return;\n    }\n\n    ObjectType topInstanceType \u003d superClassHasDeclaredProperty ?\n        superClass.getTopMostDefiningType(propertyName) : null;\n    boolean declaredLocally \u003d\n        ctorType.isConstructor() \u0026\u0026\n        (ctorType.getPrototype().hasOwnProperty(propertyName) ||\n         ctorType.getInstanceType().hasOwnProperty(propertyName));\n    if (reportMissingOverride.isOn()\n        \u0026\u0026 !declaredOverride\n        \u0026\u0026 superClassHasDeclaredProperty\n        \u0026\u0026 declaredLocally) {\n      // @override not present, but the property does override a superclass\n      // property\n      compiler.report(t.makeError(n, reportMissingOverride,\n          HIDDEN_SUPERCLASS_PROPERTY, propertyName,\n          topInstanceType.toString()));\n    }\n\n    // @override is present and we have to check that it is ok\n    if (superClassHasDeclaredProperty) {\n      // there is a superclass implementation\n      JSType superClassPropType \u003d\n          superClass.getInstanceType().getPropertyType(propertyName);\n      if (!propertyType.isSubtype(superClassPropType)) {\n        compiler.report(\n            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                propertyName, topInstanceType.toString(),\n                superClassPropType.toString(), propertyType.toString()));\n      }\n    } else if (superInterfaceHasDeclaredProperty) {\n      // there is an super interface property\n      for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {\n        if (interfaceType.hasProperty(propertyName)) {\n          JSType superPropertyType \u003d\n              interfaceType.getPropertyType(propertyName);\n          if (!propertyType.isSubtype(superPropertyType)) {\n            topInstanceType \u003d interfaceType.getConstructor().\n                getTopMostDefiningType(propertyName);\n            compiler.report(\n                t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                    propertyName, topInstanceType.toString(),\n                    superPropertyType.toString(),\n                    propertyType.toString()));\n          }\n        }\n      }\n    } else if (!foundInterfaceProperty\n        \u0026\u0026 !superClassHasProperty\n        \u0026\u0026 !superInterfaceHasProperty) {\n      // there is no superclass nor interface implementation\n      compiler.report(\n          t.makeError(n, UNKNOWN_OVERRIDE,\n              propertyName, ctorType.getInstanceType().toString()));\n    }\n  }",
    "begin_line": 1150,
    "end_line": 1268,
    "comment": "/** \n * Given a constructor type and a property name, check that the property has the JSDoc annotation @override iff the property is declared on a superclass. Several checks regarding inheritance correctness are also performed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.hasUnknownOrEmptySupertype#1274",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.hasUnknownOrEmptySupertype(com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n    Preconditions.checkArgument(!ctor.isUnknownType());\n\n    // The type system should notice inheritance cycles on its own\n    // and break the cycle.\n    while (true) {\n      ObjectType maybeSuperInstanceType \u003d\n          ctor.getPrototype().getImplicitPrototype();\n      if (maybeSuperInstanceType \u003d\u003d null) {\n        return false;\n      }\n      if (maybeSuperInstanceType.isUnknownType() ||\n          maybeSuperInstanceType.isEmptyType()) {\n        return true;\n      }\n      ctor \u003d maybeSuperInstanceType.getConstructor();\n      if (ctor \u003d\u003d null) {\n        return false;\n      }\n      Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n    }\n  }",
    "begin_line": 1274,
    "end_line": 1296,
    "comment": "/** \n * Given a constructor or an interface type, find out whether the unknown type is a supertype of the current type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.visitInterfaceGetprop#1304",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.visitInterfaceGetprop(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private void visitInterfaceGetprop(NodeTraversal t, Node assign, Node object,\n      String property, Node lvalue, Node rvalue) {\n\n    JSType rvalueType \u003d getJSType(rvalue);\n\n    // Only 2 values are allowed for methods:\n    //    goog.abstractMethod\n    //    function () {};\n    // or for properties, no assignment such as:\n    //    InterfaceFoo.prototype.foobar;\n\n    String abstractMethodName \u003d\n        compiler.getCodingConvention().getAbstractMethodName();\n    if (!rvalueType.isFunctionType()) {\n      // This is bad i18n style but we don\u0027t localize our compiler errors.\n      String abstractMethodMessage \u003d (abstractMethodName !\u003d null)\n         ? \", or \" + abstractMethodName\n         : \"\";\n      compiler.report(\n          t.makeError(object, INVALID_INTERFACE_MEMBER_DECLARATION,\n              abstractMethodMessage));\n    }\n\n    if (assign.getLastChild().isFunction()\n        \u0026\u0026 !NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild())) {\n      compiler.report(\n          t.makeError(object, INTERFACE_FUNCTION_NOT_EMPTY,\n              abstractMethodName));\n    }\n  }",
    "begin_line": 1304,
    "end_line": 1333,
    "comment": "/** \n * Visits an ASSIGN node for cases such as \u003cpre\u003e interface.property2.property \u003d ...; \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.visitName#1344",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.visitName(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "boolean visitName(NodeTraversal t, Node n, Node parent) {\n    // At this stage, we need to determine whether this is a leaf\n    // node in an expression (which therefore needs to have a type\n    // assigned for it) versus some other decorative node that we\n    // can safely ignore.  Function names, arguments (children of LP nodes) and\n    // variable declarations are ignored.\n    // TODO(user): remove this short-circuiting in favor of a\n    // pre order traversal of the FUNCTION, CATCH, LP and VAR nodes.\n    int parentNodeType \u003d parent.getType();\n    if (parentNodeType \u003d\u003d Token.FUNCTION ||\n        parentNodeType \u003d\u003d Token.CATCH ||\n        parentNodeType \u003d\u003d Token.PARAM_LIST ||\n        parentNodeType \u003d\u003d Token.VAR) {\n      return false;\n    }\n\n    JSType type \u003d n.getJSType();\n    if (type \u003d\u003d null) {\n      type \u003d getNativeType(UNKNOWN_TYPE);\n      Var var \u003d t.getScope().getVar(n.getString());\n      if (var !\u003d null) {\n        JSType varType \u003d var.getType();\n        if (varType !\u003d null) {\n          type \u003d varType;\n        }\n      }\n    }\n    ensureTyped(t, n, type);\n    return true;\n  }",
    "begin_line": 1344,
    "end_line": 1373,
    "comment": "/** \n * Visits a NAME node.\n * @param t The node traversal object that supplies context, such as thescope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n * @param parent The parent of the node n.\n * @return whether the node is typeable or not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.visitGetProp#1383",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.visitGetProp(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    // obj.prop or obj.method()\n    // Lots of types can appear on the left, a call to a void function can\n    // never be on the left. getPropertyType will decide what is acceptable\n    // and what isn\u0027t.\n    Node property \u003d n.getLastChild();\n    Node objNode \u003d n.getFirstChild();\n    JSType childType \u003d getJSType(objNode);\n\n    if (childType.isDict()) {\n      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"\u0027.\u0027\", \"dict\");\n    } else if (validator.expectNotNullOrUndefined(t, n, childType,\n        \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n      checkPropertyAccess(childType, property.getString(), t, n);\n    }\n    ensureTyped(t, n);\n  }",
    "begin_line": 1383,
    "end_line": 1399,
    "comment": "/** \n * Visits a GETPROP node.\n * @param t The node traversal object that supplies context, such as thescope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n * @param parent The parent of \u003ccode\u003en\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.checkPropertyAccess#1408",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.checkPropertyAccess(com.google.javascript.rhino.jstype.JSType, java.lang.String, com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void checkPropertyAccess(JSType childType, String propName,\n      NodeTraversal t, Node n) {\n    // If the property type is unknown, check the object type to see if it\n    // can ever be defined. We explicitly exclude CHECKED_UNKNOWN (for\n    // properties where we\u0027ve checked that it exists, or for properties on\n    // objects that aren\u0027t in this binary).\n    JSType propType \u003d getJSType(n);\n    if (propType.isEquivalentTo(typeRegistry.getNativeType(UNKNOWN_TYPE))) {\n      childType \u003d childType.autobox();\n      ObjectType objectType \u003d ObjectType.cast(childType);\n      if (objectType !\u003d null) {\n        // We special-case object types so that checks on enums can be\n        // much stricter, and so that we can use hasProperty (which is much\n        // faster in most cases).\n        if (!objectType.hasProperty(propName) ||\n            objectType.isEquivalentTo(\n                typeRegistry.getNativeType(UNKNOWN_TYPE))) {\n          if (objectType instanceof EnumType) {\n            report(t, n, INEXISTENT_ENUM_ELEMENT, propName);\n          } else {\n            checkPropertyAccessHelper(objectType, propName, t, n);\n          }\n        }\n\n      } else {\n        checkPropertyAccessHelper(childType, propName, t, n);\n      }\n    }\n  }",
    "begin_line": 1408,
    "end_line": 1436,
    "comment": "/** \n * Emit a warning if we can prove that a property cannot possibly be defined on an object. Note the difference between JS and a strictly statically typed language: we\u0027re checking if the property *cannot be defined*, whereas a java compiler would check if the property *can be undefined*.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.checkPropertyAccessHelper#1438",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.checkPropertyAccessHelper(com.google.javascript.rhino.jstype.JSType, java.lang.String, com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void checkPropertyAccessHelper(JSType objectType, String propName,\n      NodeTraversal t, Node n) {\n    if (!objectType.isEmptyType() \u0026\u0026\n        reportMissingProperties \u0026\u0026 !isPropertyTest(n)) {\n      if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {\n        report(t, n, INEXISTENT_PROPERTY, propName,\n            validator.getReadableJSTypeName(n.getFirstChild(), true));\n      }\n    }\n  }",
    "begin_line": 1438,
    "end_line": 1447,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.isPropertyTest#1455",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.isPropertyTest(com.google.javascript.rhino.Node)",
    "snippet": "private boolean isPropertyTest(Node getProp) {\n    Node parent \u003d getProp.getParent();\n    switch (parent.getType()) {\n      case Token.CALL:\n        return parent.getFirstChild() !\u003d getProp \u0026\u0026\n            compiler.getCodingConvention().isPropertyTestFunction(parent);\n\n      case Token.IF:\n      case Token.WHILE:\n      case Token.DO:\n      case Token.FOR:\n        return NodeUtil.getConditionExpression(parent) \u003d\u003d getProp;\n\n      case Token.INSTANCEOF:\n      case Token.TYPEOF:\n        return true;\n\n      case Token.AND:\n      case Token.HOOK:\n        return parent.getFirstChild() \u003d\u003d getProp;\n\n      case Token.NOT:\n        return parent.getParent().isOr() \u0026\u0026\n            parent.getParent().getFirstChild() \u003d\u003d parent;\n    }\n    return false;\n  }",
    "begin_line": 1455,
    "end_line": 1481,
    "comment": "/** \n * Determines whether this node is testing for the existence of a property. If true, we will not emit warnings about a missing property.\n * @param getProp The GETPROP being tested.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.visitGetElem#1490",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.visitGetElem(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void visitGetElem(NodeTraversal t, Node n) {\n    validator.expectIndexMatch(\n        t, n, getJSType(n.getFirstChild()), getJSType(n.getLastChild()));\n    ensureTyped(t, n);\n  }",
    "begin_line": 1490,
    "end_line": 1494,
    "comment": "/** \n * Visits a GETELEM node.\n * @param t The node traversal object that supplies context, such as thescope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.visitVar#1503",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.visitVar(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void visitVar(NodeTraversal t, Node n) {\n    // TODO(nicksantos): Fix this so that the doc info always shows up\n    // on the NAME node. We probably want to wait for the parser\n    // merge to fix this.\n    JSDocInfo varInfo \u003d n.hasOneChild() ? n.getJSDocInfo() : null;\n    for (Node name : n.children()) {\n      Node value \u003d name.getFirstChild();\n      // A null var would indicate a bug in the scope creation logic.\n      Var var \u003d t.getScope().getVar(name.getString());\n\n      if (value !\u003d null) {\n        JSType valueType \u003d getJSType(value);\n        JSType nameType \u003d var.getType();\n        nameType \u003d (nameType \u003d\u003d null) ? getNativeType(UNKNOWN_TYPE) : nameType;\n\n        JSDocInfo info \u003d name.getJSDocInfo();\n        if (info \u003d\u003d null) {\n          info \u003d varInfo;\n        }\n\n        checkEnumAlias(t, info, value);\n        if (var.isTypeInferred()) {\n          ensureTyped(t, name, valueType);\n        } else {\n          validator.expectCanAssignTo(\n              t, value, valueType, nameType, \"initializing variable\");\n        }\n      }\n    }\n  }",
    "begin_line": 1503,
    "end_line": 1532,
    "comment": "/** \n * Visits a VAR node.\n * @param t The node traversal object that supplies context, such as thescope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.visitNew#1537",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.visitNew(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void visitNew(NodeTraversal t, Node n) {\n    Node constructor \u003d n.getFirstChild();\n    JSType type \u003d getJSType(constructor).restrictByNotNullOrUndefined();\n    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n      FunctionType fnType \u003d type.toMaybeFunctionType();\n      if (fnType !\u003d null) {\n        visitParameterList(t, n, fnType);\n        ensureTyped(t, n, fnType.getInstanceType());\n      } else {\n        ensureTyped(t, n);\n      }\n    } else {\n      report(t, n, NOT_A_CONSTRUCTOR);\n      ensureTyped(t, n);\n    }\n  }",
    "begin_line": 1537,
    "end_line": 1552,
    "comment": "/** \n * Visits a NEW node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.checkInterfaceConflictProperties#1566",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.checkInterfaceConflictProperties(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, java.lang.String, java.util.HashMap\u003cjava.lang.String,com.google.javascript.rhino.jstype.ObjectType\u003e, java.util.HashMap\u003cjava.lang.String,com.google.javascript.rhino.jstype.ObjectType\u003e, com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap\u003cString, ObjectType\u003e properties,\n      HashMap\u003cString, ObjectType\u003e currentProperties,\n      ObjectType interfaceType) {\n    ObjectType implicitProto \u003d interfaceType.getImplicitPrototype();\n    Set\u003cString\u003e currentPropertyNames;\n      // This can be the case if interfaceType is proxy to a non-existent\n      // object (which is a bad type annotation, but shouldn\u0027t crash).\n      currentPropertyNames \u003d implicitProto.getOwnPropertyNames();\n    for (String name : currentPropertyNames) {\n      ObjectType oType \u003d properties.get(name);\n      if (oType !\u003d null) {\n        if (!interfaceType.getPropertyType(name).isEquivalentTo(\n            oType.getPropertyType(name))) {\n          compiler.report(\n              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                  functionName, name, oType.toString(),\n                  interfaceType.toString()));\n        }\n      }\n      currentProperties.put(name, interfaceType);\n    }\n    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n      checkInterfaceConflictProperties(t, n, functionName, properties,\n          currentProperties, iType);\n    }\n  }",
    "begin_line": 1566,
    "end_line": 1592,
    "comment": "/** \n * Check whether there\u0027s any property conflict for for a particular super interface\n * @param t The node traversal object that supplies context\n * @param n The node being visited\n * @param functionName The function name being checked\n * @param properties The property names in the super interfaces that havebeen visited\n * @param currentProperties The property names in the super interfacethat have been visited\n * @param interfaceType The super interface that is being visited\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.visitFunction#1601",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.visitFunction(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void visitFunction(NodeTraversal t, Node n) {\n    FunctionType functionType \u003d JSType.toMaybeFunctionType(n.getJSType());\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isConstructor()) {\n      FunctionType baseConstructor \u003d functionType.getSuperClassConstructor();\n      if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026\n          baseConstructor !\u003d null \u0026\u0026\n          baseConstructor.isInterface()) {\n        compiler.report(\n            t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                        \"constructor\", functionPrivateName));\n      } else {\n        if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE)) {\n          ObjectType proto \u003d functionType.getPrototype();\n          if (functionType.makesStructs() \u0026\u0026 !proto.isStruct()) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                                        \"struct\", functionPrivateName));\n          } else if (functionType.makesDicts() \u0026\u0026 !proto.isDict()) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                                        \"dict\", functionPrivateName));\n          }\n        }\n        // All interfaces are properly implemented by a class\n        for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n          boolean badImplementedType \u003d false;\n          ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n          if (baseInterfaceObj !\u003d null) {\n            FunctionType interfaceConstructor \u003d\n              baseInterfaceObj.getConstructor();\n            if (interfaceConstructor !\u003d null \u0026\u0026\n                !interfaceConstructor.isInterface()) {\n              badImplementedType \u003d true;\n            }\n          } else {\n            badImplementedType \u003d true;\n          }\n          if (badImplementedType) {\n            report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n          }\n        }\n        // check properties\n        validator.expectAllInterfaceProperties(t, n, functionType);\n      }\n    } else if (functionType.isInterface()) {\n      // Interface must extend only interfaces\n      for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n        if (extInterface.getConstructor() !\u003d null\n            \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n          compiler.report(\n              t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                          \"interface\", functionPrivateName));\n        }\n      }\n\n      // Check whether the extended interfaces have any conflicts\n      if (functionType.getExtendedInterfacesCount() \u003e 1) {\n        // Only check when extending more than one interfaces\n        HashMap\u003cString, ObjectType\u003e properties\n            \u003d new HashMap\u003cString, ObjectType\u003e();\n        HashMap\u003cString, ObjectType\u003e currentProperties\n            \u003d new HashMap\u003cString, ObjectType\u003e();\n        for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n          currentProperties.clear();\n          checkInterfaceConflictProperties(t, n, functionPrivateName,\n              properties, currentProperties, interfaceType);\n          properties.putAll(currentProperties);\n        }\n      }\n    }\n  }",
    "begin_line": 1601,
    "end_line": 1670,
    "comment": "/** \n * Visits a  {@link Token#FUNCTION} node.\n * @param t The node traversal object that supplies context, such as thescope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.visitCall#1679",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.visitCall(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void visitCall(NodeTraversal t, Node n) {\n    Node child \u003d n.getFirstChild();\n    JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType.isFunctionType()) {\n      FunctionType functionType \u003d childType.toMaybeFunctionType();\n\n      boolean isExtern \u003d false;\n      JSDocInfo functionJSDocInfo \u003d functionType.getJSDocInfo();\n      if( functionJSDocInfo !\u003d null  \u0026\u0026\n          functionJSDocInfo.getAssociatedNode() !\u003d null) {\n        isExtern \u003d functionJSDocInfo.getAssociatedNode().isFromExterns();\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() \u0026\u0026\n          !functionType.isNativeObjectType() \u0026\u0026\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit \u0027this\u0027 types must be called in a GETPROP\n      // or GETELEM.\n      if (functionType.isOrdinaryFunction() \u0026\u0026\n          !functionType.getTypeOfThis().isUnknownType() \u0026\u0026\n          !(functionType.getTypeOfThis().toObjectType() !\u003d null \u0026\u0026\n          functionType.getTypeOfThis().toObjectType().isNativeObjectType()) \u0026\u0026\n          !(child.isGetElem() ||\n            child.isGetProp())) {\n        report(t, n, EXPECTED_THIS_TYPE, functionType.toString());\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }",
    "begin_line": 1679,
    "end_line": 1732,
    "comment": "/** \n * Visits a CALL node.\n * @param t The node traversal object that supplies context, such as thescope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.visitParameterList#1737",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.visitParameterList(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator\u003cNode\u003e arguments \u003d call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator\u003cNode\u003e parameters \u003d functionType.getParameters().iterator();\n    int ordinal \u003d 0;\n    Node parameter \u003d null;\n    Node argument \u003d null;\n    while (arguments.hasNext() \u0026\u0026\n           (parameters.hasNext() ||\n            parameter !\u003d null \u0026\u0026 parameter.isVarArgs())) {\n      // If there are no parameters left in the list, then the while loop\n      // above implies that this must be a var_args function.\n      if (parameters.hasNext()) {\n        parameter \u003d parameters.next();\n      }\n      argument \u003d arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs \u003d call.getChildCount() - 1;\n    int minArgs \u003d functionType.getMinArguments();\n    int maxArgs \u003d functionType.getMaxArguments();\n    if (minArgs \u003e numArgs || maxArgs \u003c numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs !\u003d Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "begin_line": 1737,
    "end_line": 1771,
    "comment": "/** \n * Visits the parameters of a CALL or a NEW node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.visitReturn#1780",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.visitReturn(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void visitReturn(NodeTraversal t, Node n) {\n    JSType jsType \u003d getJSType(t.getEnclosingFunction());\n\n    if (jsType.isFunctionType()) {\n      FunctionType functionType \u003d jsType.toMaybeFunctionType();\n\n      JSType returnType \u003d functionType.getReturnType();\n\n      // if no return type is specified, undefined must be returned\n      // (it\u0027s a void function)\n      if (returnType \u003d\u003d null) {\n        returnType \u003d getNativeType(VOID_TYPE);\n      }\n\n      // fetching the returned value\u0027s type\n      Node valueNode \u003d n.getFirstChild();\n      JSType actualReturnType;\n      if (valueNode \u003d\u003d null) {\n        actualReturnType \u003d getNativeType(VOID_TYPE);\n        valueNode \u003d n;\n      } else {\n        actualReturnType \u003d getJSType(valueNode);\n      }\n\n      // verifying\n      validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType,\n          \"inconsistent return type\");\n    }\n  }",
    "begin_line": 1780,
    "end_line": 1808,
    "comment": "/** \n * Visits a RETURN node.\n * @param t The node traversal object that supplies context, such as thescope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.visitBinaryOperator#1820",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.visitBinaryOperator(int, com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void visitBinaryOperator(int op, NodeTraversal t, Node n) {\n    Node left \u003d n.getFirstChild();\n    JSType leftType \u003d getJSType(left);\n    Node right \u003d n.getLastChild();\n    JSType rightType \u003d getJSType(right);\n    switch (op) {\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n        if (!leftType.matchesInt32Context()) {\n          report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());\n        }\n        if (!rightType.matchesUint32Context()) {\n          report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());\n        }\n        break;\n\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.SUB:\n        validator.expectNumber(t, left, leftType, \"left operand\");\n        validator.expectNumber(t, right, rightType, \"right operand\");\n        break;\n\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n        validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");\n        validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(op));\n    }\n    ensureTyped(t, n);\n  }",
    "begin_line": 1820,
    "end_line": 1874,
    "comment": "/** \n * This function unifies the type checking involved in the core binary operators and the corresponding assignment operators.  The representation used internally is such that common code can handle both kinds of operators easily.\n * @param op The operator.\n * @param t The traversal object, needed to report errors.\n * @param n The node being checked.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.checkEnumAlias#1891",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.checkEnumAlias(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.JSDocInfo, com.google.javascript.rhino.Node)",
    "snippet": "private void checkEnumAlias(\n      NodeTraversal t, JSDocInfo declInfo, Node value) {\n    if (declInfo \u003d\u003d null || !declInfo.hasEnumParameterType()) {\n      return;\n    }\n\n    JSType valueType \u003d getJSType(value);\n    if (!valueType.isEnumType()) {\n      return;\n    }\n\n    EnumType valueEnumType \u003d valueType.toMaybeEnumType();\n    JSType valueEnumPrimitiveType \u003d\n        valueEnumType.getElementsType().getPrimitiveType();\n    validator.expectCanAssignTo(t, value, valueEnumPrimitiveType,\n        declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry),\n        \"incompatible enum element types\");\n  }",
    "begin_line": 1891,
    "end_line": 1908,
    "comment": "/** \n * \u003cp\u003eChecks enum aliases. \u003cp\u003eWe verify that the enum element type of the enum used for initialization is a subtype of the enum element type of the enum the value is being copied in.\u003c/p\u003e \u003cp\u003eExample:\u003c/p\u003e \u003cpre\u003evar myEnum \u003d myOtherEnum;\u003c/pre\u003e \u003cp\u003eEnum aliases are irregular, so we need special code for this :(\u003c/p\u003e\n * @param value the value used for initialization of the enum\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.getJSType#1914",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.getJSType(com.google.javascript.rhino.Node)",
    "snippet": "private JSType getJSType(Node n) {\n    JSType jsType \u003d n.getJSType();\n    if (jsType \u003d\u003d null) {\n      // TODO(nicksantos): This branch indicates a compiler bug, not worthy of\n      // halting the compilation but we should log this and analyze to track\n      // down why it happens. This is not critical and will be resolved over\n      // time as the type checker is extended.\n      return getNativeType(UNKNOWN_TYPE);\n    } else {\n      return jsType;\n    }\n  }",
    "begin_line": 1914,
    "end_line": 1925,
    "comment": "/** \n * This method gets the JSType from the Node argument and verifies that it is present.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.ensureTyped#1937",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.ensureTyped(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void ensureTyped(NodeTraversal t, Node n) {\n    ensureTyped(t, n, getNativeType(UNKNOWN_TYPE));\n  }",
    "begin_line": 1937,
    "end_line": 1939,
    "comment": "/** \n * Ensure that the given node has a type. If it does not have one, attach the UNKNOWN_TYPE.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.ensureTyped#1941",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.ensureTyped(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSTypeNative)",
    "snippet": "private void ensureTyped(NodeTraversal t, Node n, JSTypeNative type) {\n    ensureTyped(t, n, getNativeType(type));\n  }",
    "begin_line": 1941,
    "end_line": 1943,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.ensureTyped#1963",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.ensureTyped(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private void ensureTyped(NodeTraversal t, Node n, JSType type) {\n    // Make sure FUNCTION nodes always get function type.\n    Preconditions.checkState(!n.isFunction() ||\n            type.isFunctionType() ||\n            type.isUnknownType());\n    JSDocInfo info \u003d n.getJSDocInfo();\n    if (info !\u003d null) {\n      if (info.hasType()) {\n        // TODO(johnlenz): Change this so that we only look for casts on CAST\n        // nodes one the misplaced type annotation warning is on by default and\n        // people have been given a chance to fix them.  As is, this is here\n        // simply for legacy casts.\n        JSType infoType \u003d info.getType().evaluate(t.getScope(), typeRegistry);\n        validator.expectCanCast(t, n, infoType, type);\n        type \u003d infoType;\n      }\n\n      if (info.isImplicitCast() \u0026\u0026 !inExterns) {\n        String propName \u003d n.isGetProp() ?\n            n.getLastChild().getString() : \"(missing)\";\n        compiler.report(\n            t.makeError(n, ILLEGAL_IMPLICIT_CAST, propName));\n      }\n    }\n\n    if (n.getJSType() \u003d\u003d null) {\n      n.setJSType(type);\n    }\n  }",
    "begin_line": 1963,
    "end_line": 1991,
    "comment": "/** \n * Enforces type casts, and ensures the node is typed. A cast in the way that we use it in JSDoc annotations never alters the generated code and therefore never can induce any runtime operation. What this means is that a \u0027cast\u0027 is really just a compile time constraint on the underlying value. In the future, we may add support for run-time casts for compiled tests. To ensure some shred of sanity, we enforce the notion that the type you are casting to may only meaningfully be a narrower type than the underlying declared type. We also invalidate optimizations on bad type casts.\n * @param t The traversal object needed to report errors.\n * @param n The node getting a type assigned to it.\n * @param type The type to be assigned.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.getTypedPercent#1997",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.getTypedPercent()",
    "snippet": "double getTypedPercent() {\n    int total \u003d nullCount + unknownCount + typedCount;\n    return (total \u003d\u003d 0) ? 0.0 : (100.0 * typedCount) / total;\n  }",
    "begin_line": 1997,
    "end_line": 2000,
    "comment": "/** \n * Returns the percentage of nodes typed by the type checker.\n * @return a number between 0.0 and 100.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeCheck.getNativeType#2002",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeCheck.java",
    "class_name": "com.google.javascript.jscomp.TypeCheck",
    "signature": "com.google.javascript.jscomp.TypeCheck.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
    "snippet": "private JSType getNativeType(JSTypeNative typeId) {\n    return typeRegistry.getNativeType(typeId);\n  }",
    "begin_line": 2002,
    "end_line": 2004,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.TypeInference#84",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.TypeInference(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.ControlFlowGraph\u003ccom.google.javascript.rhino.Node\u003e, com.google.javascript.jscomp.type.ReverseAbstractInterpreter, com.google.javascript.jscomp.Scope, java.util.Map\u003cjava.lang.String,com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec\u003e)",
    "snippet": " TypeInference(AbstractCompiler compiler, ControlFlowGraph\u003cNode\u003e cfg,\n                ReverseAbstractInterpreter reverseInterpreter,\n                Scope functionScope,\n                Map\u003cString, AssertionFunctionSpec\u003e assertionFunctionsMap) {\n    super(cfg, new LinkedFlowScope.FlowScopeJoinOp());\n    this.compiler \u003d compiler;\n    this.registry \u003d compiler.getTypeRegistry();\n    this.reverseInterpreter \u003d reverseInterpreter;\n    this.unknownType \u003d registry.getNativeObjectType(UNKNOWN_TYPE);\n\n    this.syntacticScope \u003d functionScope;\n    inferArguments(functionScope);\n\n    this.functionScope \u003d LinkedFlowScope.createEntryLattice(functionScope);\n    this.assertionFunctionsMap \u003d assertionFunctionsMap;\n\n    // For each local variable declared with the VAR keyword, the entry\n    // type is VOID.\n    Iterator\u003cVar\u003e varIt \u003d\n        functionScope.getDeclarativelyUnboundVarsWithoutTypes();\n    while (varIt.hasNext()) {\n      Var var \u003d varIt.next();\n      if (isUnflowable(var)) {\n        continue;\n      }\n\n      this.functionScope.inferSlotType(\n          var.getName(), getNativeType(VOID_TYPE));\n    }\n\n    this.bottomScope \u003d LinkedFlowScope.createEntryLattice(\n        Scope.createLatticeBottom(functionScope.getRootNode()));\n  }",
    "begin_line": 84,
    "end_line": 116,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.inferArguments#121",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.inferArguments(com.google.javascript.jscomp.Scope)",
    "snippet": "private void inferArguments(Scope functionScope) {\n    Node functionNode \u003d functionScope.getRootNode();\n    Node astParameters \u003d functionNode.getFirstChild().getNext();\n    Node iifeArgumentNode \u003d null;\n\n    if (NodeUtil.isCallOrNewTarget(functionNode)) {\n      iifeArgumentNode \u003d functionNode.getNext();\n    }\n\n    FunctionType functionType \u003d\n        JSType.toMaybeFunctionType(functionNode.getJSType());\n    if (functionType !\u003d null) {\n      Node parameterTypes \u003d functionType.getParametersNode();\n      if (parameterTypes !\u003d null) {\n        Node parameterTypeNode \u003d parameterTypes.getFirstChild();\n        for (Node astParameter : astParameters.children()) {\n          Var var \u003d functionScope.getVar(astParameter.getString());\n          Preconditions.checkNotNull(var);\n          if (var.isTypeInferred() \u0026\u0026\n              var.getType() \u003d\u003d unknownType) {\n            JSType newType \u003d null;\n\n            if (iifeArgumentNode !\u003d null) {\n              newType \u003d iifeArgumentNode.getJSType();\n            } else if (parameterTypeNode !\u003d null) {\n              newType \u003d parameterTypeNode.getJSType();\n            }\n\n            if (newType !\u003d null) {\n              var.setType(newType);\n              astParameter.setJSType(newType);\n            }\n          }\n\n          if (parameterTypeNode !\u003d null) {\n            parameterTypeNode \u003d parameterTypeNode.getNext();\n          }\n          if (iifeArgumentNode !\u003d null) {\n            iifeArgumentNode \u003d iifeArgumentNode.getNext();\n          }\n        }\n      }\n    }\n  }",
    "begin_line": 121,
    "end_line": 164,
    "comment": "/** \n * Infers all of a function\u0027s arguments if their types aren\u0027t declared.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.createInitialEstimateLattice#167",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.createInitialEstimateLattice()",
    "snippet": "@Override\n  FlowScope createInitialEstimateLattice() {\n    return bottomScope;\n  }",
    "begin_line": 167,
    "end_line": 169,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.createEntryLattice#172",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.createEntryLattice()",
    "snippet": "@Override\n  FlowScope createEntryLattice() {\n    return functionScope;\n  }",
    "begin_line": 172,
    "end_line": 174,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.flowThrough#177",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.flowThrough(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "@Override\n  FlowScope flowThrough(Node n, FlowScope input) {\n    // If we have not walked a path from \u003centry\u003e to \u003cn\u003e, then we don\u0027t\n    // want to infer anything about this scope.\n    if (input \u003d\u003d bottomScope) {\n      return input;\n    }\n\n    FlowScope output \u003d input.createChildFlowScope();\n    output \u003d traverse(n, output);\n    return output;\n  }",
    "begin_line": 177,
    "end_line": 187,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.branchedFlowThrough#191",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.branchedFlowThrough(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "@Override\n  @SuppressWarnings(\"fallthrough\")\n  List\u003cFlowScope\u003e branchedFlowThrough(Node source, FlowScope input) {\n    // NOTE(nicksantos): Right now, we just treat ON_EX edges like UNCOND\n    // edges. If we wanted to be perfect, we\u0027d actually JOIN all the out\n    // lattices of this flow with the in lattice, and then make that the out\n    // lattice for the ON_EX edge. But it\u0027s probably to expensive to be\n    // worthwhile.\n    FlowScope output \u003d flowThrough(source, input);\n    Node condition \u003d null;\n    FlowScope conditionFlowScope \u003d null;\n    BooleanOutcomePair conditionOutcomes \u003d null;\n\n    List\u003cDiGraphEdge\u003cNode, Branch\u003e\u003e branchEdges \u003d getCfg().getOutEdges(source);\n    List\u003cFlowScope\u003e result \u003d Lists.newArrayListWithCapacity(branchEdges.size());\n    for (DiGraphEdge\u003cNode, Branch\u003e branchEdge : branchEdges) {\n      Branch branch \u003d branchEdge.getValue();\n      FlowScope newScope \u003d output;\n\n      switch (branch) {\n        case ON_TRUE:\n          if (NodeUtil.isForIn(source)) {\n            // item is assigned a property name, so its type should be string.\n            Node item \u003d source.getFirstChild();\n            Node obj \u003d item.getNext();\n\n            FlowScope informed \u003d traverse(obj, output.createChildFlowScope());\n\n            if (item.isVar()) {\n              item \u003d item.getFirstChild();\n            }\n            if (item.isName()) {\n              JSType iterKeyType \u003d getNativeType(STRING_TYPE);\n              ObjectType objType \u003d getJSType(obj).dereference();\n              JSType objIndexType \u003d objType \u003d\u003d null ?\n                  null : objType.getIndexType();\n              if (objIndexType !\u003d null \u0026\u0026 !objIndexType.isUnknownType()) {\n                JSType narrowedKeyType \u003d\n                    iterKeyType.getGreatestSubtype(objIndexType);\n                if (!narrowedKeyType.isEmptyType()) {\n                  iterKeyType \u003d narrowedKeyType;\n                }\n              }\n              redeclareSimpleVar(informed, item, iterKeyType);\n            }\n            newScope \u003d informed;\n            break;\n          }\n\n          // FALL THROUGH\n\n        case ON_FALSE:\n          if (condition \u003d\u003d null) {\n            condition \u003d NodeUtil.getConditionExpression(source);\n            if (condition \u003d\u003d null \u0026\u0026 source.isCase()) {\n              condition \u003d source;\n\n              // conditionFlowScope is cached from previous iterations\n              // of the loop.\n              if (conditionFlowScope \u003d\u003d null) {\n                conditionFlowScope \u003d traverse(\n                    condition.getFirstChild(), output.createChildFlowScope());\n              }\n            }\n          }\n\n          if (condition !\u003d null) {\n            if (condition.isAnd() ||\n                condition.isOr()) {\n              // When handling the short-circuiting binary operators,\n              // the outcome scope on true can be different than the outcome\n              // scope on false.\n              //\n              // TODO(nicksantos): The \"right\" way to do this is to\n              // carry the known outcome all the way through the\n              // recursive traversal, so that we can construct a\n              // different flow scope based on the outcome. However,\n              // this would require a bunch of code and a bunch of\n              // extra computation for an edge case. This seems to be\n              // a \"good enough\" approximation.\n\n              // conditionOutcomes is cached from previous iterations\n              // of the loop.\n              if (conditionOutcomes \u003d\u003d null) {\n                conditionOutcomes \u003d condition.isAnd() ?\n                    traverseAnd(condition, output.createChildFlowScope()) :\n                    traverseOr(condition, output.createChildFlowScope());\n              }\n              newScope \u003d\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition,\n                      conditionOutcomes.getOutcomeFlowScope(\n                          condition.getType(), branch \u003d\u003d Branch.ON_TRUE),\n                      branch \u003d\u003d Branch.ON_TRUE);\n            } else {\n              // conditionFlowScope is cached from previous iterations\n              // of the loop.\n              if (conditionFlowScope \u003d\u003d null) {\n                conditionFlowScope \u003d\n                    traverse(condition, output.createChildFlowScope());\n              }\n              newScope \u003d\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition, conditionFlowScope, branch \u003d\u003d Branch.ON_TRUE);\n            }\n          }\n          break;\n      }\n\n      result.add(newScope.optimize());\n    }\n    return result;\n  }",
    "begin_line": 191,
    "end_line": 301,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.traverse#303",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.traverse(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private FlowScope traverse(Node n, FlowScope scope) {\n    switch (n.getType()) {\n      case Token.ASSIGN:\n        scope \u003d traverseAssign(n, scope);\n        break;\n\n      case Token.NAME:\n        scope \u003d traverseName(n, scope);\n        break;\n\n      case Token.GETPROP:\n        scope \u003d traverseGetProp(n, scope);\n        break;\n\n      case Token.AND:\n        scope \u003d traverseAnd(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();\n        break;\n\n      case Token.OR:\n        scope \u003d traverseOr(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();\n        break;\n\n      case Token.HOOK:\n        scope \u003d traverseHook(n, scope);\n        break;\n\n      case Token.OBJECTLIT:\n        scope \u003d traverseObjectLiteral(n, scope);\n        break;\n\n      case Token.CALL:\n        scope \u003d traverseCall(n, scope);\n        break;\n\n      case Token.NEW:\n        scope \u003d traverseNew(n, scope);\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        scope \u003d traverseAdd(n, scope);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        scope \u003d traverse(n.getFirstChild(), scope);  // Find types.\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.ARRAYLIT:\n        scope \u003d traverseArrayLiteral(n, scope);\n        break;\n\n      case Token.THIS:\n        n.setJSType(scope.getTypeOfThis());\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n      case Token.MUL:\n      case Token.SUB:\n      case Token.DEC:\n      case Token.INC:\n      case Token.BITNOT:\n        scope \u003d traverseChildren(n, scope);\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.PARAM_LIST:\n        scope \u003d traverse(n.getFirstChild(), scope);\n        n.setJSType(getJSType(n.getFirstChild()));\n        break;\n\n      case Token.COMMA:\n        scope \u003d traverseChildren(n, scope);\n        n.setJSType(getJSType(n.getLastChild()));\n        break;\n\n      case Token.TYPEOF:\n        scope \u003d traverseChildren(n, scope);\n        n.setJSType(getNativeType(STRING_TYPE));\n        break;\n\n      case Token.DELPROP:\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n      case Token.NOT:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.INSTANCEOF:\n      case Token.IN:\n        scope \u003d traverseChildren(n, scope);\n        n.setJSType(getNativeType(BOOLEAN_TYPE));\n        break;\n\n      case Token.GETELEM:\n        scope \u003d traverseGetElem(n, scope);\n        break;\n\n      case Token.EXPR_RESULT:\n        scope \u003d traverseChildren(n, scope);\n        if (n.getFirstChild().isGetProp()) {\n          ensurePropertyDeclared(n.getFirstChild());\n        }\n        break;\n\n      case Token.SWITCH:\n        scope \u003d traverse(n.getFirstChild(), scope);\n        break;\n\n      case Token.RETURN:\n        scope \u003d traverseReturn(n, scope);\n        break;\n\n      case Token.VAR:\n      case Token.THROW:\n        scope \u003d traverseChildren(n, scope);\n        break;\n\n      case Token.CATCH:\n        scope \u003d traverseCatch(n, scope);\n        break;\n\n      case Token.CAST:\n        scope \u003d traverseChildren(n, scope);\n        break;\n    }\n\n    // TODO(johnlenz): remove this after the CAST node change has shaken out.\n    if (!n.isFunction()) {\n      JSDocInfo info \u003d n.getJSDocInfo();\n      if (info !\u003d null \u0026\u0026 info.hasType()) {\n        JSType castType \u003d info.getType().evaluate(syntacticScope, registry);\n\n        // A stubbed type declaration on a qualified name should take\n        // effect for all subsequent accesses of that name,\n        // so treat it the same as an assign to that name.\n        if (n.isQualifiedName() \u0026\u0026\n            n.getParent().isExprResult()) {\n          updateScopeForTypeChange(scope, n, n.getJSType(), castType);\n        }\n\n        n.setJSType(castType);\n      }\n    }\n\n    return scope;\n  }",
    "begin_line": 303,
    "end_line": 472,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.traverseReturn#477",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.traverseReturn(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private FlowScope traverseReturn(Node n, FlowScope scope) {\n    scope \u003d traverseChildren(n, scope);\n\n    Node retValue \u003d n.getFirstChild();\n    if (retValue !\u003d null) {\n      JSType type \u003d functionScope.getRootNode().getJSType();\n      if (type !\u003d null) {\n        FunctionType fnType \u003d type.toMaybeFunctionType();\n        if (fnType !\u003d null) {\n          inferPropertyTypesToMatchConstraint(\n              retValue.getJSType(), fnType.getReturnType());\n        }\n      }\n    }\n    return scope;\n  }",
    "begin_line": 477,
    "end_line": 492,
    "comment": "/** \n * Traverse a return value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.traverseCatch#498",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.traverseCatch(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private FlowScope traverseCatch(Node catchNode, FlowScope scope) {\n    Node name \u003d catchNode.getFirstChild();\n    String varName \u003d name.getString();\n    JSType type;\n    // If the catch expression name was declared in the catch use that type,\n    // otherwise use \"unknown\".\n    JSDocInfo info \u003d name.getJSDocInfo();\n    if (info !\u003d null \u0026\u0026 info.hasType()) {\n      type \u003d info.getType().evaluate(syntacticScope, registry);\n    } else {\n      type \u003d getNativeType(JSTypeNative.UNKNOWN_TYPE);\n    }\n    redeclareSimpleVar(scope, name, type);\n    name.setJSType(type);\n    return scope;\n  }",
    "begin_line": 498,
    "end_line": 513,
    "comment": "/** \n * Any value can be thrown, so it\u0027s really impossible to determine the type of a CATCH param. Treat it as the UNKNOWN type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.traverseAssign#515",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.traverseAssign(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private FlowScope traverseAssign(Node n, FlowScope scope) {\n    Node left \u003d n.getFirstChild();\n    Node right \u003d n.getLastChild();\n    scope \u003d traverseChildren(n, scope);\n\n    JSType leftType \u003d left.getJSType();\n    JSType rightType \u003d getJSType(right);\n    n.setJSType(rightType);\n\n    updateScopeForTypeChange(scope, left, leftType, rightType);\n    return scope;\n  }",
    "begin_line": 515,
    "end_line": 526,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.updateScopeForTypeChange#532",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private void updateScopeForTypeChange(\n      FlowScope scope, Node left, JSType leftType, JSType resultType) {\n    Preconditions.checkNotNull(resultType);\n    switch (left.getType()) {\n      case Token.NAME:\n        String varName \u003d left.getString();\n        Var var \u003d syntacticScope.getVar(varName);\n\n        // When looking at VAR initializers for declared VARs, we trust\n        // the declared type over the type it\u0027s being initialized to.\n        // This has two purposes:\n        // 1) We avoid re-declaring declared variables so that built-in\n        //    types defined in externs are not redeclared.\n        // 2) When there\u0027s a lexical closure like\n        //    /** @type {?string} */ var x \u003d null;\n        //    function f() { x \u003d \u0027xyz\u0027; }\n        //    the inference will ignore the lexical closure,\n        //    which is just wrong. This bug needs to be fixed eventually.\n        boolean isVarDeclaration \u003d left.hasChildren();\n        if (!isVarDeclaration || var \u003d\u003d null || var.isTypeInferred()) {\n          redeclareSimpleVar(scope, left, resultType);\n        }\n        left.setJSType(isVarDeclaration || leftType \u003d\u003d null ?\n            resultType : null);\n\n        if (var !\u003d null \u0026\u0026 var.isTypeInferred()) {\n          JSType oldType \u003d var.getType();\n          var.setType(oldType \u003d\u003d null ?\n              resultType : oldType.getLeastSupertype(resultType));\n        }\n        break;\n      case Token.GETPROP:\n        String qualifiedName \u003d left.getQualifiedName();\n        if (qualifiedName !\u003d null) {\n          scope.inferQualifiedSlot(left, qualifiedName,\n              leftType \u003d\u003d null ? unknownType : leftType,\n              resultType);\n        }\n\n        left.setJSType(resultType);\n        ensurePropertyDefined(left, resultType);\n        break;\n    }\n  }",
    "begin_line": 532,
    "end_line": 575,
    "comment": "/** \n * Updates the scope according to the result of a type change, like an assignment or a type cast.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.ensurePropertyDefined#580",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.ensurePropertyDefined(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private void ensurePropertyDefined(Node getprop, JSType rightType) {\n    String propName \u003d getprop.getLastChild().getString();\n    Node obj \u003d getprop.getFirstChild();\n    JSType nodeType \u003d getJSType(obj);\n    ObjectType objectType \u003d ObjectType.cast(\n        nodeType.restrictByNotNullOrUndefined());\n    if (objectType \u003d\u003d null) {\n      registry.registerPropertyOnType(propName, nodeType);\n    } else {\n      // Don\u0027t add the property to @struct objects outside a constructor\n      if (nodeType.isStruct() \u0026\u0026 !objectType.hasProperty(propName)) {\n        if (!(obj.isThis() \u0026\u0026\n              getJSType(syntacticScope.getRootNode()).isConstructor())) {\n          return;\n        }\n      }\n\n      if (ensurePropertyDeclaredHelper(getprop, objectType)) {\n        return;\n      }\n\n      if (!objectType.isPropertyTypeDeclared(propName)) {\n        // We do not want a \"stray\" assign to define an inferred property\n        // for every object of this type in the program. So we use a heuristic\n        // approach to determine whether to infer the property.\n        //\n        // 1) If the property is already defined, join it with the previously\n        //    inferred type.\n        // 2) If this isn\u0027t an instance object, define it.\n        // 3) If the property of an object is being assigned in the constructor,\n        //    define it.\n        // 4) If this is a stub, define it.\n        // 5) Otherwise, do not define the type, but declare it in the registry\n        //    so that we can use it for missing property checks.\n        if (objectType.hasProperty(propName) || !objectType.isInstanceType()) {\n          if (\"prototype\".equals(propName)) {\n            objectType.defineDeclaredProperty(propName, rightType, getprop);\n          } else {\n            objectType.defineInferredProperty(propName, rightType, getprop);\n          }\n        } else if (obj.isThis() \u0026\u0026\n                   getJSType(syntacticScope.getRootNode()).isConstructor()) {\n          objectType.defineInferredProperty(propName, rightType, getprop);\n        } else {\n          registry.registerPropertyOnType(propName, objectType);\n        }\n      }\n    }\n  }",
    "begin_line": 580,
    "end_line": 628,
    "comment": "/** \n * Defines a property if the property has not been defined yet.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.ensurePropertyDeclared#637",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.ensurePropertyDeclared(com.google.javascript.rhino.Node)",
    "snippet": "private void ensurePropertyDeclared(Node getprop) {\n    ObjectType ownerType \u003d ObjectType.cast(\n        getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined());\n    if (ownerType !\u003d null) {\n      ensurePropertyDeclaredHelper(getprop, ownerType);\n    }\n  }",
    "begin_line": 637,
    "end_line": 643,
    "comment": "/** \n * Defines a declared property if it has not been defined yet. This handles the case where a property is declared on an object where the object type is inferred, and so the object type will not be known in  {@code TypedScopeCreator}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.ensurePropertyDeclaredHelper#649",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "private boolean ensurePropertyDeclaredHelper(\n      Node getprop, ObjectType objectType) {\n    String propName \u003d getprop.getLastChild().getString();\n    String qName \u003d getprop.getQualifiedName();\n    if (qName !\u003d null) {\n      Var var \u003d syntacticScope.getVar(qName);\n      if (var !\u003d null \u0026\u0026 !var.isTypeInferred()) {\n        // Handle normal declarations that could not be addressed earlier.\n        if (propName.equals(\"prototype\") ||\n        // Handle prototype declarations that could not be addressed earlier.\n            (!objectType.hasOwnProperty(propName) \u0026\u0026\n             (!objectType.isInstanceType() ||\n                 (var.isExtern() \u0026\u0026 !objectType.isNativeObjectType())))) {\n          return objectType.defineDeclaredProperty(\n              propName, var.getType(), getprop);\n        }\n      }\n    }\n    return false;\n  }",
    "begin_line": 649,
    "end_line": 668,
    "comment": "/** \n * Declares a property on its owner, if necessary.\n * @return True if a property was declared.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.traverseName#670",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.traverseName(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private FlowScope traverseName(Node n, FlowScope scope) {\n    String varName \u003d n.getString();\n    Node value \u003d n.getFirstChild();\n    JSType type \u003d n.getJSType();\n    if (value !\u003d null) {\n      scope \u003d traverse(value, scope);\n      updateScopeForTypeChange(scope, n, n.getJSType() /* could be null */,\n          getJSType(value));\n      return scope;\n    } else {\n      StaticSlot\u003cJSType\u003e var \u003d scope.getSlot(varName);\n      if (var !\u003d null) {\n        // There are two situations where we don\u0027t want to use type information\n        // from the scope, even if we have it.\n\n        // 1) The var is escaped and assigned in an inner scope, e.g.,\n        // function f() { var x \u003d 3; function g() { x \u003d null } (x); }\n        boolean isInferred \u003d var.isTypeInferred();\n        boolean unflowable \u003d isInferred \u0026\u0026\n            isUnflowable(syntacticScope.getVar(varName));\n\n        // 2) We\u0027re reading type information from another scope for an\n        // inferred variable. That variable is assigned more than once,\n        // and we can\u0027t know which type we\u0027re getting.\n        //\n        // var t \u003d null; function f() { (t); } doStuff(); t \u003d {};\n        //\n        // Notice that this heuristic isn\u0027t perfect. For example, you might\n        // have:\n        //\n        // function f() { (t); } f(); var t \u003d 3;\n        //\n        // In this case, we would infer the first reference to t as\n        // type {number}, even though it\u0027s undefined.\n        boolean nonLocalInferredSlot \u003d false;\n        if (isInferred \u0026\u0026 syntacticScope.isLocal()) {\n          Var maybeOuterVar \u003d syntacticScope.getParent().getVar(varName);\n          if (var \u003d\u003d maybeOuterVar \u0026\u0026\n              !maybeOuterVar.isMarkedAssignedExactlyOnce()) {\n            nonLocalInferredSlot \u003d true;\n          }\n        }\n\n        if (!unflowable \u0026\u0026 !nonLocalInferredSlot) {\n          type \u003d var.getType();\n          if (type \u003d\u003d null) {\n            type \u003d unknownType;\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    return scope;\n  }",
    "begin_line": 670,
    "end_line": 723,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.traverseArrayLiteral#726",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.traverseArrayLiteral(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private FlowScope traverseArrayLiteral(Node n, FlowScope scope) {\n    scope \u003d traverseChildren(n, scope);\n    n.setJSType(getNativeType(ARRAY_TYPE));\n    return scope;\n  }",
    "begin_line": 726,
    "end_line": 730,
    "comment": "/** \n * Traverse each element of the array. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.traverseObjectLiteral#732",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.traverseObjectLiteral(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n    JSType type \u003d n.getJSType();\n    Preconditions.checkNotNull(type);\n\n    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n      scope \u003d traverse(name.getFirstChild(), scope);\n    }\n\n    // Object literals can be reflected on other types, or changed with\n    // type casts.\n    // See CodingConvention#getObjectLiteralCase and goog.object.reflect.\n    // Ignore these types of literals.\n    // TODO(nicksantos): There should be an \"anonymous object\" type that\n    // we can check for here.\n    ObjectType objectType \u003d ObjectType.cast(type);\n    if (objectType \u003d\u003d null) {\n      return scope;\n    }\n\n    boolean hasLendsName \u003d n.getJSDocInfo() !\u003d null \u0026\u0026\n        n.getJSDocInfo().getLendsName() !\u003d null;\n    if (objectType.hasReferenceName() \u0026\u0026 !hasLendsName) {\n      return scope;\n    }\n\n    String qObjName \u003d NodeUtil.getBestLValueName(\n        NodeUtil.getBestLValue(n));\n    for (Node name \u003d n.getFirstChild(); name !\u003d null;\n         name \u003d name.getNext()) {\n      Node value \u003d name.getFirstChild();\n      String memberName \u003d NodeUtil.getObjectLitKeyName(name);\n      if (memberName !\u003d null) {\n        JSType rawValueType \u003d  name.getFirstChild().getJSType();\n        JSType valueType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(\n            name, rawValueType);\n        if (valueType \u003d\u003d null) {\n          valueType \u003d unknownType;\n        }\n        objectType.defineInferredProperty(memberName, valueType, name);\n\n        // Do normal flow inference if this is a direct property assignment.\n        if (qObjName !\u003d null \u0026\u0026 name.isStringKey()) {\n          String qKeyName \u003d qObjName + \".\" + memberName;\n          Var var \u003d syntacticScope.getVar(qKeyName);\n          JSType oldType \u003d var \u003d\u003d null ? null : var.getType();\n          if (var !\u003d null \u0026\u0026 var.isTypeInferred()) {\n            var.setType(oldType \u003d\u003d null ?\n                valueType : oldType.getLeastSupertype(oldType));\n          }\n\n          scope.inferQualifiedSlot(name, qKeyName,\n              oldType \u003d\u003d null ? unknownType : oldType,\n              valueType);\n        }\n      } else {\n        n.setJSType(unknownType);\n      }\n    }\n    return scope;\n  }",
    "begin_line": 732,
    "end_line": 791,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.traverseAdd#793",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.traverseAdd(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private FlowScope traverseAdd(Node n, FlowScope scope) {\n    Node left \u003d n.getFirstChild();\n    Node right \u003d left.getNext();\n    scope \u003d traverseChildren(n, scope);\n\n    JSType leftType \u003d left.getJSType();\n    JSType rightType \u003d right.getJSType();\n\n    JSType type \u003d unknownType;\n    if (leftType !\u003d null \u0026\u0026 rightType !\u003d null) {\n      boolean leftIsUnknown \u003d leftType.isUnknownType();\n      boolean rightIsUnknown \u003d rightType.isUnknownType();\n      if (leftIsUnknown \u0026\u0026 rightIsUnknown) {\n        type \u003d unknownType;\n      } else if ((!leftIsUnknown \u0026\u0026 leftType.isString()) ||\n                 (!rightIsUnknown \u0026\u0026 rightType.isString())) {\n        type \u003d getNativeType(STRING_TYPE);\n      } else if (leftIsUnknown || rightIsUnknown) {\n        type \u003d unknownType;\n      } else if (isAddedAsNumber(leftType) \u0026\u0026 isAddedAsNumber(rightType)) {\n        type \u003d getNativeType(NUMBER_TYPE);\n      } else {\n        type \u003d registry.createUnionType(STRING_TYPE, NUMBER_TYPE);\n      }\n    }\n    n.setJSType(type);\n\n    if (n.isAssignAdd()) {\n      updateScopeForTypeChange(scope, left, leftType, type);\n    }\n\n    return scope;\n  }",
    "begin_line": 793,
    "end_line": 825,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.isAddedAsNumber#827",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.isAddedAsNumber(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private boolean isAddedAsNumber(JSType type) {\n    return type.isSubtype(registry.createUnionType(VOID_TYPE, NULL_TYPE,\n        NUMBER_VALUE_OR_OBJECT_TYPE, BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE));\n  }",
    "begin_line": 827,
    "end_line": 830,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.traverseHook#832",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.traverseHook(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private FlowScope traverseHook(Node n, FlowScope scope) {\n    Node condition \u003d n.getFirstChild();\n    Node trueNode \u003d condition.getNext();\n    Node falseNode \u003d n.getLastChild();\n\n    // verify the condition\n    scope \u003d traverse(condition, scope);\n\n    // reverse abstract interpret the condition to produce two new scopes\n    FlowScope trueScope \u003d reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            condition, scope, true);\n    FlowScope falseScope \u003d reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            condition, scope, false);\n\n    // traverse the true node with the trueScope\n    traverse(trueNode, trueScope.createChildFlowScope());\n\n    // traverse the false node with the falseScope\n    traverse(falseNode, falseScope.createChildFlowScope());\n\n    // meet true and false nodes\u0027 types and assign\n    JSType trueType \u003d trueNode.getJSType();\n    JSType falseType \u003d falseNode.getJSType();\n    if (trueType !\u003d null \u0026\u0026 falseType !\u003d null) {\n      n.setJSType(trueType.getLeastSupertype(falseType));\n    } else {\n      n.setJSType(null);\n    }\n\n    return scope.createChildFlowScope();\n  }",
    "begin_line": 832,
    "end_line": 864,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.traverseCall#866",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.traverseCall(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private FlowScope traverseCall(Node n, FlowScope scope) {\n    scope \u003d traverseChildren(n, scope);\n\n    Node left \u003d n.getFirstChild();\n    JSType functionType \u003d getJSType(left).restrictByNotNullOrUndefined();\n    if (functionType.isFunctionType()) {\n      FunctionType fnType \u003d functionType.toMaybeFunctionType();\n      n.setJSType(fnType.getReturnType());\n      backwardsInferenceFromCallSite(n, fnType);\n    } else if (functionType.isEquivalentTo(\n        getNativeType(CHECKED_UNKNOWN_TYPE))) {\n      n.setJSType(getNativeType(CHECKED_UNKNOWN_TYPE));\n    }\n\n    scope \u003d tightenTypesAfterAssertions(scope, n);\n    return scope;\n  }",
    "begin_line": 866,
    "end_line": 882,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.tightenTypesAfterAssertions#884",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope, com.google.javascript.rhino.Node)",
    "snippet": "private FlowScope tightenTypesAfterAssertions(FlowScope scope,\n      Node callNode) {\n    Node left \u003d callNode.getFirstChild();\n    Node firstParam \u003d left.getNext();\n    AssertionFunctionSpec assertionFunctionSpec \u003d\n        assertionFunctionsMap.get(left.getQualifiedName());\n    if (assertionFunctionSpec \u003d\u003d null || firstParam \u003d\u003d null) {\n      return scope;\n    }\n    Node assertedNode \u003d assertionFunctionSpec.getAssertedParam(firstParam);\n    if (assertedNode \u003d\u003d null) {\n      return scope;\n    }\n    JSType assertedType \u003d assertionFunctionSpec.getAssertedType(\n        callNode, registry);\n    String assertedNodeName \u003d assertedNode.getQualifiedName();\n\n    JSType narrowed;\n    // Handle assertions that enforce expressions evaluate to true.\n    if (assertedType \u003d\u003d null) {\n      // Handle arbitrary expressions within the assert.\n      scope \u003d reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n          assertedNode, scope, true);\n      // Build the result of the assertExpression\n      narrowed \u003d getJSType(assertedNode).restrictByNotNullOrUndefined();\n    } else {\n      // Handle assertions that enforce expressions are of a certain type.\n      JSType type \u003d getJSType(assertedNode);\n      narrowed \u003d type.getGreatestSubtype(assertedType);\n      if (assertedNodeName !\u003d null \u0026\u0026 type.differsFrom(narrowed)) {\n        scope \u003d narrowScope(scope, assertedNode, narrowed);\n      }\n    }\n\n    callNode.setJSType(narrowed);\n    return scope;\n  }",
    "begin_line": 884,
    "end_line": 920,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.narrowScope#922",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.narrowScope(com.google.javascript.jscomp.type.FlowScope, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private FlowScope narrowScope(FlowScope scope, Node node, JSType narrowed) {\n    if (node.isThis()) {\n      // \"this\" references don\u0027t need to be modeled in the control flow graph.\n      return scope;\n    }\n\n    scope \u003d scope.createChildFlowScope();\n    if (node.isGetProp()) {\n      scope.inferQualifiedSlot(\n          node, node.getQualifiedName(), getJSType(node), narrowed);\n    } else {\n      redeclareSimpleVar(scope, node, narrowed);\n    }\n    return scope;\n  }",
    "begin_line": 922,
    "end_line": 936,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.backwardsInferenceFromCallSite#963",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.backwardsInferenceFromCallSite(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "private void backwardsInferenceFromCallSite(Node n, FunctionType fnType) {\n    boolean updatedFnType \u003d inferTemplatedTypesForCall(n, fnType);\n    if (updatedFnType) {\n      fnType \u003d n.getFirstChild().getJSType().toMaybeFunctionType();\n    }\n    updateTypeOfParameters(n, fnType);\n    updateBind(n, fnType);\n  }",
    "begin_line": 963,
    "end_line": 970,
    "comment": "/** \n * We only do forward type inference. We do not do full backwards type inference. In other words, if we have, \u003ccode\u003e var x \u003d f(); g(x); \u003c/code\u003e a forward type-inference engine would try to figure out the type of \"x\" from the return type of \"f\". A backwards type-inference engine would try to figure out the type of \"x\" from the parameter type of \"g\". However, there are a few special syntactic forms where we do some some half-assed backwards type-inference, because programmers expect it in this day and age. To take an example from Java, \u003ccode\u003e List\u003cString\u003e x \u003d Lists.newArrayList(); \u003c/code\u003e The Java compiler will be able to infer the generic type of the List returned by newArrayList(). In much the same way, we do some special-case backwards inference for JS. Those cases are enumerated here.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.updateBind#976",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.updateBind(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "private void updateBind(Node n, FunctionType fnType) {\n    CodingConvention.Bind bind \u003d\n        compiler.getCodingConvention().describeFunctionBind(n, true);\n    if (bind \u003d\u003d null) {\n      return;\n    }\n\n    FunctionType callTargetFn \u003d getJSType(bind.target)\n        .restrictByNotNullOrUndefined().toMaybeFunctionType();\n    if (callTargetFn \u003d\u003d null) {\n      return;\n    }\n\n    n.setJSType(\n        callTargetFn.getBindReturnType(\n            // getBindReturnType expects the \u0027this\u0027 argument to be included.\n            bind.getBoundParameterCount() + 1));\n  }",
    "begin_line": 976,
    "end_line": 993,
    "comment": "/** \n * When \"bind\" is called on a function, we infer the type of the returned \"bound\" function by looking at the number of parameters in the call site.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.updateTypeOfParameters#999",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.updateTypeOfParameters(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "private void updateTypeOfParameters(Node n, FunctionType fnType) {\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n      if (i + 1 \u003e\u003d childCount) {\n        // TypeCheck#visitParametersList will warn so we bail.\n        return;\n      }\n\n      JSType iParameterType \u003d getJSType(iParameter);\n      Node iArgument \u003d n.getChildAtIndex(i + 1);\n      JSType iArgumentType \u003d getJSType(iArgument);\n      inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);\n\n      // TODO(johnlenz): Filter out non-function types\n      // (such as null and undefined) as\n      // we only care about FUNCTION subtypes here.\n      JSType restrictedParameter \u003d iParameterType\n          .restrictByNotNullOrUndefined()\n          .toMaybeFunctionType();\n      if (restrictedParameter !\u003d null) {\n        if (iArgument.isFunction() \u0026\u0026\n            iArgumentType.isFunctionType() \u0026\u0026\n            iArgument.getJSDocInfo() \u003d\u003d null) {\n          iArgument.setJSType(restrictedParameter);\n        }\n      }\n      i++;\n    }\n  }",
    "begin_line": 999,
    "end_line": 1028,
    "comment": "/** \n * For functions with function parameters, type inference will set the type of a function literal argument from the function parameter type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.inferTemplateTypesFromParameters#1030",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.inferTemplateTypesFromParameters(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.Node)",
    "snippet": "private Map\u003cTemplateType, JSType\u003e inferTemplateTypesFromParameters(\n      FunctionType fnType, Node call) {\n    if (fnType.getTemplateKeys().isEmpty()) {\n      return Collections.emptyMap();\n    }\n\n    Map\u003cTemplateType, JSType\u003e resolvedTypes \u003d Maps.newIdentityHashMap();\n\n    Node callTarget \u003d call.getFirstChild();\n    if (NodeUtil.isGet(callTarget)) {\n      Node obj \u003d callTarget.getFirstChild();\n      maybeResolveTemplatedType(\n          fnType.getTypeOfThis(),\n          getJSType(obj),\n          resolvedTypes);\n    }\n\n    if (call.hasMoreThanOneChild()) {\n      maybeResolveTemplateTypeFromNodes(\n          fnType.getParameters(),\n          call.getChildAtIndex(1).siblings(),\n          resolvedTypes);\n    }\n    return resolvedTypes;\n  }",
    "begin_line": 1030,
    "end_line": 1054,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.maybeResolveTemplatedType#1056",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType, java.util.Map\u003ccom.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "private void maybeResolveTemplatedType(\n      JSType paramType,\n      JSType argType,\n      Map\u003cTemplateType, JSType\u003e resolvedTypes) {\n    if (paramType.isTemplateType()) {\n      // @param {T}\n      resolvedTemplateType(\n          resolvedTypes, paramType.toMaybeTemplateType(), argType);\n    } else if (paramType.isUnionType()) {\n      // @param {Array.\u003cT\u003e|NodeList|Arguments|{length:number}}\n      UnionType unionType \u003d paramType.toMaybeUnionType();\n      for (JSType alernative : unionType.getAlternates()) {\n        maybeResolveTemplatedType(alernative, argType, resolvedTypes);\n      }\n    } else if (paramType.isFunctionType()) {\n      FunctionType paramFunctionType \u003d paramType.toMaybeFunctionType();\n      FunctionType argFunctionType \u003d argType\n          .restrictByNotNullOrUndefined()\n          .collapseUnion()\n          .toMaybeFunctionType();\n      if (argFunctionType !\u003d null \u0026\u0026 argFunctionType.isSubtype(paramType)) {\n        // infer from return type of the function type\n        maybeResolveTemplatedType(\n            paramFunctionType.getTypeOfThis(),\n            argFunctionType.getTypeOfThis(), resolvedTypes);\n        // infer from return type of the function type\n        maybeResolveTemplatedType(\n            paramFunctionType.getReturnType(),\n            argFunctionType.getReturnType(), resolvedTypes);\n        // infer from parameter types of the function type\n        maybeResolveTemplateTypeFromNodes(\n            paramFunctionType.getParameters(),\n            argFunctionType.getParameters(), resolvedTypes);\n      }\n    } else if (paramType.isParameterizedType()) {\n      ParameterizedType paramObjectType \u003d paramType.toMaybeParameterizedType();\n      JSType typeParameter \u003d paramObjectType.getParameterType();\n      Preconditions.checkNotNull(typeParameter);\n      if (typeParameter !\u003d null) {\n        // @param {Array.\u003cT\u003e}\n        ObjectType argObjectType \u003d argType\n            .restrictByNotNullOrUndefined()\n            .collapseUnion()\n            .toMaybeParameterizedType();\n        if (argObjectType !\u003d null \u0026\u0026 argObjectType.isSubtype(paramType)) {\n          JSType argTypeParameter \u003d argObjectType.getParameterType();\n          Preconditions.checkNotNull(argTypeParameter);\n          maybeResolveTemplatedType(\n              typeParameter, argTypeParameter, resolvedTypes);\n        }\n      }\n    }\n  }",
    "begin_line": 1056,
    "end_line": 1108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.maybeResolveTemplateTypeFromNodes#1110",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.maybeResolveTemplateTypeFromNodes(java.lang.Iterable\u003ccom.google.javascript.rhino.Node\u003e, java.lang.Iterable\u003ccom.google.javascript.rhino.Node\u003e, java.util.Map\u003ccom.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "private void maybeResolveTemplateTypeFromNodes(\n      Iterable\u003cNode\u003e declParams,\n      Iterable\u003cNode\u003e callParams,\n      Map\u003cTemplateType, JSType\u003e resolvedTypes) {\n    maybeResolveTemplateTypeFromNodes(\n        declParams.iterator(), callParams.iterator(), resolvedTypes);\n  }",
    "begin_line": 1110,
    "end_line": 1116,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.maybeResolveTemplateTypeFromNodes#1118",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.maybeResolveTemplateTypeFromNodes(java.util.Iterator\u003ccom.google.javascript.rhino.Node\u003e, java.util.Iterator\u003ccom.google.javascript.rhino.Node\u003e, java.util.Map\u003ccom.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "private void maybeResolveTemplateTypeFromNodes(\n      Iterator\u003cNode\u003e declParams,\n      Iterator\u003cNode\u003e callParams,\n      Map\u003cTemplateType, JSType\u003e resolvedTypes) {\n    while (declParams.hasNext() \u0026\u0026 callParams.hasNext()) {\n      Node declParam \u003d declParams.next();\n      maybeResolveTemplatedType(\n          getJSType(declParam),\n          getJSType(callParams.next()),\n          resolvedTypes);\n      if (declParam.isVarArgs()) {\n        while (callParams.hasNext()) {\n          maybeResolveTemplatedType(\n              getJSType(declParam),\n              getJSType(callParams.next()),\n              resolvedTypes);\n        }\n      }\n    }\n  }",
    "begin_line": 1118,
    "end_line": 1137,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInference.resolvedTemplateType#1139",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.resolvedTemplateType(java.util.Map\u003ccom.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType\u003e, com.google.javascript.rhino.jstype.TemplateType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private void resolvedTemplateType(\n      Map\u003cTemplateType, JSType\u003e map, TemplateType template, JSType resolved) {\n    JSType previous \u003d map.get(template);\n    if (!resolved.isUnknownType()) {\n      if (previous \u003d\u003d null) {\n        map.put(template, resolved);\n      } else {\n        JSType join \u003d previous.getLeastSupertype(resolved);\n        map.put(template, join);\n      }\n    }\n  }",
    "begin_line": 1139,
    "end_line": 1150,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TemplateTypeReplacer.TemplateTypeReplacer#1157",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.TemplateTypeReplacer(com.google.javascript.rhino.jstype.JSTypeRegistry, java.util.Map\u003ccom.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": " TemplateTypeReplacer(\n        JSTypeRegistry registry, Map\u003cTemplateType, JSType\u003e replacements) {\n      super(registry);\n      this.registry \u003d registry;\n      this.replacements \u003d replacements;\n    }",
    "begin_line": 1157,
    "end_line": 1162,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TemplateTypeReplacer.caseTemplateType#1165",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.caseTemplateType(com.google.javascript.rhino.jstype.TemplateType)",
    "snippet": "@Override\n    public JSType caseTemplateType(TemplateType type) {\n      madeChanges \u003d true;\n      JSType replacement \u003d replacements.get(type);\n      return replacement !\u003d null ?\n          replacement : registry.getNativeType(UNKNOWN_TYPE);\n    }",
    "begin_line": 1165,
    "end_line": 1170,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TemplateTypeReplacer.inferTemplatedTypesForCall#1178",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.inferTemplatedTypesForCall(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "private boolean inferTemplatedTypesForCall(\n      Node n, FunctionType fnType) {\n    if (fnType.getTemplateKeys().isEmpty()) {\n      return false;\n    }\n\n    // Try to infer the template types\n    Map\u003cTemplateType, JSType\u003e inferred \u003d inferTemplateTypesFromParameters(\n        fnType, n);\n\n    // Replace all template types. If we couldn\u0027t find a replacement, we\n    // replace it with UNKNOWN.\n    TemplateTypeReplacer replacer \u003d new TemplateTypeReplacer(\n        registry, inferred);\n    Node callTarget \u003d n.getFirstChild();\n\n    FunctionType replacementFnType \u003d fnType.visit(replacer)\n        .toMaybeFunctionType();\n    Preconditions.checkNotNull(replacementFnType);\n\n    callTarget.setJSType(replacementFnType);\n    n.setJSType(replacementFnType.getReturnType());\n\n    return replacer.madeChanges;\n  }",
    "begin_line": 1178,
    "end_line": 1202,
    "comment": "/** \n * For functions with function(this: T, ...) and T as parameters, type inference will set the type of this on a function literal argument to the the actual type of T.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TemplateTypeReplacer.traverseNew#1204",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.traverseNew(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    scope \u003d traverseChildren(n, scope);\n\n    Node constructor \u003d n.getFirstChild();\n    JSType constructorType \u003d constructor.getJSType();\n    JSType type \u003d null;\n    if (constructorType !\u003d null) {\n      constructorType \u003d constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type \u003d unknownType;\n      } else {\n        FunctionType ct \u003d constructorType.toMaybeFunctionType();\n        if (ct \u003d\u003d null \u0026\u0026 constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct \u003d (FunctionType) constructorType;\n        }\n        if (ct !\u003d null \u0026\u0026 ct.isConstructor()) {\n          type \u003d ct.getInstanceType();\n          backwardsInferenceFromCallSite(n, ct);\n        }\n      }\n    }\n    n.setJSType(type);\n    return scope;\n  }",
    "begin_line": 1204,
    "end_line": 1230,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TemplateTypeReplacer.traverseAnd#1232",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.traverseAnd(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n    return traverseShortCircuitingBinOp(n, scope, true);\n  }",
    "begin_line": 1232,
    "end_line": 1234,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TemplateTypeReplacer.traverseChildren#1236",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.traverseChildren(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private FlowScope traverseChildren(Node n, FlowScope scope) {\n    for (Node el \u003d n.getFirstChild(); el !\u003d null; el \u003d el.getNext()) {\n      scope \u003d traverse(el, scope);\n    }\n    return scope;\n  }",
    "begin_line": 1236,
    "end_line": 1241,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TemplateTypeReplacer.traverseGetElem#1243",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.traverseGetElem(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private FlowScope traverseGetElem(Node n, FlowScope scope) {\n    scope \u003d traverseChildren(n, scope);\n    ObjectType objType \u003d ObjectType.cast(\n        getJSType(n.getFirstChild()).restrictByNotNullOrUndefined());\n    if (objType !\u003d null) {\n      JSType type \u003d objType.getParameterType();\n      if (type !\u003d null) {\n        n.setJSType(type);\n      }\n    }\n    return dereferencePointer(n.getFirstChild(), scope);\n  }",
    "begin_line": 1243,
    "end_line": 1254,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TemplateTypeReplacer.traverseGetProp#1256",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.traverseGetProp(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private FlowScope traverseGetProp(Node n, FlowScope scope) {\n    Node objNode \u003d n.getFirstChild();\n    Node property \u003d n.getLastChild();\n    scope \u003d traverseChildren(n, scope);\n\n    n.setJSType(\n        getPropertyType(\n            objNode.getJSType(), property.getString(), n, scope));\n    return dereferencePointer(n.getFirstChild(), scope);\n  }",
    "begin_line": 1256,
    "end_line": 1265,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TemplateTypeReplacer.inferPropertyTypesToMatchConstraint#1281",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.inferPropertyTypesToMatchConstraint(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type \u003d\u003d null || constraint \u003d\u003d null) {\n      return;\n    }\n\n    type.matchConstraint(constraint);\n  }",
    "begin_line": 1281,
    "end_line": 1288,
    "comment": "/** \n * Suppose X is an object with inferred properties. Suppose also that X is used in a way where it would only type-check correctly if some of those properties are widened. Then we should be polite and automatically widen X\u0027s properties for him. For a concrete example, consider: param x {{prop: (number|undefined)}} function f(x) {} f({}); If we give the anonymous object an inferred property of (number|undefined), then this code will type-check appropriately.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TemplateTypeReplacer.dereferencePointer#1294",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.dereferencePointer(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type \u003d getJSType(n);\n      JSType narrowed \u003d type.restrictByNotNullOrUndefined();\n      if (type !\u003d narrowed) {\n        scope \u003d narrowScope(scope, n, narrowed);\n      }\n    }\n    return scope;\n  }",
    "begin_line": 1294,
    "end_line": 1303,
    "comment": "/** \n * If we access a property of a symbol, then that symbol is not null or undefined.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TemplateTypeReplacer.getPropertyType#1305",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.getPropertyType(com.google.javascript.rhino.jstype.JSType, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private JSType getPropertyType(JSType objType, String propName,\n      Node n, FlowScope scope) {\n    // We often have a couple of different types to choose from for the\n    // property. Ordered by accuracy, we have\n    // 1) A locally inferred qualified name (which is in the FlowScope)\n    // 2) A globally declared qualified name (which is in the FlowScope)\n    // 3) A property on the owner type (which is on objType)\n    // 4) A name in the type registry (as a last resort)\n    JSType propertyType \u003d null;\n    boolean isLocallyInferred \u003d false;\n\n    // Scopes sometimes contain inferred type info about qualified names.\n    String qualifiedName \u003d n.getQualifiedName();\n    StaticSlot\u003cJSType\u003e var \u003d scope.getSlot(qualifiedName);\n    if (var !\u003d null) {\n      JSType varType \u003d var.getType();\n      if (varType !\u003d null) {\n        boolean isDeclared \u003d !var.isTypeInferred();\n        isLocallyInferred \u003d (var !\u003d syntacticScope.getSlot(qualifiedName));\n        if (isDeclared || isLocallyInferred) {\n          propertyType \u003d varType;\n        }\n      }\n    }\n\n    if (propertyType \u003d\u003d null \u0026\u0026 objType !\u003d null) {\n      JSType foundType \u003d objType.findPropertyType(propName);\n      if (foundType !\u003d null) {\n        propertyType \u003d foundType;\n      }\n    }\n\n    if ((propertyType \u003d\u003d null || propertyType.isUnknownType())\n        \u0026\u0026 qualifiedName !\u003d null) {\n      // If we find this node in the registry, then we can infer its type.\n      ObjectType regType \u003d ObjectType.cast(registry.getType(qualifiedName));\n      if (regType !\u003d null) {\n        propertyType \u003d regType.getConstructor();\n      }\n    }\n\n    if (propertyType \u003d\u003d null) {\n      return unknownType;\n    } else if (propertyType.isEquivalentTo(unknownType) \u0026\u0026 isLocallyInferred) {\n      // If the type has been checked in this scope,\n      // then use CHECKED_UNKNOWN_TYPE instead to indicate that.\n      return getNativeType(CHECKED_UNKNOWN_TYPE);\n    } else {\n      return propertyType;\n    }\n  }",
    "begin_line": 1305,
    "end_line": 1355,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TemplateTypeReplacer.traverseOr#1357",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.traverseOr(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private BooleanOutcomePair traverseOr(Node n, FlowScope scope) {\n    return traverseShortCircuitingBinOp(n, scope, false);\n  }",
    "begin_line": 1357,
    "end_line": 1359,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TemplateTypeReplacer.traverseShortCircuitingBinOp#1361",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.traverseShortCircuitingBinOp(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope, boolean)",
    "snippet": "private BooleanOutcomePair traverseShortCircuitingBinOp(\n      Node n, FlowScope scope, boolean condition) {\n    Node left \u003d n.getFirstChild();\n    Node right \u003d n.getLastChild();\n\n    // type the left node\n    BooleanOutcomePair leftLiterals \u003d\n        traverseWithinShortCircuitingBinOp(left,\n            scope.createChildFlowScope());\n    JSType leftType \u003d left.getJSType();\n\n    // reverse abstract interpret the left node to produce the correct\n    // scope in which to verify the right node\n    FlowScope rightScope \u003d reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            left, leftLiterals.getOutcomeFlowScope(left.getType(), condition),\n            condition);\n\n    // type the right node\n    BooleanOutcomePair rightLiterals \u003d\n        traverseWithinShortCircuitingBinOp(\n            right, rightScope.createChildFlowScope());\n    JSType rightType \u003d right.getJSType();\n\n    JSType type;\n    BooleanOutcomePair literals;\n    if (leftType !\u003d null \u0026\u0026 rightType !\u003d null) {\n      leftType \u003d leftType.getRestrictedTypeGivenToBooleanOutcome(!condition);\n      if (leftLiterals.toBooleanOutcomes \u003d\u003d\n          BooleanLiteralSet.get(!condition)) {\n        // Use the restricted left type, since the right side never gets\n        // evaluated.\n        type \u003d leftType;\n        literals \u003d leftLiterals;\n      } else {\n        // Use the join of the restricted left type knowing the outcome of the\n        // ToBoolean predicate and of the right type.\n        type \u003d leftType.getLeastSupertype(rightType);\n        literals \u003d\n            getBooleanOutcomePair(leftLiterals, rightLiterals, condition);\n      }\n\n      // Exclude the boolean type if the literal set is empty because a boolean\n      // can never actually be returned.\n      if (literals.booleanValues \u003d\u003d BooleanLiteralSet.EMPTY \u0026\u0026\n          getNativeType(BOOLEAN_TYPE).isSubtype(type)) {\n        // Exclusion only make sense for a union type.\n        if (type.isUnionType()) {\n          type \u003d type.toMaybeUnionType().getRestrictedUnion(\n              getNativeType(BOOLEAN_TYPE));\n        }\n      }\n    } else {\n      type \u003d null;\n      literals \u003d new BooleanOutcomePair(\n          BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH,\n          leftLiterals.getJoinedFlowScope(),\n          rightLiterals.getJoinedFlowScope());\n    }\n    n.setJSType(type);\n\n    return literals;\n  }",
    "begin_line": 1361,
    "end_line": 1423,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TemplateTypeReplacer.traverseWithinShortCircuitingBinOp#1425",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.traverseWithinShortCircuitingBinOp(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private BooleanOutcomePair traverseWithinShortCircuitingBinOp(Node n,\n      FlowScope scope) {\n    switch (n.getType()) {\n      case Token.AND:\n        return traverseAnd(n, scope);\n\n      case Token.OR:\n        return traverseOr(n, scope);\n\n      default:\n        scope \u003d traverse(n, scope);\n        return newBooleanOutcomePair(n.getJSType(), scope);\n    }\n  }",
    "begin_line": 1425,
    "end_line": 1438,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TemplateTypeReplacer.getBooleanOutcomePair#1445",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.getBooleanOutcomePair(com.google.javascript.jscomp.TypeInference.BooleanOutcomePair, com.google.javascript.jscomp.TypeInference.BooleanOutcomePair, boolean)",
    "snippet": "BooleanOutcomePair getBooleanOutcomePair(BooleanOutcomePair left,\n      BooleanOutcomePair right, boolean condition) {\n    return new BooleanOutcomePair(\n        getBooleanOutcomes(left.toBooleanOutcomes, right.toBooleanOutcomes,\n                           condition),\n        getBooleanOutcomes(left.booleanValues, right.booleanValues, condition),\n        left.getJoinedFlowScope(), right.getJoinedFlowScope());\n  }",
    "begin_line": 1445,
    "end_line": 1452,
    "comment": "/** \n * Infers the boolean outcome pair that can be taken by a short-circuiting binary operation ( {@code \u0026\u0026} or {@code ||}).\n * @see #getBooleanOutcomes(BooleanLiteralSet,BooleanLiteralSet,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TemplateTypeReplacer.getBooleanOutcomes#1466",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.getBooleanOutcomes(com.google.javascript.rhino.jstype.BooleanLiteralSet, com.google.javascript.rhino.jstype.BooleanLiteralSet, boolean)",
    "snippet": "static BooleanLiteralSet getBooleanOutcomes(BooleanLiteralSet left,\n      BooleanLiteralSet right, boolean condition) {\n    return right.union(left.intersection(BooleanLiteralSet.get(!condition)));\n  }",
    "begin_line": 1466,
    "end_line": 1469,
    "comment": "/** \n * Infers the boolean literal set that can be taken by a short-circuiting binary operation ( {@code \u0026\u0026} or {@code ||}).\n * @param left the set of possible {@code ToBoolean} predicate results forthe expression on the left side of the operator\n * @param right the set of possible {@code ToBoolean} predicate results forthe expression on the right side of the operator\n * @param condition the left side {@code ToBoolean} predicate result thatcauses the right side to get evaluated (i.e. not short-circuited)\n * @return a set of possible {@code ToBoolean} predicate results for theentire expression\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanOutcomePair.BooleanOutcomePair#1490",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.BooleanOutcomePair(com.google.javascript.rhino.jstype.BooleanLiteralSet, com.google.javascript.rhino.jstype.BooleanLiteralSet, com.google.javascript.jscomp.type.FlowScope, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": " BooleanOutcomePair(\n        BooleanLiteralSet toBooleanOutcomes, BooleanLiteralSet booleanValues,\n        FlowScope leftScope, FlowScope rightScope) {\n      this.toBooleanOutcomes \u003d toBooleanOutcomes;\n      this.booleanValues \u003d booleanValues;\n      this.leftScope \u003d leftScope;\n      this.rightScope \u003d rightScope;\n    }",
    "begin_line": 1490,
    "end_line": 1497,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanOutcomePair.getJoinedFlowScope#1503",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.getJoinedFlowScope()",
    "snippet": "FlowScope getJoinedFlowScope() {\n      if (joinedScope \u003d\u003d null) {\n        if (leftScope \u003d\u003d rightScope) {\n          joinedScope \u003d rightScope;\n        } else {\n          joinedScope \u003d join(leftScope, rightScope);\n        }\n      }\n      return joinedScope;\n    }",
    "begin_line": 1503,
    "end_line": 1512,
    "comment": "/** \n * Gets the safe estimated scope without knowing if all of the subexpressions will be evaluated.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanOutcomePair.getOutcomeFlowScope#1518",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.getOutcomeFlowScope(int, boolean)",
    "snippet": "FlowScope getOutcomeFlowScope(int nodeType, boolean outcome) {\n      if (nodeType \u003d\u003d Token.AND \u0026\u0026 outcome ||\n          nodeType \u003d\u003d Token.OR \u0026\u0026 !outcome) {\n        // We know that the whole expression must have executed.\n        return rightScope;\n      } else {\n        return getJoinedFlowScope();\n      }\n    }",
    "begin_line": 1518,
    "end_line": 1526,
    "comment": "/** \n * Gets the outcome scope if we do know the outcome of the entire expression.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanOutcomePair.newBooleanOutcomePair#1529",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.newBooleanOutcomePair(com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private BooleanOutcomePair newBooleanOutcomePair(\n      JSType jsType, FlowScope flowScope) {\n    if (jsType \u003d\u003d null) {\n      return new BooleanOutcomePair(\n          BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, flowScope, flowScope);\n    }\n    return new BooleanOutcomePair(jsType.getPossibleToBooleanOutcomes(),\n        registry.getNativeType(BOOLEAN_TYPE).isSubtype(jsType) ?\n            BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY,\n        flowScope, flowScope);\n  }",
    "begin_line": 1529,
    "end_line": 1539,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanOutcomePair.redeclareSimpleVar#1541",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.redeclareSimpleVar(com.google.javascript.jscomp.type.FlowScope, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private void redeclareSimpleVar(\n      FlowScope scope, Node nameNode, JSType varType) {\n    Preconditions.checkState(nameNode.isName());\n    String varName \u003d nameNode.getString();\n    if (varType \u003d\u003d null) {\n      varType \u003d getNativeType(JSTypeNative.UNKNOWN_TYPE);\n    }\n    if (isUnflowable(syntacticScope.getVar(varName))) {\n      return;\n    }\n    scope.inferSlotType(varName, varType);\n  }",
    "begin_line": 1541,
    "end_line": 1552,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanOutcomePair.isUnflowable#1554",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.isUnflowable(com.google.javascript.jscomp.Scope.Var)",
    "snippet": "private boolean isUnflowable(Var v) {\n    return v !\u003d null \u0026\u0026 v.isLocal() \u0026\u0026 v.isMarkedEscaped() \u0026\u0026\n        // It\u0027s OK to flow a variable in the scope where it\u0027s escaped.\n        v.getScope() \u003d\u003d syntacticScope;\n  }",
    "begin_line": 1554,
    "end_line": 1558,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanOutcomePair.getJSType#1564",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.getJSType(com.google.javascript.rhino.Node)",
    "snippet": "private JSType getJSType(Node n) {\n    JSType jsType \u003d n.getJSType();\n    if (jsType \u003d\u003d null) {\n      // TODO(nicksantos): This branch indicates a compiler bug, not worthy of\n      // halting the compilation but we should log this and analyze to track\n      // down why it happens. This is not critical and will be resolved over\n      // time as the type checker is extended.\n      return unknownType;\n    } else {\n      return jsType;\n    }\n  }",
    "begin_line": 1564,
    "end_line": 1575,
    "comment": "/** \n * This method gets the JSType from the Node argument and verifies that it is present.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanOutcomePair.getNativeType#1577",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInference.java",
    "class_name": "com.google.javascript.jscomp.TypeInference",
    "signature": "com.google.javascript.jscomp.TypeInference.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
    "snippet": "private JSType getNativeType(JSTypeNative typeId) {\n    return registry.getNativeType(typeId);\n  }",
    "begin_line": 1577,
    "end_line": 1579,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInferencePass.TypeInferencePass#44",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInferencePass.java",
    "class_name": "com.google.javascript.jscomp.TypeInferencePass",
    "signature": "com.google.javascript.jscomp.TypeInferencePass.TypeInferencePass(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter, com.google.javascript.jscomp.Scope, com.google.javascript.jscomp.MemoizedScopeCreator)",
    "snippet": " TypeInferencePass(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      Scope topScope, MemoizedScopeCreator scopeCreator) {\n    this.compiler \u003d compiler;\n    this.reverseInterpreter \u003d reverseInterpreter;\n    this.topScope \u003d topScope;\n    this.scopeCreator \u003d scopeCreator;\n\n    assertionFunctionsMap \u003d Maps.newHashMap();\n    for (AssertionFunctionSpec assertionFucntion :\n        compiler.getCodingConvention().getAssertionFunctions()) {\n      assertionFunctionsMap.put(assertionFucntion.getFunctionName(),\n          assertionFucntion);\n    }\n  }",
    "begin_line": 44,
    "end_line": 58,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInferencePass.process#67",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInferencePass.java",
    "class_name": "com.google.javascript.jscomp.TypeInferencePass",
    "signature": "com.google.javascript.jscomp.TypeInferencePass.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void process(Node externsRoot, Node jsRoot) {\n    Node externsAndJs \u003d jsRoot.getParent();\n    Preconditions.checkState(externsAndJs !\u003d null);\n    Preconditions.checkState(\n        externsRoot \u003d\u003d null || externsAndJs.hasChild(externsRoot));\n\n    inferAllScopes(externsAndJs);\n  }",
    "begin_line": 67,
    "end_line": 74,
    "comment": "/** \n * Main entry point for type inference when running over the whole tree.\n * @param externsRoot The root of the externs parse tree.\n * @param jsRoot The root of the input parse tree to be checked.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInferencePass.inferAllScopes#77",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInferencePass.java",
    "class_name": "com.google.javascript.jscomp.TypeInferencePass",
    "signature": "com.google.javascript.jscomp.TypeInferencePass.inferAllScopes(com.google.javascript.rhino.Node)",
    "snippet": "void inferAllScopes(Node node) {\n    // Type analysis happens in two major phases.\n    // 1) Finding all the symbols.\n    // 2) Propagating all the inferred types.\n    //\n    // The order of this analysis is non-obvious. In a complete inference\n    // system, we may need to backtrack arbitrarily far. But the compile-time\n    // costs would be unacceptable.\n    //\n    // We do one pass where we do typed scope creation for all scopes\n    // in pre-order.\n    //\n    // Then we do a second pass where we do all type inference\n    // (type propagation) in pre-order.\n    //\n    // We use a memoized scope creator so that we never create a scope\n    // more than once.\n    //\n    // This will allow us to handle cases like:\n    // var ns \u003d {};\n    // (function() { /** JSDoc */ ns.method \u003d function() {}; })();\n    // ns.method();\n    // In this code, we need to build the symbol table for the inner scope in\n    // order to propagate the type of ns.method in the outer scope.\n    (new NodeTraversal(\n        compiler, new FirstScopeBuildingCallback(), scopeCreator))\n        .traverseWithScope(node, topScope);\n    (new NodeTraversal(\n        compiler, new SecondScopeBuildingCallback(), scopeCreator))\n        .traverseWithScope(node, topScope);\n  }",
    "begin_line": 77,
    "end_line": 107,
    "comment": "/** \n * Entry point for type inference when running over part of the tree. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeInferencePass.inferScope#109",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInferencePass.java",
    "class_name": "com.google.javascript.jscomp.TypeInferencePass",
    "signature": "com.google.javascript.jscomp.TypeInferencePass.inferScope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
    "snippet": "void inferScope(Node n, Scope scope) {\n    TypeInference typeInference \u003d\n        new TypeInference(\n            compiler, computeCfg(n), reverseInterpreter, scope,\n            assertionFunctionsMap);\n    try {\n      typeInference.analyze();\n\n      // Resolve any new type names found during the inference.\n      compiler.getTypeRegistry().resolveTypesInScope(scope);\n\n    } catch (DataFlowAnalysis.MaxIterationsExceededException e) {\n      compiler.report(JSError.make(n.getSourceFileName(), n, DATAFLOW_ERROR));\n    }\n  }",
    "begin_line": 109,
    "end_line": 123,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FirstScopeBuildingCallback.enterScope#127",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInferencePass.java",
    "class_name": "com.google.javascript.jscomp.TypeInferencePass",
    "signature": "com.google.javascript.jscomp.TypeInferencePass.enterScope(com.google.javascript.jscomp.NodeTraversal)",
    "snippet": "@Override\n    public void enterScope(NodeTraversal t) {\n      t.getScope();\n    }",
    "begin_line": 127,
    "end_line": 129,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FirstScopeBuildingCallback.visit#132",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInferencePass.java",
    "class_name": "com.google.javascript.jscomp.TypeInferencePass",
    "signature": "com.google.javascript.jscomp.TypeInferencePass.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      // Do nothing\n    }",
    "begin_line": 132,
    "end_line": 134,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SecondScopeBuildingCallback.enterScope#139",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInferencePass.java",
    "class_name": "com.google.javascript.jscomp.TypeInferencePass",
    "signature": "com.google.javascript.jscomp.TypeInferencePass.enterScope(com.google.javascript.jscomp.NodeTraversal)",
    "snippet": "@Override\n    public void enterScope(NodeTraversal t) {\n      // Only infer the entry root, rather than the scope root.\n      // This ensures that incremental compilation only touches the root\n      // that\u0027s been swapped out.\n      inferScope(t.getCurrentNode(), t.getScope());\n    }",
    "begin_line": 139,
    "end_line": 144,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SecondScopeBuildingCallback.visit#147",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInferencePass.java",
    "class_name": "com.google.javascript.jscomp.TypeInferencePass",
    "signature": "com.google.javascript.jscomp.TypeInferencePass.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      // Do nothing\n    }",
    "begin_line": 147,
    "end_line": 149,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SecondScopeBuildingCallback.computeCfg#152",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeInferencePass.java",
    "class_name": "com.google.javascript.jscomp.TypeInferencePass",
    "signature": "com.google.javascript.jscomp.TypeInferencePass.computeCfg(com.google.javascript.rhino.Node)",
    "snippet": "private ControlFlowGraph\u003cNode\u003e computeCfg(Node n) {\n    ControlFlowAnalysis cfa \u003d new ControlFlowAnalysis(compiler, false, false);\n    cfa.process(null, n);\n    return cfa.getCfg();\n  }",
    "begin_line": 152,
    "end_line": 156,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.TypeValidator#137",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.TypeValidator(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": " TypeValidator(AbstractCompiler compiler) {\n    this.compiler \u003d compiler;\n    this.typeRegistry \u003d compiler.getTypeRegistry();\n    this.allValueTypes \u003d typeRegistry.createUnionType(\n        STRING_TYPE, NUMBER_TYPE, BOOLEAN_TYPE, NULL_TYPE, VOID_TYPE);\n    this.nullOrUndefined \u003d typeRegistry.createUnionType(\n        NULL_TYPE, VOID_TYPE);\n  }",
    "begin_line": 137,
    "end_line": 144,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.getMismatches#152",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.getMismatches()",
    "snippet": "Iterable\u003cTypeMismatch\u003e getMismatches() {\n    return mismatches;\n  }",
    "begin_line": 152,
    "end_line": 154,
    "comment": "/** \n * Gets a list of type violations. For each violation, one element is the expected type and the other is the type that is actually found. Order is not significant.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.setShouldReport#156",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.setShouldReport(boolean)",
    "snippet": "void setShouldReport(boolean report) {\n    this.shouldReport \u003d report;\n  }",
    "begin_line": 156,
    "end_line": 158,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.expectValidTypeofName#165",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.expectValidTypeofName(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, java.lang.String)",
    "snippet": "void expectValidTypeofName(NodeTraversal t, Node n, String found) {\n    report(JSError.make(t.getSourceName(), n, UNKNOWN_TYPEOF_VALUE, found));\n  }",
    "begin_line": 165,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.expectObject#175",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.expectObject(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, java.lang.String)",
    "snippet": "boolean expectObject(NodeTraversal t, Node n, JSType type, String msg) {\n    if (!type.matchesObjectContext()) {\n      mismatch(t, n, msg, type, OBJECT_TYPE);\n      return false;\n    }\n    return true;\n  }",
    "begin_line": 175,
    "end_line": 181,
    "comment": "/** \n * Expect the type to be an object, or a type convertible to object. If the expectation is not met, issue a warning at the provided node\u0027s source code position.\n * @return True if there was no warning, false if there was a mismatch.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.expectActualObject#187",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.expectActualObject(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, java.lang.String)",
    "snippet": "void expectActualObject(NodeTraversal t, Node n, JSType type, String msg) {\n    if (!type.isObject()) {\n      mismatch(t, n, msg, type, OBJECT_TYPE);\n    }\n  }",
    "begin_line": 187,
    "end_line": 191,
    "comment": "/** \n * Expect the type to be an object. Unlike expectObject, a type convertible to object is not acceptable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.expectAnyObject#197",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.expectAnyObject(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, java.lang.String)",
    "snippet": "void expectAnyObject(NodeTraversal t, Node n, JSType type, String msg) {\n    JSType anyObjectType \u003d getNativeType(NO_OBJECT_TYPE);\n    if (!anyObjectType.isSubtype(type) \u0026\u0026 !type.isEmptyType()) {\n      mismatch(t, n, msg, type, anyObjectType);\n    }\n  }",
    "begin_line": 197,
    "end_line": 202,
    "comment": "/** \n * Expect the type to contain an object sometimes. If the expectation is not met, issue a warning at the provided node\u0027s source code position.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.expectString#209",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.expectString(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, java.lang.String)",
    "snippet": "void expectString(NodeTraversal t, Node n, JSType type, String msg) {\n    if (!type.matchesStringContext()) {\n      mismatch(t, n, msg, type, STRING_TYPE);\n    }\n  }",
    "begin_line": 209,
    "end_line": 213,
    "comment": "/** \n * Expect the type to be a string, or a type convertible to string. If the expectation is not met, issue a warning at the provided node\u0027s source code position.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.expectNumber#220",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.expectNumber(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, java.lang.String)",
    "snippet": "void expectNumber(NodeTraversal t, Node n, JSType type, String msg) {\n    if (!type.matchesNumberContext()) {\n      mismatch(t, n, msg, type, NUMBER_TYPE);\n    }\n  }",
    "begin_line": 220,
    "end_line": 224,
    "comment": "/** \n * Expect the type to be a number, or a type convertible to number. If the expectation is not met, issue a warning at the provided node\u0027s source code position.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.expectBitwiseable#231",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.expectBitwiseable(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, java.lang.String)",
    "snippet": "void expectBitwiseable(NodeTraversal t, Node n, JSType type, String msg) {\n    if (!type.matchesNumberContext() \u0026\u0026 !type.isSubtype(allValueTypes)) {\n      mismatch(t, n, msg, type, allValueTypes);\n    }\n  }",
    "begin_line": 231,
    "end_line": 235,
    "comment": "/** \n * Expect the type to be a valid operand to a bitwise operator. This includes numbers, any type convertible to a number, or any other primitive type (undefined|null|boolean|string).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.expectStringOrNumber#242",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.expectStringOrNumber(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, java.lang.String)",
    "snippet": "void expectStringOrNumber(\n      NodeTraversal t, Node n, JSType type, String msg) {\n    if (!type.matchesNumberContext() \u0026\u0026 !type.matchesStringContext()) {\n      mismatch(t, n, msg, type, NUMBER_STRING);\n    }\n  }",
    "begin_line": 242,
    "end_line": 247,
    "comment": "/** \n * Expect the type to be a number or string, or a type convertible to a number or string. If the expectation is not met, issue a warning at the provided node\u0027s source code position.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.expectNotNullOrUndefined#256",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.expectNotNullOrUndefined(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, java.lang.String, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "boolean expectNotNullOrUndefined(\n      NodeTraversal t, Node n, JSType type, String msg, JSType expectedType) {\n    if (!type.isNoType() \u0026\u0026 !type.isUnknownType() \u0026\u0026\n        type.isSubtype(nullOrUndefined) \u0026\u0026\n        !containsForwardDeclaredUnresolvedName(type)) {\n\n      // There\u0027s one edge case right now that we don\u0027t handle well, and\n      // that we don\u0027t want to warn about.\n      // if (this.x \u003d\u003d null) {\n      //   this.initializeX();\n      //   this.x.foo();\n      // }\n      // In this case, we incorrectly type x because of how we\n      // infer properties locally. See issue 109.\n      // http://code.google.com/p/closure-compiler/issues/detail?id\u003d109\n      //\n      // We do not do this inference globally.\n      if (n.isGetProp() \u0026\u0026\n          !t.inGlobalScope() \u0026\u0026 type.isNullType()) {\n        return true;\n      }\n\n      mismatch(t, n, msg, type, expectedType);\n      return false;\n    }\n    return true;\n  }",
    "begin_line": 256,
    "end_line": 282,
    "comment": "/** \n * Expect the type to be anything but the null or void type. If the expectation is not met, issue a warning at the provided node\u0027s source code position. Note that a union type that includes the void type and at least one other type meets the expectation.\n * @return Whether the expectation was met.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.containsForwardDeclaredUnresolvedName#284",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.containsForwardDeclaredUnresolvedName(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private boolean containsForwardDeclaredUnresolvedName(JSType type) {\n    if (type.isUnionType()) {\n      for (JSType alt : type.toMaybeUnionType().getAlternates()) {\n        if (containsForwardDeclaredUnresolvedName(alt)) {\n          return true;\n        }\n      }\n    }\n    return type.isNoResolvedType();\n  }",
    "begin_line": 284,
    "end_line": 293,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.expectSwitchMatchesCase#299",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.expectSwitchMatchesCase(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "void expectSwitchMatchesCase(NodeTraversal t, Node n, JSType switchType,\n      JSType caseType) {\n    // ECMA-262, page 68, step 3 of evaluation of CaseBlock,\n    // but allowing extra autoboxing.\n    // TODO(user): remove extra conditions when type annotations\n    // in the code base have adapted to the change in the compiler.\n    if (!switchType.canTestForShallowEqualityWith(caseType) \u0026\u0026\n        (caseType.autoboxesTo() \u003d\u003d null ||\n            !caseType.autoboxesTo().isSubtype(switchType))) {\n      mismatch(t, n.getFirstChild(),\n          \"case expression doesn\u0027t match switch\",\n          caseType, switchType);\n    }\n  }",
    "begin_line": 299,
    "end_line": 312,
    "comment": "/** \n * Expect that the type of a switch condition matches the type of its case condition.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.expectIndexMatch#324",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.expectIndexMatch(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "void expectIndexMatch(NodeTraversal t, Node n, JSType objType,\n                        JSType indexType) {\n    Preconditions.checkState(n.isGetElem());\n    Node indexNode \u003d n.getLastChild();\n    if (objType.isStruct()) {\n      report(JSError.make(t.getSourceName(), indexNode,\n                          ILLEGAL_PROPERTY_ACCESS, \"\u0027[]\u0027\", \"struct\"));\n    }\n    if (objType.isUnknownType()) {\n      expectStringOrNumber(t, indexNode, indexType, \"property access\");\n    } else {\n      ObjectType dereferenced \u003d objType.dereference();\n      if (dereferenced !\u003d null \u0026\u0026 dereferenced.getIndexType() !\u003d null) {\n        expectCanAssignTo(t, indexNode, indexType, dereferenced.getIndexType(),\n            \"restricted index type\");\n      } else if (dereferenced !\u003d null \u0026\u0026 dereferenced.isArrayType()) {\n        expectNumber(t, indexNode, indexType, \"array access\");\n      } else if (objType.matchesObjectContext()) {\n        expectString(t, indexNode, indexType, \"property access\");\n      } else {\n        mismatch(t, n, \"only arrays or objects can be accessed\",\n            objType,\n            typeRegistry.createUnionType(ARRAY_TYPE, OBJECT_TYPE));\n      }\n    }\n  }",
    "begin_line": 324,
    "end_line": 349,
    "comment": "/** \n * Expect that the first type can be addressed with GETELEM syntax, and that the second type is the right type for an index into the first type.\n * @param t The node traversal.\n * @param n The GETELEM node to issue warnings on.\n * @param objType The type of the left side of the GETELEM.\n * @param indexType The type inside the brackets of the GETELEM.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.expectCanAssignToPropertyOf#363",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.expectCanAssignToPropertyOf(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node, java.lang.String)",
    "snippet": "boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,\n      JSType leftType, Node owner, String propName) {\n    // The NoType check is a hack to make typedefs work OK.\n    if (!leftType.isNoType() \u0026\u0026 !rightType.isSubtype(leftType)) {\n      // Do not type-check interface methods, because we expect that\n      // they will have dummy implementations that do not match the type\n      // annotations.\n      JSType ownerType \u003d getJSType(owner);\n      if (ownerType.isFunctionPrototypeType()) {\n        FunctionType ownerFn \u003d ownerType.toObjectType().getOwnerFunction();\n        if (ownerFn.isInterface() \u0026\u0026\n            rightType.isFunctionType() \u0026\u0026 leftType.isFunctionType()) {\n          return true;\n        }\n      }\n\n      mismatch(t, n,\n          \"assignment to property \" + propName + \" of \" +\n          getReadableJSTypeName(owner, true),\n          rightType, leftType);\n      return false;\n    }\n    return true;\n  }",
    "begin_line": 363,
    "end_line": 386,
    "comment": "/** \n * Expect that the first type can be assigned to a symbol of the second type.\n * @param t The node traversal.\n * @param n The node to issue warnings on.\n * @param rightType The type on the RHS of the assign.\n * @param leftType The type of the symbol on the LHS of the assign.\n * @param owner The owner of the property being assigned to.\n * @param propName The name of the property being assigned to.\n * @return True if the types matched, false otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.expectCanAssignTo#399",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.expectCanAssignTo(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType, java.lang.String)",
    "snippet": "boolean expectCanAssignTo(NodeTraversal t, Node n, JSType rightType,\n      JSType leftType, String msg) {\n    if (!rightType.isSubtype(leftType)) {\n      mismatch(t, n, msg, rightType, leftType);\n      return false;\n    }\n    return true;\n  }",
    "begin_line": 399,
    "end_line": 406,
    "comment": "/** \n * Expect that the first type can be assigned to a symbol of the second type.\n * @param t The node traversal.\n * @param n The node to issue warnings on.\n * @param rightType The type on the RHS of the assign.\n * @param leftType The type of the symbol on the LHS of the assign.\n * @param msg An extra message for the mismatch warning, if necessary.\n * @return True if the types matched, false otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.expectArgumentMatchesParameter#419",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.expectArgumentMatchesParameter(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node, int)",
    "snippet": "void expectArgumentMatchesParameter(NodeTraversal t, Node n, JSType argType,\n      JSType paramType, Node callNode, int ordinal) {\n    if (!argType.isSubtype(paramType)) {\n      mismatch(t, n,\n          String.format(\"actual parameter %d of %s does not match \" +\n              \"formal parameter\", ordinal,\n              getReadableJSTypeName(callNode.getFirstChild(), false)),\n          argType, paramType);\n    }\n  }",
    "begin_line": 419,
    "end_line": 428,
    "comment": "/** \n * Expect that the type of an argument matches the type of the parameter that it\u0027s fulfilling.\n * @param t The node traversal.\n * @param n The node to issue warnings on.\n * @param argType The type of the argument.\n * @param paramType The type of the parameter.\n * @param callNode The call node, to help with the warning message.\n * @param ordinal The argument ordinal, to help with the warning message.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.expectCanOverride#443",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.expectCanOverride(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType, java.lang.String, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "void expectCanOverride(NodeTraversal t, Node n, JSType overridingType,\n      JSType hiddenType, String propertyName, JSType ownerType) {\n    if (!overridingType.isSubtype(hiddenType)) {\n      registerMismatch(overridingType, hiddenType,\n          report(t.makeError(n, HIDDEN_PROPERTY_MISMATCH, propertyName,\n            ownerType.toString(), hiddenType.toString(),\n            overridingType.toString())));\n    }\n  }",
    "begin_line": 443,
    "end_line": 451,
    "comment": "/** \n * Expect that the first type can override a property of the second type.\n * @param t The node traversal.\n * @param n The node to issue warnings on.\n * @param overridingType The overriding type.\n * @param hiddenType The type of the property being overridden.\n * @param propertyName The name of the property, for use in thewarning message.\n * @param ownerType The type of the owner of the property, for usein the warning message.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.expectSuperType#461",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.expectSuperType(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "void expectSuperType(NodeTraversal t, Node n, ObjectType superObject,\n      ObjectType subObject) {\n    FunctionType subCtor \u003d subObject.getConstructor();\n    ObjectType implicitProto \u003d subObject.getImplicitPrototype();\n    ObjectType declaredSuper \u003d\n        implicitProto \u003d\u003d null ? null : implicitProto.getImplicitPrototype();\n    if (declaredSuper !\u003d null \u0026\u0026\n        !(superObject instanceof UnknownType) \u0026\u0026\n        !declaredSuper.isEquivalentTo(superObject)) {\n      if (declaredSuper.isEquivalentTo(getNativeType(OBJECT_TYPE))) {\n        registerMismatch(superObject, declaredSuper, report(\n            t.makeError(n, MISSING_EXTENDS_TAG_WARNING, subObject.toString())));\n      } else {\n        mismatch(t.getSourceName(), n,\n            \"mismatch in declaration of superclass type\",\n            superObject, declaredSuper);\n      }\n\n      // Correct the super type.\n      if (!subCtor.hasCachedValues()) {\n        subCtor.setPrototypeBasedOn(superObject);\n      }\n    }\n  }",
    "begin_line": 461,
    "end_line": 484,
    "comment": "/** \n * Expect that the first type is the direct superclass of the second type.\n * @param t The node traversal.\n * @param n The node where warnings should point to.\n * @param superObject The expected super instance type.\n * @param subObject The sub instance type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.expectCanCast#495",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.expectCanCast(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "void expectCanCast(NodeTraversal t, Node n, JSType castType, JSType type) {\n    if (!type.canCastTo(castType)) {\n      registerMismatch(type, castType, report(t.makeError(n, INVALID_CAST,\n          type.toString(), castType.toString())));\n    }\n  }",
    "begin_line": 495,
    "end_line": 500,
    "comment": "/** \n * Expect that the first type can be cast to the second type. The first type must have some relationship with the second.\n * @param t The node traversal.\n * @param n The node where warnings should point.\n * @param type The type being cast from.\n * @param castType The type being cast to.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.expectUndeclaredVariable#516",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.expectUndeclaredVariable(java.lang.String, com.google.javascript.jscomp.CompilerInput, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope.Var, java.lang.String, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "Var expectUndeclaredVariable(String sourceName, CompilerInput input,\n      Node n, Node parent, Var var, String variableName, JSType newType) {\n    Var newVar \u003d var;\n    boolean allowDupe \u003d false;\n    if (n.isGetProp() ||\n        NodeUtil.isObjectLitKey(n, parent)) {\n      JSDocInfo info \u003d n.getJSDocInfo();\n      if (info \u003d\u003d null) {\n        info \u003d parent.getJSDocInfo();\n      }\n      allowDupe \u003d\n          info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n    }\n\n    JSType varType \u003d var.getType();\n\n    // Only report duplicate declarations that have types. Other duplicates\n    // will be reported by the syntactic scope creator later in the\n    // compilation process.\n    if (varType !\u003d null \u0026\u0026\n        varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026\n        newType !\u003d null \u0026\u0026\n        newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n      // If there are two typed declarations of the same variable, that\n      // is an error and the second declaration is ignored, except in the\n      // case of native types. A null input type means that the declaration\n      // was made in TypedScopeCreator#createInitialScope and is a\n      // native type. We should redeclare it at the new input site.\n      if (var.input \u003d\u003d null) {\n        Scope s \u003d var.getScope();\n        s.undeclare(var);\n        newVar \u003d s.declare(variableName, n, varType, input, false);\n\n        n.setJSType(varType);\n        if (parent.isVar()) {\n          if (n.getFirstChild() !\u003d null) {\n            n.getFirstChild().setJSType(varType);\n          }\n        } else {\n          Preconditions.checkState(parent.isFunction());\n          parent.setJSType(varType);\n        }\n      } else {\n        // Always warn about duplicates if the overridden type does not\n        // match the original type.\n        //\n        // If the types match, suppress the warning iff there was a @suppress\n        // tag, or if the original declaration was a stub.\n        if (!(allowDupe ||\n              var.getParentNode().isExprResult()) ||\n            !newType.isEquivalentTo(varType)) {\n          report(JSError.make(sourceName, n, DUP_VAR_DECLARATION,\n              variableName, newType.toString(), var.getInputName(),\n              String.valueOf(var.nameNode.getLineno()),\n              varType.toString()));\n        }\n      }\n    }\n\n    return newVar;\n  }",
    "begin_line": 516,
    "end_line": 576,
    "comment": "/** \n * Expect that the given variable has not been declared with a type.\n * @param sourceName The name of the source file we\u0027re in.\n * @param n The node where warnings should point to.\n * @param parent The parent of {@code n}.\n * @param var The variable that we\u0027re checking.\n * @param variableName The name of the variable.\n * @param newType The type being applied to the variable. Mostly just herefor the benefit of the warning.\n * @return The variable we end up with. Most of the time, this will justbe  {@code var}, but in some rare cases we will need to declare a new var with new source info.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.expectAllInterfaceProperties#582",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.expectAllInterfaceProperties(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "void expectAllInterfaceProperties(NodeTraversal t, Node n,\n      FunctionType type) {\n    ObjectType instance \u003d type.getInstanceType();\n    for (ObjectType implemented : type.getAllImplementedInterfaces()) {\n      if (implemented.getImplicitPrototype() !\u003d null) {\n        for (String prop :\n             implemented.getImplicitPrototype().getOwnPropertyNames()) {\n          expectInterfaceProperty(t, n, instance, implemented, prop);\n        }\n      }\n    }\n  }",
    "begin_line": 582,
    "end_line": 593,
    "comment": "/** \n * Expect that all properties on interfaces that this type implements are implemented and correctly typed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.expectInterfaceProperty#599",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.expectInterfaceProperty(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.ObjectType, java.lang.String)",
    "snippet": "private void expectInterfaceProperty(NodeTraversal t, Node n,\n      ObjectType instance, ObjectType implementedInterface, String prop) {\n    StaticSlot\u003cJSType\u003e propSlot \u003d instance.getSlot(prop);\n    if (propSlot \u003d\u003d null) {\n      // Not implemented\n      String sourceName \u003d n.getSourceFileName();\n      sourceName \u003d sourceName \u003d\u003d null ? \"\" : sourceName;\n      registerMismatch(instance, implementedInterface,\n          report(JSError.make(sourceName, n,\n          INTERFACE_METHOD_NOT_IMPLEMENTED,\n          prop, implementedInterface.toString(), instance.toString())));\n    } else {\n      Node propNode \u003d propSlot.getDeclaration() \u003d\u003d null ?\n          null : propSlot.getDeclaration().getNode();\n\n      // Fall back on the constructor node if we can\u0027t find a node for the\n      // property.\n      propNode \u003d propNode \u003d\u003d null ? n : propNode;\n\n      JSType found \u003d propSlot.getType();\n      JSType required\n          \u003d implementedInterface.getImplicitPrototype().getPropertyType(prop);\n      found \u003d found.restrictByNotNullOrUndefined();\n      required \u003d required.restrictByNotNullOrUndefined();\n      if (!found.isSubtype(required)) {\n        // Implemented, but not correctly typed\n        FunctionType constructor \u003d\n            implementedInterface.toObjectType().getConstructor();\n        registerMismatch(found, required, report(t.makeError(propNode,\n            HIDDEN_INTERFACE_PROPERTY_MISMATCH, prop,\n            constructor.getTopMostDefiningType(prop).toString(),\n            required.toString(), found.toString())));\n      }\n    }\n  }",
    "begin_line": 599,
    "end_line": 633,
    "comment": "/** \n * Expect that the property in an interface that this type implements is implemented and correctly typed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.mismatch#638",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.mismatch(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private void mismatch(NodeTraversal t, Node n,\n                        String msg, JSType found, JSType required) {\n    mismatch(t.getSourceName(), n, msg, found, required);\n  }",
    "begin_line": 638,
    "end_line": 641,
    "comment": "/** \n * Report a type mismatch\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.mismatch#643",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.mismatch(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSTypeNative)",
    "snippet": "private void mismatch(NodeTraversal t, Node n,\n                        String msg, JSType found, JSTypeNative required) {\n    mismatch(t, n, msg, found, getNativeType(required));\n  }",
    "begin_line": 643,
    "end_line": 646,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.mismatch#648",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.mismatch(java.lang.String, com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private void mismatch(String sourceName, Node n,\n                        String msg, JSType found, JSType required) {\n    registerMismatch(found, required, report(\n        JSError.make(sourceName, n, TYPE_MISMATCH_WARNING,\n                     formatFoundRequired(msg, found, required))));\n  }",
    "begin_line": 648,
    "end_line": 653,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.registerMismatch#655",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.registerMismatch(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.JSError)",
    "snippet": "private void registerMismatch(JSType found, JSType required, JSError error) {\n    // Don\u0027t register a mismatch for differences in null or undefined or if the\n    // code didn\u0027t downcast.\n    found \u003d found.restrictByNotNullOrUndefined();\n    required \u003d required.restrictByNotNullOrUndefined();\n    if (found.isSubtype(required) || required.isSubtype(found)) {\n      return;\n    }\n\n    mismatches.add(new TypeMismatch(found, required, error));\n    if (found.isFunctionType() \u0026\u0026\n        required.isFunctionType()) {\n      FunctionType fnTypeA \u003d found.toMaybeFunctionType();\n      FunctionType fnTypeB \u003d required.toMaybeFunctionType();\n      Iterator\u003cNode\u003e paramItA \u003d fnTypeA.getParameters().iterator();\n      Iterator\u003cNode\u003e paramItB \u003d fnTypeB.getParameters().iterator();\n      while (paramItA.hasNext() \u0026\u0026 paramItB.hasNext()) {\n        registerIfMismatch(paramItA.next().getJSType(),\n            paramItB.next().getJSType(), error);\n      }\n\n      registerIfMismatch(\n          fnTypeA.getReturnType(), fnTypeB.getReturnType(), error);\n    }\n  }",
    "begin_line": 655,
    "end_line": 679,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.registerIfMismatch#681",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.registerIfMismatch(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.JSError)",
    "snippet": "private void registerIfMismatch(\n      JSType found, JSType required, JSError error) {\n    if (found !\u003d null \u0026\u0026 required !\u003d null \u0026\u0026\n        !found.isSubtype(required)) {\n      registerMismatch(found, required, error);\n    }\n  }",
    "begin_line": 681,
    "end_line": 687,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.formatFoundRequired#692",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.formatFoundRequired(java.lang.String, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private String formatFoundRequired(String description, JSType found,\n      JSType required) {\n    return MessageFormat.format(FOUND_REQUIRED, description, found, required);\n  }",
    "begin_line": 692,
    "end_line": 695,
    "comment": "/** \n * Formats a found/required error message.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.getReadableJSTypeName#708",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.getReadableJSTypeName(com.google.javascript.rhino.Node, boolean)",
    "snippet": "String getReadableJSTypeName(Node n, boolean dereference) {\n    // If we\u0027re analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n      ObjectType objectType \u003d getJSType(n.getFirstChild()).dereference();\n      if (objectType !\u003d null) {\n        String propName \u003d n.getLastChild().getString();\n        if (objectType.getConstructor() !\u003d null \u0026\u0026\n            objectType.getConstructor().isInterface()) {\n          objectType \u003d FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          // classes\n          while (objectType !\u003d null \u0026\u0026 !objectType.hasOwnProperty(propName)) {\n            objectType \u003d objectType.getImplicitPrototype();\n          }\n        }\n\n        // Don\u0027t show complex function names or anonymous types.\n        // Instead, try to get a human-readable type name.\n        if (objectType !\u003d null \u0026\u0026\n            (objectType.getConstructor() !\u003d null ||\n             objectType.isFunctionPrototypeType())) {\n          return objectType.toString() + \".\" + propName;\n        }\n      }\n    }\n\n    JSType type \u003d getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced \u003d type.dereference();\n      if (dereferenced !\u003d null) {\n        type \u003d dereferenced;\n      }\n    }\n\n    String qualifiedName \u003d n.getQualifiedName();\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() !\u003d null \u0026\u0026\n         type.toObjectType().getConstructor() !\u003d null)) {\n      return type.toString();\n    } else if (qualifiedName !\u003d null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      // Don\u0027t show complex function names.\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }",
    "begin_line": 708,
    "end_line": 758,
    "comment": "/** \n * Given a node, get a human-readable name for the type of that node so that will be easy for the programmer to find the original declaration. For example, if SubFoo\u0027s property \"bar\" might have the human-readable name \"Foo.prototype.bar\".\n * @param n The node.\n * @param dereference If true, the type of the node will be dereferencedto an Object type, if possible.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.getJSType#764",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.getJSType(com.google.javascript.rhino.Node)",
    "snippet": "private JSType getJSType(Node n) {\n    JSType jsType \u003d n.getJSType();\n    if (jsType \u003d\u003d null) {\n      // TODO(user): This branch indicates a compiler bug, not worthy of\n      // halting the compilation but we should log this and analyze to track\n      // down why it happens. This is not critical and will be resolved over\n      // time as the type checker is extended.\n      return getNativeType(UNKNOWN_TYPE);\n    } else {\n      return jsType;\n    }\n  }",
    "begin_line": 764,
    "end_line": 775,
    "comment": "/** \n * This method gets the JSType from the Node argument and verifies that it is present.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.getNativeType#777",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
    "snippet": "private JSType getNativeType(JSTypeNative typeId) {\n    return typeRegistry.getNativeType(typeId);\n  }",
    "begin_line": 777,
    "end_line": 779,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeValidator.report#781",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.report(com.google.javascript.jscomp.JSError)",
    "snippet": "private JSError report(JSError error) {\n    if (shouldReport) {\n      compiler.report(error);\n    }\n    return error;\n  }",
    "begin_line": 781,
    "end_line": 786,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeMismatch.TypeMismatch#805",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.TypeMismatch(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.JSError)",
    "snippet": " TypeMismatch(JSType a, JSType b, JSError src) {\n      this.typeA \u003d a;\n      this.typeB \u003d b;\n      this.src \u003d src;\n    }",
    "begin_line": 805,
    "end_line": 809,
    "comment": "/** \n * It\u0027s the responsibility of the class that creates the {@code TypeMismatch} to ensure that {@code a} and {@code b} arenon-matching types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeMismatch.equals#811",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object object) {\n      if (object instanceof TypeMismatch) {\n        TypeMismatch that \u003d (TypeMismatch) object;\n        return (that.typeA.isEquivalentTo(this.typeA)\n                \u0026\u0026 that.typeB.isEquivalentTo(this.typeB))\n            || (that.typeB.isEquivalentTo(this.typeA)\n                \u0026\u0026 that.typeA.isEquivalentTo(this.typeB));\n      }\n      return false;\n    }",
    "begin_line": 811,
    "end_line": 820,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeMismatch.hashCode#822",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.hashCode()",
    "snippet": "@Override public int hashCode() {\n      return Objects.hashCode(typeA, typeB);\n    }",
    "begin_line": 822,
    "end_line": 824,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeMismatch.toString#826",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypeValidator.java",
    "class_name": "com.google.javascript.jscomp.TypeValidator",
    "signature": "com.google.javascript.jscomp.TypeValidator.toString()",
    "snippet": "@Override public String toString() {\n      return \"(\" + typeA + \", \" + typeB + \")\";\n    }",
    "begin_line": 826,
    "end_line": 828,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeferredSetType.DeferredSetType#163",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.DeferredSetType(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
    "snippet": " DeferredSetType(Node node, JSType type) {\n      Preconditions.checkNotNull(node);\n      Preconditions.checkNotNull(type);\n      this.node \u003d node;\n      this.type \u003d type;\n\n      // Other parts of this pass may read off the node.\n      // (like when we set the LHS of an assign with a typed RHS function.)\n      node.setJSType(type);\n    }",
    "begin_line": 163,
    "end_line": 172,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeferredSetType.resolve#174",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.resolve(com.google.javascript.jscomp.Scope)",
    "snippet": "void resolve(Scope scope) {\n      node.setJSType(type.resolve(typeParsingErrorReporter, scope));\n    }",
    "begin_line": 174,
    "end_line": 176,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeferredSetType.TypedScopeCreator#179",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.TypedScopeCreator(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": " TypedScopeCreator(AbstractCompiler compiler) {\n    this(compiler, compiler.getCodingConvention());\n  }",
    "begin_line": 179,
    "end_line": 181,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeferredSetType.TypedScopeCreator#183",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.TypedScopeCreator(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.CodingConvention)",
    "snippet": " TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention) {\n    this.compiler \u003d compiler;\n    this.validator \u003d compiler.getTypeValidator();\n    this.codingConvention \u003d codingConvention;\n    this.typeRegistry \u003d compiler.getTypeRegistry();\n    this.typeParsingErrorReporter \u003d typeRegistry.getErrorReporter();\n    this.unknownType \u003d typeRegistry.getNativeObjectType(UNKNOWN_TYPE);\n  }",
    "begin_line": 183,
    "end_line": 191,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeferredSetType.createScope#198",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.createScope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
    "snippet": "@Override\n  public Scope createScope(Node root, Scope parent) {\n    // Constructing the global scope is very different than constructing\n    // inner scopes, because only global scopes can contain named classes that\n    // show up in the type registry.\n    Scope newScope \u003d null;\n    AbstractScopeBuilder scopeBuilder \u003d null;\n    if (parent \u003d\u003d null) {\n      JSType globalThis \u003d\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n\n      // Mark the main root, the externs root, and the src root\n      // with the global this type.\n      root.setJSType(globalThis);\n      root.getFirstChild().setJSType(globalThis);\n      root.getLastChild().setJSType(globalThis);\n\n      // Run a first-order analysis over the syntax tree.\n      (new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults))\n          .process(root.getFirstChild(), root.getLastChild());\n\n      // Find all the classes in the global scope.\n      newScope \u003d createInitialScope(root);\n\n      GlobalScopeBuilder globalScopeBuilder \u003d new GlobalScopeBuilder(newScope);\n      scopeBuilder \u003d globalScopeBuilder;\n      NodeTraversal.traverse(compiler, root, scopeBuilder);\n    } else {\n      newScope \u003d new Scope(parent, root);\n      LocalScopeBuilder localScopeBuilder \u003d new LocalScopeBuilder(newScope);\n      scopeBuilder \u003d localScopeBuilder;\n      localScopeBuilder.build();\n    }\n\n    scopeBuilder.resolveStubDeclarations();\n    scopeBuilder.resolveTypes();\n\n    // Gather the properties in each function that we found in the\n    // global scope, if that function has a @this type that we can\n    // build properties on.\n    for (Node functionNode : scopeBuilder.nonExternFunctions) {\n      JSType type \u003d functionNode.getJSType();\n      if (type !\u003d null \u0026\u0026 type.isFunctionType()) {\n        FunctionType fnType \u003d type.toMaybeFunctionType();\n        JSType fnThisType \u003d fnType.getTypeOfThis();\n        if (!fnThisType.isUnknownType()) {\n          NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));\n        }\n      }\n    }\n\n    if (parent \u003d\u003d null) {\n      codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes,\n          delegateCallingConventions);\n    }\n    return newScope;\n  }",
    "begin_line": 198,
    "end_line": 255,
    "comment": "/** \n * Creates a scope with all types declared. Declares newly discovered types and type properties in the type registry.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeferredSetType.patchGlobalScope#264",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.patchGlobalScope(com.google.javascript.jscomp.Scope, com.google.javascript.rhino.Node)",
    "snippet": "void patchGlobalScope(Scope globalScope, Node scriptRoot) {\n    // Preconditions: This is supposed to be called only on (named) SCRIPT nodes\n    // and a global typed scope should have been generated already.\n    Preconditions.checkState(scriptRoot.isScript());\n    Preconditions.checkNotNull(globalScope);\n    Preconditions.checkState(globalScope.isGlobal());\n\n    String scriptName \u003d NodeUtil.getSourceName(scriptRoot);\n    Preconditions.checkNotNull(scriptName);\n    for (Node node : ImmutableList.copyOf(functionAnalysisResults.keySet())) {\n      if (scriptName.equals(NodeUtil.getSourceName(node))) {\n        functionAnalysisResults.remove(node);\n      }\n    }\n\n    (new FirstOrderFunctionAnalyzer(\n        compiler, functionAnalysisResults)).process(null, scriptRoot);\n\n    // TODO(bashir): Variable declaration is not the only side effect of last\n    // global scope generation but here we only wipe that part off!\n\n    // Remove all variables that were previously declared in this scripts.\n    // First find all vars to remove then remove them because of iterator!\n    Iterator\u003cVar\u003e varIter \u003d globalScope.getVars();\n    List\u003cVar\u003e varsToRemove \u003d Lists.newArrayList();\n    while (varIter.hasNext()) {\n      Var oldVar \u003d varIter.next();\n      if (scriptName.equals(oldVar.getInputName())) {\n        varsToRemove.add(oldVar);\n      }\n    }\n    for (Var var : varsToRemove) {\n      globalScope.undeclare(var);\n      globalScope.getTypeOfThis().toObjectType().removeProperty(var.getName());\n    }\n\n    // Now re-traverse the given script.\n    GlobalScopeBuilder scopeBuilder \u003d new GlobalScopeBuilder(globalScope);\n    NodeTraversal.traverse(compiler, scriptRoot, scopeBuilder);\n  }",
    "begin_line": 264,
    "end_line": 303,
    "comment": "/** \n * Patches a given global scope by removing variables previously declared in a script and re-traversing a new version of that script.\n * @param globalScope The global scope generated by {@code createScope}.\n * @param scriptRoot The script that is modified.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeferredSetType.createInitialScope#310",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.createInitialScope(com.google.javascript.rhino.Node)",
    "snippet": "@VisibleForTesting\n  Scope createInitialScope(Node root) {\n\n    NodeTraversal.traverse(\n        compiler, root, new DiscoverEnumsAndTypedefs(typeRegistry));\n\n    Scope s \u003d Scope.createGlobalScope(root);\n    declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);\n    declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);\n    declareNativeFunctionType(s, DATE_FUNCTION_TYPE);\n    declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);\n    declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);\n    declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);\n    declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);\n    declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);\n    declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);\n    declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);\n    declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);\n    declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);\n    declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);\n    declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);\n    declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);\n    declareNativeValueType(s, \"undefined\", VOID_TYPE);\n\n    // There is no longer a need to special case ActiveXObject\n    // but this remains here until we can get the extern forks\n    // cleaned up.\n    declareNativeValueType(s, \"ActiveXObject\", FUNCTION_INSTANCE_TYPE);\n\n    return s;\n  }",
    "begin_line": 310,
    "end_line": 339,
    "comment": "/** \n * Create the outermost scope. This scope contains native binding such as {@code Object},  {@code Date}, etc.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeferredSetType.declareNativeFunctionType#341",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.declareNativeFunctionType(com.google.javascript.jscomp.Scope, com.google.javascript.rhino.jstype.JSTypeNative)",
    "snippet": "private void declareNativeFunctionType(Scope scope, JSTypeNative tId) {\n    FunctionType t \u003d typeRegistry.getNativeFunctionType(tId);\n    declareNativeType(scope, t.getInstanceType().getReferenceName(), t);\n    declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());\n  }",
    "begin_line": 341,
    "end_line": 346,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeferredSetType.declareNativeValueType#348",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.declareNativeValueType(com.google.javascript.jscomp.Scope, java.lang.String, com.google.javascript.rhino.jstype.JSTypeNative)",
    "snippet": "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId) {\n    declareNativeType(scope, name, typeRegistry.getNativeType(tId));\n  }",
    "begin_line": 348,
    "end_line": 351,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeferredSetType.declareNativeType#353",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.declareNativeType(com.google.javascript.jscomp.Scope, java.lang.String, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private void declareNativeType(Scope scope, String name, JSType t) {\n    scope.declare(name, null, t, null, false);\n  }",
    "begin_line": 353,
    "end_line": 355,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiscoverEnumsAndTypedefs.DiscoverEnumsAndTypedefs#361",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.DiscoverEnumsAndTypedefs(com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": " DiscoverEnumsAndTypedefs(JSTypeRegistry registry) {\n      this.registry \u003d registry;\n    }",
    "begin_line": 361,
    "end_line": 363,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiscoverEnumsAndTypedefs.visit#366",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public void visit(NodeTraversal t, Node node, Node parent) {\n      Node nameNode \u003d null;\n      switch (node.getType()) {\n        case Token.VAR:\n          for (Node child \u003d node.getFirstChild();\n               child !\u003d null; child \u003d child.getNext()) {\n            identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getBestJSDocInfo(child));\n          }\n          break;\n        case Token.EXPR_RESULT:\n          Node firstChild \u003d node.getFirstChild();\n          if (firstChild.isAssign()) {\n            identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());\n          } else {\n            identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());\n          }\n          break;\n      }\n    }",
    "begin_line": 366,
    "end_line": 389,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiscoverEnumsAndTypedefs.identifyNameNode#391",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.identifyNameNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.JSDocInfo)",
    "snippet": "private void identifyNameNode(\n        Node nameNode, Node valueNode, JSDocInfo info) {\n      if (nameNode.isQualifiedName()) {\n        if (info !\u003d null) {\n          if (info.hasEnumParameterType()) {\n            registry.identifyNonNullableName(nameNode.getQualifiedName());\n          } else if (info.hasTypedefType()) {\n            registry.identifyNonNullableName(nameNode.getQualifiedName());\n          }\n        }\n      }\n    }",
    "begin_line": 391,
    "end_line": 402,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiscoverEnumsAndTypedefs.getNativeType#405",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
    "snippet": "private JSType getNativeType(JSTypeNative nativeType) {\n    return typeRegistry.getNativeType(nativeType);\n  }",
    "begin_line": 405,
    "end_line": 407,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.AbstractScopeBuilder#456",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.AbstractScopeBuilder(com.google.javascript.jscomp.Scope)",
    "snippet": "private AbstractScopeBuilder(Scope scope) {\n      this.scope \u003d scope;\n    }",
    "begin_line": 456,
    "end_line": 458,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.setDeferredType#460",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.setDeferredType(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "void setDeferredType(Node node, JSType type) {\n      deferredSetTypes.add(new DeferredSetType(node, type));\n    }",
    "begin_line": 460,
    "end_line": 462,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.resolveTypes#464",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.resolveTypes()",
    "snippet": "void resolveTypes() {\n      // Resolve types and attach them to nodes.\n      for (DeferredSetType deferred : deferredSetTypes) {\n        deferred.resolve(scope);\n      }\n\n      // Resolve types and attach them to scope slots.\n      Iterator\u003cVar\u003e vars \u003d scope.getVars();\n      while (vars.hasNext()) {\n        vars.next().resolveType(typeParsingErrorReporter);\n      }\n\n      // Tell the type registry that any remaining types\n      // are unknown.\n      typeRegistry.resolveTypesInScope(scope);\n    }",
    "begin_line": 464,
    "end_line": 479,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.shouldTraverse#482",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      inputId \u003d t.getInputId();\n      if (n.isFunction() ||\n          n.isScript()) {\n        Preconditions.checkNotNull(inputId);\n        sourceName \u003d NodeUtil.getSourceName(n);\n      }\n\n      // We do want to traverse the name of a named function, but we don\u0027t\n      // want to traverse the arguments or body.\n      boolean descend \u003d parent \u003d\u003d null || !parent.isFunction() ||\n          n \u003d\u003d parent.getFirstChild() || parent \u003d\u003d scope.getRootNode();\n\n      if (descend) {\n        // Handle hoisted functions on pre-order traversal, so that they\n        // get hit before other things in the scope.\n        if (NodeUtil.isStatementParent(n)) {\n          for (Node child \u003d n.getFirstChild();\n               child !\u003d null;\n               child \u003d child.getNext()) {\n            if (NodeUtil.isHoistedFunctionDeclaration(child)) {\n              defineFunctionLiteral(child);\n            }\n          }\n        }\n      }\n\n      return descend;\n    }",
    "begin_line": 482,
    "end_line": 510,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.visit#513",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      inputId \u003d t.getInputId();\n      attachLiteralTypes(t, n);\n\n      switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n, parent);\n          checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() \u003d\u003d null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // Hoisted functions are handled during pre-traversal.\n          if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n            defineFunctionLiteral(n);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // Handle initialization of properties.\n          Node firstChild \u003d n.getFirstChild();\n          if (firstChild.isGetProp() \u0026\u0026\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n);\n          break;\n\n        case Token.VAR:\n          defineVar(n);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.isExprResult() \u0026\u0026\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }\n\n      // Analyze any @lends object literals in this statement.\n      if (n.getParent() !\u003d null \u0026\u0026 NodeUtil.isStatement(n) \u0026\u0026\n          lentObjectLiterals !\u003d null) {\n        for (Node objLit : lentObjectLiterals) {\n          defineObjectLiteral(objLit);\n        }\n        lentObjectLiterals.clear();\n      }\n    }",
    "begin_line": 513,
    "end_line": 569,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.attachLiteralTypes#571",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.attachLiteralTypes(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
    "snippet": "private void attachLiteralTypes(NodeTraversal t, Node n) {\n      switch (n.getType()) {\n        case Token.NULL:\n          n.setJSType(getNativeType(NULL_TYPE));\n          break;\n\n        case Token.VOID:\n          n.setJSType(getNativeType(VOID_TYPE));\n          break;\n\n        case Token.STRING:\n          n.setJSType(getNativeType(STRING_TYPE));\n          break;\n\n        case Token.NUMBER:\n          n.setJSType(getNativeType(NUMBER_TYPE));\n          break;\n\n        case Token.TRUE:\n        case Token.FALSE:\n          n.setJSType(getNativeType(BOOLEAN_TYPE));\n          break;\n\n        case Token.REGEXP:\n          n.setJSType(getNativeType(REGEXP_TYPE));\n          break;\n\n        case Token.OBJECTLIT:\n          JSDocInfo info \u003d n.getJSDocInfo();\n          if (info !\u003d null \u0026\u0026\n              info.getLendsName() !\u003d null) {\n            if (lentObjectLiterals \u003d\u003d null) {\n              lentObjectLiterals \u003d Lists.newArrayList();\n            }\n            lentObjectLiterals.add(n);\n          } else {\n            defineObjectLiteral(n);\n          }\n          break;\n\n          // NOTE(nicksantos): If we ever support Array tuples,\n          // we will need to put ARRAYLIT here as well.\n      }\n    }",
    "begin_line": 571,
    "end_line": 614,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.defineObjectLiteral#616",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.defineObjectLiteral(com.google.javascript.rhino.Node)",
    "snippet": "private void defineObjectLiteral(Node objectLit) {\n      // Handle the @lends annotation.\n      JSType type \u003d null;\n      JSDocInfo info \u003d objectLit.getJSDocInfo();\n      if (info !\u003d null \u0026\u0026 info.getLendsName() !\u003d null) {\n        String lendsName \u003d info.getLendsName();\n        Var lendsVar \u003d scope.getVar(lendsName);\n        if (lendsVar \u003d\u003d null) {\n          compiler.report(\n              JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));\n        } else {\n          type \u003d lendsVar.getType();\n          if (type \u003d\u003d null) {\n            type \u003d unknownType;\n          }\n          if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE))) {\n            compiler.report(\n                JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT,\n                    lendsName, type.toString()));\n            type \u003d null;\n          } else {\n            objectLit.setJSType(type);\n          }\n        }\n      }\n\n      info \u003d NodeUtil.getBestJSDocInfo(objectLit);\n      Node lValue \u003d NodeUtil.getBestLValue(objectLit);\n      String lValueName \u003d NodeUtil.getBestLValueName(lValue);\n      boolean createdEnumType \u003d false;\n      if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n        type \u003d createEnumTypeFromNodes(objectLit, lValueName, info, lValue);\n        createdEnumType \u003d true;\n      }\n\n      if (type \u003d\u003d null) {\n        type \u003d typeRegistry.createAnonymousObjectType(info);\n      }\n\n      setDeferredType(objectLit, type);\n\n      // If this is an enum, the properties were already taken care of above.\n      processObjectLitProperties(\n          objectLit, ObjectType.cast(objectLit.getJSType()), !createdEnumType);\n    }",
    "begin_line": 616,
    "end_line": 660,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.processObjectLitProperties#670",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.processObjectLitProperties(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.ObjectType, boolean)",
    "snippet": "void processObjectLitProperties(\n        Node objLit, ObjectType objLitType,\n        boolean declareOnOwner) {\n      for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null;\n           keyNode \u003d keyNode.getNext()) {\n        Node value \u003d keyNode.getFirstChild();\n        String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n        JSDocInfo info \u003d keyNode.getJSDocInfo();\n        JSType valueType \u003d\n            getDeclaredType(keyNode.getSourceFileName(), info, keyNode, value);\n        JSType keyType \u003d  objLitType.isEnumType() ?\n            objLitType.toMaybeEnumType().getElementsType() :\n            NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n\n        // Try to declare this property in the current scope if it\n        // has an authoritative name.\n        String qualifiedName \u003d NodeUtil.getBestLValueName(keyNode);\n        if (qualifiedName !\u003d null) {\n          boolean inferred \u003d keyType \u003d\u003d null;\n          defineSlot(keyNode, objLit, qualifiedName, keyType, inferred);\n        } else if (keyType !\u003d null) {\n          setDeferredType(keyNode, keyType);\n        }\n\n        if (keyType !\u003d null \u0026\u0026 objLitType !\u003d null \u0026\u0026 declareOnOwner) {\n          // Declare this property on its object literal.\n          boolean isExtern \u003d keyNode.isFromExterns();\n          objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n        }\n      }\n    }",
    "begin_line": 670,
    "end_line": 700,
    "comment": "/** \n * Process an object literal and all the types on it.\n * @param objLit The OBJECTLIT node.\n * @param objLitType The type of the OBJECTLIT node. This might be a namedtype, because of the lends annotation.\n * @param declareOnOwner If true, declare properties on the objLitType aswell. If false, the caller should take care of this.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.getDeclaredTypeInAnnotation#708",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.getDeclaredTypeInAnnotation(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.JSDocInfo)",
    "snippet": "private JSType getDeclaredTypeInAnnotation(String sourceName,\n        Node node, JSDocInfo info) {\n      JSType jsType \u003d null;\n      Node objNode \u003d\n          node.isGetProp() ? node.getFirstChild() :\n          NodeUtil.isObjectLitKey(node, node.getParent()) ? node.getParent() :\n          null;\n      if (info !\u003d null) {\n        if (info.hasType()) {\n          jsType \u003d info.getType().evaluate(scope, typeRegistry);\n        } else if (FunctionTypeBuilder.isFunctionTypeDeclaration(info)) {\n          String fnName \u003d node.getQualifiedName();\n          jsType \u003d createFunctionTypeFromNodes(\n              null, fnName, info, node);\n        }\n      }\n      return jsType;\n    }",
    "begin_line": 708,
    "end_line": 725,
    "comment": "/** \n * Returns the type specified in a JSDoc annotation near a GETPROP or NAME. Extracts type information from either the  {@code @type} tag or fromthe  {@code @return} and {@code @param} tags.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.assertDefinitionNode#731",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.assertDefinitionNode(com.google.javascript.rhino.Node, int)",
    "snippet": "void assertDefinitionNode(Node n, int type) {\n      Preconditions.checkState(sourceName !\u003d null);\n      Preconditions.checkState(n.getType() \u003d\u003d type);\n    }",
    "begin_line": 731,
    "end_line": 734,
    "comment": "/** \n * Asserts that it\u0027s OK to define this node\u0027s name. The node should have a source name and be of the specified type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.defineCatch#739",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.defineCatch(com.google.javascript.rhino.Node)",
    "snippet": "void defineCatch(Node n) {\n      assertDefinitionNode(n, Token.CATCH);\n      Node catchName \u003d n.getFirstChild();\n      defineSlot(catchName, n,\n          getDeclaredType(\n              sourceName, catchName.getJSDocInfo(), catchName, null));\n    }",
    "begin_line": 739,
    "end_line": 745,
    "comment": "/** \n * Defines a catch parameter.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.defineVar#750",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.defineVar(com.google.javascript.rhino.Node)",
    "snippet": "void defineVar(Node n) {\n      assertDefinitionNode(n, Token.VAR);\n      JSDocInfo info \u003d n.getJSDocInfo();\n      if (n.hasMoreThanOneChild()) {\n        if (info !\u003d null) {\n          // multiple children\n          compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));\n        }\n        for (Node name : n.children()) {\n          defineName(name, n, name.getJSDocInfo());\n        }\n      } else {\n        Node name \u003d n.getFirstChild();\n        defineName(name, n, (info !\u003d null) ? info : name.getJSDocInfo());\n      }\n    }",
    "begin_line": 750,
    "end_line": 765,
    "comment": "/** \n * Defines a VAR initialization.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.defineFunctionLiteral#770",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.defineFunctionLiteral(com.google.javascript.rhino.Node)",
    "snippet": "void defineFunctionLiteral(Node n) {\n      assertDefinitionNode(n, Token.FUNCTION);\n\n      // Determine the name and JSDocInfo and l-value for the function.\n      // Any of these may be null.\n      Node lValue \u003d NodeUtil.getBestLValue(n);\n      JSDocInfo info \u003d NodeUtil.getBestJSDocInfo(n);\n      String functionName \u003d NodeUtil.getBestLValueName(lValue);\n      FunctionType functionType \u003d\n          createFunctionTypeFromNodes(n, functionName, info, lValue);\n\n      // Assigning the function type to the function node\n      setDeferredType(n, functionType);\n\n      // Declare this symbol in the current scope iff it\u0027s a function\n      // declaration. Otherwise, the declaration will happen in other\n      // code paths.\n      if (NodeUtil.isFunctionDeclaration(n)) {\n        defineSlot(n.getFirstChild(), n, functionType);\n      }\n    }",
    "begin_line": 770,
    "end_line": 790,
    "comment": "/** \n * Defines a function literal.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.defineName#800",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.defineName(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.JSDocInfo)",
    "snippet": "private void defineName(Node name, Node var, JSDocInfo info) {\n      Node value \u003d name.getFirstChild();\n\n      // variable\u0027s type\n      JSType type \u003d getDeclaredType(sourceName, info, name, value);\n      if (type \u003d\u003d null) {\n        // The variable\u0027s type will be inferred.\n        type \u003d name.isFromExterns() ? unknownType : null;\n      }\n      defineSlot(name, var, type);\n    }",
    "begin_line": 800,
    "end_line": 810,
    "comment": "/** \n * Defines a variable based on the  {@link Token#NAME} node passed.\n * @param name The {@link Token#NAME} node.\n * @param var The parent of the {@code name} node, which must be a{@link Token#VAR} node.\n * @param info the {@link JSDocInfo} information relating to this{@code name} node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.shouldUseFunctionLiteralType#819",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.shouldUseFunctionLiteralType(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.JSDocInfo, com.google.javascript.rhino.Node)",
    "snippet": "private boolean shouldUseFunctionLiteralType(\n        FunctionType type, JSDocInfo info, Node lValue) {\n      if (info !\u003d null) {\n        return true;\n      }\n      if (lValue !\u003d null \u0026\u0026\n          NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {\n        return false;\n      }\n      return scope.isGlobal() || !type.isReturnTypeInferred();\n    }",
    "begin_line": 819,
    "end_line": 829,
    "comment": "/** \n * If a variable is assigned a function literal in the global scope, make that a declared type (even if there\u0027s no doc info). There\u0027s only one exception to this rule: if the return type is inferred, and we\u0027re in a local scope, we should assume the whole function is inferred.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.createFunctionTypeFromNodes#853",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.createFunctionTypeFromNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.JSDocInfo, com.google.javascript.rhino.Node)",
    "snippet": "private FunctionType createFunctionTypeFromNodes(\n        @Nullable Node rValue,\n        @Nullable String name,\n        @Nullable JSDocInfo info,\n        @Nullable Node lvalueNode) {\n\n      FunctionType functionType \u003d null;\n\n      // Global ctor aliases should be registered with the type registry.\n      if (rValue !\u003d null \u0026\u0026 rValue.isQualifiedName() \u0026\u0026 scope.isGlobal()) {\n        Var var \u003d scope.getVar(rValue.getQualifiedName());\n        if (var !\u003d null \u0026\u0026 var.getType() !\u003d null \u0026\u0026\n            var.getType().isFunctionType()) {\n          FunctionType aliasedType  \u003d var.getType().toMaybeFunctionType();\n          if ((aliasedType.isConstructor() || aliasedType.isInterface()) \u0026\u0026\n              !aliasedType.isNativeObjectType()) {\n            functionType \u003d aliasedType;\n\n            if (name !\u003d null \u0026\u0026 scope.isGlobal()) {\n              typeRegistry.declareType(name, functionType.getInstanceType());\n            }\n          }\n        }\n      }\n\n      if (functionType \u003d\u003d null) {\n        Node errorRoot \u003d rValue \u003d\u003d null ? lvalueNode : rValue;\n        boolean isFnLiteral \u003d\n            rValue !\u003d null \u0026\u0026 rValue.isFunction();\n        Node fnRoot \u003d isFnLiteral ? rValue : null;\n        Node parametersNode \u003d isFnLiteral ?\n            rValue.getFirstChild().getNext() : null;\n        Node fnBlock \u003d isFnLiteral ? parametersNode.getNext() : null;\n\n        if (info !\u003d null \u0026\u0026 info.hasType()) {\n          JSType type \u003d info.getType().evaluate(scope, typeRegistry);\n\n          // Known to be not null since we have the FUNCTION token there.\n          type \u003d type.restrictByNotNullOrUndefined();\n          if (type.isFunctionType()) {\n            functionType \u003d type.toMaybeFunctionType();\n            functionType.setJSDocInfo(info);\n          }\n        }\n\n        if (functionType \u003d\u003d null) {\n          // Find the type of any overridden function.\n          Node ownerNode \u003d NodeUtil.getBestLValueOwner(lvalueNode);\n          String ownerName \u003d NodeUtil.getBestLValueName(ownerNode);\n          Var ownerVar \u003d null;\n          String propName \u003d null;\n          ObjectType ownerType \u003d null;\n          if (ownerName !\u003d null) {\n            ownerVar \u003d scope.getVar(ownerName);\n            if (ownerVar !\u003d null) {\n              ownerType \u003d ObjectType.cast(ownerVar.getType());\n            }\n            if (name !\u003d null) {\n              propName \u003d name.substring(ownerName.length() + 1);\n            }\n          }\n\n          FunctionType overriddenType \u003d null;\n          if (ownerType !\u003d null \u0026\u0026 propName !\u003d null) {\n            overriddenType \u003d findOverriddenFunction(ownerType, propName);\n          }\n\n          FunctionTypeBuilder builder \u003d\n              new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                  scope)\n              .setContents(getFunctionAnalysisResults(fnRoot))\n              .inferFromOverriddenFunction(overriddenType, parametersNode)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferInheritance(info);\n\n          // Infer the context type.\n          boolean searchedForThisType \u003d false;\n          if (ownerType !\u003d null \u0026\u0026 ownerType.isFunctionPrototypeType() \u0026\u0026\n              ownerType.getOwnerFunction().hasInstanceType()) {\n            builder.inferThisType(\n                info, ownerType.getOwnerFunction().getInstanceType());\n            searchedForThisType \u003d true;\n          } else if (ownerNode !\u003d null \u0026\u0026 ownerNode.isThis()) {\n            // If \u0027this\u0027 has a type, use that instead.\n            // This is a hack, necessary because CollectProperties (below)\n            // doesn\u0027t run with the scope that it\u0027s building,\n            // so scope.getTypeOfThis() will be wrong.\n            JSType injectedThisType \u003d ownerNode.getJSType();\n            builder.inferThisType(\n                info,\n                injectedThisType \u003d\u003d null ?\n                scope.getTypeOfThis() : injectedThisType);\n            searchedForThisType \u003d true;\n          }\n\n          if (!searchedForThisType) {\n            builder.inferThisType(info);\n          }\n\n          functionType \u003d builder\n              .inferParameterTypes(parametersNode, info)\n              .buildAndRegister();\n        }\n      }\n\n      // all done\n      return functionType;\n    }",
    "begin_line": 853,
    "end_line": 961,
    "comment": "/** \n * Creates a new function type, based on the given nodes. This handles two cases that are semantically very different, but are not mutually exclusive: - A function literal that needs a type attached to it. - An assignment expression with function-type info in the JsDoc. All parameters are optional, and we will do the best we can to create a function type. This function will always create a function type, so only call it if you\u0027re sure that\u0027s what you want.\n * @param rValue The function node.\n * @param name the function\u0027s name\n * @param info the {@link JSDocInfo} attached to the function definition\n * @param lvalueNode The node where this function is beingassigned. For example,  {@code A.prototype.foo \u003d ...} would be used todetermine that this function is a method of A.prototype. May be null to indicate that this is not being assigned to a qualified name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.findOverriddenFunction#966",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.findOverriddenFunction(com.google.javascript.rhino.jstype.ObjectType, java.lang.String)",
    "snippet": "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName) {\n      // First, check to see if the property is implemented\n      // on a superclass.\n      JSType propType \u003d ownerType.getPropertyType(propName);\n      if (propType !\u003d null \u0026\u0026 propType.isFunctionType()) {\n        return propType.toMaybeFunctionType();\n      } else {\n        // If it\u0027s not, then check to see if it\u0027s implemented\n        // on an implemented interface.\n        for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces()) {\n          propType \u003d iface.getPropertyType(propName);\n          if (propType !\u003d null \u0026\u0026 propType.isFunctionType()) {\n            return propType.toMaybeFunctionType();\n          }\n        }\n      }\n\n      return null;\n    }",
    "begin_line": 966,
    "end_line": 986,
    "comment": "/** \n * Find the function that\u0027s being overridden on this type, if any.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.createEnumTypeFromNodes#1005",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.createEnumTypeFromNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.JSDocInfo, com.google.javascript.rhino.Node)",
    "snippet": "private EnumType createEnumTypeFromNodes(Node rValue, String name,\n        JSDocInfo info, Node lValueNode) {\n      Preconditions.checkNotNull(info);\n      Preconditions.checkState(info.hasEnumParameterType());\n\n      EnumType enumType \u003d null;\n      if (rValue !\u003d null \u0026\u0026 rValue.isQualifiedName()) {\n        // Handle an aliased enum.\n        Var var \u003d scope.getVar(rValue.getQualifiedName());\n        if (var !\u003d null \u0026\u0026 var.getType() instanceof EnumType) {\n          enumType \u003d (EnumType) var.getType();\n        }\n      }\n\n      if (enumType \u003d\u003d null) {\n        JSType elementsType \u003d\n            info.getEnumParameterType().evaluate(scope, typeRegistry);\n        enumType \u003d typeRegistry.createEnumType(name, rValue, elementsType);\n\n        if (rValue !\u003d null \u0026\u0026 rValue.isObjectLit()) {\n          // collect enum elements\n          Node key \u003d rValue.getFirstChild();\n          while (key !\u003d null) {\n            String keyName \u003d NodeUtil.getStringValue(key);\n            if (keyName \u003d\u003d null) {\n              // GET and SET don\u0027t have a String value;\n              compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));\n            } else if (!codingConvention.isValidEnumKey(keyName)) {\n              compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));\n            } else {\n              enumType.defineElement(keyName, key);\n            }\n            key \u003d key.getNext();\n          }\n        }\n      }\n\n      if (name !\u003d null \u0026\u0026 scope.isGlobal()) {\n        typeRegistry.declareType(name, enumType.getElementsType());\n      }\n\n      return enumType;\n    }",
    "begin_line": 1005,
    "end_line": 1049,
    "comment": "/** \n * Creates a new enum type, based on the given nodes. This handles two cases that are semantically very different, but are not mutually exclusive: - An object literal that needs an enum type attached to it. - An assignment expression with an enum tag in the JsDoc. This function will always create an enum type, so only call it if you\u0027re sure that\u0027s what you want.\n * @param rValue The node of the enum.\n * @param name The enum\u0027s name\n * @param info The {@link JSDocInfo} attached to the enum definition.\n * @param lValueNode The node where this function is beingassigned.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.defineSlot#1059",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.defineSlot(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private void defineSlot(Node name, Node parent, JSType type) {\n      defineSlot(name, parent, type, type \u003d\u003d null);\n    }",
    "begin_line": 1059,
    "end_line": 1061,
    "comment": "/** \n * Defines a typed variable. The defining node will be annotated with the variable\u0027s type or  {@code null} if its type is inferred.\n * @param name the defining node. It must be a {@link Token#NAME}.\n * @param parent the {@code name}\u0027s parent.\n * @param type the variable\u0027s type. It may be {@code null}, in which case the variable\u0027s type will be inferred.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.defineSlot#1075",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.defineSlot(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, boolean)",
    "snippet": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n      Preconditions.checkArgument(inferred || type !\u003d null);\n\n      // Only allow declarations of NAMEs and qualified names.\n      // Object literal keys will have to compute their names themselves.\n      if (n.isName()) {\n        Preconditions.checkArgument(\n            parent.isFunction() ||\n            parent.isVar() ||\n            parent.isParamList() ||\n            parent.isCatch());\n      } else {\n        Preconditions.checkArgument(\n            n.isGetProp() \u0026\u0026\n            (parent.isAssign() ||\n             parent.isExprResult()));\n      }\n      defineSlot(n, parent, n.getQualifiedName(), type, inferred);\n    }",
    "begin_line": 1075,
    "end_line": 1093,
    "comment": "/** \n * Defines a typed variable. The defining node will be annotated with the variable\u0027s type of  {@link JSTypeNative#UNKNOWN_TYPE} if its type isinferred. Slots may be any variable or any qualified name in the global scope.\n * @param n the defining NAME or GETPROP node.\n * @param parent the {@code n}\u0027s parent.\n * @param type the variable\u0027s type. It may be {@code null} if{@code inferred} is {@code true}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.defineSlot#1106",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.defineSlot(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)",
    "snippet": "void defineSlot(Node n, Node parent, String variableName,\n        JSType type, boolean inferred) {\n      Preconditions.checkArgument(!variableName.isEmpty());\n\n      boolean isGlobalVar \u003d n.isName() \u0026\u0026 scope.isGlobal();\n      boolean shouldDeclareOnGlobalThis \u003d\n          isGlobalVar \u0026\u0026\n          (parent.isVar() ||\n           parent.isFunction());\n\n      // If n is a property, then we should really declare it in the\n      // scope where the root object appears. This helps out people\n      // who declare \"global\" names in an anonymous namespace.\n      Scope scopeToDeclareIn \u003d scope;\n      if (n.isGetProp() \u0026\u0026 !scope.isGlobal() \u0026\u0026\n          isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n\n        // don\u0027t try to declare in the global scope if there\u0027s\n        // already a symbol there with this name.\n        if (!globalScope.isDeclared(variableName, false)) {\n          scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n      }\n\n      // The input may be null if we are working with a AST snippet. So read\n      // the extern info from the node.\n      boolean isExtern \u003d n.isFromExterns();\n      Var newVar \u003d null;\n\n      // declared in closest scope?\n      CompilerInput input \u003d compiler.getInput(inputId);\n      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        newVar \u003d validator.expectUndeclaredVariable(\n            sourceName, input, n, parent, oldVar, variableName, type);\n      } else {\n        if (type !\u003d null) {\n          setDeferredType(n, type);\n        }\n\n        newVar \u003d\n          scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n        if (type instanceof EnumType) {\n          Node initialValue \u003d newVar.getInitialValue();\n          boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026\n              (initialValue.isObjectLit() ||\n               initialValue.isQualifiedName());\n          if (!isValidValue) {\n            compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n          }\n        }\n      }\n\n      // We need to do some additional work for constructors and interfaces.\n      FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n      if (fnType !\u003d null \u0026\u0026\n          // We don\u0027t want to look at empty function types.\n          !type.isEmptyType()) {\n\n        // We want to make sure that when we declare a new instance type\n        // (with @constructor) that there\u0027s actually a ctor for it.\n        // This doesn\u0027t apply to structural constructors (like\n        // function(new:Array). Checking the constructed type against\n        // the variable name is a sufficient check for this.\n        if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026\n            variableName.equals(fnType.getReferenceName())) {\n          finishConstructorDefinition(n, variableName, fnType, scopeToDeclareIn,\n                                      input, newVar);\n        }\n      }\n\n      if (shouldDeclareOnGlobalThis) {\n        ObjectType globalThis \u003d\n            typeRegistry.getNativeObjectType(GLOBAL_THIS);\n        if (inferred) {\n          globalThis.defineInferredProperty(variableName,\n              type \u003d\u003d null ?\n              getNativeType(JSTypeNative.NO_TYPE) :\n              type,\n              n);\n        } else {\n          globalThis.defineDeclaredProperty(variableName, type, n);\n        }\n      }\n\n      if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName)\n          \u0026\u0026 type !\u003d null\n          \u0026\u0026 type.isFunctionType()\n          \u0026\u0026 type.isConstructor()) {\n        FunctionType globalThisCtor \u003d\n            typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n        globalThisCtor.getInstanceType().clearCachedValues();\n        globalThisCtor.getPrototype().clearCachedValues();\n        globalThisCtor\n            .setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());\n      }\n    }",
    "begin_line": 1106,
    "end_line": 1204,
    "comment": "/** \n * Defines a symbol in the current scope.\n * @param n the defining NAME or GETPROP or object literal key node.\n * @param parent the {@code n}\u0027s parent.\n * @param variableName The name that this should be known by.\n * @param type the variable\u0027s type. It may be {@code null} if{@code inferred} is {@code true}.\n * @param inferred Whether the type is inferred or declared.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.finishConstructorDefinition#1206",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.finishConstructorDefinition(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.jscomp.Scope, com.google.javascript.jscomp.CompilerInput, com.google.javascript.jscomp.Scope.Var)",
    "snippet": "private void finishConstructorDefinition(\n        Node n, String variableName, FunctionType fnType,\n        Scope scopeToDeclareIn, CompilerInput input, Var newVar) {\n      // Declare var.prototype in the scope chain.\n      FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n      Property prototypeSlot \u003d fnType.getSlot(\"prototype\");\n\n      // When we declare the function prototype implicitly, we\n      // want to make sure that the function and its prototype\n      // are declared at the same node. We also want to make sure\n      // that the if a symbol has both a Var and a JSType, they have\n      // the same node.\n      //\n      // This consistency is helpful to users of SymbolTable,\n      // because everything gets declared at the same place.\n      prototypeSlot.setNode(n);\n\n      String prototypeName \u003d variableName + \".prototype\";\n\n      // There are some rare cases where the prototype will already\n      // be declared. See TypedScopeCreatorTest#testBogusPrototypeInit.\n      // Fortunately, other warnings will complain if this happens.\n      Var prototypeVar \u003d scopeToDeclareIn.getVar(prototypeName);\n      if (prototypeVar !\u003d null \u0026\u0026 prototypeVar.scope \u003d\u003d scopeToDeclareIn) {\n        scopeToDeclareIn.undeclare(prototypeVar);\n      }\n\n      scopeToDeclareIn.declare(prototypeName,\n          n, prototypeSlot.getType(), input,\n          /* declared iff there\u0027s an explicit supertype */\n          superClassCtor \u003d\u003d null ||\n          superClassCtor.getInstanceType().isEquivalentTo(\n              getNativeType(OBJECT_TYPE)));\n\n      // Make sure the variable is initialized to something if\n      // it constructs itself.\n      if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026\n          !n.isFromExterns()) {\n        compiler.report(\n            JSError.make(sourceName, n,\n                fnType.isConstructor() ?\n                CTOR_INITIALIZER : IFACE_INITIALIZER,\n                variableName));\n      }\n    }",
    "begin_line": 1206,
    "end_line": 1250,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.isQnameRootedInGlobalScope#1255",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.isQnameRootedInGlobalScope(com.google.javascript.rhino.Node)",
    "snippet": "private boolean isQnameRootedInGlobalScope(Node n) {\n      Scope scope \u003d getQnameRootScope(n);\n      return scope !\u003d null \u0026\u0026 scope.isGlobal();\n    }",
    "begin_line": 1255,
    "end_line": 1258,
    "comment": "/** \n * Check if the given node is a property of a name in the global scope.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.getQnameRootScope#1263",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.getQnameRootScope(com.google.javascript.rhino.Node)",
    "snippet": "private Scope getQnameRootScope(Node n) {\n      Node root \u003d NodeUtil.getRootOfQualifiedName(n);\n      if (root.isName()) {\n        Var var \u003d scope.getVar(root.getString());\n        if (var !\u003d null) {\n          return var.getScope();\n        }\n      }\n      return null;\n    }",
    "begin_line": 1263,
    "end_line": 1272,
    "comment": "/** \n * Return the scope for the name of the given node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.getDeclaredType#1283",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.getDeclaredType(java.lang.String, com.google.javascript.rhino.JSDocInfo, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private JSType getDeclaredType(String sourceName, JSDocInfo info,\n        Node lValue, @Nullable Node rValue) {\n      if (info !\u003d null \u0026\u0026 info.hasType()) {\n        return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n      } else if (rValue !\u003d null \u0026\u0026 rValue.isFunction() \u0026\u0026\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n        return rValue.getJSType();\n      } else if (info !\u003d null) {\n        if (info.hasEnumParameterType()) {\n          if (rValue !\u003d null \u0026\u0026 rValue.isObjectLit()) {\n            return rValue.getJSType();\n          } else {\n            return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);\n          }\n        } else if (info.isConstructor() || info.isInterface()) {\n          return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);\n        } else {\n          // Check if this is constant, and if it has a known type.\n          if (info.isConstant()) {\n            JSType knownType \u003d null;\n            if (rValue !\u003d null) {\n              JSDocInfo rValueInfo \u003d rValue.getJSDocInfo();\n              if (rValueInfo !\u003d null \u0026\u0026 rValueInfo.hasType()) {\n                // If rValue has a type-cast, we use the type in the type-cast.\n                return rValueInfo.getType().evaluate(scope, typeRegistry);\n              } else if (rValue.getJSType() !\u003d null\n                  \u0026\u0026 !rValue.getJSType().isUnknownType()) {\n                // If rValue\u0027s type was already computed during scope creation,\n                // then we can safely use that.\n                return rValue.getJSType();\n              } else if (rValue.isOr()) {\n                // Check for a very specific JS idiom:\n                // var x \u003d x || TYPE;\n                // This is used by Closure\u0027s base namespace for esoteric\n                // reasons.\n                Node firstClause \u003d rValue.getFirstChild();\n                Node secondClause \u003d firstClause.getNext();\n                boolean namesMatch \u003d firstClause.isName()\n                    \u0026\u0026 lValue.isName()\n                    \u0026\u0026 firstClause.getString().equals(lValue.getString());\n                if (namesMatch \u0026\u0026 secondClause.getJSType() !\u003d null\n                    \u0026\u0026 !secondClause.getJSType().isUnknownType()) {\n                  return secondClause.getJSType();\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n    }",
    "begin_line": 1283,
    "end_line": 1337,
    "comment": "/** \n * Look for a type declaration on a property assignment (in an ASSIGN or an object literal key).\n * @param info The doc info for this property.\n * @param lValue The l-value node.\n * @param rValue The node that {@code n} is being initialized to,or  {@code null} if this is a stub declaration.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.getFunctionType#1339",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.getFunctionType(com.google.javascript.jscomp.Scope.Var)",
    "snippet": "private FunctionType getFunctionType(@Nullable Var v) {\n      JSType t \u003d v \u003d\u003d null ? null : v.getType();\n      ObjectType o \u003d t \u003d\u003d null ? null : t.dereference();\n      return JSType.toMaybeFunctionType(o);\n    }",
    "begin_line": 1339,
    "end_line": 1343,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.checkForCallingConventionDefiningCalls#1348",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.checkForCallingConventionDefiningCalls(com.google.javascript.rhino.Node, java.util.Map\u003cjava.lang.String,java.lang.String\u003e)",
    "snippet": "private void checkForCallingConventionDefiningCalls(\n        Node n, Map\u003cString, String\u003e delegateCallingConventions) {\n      codingConvention.checkForCallingConventionDefiningCalls(n,\n          delegateCallingConventions);\n    }",
    "begin_line": 1348,
    "end_line": 1352,
    "comment": "/** \n * Look for calls that set a delegate method\u0027s calling convention.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.checkForClassDefiningCalls#1359",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.checkForClassDefiningCalls(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private void checkForClassDefiningCalls(\n        NodeTraversal t, Node n, Node parent) {\n      SubclassRelationship relationship \u003d\n          codingConvention.getClassesDefinedByCall(n);\n      if (relationship !\u003d null) {\n        FunctionType superCtor \u003d getFunctionType(\n            scope.getVar(relationship.superclassName));\n        FunctionType subCtor \u003d getFunctionType(\n            scope.getVar(relationship.subclassName));\n        if (superCtor !\u003d null \u0026\u0026 superCtor.isConstructor() \u0026\u0026\n            subCtor !\u003d null \u0026\u0026 subCtor.isConstructor()) {\n          ObjectType superClass \u003d superCtor.getInstanceType();\n          ObjectType subClass \u003d subCtor.getInstanceType();\n\n          // superCtor and subCtor might be structural constructors\n          // (like {function(new:Object)}) so we need to resolve them back\n          // to the original ctor objects.\n          superCtor \u003d superClass.getConstructor();\n          subCtor \u003d subClass.getConstructor();\n\n          if (relationship.type \u003d\u003d SubclassType.INHERITS \u0026\u0026\n              !superClass.isEmptyType() \u0026\u0026 !subClass.isEmptyType()) {\n            validator.expectSuperType(t, n, superClass, subClass);\n          }\n\n          if (superCtor !\u003d null \u0026\u0026 subCtor !\u003d null) {\n            codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);\n          }\n        }\n      }\n\n      String singletonGetterClassName \u003d\n          codingConvention.getSingletonGetterClassName(n);\n      if (singletonGetterClassName !\u003d null) {\n        ObjectType objectType \u003d ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));\n        if (objectType !\u003d null) {\n          FunctionType functionType \u003d objectType.getConstructor();\n\n          if (functionType !\u003d null) {\n            FunctionType getterType \u003d\n                typeRegistry.createFunctionType(objectType);\n            codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);\n          }\n        }\n      }\n\n      DelegateRelationship delegateRelationship \u003d\n          codingConvention.getDelegateRelationship(n);\n      if (delegateRelationship !\u003d null) {\n        applyDelegateRelationship(delegateRelationship);\n      }\n\n      ObjectLiteralCast objectLiteralCast \u003d\n          codingConvention.getObjectLiteralCast(n);\n      if (objectLiteralCast !\u003d null) {\n        if (objectLiteralCast.diagnosticType \u003d\u003d null) {\n          ObjectType type \u003d ObjectType.cast(\n              typeRegistry.getType(objectLiteralCast.typeName));\n          if (type !\u003d null \u0026\u0026 type.getConstructor() !\u003d null) {\n            setDeferredType(objectLiteralCast.objectNode, type);\n          } else {\n            compiler.report(JSError.make(t.getSourceName(), n,\n                    CONSTRUCTOR_EXPECTED));\n          }\n        } else {\n          compiler.report(JSError.make(t.getSourceName(), n,\n                  objectLiteralCast.diagnosticType));\n        }\n      }\n    }",
    "begin_line": 1359,
    "end_line": 1431,
    "comment": "/** \n * Look for class-defining calls. Because JS has no \u0027native\u0027 syntax for defining classes, this is often very coding-convention dependent and business-logic heavy.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.applyDelegateRelationship#1436",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.applyDelegateRelationship(com.google.javascript.jscomp.CodingConvention.DelegateRelationship)",
    "snippet": "private void applyDelegateRelationship(\n        DelegateRelationship delegateRelationship) {\n      ObjectType delegatorObject \u003d ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));\n      ObjectType delegateBaseObject \u003d ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));\n      ObjectType delegateSuperObject \u003d ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));\n      if (delegatorObject !\u003d null \u0026\u0026\n          delegateBaseObject !\u003d null \u0026\u0026\n          delegateSuperObject !\u003d null) {\n        FunctionType delegatorCtor \u003d delegatorObject.getConstructor();\n        FunctionType delegateBaseCtor \u003d delegateBaseObject.getConstructor();\n        FunctionType delegateSuperCtor \u003d delegateSuperObject.getConstructor();\n\n        if (delegatorCtor !\u003d null \u0026\u0026 delegateBaseCtor !\u003d null \u0026\u0026\n            delegateSuperCtor !\u003d null) {\n          FunctionParamBuilder functionParamBuilder \u003d\n              new FunctionParamBuilder(typeRegistry);\n          functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));\n          FunctionType findDelegate \u003d typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());\n\n          FunctionType delegateProxy \u003d typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null, null);\n          delegateProxy.setPrototypeBasedOn(delegateBaseObject);\n\n          codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);\n          delegateProxyPrototypes.add(delegateProxy.getPrototype());\n        }\n      }\n    }",
    "begin_line": 1436,
    "end_line": 1472,
    "comment": "/** \n * Apply special properties that only apply to delegates.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.maybeDeclareQualifiedName#1484",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.maybeDeclareQualifiedName(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.JSDocInfo, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue) {\n      Node ownerNode \u003d n.getFirstChild();\n      String ownerName \u003d ownerNode.getQualifiedName();\n      String qName \u003d n.getQualifiedName();\n      String propName \u003d n.getLastChild().getString();\n      Preconditions.checkArgument(qName !\u003d null \u0026\u0026 ownerName !\u003d null);\n\n      // Precedence of type information on GETPROPs:\n      // 1) @type annotation / @enum annotation\n      // 2) ASSIGN to FUNCTION literal\n      // 3) @param/@return annotation (with no function literal)\n      // 4) ASSIGN to something marked @const\n      // 5) ASSIGN to anything else\n      //\n      // 1, 3, and 4 are declarations, 5 is inferred, and 2 is a declaration iff\n      // the function has JsDoc or has not been declared before.\n      //\n      // FUNCTION literals are special because TypedScopeCreator is very smart\n      // about getting as much type information as possible for them.\n\n      // Determining type for #1 + #2 + #3 + #4\n      JSType valueType \u003d getDeclaredType(t.getSourceName(), info, n, rhsValue);\n      if (valueType \u003d\u003d null \u0026\u0026 rhsValue !\u003d null) {\n        // Determining type for #5\n        valueType \u003d rhsValue.getJSType();\n      }\n\n      // Function prototypes are special.\n      // It\u0027s a common JS idiom to do:\n      // F.prototype \u003d { ... };\n      // So if F does not have an explicitly declared super type,\n      // allow F.prototype to be redefined arbitrarily.\n      if (\"prototype\".equals(propName)) {\n        Var qVar \u003d scope.getVar(qName);\n        if (qVar !\u003d null) {\n          // If the programmer has declared that F inherits from Super,\n          // and they assign F.prototype to an object literal,\n          // then they are responsible for making sure that the object literal\u0027s\n          // implicit prototype is set up appropriately. We just obey\n          // the @extends tag.\n          ObjectType qVarType \u003d ObjectType.cast(qVar.getType());\n          if (qVarType !\u003d null \u0026\u0026\n              rhsValue !\u003d null \u0026\u0026\n              rhsValue.isObjectLit()) {\n            typeRegistry.resetImplicitPrototype(\n                rhsValue.getJSType(), qVarType.getImplicitPrototype());\n          } else if (!qVar.isTypeInferred()) {\n            // If the programmer has declared that F inherits from Super,\n            // and they assign F.prototype to some arbitrary expression,\n            // there\u0027s not much we can do. We just ignore the expression,\n            // and hope they\u0027ve annotated their code in a way to tell us\n            // what props are going to be on that prototype.\n            return;\n          }\n          if (qVar.getScope() \u003d\u003d scope) {\n            scope.undeclare(qVar);\n          }\n        }\n      }\n\n      if (valueType \u003d\u003d null) {\n        if (parent.isExprResult()) {\n          stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern(),\n              ownerName));\n        }\n\n        return;\n      }\n\n      boolean inferred \u003d isQualifiedNameInferred(\n          qName, n, info, rhsValue, valueType);\n      if (!inferred) {\n        ObjectType ownerType \u003d getObjectSlot(ownerName);\n        if (ownerType !\u003d null) {\n          // Only declare this as an official property if it has not been\n          // declared yet.\n          boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n          if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) \u0026\u0026\n              ((isExtern \u0026\u0026 !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType())) {\n            // If the property is undeclared or inferred, declare it now.\n            ownerType.defineDeclaredProperty(propName, valueType, n);\n          }\n        }\n\n        // If the property is already declared, the error will be\n        // caught when we try to declare it in the current scope.\n        defineSlot(n, parent, valueType, inferred);\n      } else if (rhsValue !\u003d null \u0026\u0026 rhsValue.isTrue()) {\n        // We declare these for delegate proxy method properties.\n        FunctionType ownerType \u003d\n            JSType.toMaybeFunctionType(getObjectSlot(ownerName));\n        if (ownerType !\u003d null) {\n          JSType ownerTypeOfThis \u003d ownerType.getTypeOfThis();\n          String delegateName \u003d codingConvention.getDelegateSuperclassName();\n          JSType delegateType \u003d delegateName \u003d\u003d null ?\n              null : typeRegistry.getType(delegateName);\n          if (delegateType !\u003d null \u0026\u0026\n              ownerTypeOfThis.isSubtype(delegateType)) {\n            defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);\n          }\n        }\n      }\n    }",
    "begin_line": 1484,
    "end_line": 1591,
    "comment": "/** \n * Declare the symbol for a qualified name in the global scope.\n * @param info The doc info for this property.\n * @param n A top-level GETPROP node (it should not be contained insideanother GETPROP).\n * @param parent The parent of {@code n}.\n * @param rhsValue The node that {@code n} is being initialized to,or  {@code null} if this is a stub declaration.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.isQualifiedNameInferred#1620",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.isQualifiedNameInferred(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.JSDocInfo, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private boolean isQualifiedNameInferred(\n        String qName, Node n, JSDocInfo info,\n        Node rhsValue, JSType valueType) {\n      if (valueType \u003d\u003d null) {\n        return true;\n      }\n\n      boolean inferred \u003d true;\n      if (info !\u003d null) {\n        inferred \u003d !(info.hasType()\n            || info.hasEnumParameterType()\n            || (info.isConstant() \u0026\u0026 valueType !\u003d null\n                \u0026\u0026 !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n      }\n\n      if (inferred \u0026\u0026 rhsValue !\u003d null \u0026\u0026 rhsValue.isFunction()) {\n        if (info !\u003d null) {\n          return false;\n        } else if (!scope.isDeclared(qName, false) \u0026\u0026\n            n.isUnscopedQualifiedName()) {\n\n          // Check if this is in a conditional block.\n          // Functions assigned in conditional blocks are inferred.\n          for (Node current \u003d n.getParent();\n               !(current.isScript() || current.isFunction());\n               current \u003d current.getParent()) {\n            if (NodeUtil.isControlStructure(current)) {\n              return true;\n            }\n          }\n\n          // Check if this is assigned in an inner scope.\n          // Functions assigned in inner scopes are inferred.\n          AstFunctionContents contents \u003d\n              getFunctionAnalysisResults(scope.getRootNode());\n          if (contents \u003d\u003d null ||\n              !contents.getEscapedQualifiedNames().contains(qName)) {\n            return false;\n          }\n        }\n      }\n      return inferred;\n    }",
    "begin_line": 1620,
    "end_line": 1663,
    "comment": "/** \n * Determines whether a qualified name is inferred. NOTE(nicksantos): Determining whether a property is declared or not is really really obnoxious. The problem is that there are two (equally valid) coding styles: (function() { /* The authoritative definition of goog.bar. / goog.bar \u003d function() {}; })(); function f() { goog.bar(); /* Reset goog.bar to a no-op. / goog.bar \u003d function() {}; } In a dynamic language with first-class functions, it\u0027s very difficult to know which one the user intended without looking at lots of contextual information (the second example demonstrates a small case of this, but there are some really pathological cases as well). The current algorithm checks if either the declaration has JsDoc type information, or @const with a known type, or a function literal with a name we haven\u0027t seen before.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.getObjectSlot#1670",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.getObjectSlot(java.lang.String)",
    "snippet": "private ObjectType getObjectSlot(String slotName) {\n      Var ownerVar \u003d scope.getVar(slotName);\n      if (ownerVar !\u003d null) {\n        JSType ownerVarType \u003d ownerVar.getType();\n        return ObjectType.cast(ownerVarType \u003d\u003d null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());\n      }\n      return null;\n    }",
    "begin_line": 1670,
    "end_line": 1678,
    "comment": "/** \n * Find the ObjectType associated with the given slot.\n * @param slotName The name of the slot to find the type in.\n * @return An object type, or null if this slot does not contain an object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractScopeBuilder.resolveStubDeclarations#1684",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.resolveStubDeclarations()",
    "snippet": "void resolveStubDeclarations() {\n      for (StubDeclaration stub : stubDeclarations) {\n        Node n \u003d stub.node;\n        Node parent \u003d n.getParent();\n        String qName \u003d n.getQualifiedName();\n        String propName \u003d n.getLastChild().getString();\n        String ownerName \u003d stub.ownerName;\n        boolean isExtern \u003d stub.isExtern;\n\n        if (scope.isDeclared(qName, false)) {\n          continue;\n        }\n\n        // If we see a stub property, make sure to register this property\n        // in the type registry.\n        ObjectType ownerType \u003d getObjectSlot(ownerName);\n        defineSlot(n, parent, unknownType, true);\n\n        if (ownerType !\u003d null \u0026\u0026\n            (isExtern || ownerType.isFunctionPrototypeType())) {\n          // If this is a stub for a prototype, just declare it\n          // as an unknown type. These are seen often in externs.\n          ownerType.defineInferredProperty(\n              propName, unknownType, n);\n        } else {\n          typeRegistry.registerPropertyOnType(\n              propName, ownerType \u003d\u003d null ? unknownType : ownerType);\n        }\n      }\n    }",
    "begin_line": 1684,
    "end_line": 1713,
    "comment": "/** \n * Resolve any stub declarations to unknown types if we could not find types for them during traversal.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectProperties.CollectProperties#1723",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.CollectProperties(com.google.javascript.rhino.jstype.JSType)",
    "snippet": " CollectProperties(JSType thisType) {\n        this.thisType \u003d thisType;\n      }",
    "begin_line": 1723,
    "end_line": 1725,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectProperties.visit#1728",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n.isExprResult()) {\n          Node child \u003d n.getFirstChild();\n          switch (child.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, child, child, null);\n              break;\n          }\n        }\n      }",
    "begin_line": 1728,
    "end_line": 1741,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectProperties.maybeCollectMember#1743",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.maybeCollectMember(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private void maybeCollectMember(NodeTraversal t,\n          Node member, Node nodeWithJsDocInfo, @Nullable Node value) {\n        JSDocInfo info \u003d nodeWithJsDocInfo.getJSDocInfo();\n\n        // Do nothing if there is no JSDoc type info, or\n        // if the node is not a member expression, or\n        // if the member expression is not of the form: this.someProperty.\n        if (info \u003d\u003d null ||\n            !member.isGetProp() ||\n            !member.getFirstChild().isThis()) {\n          return;\n        }\n\n        member.getFirstChild().setJSType(thisType);\n        JSType jsType \u003d getDeclaredType(t.getSourceName(), info, member, value);\n        Node name \u003d member.getLastChild();\n        if (jsType !\u003d null \u0026\u0026\n            (name.isName() || name.isString()) \u0026\u0026\n            thisType.toObjectType() !\u003d null) {\n          thisType.toObjectType().defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              member);\n        }\n      }",
    "begin_line": 1743,
    "end_line": 1767,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StubDeclaration.StubDeclaration#1779",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.StubDeclaration(com.google.javascript.rhino.Node, boolean, java.lang.String)",
    "snippet": "private StubDeclaration(Node node, boolean isExtern, String ownerName) {\n      this.node \u003d node;\n      this.isExtern \u003d isExtern;\n      this.ownerName \u003d ownerName;\n    }",
    "begin_line": 1779,
    "end_line": 1783,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GlobalScopeBuilder.GlobalScopeBuilder#1792",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.GlobalScopeBuilder(com.google.javascript.jscomp.Scope)",
    "snippet": "private GlobalScopeBuilder(Scope scope) {\n      super(scope);\n    }",
    "begin_line": 1792,
    "end_line": 1794,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GlobalScopeBuilder.visit#1804",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n      super.visit(t, n, parent);\n\n      switch (n.getType()) {\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }\n    }",
    "begin_line": 1804,
    "end_line": 1816,
    "comment": "/** \n * Visit a node in the global scope, and add anything it declares to the global symbol table.\n * @param t The current traversal.\n * @param n The node being visited.\n * @param parent The parent of n\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GlobalScopeBuilder.maybeDeclareQualifiedName#1819",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.maybeDeclareQualifiedName(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.JSDocInfo, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    void maybeDeclareQualifiedName(\n        NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue) {\n      checkForTypedef(t, n, info);\n      super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);\n    }",
    "begin_line": 1819,
    "end_line": 1824,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GlobalScopeBuilder.checkForTypedef#1832",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.checkForTypedef(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.JSDocInfo)",
    "snippet": "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info) {\n      if (info \u003d\u003d null || !info.hasTypedefType()) {\n        return;\n      }\n\n      String typedef \u003d candidate.getQualifiedName();\n      if (typedef \u003d\u003d null) {\n        return;\n      }\n\n      // TODO(nicksantos|user): This is a terrible, terrible hack\n      // to bail out on recursive typedefs. We\u0027ll eventually need\n      // to handle these properly.\n      typeRegistry.declareType(typedef, unknownType);\n\n      JSType realType \u003d info.getTypedefType().evaluate(scope, typeRegistry);\n      if (realType \u003d\u003d null) {\n        compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));\n      }\n\n      typeRegistry.overwriteDeclaredType(typedef, realType);\n      if (candidate.isGetProp()) {\n        defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);\n      }\n    }",
    "begin_line": 1832,
    "end_line": 1860,
    "comment": "/** \n * Handle typedefs.\n * @param t The current traversal.\n * @param candidate A qualified name node.\n * @param info JSDoc comments.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocalScopeBuilder.LocalScopeBuilder#1871",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.LocalScopeBuilder(com.google.javascript.jscomp.Scope)",
    "snippet": "private LocalScopeBuilder(Scope scope) {\n      super(scope);\n    }",
    "begin_line": 1871,
    "end_line": 1873,
    "comment": "/** \n * @param scope The scope that we\u0027re building.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocalScopeBuilder.build#1878",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.build()",
    "snippet": "void build() {\n      NodeTraversal.traverse(compiler, scope.getRootNode(), this);\n\n      AstFunctionContents contents \u003d\n          getFunctionAnalysisResults(scope.getRootNode());\n      if (contents !\u003d null) {\n        for (String varName : contents.getEscapedVarNames()) {\n          Var v \u003d scope.getVar(varName);\n          Preconditions.checkState(v.getScope() \u003d\u003d scope);\n          v.markEscaped();\n        }\n\n        for (Multiset.Entry\u003cString\u003e entry :\n                 contents.getAssignedNameCounts().entrySet()) {\n          Var v \u003d scope.getVar(entry.getElement());\n          Preconditions.checkState(v.getScope() \u003d\u003d scope);\n          if (entry.getCount() \u003d\u003d 1) {\n            v.markAssignedExactlyOnce();\n          }\n        }\n      }\n    }",
    "begin_line": 1878,
    "end_line": 1899,
    "comment": "/** \n * Traverse the scope root and build it.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocalScopeBuilder.visit#1909",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n \u003d\u003d scope.getRootNode()) return;\n\n      if (n.isParamList() \u0026\u0026 parent \u003d\u003d scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      super.visit(t, n, parent);\n    }",
    "begin_line": 1909,
    "end_line": 1918,
    "comment": "/** \n * Visit a node in a local scope, and add any local variables or catch parameters into the local symbol table.\n * @param t The node traversal.\n * @param n The node being visited.\n * @param parent The parent of n\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocalScopeBuilder.handleFunctionInputs#1921",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.handleFunctionInputs(com.google.javascript.rhino.Node)",
    "snippet": "private void handleFunctionInputs(Node fnNode) {\n      // Handle bleeding functions.\n      Node fnNameNode \u003d fnNode.getFirstChild();\n      String fnName \u003d fnNameNode.getString();\n      if (!fnName.isEmpty()) {\n        Scope.Var fnVar \u003d scope.getVar(fnName);\n        if (fnVar \u003d\u003d null ||\n            // Make sure we\u0027re not touching a native function. Native\n            // functions aren\u0027t bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() !\u003d null \u0026\u0026\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() !\u003d fnNode)) {\n          defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);\n        }\n      }\n\n      declareArguments(fnNode);\n    }",
    "begin_line": 1921,
    "end_line": 1940,
    "comment": "/** \n * Handle bleeding functions and function parameters. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocalScopeBuilder.declareArguments#1945",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.declareArguments(com.google.javascript.rhino.Node)",
    "snippet": "private void declareArguments(Node functionNode) {\n      Node astParameters \u003d functionNode.getFirstChild().getNext();\n      Node iifeArgumentNode \u003d null;\n\n      if (NodeUtil.isCallOrNewTarget(functionNode)) {\n        iifeArgumentNode \u003d functionNode.getNext();\n      }\n\n      Node body \u003d astParameters.getNext();\n      FunctionType functionType \u003d\n          JSType.toMaybeFunctionType(functionNode.getJSType());\n      if (functionType !\u003d null) {\n        Node jsDocParameters \u003d functionType.getParametersNode();\n        if (jsDocParameters !\u003d null) {\n          Node jsDocParameter \u003d jsDocParameters.getFirstChild();\n          for (Node astParameter : astParameters.children()) {\n            JSType paramType \u003d jsDocParameter \u003d\u003d null ?\n                unknownType : jsDocParameter.getJSType();\n            boolean inferred \u003d paramType \u003d\u003d null || paramType \u003d\u003d unknownType;\n\n            if (iifeArgumentNode !\u003d null \u0026\u0026 inferred) {\n              String argumentName \u003d iifeArgumentNode.getQualifiedName();\n              Var argumentVar \u003d\n                  argumentName \u003d\u003d null || scope.getParent() \u003d\u003d null\n                  ? null : scope.getParent().getVar(argumentName);\n              if (argumentVar !\u003d null \u0026\u0026 !argumentVar.isTypeInferred()) {\n                paramType \u003d argumentVar.getType();\n              }\n            }\n\n            if (paramType \u003d\u003d null) {\n              paramType \u003d unknownType;\n            }\n\n            defineSlot(astParameter, functionNode, paramType, inferred);\n\n            if (jsDocParameter !\u003d null) {\n              jsDocParameter \u003d jsDocParameter.getNext();\n            }\n            if (iifeArgumentNode !\u003d null) {\n              iifeArgumentNode \u003d iifeArgumentNode.getNext();\n            }\n          }\n        }\n      }\n    }",
    "begin_line": 1945,
    "end_line": 1990,
    "comment": "/** \n * Declares all of a function\u0027s arguments.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FirstOrderFunctionAnalyzer.FirstOrderFunctionAnalyzer#2002",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.FirstOrderFunctionAnalyzer(com.google.javascript.jscomp.AbstractCompiler, java.util.Map\u003ccom.google.javascript.rhino.Node,com.google.javascript.jscomp.FunctionTypeBuilder.AstFunctionContents\u003e)",
    "snippet": " FirstOrderFunctionAnalyzer(\n        AbstractCompiler compiler, Map\u003cNode, AstFunctionContents\u003e outParam) {\n      this.compiler \u003d compiler;\n      this.data \u003d outParam;\n    }",
    "begin_line": 2002,
    "end_line": 2006,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FirstOrderFunctionAnalyzer.process#2008",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override public void process(Node externs, Node root) {\n      if (externs \u003d\u003d null) {\n        NodeTraversal.traverse(compiler, root, this);\n      } else {\n        NodeTraversal.traverseRoots(\n            compiler, ImmutableList.of(externs, root), this);\n      }\n    }",
    "begin_line": 2008,
    "end_line": 2015,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FirstOrderFunctionAnalyzer.enterScope#2017",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.enterScope(com.google.javascript.jscomp.NodeTraversal)",
    "snippet": "@Override public void enterScope(NodeTraversal t) {\n      if (!t.inGlobalScope()) {\n        Node n \u003d t.getScopeRoot();\n        data.put(n, new AstFunctionContents(n));\n      }\n    }",
    "begin_line": 2017,
    "end_line": 2022,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FirstOrderFunctionAnalyzer.visit#2024",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (t.inGlobalScope()) {\n        return;\n      }\n\n      if (n.isReturn() \u0026\u0026 n.getFirstChild() !\u003d null) {\n        data.get(t.getScopeRoot()).recordNonEmptyReturn();\n      }\n\n      if (t.getScopeDepth() \u003c\u003d 1) {\n        // The first-order function analyzer looks at two types of variables:\n        //\n        // 1) Local variables that are assigned in inner scopes (\"escaped vars\")\n        //\n        // 2) Local variables that are assigned more than once.\n        //\n        // We treat all global variables as escaped by default, so there\u0027s\n        // no reason to do this extra computation for them.\n        return;\n      }\n\n      if (n.isName() \u0026\u0026 NodeUtil.isLValue(n) \u0026\u0026\n          // Be careful of bleeding functions, which create variables\n          // in the inner scope, not the scope where the name appears.\n          !NodeUtil.isBleedingFunctionName(n)) {\n        String name \u003d n.getString();\n        Scope scope \u003d t.getScope();\n        Var var \u003d scope.getVar(name);\n        if (var !\u003d null) {\n          Scope ownerScope \u003d var.getScope();\n          if (ownerScope.isLocal()) {\n            data.get(ownerScope.getRootNode()).recordAssignedName(name);\n          }\n\n          if (scope !\u003d ownerScope \u0026\u0026 ownerScope.isLocal()) {\n            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n          }\n        }\n      } else if (n.isGetProp() \u0026\u0026 n.isUnscopedQualifiedName() \u0026\u0026\n          NodeUtil.isLValue(n)) {\n        String name \u003d NodeUtil.getRootOfQualifiedName(n).getString();\n        Scope scope \u003d t.getScope();\n        Var var \u003d scope.getVar(name);\n        if (var !\u003d null) {\n          Scope ownerScope \u003d var.getScope();\n          if (scope !\u003d ownerScope \u0026\u0026 ownerScope.isLocal()) {\n            data.get(ownerScope.getRootNode())\n                .recordEscapedQualifiedName(n.getQualifiedName());\n          }\n        }\n      }\n    }",
    "begin_line": 2024,
    "end_line": 2075,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FirstOrderFunctionAnalyzer.getFunctionAnalysisResults#2078",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/TypedScopeCreator.java",
    "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
    "signature": "com.google.javascript.jscomp.TypedScopeCreator.getFunctionAnalysisResults(com.google.javascript.rhino.Node)",
    "snippet": "private AstFunctionContents getFunctionAnalysisResults(@Nullable Node n) {\n    if (n \u003d\u003d null) {\n      return null;\n    }\n\n    // Sometimes this will return null in things like\n    // NameReferenceGraphConstruction that build partial scopes.\n    return functionAnalysisResults.get(n);\n  }",
    "begin_line": 2078,
    "end_line": 2086,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VarCheck.VarCheck#82",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/VarCheck.java",
    "class_name": "com.google.javascript.jscomp.VarCheck",
    "signature": "com.google.javascript.jscomp.VarCheck.VarCheck(com.google.javascript.jscomp.AbstractCompiler)",
    "snippet": " VarCheck(AbstractCompiler compiler) {\n    this(compiler, false);\n  }",
    "begin_line": 82,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VarCheck.VarCheck#86",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/VarCheck.java",
    "class_name": "com.google.javascript.jscomp.VarCheck",
    "signature": "com.google.javascript.jscomp.VarCheck.VarCheck(com.google.javascript.jscomp.AbstractCompiler, boolean)",
    "snippet": " VarCheck(AbstractCompiler compiler, boolean sanityCheck) {\n    this.compiler \u003d compiler;\n    this.strictExternCheck \u003d compiler.getErrorLevel(\n        JSError.make(\"\", 0, 0, UNDEFINED_EXTERN_VAR_ERROR)) \u003d\u003d CheckLevel.ERROR;\n    this.sanityCheck \u003d sanityCheck;\n  }",
    "begin_line": 86,
    "end_line": 91,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VarCheck.process#94",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/VarCheck.java",
    "class_name": "com.google.javascript.jscomp.VarCheck",
    "signature": "com.google.javascript.jscomp.VarCheck.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void process(Node externs, Node root) {\n    // Don\u0027t run externs-checking in sanity check mode. Normalization will\n    // remove duplicate VAR declarations, which will make\n    // externs look like they have assigns.\n    if (!sanityCheck) {\n      NodeTraversal.traverse(compiler, externs, new NameRefInExternsCheck());\n    }\n\n    NodeTraversal.traverseRoots(\n        compiler, Lists.newArrayList(externs, root), this);\n    for (String varName : varsToDeclareInExterns) {\n      createSynthesizedExternVar(varName);\n    }\n  }",
    "begin_line": 94,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VarCheck.hotSwapScript#110",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/VarCheck.java",
    "class_name": "com.google.javascript.jscomp.VarCheck",
    "signature": "com.google.javascript.jscomp.VarCheck.hotSwapScript(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n    Preconditions.checkState(scriptRoot.isScript());\n    NodeTraversal t \u003d new NodeTraversal(compiler, this);\n    // Note we use the global scope to prevent wrong \"undefined-var errors\" on\n    // variables that are defined in other JS files.\n    t.traverseWithScope(scriptRoot,\n        SyntacticScopeCreator.generateUntypedTopScope(compiler));\n    // TODO(bashir) Check if we need to createSynthesizedExternVar like process.\n  }",
    "begin_line": 110,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VarCheck.visit#121",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/VarCheck.java",
    "class_name": "com.google.javascript.jscomp.VarCheck",
    "signature": "com.google.javascript.jscomp.VarCheck.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (!n.isName()) {\n      return;\n    }\n\n    String varName \u003d n.getString();\n\n    // Only a function can have an empty name.\n    if (varName.isEmpty()) {\n      Preconditions.checkState(parent.isFunction());\n      Preconditions.checkState(NodeUtil.isFunctionExpression(parent));\n      return;\n    }\n\n    // Check if this is a declaration for a var that has been declared\n    // elsewhere. If so, mark it as a duplicate.\n    if ((parent.isVar() ||\n         NodeUtil.isFunctionDeclaration(parent)) \u0026\u0026\n        varsToDeclareInExterns.contains(varName)) {\n      createSynthesizedExternVar(varName);\n\n      n.addSuppression(\"duplicate\");\n    }\n\n    // Check that the var has been declared.\n    Scope scope \u003d t.getScope();\n    Scope.Var var \u003d scope.getVar(varName);\n    if (var \u003d\u003d null) {\n      if (NodeUtil.isFunctionExpression(parent)) {\n        // e.g. [ function foo() {} ], it\u0027s okay if \"foo\" isn\u0027t defined in the\n        // current scope.\n      } else {\n        // The extern checks are stricter, don\u0027t report a second error.\n        if (!strictExternCheck || !t.getInput().isExtern()) {\n          t.report(n, UNDEFINED_VAR_ERROR, varName);\n        }\n\n        if (sanityCheck) {\n          throw new IllegalStateException(\"Unexpected variable \" + varName);\n        } else {\n          createSynthesizedExternVar(varName);\n          scope.getGlobalScope().declare(varName, n,\n              null, getSynthesizedExternsInput());\n        }\n      }\n      return;\n    }\n\n    CompilerInput currInput \u003d t.getInput();\n    CompilerInput varInput \u003d var.input;\n    if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n      // The variable was defined in the same file. This is fine.\n      return;\n    }\n\n    // Check module dependencies.\n    JSModule currModule \u003d currInput.getModule();\n    JSModule varModule \u003d varInput.getModule();\n    JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n    if (!sanityCheck \u0026\u0026\n        varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n      if (moduleGraph.dependsOn(currModule, varModule)) {\n        // The module dependency was properly declared.\n      } else {\n        if (scope.isGlobal()) {\n          if (moduleGraph.dependsOn(varModule, currModule)) {\n            // The variable reference violates a declared module dependency.\n            t.report(n, VIOLATED_MODULE_DEP_ERROR,\n                     currModule.getName(), varModule.getName(), varName);\n          } else {\n            // The variable reference is between two modules that have no\n            // dependency relationship. This should probably be considered an\n            // error, but just issue a warning for now.\n            t.report(n, MISSING_MODULE_DEP_ERROR,\n                     currModule.getName(), varModule.getName(), varName);\n          }\n        } else {\n          t.report(n, STRICT_MODULE_DEP_ERROR,\n                   currModule.getName(), varModule.getName(), varName);\n        }\n      }\n    }\n  }",
    "begin_line": 121,
    "end_line": 203,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VarCheck.createSynthesizedExternVar#209",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/VarCheck.java",
    "class_name": "com.google.javascript.jscomp.VarCheck",
    "signature": "com.google.javascript.jscomp.VarCheck.createSynthesizedExternVar(java.lang.String)",
    "snippet": "private void createSynthesizedExternVar(String varName) {\n    Node nameNode \u003d IR.name(varName);\n\n    // Mark the variable as constant if it matches the coding convention\n    // for constant vars.\n    // NOTE(nicksantos): honestly, I\u0027m not sure how much this matters.\n    // AFAIK, all people who use the CONST coding convention also\n    // compile with undeclaredVars as errors. We have some test\n    // cases for this configuration though, and it makes them happier.\n    if (compiler.getCodingConvention().isConstant(varName)) {\n      nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n    }\n\n    getSynthesizedExternsRoot().addChildToBack(\n        IR.var(nameNode));\n    varsToDeclareInExterns.remove(varName);\n    compiler.reportCodeChange();\n  }",
    "begin_line": 209,
    "end_line": 226,
    "comment": "/** \n * Create a new variable in a synthetic script. This will prevent subsequent compiler passes from crashing.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NameRefInExternsCheck.visit#234",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/VarCheck.java",
    "class_name": "com.google.javascript.jscomp.VarCheck",
    "signature": "com.google.javascript.jscomp.VarCheck.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName()) {\n        switch (parent.getType()) {\n          case Token.VAR:\n          case Token.FUNCTION:\n          case Token.PARAM_LIST:\n            // These are okay.\n            break;\n          case Token.GETPROP:\n            if (n \u003d\u003d parent.getFirstChild()) {\n              Scope scope \u003d t.getScope();\n              Scope.Var var \u003d scope.getVar(n.getString());\n              if (var \u003d\u003d null) {\n                t.report(n, UNDEFINED_EXTERN_VAR_ERROR, n.getString());\n                varsToDeclareInExterns.add(n.getString());\n              }\n            }\n            break;\n          default:\n            t.report(n, NAME_REFERENCE_IN_EXTERNS_ERROR, n.getString());\n\n            Scope scope \u003d t.getScope();\n            Scope.Var var \u003d scope.getVar(n.getString());\n            if (var \u003d\u003d null) {\n              varsToDeclareInExterns.add(n.getString());\n            }\n            break;\n        }\n      }\n    }",
    "begin_line": 234,
    "end_line": 263,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NameRefInExternsCheck.getSynthesizedExternsInput#267",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/VarCheck.java",
    "class_name": "com.google.javascript.jscomp.VarCheck",
    "signature": "com.google.javascript.jscomp.VarCheck.getSynthesizedExternsInput()",
    "snippet": "private CompilerInput getSynthesizedExternsInput() {\n    return compiler.getSynthesizedExternsInput();\n  }",
    "begin_line": 267,
    "end_line": 269,
    "comment": "/** \n * Lazily create a \"new\" externs input for undeclared variables. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NameRefInExternsCheck.getSynthesizedExternsRoot#272",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/VarCheck.java",
    "class_name": "com.google.javascript.jscomp.VarCheck",
    "signature": "com.google.javascript.jscomp.VarCheck.getSynthesizedExternsRoot()",
    "snippet": "private Node getSynthesizedExternsRoot() {\n    if (synthesizedExternsRoot \u003d\u003d null) {\n      CompilerInput synthesizedExterns \u003d getSynthesizedExternsInput();\n      synthesizedExternsRoot \u003d synthesizedExterns.getAstRoot(compiler);\n    }\n    return synthesizedExternsRoot;\n  }",
    "begin_line": 272,
    "end_line": 278,
    "comment": "/** \n * Lazily create a \"new\" externs root for undeclared variables. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VariableReferenceCheck.VariableReferenceCheck#59",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/VariableReferenceCheck.java",
    "class_name": "com.google.javascript.jscomp.VariableReferenceCheck",
    "signature": "com.google.javascript.jscomp.VariableReferenceCheck.VariableReferenceCheck(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.CheckLevel)",
    "snippet": "public VariableReferenceCheck(AbstractCompiler compiler,\n      CheckLevel checkLevel) {\n    this.compiler \u003d compiler;\n    this.checkLevel \u003d checkLevel;\n  }",
    "begin_line": 59,
    "end_line": 63,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VariableReferenceCheck.process#66",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/VariableReferenceCheck.java",
    "class_name": "com.google.javascript.jscomp.VariableReferenceCheck",
    "signature": "com.google.javascript.jscomp.VariableReferenceCheck.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void process(Node externs, Node root) {\n    ReferenceCollectingCallback callback \u003d new ReferenceCollectingCallback(\n        compiler, new ReferenceCheckingBehavior());\n    callback.process(externs, root);\n  }",
    "begin_line": 66,
    "end_line": 70,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VariableReferenceCheck.hotSwapScript#73",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/VariableReferenceCheck.java",
    "class_name": "com.google.javascript.jscomp.VariableReferenceCheck",
    "signature": "com.google.javascript.jscomp.VariableReferenceCheck.hotSwapScript(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n    ReferenceCollectingCallback callback \u003d new ReferenceCollectingCallback(\n        compiler, new ReferenceCheckingBehavior());\n    callback.hotSwapScript(scriptRoot, originalRoot);\n  }",
    "begin_line": 73,
    "end_line": 77,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceCheckingBehavior.afterExitScope#86",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/VariableReferenceCheck.java",
    "class_name": "com.google.javascript.jscomp.VariableReferenceCheck",
    "signature": "com.google.javascript.jscomp.VariableReferenceCheck.afterExitScope(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap)",
    "snippet": "@Override\n    public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap) {\n      // TODO(bashir) In hot-swap version this means that for global scope we\n      // only go through all global variables accessed in the modified file not\n      // all global variables. This should be fixed.\n\n      // Check all vars after finishing a scope\n      for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext();) {\n        Var v \u003d it.next();\n        checkVar(t, v, referenceMap.getReferences(v).references);\n      }\n    }",
    "begin_line": 86,
    "end_line": 96,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceCheckingBehavior.checkVar#104",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/VariableReferenceCheck.java",
    "class_name": "com.google.javascript.jscomp.VariableReferenceCheck",
    "signature": "com.google.javascript.jscomp.VariableReferenceCheck.checkVar(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.jscomp.Scope.Var, java.util.List\u003ccom.google.javascript.jscomp.ReferenceCollectingCallback.Reference\u003e)",
    "snippet": "private void checkVar(NodeTraversal t, Var v, List\u003cReference\u003e references) {\n      blocksWithDeclarations.clear();\n      boolean isDeclaredInScope \u003d false;\n      boolean isUnhoistedNamedFunction \u003d false;\n      Reference hoistedFn \u003d null;\n\n      // Look for hoisted functions.\n      for (Reference reference : references) {\n        if (reference.isHoistedFunction()) {\n          blocksWithDeclarations.add(reference.getBasicBlock());\n          isDeclaredInScope \u003d true;\n          hoistedFn \u003d reference;\n          break;\n        } else if (NodeUtil.isFunctionDeclaration(\n            reference.getNode().getParent())) {\n          isUnhoistedNamedFunction \u003d true;\n        }\n      }\n\n      for (Reference reference : references) {\n        if (reference \u003d\u003d hoistedFn) {\n          continue;\n        }\n\n        BasicBlock basicBlock \u003d reference.getBasicBlock();\n        boolean isDeclaration \u003d reference.isDeclaration();\n\n        boolean allowDupe \u003d\n            SyntacticScopeCreator.hasDuplicateDeclarationSuppression(\n                reference.getNode(), v);\n        if (isDeclaration \u0026\u0026 !allowDupe) {\n          // Look through all the declarations we\u0027ve found so far, and\n          // check if any of them are before this block.\n          for (BasicBlock declaredBlock : blocksWithDeclarations) {\n            if (declaredBlock.provablyExecutesBefore(basicBlock)) {\n              // TODO(johnlenz): Fix AST generating clients that so they would\n              // have property StaticSourceFile attached at each node. Or\n              // better yet, make sure the generated code never violates\n              // the requirement to pass aggressive var check!\n              String filename \u003d NodeUtil.getSourceName(reference.getNode());\n              compiler.report(\n                  JSError.make(filename,\n                      reference.getNode(),\n                      checkLevel,\n                      REDECLARED_VARIABLE, v.name));\n              break;\n            }\n          }\n        }\n\n        if (isUnhoistedNamedFunction \u0026\u0026 !isDeclaration \u0026\u0026 isDeclaredInScope) {\n          // Only allow an unhoisted named function to be used within the\n          // block it is declared.\n          for (BasicBlock declaredBlock : blocksWithDeclarations) {\n            if (!declaredBlock.provablyExecutesBefore(basicBlock)) {\n              String filename \u003d NodeUtil.getSourceName(reference.getNode());\n              compiler.report(\n                  JSError.make(filename,\n                      reference.getNode(),\n                      AMBIGUOUS_FUNCTION_DECL, v.name));\n              break;\n            }\n          }\n        }\n\n        if (!isDeclaration \u0026\u0026 !isDeclaredInScope) {\n          // Don\u0027t check the order of refer in externs files.\n          if (!reference.getNode().isFromExterns()) {\n            // Special case to deal with var goog \u003d goog || {}\n            Node grandparent \u003d reference.getGrandparent();\n            if (grandparent.isName()\n                \u0026\u0026 grandparent.getString() \u003d\u003d v.name) {\n              continue;\n            }\n\n            // Only generate warnings if the scopes do not match in order\n            // to deal with possible forward declarations and recursion\n            if (reference.getScope() \u003d\u003d v.scope) {\n              String filename \u003d NodeUtil.getSourceName(reference.getNode());\n              compiler.report(\n                  JSError.make(filename,\n                               reference.getNode(),\n                               checkLevel,\n                               UNDECLARED_REFERENCE, v.name));\n            }\n          }\n        }\n\n        if (isDeclaration) {\n          blocksWithDeclarations.add(basicBlock);\n          isDeclaredInScope \u003d true;\n        }\n      }\n    }",
    "begin_line": 104,
    "end_line": 197,
    "comment": "/** \n * If the variable is declared more than once in a basic block, generate a warning. Also check if a variable is used in a given scope before it is declared, which suggest a likely error. Relies on the fact that references is in parse-tree order.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WarningsGuard.Priority#58",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/WarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.WarningsGuard",
    "signature": "com.google.javascript.jscomp.WarningsGuard.Priority(int)",
    "snippet": " Priority(int value) {\n      this.value \u003d value;\n    }",
    "begin_line": 58,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WarningsGuard.getValue#62",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/WarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.WarningsGuard",
    "signature": "com.google.javascript.jscomp.WarningsGuard.getValue()",
    "snippet": "public int getValue() {\n      return value;\n    }",
    "begin_line": 62,
    "end_line": 64,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WarningsGuard.level#77",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/WarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.WarningsGuard",
    "signature": "com.google.javascript.jscomp.WarningsGuard.level(com.google.javascript.jscomp.JSError)",
    "snippet": "public abstract CheckLevel level(JSError error);",
    "begin_line": 77,
    "end_line": 77,
    "comment": "/** \n * Returns a new check level for a given error. OFF - suppress it, ERROR - report as error. null means that this guard does not know what to do with the error. Null is extremely helpful when you have a chain of guards. If current guard returns null, then the next in the chain should process it.\n * @param error a reported error.\n * @return what level given error should have.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WarningsGuard.getPriority#83",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/WarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.WarningsGuard",
    "signature": "com.google.javascript.jscomp.WarningsGuard.getPriority()",
    "snippet": "protected int getPriority() {\n    return Priority.DEFAULT.value;\n  }",
    "begin_line": 83,
    "end_line": 85,
    "comment": "/** \n * The priority in which warnings guards are applied. Lower means the guard will be applied sooner. Expressed on a scale of 1 to 100.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WarningsGuard.disables#94",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/WarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.WarningsGuard",
    "signature": "com.google.javascript.jscomp.WarningsGuard.disables(com.google.javascript.jscomp.DiagnosticGroup)",
    "snippet": "protected boolean disables(DiagnosticGroup group) {\n    return false;\n  }",
    "begin_line": 94,
    "end_line": 96,
    "comment": "/** \n * Returns whether all warnings in the given diagnostic group will be filtered out. Used to determine which passes to skip.\n * @param group A group of DiagnosticTypes.\n * @return Whether all warnings of these types are disabled by this guard.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WarningsGuard.enables#105",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/WarningsGuard.java",
    "class_name": "com.google.javascript.jscomp.WarningsGuard",
    "signature": "com.google.javascript.jscomp.WarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
    "snippet": "protected boolean enables(DiagnosticGroup group) {\n    return false;\n  }",
    "begin_line": 105,
    "end_line": 107,
    "comment": "/** \n * Returns whether any of the warnings in the given diagnostic group will be upgraded to a warning or error.\n * @param group A group of DiagnosticTypes.\n * @return Whether any warnings of these types are enabled by this guard.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraph.getDirectedGraphNodes#33",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.getDirectedGraphNodes()",
    "snippet": "public abstract Iterable\u003cDiGraphNode\u003cN, E\u003e\u003e getDirectedGraphNodes();",
    "begin_line": 33,
    "end_line": 33,
    "comment": "/** \n * Gets an immutable iterable over all the nodes in the graph.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraph.getOutEdges#38",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.getOutEdges(N)",
    "snippet": "public abstract List\u003cDiGraphEdge\u003cN, E\u003e\u003e getOutEdges(N nodeValue);",
    "begin_line": 38,
    "end_line": 38,
    "comment": "/** \n * Gets an immutable list of out edges of the given node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraph.getInEdges#43",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.getInEdges(N)",
    "snippet": "public abstract List\u003cDiGraphEdge\u003cN, E\u003e\u003e getInEdges(N nodeValue);",
    "begin_line": 43,
    "end_line": 43,
    "comment": "/** \n * Gets an immutable list of in edges of the given node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraph.getDirectedPredNodes#45",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.getDirectedPredNodes(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003cN,E\u003e)",
    "snippet": "public abstract List\u003cDiGraphNode\u003cN, E\u003e\u003e getDirectedPredNodes(\n      DiGraphNode\u003cN, E\u003e n);",
    "begin_line": 45,
    "end_line": 46,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraph.getDirectedSuccNodes#48",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.getDirectedSuccNodes(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003cN,E\u003e)",
    "snippet": "public abstract List\u003cDiGraphNode\u003cN, E\u003e\u003e getDirectedSuccNodes(\n      DiGraphNode\u003cN, E\u003e n);",
    "begin_line": 48,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraph.getDirectedPredNodes#52",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.getDirectedPredNodes(N)",
    "snippet": "public abstract List\u003cDiGraphNode\u003cN, E\u003e\u003e getDirectedPredNodes(N nodeValue);",
    "begin_line": 52,
    "end_line": 52,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraph.getDirectedSuccNodes#55",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.getDirectedSuccNodes(N)",
    "snippet": "public abstract List\u003cDiGraphNode\u003cN, E\u003e\u003e getDirectedSuccNodes(N nodeValue);",
    "begin_line": 55,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraph.createDirectedGraphNode#57",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.createDirectedGraphNode(N)",
    "snippet": "public abstract DiGraphNode\u003cN, E\u003e createDirectedGraphNode(N nodeValue);",
    "begin_line": 57,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraph.getDirectedGraphNode#59",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.getDirectedGraphNode(N)",
    "snippet": "public abstract DiGraphNode\u003cN, E\u003e getDirectedGraphNode(N nodeValue);",
    "begin_line": 59,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraph.getDirectedGraphEdges#62",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.getDirectedGraphEdges(N, N)",
    "snippet": "public abstract List\u003cDiGraphEdge\u003cN, E\u003e\u003e getDirectedGraphEdges(N n1, N n2);",
    "begin_line": 62,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraph.disconnectInDirection#70",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.disconnectInDirection(N, N)",
    "snippet": "public abstract void disconnectInDirection(N n1, N n2);",
    "begin_line": 70,
    "end_line": 70,
    "comment": "/** \n * Disconnects all edges from n1 to n2.\n * @param n1 Source node.\n * @param n2 Destination node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraph.isConnectedInDirection#79",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.isConnectedInDirection(N, N)",
    "snippet": "public abstract boolean isConnectedInDirection(N n1, N n2);",
    "begin_line": 79,
    "end_line": 79,
    "comment": "/** \n * Checks whether two nodes in the graph are connected via a directed edge.\n * @param n1 Node 1.\n * @param n2 Node 2.\n * @return \u003ccode\u003etrue\u003c/code\u003e if the graph contains edge from n1 to n2.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraph.isConnectedInDirection#90",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.isConnectedInDirection(N, E, N)",
    "snippet": "public abstract boolean isConnectedInDirection(N n1, E edgeValue, N n2);",
    "begin_line": 90,
    "end_line": 90,
    "comment": "/** \n * Checks whether two nodes in the graph are connected via a directed edge with the given value.\n * @param n1 Node 1.\n * @param edgeValue edge value tag\n * @param n2 Node 2.\n * @return \u003ccode\u003etrue\u003c/code\u003e if the edge exists.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraph.isConnected#93",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.isConnected(N, N)",
    "snippet": "@Override\n  public boolean isConnected(N n1, N n2) {\n    return isConnectedInDirection(n1, n2) || isConnectedInDirection(n2, n1);\n  }",
    "begin_line": 93,
    "end_line": 95,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraph.isConnected#98",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.isConnected(N, E, N)",
    "snippet": "@Override\n  public boolean isConnected(N n1, E e, N n2) {\n    return isConnectedInDirection(n1, e, n2) ||\n        isConnectedInDirection(n2, e, n1);\n  }",
    "begin_line": 98,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraphNode.getOutEdges#111",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.getOutEdges()",
    "snippet": "public List\u003cDiGraphEdge\u003cN, E\u003e\u003e getOutEdges();",
    "begin_line": 111,
    "end_line": 111,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraphNode.getInEdges#113",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.getInEdges()",
    "snippet": "public List\u003cDiGraphEdge\u003cN, E\u003e\u003e getInEdges();",
    "begin_line": 113,
    "end_line": 113,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraphEdge.getSource#124",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.getSource()",
    "snippet": "public DiGraphNode\u003cN, E\u003e getSource();",
    "begin_line": 124,
    "end_line": 124,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraphEdge.getDestination#126",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.getDestination()",
    "snippet": "public DiGraphNode\u003cN, E\u003e getDestination();",
    "begin_line": 126,
    "end_line": 126,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraphEdge.setSource#128",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.setSource(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003cN,E\u003e)",
    "snippet": "public void setSource(DiGraphNode\u003cN, E\u003e node);",
    "begin_line": 128,
    "end_line": 128,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DiGraphEdge.setDestination#130",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/DiGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.DiGraph",
    "signature": "com.google.javascript.jscomp.graph.DiGraph.setDestination(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003cN,E\u003e)",
    "snippet": "public void setDestination(DiGraphNode\u003cN, E\u003e node);",
    "begin_line": 130,
    "end_line": 130,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationState.AnnotationState#66",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.AnnotationState(com.google.javascript.jscomp.graph.Annotatable, com.google.javascript.jscomp.graph.Annotation)",
    "snippet": "public AnnotationState(Annotatable annotatable, Annotation annotation) {\n      this.first \u003d annotatable;\n      this.second \u003d annotation;\n    }",
    "begin_line": 66,
    "end_line": 69,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.GraphAnnotationState#79",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.GraphAnnotationState(int)",
    "snippet": "public GraphAnnotationState(int size) {\n      super(size);\n    }",
    "begin_line": 79,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.connect#101",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.connect(N, E, N)",
    "snippet": "public abstract void connect(N n1, E edge, N n2);",
    "begin_line": 101,
    "end_line": 101,
    "comment": "/** \n * Connects two nodes in the graph with an edge.\n * @param n1 First node.\n * @param edge The edge.\n * @param n2 Second node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.disconnect#109",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.disconnect(N, N)",
    "snippet": "public abstract void disconnect(N n1, N n2);",
    "begin_line": 109,
    "end_line": 109,
    "comment": "/** \n * Disconnects two nodes in the graph by removing all edges between them.\n * @param n1 First node.\n * @param n2 Second node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.connectIfNotFound#119",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.connectIfNotFound(N, E, N)",
    "snippet": "public final void connectIfNotFound(N n1, E edge, N n2) {\n    if (!isConnected(n1, edge, n2)) {\n      connect(n1, edge, n2);\n    }\n  }",
    "begin_line": 119,
    "end_line": 123,
    "comment": "/** \n * Connects two nodes in the graph with an edge if such edge does not already exists between the nodes.\n * @param n1 First node.\n * @param edge The edge.\n * @param n2 Second node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.createNode#133",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.createNode(N)",
    "snippet": "public abstract GraphNode\u003cN, E\u003e createNode(N value);",
    "begin_line": 133,
    "end_line": 133,
    "comment": "/** \n * Gets a node from the graph given a value. New nodes are created if that value has not been assigned a graph node. Values equality are compared using \u003ccode\u003eObject.equals\u003c/code\u003e.\n * @param value The node\u0027s value.\n * @return The corresponding node in the graph.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.getNodes#137",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.getNodes()",
    "snippet": "@Override\n  public abstract Collection\u003cGraphNode\u003cN, E\u003e\u003e getNodes();",
    "begin_line": 137,
    "end_line": 137,
    "comment": "/** \n * Gets an immutable list of all nodes. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.getEdges#140",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.getEdges()",
    "snippet": "public abstract List\u003cGraphEdge\u003cN, E\u003e\u003e getEdges();",
    "begin_line": 140,
    "end_line": 140,
    "comment": "/** \n * Gets an immutable list of all edges. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.getNodeDegree#148",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.getNodeDegree(N)",
    "snippet": "public abstract int getNodeDegree(N value);",
    "begin_line": 148,
    "end_line": 148,
    "comment": "/** \n * Gets the degree of a node.\n * @param value The node\u0027s value.\n * @return The degree of the node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.getWeight#151",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.getWeight(N)",
    "snippet": "@Override\n  public int getWeight(N value) {\n    return getNodeDegree(value);\n  }",
    "begin_line": 151,
    "end_line": 153,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.getNeighborNodes#161",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.getNeighborNodes(N)",
    "snippet": "public abstract List\u003cGraphNode\u003cN, E\u003e\u003e getNeighborNodes(N value);",
    "begin_line": 161,
    "end_line": 161,
    "comment": "/** \n * Gets the neighboring nodes.\n * @param value The node\u0027s value.\n * @return A list of neighboring nodes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.getNeighborNodesIterator#163",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.getNeighborNodesIterator(N)",
    "snippet": "public abstract Iterator\u003cGraphNode\u003cN, E\u003e\u003e getNeighborNodesIterator(N value);",
    "begin_line": 163,
    "end_line": 163,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.getEdges#172",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.getEdges(N, N)",
    "snippet": "public abstract List\u003cGraphEdge\u003cN, E\u003e\u003e getEdges(N n1, N n2);",
    "begin_line": 172,
    "end_line": 172,
    "comment": "/** \n * Retrieves an edge from the graph.\n * @param n1 Node one.\n * @param n2 Node two.\n * @return The list of edges between those two values in the graph.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.getFirstEdge#182",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.getFirstEdge(N, N)",
    "snippet": "public abstract GraphEdge\u003cN, E\u003e getFirstEdge(N n1, N n2);",
    "begin_line": 182,
    "end_line": 182,
    "comment": "/** \n * Retrieves any edge from the graph.\n * @param n1 Node one.\n * @param n2 Node two.\n * @return The first edges between those two values in the graph. null ifthere are none.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.hasNode#191",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.hasNode(N)",
    "snippet": "public final boolean hasNode(N n) {\n    return getNode(n) !\u003d null;\n  }",
    "begin_line": 191,
    "end_line": 193,
    "comment": "/** \n * Checks whether the node exists in the graph ( {@link #createNode(Object)}has been called with that value).\n * @param n Node.\n * @return \u003ccode\u003etrue\u003c/code\u003e if it exist.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.isConnected#202",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.isConnected(N, N)",
    "snippet": "public abstract boolean isConnected(N n1, N n2);",
    "begin_line": 202,
    "end_line": 202,
    "comment": "/** \n * Checks whether two nodes in the graph are connected.\n * @param n1 Node 1.\n * @param n2 Node 2.\n * @return \u003ccode\u003etrue\u003c/code\u003e if the two nodes are connected.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.isConnected#212",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.isConnected(N, E, N)",
    "snippet": "public abstract boolean isConnected(N n1, E e, N n2);",
    "begin_line": 212,
    "end_line": 212,
    "comment": "/** \n * Checks whether two nodes in the graph are connected by the given edge type.\n * @param n1 Node 1.\n * @param e The edge type.\n * @param n2 Node 2.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.getNodeOrFail#219",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.getNodeOrFail(N)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n  \u003cT extends GraphNode\u003cN, E\u003e\u003e T getNodeOrFail(N val) {\n    T node \u003d (T) getNode(val);\n    if (node \u003d\u003d null) {\n      throw new IllegalArgumentException(val + \" does not exist in graph\");\n    }\n    return node;\n  }",
    "begin_line": 219,
    "end_line": 225,
    "comment": "/** \n * Gets the node of the specified type, or throws an IllegalArgumentException.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.clearNodeAnnotations#228",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.clearNodeAnnotations()",
    "snippet": "@Override\n  public final void clearNodeAnnotations() {\n    for (GraphNode\u003cN, E\u003e n : getNodes()) {\n      n.setAnnotation(null);\n    }\n  }",
    "begin_line": 228,
    "end_line": 232,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.clearEdgeAnnotations#235",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.clearEdgeAnnotations()",
    "snippet": "public final void clearEdgeAnnotations() {\n    for (GraphEdge\u003cN, E\u003e e : getEdges()) {\n      e.setAnnotation(null);\n    }\n  }",
    "begin_line": 235,
    "end_line": 239,
    "comment": "/** \n * Makes each edge\u0027s annotation null. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.pushNodeAnnotations#245",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.pushNodeAnnotations()",
    "snippet": "public final void pushNodeAnnotations() {\n    if (nodeAnnotationStack \u003d\u003d null) {\n      nodeAnnotationStack \u003d Lists.newLinkedList();\n    }\n    pushAnnotations(nodeAnnotationStack, getNodes());\n  }",
    "begin_line": 245,
    "end_line": 250,
    "comment": "/** \n * Pushes nodes\u0027 annotation values. Restored with {@link #popNodeAnnotations()}. Nodes\u0027 annotation values are cleared.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.popNodeAnnotations#256",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.popNodeAnnotations()",
    "snippet": "public final void popNodeAnnotations() {\n    Preconditions.checkNotNull(nodeAnnotationStack,\n        \"Popping node annotations without pushing.\");\n    popAnnotations(nodeAnnotationStack);\n  }",
    "begin_line": 256,
    "end_line": 260,
    "comment": "/** \n * Restores nodes\u0027 annotation values to state before last {@link #pushNodeAnnotations()}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.pushEdgeAnnotations#266",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.pushEdgeAnnotations()",
    "snippet": "public final void pushEdgeAnnotations() {\n    if (edgeAnnotationStack \u003d\u003d null) {\n      edgeAnnotationStack \u003d Lists.newLinkedList();\n    }\n    pushAnnotations(edgeAnnotationStack, getEdges());\n  }",
    "begin_line": 266,
    "end_line": 271,
    "comment": "/** \n * Pushes edges\u0027 annotation values. Restored with {@link #popEdgeAnnotations()}. Edges\u0027 annotation values are cleared.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphAnnotationState.popEdgeAnnotations#277",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.popEdgeAnnotations()",
    "snippet": "public final void popEdgeAnnotations() {\n    Preconditions.checkNotNull(edgeAnnotationStack,\n        \"Popping edge annotations without pushing.\");\n    popAnnotations(edgeAnnotationStack);\n  }",
    "begin_line": 277,
    "end_line": 281,
    "comment": "/** \n * Restores edges\u0027 annotation values to state before last {@link #pushEdgeAnnotations()}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphEdge.getValue#295",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.getValue()",
    "snippet": "E getValue();",
    "begin_line": 295,
    "end_line": 295,
    "comment": "/** \n * Retrieves the edge\u0027s value.\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphEdge.getNodeA#297",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.getNodeA()",
    "snippet": "GraphNode\u003cN, E\u003e getNodeA();",
    "begin_line": 297,
    "end_line": 297,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GraphEdge.getNodeB#299",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.getNodeB()",
    "snippet": "GraphNode\u003cN, E\u003e getNodeB();",
    "begin_line": 299,
    "end_line": 299,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleSubGraph.SimpleSubGraph#310",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.SimpleSubGraph(com.google.javascript.jscomp.graph.Graph\u003cN,E\u003e)",
    "snippet": " SimpleSubGraph(Graph\u003cN, E\u003e graph) {\n      this.graph \u003d graph;\n    }",
    "begin_line": 310,
    "end_line": 312,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleSubGraph.isIndependentOf#315",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.isIndependentOf(N)",
    "snippet": "@Override\n    public boolean isIndependentOf(N value) {\n      GraphNode\u003cN, E\u003e node \u003d graph.getNode(value);\n      for (GraphNode\u003cN, E\u003e n : nodes) {\n        if (graph.getNeighborNodes(n.getValue()).contains(node)) {\n          return false;\n        }\n      }\n      return true;\n    }",
    "begin_line": 315,
    "end_line": 323,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleSubGraph.addNode#326",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.addNode(N)",
    "snippet": "@Override\n    public void addNode(N value) {\n      nodes.add(graph.getNodeOrFail(value));\n    }",
    "begin_line": 326,
    "end_line": 328,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleSubGraph.pushAnnotations#335",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.pushAnnotations(java.util.Deque\u003ccom.google.javascript.jscomp.graph.Graph.GraphAnnotationState\u003e, java.util.Collection\u003c? extends com.google.javascript.jscomp.graph.Annotatable\u003e)",
    "snippet": "private static void pushAnnotations(\n      Deque\u003cGraphAnnotationState\u003e stack,\n      Collection\u003c? extends Annotatable\u003e haveAnnotations) {\n    stack.push(new GraphAnnotationState(haveAnnotations.size()));\n    for (Annotatable h : haveAnnotations) {\n      stack.peek().add(new AnnotationState(h, h.getAnnotation()));\n      h.setAnnotation(null);\n    }\n  }",
    "begin_line": 335,
    "end_line": 343,
    "comment": "/** \n * Pushes a new list on stack and stores nodes annotations in the new list. Clears objects\u0027 annotations as well.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleSubGraph.popAnnotations#348",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/Graph.java",
    "class_name": "com.google.javascript.jscomp.graph.Graph",
    "signature": "com.google.javascript.jscomp.graph.Graph.popAnnotations(java.util.Deque\u003ccom.google.javascript.jscomp.graph.Graph.GraphAnnotationState\u003e)",
    "snippet": "private static void popAnnotations(Deque\u003cGraphAnnotationState\u003e stack) {\n    for (AnnotationState as : stack.pop()) {\n      as.first.setAnnotation(as.second);\n    }\n  }",
    "begin_line": 348,
    "end_line": 352,
    "comment": "/** \n * Restores the node annotations on the top of stack and pops stack.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.newSubGraph#48",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.newSubGraph()",
    "snippet": "@Override\n  public SubGraph\u003cN, E\u003e newSubGraph() {\n    return new SimpleSubGraph\u003cN, E\u003e(this);\n  }",
    "begin_line": 48,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.createWithoutAnnotations#52",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations()",
    "snippet": "public static \u003cN, E\u003e LinkedDirectedGraph\u003cN, E\u003e createWithoutAnnotations() {\n    return new LinkedDirectedGraph\u003cN, E\u003e(false, false);\n  }",
    "begin_line": 52,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.createWithNodeAnnotations#56",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations()",
    "snippet": "public static \u003cN, E\u003e LinkedDirectedGraph\u003cN, E\u003e createWithNodeAnnotations() {\n    return new LinkedDirectedGraph\u003cN, E\u003e(true, false);\n  }",
    "begin_line": 56,
    "end_line": 58,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.createWithEdgeAnnotations#60",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations()",
    "snippet": "public static \u003cN, E\u003e LinkedDirectedGraph\u003cN, E\u003e createWithEdgeAnnotations() {\n    return new LinkedDirectedGraph\u003cN, E\u003e(false, true);\n  }",
    "begin_line": 60,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.create#64",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.create()",
    "snippet": "public static \u003cN, E\u003e LinkedDirectedGraph\u003cN, E\u003e create() {\n    return new LinkedDirectedGraph\u003cN, E\u003e(true, true);\n  }",
    "begin_line": 64,
    "end_line": 66,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.LinkedDirectedGraph#71",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraph(boolean, boolean)",
    "snippet": "protected LinkedDirectedGraph(\n      boolean useNodeAnnotations, boolean useEdgeAnnotations) {\n    this.useNodeAnnotations \u003d useNodeAnnotations;\n    this.useEdgeAnnotations \u003d useEdgeAnnotations;\n  }",
    "begin_line": 71,
    "end_line": 75,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.connect#78",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.connect(N, E, N)",
    "snippet": "@Override\n  public void connect(N srcValue, E edgeValue, N destValue) {\n    LinkedDirectedGraphNode\u003cN, E\u003e src \u003d getNodeOrFail(srcValue);\n    LinkedDirectedGraphNode\u003cN, E\u003e dest \u003d getNodeOrFail(destValue);\n    LinkedDirectedGraphEdge\u003cN, E\u003e edge \u003d\n        useEdgeAnnotations ?\n        new AnnotatedLinkedDirectedGraphEdge\u003cN, E\u003e(src, edgeValue, dest) :\n        new LinkedDirectedGraphEdge\u003cN, E\u003e(src, edgeValue, dest);\n    src.getOutEdges().add(edge);\n    dest.getInEdges().add(edge);\n  }",
    "begin_line": 78,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.disconnect#90",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.disconnect(N, N)",
    "snippet": "@Override\n  public void disconnect(N n1, N n2) {\n    disconnectInDirection(n1, n2);\n    disconnectInDirection(n2, n1);\n  }",
    "begin_line": 90,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.disconnectInDirection#96",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.disconnectInDirection(N, N)",
    "snippet": "@Override\n  public void disconnectInDirection(N srcValue, N destValue) {\n    LinkedDirectedGraphNode\u003cN, E\u003e src \u003d getNodeOrFail(srcValue);\n    LinkedDirectedGraphNode\u003cN, E\u003e dest \u003d getNodeOrFail(destValue);\n    for (DiGraphEdge\u003c?, E\u003e edge : getDirectedGraphEdges(srcValue, destValue)) {\n      src.getOutEdges().remove(edge);\n      dest.getInEdges().remove(edge);\n    }\n  }",
    "begin_line": 96,
    "end_line": 103,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getDirectedGraphNodes#106",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedGraphNodes()",
    "snippet": "@Override\n  public Iterable\u003cDiGraphNode\u003cN, E\u003e\u003e getDirectedGraphNodes() {\n    return Collections.\u003cDiGraphNode\u003cN, E\u003e\u003eunmodifiableCollection(\n        nodes.values());\n  }",
    "begin_line": 106,
    "end_line": 109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getDirectedGraphNode#112",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedGraphNode(N)",
    "snippet": "@Override\n  public DiGraphNode\u003cN, E\u003e getDirectedGraphNode(N nodeValue) {\n    return nodes.get(nodeValue);\n  }",
    "begin_line": 112,
    "end_line": 114,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getNode#117",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getNode(N)",
    "snippet": "@Override\n  public GraphNode\u003cN, E\u003e getNode(N nodeValue) {\n    return getDirectedGraphNode(nodeValue);\n  }",
    "begin_line": 117,
    "end_line": 119,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getInEdges#122",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getInEdges(N)",
    "snippet": "@Override\n  public List\u003cDiGraphEdge\u003cN, E\u003e\u003e getInEdges(N nodeValue) {\n    LinkedDirectedGraphNode\u003cN, E\u003e node \u003d getNodeOrFail(nodeValue);\n    return Collections.\u003cDiGraphEdge\u003cN, E\u003e\u003eunmodifiableList(node.getInEdges());\n  }",
    "begin_line": 122,
    "end_line": 125,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getOutEdges#128",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getOutEdges(N)",
    "snippet": "@Override\n  public List\u003cDiGraphEdge\u003cN, E\u003e\u003e getOutEdges(N nodeValue) {\n    LinkedDirectedGraphNode\u003cN, E\u003e node \u003d getNodeOrFail(nodeValue);\n    return Collections.\u003cDiGraphEdge\u003cN, E\u003e\u003eunmodifiableList(node.getOutEdges());\n  }",
    "begin_line": 128,
    "end_line": 131,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.createDirectedGraphNode#134",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.createDirectedGraphNode(N)",
    "snippet": "@Override\n  public DiGraphNode\u003cN, E\u003e createDirectedGraphNode(N nodeValue) {\n    LinkedDirectedGraphNode\u003cN, E\u003e node \u003d nodes.get(nodeValue);\n    if (node \u003d\u003d null) {\n      node \u003d useNodeAnnotations ?\n          new AnnotatedLinkedDirectedGraphNode\u003cN, E\u003e(nodeValue) :\n          new LinkedDirectedGraphNode\u003cN, E\u003e(nodeValue);\n      nodes.put(nodeValue, node);\n    }\n    return node;\n  }",
    "begin_line": 134,
    "end_line": 143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getEdges#146",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getEdges(N, N)",
    "snippet": "@Override\n  public List\u003cGraphEdge\u003cN, E\u003e\u003e getEdges(N n1, N n2) {\n    // Since this is a method from a generic graph, edges from both\n    // directions must be added to the returning list.\n    List\u003cDiGraphEdge\u003cN, E\u003e\u003e forwardEdges \u003d getDirectedGraphEdges(n1, n2);\n    List\u003cDiGraphEdge\u003cN, E\u003e\u003e backwardEdges \u003d getDirectedGraphEdges(n2, n1);\n    int totalSize \u003d forwardEdges.size() + backwardEdges.size();\n    List\u003cGraphEdge\u003cN, E\u003e\u003e edges \u003d Lists.newArrayListWithCapacity(totalSize);\n    edges.addAll(forwardEdges);\n    edges.addAll(backwardEdges);\n    return edges;\n  }",
    "begin_line": 146,
    "end_line": 156,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getFirstEdge#159",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getFirstEdge(N, N)",
    "snippet": "@Override\n  public GraphEdge\u003cN, E\u003e getFirstEdge(N n1, N n2) {\n    DiGraphNode\u003cN, E\u003e dNode1 \u003d getNodeOrFail(n1);\n    DiGraphNode\u003cN, E\u003e dNode2 \u003d getNodeOrFail(n2);\n    for (DiGraphEdge\u003cN, E\u003e outEdge : dNode1.getOutEdges()) {\n      if (outEdge.getDestination() \u003d\u003d dNode2) {\n        return outEdge;\n      }\n    }\n    for (DiGraphEdge\u003cN, E\u003e outEdge : dNode2.getOutEdges()) {\n      if (outEdge.getDestination() \u003d\u003d dNode1) {\n        return outEdge;\n      }\n    }\n    return null;\n  }",
    "begin_line": 159,
    "end_line": 173,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.createNode#176",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.createNode(N)",
    "snippet": "@Override\n  public GraphNode\u003cN, E\u003e createNode(N value) {\n    return createDirectedGraphNode(value);\n  }",
    "begin_line": 176,
    "end_line": 178,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getDirectedGraphEdges#181",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedGraphEdges(N, N)",
    "snippet": "@Override\n  public List\u003cDiGraphEdge\u003cN, E\u003e\u003e getDirectedGraphEdges(N n1, N n2) {\n    DiGraphNode\u003cN, E\u003e dNode1 \u003d getNodeOrFail(n1);\n    DiGraphNode\u003cN, E\u003e dNode2 \u003d getNodeOrFail(n2);\n    List\u003cDiGraphEdge\u003cN, E\u003e\u003e edges \u003d Lists.newArrayList();\n    for (DiGraphEdge\u003cN, E\u003e outEdge : dNode1.getOutEdges()) {\n      if (outEdge.getDestination() \u003d\u003d dNode2) {\n        edges.add(outEdge);\n      }\n    }\n    return edges;\n  }",
    "begin_line": 181,
    "end_line": 191,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.isConnectedInDirection#194",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.isConnectedInDirection(N, N)",
    "snippet": "@Override\n  public boolean isConnectedInDirection(N n1, N n2) {\n    return isConnectedInDirection(n1, Predicates.\u003cE\u003ealwaysTrue(), n2);\n  }",
    "begin_line": 194,
    "end_line": 196,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.isConnectedInDirection#199",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.isConnectedInDirection(N, E, N)",
    "snippet": "@Override\n  public boolean isConnectedInDirection(N n1, E edgeValue, N n2) {\n    return isConnectedInDirection(n1, Predicates.equalTo(edgeValue), n2);\n  }",
    "begin_line": 199,
    "end_line": 201,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.isConnectedInDirection#203",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.isConnectedInDirection(N, Predicate\u003cE\u003e, N)",
    "snippet": "private boolean isConnectedInDirection(N n1, Predicate\u003cE\u003e edgeMatcher, N n2) {\n    // Verify the nodes.\n    DiGraphNode\u003cN, E\u003e dNode1 \u003d getNodeOrFail(n1);\n    DiGraphNode\u003cN, E\u003e dNode2 \u003d getNodeOrFail(n2);\n    for (DiGraphEdge\u003cN, E\u003e outEdge : dNode1.getOutEdges()) {\n      if (outEdge.getDestination() \u003d\u003d dNode2 \u0026\u0026\n          edgeMatcher.apply(outEdge.getValue())) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
    "begin_line": 203,
    "end_line": 215,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getDirectedPredNodes#218",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedPredNodes(N)",
    "snippet": "@Override\n  public List\u003cDiGraphNode\u003cN, E\u003e\u003e getDirectedPredNodes(N nodeValue) {\n    return getDirectedPredNodes(nodes.get(nodeValue));\n  }",
    "begin_line": 218,
    "end_line": 220,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getDirectedSuccNodes#223",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedSuccNodes(N)",
    "snippet": "@Override\n  public List\u003cDiGraphNode\u003cN, E\u003e\u003e getDirectedSuccNodes(N nodeValue) {\n    return getDirectedSuccNodes(nodes.get(nodeValue));\n  }",
    "begin_line": 223,
    "end_line": 225,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getDirectedPredNodes#228",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedPredNodes(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003cN,E\u003e)",
    "snippet": "@Override\n  public List\u003cDiGraphNode\u003cN, E\u003e\u003e getDirectedPredNodes(\n      DiGraphNode\u003cN, E\u003e dNode) {\n    if (dNode \u003d\u003d null) {\n      throw new IllegalArgumentException(dNode + \" is null\");\n    }\n    List\u003cDiGraphNode\u003cN, E\u003e\u003e nodeList \u003d Lists.newArrayList();\n    for (DiGraphEdge\u003cN, E\u003e edge : dNode.getInEdges()) {\n      nodeList.add(edge.getSource());\n    }\n    return nodeList;\n  }",
    "begin_line": 228,
    "end_line": 238,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getDirectedSuccNodes#241",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedSuccNodes(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003cN,E\u003e)",
    "snippet": "@Override\n  public List\u003cDiGraphNode\u003cN, E\u003e\u003e getDirectedSuccNodes(\n      DiGraphNode\u003cN, E\u003e dNode) {\n    if (dNode \u003d\u003d null) {\n      throw new IllegalArgumentException(dNode + \" is null\");\n    }\n    List\u003cDiGraphNode\u003cN, E\u003e\u003e nodeList \u003d Lists.newArrayList();\n    for (DiGraphEdge\u003cN, E\u003e edge : dNode.getOutEdges()) {\n      nodeList.add(edge.getDestination());\n    }\n    return nodeList;\n  }",
    "begin_line": 241,
    "end_line": 251,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getGraphvizEdges#254",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getGraphvizEdges()",
    "snippet": "@Override\n  public List\u003cGraphvizEdge\u003e getGraphvizEdges() {\n    List\u003cGraphvizEdge\u003e edgeList \u003d Lists.newArrayList();\n    for (LinkedDirectedGraphNode\u003cN, E\u003e node : nodes.values()) {\n      for (DiGraphEdge\u003cN, E\u003e edge : node.getOutEdges()) {\n        edgeList.add((LinkedDirectedGraphEdge\u003cN, E\u003e) edge);\n      }\n    }\n    return edgeList;\n  }",
    "begin_line": 254,
    "end_line": 262,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getGraphvizNodes#265",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getGraphvizNodes()",
    "snippet": "@Override\n  public List\u003cGraphvizNode\u003e getGraphvizNodes() {\n    List\u003cGraphvizNode\u003e nodeList \u003d\n        Lists.newArrayListWithCapacity(nodes.size());\n    for (LinkedDirectedGraphNode\u003cN, E\u003e node : nodes.values()) {\n      nodeList.add(node);\n    }\n    return nodeList;\n  }",
    "begin_line": 265,
    "end_line": 272,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getName#275",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getName()",
    "snippet": "@Override\n  public String getName() {\n    return \"LinkedGraph\";\n  }",
    "begin_line": 275,
    "end_line": 277,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.isDirected#280",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.isDirected()",
    "snippet": "@Override\n  public boolean isDirected() {\n    return true;\n  }",
    "begin_line": 280,
    "end_line": 282,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getNodes#285",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getNodes()",
    "snippet": "@Override\n  public Collection\u003cGraphNode\u003cN, E\u003e\u003e getNodes() {\n    return Collections.\u003cGraphNode\u003cN, E\u003e\u003eunmodifiableCollection(nodes.values());\n  }",
    "begin_line": 285,
    "end_line": 287,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getNeighborNodes#290",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getNeighborNodes(N)",
    "snippet": "@Override\n  public List\u003cGraphNode\u003cN, E\u003e\u003e getNeighborNodes(N value) {\n    DiGraphNode\u003cN, E\u003e node \u003d getDirectedGraphNode(value);\n    return getNeighborNodes(node);\n  }",
    "begin_line": 290,
    "end_line": 293,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getNeighborNodes#295",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getNeighborNodes(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003cN,E\u003e)",
    "snippet": "public List\u003cGraphNode\u003cN, E\u003e\u003e getNeighborNodes(DiGraphNode\u003cN, E\u003e node) {\n    List\u003cGraphNode\u003cN, E\u003e\u003e result \u003d Lists.newArrayList();\n    for (Iterator\u003cGraphNode\u003cN, E\u003e\u003e i \u003d\n      ((LinkedDirectedGraphNode\u003cN, E\u003e) node).neighborIterator();i.hasNext();) {\n      result.add(i.next());\n    }\n    return result;\n  }",
    "begin_line": 295,
    "end_line": 302,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getNeighborNodesIterator#305",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getNeighborNodesIterator(N)",
    "snippet": "@Override\n  public Iterator\u003cGraphNode\u003cN, E\u003e\u003e getNeighborNodesIterator(N value) {\n    LinkedDirectedGraphNode\u003cN, E\u003e node \u003d nodes.get(value);\n    Preconditions.checkNotNull(node);\n    return node.neighborIterator();\n  }",
    "begin_line": 305,
    "end_line": 309,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getEdges#312",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getEdges()",
    "snippet": "@Override\n  public List\u003cGraphEdge\u003cN, E\u003e\u003e getEdges() {\n    List\u003cGraphEdge\u003cN, E\u003e\u003e result \u003d Lists.newArrayList();\n    for (DiGraphNode\u003cN, E\u003e node : nodes.values()) {\n      for (DiGraphEdge\u003cN, E\u003e edge : node.getOutEdges()) {\n        result.add(edge);\n      }\n    }\n    return Collections.unmodifiableList(result);\n  }",
    "begin_line": 312,
    "end_line": 320,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraph.getNodeDegree#323",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getNodeDegree(N)",
    "snippet": "@Override\n  public int getNodeDegree(N value) {\n    DiGraphNode\u003cN, E\u003e node \u003d getNodeOrFail(value);\n    return node.getInEdges().size() + node.getOutEdges().size();\n  }",
    "begin_line": 323,
    "end_line": 326,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphNode.LinkedDirectedGraphNode#346",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode(N)",
    "snippet": " LinkedDirectedGraphNode(N nodeValue) {\n      this.value \u003d nodeValue;\n    }",
    "begin_line": 346,
    "end_line": 348,
    "comment": "/** \n * Constructor\n * @param nodeValue Node\u0027s value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphNode.getValue#351",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getValue()",
    "snippet": "@Override\n    public N getValue() {\n      return value;\n    }",
    "begin_line": 351,
    "end_line": 353,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphNode.getAnnotation#356",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getAnnotation()",
    "snippet": "@Override\n    public \u003cA extends Annotation\u003e A getAnnotation() {\n      throw new UnsupportedOperationException(\n          \"Graph initialized with node annotations turned off\");\n    }",
    "begin_line": 356,
    "end_line": 359,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphNode.setAnnotation#362",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.setAnnotation(com.google.javascript.jscomp.graph.Annotation)",
    "snippet": "@Override\n    public void setAnnotation(Annotation data) {\n      throw new UnsupportedOperationException(\n          \"Graph initialized with node annotations turned off\");\n    }",
    "begin_line": 362,
    "end_line": 365,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphNode.getColor#368",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getColor()",
    "snippet": "@Override\n    public String getColor() {\n      return \"white\";\n    }",
    "begin_line": 368,
    "end_line": 370,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphNode.getId#373",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getId()",
    "snippet": "@Override\n    public String getId() {\n      return \"LDN\" + hashCode();\n    }",
    "begin_line": 373,
    "end_line": 375,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphNode.getLabel#378",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getLabel()",
    "snippet": "@Override\n    public String getLabel() {\n      return value !\u003d null ? value.toString() : \"null\";\n    }",
    "begin_line": 378,
    "end_line": 380,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphNode.toString#383",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.toString()",
    "snippet": "@Override\n    public String toString() {\n      return getLabel();\n    }",
    "begin_line": 383,
    "end_line": 385,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphNode.getInEdges#388",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getInEdges()",
    "snippet": "@Override\n    public List\u003cDiGraphEdge\u003cN, E\u003e\u003e getInEdges() {\n      return inEdgeList;\n    }",
    "begin_line": 388,
    "end_line": 390,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphNode.getOutEdges#393",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getOutEdges()",
    "snippet": "@Override\n    public List\u003cDiGraphEdge\u003cN, E\u003e\u003e getOutEdges() {\n      return outEdgeList;\n    }",
    "begin_line": 393,
    "end_line": 395,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphNode.neighborIterator#397",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.neighborIterator()",
    "snippet": "private Iterator\u003cGraphNode\u003cN, E\u003e\u003e neighborIterator() {\n      return new NeighborIterator();\n    }",
    "begin_line": 397,
    "end_line": 399,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NeighborIterator.hasNext#407",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.hasNext()",
    "snippet": "@Override\n      public boolean hasNext() {\n        return in.hasNext() || out.hasNext();\n      }",
    "begin_line": 407,
    "end_line": 409,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NeighborIterator.next#412",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.next()",
    "snippet": "@Override\n      public GraphNode\u003cN, E\u003e next() {\n        boolean isOut \u003d !in.hasNext();\n        Iterator\u003cDiGraphEdge\u003cN, E\u003e\u003e curIterator \u003d  isOut ? out : in;\n        DiGraphEdge\u003cN, E\u003e s \u003d curIterator.next();\n        return isOut ? s.getDestination() : s.getSource();\n      }",
    "begin_line": 412,
    "end_line": 417,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NeighborIterator.remove#420",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.remove()",
    "snippet": "@Override\n      public void remove() {\n        throw new UnsupportedOperationException(\"Remove not supported.\");\n      }",
    "begin_line": 420,
    "end_line": 422,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedLinkedDirectedGraphNode.AnnotatedLinkedDirectedGraphNode#437",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.AnnotatedLinkedDirectedGraphNode(N)",
    "snippet": " AnnotatedLinkedDirectedGraphNode(N nodeValue) {\n      super(nodeValue);\n    }",
    "begin_line": 437,
    "end_line": 439,
    "comment": "/** \n * @param nodeValue Node\u0027s value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedLinkedDirectedGraphNode.getAnnotation#443",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getAnnotation()",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public \u003cA extends Annotation\u003e A getAnnotation() {\n      return (A) annotation;\n    }",
    "begin_line": 443,
    "end_line": 445,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedLinkedDirectedGraphNode.setAnnotation#448",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.setAnnotation(com.google.javascript.jscomp.graph.Annotation)",
    "snippet": "@Override\n    public void setAnnotation(Annotation data) {\n      annotation \u003d data;\n    }",
    "begin_line": 448,
    "end_line": 450,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphEdge.LinkedDirectedGraphEdge#471",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphEdge(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003cN,E\u003e, E, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003cN,E\u003e)",
    "snippet": " LinkedDirectedGraphEdge(DiGraphNode\u003cN, E\u003e sourceNode,\n        E edgeValue, DiGraphNode\u003cN, E\u003e destNode) {\n      this.value \u003d edgeValue;\n      this.sourceNode \u003d sourceNode;\n      this.destNode \u003d destNode;\n    }",
    "begin_line": 471,
    "end_line": 476,
    "comment": "/** \n * Constructor.\n * @param edgeValue Edge Value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphEdge.getSource#479",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getSource()",
    "snippet": "@Override\n    public DiGraphNode\u003cN, E\u003e getSource() {\n      return sourceNode;\n    }",
    "begin_line": 479,
    "end_line": 481,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphEdge.getDestination#484",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDestination()",
    "snippet": "@Override\n    public DiGraphNode\u003cN, E\u003e getDestination() {\n      return destNode;\n    }",
    "begin_line": 484,
    "end_line": 486,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphEdge.setDestination#489",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.setDestination(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003cN,E\u003e)",
    "snippet": "@Override\n    public void setDestination(DiGraphNode\u003cN, E\u003e node) {\n      destNode \u003d node;\n    }",
    "begin_line": 489,
    "end_line": 491,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphEdge.setSource#494",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.setSource(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003cN,E\u003e)",
    "snippet": "@Override\n    public void setSource(DiGraphNode\u003cN, E\u003e node) {\n      sourceNode \u003d node;\n    }",
    "begin_line": 494,
    "end_line": 496,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphEdge.getValue#499",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getValue()",
    "snippet": "@Override\n    public E getValue() {\n      return value;\n    }",
    "begin_line": 499,
    "end_line": 501,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphEdge.getAnnotation#504",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getAnnotation()",
    "snippet": "@Override\n    public \u003cA extends Annotation\u003e A getAnnotation() {\n      throw new UnsupportedOperationException(\n          \"Graph initialized with edge annotations turned off\");\n    }",
    "begin_line": 504,
    "end_line": 507,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphEdge.setAnnotation#510",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.setAnnotation(com.google.javascript.jscomp.graph.Annotation)",
    "snippet": "@Override\n    public void setAnnotation(Annotation data) {\n      throw new UnsupportedOperationException(\n          \"Graph initialized with edge annotations turned off\");\n    }",
    "begin_line": 510,
    "end_line": 513,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphEdge.getColor#516",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getColor()",
    "snippet": "@Override\n    public String getColor() {\n      return \"black\";\n    }",
    "begin_line": 516,
    "end_line": 518,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphEdge.getLabel#521",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getLabel()",
    "snippet": "@Override\n    public String getLabel() {\n      return value !\u003d null ? value.toString() : \"null\";\n    }",
    "begin_line": 521,
    "end_line": 523,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphEdge.getNode1Id#526",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getNode1Id()",
    "snippet": "@Override\n    public String getNode1Id() {\n      return ((LinkedDirectedGraphNode\u003cN, E\u003e) sourceNode).getId();\n    }",
    "begin_line": 526,
    "end_line": 528,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphEdge.getNode2Id#531",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getNode2Id()",
    "snippet": "@Override\n    public String getNode2Id() {\n      return ((LinkedDirectedGraphNode\u003cN, E\u003e) destNode).getId();\n    }",
    "begin_line": 531,
    "end_line": 533,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphEdge.toString#536",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.toString()",
    "snippet": "@Override\n    public String toString() {\n      return sourceNode.toString() + \" -\u003e \" + destNode.toString();\n    }",
    "begin_line": 536,
    "end_line": 538,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphEdge.getNodeA#541",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getNodeA()",
    "snippet": "@Override\n    public GraphNode\u003cN, E\u003e getNodeA() {\n      return sourceNode;\n    }",
    "begin_line": 541,
    "end_line": 543,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedDirectedGraphEdge.getNodeB#546",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getNodeB()",
    "snippet": "@Override\n    public GraphNode\u003cN, E\u003e getNodeB() {\n      return destNode;\n    }",
    "begin_line": 546,
    "end_line": 548,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedLinkedDirectedGraphEdge.AnnotatedLinkedDirectedGraphEdge#565",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.AnnotatedLinkedDirectedGraphEdge(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003cN,E\u003e, E, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode\u003cN,E\u003e)",
    "snippet": " AnnotatedLinkedDirectedGraphEdge(DiGraphNode\u003cN, E\u003e sourceNode,\n        E edgeValue, DiGraphNode\u003cN, E\u003e destNode) {\n      super(sourceNode, edgeValue, destNode);\n    }",
    "begin_line": 565,
    "end_line": 568,
    "comment": "/** \n * Constructor.\n * @param edgeValue Edge Value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedLinkedDirectedGraphEdge.getAnnotation#572",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getAnnotation()",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public \u003cA extends Annotation\u003e A getAnnotation() {\n      return (A) annotation;\n    }",
    "begin_line": 572,
    "end_line": 574,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedLinkedDirectedGraphEdge.setAnnotation#577",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
    "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
    "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.setAnnotation(com.google.javascript.jscomp.graph.Annotation)",
    "snippet": "@Override\n    public void setAnnotation(Annotation data) {\n      annotation \u003d data;\n    }",
    "begin_line": 577,
    "end_line": 579,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Config.Config#73",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/Config.java",
    "class_name": "com.google.javascript.jscomp.parsing.Config",
    "signature": "com.google.javascript.jscomp.parsing.Config.Config(java.util.Set\u003cjava.lang.String\u003e, java.util.Set\u003cjava.lang.String\u003e, boolean, com.google.javascript.jscomp.parsing.Config.LanguageMode, boolean)",
    "snippet": " Config(Set\u003cString\u003e annotationWhitelist, Set\u003cString\u003e suppressionNames,\n      boolean isIdeMode, LanguageMode languageMode,\n      boolean acceptConstKeyword) {\n    this.annotationNames \u003d buildAnnotationNames(annotationWhitelist);\n    this.parseJsDocDocumentation \u003d isIdeMode;\n    this.suppressionNames \u003d suppressionNames;\n    this.isIdeMode \u003d isIdeMode;\n    this.languageMode \u003d languageMode;\n    this.acceptConstKeyword \u003d acceptConstKeyword;\n  }",
    "begin_line": 73,
    "end_line": 82,
    "comment": "/** \n * Annotation names.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Config.buildAnnotationNames#88",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/Config.java",
    "class_name": "com.google.javascript.jscomp.parsing.Config",
    "signature": "com.google.javascript.jscomp.parsing.Config.buildAnnotationNames(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "private static Map\u003cString, Annotation\u003e buildAnnotationNames(\n      Set\u003cString\u003e annotationWhitelist) {\n    ImmutableMap.Builder\u003cString, Annotation\u003e annotationBuilder \u003d\n        ImmutableMap.builder();\n    annotationBuilder.putAll(Annotation.recognizedAnnotations);\n    for (String unrecognizedAnnotation : annotationWhitelist) {\n      if (!Annotation.recognizedAnnotations.containsKey(\n              unrecognizedAnnotation)) {\n        annotationBuilder.put(\n            unrecognizedAnnotation, Annotation.NOT_IMPLEMENTED);\n      }\n    }\n    return annotationBuilder.build();\n  }",
    "begin_line": 88,
    "end_line": 101,
    "comment": "/** \n * Create the annotation names from the user-specified annotation whitelist.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.IRFactory#137",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.IRFactory(java.lang.String, com.google.javascript.rhino.jstype.StaticSourceFile, com.google.javascript.jscomp.parsing.Config, ErrorReporter)",
    "snippet": "private IRFactory(String sourceString,\n                    StaticSourceFile sourceFile,\n                    Config config,\n                    ErrorReporter errorReporter) {\n    this.sourceString \u003d sourceString;\n    this.sourceFile \u003d sourceFile;\n\n    // Sometimes this will be null in tests.\n    this.sourceName \u003d sourceFile \u003d\u003d null ? null : sourceFile.getName();\n\n    this.config \u003d config;\n    this.errorReporter \u003d errorReporter;\n    this.transformDispatcher \u003d new TransformDispatcher();\n    // The template node properties are applied to all nodes in this transform.\n    this.templateNode \u003d createTemplateNode();\n\n    switch (config.languageMode) {\n      case ECMASCRIPT3:\n        // Reserved words are handled by the Rhino parser.\n        reservedKeywords \u003d null;\n        break;\n      case ECMASCRIPT5:\n        reservedKeywords \u003d ES5_RESERVED_KEYWORDS;\n        break;\n      case ECMASCRIPT5_STRICT:\n        reservedKeywords \u003d ES5_STRICT_RESERVED_KEYWORDS;\n        break;\n      default:\n        throw new IllegalStateException(\"unknown language mode\");\n    }\n  }",
    "begin_line": 137,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.createTemplateNode#172",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.createTemplateNode()",
    "snippet": "private Node createTemplateNode() {\n    // The Node type choice is arbitrary.\n    Node templateNode \u003d new Node(Token.SCRIPT);\n    templateNode.setStaticSourceFile(sourceFile);\n    return templateNode;\n  }",
    "begin_line": 172,
    "end_line": 177,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.transformTree#179",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformTree(AstRoot, com.google.javascript.rhino.jstype.StaticSourceFile, java.lang.String, com.google.javascript.jscomp.parsing.Config, ErrorReporter)",
    "snippet": "public static Node transformTree(AstRoot node,\n                                   StaticSourceFile sourceFile,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter) {\n    IRFactory irFactory \u003d new IRFactory(sourceString, sourceFile,\n        config, errorReporter);\n    Node irNode \u003d irFactory.transform(node);\n\n    if (node.getComments() !\u003d null) {\n      for (Comment comment : node.getComments()) {\n        if (comment.getCommentType() \u003d\u003d CommentType.JSDOC \u0026\u0026\n            !irFactory.parsedComments.contains(comment)) {\n          irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);\n        } else if (comment.getCommentType() \u003d\u003d CommentType.BLOCK_COMMENT) {\n          irFactory.handleBlockComment(comment);\n        }\n      }\n    }\n\n    irFactory.setFileOverviewJsDoc(irNode);\n\n    return irNode;\n  }",
    "begin_line": 179,
    "end_line": 202,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.setFileOverviewJsDoc#204",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.setFileOverviewJsDoc(com.google.javascript.rhino.Node)",
    "snippet": "private void setFileOverviewJsDoc(Node irNode) {\n    // Only after we\u0027ve seen all @fileoverview entries, attach the\n    // last one to the root node, and copy the found license strings\n    // to that node.\n    JSDocInfo rootNodeJsDoc \u003d rootNodeJsDocHolder.getJSDocInfo();\n    if (rootNodeJsDoc !\u003d null) {\n      irNode.setJSDocInfo(rootNodeJsDoc);\n      rootNodeJsDoc.setAssociatedNode(irNode);\n    }\n\n    if (fileOverviewInfo !\u003d null) {\n      if ((irNode.getJSDocInfo() !\u003d null) \u0026\u0026\n          (irNode.getJSDocInfo().getLicense() !\u003d null)) {\n        fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());\n      }\n      irNode.setJSDocInfo(fileOverviewInfo);\n      fileOverviewInfo.setAssociatedNode(irNode);\n    }\n  }",
    "begin_line": 204,
    "end_line": 222,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.transformBlock#224",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformBlock(AstNode)",
    "snippet": "private Node transformBlock(AstNode node) {\n    Node irNode \u003d transform(node);\n    if (!irNode.isBlock()) {\n      if (irNode.isEmpty()) {\n        irNode.setType(Token.BLOCK);\n        irNode.setWasEmptyNode(true);\n      } else {\n        Node newBlock \u003d newNode(Token.BLOCK, irNode);\n        newBlock.setLineno(irNode.getLineno());\n        newBlock.setCharno(irNode.getCharno());\n        maybeSetLengthFrom(newBlock, node);\n        irNode \u003d newBlock;\n      }\n    }\n    return irNode;\n  }",
    "begin_line": 224,
    "end_line": 239,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.handleBlockComment#244",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.handleBlockComment(Comment)",
    "snippet": "private void handleBlockComment(Comment comment) {\n    String value \u003d comment.getValue();\n    if (value.indexOf(\"/* @\") !\u003d -1 ||\n        value.indexOf(\"\\n * @\") !\u003d -1) {\n      errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,\n          comment.getLineno(), \"\", 0);\n    }\n  }",
    "begin_line": 244,
    "end_line": 253,
    "comment": "/** \n * Check to see if the given block comment looks like it should be JSDoc.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.handlePossibleFileOverviewJsDoc#258",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.parsing.JsDocInfoParser)",
    "snippet": "private boolean handlePossibleFileOverviewJsDoc(\n      JsDocInfoParser jsDocParser) {\n    if (jsDocParser.getFileOverviewJSDocInfo() !\u003d fileOverviewInfo) {\n      fileOverviewInfo \u003d jsDocParser.getFileOverviewJSDocInfo();\n      return true;\n    }\n    return false;\n  }",
    "begin_line": 258,
    "end_line": 265,
    "comment": "/** \n * @return true if the jsDocParser represents a fileoverview.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.handlePossibleFileOverviewJsDoc#267",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.handlePossibleFileOverviewJsDoc(Comment, com.google.javascript.rhino.Node)",
    "snippet": "private void handlePossibleFileOverviewJsDoc(Comment comment, Node irNode) {\n    JsDocInfoParser jsDocParser \u003d createJsDocInfoParser(comment, irNode);\n    parsedComments.add(comment);\n    handlePossibleFileOverviewJsDoc(jsDocParser);\n  }",
    "begin_line": 267,
    "end_line": 271,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.handleJsDoc#273",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.handleJsDoc(AstNode, com.google.javascript.rhino.Node)",
    "snippet": "private JSDocInfo handleJsDoc(AstNode node, Node irNode) {\n    Comment comment \u003d node.getJsDocNode();\n    if (comment !\u003d null) {\n      JsDocInfoParser jsDocParser \u003d createJsDocInfoParser(comment, irNode);\n      parsedComments.add(comment);\n      if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {\n        JSDocInfo info \u003d jsDocParser.retrieveAndResetParsedJSDocInfo();\n        if (info !\u003d null) {\n          validateTypeAnnotations(info, node, irNode);\n        }\n        return info;\n      }\n    }\n    return null;\n  }",
    "begin_line": 273,
    "end_line": 287,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.validateTypeAnnotations#289",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.validateTypeAnnotations(com.google.javascript.rhino.JSDocInfo, AstNode, com.google.javascript.rhino.Node)",
    "snippet": "private void validateTypeAnnotations(\n      JSDocInfo info, AstNode node, Node irNode) {\n    if (info.hasType()) {\n      boolean valid \u003d false;\n      switch (node.getType()) {\n        // Casts are valid\n        case com.google.javascript.rhino.head.Token.LP:\n          valid \u003d node instanceof ParenthesizedExpression;\n          break;\n        // Variable declarations are valid\n        case com.google.javascript.rhino.head.Token.VAR:\n          valid \u003d true;\n          break;\n        // Function declarations are valid\n        case com.google.javascript.rhino.head.Token.FUNCTION:\n          FunctionNode fnNode \u003d (FunctionNode)node;\n          valid \u003d fnNode.getFunctionType() \u003d\u003d FunctionNode.FUNCTION_STATEMENT;\n          break;\n        // Object literal properties and catch declarations are valid.\n        case com.google.javascript.rhino.head.Token.NAME:\n          valid \u003d node.getParent() instanceof ObjectProperty\n              || node.getParent() instanceof CatchClause\n              || node.getParent() instanceof FunctionNode;\n          break;\n        // Object literal properties are valid\n        case com.google.javascript.rhino.head.Token.GET:\n        case com.google.javascript.rhino.head.Token.SET:\n        case com.google.javascript.rhino.head.Token.NUMBER:\n        case com.google.javascript.rhino.head.Token.STRING:\n          valid \u003d node.getParent() instanceof ObjectProperty;\n          break;\n\n        // Property assignments are valid, if at the root of an expression.\n        case com.google.javascript.rhino.head.Token.ASSIGN:\n          if (node instanceof Assignment) {\n            valid \u003d isExprStmt(node.getParent())\n                \u0026\u0026 isPropAccess(((Assignment)node).getLeft());\n          }\n          break;\n\n        // Property definitions are valid, if at the root of an expression.\n        case com.google.javascript.rhino.head.Token.GETPROP:\n        case com.google.javascript.rhino.head.Token.GETELEM:\n          valid \u003d isExprStmt(node.getParent());\n          break;\n      }\n      if (!valid) {\n        errorReporter.warning(MISPLACED_TYPE_ANNOTATION,\n            sourceName,\n            node.getLineno(), \"\", 0);\n      }\n    }\n  }",
    "begin_line": 289,
    "end_line": 341,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.isPropAccess#343",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.isPropAccess(AstNode)",
    "snippet": "private boolean isPropAccess(AstNode node) {\n    return node.getType() \u003d\u003d com.google.javascript.rhino.head.Token.GETPROP\n        || node.getType() \u003d\u003d com.google.javascript.rhino.head.Token.GETELEM;\n  }",
    "begin_line": 343,
    "end_line": 346,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.isExprStmt#348",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.isExprStmt(AstNode)",
    "snippet": "private boolean isExprStmt(AstNode node) {\n    return node.getType() \u003d\u003d com.google.javascript.rhino.head.Token.EXPR_RESULT\n        || node.getType() \u003d\u003d com.google.javascript.rhino.head.Token.EXPR_VOID;\n  }",
    "begin_line": 348,
    "end_line": 351,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.transform#353",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.transform(AstNode)",
    "snippet": "private Node transform(AstNode node) {\n    Node irNode \u003d justTransform(node);\n    JSDocInfo jsDocInfo \u003d handleJsDoc(node, irNode);\n    if (jsDocInfo !\u003d null) {\n      irNode \u003d maybeInjectCastNode(node, jsDocInfo, irNode);\n      irNode.setJSDocInfo(jsDocInfo);\n    }\n    setSourceInfo(irNode, node);\n    return irNode;\n  }",
    "begin_line": 353,
    "end_line": 362,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.maybeInjectCastNode#364",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.maybeInjectCastNode(AstNode, com.google.javascript.rhino.JSDocInfo, com.google.javascript.rhino.Node)",
    "snippet": "private Node maybeInjectCastNode(AstNode node, JSDocInfo info, Node irNode) {\n    if (node.getType() \u003d\u003d com.google.javascript.rhino.head.Token.LP\n        \u0026\u0026 node instanceof ParenthesizedExpression\n        \u0026\u0026 info.hasType()\n        // TODO(johnlenz): for now, attach object literal type directly.\n        \u0026\u0026 !irNode.isObjectLit()) {\n      irNode \u003d newNode(Token.CAST, irNode);\n    }\n    return irNode;\n  }",
    "begin_line": 364,
    "end_line": 373,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.transformNameAsString#375",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformNameAsString(Name)",
    "snippet": "private Node transformNameAsString(Name node) {\n    Node irNode \u003d transformDispatcher.processName(node, true);\n    JSDocInfo jsDocInfo \u003d handleJsDoc(node, irNode);\n    if (jsDocInfo !\u003d null) {\n      irNode.setJSDocInfo(jsDocInfo);\n    }\n    setSourceInfo(irNode, node);\n    return irNode;\n  }",
    "begin_line": 375,
    "end_line": 383,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.transformNumberAsString#385",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformNumberAsString(NumberLiteral)",
    "snippet": "private Node transformNumberAsString(NumberLiteral literalNode) {\n    Node irNode \u003d newStringNode(getStringValue(literalNode.getNumber()));\n    JSDocInfo jsDocInfo \u003d handleJsDoc(literalNode, irNode);\n    if (jsDocInfo !\u003d null) {\n      irNode.setJSDocInfo(jsDocInfo);\n    }\n    setSourceInfo(irNode, literalNode);\n    return irNode;\n  }",
    "begin_line": 385,
    "end_line": 393,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.getStringValue#395",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.getStringValue(double)",
    "snippet": "private static String getStringValue(double value) {\n    long longValue \u003d (long) value;\n\n    // Return \"1\" instead of \"1.0\"\n    if (longValue \u003d\u003d value) {\n      return Long.toString(longValue);\n    } else {\n      return Double.toString(value);\n    }\n  }",
    "begin_line": 395,
    "end_line": 404,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.setSourceInfo#406",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.setSourceInfo(com.google.javascript.rhino.Node, AstNode)",
    "snippet": "private void setSourceInfo(Node irNode, AstNode node) {\n    if (irNode.getLineno() \u003d\u003d -1) {\n      // If we didn\u0027t already set the line, then set it now. This avoids\n      // cases like ParenthesizedExpression where we just return a previous\n      // node, but don\u0027t want the new node to get its parent\u0027s line number.\n      int lineno \u003d node.getLineno();\n      irNode.setLineno(lineno);\n      int charno \u003d position2charno(node.getAbsolutePosition());\n      irNode.setCharno(charno);\n      maybeSetLengthFrom(irNode, node);\n    }\n  }",
    "begin_line": 406,
    "end_line": 417,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.createJsDocInfoParser#430",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.createJsDocInfoParser(Comment, com.google.javascript.rhino.Node)",
    "snippet": "private JsDocInfoParser createJsDocInfoParser(Comment node, Node irNode) {\n    String comment \u003d node.getValue();\n    int lineno \u003d node.getLineno();\n    int position \u003d node.getAbsolutePosition();\n\n    // The JsDocInfoParser expects the comment without the initial \u0027/**\u0027.\n    int numOpeningChars \u003d 3;\n    JsDocInfoParser jsdocParser \u003d\n      new JsDocInfoParser(\n          new JsDocTokenStream(comment.substring(numOpeningChars),\n                               lineno,\n                               position2charno(position) + numOpeningChars),\n          node,\n          irNode,\n          config,\n          errorReporter);\n    jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n    jsdocParser.parse();\n    return jsdocParser;\n  }",
    "begin_line": 430,
    "end_line": 450,
    "comment": "/** \n * Creates a JsDocInfoParser and parses the JsDoc string. Used both for handling individual JSDoc comments and for handling file-level JSDoc comments (@fileoverview and @license).\n * @param node The JsDoc Comment node to parse.\n * @param irNode\n * @return A JsDocInfoParser. Will contain either fileoverview JsDoc, ornormal JsDoc, or no JsDoc (if the method parses to the wrong level).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.maybeSetLengthFrom#453",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.maybeSetLengthFrom(com.google.javascript.rhino.Node, AstNode)",
    "snippet": "private void maybeSetLengthFrom(Node node, AstNode source) {\n    if (config.isIdeMode) {\n      node.setLength(source.getLength());\n    }\n  }",
    "begin_line": 453,
    "end_line": 457,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.position2charno#459",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.position2charno(int)",
    "snippet": "private int position2charno(int position) {\n    int lineIndex \u003d sourceString.lastIndexOf(\u0027\\n\u0027, position);\n    if (lineIndex \u003d\u003d -1) {\n      return position;\n    } else {\n      // Subtract one for initial position being 0.\n      return position - lineIndex - 1;\n    }\n  }",
    "begin_line": 459,
    "end_line": 467,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IRFactory.justTransform#469",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.justTransform(AstNode)",
    "snippet": "private Node justTransform(AstNode node) {\n    return transformDispatcher.process(node);\n  }",
    "begin_line": 469,
    "end_line": 471,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processGeneric#474",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processGeneric(com.google.javascript.rhino.head.Node)",
    "snippet": "private Node processGeneric(\n        com.google.javascript.rhino.head.Node n) {\n      Node node \u003d newNode(transformTokenType(n.getType()));\n      for (com.google.javascript.rhino.head.Node child : n) {\n        node.addChildToBack(transform((AstNode)child));\n      }\n      return node;\n    }",
    "begin_line": 474,
    "end_line": 481,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.transformAsString#492",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformAsString(AstNode)",
    "snippet": "private Node transformAsString(AstNode n) {\n      Node ret;\n      if (n instanceof Name) {\n        ret \u003d transformNameAsString((Name)n);\n      } else if (n instanceof NumberLiteral) {\n        ret \u003d transformNumberAsString((NumberLiteral)n);\n        ret.putBooleanProp(Node.QUOTED_PROP, true);\n      } else {\n        ret \u003d transform(n);\n        ret.putBooleanProp(Node.QUOTED_PROP, true);\n      }\n      Preconditions.checkState(ret.isString());\n      return ret;\n    }",
    "begin_line": 492,
    "end_line": 505,
    "comment": "/** \n * Transforms the given node and then sets its type to Token.STRING if it was Token.NAME. If its type was already Token.STRING, then quotes it. Used for properties, as the old AST uses String tokens, while the new one uses Name tokens for unquoted strings. For example, in var o \u003d {\u0027a\u0027 : 1, b: 2}; the string \u0027a\u0027 is quoted, while the name b is turned into a string, but unquoted.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processArrayLiteral#508",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processArrayLiteral(ArrayLiteral)",
    "snippet": "@Override\n    Node processArrayLiteral(ArrayLiteral literalNode) {\n      if (literalNode.isDestructuring()) {\n        reportDestructuringAssign(literalNode);\n      }\n\n      Node node \u003d newNode(Token.ARRAYLIT);\n      for (AstNode child : literalNode.getElements()) {\n        Node c \u003d transform(child);\n        node.addChildToBack(c);\n      }\n      return node;\n    }",
    "begin_line": 508,
    "end_line": 519,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processAssignment#522",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processAssignment(Assignment)",
    "snippet": "@Override\n    Node processAssignment(Assignment assignmentNode) {\n      Node assign \u003d processInfixExpression(assignmentNode);\n      Node target \u003d assign.getFirstChild();\n      if (!validAssignmentTarget(target)) {\n        errorReporter.error(\n          \"invalid assignment target\",\n          sourceName,\n          target.getLineno(), \"\", 0);\n      }\n      return assign;\n    }",
    "begin_line": 522,
    "end_line": 532,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processAstRoot#535",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processAstRoot(AstRoot)",
    "snippet": "@Override\n    Node processAstRoot(AstRoot rootNode) {\n      Node node \u003d newNode(Token.SCRIPT);\n      for (com.google.javascript.rhino.head.Node child : rootNode) {\n        node.addChildToBack(transform((AstNode)child));\n      }\n      parseDirectives(node);\n      return node;\n    }",
    "begin_line": 535,
    "end_line": 542,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.parseDirectives#553",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.parseDirectives(com.google.javascript.rhino.Node)",
    "snippet": "private void parseDirectives(Node node) {\n      // Remove all the directives, and encode them in the AST.\n      Set\u003cString\u003e directives \u003d null;\n      while (isDirective(node.getFirstChild())) {\n        String directive \u003d node.removeFirstChild().getFirstChild().getString();\n        if (directives \u003d\u003d null) {\n          directives \u003d Sets.newHashSet(directive);\n        } else {\n          directives.add(directive);\n        }\n      }\n\n      if (directives !\u003d null) {\n        node.setDirectives(directives);\n      }\n    }",
    "begin_line": 553,
    "end_line": 568,
    "comment": "/** \n * Parse the directives, encode them in the AST, and remove their nodes. For information on ES5 directives, see section 14.1 of ECMA-262, Edition 5. It would be nice if Rhino would eventually take care of this for us, but right now their directive-processing is a one-off.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.isDirective#570",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.isDirective(com.google.javascript.rhino.Node)",
    "snippet": "private boolean isDirective(Node n) {\n      if (n \u003d\u003d null) return false;\n\n      int nType \u003d n.getType();\n      return nType \u003d\u003d Token.EXPR_RESULT \u0026\u0026\n          n.getFirstChild().isString() \u0026\u0026\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }",
    "begin_line": 570,
    "end_line": 577,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processBlock#580",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processBlock(Block)",
    "snippet": "@Override\n    Node processBlock(Block blockNode) {\n      return processGeneric(blockNode);\n    }",
    "begin_line": 580,
    "end_line": 582,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processBreakStatement#585",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processBreakStatement(BreakStatement)",
    "snippet": "@Override\n    Node processBreakStatement(BreakStatement statementNode) {\n      Node node \u003d newNode(Token.BREAK);\n      if (statementNode.getBreakLabel() !\u003d null) {\n        Node labelName \u003d transform(statementNode.getBreakLabel());\n        // Change the NAME to LABEL_NAME\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }",
    "begin_line": 585,
    "end_line": 594,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processCatchClause#597",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processCatchClause(CatchClause)",
    "snippet": "@Override\n    Node processCatchClause(CatchClause clauseNode) {\n      AstNode catchVar \u003d clauseNode.getVarName();\n      Node node \u003d newNode(Token.CATCH, transform(catchVar));\n      if (clauseNode.getCatchCondition() !\u003d null) {\n        errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n      }\n      node.addChildToBack(transformBlock(clauseNode.getBody()));\n      return node;\n    }",
    "begin_line": 597,
    "end_line": 608,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processConditionalExpression#611",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processConditionalExpression(ConditionalExpression)",
    "snippet": "@Override\n    Node processConditionalExpression(ConditionalExpression exprNode) {\n      return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));\n    }",
    "begin_line": 611,
    "end_line": 617,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processContinueStatement#620",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processContinueStatement(ContinueStatement)",
    "snippet": "@Override\n    Node processContinueStatement(ContinueStatement statementNode) {\n      Node node \u003d newNode(Token.CONTINUE);\n      if (statementNode.getLabel() !\u003d null) {\n        Node labelName \u003d transform(statementNode.getLabel());\n        // Change the NAME to LABEL_NAME\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }",
    "begin_line": 620,
    "end_line": 629,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processDoLoop#632",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processDoLoop(DoLoop)",
    "snippet": "@Override\n    Node processDoLoop(DoLoop loopNode) {\n      return newNode(\n          Token.DO,\n          transformBlock(loopNode.getBody()),\n          transform(loopNode.getCondition()));\n    }",
    "begin_line": 632,
    "end_line": 637,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processElementGet#640",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processElementGet(ElementGet)",
    "snippet": "@Override\n    Node processElementGet(ElementGet getNode) {\n      return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));\n    }",
    "begin_line": 640,
    "end_line": 645,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processEmptyExpression#648",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processEmptyExpression(EmptyExpression)",
    "snippet": "@Override\n    Node processEmptyExpression(EmptyExpression exprNode) {\n      Node node \u003d newNode(Token.EMPTY);\n      return node;\n    }",
    "begin_line": 648,
    "end_line": 651,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processEmptyStatement#654",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processEmptyStatement(EmptyStatement)",
    "snippet": "@Override\n    Node processEmptyStatement(EmptyStatement exprNode) {\n      Node node \u003d newNode(Token.EMPTY);\n      return node;\n    }",
    "begin_line": 654,
    "end_line": 657,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processExpressionStatement#660",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processExpressionStatement(ExpressionStatement)",
    "snippet": "@Override\n    Node processExpressionStatement(ExpressionStatement statementNode) {\n      Node node \u003d newNode(transformTokenType(statementNode.getType()));\n      node.addChildToBack(transform(statementNode.getExpression()));\n      return node;\n    }",
    "begin_line": 660,
    "end_line": 664,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processForInLoop#667",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processForInLoop(ForInLoop)",
    "snippet": "@Override\n    Node processForInLoop(ForInLoop loopNode) {\n      if (loopNode.isForEach()) {\n        errorReporter.error(\n            \"unsupported language extension: for each\",\n            sourceName,\n            loopNode.getLineno(), \"\", 0);\n\n        // Return the bare minimum to put the AST in a valid state.\n        return newNode(Token.EXPR_RESULT, Node.newNumber(0));\n      }\n      return newNode(\n          Token.FOR,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));\n    }",
    "begin_line": 667,
    "end_line": 682,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processForLoop#685",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processForLoop(ForLoop)",
    "snippet": "@Override\n    Node processForLoop(ForLoop loopNode) {\n      Node node \u003d newNode(\n          Token.FOR,\n          transform(loopNode.getInitializer()),\n          transform(loopNode.getCondition()),\n          transform(loopNode.getIncrement()));\n      node.addChildToBack(transformBlock(loopNode.getBody()));\n      return node;\n    }",
    "begin_line": 685,
    "end_line": 693,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processFunctionCall#696",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processFunctionCall(FunctionCall)",
    "snippet": "@Override\n    Node processFunctionCall(FunctionCall callNode) {\n      Node node \u003d newNode(transformTokenType(callNode.getType()),\n                           transform(callNode.getTarget()));\n      for (AstNode child : callNode.getArguments()) {\n        node.addChildToBack(transform(child));\n      }\n\n      node.setLineno(node.getFirstChild().getLineno());\n      node.setCharno(node.getFirstChild().getCharno());\n      maybeSetLengthFrom(node, callNode);\n      return node;\n    }",
    "begin_line": 696,
    "end_line": 707,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processFunctionNode#710",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processFunctionNode(FunctionNode)",
    "snippet": "@Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name \u003d functionNode.getFunctionName();\n      Boolean isUnnamedFunction \u003d false;\n      if (name \u003d\u003d null) {\n        int functionType \u003d functionNode.getFunctionType();\n        if (functionType !\u003d FunctionNode.FUNCTION_EXPRESSION) {\n          errorReporter.error(\n            \"unnamed function statement\",\n            sourceName,\n            functionNode.getLineno(), \"\", 0);\n\n          // Return the bare minimum to put the AST in a valid state.\n          return newNode(Token.EXPR_RESULT, Node.newNumber(0));\n        }\n        name \u003d new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction \u003d true;\n      }\n      Node node \u003d newNode(Token.FUNCTION);\n      Node newName \u003d transform(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // TODO(bowdidge) Mark line number of paren correctly.\n        // Same problem as below - the left paren might not be on the\n        // same line as the function keyword.\n        int lpColumn \u003d functionNode.getAbsolutePosition() +\n            functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n        maybeSetLengthFrom(newName, name);\n      }\n\n      node.addChildToBack(newName);\n      Node lp \u003d newNode(Token.PARAM_LIST);\n      // The left paren\u0027s complicated because it\u0027s not represented by an\n      // AstNode, so there\u0027s nothing that has the actual line number that it\n      // appeared on.  We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.)  If there\u0027s no\n      // function name, assume the paren was on the same line as the function.\n      // TODO(bowdidge): Mark line number of paren correctly.\n      Name fnName \u003d functionNode.getFunctionName();\n      if (fnName !\u003d null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno \u003d functionNode.getLp() +\n          functionNode.getAbsolutePosition();\n\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        Node paramNode \u003d transform(param);\n        // When in ideMode Rhino can generate a param list with only a single\n        // ErrorNode. This is transformed into an EMPTY node. Drop this node in\n        // ideMode to keep the AST in a valid state.\n        if (paramNode.isName()) {\n          lp.addChildToBack(paramNode);\n        } else {\n          // We expect this in ideMode or when there is an error handling\n          // destructuring parameter assignments which aren\u0027t supported\n          // (an error has already been reported).\n          Preconditions.checkState(\n              config.isIdeMode\n              || paramNode.isObjectLit()\n              || paramNode.isArrayLit());\n        }\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode \u003d transform(functionNode.getBody());\n      if (!bodyNode.isBlock()) {\n        // When in ideMode Rhino tries to parse some constructs the compiler\n        // doesn\u0027t support, repair it here. see Rhino\u0027s\n        // Parser#parseFunctionBodyExpr.\n        Preconditions.checkState(config.isIdeMode);\n        bodyNode \u003d IR.block();\n      }\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;\n    }",
    "begin_line": 710,
    "end_line": 791,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processIfStatement#794",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processIfStatement(IfStatement)",
    "snippet": "@Override\n    Node processIfStatement(IfStatement statementNode) {\n      Node node \u003d newNode(Token.IF);\n      node.addChildToBack(transform(statementNode.getCondition()));\n      node.addChildToBack(transformBlock(statementNode.getThenPart()));\n      if (statementNode.getElsePart() !\u003d null) {\n        node.addChildToBack(transformBlock(statementNode.getElsePart()));\n      }\n      return node;\n    }",
    "begin_line": 794,
    "end_line": 802,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processInfixExpression#805",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processInfixExpression(InfixExpression)",
    "snippet": "@Override\n    Node processInfixExpression(InfixExpression exprNode) {\n      Node n \u003d  newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));\n      n.setLineno(exprNode.getLineno());\n      n.setCharno(position2charno(exprNode.getAbsolutePosition()));\n      maybeSetLengthFrom(n, exprNode);\n      return n;\n    }",
    "begin_line": 805,
    "end_line": 814,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processKeywordLiteral#817",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processKeywordLiteral(KeywordLiteral)",
    "snippet": "@Override\n    Node processKeywordLiteral(KeywordLiteral literalNode) {\n      return newNode(transformTokenType(literalNode.getType()));\n    }",
    "begin_line": 817,
    "end_line": 819,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processLabel#822",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processLabel(Label)",
    "snippet": "@Override\n    Node processLabel(Label labelNode) {\n      return newStringNode(Token.LABEL_NAME, labelNode.getName());\n    }",
    "begin_line": 822,
    "end_line": 824,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processLabeledStatement#827",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processLabeledStatement(LabeledStatement)",
    "snippet": "@Override\n    Node processLabeledStatement(LabeledStatement statementNode) {\n      Node node \u003d newNode(Token.LABEL);\n      Node prev \u003d null;\n      Node cur \u003d node;\n      for (Label label : statementNode.getLabels()) {\n        if (prev !\u003d null) {\n          prev.addChildToBack(cur);\n        }\n        cur.addChildToBack(transform(label));\n\n        cur.setLineno(label.getLineno());\n        maybeSetLengthFrom(cur, label);\n\n        int clauseAbsolutePosition \u003d\n            position2charno(label.getAbsolutePosition());\n        cur.setCharno(clauseAbsolutePosition);\n\n        prev \u003d cur;\n        cur \u003d newNode(Token.LABEL);\n      }\n      prev.addChildToBack(transform(statementNode.getStatement()));\n      return node;\n    }",
    "begin_line": 827,
    "end_line": 849,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processName#852",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processName(Name)",
    "snippet": "@Override\n    Node processName(Name nameNode) {\n      return processName(nameNode, false);\n    }",
    "begin_line": 852,
    "end_line": 854,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processName#856",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processName(Name, boolean)",
    "snippet": "Node processName(Name nameNode, boolean asString) {\n      if (asString) {\n        return newStringNode(Token.STRING, nameNode.getIdentifier());\n      } else {\n        if (isReservedKeyword(nameNode.getIdentifier())) {\n          errorReporter.error(\n            \"identifier is a reserved word\",\n            sourceName,\n            nameNode.getLineno(), \"\", 0);\n        }\n        return newStringNode(Token.NAME, nameNode.getIdentifier());\n      }\n    }",
    "begin_line": 856,
    "end_line": 868,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.isReservedKeyword#873",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.isReservedKeyword(java.lang.String)",
    "snippet": "private boolean isReservedKeyword(String identifier) {\n      return reservedKeywords !\u003d null \u0026\u0026 reservedKeywords.contains(identifier);\n    }",
    "begin_line": 873,
    "end_line": 875,
    "comment": "/** \n * @return Whether the\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processNewExpression#878",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processNewExpression(NewExpression)",
    "snippet": "@Override\n    Node processNewExpression(NewExpression exprNode) {\n      Node node \u003d newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getTarget()));\n      for (AstNode child : exprNode.getArguments()) {\n        node.addChildToBack(transform(child));\n      }\n      node.setLineno(exprNode.getLineno());\n      node.setCharno(position2charno(exprNode.getAbsolutePosition()));\n      maybeSetLengthFrom(node, exprNode);\n      return node;\n    }",
    "begin_line": 878,
    "end_line": 889,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processNumberLiteral#892",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processNumberLiteral(NumberLiteral)",
    "snippet": "@Override\n    Node processNumberLiteral(NumberLiteral literalNode) {\n      return newNumberNode(literalNode.getNumber());\n    }",
    "begin_line": 892,
    "end_line": 894,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processObjectLiteral#897",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processObjectLiteral(ObjectLiteral)",
    "snippet": "@Override\n    Node processObjectLiteral(ObjectLiteral literalNode) {\n      if (literalNode.isDestructuring()) {\n        reportDestructuringAssign(literalNode);\n      }\n\n      Node node \u003d newNode(Token.OBJECTLIT);\n      for (ObjectProperty el : literalNode.getElements()) {\n        if (config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3) {\n          if (el.isGetter()) {\n            reportGetter(el);\n            continue;\n          } else if (el.isSetter()) {\n            reportSetter(el);\n            continue;\n          }\n        }\n\n        Node key \u003d transformAsString(el.getLeft());\n        key.setType(Token.STRING_KEY);\n\n        Node value \u003d transform(el.getRight());\n        if (el.isGetter()) {\n          key.setType(Token.GETTER_DEF);\n          Preconditions.checkState(value.isFunction());\n          if (getFnParamNode(value).hasChildren()) {\n            reportGetterParam(el.getLeft());\n          }\n        } else if (el.isSetter()) {\n          key.setType(Token.SETTER_DEF);\n          Preconditions.checkState(value.isFunction());\n          if (!getFnParamNode(value).hasOneChild()) {\n            reportSetterParam(el.getLeft());\n          }\n        }\n        key.addChildToFront(value);\n        node.addChildToBack(key);\n      }\n      return node;\n    }",
    "begin_line": 897,
    "end_line": 935,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.getFnParamNode#941",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.getFnParamNode(com.google.javascript.rhino.Node)",
    "snippet": "Node getFnParamNode(Node fnNode) {\n     // Function NODE: [ FUNCTION -\u003e NAME, LP -\u003e ARG1, ARG2, ... ]\n     Preconditions.checkArgument(fnNode.isFunction());\n     return fnNode.getFirstChild().getNext();\n   }",
    "begin_line": 941,
    "end_line": 945,
    "comment": "/** \n * @param fnNode The function.\n * @return The Node containing the Function parameters.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processObjectProperty#948",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processObjectProperty(ObjectProperty)",
    "snippet": "@Override\n    Node processObjectProperty(ObjectProperty propertyNode) {\n      return processInfixExpression(propertyNode);\n    }",
    "begin_line": 948,
    "end_line": 950,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processParenthesizedExpression#953",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processParenthesizedExpression(ParenthesizedExpression)",
    "snippet": "@Override\n    Node processParenthesizedExpression(ParenthesizedExpression exprNode) {\n      Node node \u003d transform(exprNode.getExpression());\n      return node;\n    }",
    "begin_line": 953,
    "end_line": 956,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processPropertyGet#959",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processPropertyGet(PropertyGet)",
    "snippet": "@Override\n    Node processPropertyGet(PropertyGet getNode) {\n      Node leftChild \u003d transform(getNode.getTarget());\n      Node newNode \u003d newNode(\n          Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));\n      newNode.setLineno(leftChild.getLineno());\n      newNode.setCharno(leftChild.getCharno());\n      maybeSetLengthFrom(newNode, getNode);\n      return newNode;\n    }",
    "begin_line": 959,
    "end_line": 967,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processRegExpLiteral#970",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processRegExpLiteral(RegExpLiteral)",
    "snippet": "@Override\n    Node processRegExpLiteral(RegExpLiteral literalNode) {\n      Node literalStringNode \u003d newStringNode(literalNode.getValue());\n      // assume it\u0027s on the same line.\n      literalStringNode.setLineno(literalNode.getLineno());\n      maybeSetLengthFrom(literalStringNode, literalNode);\n      Node node \u003d newNode(Token.REGEXP, literalStringNode);\n      String flags \u003d literalNode.getFlags();\n      if (flags !\u003d null \u0026\u0026 !flags.isEmpty()) {\n        Node flagsNode \u003d newStringNode(flags);\n        // Assume the flags are on the same line as the literal node.\n        flagsNode.setLineno(literalNode.getLineno());\n        maybeSetLengthFrom(flagsNode, literalNode);\n        node.addChildToBack(flagsNode);\n      }\n      return node;\n    }",
    "begin_line": 970,
    "end_line": 985,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processReturnStatement#988",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processReturnStatement(ReturnStatement)",
    "snippet": "@Override\n    Node processReturnStatement(ReturnStatement statementNode) {\n      Node node \u003d newNode(Token.RETURN);\n      if (statementNode.getReturnValue() !\u003d null) {\n        node.addChildToBack(transform(statementNode.getReturnValue()));\n      }\n      return node;\n    }",
    "begin_line": 988,
    "end_line": 994,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processScope#997",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processScope(Scope)",
    "snippet": "@Override\n    Node processScope(Scope scopeNode) {\n      return processGeneric(scopeNode);\n    }",
    "begin_line": 997,
    "end_line": 999,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processStringLiteral#1002",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processStringLiteral(StringLiteral)",
    "snippet": "@Override\n    Node processStringLiteral(StringLiteral literalNode) {\n      String value \u003d literalNode.getValue();\n      Node n \u003d newStringNode(value);\n      if (value.indexOf(\u0027\\u000B\u0027) !\u003d -1) {\n        // NOTE(nicksantos): In JavaScript, there are 3 ways to\n        // represent a vertical tab: \\v, \\x0B, \\u000B.\n        // The \\v notation was added later, and is not understood\n        // on IE. So we need to preserve it as-is. This is really\n        // obnoxious, because we do not have a good way to represent\n        // how the original string was encoded without making the\n        // representation of strings much more complicated.\n        //\n        // To handle this, we look at the original source test, and\n        // mark the string as \\v-encoded or not. If a string is\n        // \\v encoded, then all the vertical tabs in that string\n        // will be encoded with a \\v.\n        int start \u003d literalNode.getAbsolutePosition();\n        int end \u003d start + literalNode.getLength();\n        if (start \u003c sourceString.length() \u0026\u0026\n            (sourceString.substring(\n                 start, Math.min(sourceString.length(), end))\n             .indexOf(\"\\\\v\") !\u003d -1)) {\n          n.putBooleanProp(Node.SLASH_V, true);\n        }\n      }\n      return n;\n    }",
    "begin_line": 1002,
    "end_line": 1028,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processSwitchCase#1031",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processSwitchCase(SwitchCase)",
    "snippet": "@Override\n    Node processSwitchCase(SwitchCase caseNode) {\n      Node node;\n      if (caseNode.isDefault()) {\n        node \u003d newNode(Token.DEFAULT_CASE);\n      } else {\n        AstNode expr \u003d caseNode.getExpression();\n        node \u003d newNode(Token.CASE, transform(expr));\n      }\n      Node block \u003d newNode(Token.BLOCK);\n      block.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);\n      block.setLineno(caseNode.getLineno());\n      block.setCharno(position2charno(caseNode.getAbsolutePosition()));\n      maybeSetLengthFrom(block, caseNode);\n      if (caseNode.getStatements() !\u003d null) {\n        for (AstNode child : caseNode.getStatements()) {\n          block.addChildToBack(transform(child));\n        }\n      }\n      node.addChildToBack(block);\n      return node;\n    }",
    "begin_line": 1031,
    "end_line": 1051,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processSwitchStatement#1054",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processSwitchStatement(SwitchStatement)",
    "snippet": "@Override\n    Node processSwitchStatement(SwitchStatement statementNode) {\n      Node node \u003d newNode(Token.SWITCH,\n          transform(statementNode.getExpression()));\n      for (AstNode child : statementNode.getCases()) {\n        node.addChildToBack(transform(child));\n      }\n      return node;\n    }",
    "begin_line": 1054,
    "end_line": 1061,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processThrowStatement#1064",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processThrowStatement(ThrowStatement)",
    "snippet": "@Override\n    Node processThrowStatement(ThrowStatement statementNode) {\n      return newNode(Token.THROW,\n          transform(statementNode.getExpression()));\n    }",
    "begin_line": 1064,
    "end_line": 1067,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processTryStatement#1070",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processTryStatement(TryStatement)",
    "snippet": "@Override\n    Node processTryStatement(TryStatement statementNode) {\n      Node node \u003d newNode(Token.TRY,\n          transformBlock(statementNode.getTryBlock()));\n      Node block \u003d newNode(Token.BLOCK);\n      boolean lineSet \u003d false;\n\n      for (CatchClause cc : statementNode.getCatchClauses()) {\n        // Mark the enclosing block at the same line as the first catch\n        // clause.\n        if (lineSet \u003d\u003d false) {\n          block.setLineno(cc.getLineno());\n          maybeSetLengthFrom(block, cc);\n          lineSet \u003d true;\n        }\n        block.addChildToBack(transform(cc));\n      }\n      node.addChildToBack(block);\n\n      AstNode finallyBlock \u003d statementNode.getFinallyBlock();\n      if (finallyBlock !\u003d null) {\n        node.addChildToBack(transformBlock(finallyBlock));\n      }\n\n      // If we didn\u0027t set the line on the catch clause, then\n      // we\u0027ve got an empty catch clause.  Set its line to be the same\n      // as the finally block (to match Old Rhino\u0027s behavior.)\n      if ((lineSet \u003d\u003d false) \u0026\u0026 (finallyBlock !\u003d null)) {\n        block.setLineno(finallyBlock.getLineno());\n        maybeSetLengthFrom(block, finallyBlock);\n      }\n\n      return node;\n    }",
    "begin_line": 1070,
    "end_line": 1102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processUnaryExpression#1105",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processUnaryExpression(UnaryExpression)",
    "snippet": "@Override\n    Node processUnaryExpression(UnaryExpression exprNode) {\n      int type \u003d transformTokenType(exprNode.getType());\n      Node operand \u003d transform(exprNode.getOperand());\n      if (type \u003d\u003d Token.NEG \u0026\u0026 operand.isNumber()) {\n        operand.setDouble(-operand.getDouble());\n        return operand;\n      } else {\n        if (type \u003d\u003d Token.DELPROP \u0026\u0026\n            !(operand.isGetProp() ||\n              operand.isGetElem() ||\n              operand.isName())) {\n          String msg \u003d\n              \"Invalid delete operand. Only properties can be deleted.\";\n          errorReporter.error(\n              msg,\n              sourceName,\n              operand.getLineno(), \"\", 0);\n        } else  if (type \u003d\u003d Token.INC || type \u003d\u003d Token.DEC) {\n          if (!validAssignmentTarget(operand)) {\n            String msg \u003d (type \u003d\u003d Token.INC)\n                ? \"invalid increment target\"\n                : \"invalid decrement target\";\n            errorReporter.error(\n                msg,\n                sourceName,\n                operand.getLineno(), \"\", 0);\n          }\n        }\n\n        Node node \u003d newNode(type, operand);\n        if (exprNode.isPostfix()) {\n          node.putBooleanProp(Node.INCRDECR_PROP, true);\n        }\n        return node;\n      }\n    }",
    "begin_line": 1105,
    "end_line": 1140,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.validAssignmentTarget#1142",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.validAssignmentTarget(com.google.javascript.rhino.Node)",
    "snippet": "private boolean validAssignmentTarget(Node target) {\n      switch (target.getType()) {\n        case Token.NAME:\n        case Token.GETPROP:\n        case Token.GETELEM:\n          return true;\n      }\n      return false;\n    }",
    "begin_line": 1142,
    "end_line": 1150,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processVariableDeclaration#1153",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processVariableDeclaration(VariableDeclaration)",
    "snippet": "@Override\n    Node processVariableDeclaration(VariableDeclaration declarationNode) {\n      if (!config.acceptConstKeyword \u0026\u0026 declarationNode.getType() \u003d\u003d\n          com.google.javascript.rhino.head.Token.CONST) {\n        processIllegalToken(declarationNode);\n      }\n\n      Node node \u003d newNode(Token.VAR);\n      for (VariableInitializer child : declarationNode.getVariables()) {\n        node.addChildToBack(transform(child));\n      }\n      return node;\n    }",
    "begin_line": 1153,
    "end_line": 1164,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processVariableInitializer#1167",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processVariableInitializer(VariableInitializer)",
    "snippet": "@Override\n    Node processVariableInitializer(VariableInitializer initializerNode) {\n      Node node \u003d transform(initializerNode.getTarget());\n      if (initializerNode.getInitializer() !\u003d null) {\n        Node initalizer \u003d transform(initializerNode.getInitializer());\n        node.addChildToBack(initalizer);\n      }\n      return node;\n    }",
    "begin_line": 1167,
    "end_line": 1174,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processWhileLoop#1177",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processWhileLoop(WhileLoop)",
    "snippet": "@Override\n    Node processWhileLoop(WhileLoop loopNode) {\n      return newNode(\n          Token.WHILE,\n          transform(loopNode.getCondition()),\n          transformBlock(loopNode.getBody()));\n    }",
    "begin_line": 1177,
    "end_line": 1182,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processWithStatement#1185",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processWithStatement(WithStatement)",
    "snippet": "@Override\n    Node processWithStatement(WithStatement statementNode) {\n      return newNode(\n          Token.WITH,\n          transform(statementNode.getExpression()),\n          transformBlock(statementNode.getStatement()));\n    }",
    "begin_line": 1185,
    "end_line": 1190,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.processIllegalToken#1193",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.processIllegalToken(AstNode)",
    "snippet": "@Override\n    Node processIllegalToken(AstNode node) {\n      errorReporter.error(\n          \"Unsupported syntax: \" +\n          com.google.javascript.rhino.head.Token.typeToName(\n              node.getType()),\n          sourceName,\n          node.getLineno(), \"\", 0);\n      return newNode(Token.EMPTY);\n    }",
    "begin_line": 1193,
    "end_line": 1201,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.reportDestructuringAssign#1203",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.reportDestructuringAssign(AstNode)",
    "snippet": "void reportDestructuringAssign(AstNode node) {\n      errorReporter.error(\n          \"destructuring assignment forbidden\",\n          sourceName,\n          node.getLineno(), \"\", 0);\n    }",
    "begin_line": 1203,
    "end_line": 1208,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.reportGetter#1210",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.reportGetter(AstNode)",
    "snippet": "void reportGetter(AstNode node) {\n      errorReporter.error(\n          GETTER_ERROR_MESSAGE,\n          sourceName,\n          node.getLineno(), \"\", 0);\n    }",
    "begin_line": 1210,
    "end_line": 1215,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.reportSetter#1217",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.reportSetter(AstNode)",
    "snippet": "void reportSetter(AstNode node) {\n      errorReporter.error(\n          SETTER_ERROR_MESSAGE,\n          sourceName,\n          node.getLineno(), \"\", 0);\n    }",
    "begin_line": 1217,
    "end_line": 1222,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.reportGetterParam#1224",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.reportGetterParam(AstNode)",
    "snippet": "void reportGetterParam(AstNode node) {\n      errorReporter.error(\n          \"getters may not have parameters\",\n          sourceName,\n          node.getLineno(), \"\", 0);\n    }",
    "begin_line": 1224,
    "end_line": 1229,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.reportSetterParam#1231",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.reportSetterParam(AstNode)",
    "snippet": "void reportSetterParam(AstNode node) {\n      errorReporter.error(\n          \"setters must have exactly one parameter\",\n          sourceName,\n          node.getLineno(), \"\", 0);\n    }",
    "begin_line": 1231,
    "end_line": 1236,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.transformTokenType#1239",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(int)",
    "snippet": "private static int transformTokenType(int token) {\n    switch (token) {\n      case com.google.javascript.rhino.head.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.rhino.head.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.rhino.head.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.rhino.head.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.rhino.head.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.rhino.head.Token.NE:\n        return Token.NE;\n      case com.google.javascript.rhino.head.Token.LT:\n        return Token.LT;\n      case com.google.javascript.rhino.head.Token.LE:\n        return Token.LE;\n      case com.google.javascript.rhino.head.Token.GT:\n        return Token.GT;\n      case com.google.javascript.rhino.head.Token.GE:\n        return Token.GE;\n      case com.google.javascript.rhino.head.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.rhino.head.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.rhino.head.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.rhino.head.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.rhino.head.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.rhino.head.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.rhino.head.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.rhino.head.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.rhino.head.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.rhino.head.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.rhino.head.Token.POS:\n        return Token.POS;\n      case com.google.javascript.rhino.head.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.rhino.head.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.rhino.head.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.rhino.head.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.rhino.head.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.rhino.head.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.rhino.head.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.rhino.head.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.rhino.head.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.rhino.head.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.rhino.head.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.rhino.head.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.rhino.head.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.rhino.head.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.rhino.head.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.rhino.head.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.rhino.head.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.rhino.head.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.rhino.head.Token.IN:\n        return Token.IN;\n      case com.google.javascript.rhino.head.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.rhino.head.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.rhino.head.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.rhino.head.Token.TRY:\n        return Token.TRY;\n      // The LP represents a parameter list\n      case com.google.javascript.rhino.head.Token.LP:\n        return Token.PARAM_LIST;\n      case com.google.javascript.rhino.head.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.rhino.head.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.rhino.head.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.rhino.head.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.rhino.head.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.rhino.head.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.rhino.head.Token.OR:\n        return Token.OR;\n      case com.google.javascript.rhino.head.Token.AND:\n        return Token.AND;\n      case com.google.javascript.rhino.head.Token.INC:\n        return Token.INC;\n      case com.google.javascript.rhino.head.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.rhino.head.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.rhino.head.Token.IF:\n        return Token.IF;\n      case com.google.javascript.rhino.head.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.rhino.head.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.rhino.head.Token.DEFAULT:\n        return Token.DEFAULT_CASE;\n      case com.google.javascript.rhino.head.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.rhino.head.Token.DO:\n        return Token.DO;\n      case com.google.javascript.rhino.head.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.rhino.head.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.rhino.head.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.rhino.head.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.rhino.head.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.rhino.head.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.rhino.head.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.rhino.head.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.rhino.head.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.rhino.head.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.rhino.head.Token.EXPR_VOID:\n      case com.google.javascript.rhino.head.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.rhino.head.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.rhino.head.Token.GET:\n        return Token.GETTER_DEF;\n      case com.google.javascript.rhino.head.Token.SET:\n        return Token.SETTER_DEF;\n      case com.google.javascript.rhino.head.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.rhino.head.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }\n\n    // Token without name\n    throw new IllegalStateException(String.valueOf(token));\n  }",
    "begin_line": 1239,
    "end_line": 1419,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.newNode#1422",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int)",
    "snippet": "private Node newNode(int type) {\n    return new Node(type).clonePropsFrom(templateNode);\n  }",
    "begin_line": 1422,
    "end_line": 1424,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.newNode#1426",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int, com.google.javascript.rhino.Node)",
    "snippet": "private Node newNode(int type, Node child1) {\n    return new Node(type, child1).clonePropsFrom(templateNode);\n  }",
    "begin_line": 1426,
    "end_line": 1428,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.newNode#1430",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private Node newNode(int type, Node child1, Node child2) {\n    return new Node(type, child1, child2).clonePropsFrom(templateNode);\n  }",
    "begin_line": 1430,
    "end_line": 1432,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.newNode#1434",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private Node newNode(int type, Node child1, Node child2, Node child3) {\n    return new Node(type, child1, child2, child3).clonePropsFrom(templateNode);\n  }",
    "begin_line": 1434,
    "end_line": 1436,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.newStringNode#1438",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.newStringNode(java.lang.String)",
    "snippet": "private Node newStringNode(String value) {\n    return IR.string(value).clonePropsFrom(templateNode);\n  }",
    "begin_line": 1438,
    "end_line": 1440,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.newStringNode#1442",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.newStringNode(int, java.lang.String)",
    "snippet": "private Node newStringNode(int type, String value) {\n    return Node.newString(type, value).clonePropsFrom(templateNode);\n  }",
    "begin_line": 1442,
    "end_line": 1444,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TransformDispatcher.newNumberNode#1446",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/IRFactory.java",
    "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
    "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNumberNode(java.lang.Double)",
    "snippet": "private Node newNumberNode(Double value) {\n    return IR.number(value).clonePropsFrom(templateNode);\n  }",
    "begin_line": 1446,
    "end_line": 1448,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorReporterParser.addParserWarning#62",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.addParserWarning(java.lang.String, java.lang.String, int, int)",
    "snippet": "void addParserWarning(String messageId, String messageArg, int lineno,\n        int charno) {\n      errorReporter.warning(ScriptRuntime.getMessage1(messageId, messageArg),\n          getSourceName(), lineno, null, charno);\n    }",
    "begin_line": 62,
    "end_line": 66,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorReporterParser.addParserWarning#68",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.addParserWarning(java.lang.String, int, int)",
    "snippet": "void addParserWarning(String messageId, int lineno, int charno) {\n      errorReporter.warning(ScriptRuntime.getMessage0(messageId),\n          getSourceName(), lineno, null, charno);\n    }",
    "begin_line": 68,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorReporterParser.addTypeWarning#73",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.addTypeWarning(java.lang.String, java.lang.String, int, int)",
    "snippet": "void addTypeWarning(String messageId, String messageArg, int lineno,\n                    int charno) {\n      errorReporter.warning(\n          \"Bad type annotation. \" +\n          ScriptRuntime.getMessage1(messageId, messageArg),\n          getSourceName(), lineno, null, charno);\n    }",
    "begin_line": 73,
    "end_line": 79,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorReporterParser.addTypeWarning#81",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.addTypeWarning(java.lang.String, int, int)",
    "snippet": "void addTypeWarning(String messageId, int lineno, int charno) {\n      errorReporter.warning(\n          \"Bad type annotation. \" +\n          ScriptRuntime.getMessage0(messageId),\n          getSourceName(), lineno, null, charno);\n    }",
    "begin_line": 81,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorReporterParser.setFileLevelJsDocBuilder#107",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.setFileLevelJsDocBuilder(com.google.javascript.rhino.Node.FileLevelJsDocBuilder)",
    "snippet": "void setFileLevelJsDocBuilder(\n      Node.FileLevelJsDocBuilder fileLevelJsDocBuilder) {\n    this.fileLevelJsDocBuilder \u003d fileLevelJsDocBuilder;\n  }",
    "begin_line": 107,
    "end_line": 110,
    "comment": "/** \n * Sets the JsDocBuilder for the file-level (root) node of this parse. The parser uses the builder to append any preserve annotations it encounters in JsDoc comments.\n * @param fileLevelJsDocBuilder\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorReporterParser.setFileOverviewJSDocInfo#116",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.setFileOverviewJSDocInfo(com.google.javascript.rhino.JSDocInfo)",
    "snippet": "void setFileOverviewJSDocInfo(JSDocInfo fileOverviewJSDocInfo) {\n    this.fileOverviewJSDocInfo \u003d fileOverviewJSDocInfo;\n  }",
    "begin_line": 116,
    "end_line": 118,
    "comment": "/** \n * Sets the file overview JSDocInfo, in order to warn about multiple uses of the @fileoverview tag in a file.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorReporterParser.JsDocInfoParser#126",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.JsDocInfoParser(com.google.javascript.jscomp.parsing.JsDocTokenStream, Comment, com.google.javascript.rhino.Node, com.google.javascript.jscomp.parsing.Config, ErrorReporter)",
    "snippet": " JsDocInfoParser(JsDocTokenStream stream,\n                  Comment commentNode,\n                  Node associatedNode,\n                  Config config,\n                  ErrorReporter errorReporter) {\n    this.stream \u003d stream;\n    this.associatedNode \u003d associatedNode;\n\n    // Sometimes this will be null in tests.\n    this.sourceFile \u003d associatedNode \u003d\u003d null\n        ? null : associatedNode.getStaticSourceFile();\n\n    this.jsdocBuilder \u003d new JSDocInfoBuilder(config.parseJsDocDocumentation);\n    if (commentNode !\u003d null) {\n      this.jsdocBuilder.recordOriginalCommentString(commentNode.getValue());\n    }\n    this.annotationNames \u003d config.annotationNames;\n    this.suppressionNames \u003d config.suppressionNames;\n\n    this.errorReporter \u003d errorReporter;\n    this.templateNode \u003d this.createTemplateNode();\n  }",
    "begin_line": 126,
    "end_line": 147,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorReporterParser.getSourceName#149",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.getSourceName()",
    "snippet": "private String getSourceName() {\n    return sourceFile \u003d\u003d null ? null : sourceFile.getName();\n  }",
    "begin_line": 149,
    "end_line": 151,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorReporterParser.parseTypeString#157",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString(java.lang.String)",
    "snippet": "public static Node parseTypeString(String typeString) {\n    Config config \u003d new Config(\n        Sets.\u003cString\u003enewHashSet(),\n        Sets.\u003cString\u003enewHashSet(),\n        false,\n        LanguageMode.ECMASCRIPT3,\n        false);\n    JsDocInfoParser parser \u003d new JsDocInfoParser(\n        new JsDocTokenStream(typeString),\n        null,\n        null,\n        config,\n        NullErrorReporter.forNewRhino());\n\n    return parser.parseTopLevelTypeExpression(parser.next());\n  }",
    "begin_line": 157,
    "end_line": 172,
    "comment": "/** \n * Parses a string containing a JsDoc type declaration, returning the type if the parsing succeeded or  {@code null} if it failed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorReporterParser.parse#182",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parse()",
    "snippet": "boolean parse() {\n    int lineno;\n    int charno;\n\n    // JSTypes are represented as Rhino AST nodes, and then resolved later.\n    JSTypeExpression type;\n\n    state \u003d State.SEARCHING_ANNOTATION;\n    skipEOLs();\n\n    JsDocToken token \u003d next();\n\n    List\u003cExtendedTypeInfo\u003e extendedTypes \u003d Lists.newArrayList();\n\n    // Always record that we have a comment.\n    if (jsdocBuilder.shouldParseDocumentation()) {\n      ExtractionInfo blockInfo \u003d extractBlockComment(token);\n      token \u003d blockInfo.token;\n      if (!blockInfo.string.isEmpty()) {\n        jsdocBuilder.recordBlockDescription(blockInfo.string);\n      }\n    } else {\n      if (token !\u003d JsDocToken.ANNOTATION \u0026\u0026\n          token !\u003d JsDocToken.EOC) {\n        // Mark that there was a description, but don\u0027t bother marking\n        // what it was.\n        jsdocBuilder.recordBlockDescription(\"\");\n      }\n    }\n\n    // Parse the actual JsDoc.\n    retry: for (;;) {\n      switch (token) {\n        case ANNOTATION:\n          if (state \u003d\u003d State.SEARCHING_ANNOTATION) {\n            state \u003d State.SEARCHING_NEWLINE;\n            lineno \u003d stream.getLineno();\n            charno \u003d stream.getCharno();\n\n            String annotationName \u003d stream.getString();\n            Annotation annotation \u003d annotationNames.get(annotationName);\n            if (annotation \u003d\u003d null) {\n              parser.addParserWarning(\"msg.bad.jsdoc.tag\", annotationName,\n                  stream.getLineno(), stream.getCharno());\n            } else {\n              // Mark the beginning of the annotation.\n              jsdocBuilder.markAnnotation(annotationName, lineno, charno);\n\n              switch (annotation) {\n                case AUTHOR:\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo authorInfo \u003d extractSingleLineBlock();\n                    String author \u003d authorInfo.string;\n\n                    if (author.length() \u003d\u003d 0) {\n                      parser.addParserWarning(\"msg.jsdoc.authormissing\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      jsdocBuilder.addAuthor(author);\n                    }\n                    token \u003d authorInfo.token;\n                  } else {\n                    token \u003d eatTokensUntilEOL(token);\n                  }\n                  continue retry;\n\n                case CONSISTENTIDGENERATOR:\n                  if (!jsdocBuilder.recordConsistentIdGenerator()) {\n                    parser.addParserWarning(\"msg.jsdoc.consistidgen\",\n                      stream.getLineno(), stream.getCharno());\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case STRUCT:\n                  if (!jsdocBuilder.recordStruct()) {\n                    parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                                          stream.getLineno(),\n                                          stream.getCharno());\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case DICT:\n                  if (!jsdocBuilder.recordDict()) {\n                    parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                                          stream.getLineno(),\n                                          stream.getCharno());\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case CONSTRUCTOR:\n                  if (!jsdocBuilder.recordConstructor()) {\n                    if (jsdocBuilder.isInterfaceRecorded()) {\n                      parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case DEPRECATED:\n                  if (!jsdocBuilder.recordDeprecated()) {\n                    parser.addParserWarning(\"msg.jsdoc.deprecated\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n\n                  // Find the reason/description, if any.\n                  ExtractionInfo reasonInfo \u003d\n                      extractMultilineTextualBlock(token);\n\n                  String reason \u003d reasonInfo.string;\n\n                  if (reason.length() \u003e 0) {\n                    jsdocBuilder.recordDeprecationReason(reason);\n                  }\n\n                  token \u003d reasonInfo.token;\n                  continue retry;\n\n                case INTERFACE:\n                  if (!jsdocBuilder.recordInterface()) {\n                    if (jsdocBuilder.isConstructorRecorded()) {\n                      parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case DESC:\n                  if (jsdocBuilder.isDescriptionRecorded()) {\n                    parser.addParserWarning(\"msg.jsdoc.desc.extra\",\n                        stream.getLineno(), stream.getCharno());\n                    token \u003d eatTokensUntilEOL();\n                    continue retry;\n                  } else {\n                    ExtractionInfo descriptionInfo \u003d\n                        extractMultilineTextualBlock(token);\n\n                    String description \u003d descriptionInfo.string;\n\n                    jsdocBuilder.recordDescription(description);\n                    token \u003d descriptionInfo.token;\n                    continue retry;\n                  }\n\n                case FILE_OVERVIEW:\n                  String fileOverview \u003d \"\";\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo fileOverviewInfo \u003d\n                        extractMultilineTextualBlock(token,\n                            WhitespaceOption.TRIM);\n\n                    fileOverview \u003d fileOverviewInfo.string;\n\n                    token \u003d fileOverviewInfo.token;\n                  } else {\n                    token \u003d eatTokensUntilEOL(token);\n                  }\n\n                  if (!jsdocBuilder.recordFileOverview(fileOverview)) {\n                    parser.addParserWarning(\"msg.jsdoc.fileoverview.extra\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  continue retry;\n\n                case LICENSE:\n                case PRESERVE:\n                  ExtractionInfo preserveInfo \u003d\n                      extractMultilineTextualBlock(token,\n                                                   WhitespaceOption.PRESERVE);\n\n                  String preserve \u003d preserveInfo.string;\n\n                  if (preserve.length() \u003e 0) {\n                    if (fileLevelJsDocBuilder !\u003d null) {\n                      fileLevelJsDocBuilder.append(preserve);\n                    }\n                  }\n\n                  token \u003d preserveInfo.token;\n                  continue retry;\n\n                case ENUM:\n                  token \u003d next();\n                  lineno \u003d stream.getLineno();\n                  charno \u003d stream.getCharno();\n\n                  type \u003d null;\n                  if (token !\u003d JsDocToken.EOL \u0026\u0026 token !\u003d JsDocToken.EOC) {\n                    type \u003d createJSTypeExpression(\n                        parseAndRecordTypeNode(token));\n                  }\n\n                  if (type \u003d\u003d null) {\n                    type \u003d createJSTypeExpression(newStringNode(\"number\"));\n                  }\n                  if (!jsdocBuilder.recordEnumParameterType(type)) {\n                    parser.addTypeWarning(\n                        \"msg.jsdoc.incompat.type\", lineno, charno);\n                  }\n                  token \u003d eatTokensUntilEOL(token);\n                  continue retry;\n\n                case EXPORT:\n                  if (!jsdocBuilder.recordExport()) {\n                    parser.addParserWarning(\"msg.jsdoc.export\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case EXPOSE:\n                  if (!jsdocBuilder.recordExpose()) {\n                    parser.addParserWarning(\"msg.jsdoc.expose\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case EXTERNS:\n                  if (!jsdocBuilder.recordExterns()) {\n                    parser.addParserWarning(\"msg.jsdoc.externs\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case JAVA_DISPATCH:\n                  if (!jsdocBuilder.recordJavaDispatch()) {\n                    parser.addParserWarning(\"msg.jsdoc.javadispatch\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case EXTENDS:\n                case IMPLEMENTS:\n                  skipEOLs();\n                  token \u003d next();\n                  lineno \u003d stream.getLineno();\n                  charno \u003d stream.getCharno();\n                  boolean matchingRc \u003d false;\n\n                  if (token \u003d\u003d JsDocToken.LC) {\n                    token \u003d next();\n                    matchingRc \u003d true;\n                  }\n\n                  if (token \u003d\u003d JsDocToken.STRING) {\n                    Node typeNode \u003d parseAndRecordTypeNameNode(\n                        token, lineno, charno, matchingRc);\n\n                    lineno \u003d stream.getLineno();\n                    charno \u003d stream.getCharno();\n\n                    typeNode \u003d wrapNode(Token.BANG, typeNode);\n                    type \u003d createJSTypeExpression(typeNode);\n\n                    if (annotation \u003d\u003d Annotation.EXTENDS) {\n                      // record the extended type, check later\n                      extendedTypes.add(new ExtendedTypeInfo(\n                          type, stream.getLineno(), stream.getCharno()));\n                    } else {\n                      Preconditions.checkState(\n                          annotation \u003d\u003d Annotation.IMPLEMENTS);\n                      if (!jsdocBuilder.recordImplementedInterface(type)) {\n                        parser.addTypeWarning(\"msg.jsdoc.implements.duplicate\",\n                            lineno, charno);\n                      }\n                    }\n                    token \u003d next();\n                    if (matchingRc) {\n                      if (token !\u003d JsDocToken.RC) {\n                        parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                            stream.getLineno(), stream.getCharno());\n                      }\n                    } else if (token !\u003d JsDocToken.EOL \u0026\u0026\n                        token !\u003d JsDocToken.EOF \u0026\u0026 token !\u003d JsDocToken.EOC) {\n                      parser.addTypeWarning(\"msg.end.annotation.expected\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  } else {\n                    parser.addTypeWarning(\"msg.no.type.name\", lineno, charno);\n                  }\n                  token \u003d eatTokensUntilEOL(token);\n                  continue retry;\n\n                case HIDDEN:\n                  if (!jsdocBuilder.recordHiddenness()) {\n                    parser.addParserWarning(\"msg.jsdoc.hidden\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case LENDS:\n                  skipEOLs();\n\n                  matchingRc \u003d false;\n                  if (match(JsDocToken.LC)) {\n                    token \u003d next();\n                    matchingRc \u003d true;\n                  }\n\n                  if (match(JsDocToken.STRING)) {\n                    token \u003d next();\n                    if (!jsdocBuilder.recordLends(stream.getString())) {\n                      parser.addTypeWarning(\"msg.jsdoc.lends.incompatible\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  } else {\n                    parser.addTypeWarning(\"msg.jsdoc.lends.missing\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n\n                  if (matchingRc \u0026\u0026 !match(JsDocToken.RC)) {\n                    parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case MEANING:\n                  ExtractionInfo meaningInfo \u003d\n                      extractMultilineTextualBlock(token);\n                  String meaning \u003d meaningInfo.string;\n                  token \u003d meaningInfo.token;\n                  if (!jsdocBuilder.recordMeaning(meaning)) {\n                    parser.addParserWarning(\"msg.jsdoc.meaning.extra\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  continue retry;\n\n                case NO_ALIAS:\n                  if (!jsdocBuilder.recordNoAlias()) {\n                    parser.addParserWarning(\"msg.jsdoc.noalias\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_COMPILE:\n                  if (!jsdocBuilder.recordNoCompile()) {\n                    parser.addParserWarning(\"msg.jsdoc.nocompile\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_TYPE_CHECK:\n                  if (!jsdocBuilder.recordNoTypeCheck()) {\n                    parser.addParserWarning(\"msg.jsdoc.nocheck\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case NOT_IMPLEMENTED:\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case INHERIT_DOC:\n                case OVERRIDE:\n                  if (!jsdocBuilder.recordOverride()) {\n                    parser.addTypeWarning(\"msg.jsdoc.override\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case THROWS:\n                  skipEOLs();\n                  token \u003d next();\n                  lineno \u003d stream.getLineno();\n                  charno \u003d stream.getCharno();\n                  type \u003d null;\n\n                  if (token \u003d\u003d JsDocToken.LC) {\n                    type \u003d createJSTypeExpression(\n                        parseAndRecordTypeNode(token));\n\n                    if (type \u003d\u003d null) {\n                      // parsing error reported during recursive descent\n                      // recovering parsing\n                      token \u003d eatTokensUntilEOL();\n                      continue retry;\n                    }\n                  }\n\n                  // *Update* the token to that after the type annotation.\n                  token \u003d current();\n\n                  // Save the throw type.\n                  jsdocBuilder.recordThrowType(type);\n\n                  // Find the throw\u0027s description (if applicable).\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo descriptionInfo \u003d\n                        extractMultilineTextualBlock(token);\n\n                    String description \u003d descriptionInfo.string;\n\n                    if (description.length() \u003e 0) {\n                      jsdocBuilder.recordThrowDescription(type, description);\n                    }\n\n                    token \u003d descriptionInfo.token;\n                  } else {\n                    token \u003d eatTokensUntilEOL(token);\n                  }\n                  continue retry;\n\n                case PARAM:\n                  skipEOLs();\n                  token \u003d next();\n                  lineno \u003d stream.getLineno();\n                  charno \u003d stream.getCharno();\n                  type \u003d null;\n\n                  if (token \u003d\u003d JsDocToken.LC) {\n                    type \u003d createJSTypeExpression(\n                        parseAndRecordParamTypeNode(token));\n\n                    if (type \u003d\u003d null) {\n                      // parsing error reported during recursive descent\n                      // recovering parsing\n                      token \u003d eatTokensUntilEOL();\n                      continue retry;\n                    }\n                    skipEOLs();\n                    token \u003d next();\n                    lineno \u003d stream.getLineno();\n                    charno \u003d stream.getCharno();\n                  }\n\n                  String name \u003d null;\n                  boolean isBracketedParam \u003d JsDocToken.LB \u003d\u003d token;\n                  if (isBracketedParam) {\n                    token \u003d next();\n                  }\n\n                  if (JsDocToken.STRING !\u003d token) {\n                    parser.addTypeWarning(\"msg.missing.variable.name\",\n                        lineno, charno);\n                  } else {\n                    name \u003d stream.getString();\n\n                    if (isBracketedParam) {\n                      token \u003d next();\n\n                      // Throw out JsDocToolkit\u0027s \"default\" parameter\n                      // annotation.  It makes no sense under our type\n                      // system.\n                      if (JsDocToken.EQUALS \u003d\u003d token) {\n                        token \u003d next();\n                        if (JsDocToken.STRING \u003d\u003d token) {\n                          token \u003d next();\n                        }\n                      }\n\n                      if (JsDocToken.RB !\u003d token) {\n                        reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");\n                      } else if (type !\u003d null) {\n                        // Make the type expression optional, if it isn\u0027t\n                        // already.\n                        type \u003d JSTypeExpression.makeOptionalArg(type);\n                      }\n                    }\n\n                    // If the param name has a DOT in it, just throw it out\n                    // quietly. We do not handle the JsDocToolkit method\n                    // for handling properties of params.\n                    if (name.indexOf(\u0027.\u0027) \u003e -1) {\n                      name \u003d null;\n                    } else if (!jsdocBuilder.recordParameter(name, type)) {\n                      if (jsdocBuilder.hasParameter(name)) {\n                        parser.addTypeWarning(\"msg.dup.variable.name\", name,\n                            lineno, charno);\n                      } else {\n                        parser.addTypeWarning(\"msg.jsdoc.incompat.type\", name,\n                            lineno, charno);\n                      }\n                    }\n                  }\n\n                  if (name \u003d\u003d null) {\n                    token \u003d eatTokensUntilEOL(token);\n                    continue retry;\n                  }\n\n                  jsdocBuilder.markName(name, sourceFile, lineno, charno);\n\n                  // Find the parameter\u0027s description (if applicable).\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo paramDescriptionInfo \u003d\n                        extractMultilineTextualBlock(token);\n\n                    String paramDescription \u003d paramDescriptionInfo.string;\n\n                    if (paramDescription.length() \u003e 0) {\n                      jsdocBuilder.recordParameterDescription(name,\n                          paramDescription);\n                    }\n\n                    token \u003d paramDescriptionInfo.token;\n                  } else {\n                    token \u003d eatTokensUntilEOL(token);\n                  }\n                  continue retry;\n\n                case PRESERVE_TRY:\n                  if (!jsdocBuilder.recordPreserveTry()) {\n                    parser.addParserWarning(\"msg.jsdoc.preservertry\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_SHADOW:\n                  if (!jsdocBuilder.recordNoShadow()) {\n                    parser.addParserWarning(\"msg.jsdoc.noshadow\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_SIDE_EFFECTS:\n                  if (!jsdocBuilder.recordNoSideEffects()) {\n                    parser.addParserWarning(\"msg.jsdoc.nosideeffects\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case MODIFIES:\n                  token \u003d parseModifiesTag(next());\n                  continue retry;\n\n                case IMPLICIT_CAST:\n                  if (!jsdocBuilder.recordImplicitCast()) {\n                    parser.addTypeWarning(\"msg.jsdoc.implicitcast\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case SEE:\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo referenceInfo \u003d extractSingleLineBlock();\n                    String reference \u003d referenceInfo.string;\n\n                    if (reference.length() \u003d\u003d 0) {\n                      parser.addParserWarning(\"msg.jsdoc.seemissing\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      jsdocBuilder.addReference(reference);\n                    }\n\n                    token \u003d referenceInfo.token;\n                  } else {\n                    token \u003d eatTokensUntilEOL(token);\n                  }\n                  continue retry;\n\n                case STABLEIDGENERATOR:\n                  if (!jsdocBuilder.recordStableIdGenerator()) {\n                    parser.addParserWarning(\"msg.jsdoc.stableidgen\",\n                      stream.getLineno(), stream.getCharno());\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case SUPPRESS:\n                  token \u003d parseSuppressTag(next());\n                  continue retry;\n\n                case TEMPLATE:\n                  ExtractionInfo templateInfo \u003d extractSingleLineBlock();\n                  List\u003cString\u003e names \u003d Lists.newArrayList(\n                      Splitter.on(\u0027,\u0027)\n                          .trimResults()\n                          .split(templateInfo.string));\n\n                  if (names.size() \u003d\u003d 0 || names.get(0).length() \u003d\u003d 0) {\n                    parser.addTypeWarning(\"msg.jsdoc.templatemissing\",\n                          stream.getLineno(), stream.getCharno());\n                  } else if (!jsdocBuilder.recordTemplateTypeNames(names)) {\n                    parser.addTypeWarning(\"msg.jsdoc.template.at.most.once\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n\n                  token \u003d templateInfo.token;\n                  continue retry;\n\n                case IDGENERATOR:\n                  if (!jsdocBuilder.recordIdGenerator()) {\n                    parser.addParserWarning(\"msg.jsdoc.idgen\",\n                      stream.getLineno(), stream.getCharno());\n                  }\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n\n                case VERSION:\n                  ExtractionInfo versionInfo \u003d extractSingleLineBlock();\n                  String version \u003d versionInfo.string;\n\n                  if (version.length() \u003d\u003d 0) {\n                    parser.addParserWarning(\"msg.jsdoc.versionmissing\",\n                          stream.getLineno(), stream.getCharno());\n                  } else {\n                    if (!jsdocBuilder.recordVersion(version)) {\n                       parser.addParserWarning(\"msg.jsdoc.extraversion\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n\n                  token \u003d versionInfo.token;\n                  continue retry;\n\n                case CONSTANT:\n                case DEFINE:\n                case RETURN:\n                case PRIVATE:\n                case PROTECTED:\n                case PUBLIC:\n                case THIS:\n                case TYPE:\n                case TYPEDEF:\n                  lineno \u003d stream.getLineno();\n                  charno \u003d stream.getCharno();\n\n                  Node typeNode \u003d null;\n                  boolean hasType \u003d lookAheadForTypeAnnotation();\n                  boolean isAlternateTypeAnnotation \u003d\n                      (annotation \u003d\u003d Annotation.PRIVATE ||\n                       annotation \u003d\u003d Annotation.PROTECTED ||\n                       annotation \u003d\u003d Annotation.PUBLIC ||\n                       annotation \u003d\u003d Annotation.CONSTANT);\n                  boolean canSkipTypeAnnotation \u003d\n                      (isAlternateTypeAnnotation ||\n                       annotation \u003d\u003d Annotation.RETURN);\n                  type \u003d null;\n                  if (hasType || !canSkipTypeAnnotation) {\n                    skipEOLs();\n                    token \u003d next();\n                    typeNode \u003d parseAndRecordTypeNode(token);\n\n                    if (annotation \u003d\u003d Annotation.THIS) {\n                      typeNode \u003d wrapNode(Token.BANG, typeNode);\n                    }\n                    type \u003d createJSTypeExpression(typeNode);\n                  }\n\n                  // The error was reported during recursive descent\n                  // recovering parsing\n                  boolean hasError \u003d type \u003d\u003d null \u0026\u0026 !canSkipTypeAnnotation;\n                  if (!hasError) {\n                    // Record types for @type.\n                    // If the @private, @protected, or @public annotations\n                    // have a type attached, pretend that they actually wrote:\n                    // @type {type}\\n@private\n                    // This will have some weird behavior in some cases\n                    // (for example, @private can now be used as a type-cast),\n                    // but should be mostly OK.\n                    if ((type !\u003d null \u0026\u0026 isAlternateTypeAnnotation)\n                        || annotation \u003d\u003d Annotation.TYPE) {\n                      if (!jsdocBuilder.recordType(type)) {\n                        parser.addTypeWarning(\n                            \"msg.jsdoc.incompat.type\", lineno, charno);\n                      }\n                    }\n\n                    switch (annotation) {\n                      case CONSTANT:\n                        if (!jsdocBuilder.recordConstancy()) {\n                          parser.addParserWarning(\"msg.jsdoc.const\",\n                              stream.getLineno(), stream.getCharno());\n                        }\n                        break;\n\n                      case DEFINE:\n                        if (!jsdocBuilder.recordDefineType(type)) {\n                          parser.addParserWarning(\"msg.jsdoc.define\",\n                              lineno, charno);\n                        }\n                        break;\n\n                      case PRIVATE:\n                        if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE)) {\n                          parser.addParserWarning(\n                              \"msg.jsdoc.visibility.private\",\n                              lineno, charno);\n                        }\n                        break;\n\n                      case PROTECTED:\n                        if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED)) {\n                          parser.addParserWarning(\n                              \"msg.jsdoc.visibility.protected\",\n                              lineno, charno);\n                        }\n                        break;\n\n                      case PUBLIC:\n                        if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) {\n                          parser.addParserWarning(\n                              \"msg.jsdoc.visibility.public\",\n                              lineno, charno);\n                        }\n                        break;\n\n                      case RETURN:\n                        if (type \u003d\u003d null) {\n                          type \u003d createJSTypeExpression(newNode(Token.QMARK));\n                        }\n\n                        if (!jsdocBuilder.recordReturnType(type)) {\n                          parser.addTypeWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                          break;\n                        }\n\n                        // Find the return\u0027s description (if applicable).\n                        if (jsdocBuilder.shouldParseDocumentation()) {\n                          ExtractionInfo returnDescriptionInfo \u003d\n                              extractMultilineTextualBlock(token);\n\n                          String returnDescription \u003d\n                              returnDescriptionInfo.string;\n\n                          if (returnDescription.length() \u003e 0) {\n                            jsdocBuilder.recordReturnDescription(\n                                returnDescription);\n                          }\n\n                          token \u003d returnDescriptionInfo.token;\n                        } else {\n                          token \u003d eatTokensUntilEOL(token);\n                        }\n                        continue retry;\n\n                      case THIS:\n                        if (!jsdocBuilder.recordThisType(type)) {\n                          parser.addTypeWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                        }\n                        break;\n\n                      case TYPEDEF:\n                        if (!jsdocBuilder.recordTypedef(type)) {\n                          parser.addTypeWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                        }\n                        break;\n                    }\n                  }\n\n                  token \u003d eatTokensUntilEOL();\n                  continue retry;\n              }\n            }\n          }\n          break;\n\n        case EOC:\n          if (hasParsedFileOverviewDocInfo()) {\n            fileOverviewJSDocInfo \u003d retrieveAndResetParsedJSDocInfo();\n          }\n          checkExtendedTypes(extendedTypes);\n          return true;\n\n        case EOF:\n          // discard any accumulated information\n          jsdocBuilder.build(null);\n          parser.addParserWarning(\"msg.unexpected.eof\",\n              stream.getLineno(), stream.getCharno());\n          checkExtendedTypes(extendedTypes);\n          return false;\n\n        case EOL:\n          if (state \u003d\u003d State.SEARCHING_NEWLINE) {\n            state \u003d State.SEARCHING_ANNOTATION;\n          }\n          token \u003d next();\n          continue retry;\n\n        default:\n          if (token \u003d\u003d JsDocToken.STAR \u0026\u0026 state \u003d\u003d State.SEARCHING_ANNOTATION) {\n            token \u003d next();\n            continue retry;\n          } else {\n            state \u003d State.SEARCHING_NEWLINE;\n            token \u003d eatTokensUntilEOL();\n            continue retry;\n          }\n      }\n\n      // next token\n      token \u003d next();\n    }\n  }",
    "begin_line": 182,
    "end_line": 991,
    "comment": "/** \n * Parses a  {@link JSDocInfo} object. This parsing method reads all tokensreturned by the  {@link JsDocTokenStream#getJsDocToken()} method until the{@link JsDocToken#EOC} is returned.\n * @return {@code true} if JSDoc information was correctly parsed,{@code false} otherwise\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorReporterParser.checkExtendedTypes#993",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.checkExtendedTypes(java.util.List\u003ccom.google.javascript.jscomp.parsing.JsDocInfoParser.ExtendedTypeInfo\u003e)",
    "snippet": "private void checkExtendedTypes(List\u003cExtendedTypeInfo\u003e extendedTypes) {\n    for (ExtendedTypeInfo typeInfo : extendedTypes) {\n      // If interface, record the multiple extended interfaces\n      if (jsdocBuilder.isInterfaceRecorded()) {\n        if (!jsdocBuilder.recordExtendedInterface(typeInfo.type)) {\n          parser.addParserWarning(\"msg.jsdoc.extends.duplicate\",\n              typeInfo.lineno, typeInfo.charno);\n        }\n      } else {\n        if (!jsdocBuilder.recordBaseType(typeInfo.type)) {\n          parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n              typeInfo.lineno, typeInfo.charno);\n        }\n      }\n    }\n  }",
    "begin_line": 993,
    "end_line": 1008,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorReporterParser.parseSuppressTag#1016",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseSuppressTag(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private JsDocToken parseSuppressTag(JsDocToken token) {\n    if (token \u003d\u003d JsDocToken.LC) {\n      Set\u003cString\u003e suppressions \u003d new HashSet\u003cString\u003e();\n      while (true) {\n        if (match(JsDocToken.STRING)) {\n          String name \u003d stream.getString();\n          if (!suppressionNames.contains(name)) {\n            parser.addParserWarning(\"msg.jsdoc.suppress.unknown\", name,\n                stream.getLineno(), stream.getCharno());\n          }\n\n          suppressions.add(stream.getString());\n          token \u003d next();\n        } else {\n          parser.addParserWarning(\"msg.jsdoc.suppress\",\n              stream.getLineno(), stream.getCharno());\n          return token;\n        }\n\n        if (match(JsDocToken.PIPE)) {\n          token \u003d next();\n        } else {\n          break;\n        }\n      }\n\n      if (!match(JsDocToken.RC)) {\n        parser.addParserWarning(\"msg.jsdoc.suppress\",\n            stream.getLineno(), stream.getCharno());\n      } else {\n        token \u003d next();\n        if (!jsdocBuilder.recordSuppressions(suppressions)) {\n          parser.addParserWarning(\"msg.jsdoc.suppress.duplicate\",\n              stream.getLineno(), stream.getCharno());\n        }\n      }\n    }\n    return token;\n  }",
    "begin_line": 1016,
    "end_line": 1054,
    "comment": "/** \n * Parse a  {@code @suppress} tag of the form{@code @suppress\u0026#123;warning1|warning2\u0026#125;}.\n * @param token The current token.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorReporterParser.parseModifiesTag#1062",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseModifiesTag(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private JsDocToken parseModifiesTag(JsDocToken token) {\n    if (token \u003d\u003d JsDocToken.LC) {\n      Set\u003cString\u003e modifies \u003d new HashSet\u003cString\u003e();\n      while (true) {\n        if (match(JsDocToken.STRING)) {\n          String name \u003d stream.getString();\n          if (!modifiesAnnotationKeywords.contains(name)\n              \u0026\u0026 !jsdocBuilder.hasParameter(name)) {\n              parser.addParserWarning(\"msg.jsdoc.modifies.unknown\", name,\n                  stream.getLineno(), stream.getCharno());\n          }\n\n          modifies.add(stream.getString());\n          token \u003d next();\n        } else {\n          parser.addParserWarning(\"msg.jsdoc.modifies\",\n              stream.getLineno(), stream.getCharno());\n          return token;\n        }\n\n        if (match(JsDocToken.PIPE)) {\n          token \u003d next();\n        } else {\n          break;\n        }\n      }\n\n      if (!match(JsDocToken.RC)) {\n        parser.addParserWarning(\"msg.jsdoc.modifies\",\n            stream.getLineno(), stream.getCharno());\n      } else {\n        token \u003d next();\n        if (!jsdocBuilder.recordModifies(modifies)) {\n          parser.addParserWarning(\"msg.jsdoc.modifies.duplicate\",\n              stream.getLineno(), stream.getCharno());\n        }\n      }\n    }\n    return token;\n  }",
    "begin_line": 1062,
    "end_line": 1101,
    "comment": "/** \n * Parse a  {@code @modifies} tag of the form{@code @modifies\u0026#123;this|arguments|param\u0026#125;}.\n * @param token The current token.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorReporterParser.parseAndRecordTypeNode#1110",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private Node parseAndRecordTypeNode(JsDocToken token) {\n    return parseAndRecordTypeNode(token, token \u003d\u003d JsDocToken.LC);\n  }",
    "begin_line": 1110,
    "end_line": 1112,
    "comment": "/** \n * Looks for a type expression at the current token and if found, returns it. Note that this method consumes input.\n * @param token The current token.\n * @return The type expression found or null if none.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorReporterParser.parseAndRecordTypeNode#1122",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken, boolean)",
    "snippet": "private Node parseAndRecordTypeNode(JsDocToken token, boolean matchingLC) {\n    return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno(),\n        matchingLC, false);\n  }",
    "begin_line": 1122,
    "end_line": 1125,
    "comment": "/** \n * Looks for a type expression at the current token and if found, returns it. Note that this method consumes input.\n * @param token The current token.\n * @param matchingLC Whether the type expression starts with a \"{\".\n * @return The type expression found or null if none.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorReporterParser.parseAndRecordTypeNameNode#1137",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseAndRecordTypeNameNode(com.google.javascript.jscomp.parsing.JsDocToken, int, int, boolean)",
    "snippet": "private Node parseAndRecordTypeNameNode(JsDocToken token, int lineno,\n                                          int startCharno, boolean matchingLC) {\n    return parseAndRecordTypeNode(token, lineno, startCharno, matchingLC, true);\n  }",
    "begin_line": 1137,
    "end_line": 1140,
    "comment": "/** \n * Looks for a type expression at the current token and if found, returns it. Note that this method consumes input.\n * @param token The current token.\n * @param lineno The line of the type expression.\n * @param startCharno The starting character position of the type expression.\n * @param matchingLC Whether the type expression starts with a \"{\".\n * @return The type expression found or null if none.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorReporterParser.parseAndRecordParamTypeNode#1155",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseAndRecordParamTypeNode(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private Node parseAndRecordParamTypeNode(JsDocToken token) {\n    Preconditions.checkArgument(token \u003d\u003d JsDocToken.LC);\n    int lineno \u003d stream.getLineno();\n    int startCharno \u003d stream.getCharno();\n\n    Node typeNode \u003d parseParamTypeExpressionAnnotation(token);\n    if (typeNode !\u003d null) {\n      int endLineno \u003d stream.getLineno();\n      int endCharno \u003d stream.getCharno();\n\n      jsdocBuilder.markTypeNode(typeNode, lineno, startCharno,\n          endLineno, endCharno, true);\n    }\n    return typeNode;\n  }",
    "begin_line": 1155,
    "end_line": 1169,
    "comment": "/** \n * Looks for a type expression at the current token and if found, returns it. Note that this method consumes input. Parameter type expressions are special for two reasons: \u003col\u003e \u003cli\u003eThey must begin with \u0027{\u0027, to distinguish type names from param names. \u003cli\u003eThey may end in \u0027\u003d\u0027, to denote optionality. \u003c/ol\u003e\n * @param token The current token.\n * @return The type expression found or null if none.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorReporterParser.parseAndRecordTypeNode#1184",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken, int, int, boolean, boolean)",
    "snippet": "private Node parseAndRecordTypeNode(JsDocToken token, int lineno,\n                                      int startCharno,\n                                      boolean matchingLC,\n                                      boolean onlyParseSimpleNames) {\n    Node typeNode \u003d null;\n\n    if (onlyParseSimpleNames) {\n      typeNode \u003d parseTypeNameAnnotation(token);\n    } else {\n      typeNode \u003d parseTypeExpressionAnnotation(token);\n    }\n\n    if (typeNode !\u003d null) {\n      int endLineno \u003d stream.getLineno();\n      int endCharno \u003d stream.getCharno();\n\n      jsdocBuilder.markTypeNode(\n          typeNode, lineno, startCharno, endLineno, endCharno, matchingLC);\n    }\n\n    return typeNode;\n  }",
    "begin_line": 1184,
    "end_line": 1205,
    "comment": "/** \n * Looks for a parameter type expression at the current token and if found, returns it. Note that this method consumes input.\n * @param token The current token.\n * @param lineno The line of the type expression.\n * @param startCharno The starting character position of the type expression.\n * @param matchingLC Whether the type expression starts with a \"{\".\n * @param onlyParseSimpleNames If true, only simple type names are parsed(via a call to parseTypeNameAnnotation instead of parseTypeExpressionAnnotation).\n * @return The type expression found or null if none.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorReporterParser.toString#1210",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.toString(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private String toString(JsDocToken token) {\n    switch (token) {\n      case ANNOTATION:\n        return \"@\" + stream.getString();\n\n      case BANG:\n        return \"!\";\n\n      case COMMA:\n        return \",\";\n\n      case COLON:\n        return \":\";\n\n      case GT:\n        return \"\u003e\";\n\n      case LB:\n        return \"[\";\n\n      case LC:\n        return \"{\";\n\n      case LP:\n        return \"(\";\n\n      case LT:\n        return \".\u003c\";\n\n      case QMARK:\n        return \"?\";\n\n      case PIPE:\n        return \"|\";\n\n      case RB:\n        return \"]\";\n\n      case RC:\n        return \"}\";\n\n      case RP:\n        return \")\";\n\n      case STAR:\n        return \"*\";\n\n      case ELLIPSIS:\n        return \"...\";\n\n      case EQUALS:\n        return \"\u003d\";\n\n      case STRING:\n        return stream.getString();\n\n      default:\n        throw new IllegalStateException(token.toString());\n    }\n  }",
    "begin_line": 1210,
    "end_line": 1269,
    "comment": "/** \n * Converts a JSDoc token to its string representation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorReporterParser.createJSTypeExpression#1275",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.createJSTypeExpression(com.google.javascript.rhino.Node)",
    "snippet": "private JSTypeExpression createJSTypeExpression(Node n) {\n    return n \u003d\u003d null ? null :\n        new JSTypeExpression(n, getSourceName());\n  }",
    "begin_line": 1275,
    "end_line": 1278,
    "comment": "/** \n * Constructs a new  {@code JSTypeExpression}.\n * @param n A node. May be null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtractionInfo.ExtractionInfo#1289",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(java.lang.String, com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "public ExtractionInfo(String string, JsDocToken token) {\n      this.string \u003d string;\n      this.token \u003d token;\n    }",
    "begin_line": 1289,
    "end_line": 1292,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.ExtendedTypeInfo#1303",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtendedTypeInfo(com.google.javascript.rhino.JSTypeExpression, int, int)",
    "snippet": "public ExtendedTypeInfo(JSTypeExpression type, int lineno, int charno) {\n      this.type \u003d type;\n      this.lineno \u003d lineno;\n      this.charno \u003d charno;\n    }",
    "begin_line": 1303,
    "end_line": 1307,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.extractSingleLineBlock#1317",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.extractSingleLineBlock()",
    "snippet": "private ExtractionInfo extractSingleLineBlock() {\n\n    // Get the current starting point.\n    stream.update();\n    int lineno \u003d stream.getLineno();\n    int charno \u003d stream.getCharno() + 1;\n\n    String line \u003d stream.getRemainingJSDocLine().trim();\n\n    // Record the textual description.\n    if (line.length() \u003e 0) {\n      jsdocBuilder.markText(line, lineno, charno, lineno,\n                            charno + line.length());\n    }\n\n    return new ExtractionInfo(line, next());\n  }",
    "begin_line": 1317,
    "end_line": 1333,
    "comment": "/** \n * Extracts the text found on the current line starting at token. Note that token \u003d token.info; should be called after this method is used to update the token properly in the parser.\n * @return The extraction information.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.extractMultilineTextualBlock#1335",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.extractMultilineTextualBlock(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token) {\n    return extractMultilineTextualBlock(token, WhitespaceOption.SINGLE_LINE);\n  }",
    "begin_line": 1335,
    "end_line": 1337,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.extractMultilineTextualBlock#1367",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.extractMultilineTextualBlock(com.google.javascript.jscomp.parsing.JsDocToken, com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption)",
    "snippet": "@SuppressWarnings(\"fallthrough\")\n  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n\n    if (token \u003d\u003d JsDocToken.EOC || token \u003d\u003d JsDocToken.EOL ||\n        token \u003d\u003d JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno \u003d stream.getLineno();\n    int startCharno \u003d stream.getCharno() + 1;\n\n    // Read the content from the first line.\n    String line \u003d stream.getRemainingJSDocLine();\n    if (option !\u003d WhitespaceOption.PRESERVE) {\n      line \u003d line.trim();\n    }\n\n    StringBuilder builder \u003d new StringBuilder();\n    builder.append(line);\n\n    state \u003d State.SEARCHING_ANNOTATION;\n    token \u003d next();\n\n    boolean ignoreStar \u003d false;\n\n    // Track the start of the line to count whitespace that\n    // the tokenizer skipped. Because this case is rare, it\u0027s easier\n    // to do this here than in the tokenizer.\n    int lineStartChar \u003d -1;\n\n    do {\n      switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            // Mark the position after the star as the new start of the line.\n            lineStartChar \u003d stream.getCharno() + 1;\n          } else {\n            // The star is part of the comment.\n            if (builder.length() \u003e 0) {\n              builder.append(\u0027 \u0027);\n            }\n\n            builder.append(\u0027*\u0027);\n          }\n\n          token \u003d next();\n          continue;\n\n        case EOL:\n          if (option !\u003d WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n\n          ignoreStar \u003d true;\n          lineStartChar \u003d 0;\n          token \u003d next();\n          continue;\n\n        default:\n          ignoreStar \u003d false;\n          state \u003d State.SEARCHING_ANNOTATION;\n\n          boolean isEOC \u003d token \u003d\u003d JsDocToken.EOC;\n          if (!isEOC) {\n            if (lineStartChar !\u003d -1 \u0026\u0026 option \u003d\u003d WhitespaceOption.PRESERVE) {\n              int numSpaces \u003d stream.getCharno() - lineStartChar;\n              for (int i \u003d 0; i \u003c numSpaces; i++) {\n                builder.append(\u0027 \u0027);\n              }\n              lineStartChar \u003d -1;\n            } else if (builder.length() \u003e 0) {\n              // All tokens must be separated by a space.\n              builder.append(\u0027 \u0027);\n            }\n          }\n\n          if (token \u003d\u003d JsDocToken.EOC ||\n              token \u003d\u003d JsDocToken.EOF ||\n              // When we\u0027re capturing a license block, annotations\n              // in the block are OK.\n              (token \u003d\u003d JsDocToken.ANNOTATION \u0026\u0026\n               option !\u003d WhitespaceOption.PRESERVE)) {\n            String multilineText \u003d builder.toString();\n\n            if (option !\u003d WhitespaceOption.PRESERVE) {\n              multilineText \u003d multilineText.trim();\n            }\n\n            int endLineno \u003d stream.getLineno();\n            int endCharno \u003d stream.getCharno();\n\n            if (multilineText.length() \u003e 0) {\n              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);\n            }\n\n            return new ExtractionInfo(multilineText, token);\n          }\n\n          builder.append(toString(token));\n\n          line \u003d stream.getRemainingJSDocLine();\n\n          if (option !\u003d WhitespaceOption.PRESERVE) {\n            line \u003d trimEnd(line);\n          }\n\n          builder.append(line);\n          token \u003d next();\n      }\n    } while (true);\n  }",
    "begin_line": 1367,
    "end_line": 1479,
    "comment": "/** \n * Extracts the text found on the current line and all subsequent until either an annotation, end of comment or end of file is reached. Note that if this method detects an end of line as the first token, it will quit immediately (indicating that there is no text where it was expected).  Note that token \u003d info.token; should be called after this method is used to update the token properly in the parser.\n * @param token The start token.\n * @param option How to handle whitespace.\n * @return The extraction information.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.extractBlockComment#1493",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.extractBlockComment(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private ExtractionInfo extractBlockComment(JsDocToken token) {\n    StringBuilder builder \u003d new StringBuilder();\n\n    boolean ignoreStar \u003d true;\n\n    do {\n      switch (token) {\n        case ANNOTATION:\n        case EOC:\n        case EOF:\n          return new ExtractionInfo(builder.toString().trim(), token);\n\n        case STAR:\n          if (!ignoreStar) {\n            if (builder.length() \u003e 0) {\n              builder.append(\u0027 \u0027);\n            }\n\n            builder.append(\u0027*\u0027);\n          }\n\n          token \u003d next();\n          continue;\n\n        case EOL:\n          ignoreStar \u003d true;\n          builder.append(\u0027\\n\u0027);\n          token \u003d next();\n          continue;\n\n        default:\n          if (!ignoreStar \u0026\u0026 builder.length() \u003e 0) {\n            builder.append(\u0027 \u0027);\n          }\n\n          ignoreStar \u003d false;\n\n          builder.append(toString(token));\n\n          String line \u003d stream.getRemainingJSDocLine();\n          line \u003d trimEnd(line);\n          builder.append(line);\n          token \u003d next();\n      }\n    } while (true);\n  }",
    "begin_line": 1493,
    "end_line": 1538,
    "comment": "/** \n * Extracts the top-level block comment from the JsDoc comment, if any. This method differs from the extractMultilineTextualBlock in that it terminates under different conditions (it doesn\u0027t have the same prechecks), it does not first read in the remaining of the current line and its conditions for ignoring the \"*\" (STAR) are different.\n * @param token The starting token.\n * @return The extraction information.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.trimEnd#1550",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.trimEnd(java.lang.String)",
    "snippet": "private static String trimEnd(String s) {\n    int trimCount \u003d 0;\n    while (trimCount \u003c s.length()) {\n      char ch \u003d s.charAt(s.length() - trimCount - 1);\n      if (Character.isWhitespace(ch)) {\n        trimCount++;\n      } else {\n        break;\n      }\n    }\n\n    if (trimCount \u003d\u003d 0) {\n      return s;\n    }\n    return s.substring(0, s.length() - trimCount);\n  }",
    "begin_line": 1550,
    "end_line": 1565,
    "comment": "/** \n * Trim characters from only the end of a string. This method will remove all whitespace characters (defined by Character.isWhitespace(char), in addition to the characters provided, from the end of the provided string.\n * @param s String to be trimmed\n * @return String with whitespace and characters in extraChars removedfrom the end.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.parseTypeExpressionAnnotation#1580",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeExpressionAnnotation(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private Node parseTypeExpressionAnnotation(JsDocToken token) {\n    if (token \u003d\u003d JsDocToken.LC) {\n      skipEOLs();\n      Node typeNode \u003d parseTopLevelTypeExpression(next());\n      if (typeNode !\u003d null) {\n        skipEOLs();\n        if (!match(JsDocToken.RC)) {\n          reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");\n        } else {\n          next();\n        }\n      }\n\n      return typeNode;\n    } else {\n      return parseTypeExpression(token);\n    }\n  }",
    "begin_line": 1580,
    "end_line": 1597,
    "comment": "/** \n * TypeExpressionAnnotation :\u003d TypeExpression | \u0027{\u0027 TopLevelTypeExpression \u0027}\u0027\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.parseParamTypeExpressionAnnotation#1608",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseParamTypeExpressionAnnotation(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private Node parseParamTypeExpressionAnnotation(JsDocToken token) {\n    Preconditions.checkArgument(token \u003d\u003d JsDocToken.LC);\n\n    skipEOLs();\n\n    boolean restArg \u003d false;\n    token \u003d next();\n    if (token \u003d\u003d JsDocToken.ELLIPSIS) {\n      token \u003d next();\n      if (token \u003d\u003d JsDocToken.RC) {\n        // EMPTY represents the UNKNOWN type in the Type AST.\n        return wrapNode(Token.ELLIPSIS, IR.empty());\n      }\n      restArg \u003d true;\n    }\n\n    Node typeNode \u003d parseTopLevelTypeExpression(token);\n    if (typeNode !\u003d null) {\n      skipEOLs();\n      if (restArg) {\n        typeNode \u003d wrapNode(Token.ELLIPSIS, typeNode);\n      } else if (match(JsDocToken.EQUALS)) {\n        next();\n        skipEOLs();\n        typeNode \u003d wrapNode(Token.EQUALS, typeNode);\n      }\n\n      if (!match(JsDocToken.RC)) {\n        reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");\n      } else {\n        next();\n      }\n    }\n\n    return typeNode;\n  }",
    "begin_line": 1608,
    "end_line": 1643,
    "comment": "/** \n * ParamTypeExpressionAnnotation :\u003d \u0027{\u0027 OptionalParameterType \u0027}\u0027 | \u0027{\u0027 TopLevelTypeExpression \u0027}\u0027 | \u0027{\u0027 \u0027...\u0027 TopLevelTypeExpression \u0027}\u0027 OptionalParameterType :\u003d TopLevelTypeExpression \u0027\u003d\u0027\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.parseTypeNameAnnotation#1648",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeNameAnnotation(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private Node parseTypeNameAnnotation(JsDocToken token) {\n    if (token \u003d\u003d JsDocToken.LC) {\n      skipEOLs();\n      Node typeNode \u003d parseTypeName(next());\n      if (typeNode !\u003d null) {\n        skipEOLs();\n        if (!match(JsDocToken.RC)) {\n          reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");\n        } else {\n          next();\n        }\n      }\n\n      return typeNode;\n    } else {\n      return parseTypeName(token);\n    }\n  }",
    "begin_line": 1648,
    "end_line": 1665,
    "comment": "/** \n * TypeNameAnnotation :\u003d TypeName | \u0027{\u0027 TypeName \u0027}\u0027\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.parseTopLevelTypeExpression#1673",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTopLevelTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private Node parseTopLevelTypeExpression(JsDocToken token) {\n    Node typeExpr \u003d parseTypeExpression(token);\n    if (typeExpr !\u003d null) {\n      // top-level unions are allowed\n      if (match(JsDocToken.PIPE)) {\n        next();\n        if (match(JsDocToken.PIPE)) {\n          // We support double pipes for backwards-compatibility.\n          next();\n        }\n        skipEOLs();\n        token \u003d next();\n        return parseUnionTypeWithAlternate(token, typeExpr);\n      }\n    }\n    return typeExpr;\n  }",
    "begin_line": 1673,
    "end_line": 1689,
    "comment": "/** \n * TopLevelTypeExpression :\u003d TypeExpression | TypeUnionList We made this rule up, for the sake of backwards compatibility.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.parseTypeExpressionList#1695",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeExpressionList(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private Node parseTypeExpressionList(JsDocToken token) {\n    Node typeExpr \u003d parseTopLevelTypeExpression(token);\n    if (typeExpr \u003d\u003d null) {\n      return null;\n    }\n    Node typeList \u003d IR.block();\n    typeList.addChildToBack(typeExpr);\n    while (match(JsDocToken.COMMA)) {\n      next();\n      skipEOLs();\n      typeExpr \u003d parseTopLevelTypeExpression(next());\n      if (typeExpr \u003d\u003d null) {\n        return null;\n      }\n      typeList.addChildToBack(typeExpr);\n    }\n    return typeList;\n  }",
    "begin_line": 1695,
    "end_line": 1712,
    "comment": "/** \n * TypeExpressionList :\u003d TopLevelTypeExpression | TopLevelTypeExpression \u0027,\u0027 TypeExpressionList\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.parseTypeExpression#1722",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private Node parseTypeExpression(JsDocToken token) {\n    if (token \u003d\u003d JsDocToken.QMARK) {\n      // A QMARK could mean that a type is nullable, or that it\u0027s unknown.\n      // We use look-ahead 1 to determine whether it\u0027s unknown. Otherwise,\n      // we assume it means nullable. There are 5 cases:\n      // {?} - right curly\n      // {?\u003d} - equals\n      // {function(?, number)} - comma\n      // {function(number, ?)} - right paren\n      // {function(number, ...[?])} - right bracket\n      // {function(): ?|number} - pipe\n      // {Array.\u003c?\u003e} - greater than\n      // I\u0027m not a big fan of using look-ahead for this, but it makes\n      // the type language a lot nicer.\n      token \u003d next();\n      if (token \u003d\u003d JsDocToken.COMMA ||\n          token \u003d\u003d JsDocToken.EQUALS ||\n          token \u003d\u003d JsDocToken.RB ||\n          token \u003d\u003d JsDocToken.RC ||\n          token \u003d\u003d JsDocToken.RP ||\n          token \u003d\u003d JsDocToken.PIPE ||\n          token \u003d\u003d JsDocToken.GT) {\n        restoreLookAhead(token);\n        return newNode(Token.QMARK);\n      }\n\n      return wrapNode(Token.QMARK, parseBasicTypeExpression(token));\n    } else if (token \u003d\u003d JsDocToken.BANG) {\n      return wrapNode(Token.BANG, parseBasicTypeExpression(next()));\n    } else {\n      Node basicTypeExpr \u003d parseBasicTypeExpression(token);\n      if (basicTypeExpr !\u003d null) {\n        if (match(JsDocToken.QMARK)) {\n          next();\n          return wrapNode(Token.QMARK, basicTypeExpr);\n        } else if (match(JsDocToken.BANG)) {\n          next();\n          return wrapNode(Token.BANG, basicTypeExpr);\n        }\n      }\n\n      return basicTypeExpr;\n    }\n  }",
    "begin_line": 1722,
    "end_line": 1765,
    "comment": "/** \n * TypeExpression :\u003d BasicTypeExpression | \u0027?\u0027 BasicTypeExpression | \u0027!\u0027 BasicTypeExpression | BasicTypeExpression \u0027?\u0027 | BasicTypeExpression \u0027!\u0027 | \u0027?\u0027\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.parseBasicTypeExpression#1771",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseBasicTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private Node parseBasicTypeExpression(JsDocToken token) {\n    if (token \u003d\u003d JsDocToken.STAR) {\n      return newNode(Token.STAR);\n    } else if (token \u003d\u003d JsDocToken.LB) {\n      skipEOLs();\n      return parseArrayType(next());\n    } else if (token \u003d\u003d JsDocToken.LC) {\n      skipEOLs();\n      return parseRecordType(next());\n    } else if (token \u003d\u003d JsDocToken.LP) {\n      skipEOLs();\n      return parseUnionType(next());\n    } else if (token \u003d\u003d JsDocToken.STRING) {\n      String string \u003d stream.getString();\n      if (\"function\".equals(string)) {\n        skipEOLs();\n        return parseFunctionType(next());\n      } else if (\"null\".equals(string) || \"undefined\".equals(string)) {\n        return newStringNode(string);\n      } else {\n        return parseTypeName(token);\n      }\n    }\n\n    restoreLookAhead(token);\n    return reportGenericTypeSyntaxWarning();\n  }",
    "begin_line": 1771,
    "end_line": 1797,
    "comment": "/** \n * BasicTypeExpression :\u003d \u0027*\u0027 | \u0027null\u0027 | \u0027undefined\u0027 | TypeName | FunctionType | UnionType | RecordType | ArrayType\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.parseTypeName#1803",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeName(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private Node parseTypeName(JsDocToken token) {\n    if (token !\u003d JsDocToken.STRING) {\n      return reportGenericTypeSyntaxWarning();\n    }\n\n    String typeName \u003d stream.getString();\n    int lineno \u003d stream.getLineno();\n    int charno \u003d stream.getCharno();\n    while (match(JsDocToken.EOL) \u0026\u0026\n        typeName.charAt(typeName.length() - 1) \u003d\u003d \u0027.\u0027) {\n      skipEOLs();\n      if (match(JsDocToken.STRING)) {\n        next();\n        typeName +\u003d stream.getString();\n      }\n    }\n\n    Node typeNameNode \u003d newStringNode(typeName, lineno, charno);\n\n    if (match(JsDocToken.LT)) {\n      next();\n      skipEOLs();\n      Node memberType \u003d parseTypeExpressionList(next());\n      if (memberType !\u003d null) {\n        typeNameNode.addChildToFront(memberType);\n\n        skipEOLs();\n        if (!match(JsDocToken.GT)) {\n          return reportTypeSyntaxWarning(\"msg.jsdoc.missing.gt\");\n        }\n\n        next();\n      }\n    }\n    return typeNameNode;\n  }",
    "begin_line": 1803,
    "end_line": 1838,
    "comment": "/** \n * TypeName :\u003d NameExpression | NameExpression TypeApplication TypeApplication :\u003d \u0027.\u003c\u0027 TypeExpressionList \u0027\u003e\u0027\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.parseFunctionType#1845",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseFunctionType(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private Node parseFunctionType(JsDocToken token) {\n    // NOTE(nicksantos): We\u0027re not implementing generics at the moment, so\n    // just throw out TypeParameters.\n    if (token !\u003d JsDocToken.LP) {\n      restoreLookAhead(token);\n      return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lp\");\n    }\n\n    Node functionType \u003d newNode(Token.FUNCTION);\n    Node parameters \u003d null;\n    skipEOLs();\n    if (!match(JsDocToken.RP)) {\n      token \u003d next();\n\n      boolean hasParams \u003d true;\n      if (token \u003d\u003d JsDocToken.STRING) {\n        String tokenStr \u003d stream.getString();\n        boolean isThis \u003d \"this\".equals(tokenStr);\n        boolean isNew \u003d \"new\".equals(tokenStr);\n        if (isThis || isNew) {\n          if (match(JsDocToken.COLON)) {\n            next();\n            skipEOLs();\n            Node contextType \u003d wrapNode(\n                isThis ? Token.THIS : Token.NEW,\n                parseTypeName(next()));\n            if (contextType \u003d\u003d null) {\n              return null;\n            }\n\n            functionType.addChildToFront(contextType);\n          } else {\n            return reportTypeSyntaxWarning(\"msg.jsdoc.missing.colon\");\n          }\n\n          if (match(JsDocToken.COMMA)) {\n            next();\n            skipEOLs();\n            token \u003d next();\n          } else {\n            hasParams \u003d false;\n          }\n        }\n      }\n\n      if (hasParams) {\n        parameters \u003d parseParametersType(token);\n        if (parameters \u003d\u003d null) {\n          return null;\n        }\n      }\n    }\n\n    if (parameters !\u003d null) {\n      functionType.addChildToBack(parameters);\n    }\n\n    skipEOLs();\n    if (!match(JsDocToken.RP)) {\n      return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rp\");\n    }\n\n    skipEOLs();\n    Node resultType \u003d parseResultType(next());\n    if (resultType \u003d\u003d null) {\n      return null;\n    } else {\n      functionType.addChildToBack(resultType);\n    }\n    return functionType;\n  }",
    "begin_line": 1845,
    "end_line": 1915,
    "comment": "/** \n * FunctionType :\u003d \u0027function\u0027 FunctionSignatureType FunctionSignatureType :\u003d TypeParameters \u0027(\u0027 \u0027this\u0027 \u0027:\u0027 TypeName, ParametersType \u0027)\u0027 ResultType\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.parseParametersType#1939",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseParametersType(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": " parseParametersType(JsDocToken token) {\n    Node paramsType \u003d newNode(Token.PARAM_LIST);\n    boolean isVarArgs \u003d false;\n    Node paramType \u003d null;\n    if (token !\u003d JsDocToken.RP) {\n      do {\n        if (paramType !\u003d null) {\n          // skip past the comma\n          next();\n          skipEOLs();\n          token \u003d next();\n        }\n\n        if (token \u003d\u003d JsDocToken.ELLIPSIS) {\n          // In the latest ES4 proposal, there are no type constraints allowed\n          // on variable arguments. We support the old syntax for backwards\n          // compatibility, but we should gradually tear it out.\n          skipEOLs();\n          if (match(JsDocToken.RP)) {\n            paramType \u003d newNode(Token.ELLIPSIS);\n          } else {\n            skipEOLs();\n            if (!match(JsDocToken.LB)) {\n              return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lb\");\n            }\n\n            next();\n            skipEOLs();\n            paramType \u003d wrapNode(Token.ELLIPSIS, parseTypeExpression(next()));\n            skipEOLs();\n            if (!match(JsDocToken.RB)) {\n              return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");\n            }\n            skipEOLs();\n            next();\n          }\n\n          isVarArgs \u003d true;\n        } else {\n          paramType \u003d parseTypeExpression(token);\n          if (match(JsDocToken.EQUALS)) {\n            skipEOLs();\n            next();\n            paramType \u003d wrapNode(Token.EQUALS, paramType);\n          }\n        }\n\n        if (paramType \u003d\u003d null) {\n          return null;\n        }\n        paramsType.addChildToBack(paramType);\n        if (isVarArgs) {\n          break;\n        }\n      } while (match(JsDocToken.COMMA));\n    }\n\n    if (isVarArgs \u0026\u0026 match(JsDocToken.COMMA)) {\n      return reportTypeSyntaxWarning(\"msg.jsdoc.function.varargs\");\n    }\n\n    // The right paren will be checked by parseFunctionType\n\n    return paramsType;\n  }",
    "begin_line": 1939,
    "end_line": 2003,
    "comment": "/** \n * ParametersType :\u003d RestParameterType | NonRestParametersType | NonRestParametersType \u0027,\u0027 RestParameterType RestParameterType :\u003d \u0027...\u0027 Identifier NonRestParametersType :\u003d ParameterType \u0027,\u0027 NonRestParametersType | ParameterType | OptionalParametersType OptionalParametersType :\u003d OptionalParameterType | OptionalParameterType, OptionalParametersType OptionalParameterType :\u003d ParameterType\u003d ParameterType :\u003d TypeExpression | Identifier \u0027:\u0027 TypeExpression\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.parseResultType#2008",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseResultType(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private Node parseResultType(JsDocToken token) {\n    skipEOLs();\n    if (!match(JsDocToken.COLON)) {\n      return newNode(Token.EMPTY);\n    }\n\n    token \u003d next();\n    skipEOLs();\n    if (match(JsDocToken.STRING) \u0026\u0026 \"void\".equals(stream.getString())) {\n      next();\n      return newNode(Token.VOID);\n    } else {\n      return parseTypeExpression(next());\n    }\n  }",
    "begin_line": 2008,
    "end_line": 2022,
    "comment": "/** \n * ResultType :\u003d \u003cempty\u003e | \u0027:\u0027 void | \u0027:\u0027 TypeExpression\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.parseUnionType#2030",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseUnionType(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private Node parseUnionType(JsDocToken token) {\n    return parseUnionTypeWithAlternate(token, null);\n  }",
    "begin_line": 2030,
    "end_line": 2032,
    "comment": "/** \n * UnionType :\u003d \u0027(\u0027 TypeUnionList \u0027)\u0027 TypeUnionList :\u003d TypeExpression | TypeExpression \u0027|\u0027 TypeUnionList We\u0027ve removed the empty union type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.parseUnionTypeWithAlternate#2038",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseUnionTypeWithAlternate(com.google.javascript.jscomp.parsing.JsDocToken, com.google.javascript.rhino.Node)",
    "snippet": "private Node parseUnionTypeWithAlternate(JsDocToken token, Node alternate) {\n    Node union \u003d newNode(Token.PIPE);\n    if (alternate !\u003d null) {\n      union.addChildToBack(alternate);\n    }\n\n    Node expr \u003d null;\n    do {\n      if (expr !\u003d null) {\n        skipEOLs();\n        token \u003d next();\n        Preconditions.checkState(\n            token \u003d\u003d JsDocToken.PIPE || token \u003d\u003d JsDocToken.COMMA);\n\n        boolean isPipe \u003d token \u003d\u003d JsDocToken.PIPE;\n        if (isPipe \u0026\u0026 match(JsDocToken.PIPE)) {\n          // We support double pipes for backwards compatibility.\n          next();\n        }\n        skipEOLs();\n        token \u003d next();\n      }\n      expr \u003d parseTypeExpression(token);\n      if (expr \u003d\u003d null) {\n        return null;\n      }\n\n      union.addChildToBack(expr);\n      // We support commas for backwards compatibility.\n    } while (match(JsDocToken.PIPE, JsDocToken.COMMA));\n\n    if (alternate \u003d\u003d null) {\n      skipEOLs();\n      if (!match(JsDocToken.RP)) {\n        return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rp\");\n      }\n      next();\n    }\n    return union;\n  }",
    "begin_line": 2038,
    "end_line": 2077,
    "comment": "/** \n * Create a new union type, with an alternate that has already been parsed. The alternate may be null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.parseArrayType#2084",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseArrayType(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private Node parseArrayType(JsDocToken token) {\n    Node array \u003d newNode(Token.LB);\n    Node arg \u003d null;\n    boolean hasVarArgs \u003d false;\n\n    do {\n      if (arg !\u003d null) {\n        next();\n        skipEOLs();\n        token \u003d next();\n      }\n      if (token \u003d\u003d JsDocToken.ELLIPSIS) {\n        arg \u003d wrapNode(Token.ELLIPSIS, parseTypeExpression(next()));\n        hasVarArgs \u003d true;\n      } else {\n        arg \u003d parseTypeExpression(token);\n      }\n\n      if (arg \u003d\u003d null) {\n        return null;\n      }\n\n      array.addChildToBack(arg);\n      if (hasVarArgs) {\n        break;\n      }\n      skipEOLs();\n    } while (match(JsDocToken.COMMA));\n\n    if (!match(JsDocToken.RB)) {\n      return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");\n    }\n    next();\n    return array;\n  }",
    "begin_line": 2084,
    "end_line": 2118,
    "comment": "/** \n * ArrayType :\u003d \u0027[\u0027 ElementTypeList \u0027]\u0027 ElementTypeList :\u003d \u003cempty\u003e | TypeExpression | \u0027...\u0027 TypeExpression | TypeExpression \u0027,\u0027 ElementTypeList\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.parseRecordType#2123",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseRecordType(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private Node parseRecordType(JsDocToken token) {\n    Node recordType \u003d newNode(Token.LC);\n    Node fieldTypeList \u003d parseFieldTypeList(token);\n\n    if (fieldTypeList \u003d\u003d null) {\n      return reportGenericTypeSyntaxWarning();\n    }\n\n    skipEOLs();\n    if (!match(JsDocToken.RC)) {\n      return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");\n    }\n\n    next();\n\n    recordType.addChildToBack(fieldTypeList);\n    return recordType;\n  }",
    "begin_line": 2123,
    "end_line": 2140,
    "comment": "/** \n * RecordType :\u003d \u0027{\u0027 FieldTypeList \u0027}\u0027\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.parseFieldTypeList#2145",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseFieldTypeList(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private Node parseFieldTypeList(JsDocToken token) {\n    Node fieldTypeList \u003d newNode(Token.LB);\n\n    do {\n      Node fieldType \u003d parseFieldType(token);\n\n      if (fieldType \u003d\u003d null) {\n        return null;\n      }\n\n      fieldTypeList.addChildToBack(fieldType);\n\n      skipEOLs();\n      if (!match(JsDocToken.COMMA)) {\n        break;\n      }\n\n      // Move to the comma token.\n      next();\n\n      // Move to the token passed the comma.\n      skipEOLs();\n      token \u003d next();\n    } while (true);\n\n    return fieldTypeList;\n  }",
    "begin_line": 2145,
    "end_line": 2171,
    "comment": "/** \n * FieldTypeList :\u003d FieldType | FieldType \u0027,\u0027 FieldTypeList\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.parseFieldType#2176",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseFieldType(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private Node parseFieldType(JsDocToken token) {\n    Node fieldName \u003d parseFieldName(token);\n\n    if (fieldName \u003d\u003d null) {\n      return null;\n    }\n\n    skipEOLs();\n    if (!match(JsDocToken.COLON)) {\n      return fieldName;\n    }\n\n    // Move to the colon.\n    next();\n\n    // Move to the token after the colon and parse\n    // the type expression.\n    skipEOLs();\n    Node typeExpression \u003d parseTypeExpression(next());\n\n    if (typeExpression \u003d\u003d null) {\n      return null;\n    }\n\n    Node fieldType \u003d newNode(Token.COLON);\n    fieldType.addChildToBack(fieldName);\n    fieldType.addChildToBack(typeExpression);\n    return fieldType;\n  }",
    "begin_line": 2176,
    "end_line": 2204,
    "comment": "/** \n * FieldType :\u003d FieldName | FieldName \u0027:\u0027 TypeExpression\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.parseFieldName#2210",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseFieldName(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private Node parseFieldName(JsDocToken token) {\n    switch (token) {\n      case STRING:\n        String string \u003d stream.getString();\n        return newStringNode(string);\n\n      default:\n        return null;\n    }\n  }",
    "begin_line": 2210,
    "end_line": 2219,
    "comment": "/** \n * FieldName :\u003d NameExpression | StringLiteral | NumberLiteral | ReservedIdentifier\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.wrapNode#2221",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.wrapNode(int, com.google.javascript.rhino.Node)",
    "snippet": "private Node wrapNode(int type, Node n) {\n    return n \u003d\u003d null ? null :\n        new Node(type, n, stream.getLineno(),\n            stream.getCharno()).clonePropsFrom(templateNode);\n  }",
    "begin_line": 2221,
    "end_line": 2225,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.newNode#2227",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.newNode(int)",
    "snippet": "private Node newNode(int type) {\n    return new Node(type, stream.getLineno(),\n        stream.getCharno()).clonePropsFrom(templateNode);\n  }",
    "begin_line": 2227,
    "end_line": 2230,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.newStringNode#2232",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.newStringNode(java.lang.String)",
    "snippet": "private Node newStringNode(String s) {\n    return newStringNode(s, stream.getLineno(), stream.getCharno());\n  }",
    "begin_line": 2232,
    "end_line": 2234,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.newStringNode#2236",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.newStringNode(java.lang.String, int, int)",
    "snippet": "private Node newStringNode(String s, int lineno, int charno) {\n    Node n \u003d Node.newString(s, lineno, charno).clonePropsFrom(templateNode);\n    n.setLength(s.length());\n    return n;\n  }",
    "begin_line": 2236,
    "end_line": 2240,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.createTemplateNode#2244",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.createTemplateNode()",
    "snippet": "private Node createTemplateNode() {\n    // The Node type choice is arbitrary.\n    Node templateNode \u003d IR.script();\n    templateNode.setStaticSourceFile(\n      this.associatedNode !\u003d null ?\n      this.associatedNode.getStaticSourceFile() :\n      null);\n    return templateNode;\n  }",
    "begin_line": 2244,
    "end_line": 2252,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.reportTypeSyntaxWarning#2254",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.reportTypeSyntaxWarning(java.lang.String)",
    "snippet": "private Node reportTypeSyntaxWarning(String warning) {\n    parser.addTypeWarning(warning, stream.getLineno(), stream.getCharno());\n    return null;\n  }",
    "begin_line": 2254,
    "end_line": 2257,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.reportGenericTypeSyntaxWarning#2259",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.reportGenericTypeSyntaxWarning()",
    "snippet": "private Node reportGenericTypeSyntaxWarning() {\n    return reportTypeSyntaxWarning(\"msg.jsdoc.type.syntax\");\n  }",
    "begin_line": 2259,
    "end_line": 2261,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.eatTokensUntilEOL#2267",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.eatTokensUntilEOL()",
    "snippet": "private JsDocToken eatTokensUntilEOL() {\n    return eatTokensUntilEOL(next());\n  }",
    "begin_line": 2267,
    "end_line": 2269,
    "comment": "/** \n * Eats tokens until  {@link JsDocToken#EOL} included, and switches back thestate to  {@link State#SEARCHING_ANNOTATION}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.eatTokensUntilEOL#2275",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.eatTokensUntilEOL(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private JsDocToken eatTokensUntilEOL(JsDocToken token) {\n    do {\n      if (token \u003d\u003d JsDocToken.EOL || token \u003d\u003d JsDocToken.EOC ||\n          token \u003d\u003d JsDocToken.EOF) {\n        state \u003d State.SEARCHING_ANNOTATION;\n        return token;\n      }\n      token \u003d next();\n    } while (true);\n  }",
    "begin_line": 2275,
    "end_line": 2284,
    "comment": "/** \n * Eats tokens until  {@link JsDocToken#EOL} included, and switches back thestate to  {@link State#SEARCHING_ANNOTATION}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.restoreLookAhead#2297",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.restoreLookAhead(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private void restoreLookAhead(JsDocToken token) {\n    unreadToken \u003d token;\n  }",
    "begin_line": 2297,
    "end_line": 2299,
    "comment": "/** \n * Restores the lookahead token to the token stream \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.match#2305",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.match(com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private boolean match(JsDocToken token) {\n    unreadToken \u003d next();\n    return unreadToken \u003d\u003d token;\n  }",
    "begin_line": 2305,
    "end_line": 2308,
    "comment": "/** \n * Tests whether the next symbol of the token stream matches the specific token.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.match#2314",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.match(com.google.javascript.jscomp.parsing.JsDocToken, com.google.javascript.jscomp.parsing.JsDocToken)",
    "snippet": "private boolean match(JsDocToken token1, JsDocToken token2) {\n    unreadToken \u003d next();\n    return unreadToken \u003d\u003d token1 || unreadToken \u003d\u003d token2;\n  }",
    "begin_line": 2314,
    "end_line": 2317,
    "comment": "/** \n * Tests that the next symbol of the token stream matches one of the specified tokens.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.next#2323",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.next()",
    "snippet": "private JsDocToken next() {\n    if (unreadToken \u003d\u003d NO_UNREAD_TOKEN) {\n      return stream.getJsDocToken();\n    } else {\n      return current();\n    }\n  }",
    "begin_line": 2323,
    "end_line": 2329,
    "comment": "/** \n * Gets the next token of the token stream or the buffered token if a matching was previously made.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.current#2334",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.current()",
    "snippet": "private JsDocToken current() {\n    JsDocToken t \u003d unreadToken;\n    unreadToken \u003d NO_UNREAD_TOKEN;\n    return t;\n  }",
    "begin_line": 2334,
    "end_line": 2338,
    "comment": "/** \n * Gets the current token, invalidating it in the process.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.skipEOLs#2344",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.skipEOLs()",
    "snippet": "private void skipEOLs() {\n    while (match(JsDocToken.EOL)) {\n      next();\n      if (match(JsDocToken.STAR)) {\n        next();\n      }\n    }\n  }",
    "begin_line": 2344,
    "end_line": 2351,
    "comment": "/** \n * Skips all EOLs and all empty lines in the JSDoc. Call this method if you want the JSDoc entry to span multiple lines.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.hasParsedFileOverviewDocInfo#2357",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.hasParsedFileOverviewDocInfo()",
    "snippet": "private boolean hasParsedFileOverviewDocInfo() {\n    return jsdocBuilder.isPopulatedWithFileOverview();\n  }",
    "begin_line": 2357,
    "end_line": 2359,
    "comment": "/** \n * Determines whether the parser has been populated with docinfo with a fileoverview tag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.hasParsedJSDocInfo#2361",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.hasParsedJSDocInfo()",
    "snippet": "boolean hasParsedJSDocInfo() {\n    return jsdocBuilder.isPopulated();\n  }",
    "begin_line": 2361,
    "end_line": 2363,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.retrieveAndResetParsedJSDocInfo#2365",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.retrieveAndResetParsedJSDocInfo()",
    "snippet": "JSDocInfo retrieveAndResetParsedJSDocInfo() {\n    return jsdocBuilder.build(associatedNode);\n  }",
    "begin_line": 2365,
    "end_line": 2367,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.getFileOverviewJSDocInfo#2372",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.getFileOverviewJSDocInfo()",
    "snippet": "JSDocInfo getFileOverviewJSDocInfo() {\n    return fileOverviewJSDocInfo;\n  }",
    "begin_line": 2372,
    "end_line": 2374,
    "comment": "/** \n * Gets the fileoverview JSDocInfo, if any.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ExtendedTypeInfo.lookAheadForTypeAnnotation#2384",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.lookAheadForTypeAnnotation()",
    "snippet": "private boolean lookAheadForTypeAnnotation() {\n    boolean matchedLc \u003d false;\n    int c;\n    while (true) {\n      c \u003d stream.getChar();\n      if (c \u003d\u003d \u0027 \u0027) {\n        continue;\n      } else if (c \u003d\u003d \u0027{\u0027) {\n        matchedLc \u003d true;\n        break;\n      } else {\n        break;\n      }\n    }\n    stream.ungetChar(c);\n    return matchedLc;\n  }",
    "begin_line": 2384,
    "end_line": 2400,
    "comment": "/** \n * Look ahead for a type annotation by advancing the character stream. Does not modify the token stream. This is kind of a hack, and is only necessary because we use the token stream to parse types, but need the underlying character stream to get JsDoc descriptions.\n * @return Whether we found a type annotation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.JsDocTokenStream#37",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.JsDocTokenStream(java.lang.String)",
    "snippet": " JsDocTokenStream(String sourceString) {\n    this(sourceString, 0);\n  }",
    "begin_line": 37,
    "end_line": 39,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.JsDocTokenStream#41",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.JsDocTokenStream(java.lang.String, int)",
    "snippet": " JsDocTokenStream(String sourceString, int lineno) {\n    this(sourceString, lineno, 0);\n  }",
    "begin_line": 41,
    "end_line": 43,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.JsDocTokenStream#45",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.JsDocTokenStream(java.lang.String, int, int)",
    "snippet": " JsDocTokenStream(String sourceString, int lineno, int initCharno) {\n    Preconditions.checkNotNull(sourceString);\n    this.lineno \u003d lineno;\n    this.sourceString \u003d sourceString;\n    this.sourceEnd \u003d sourceString.length();\n    this.sourceCursor \u003d this.cursor \u003d 0;\n    this.initLineno \u003d lineno;\n    this.initCharno \u003d initCharno;\n  }",
    "begin_line": 45,
    "end_line": 53,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.getJsDocToken#59",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getJsDocToken()",
    "snippet": "@SuppressWarnings(\"fallthrough\")\n  final JsDocToken getJsDocToken() {\n    int c;\n    stringBufferTop \u003d 0;\n    for (;;) {\n      // eat white spaces\n      for (;;) {\n        charno \u003d -1;\n        c \u003d getChar();\n        if (c \u003d\u003d EOF_CHAR) {\n          return JsDocToken.EOF;\n        } else if (c \u003d\u003d \u0027\\n\u0027) {\n          return JsDocToken.EOL;\n        } else if (!isJSSpace(c)) {\n          break;\n        }\n      }\n\n      switch (c) {\n        // annotation, e.g. @type or @constructor\n        case \u0027@\u0027:\n          do {\n            c \u003d getChar();\n            if (isAlpha(c)) {\n              addToString(c);\n            } else {\n              ungetChar(c);\n              this.string \u003d getStringFromBuffer();\n              stringBufferTop \u003d 0;\n              return JsDocToken.ANNOTATION;\n            }\n          } while (true);\n\n        case \u0027*\u0027:\n          if (matchChar(\u0027/\u0027)) {\n            return JsDocToken.EOC;\n          } else {\n            return JsDocToken.STAR;\n          }\n\n        case \u0027,\u0027:\n          return JsDocToken.COMMA;\n\n        case \u0027\u003e\u0027:\n          return JsDocToken.GT;\n\n        case \u0027(\u0027:\n          return JsDocToken.LP;\n\n        case \u0027)\u0027:\n          return JsDocToken.RP;\n\n        case \u0027{\u0027:\n          return JsDocToken.LC;\n\n        case \u0027}\u0027:\n          return JsDocToken.RC;\n\n        case \u0027[\u0027:\n          return JsDocToken.LB;\n\n        case \u0027]\u0027:\n          return JsDocToken.RB;\n\n        case \u0027?\u0027:\n          return JsDocToken.QMARK;\n\n        case \u0027!\u0027:\n          return JsDocToken.BANG;\n\n        case \u0027:\u0027:\n          return JsDocToken.COLON;\n\n        case \u0027\u003d\u0027:\n          return JsDocToken.EQUALS;\n\n        case \u0027|\u0027:\n          matchChar(\u0027|\u0027);\n          return JsDocToken.PIPE;\n\n        case \u0027.\u0027:\n          c \u003d getChar();\n          if (c \u003d\u003d \u0027\u003c\u0027) {\n            return JsDocToken.LT;\n          } else {\n            if (c \u003d\u003d \u0027.\u0027) {\n              c \u003d getChar();\n              if (c \u003d\u003d \u0027.\u0027) {\n                return JsDocToken.ELLIPSIS;\n              } else {\n                addToString(\u0027.\u0027);\n              }\n            }\n            // we may backtrack across line boundary\n            ungetBuffer[ungetCursor++] \u003d c;\n            c \u003d \u0027.\u0027;\n          }\n          // fall through\n\n        default: {\n          // recognize a JsDoc string but discard last . if it is followed by\n          // a non-JsDoc comment char, e.g. Array.\u003c\n          int c1 \u003d c;\n          addToString(c);\n          int c2 \u003d getChar();\n          if (!isJSDocString(c2)) {\n            ungetChar(c2);\n            this.string \u003d getStringFromBuffer();\n            stringBufferTop \u003d 0;\n            return JsDocToken.STRING;\n          } else {\n            do {\n              c1 \u003d c2;\n              c2 \u003d getChar();\n              if (c1 \u003d\u003d \u0027.\u0027 \u0026\u0026 c2 \u003d\u003d \u0027\u003c\u0027) {\n                ungetChar(c2);\n                ungetChar(c1);\n                this.string \u003d getStringFromBuffer();\n                stringBufferTop \u003d 0;\n                return JsDocToken.STRING;\n              } else {\n                if (isJSDocString(c2)) {\n                  addToString(c1);\n                } else {\n                  ungetChar(c2);\n                  addToString(c1);\n                  this.string \u003d getStringFromBuffer();\n                  stringBufferTop \u003d 0;\n                  return JsDocToken.STRING;\n                }\n              }\n            } while (true);\n          }\n        }\n      }\n    }\n  }",
    "begin_line": 59,
    "end_line": 194,
    "comment": "/** \n * Tokenizes JSDoc comments.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.getRemainingJSDocLine#201",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getRemainingJSDocLine()",
    "snippet": "@SuppressWarnings(\"fallthrough\")\n  String getRemainingJSDocLine() {\n    int c;\n    for (;;) {\n      c \u003d getChar();\n      switch (c) {\n        case \u0027*\u0027:\n          if (peekChar() !\u003d \u0027/\u0027) {\n            addToString(c);\n            break;\n          }\n          // fall through\n        case EOF_CHAR:\n        case \u0027\\n\u0027:\n          ungetChar(c);\n          this.string \u003d getStringFromBuffer();\n          stringBufferTop \u003d 0;\n          return this.string;\n\n        default:\n          addToString(c);\n          break;\n      }\n    }\n  }",
    "begin_line": 201,
    "end_line": 224,
    "comment": "/** \n * Gets the remaining JSDoc line without the  {@link JsDocToken#EOL}, {@link JsDocToken#EOF} or {@link JsDocToken#EOC}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.getLineno#226",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getLineno()",
    "snippet": "final int getLineno() { return lineno; }",
    "begin_line": 226,
    "end_line": 226,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.getCharno#228",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getCharno()",
    "snippet": "final int getCharno() {\n    return lineno \u003d\u003d initLineno? initCharno + charno : charno;\n  }",
    "begin_line": 228,
    "end_line": 230,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.getString#232",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getString()",
    "snippet": "final String getString() { return string; }",
    "begin_line": 232,
    "end_line": 232,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.eof#234",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.eof()",
    "snippet": "final boolean eof() { return hitEOF; }",
    "begin_line": 234,
    "end_line": 234,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.getStringFromBuffer#236",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getStringFromBuffer()",
    "snippet": "private String getStringFromBuffer() {\n    tokenEnd \u003d cursor;\n    return new String(stringBuffer, 0, stringBufferTop);\n  }",
    "begin_line": 236,
    "end_line": 239,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.addToString#241",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.addToString(int)",
    "snippet": "private void addToString(int c) {\n    int N \u003d stringBufferTop;\n    if (N \u003d\u003d stringBuffer.length) {\n        char[] tmp \u003d new char[stringBuffer.length * 2];\n        System.arraycopy(stringBuffer, 0, tmp, 0, N);\n        stringBuffer \u003d tmp;\n    }\n    stringBuffer[N] \u003d (char)c;\n    stringBufferTop \u003d N + 1;\n  }",
    "begin_line": 241,
    "end_line": 250,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.ungetChar#252",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetChar(int)",
    "snippet": "void ungetChar(int c) {\n    // can not unread past across line boundary\n    assert(!(ungetCursor !\u003d 0 \u0026\u0026 ungetBuffer[ungetCursor - 1] \u003d\u003d \u0027\\n\u0027));\n    ungetBuffer[ungetCursor++] \u003d c;\n    cursor--;\n  }",
    "begin_line": 252,
    "end_line": 257,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.matchChar#259",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.matchChar(int)",
    "snippet": "private boolean matchChar(int test) {\n    int c \u003d getCharIgnoreLineEnd();\n    if (c \u003d\u003d test) {\n      tokenEnd \u003d cursor;\n      return true;\n    } else {\n      ungetCharIgnoreLineEnd(c);\n      return false;\n    }\n  }",
    "begin_line": 259,
    "end_line": 268,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.isAlpha#270",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.isAlpha(int)",
    "snippet": "private static boolean isAlpha(int c) {\n    // Use \u0027Z\u0027 \u003c \u0027a\u0027\n    if (c \u003c\u003d \u0027Z\u0027) {\n      return \u0027A\u0027 \u003c\u003d c;\n    } else {\n      return \u0027a\u0027 \u003c\u003d c \u0026\u0026 c \u003c\u003d \u0027z\u0027;\n    }\n  }",
    "begin_line": 270,
    "end_line": 277,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.isJSDocString#279",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.isJSDocString(int)",
    "snippet": "private boolean isJSDocString(int c) {\n    switch (c) {\n      case \u0027@\u0027:\n      case \u0027*\u0027:\n      case \u0027,\u0027:\n      case \u0027\u003e\u0027:\n      case \u0027:\u0027:\n      case \u0027(\u0027:\n      case \u0027)\u0027:\n      case \u0027{\u0027:\n      case \u0027}\u0027:\n      case \u0027[\u0027:\n      case \u0027]\u0027:\n      case \u0027?\u0027:\n      case \u0027!\u0027:\n      case \u0027|\u0027:\n      case \u0027\u003d\u0027:\n      case EOF_CHAR:\n      case \u0027\\n\u0027:\n        return false;\n\n      default:\n        return !isJSSpace(c);\n    }\n  }",
    "begin_line": 279,
    "end_line": 303,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.isJSSpace#309",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.isJSSpace(int)",
    "snippet": "static boolean isJSSpace(int c) {\n    if (c \u003c\u003d 127) {\n      return c \u003d\u003d 0x20 || c \u003d\u003d 0x9 || c \u003d\u003d 0xC || c \u003d\u003d 0xB;\n    } else {\n      return c \u003d\u003d 0xA0\n          || Character.getType((char)c) \u003d\u003d Character.SPACE_SEPARATOR;\n    }\n  }",
    "begin_line": 309,
    "end_line": 316,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.isJSFormatChar#318",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.isJSFormatChar(int)",
    "snippet": "private static boolean isJSFormatChar(int c) {\n    return c \u003e 127 \u0026\u0026 Character.getType((char)c) \u003d\u003d Character.FORMAT;\n  }",
    "begin_line": 318,
    "end_line": 320,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.update#326",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.update()",
    "snippet": "void update() {\n    charno \u003d getOffset();\n  }",
    "begin_line": 326,
    "end_line": 328,
    "comment": "/** \n * Allows the JSDocParser to update the character offset so that getCharno() returns a valid character position.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.peekChar#330",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.peekChar()",
    "snippet": "private int peekChar() {\n    int c \u003d getChar();\n    ungetChar(c);\n    return c;\n  }",
    "begin_line": 330,
    "end_line": 334,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.getChar#336",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getChar()",
    "snippet": "protected int getChar() {\n    if (ungetCursor !\u003d 0) {\n      cursor++;\n      --ungetCursor;\n      if (charno \u003d\u003d -1) {\n        charno \u003d getOffset();\n      }\n      return ungetBuffer[ungetCursor];\n    }\n\n    for(;;) {\n      int c;\n      if (sourceCursor \u003d\u003d sourceEnd) {\n        hitEOF \u003d true;\n        if (charno \u003d\u003d -1) {\n          charno \u003d getOffset();\n        }\n        return EOF_CHAR;\n      }\n      cursor++;\n      c \u003d sourceString.charAt(sourceCursor++);\n\n\n      if (lineEndChar \u003e\u003d 0) {\n        if (lineEndChar \u003d\u003d \u0027\\r\u0027 \u0026\u0026 c \u003d\u003d \u0027\\n\u0027) {\n          lineEndChar \u003d \u0027\\n\u0027;\n          continue;\n        }\n        lineEndChar \u003d -1;\n        lineStart \u003d sourceCursor - 1;\n        lineno++;\n      }\n\n      if (c \u003c\u003d 127) {\n        if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027) {\n          lineEndChar \u003d c;\n          c \u003d \u0027\\n\u0027;\n        }\n      } else {\n        if (isJSFormatChar(c)) {\n          continue;\n        }\n        if (ScriptRuntime.isJSLineTerminator(c)) {\n          lineEndChar \u003d c;\n          c \u003d \u0027\\n\u0027;\n        }\n      }\n\n      if (charno \u003d\u003d -1) {\n        charno \u003d getOffset();\n      }\n\n      return c;\n    }\n  }",
    "begin_line": 336,
    "end_line": 390,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.getCharIgnoreLineEnd#392",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getCharIgnoreLineEnd()",
    "snippet": "private int getCharIgnoreLineEnd() {\n    if (ungetCursor !\u003d 0) {\n      cursor++;\n      --ungetCursor;\n      if (charno \u003d\u003d -1) {\n        charno \u003d getOffset();\n      }\n      return ungetBuffer[ungetCursor];\n    }\n\n    for(;;) {\n      int c;\n      if (sourceCursor \u003d\u003d sourceEnd) {\n        hitEOF \u003d true;\n        if (charno \u003d\u003d -1) {\n          charno \u003d getOffset();\n        }\n        return EOF_CHAR;\n      }\n      cursor++;\n      c \u003d sourceString.charAt(sourceCursor++);\n\n\n      if (c \u003c\u003d 127) {\n        if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027) {\n          lineEndChar \u003d c;\n          c \u003d \u0027\\n\u0027;\n        }\n      } else {\n        if (isJSFormatChar(c)) {\n          continue;\n        }\n        if (ScriptRuntime.isJSLineTerminator(c)) {\n          lineEndChar \u003d c;\n          c \u003d \u0027\\n\u0027;\n        }\n      }\n\n      if (charno \u003d\u003d -1) {\n        charno \u003d getOffset();\n      }\n\n      return c;\n    }\n  }",
    "begin_line": 392,
    "end_line": 436,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.ungetCharIgnoreLineEnd#438",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetCharIgnoreLineEnd(int)",
    "snippet": "private void ungetCharIgnoreLineEnd(int c) {\n    ungetBuffer[ungetCursor++] \u003d c;\n    cursor--;\n  }",
    "begin_line": 438,
    "end_line": 441,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsDocTokenStream.getOffset#446",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
    "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
    "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getOffset()",
    "snippet": "final int getOffset() {\n    return sourceCursor - lineStart - ungetCursor - 1;\n  }",
    "begin_line": 446,
    "end_line": 448,
    "comment": "/** \n * Returns the offset into the current line.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParserRunner.ParserRunner#48",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/ParserRunner.java",
    "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
    "signature": "com.google.javascript.jscomp.parsing.ParserRunner.ParserRunner()",
    "snippet": "private ParserRunner() {}",
    "begin_line": 48,
    "end_line": 48,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParserRunner.createConfig#51",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/ParserRunner.java",
    "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
    "signature": "com.google.javascript.jscomp.parsing.ParserRunner.createConfig(boolean)",
    "snippet": "@Deprecated\n  public static Config createConfig(boolean isIdeMode) {\n    return createConfig(isIdeMode, LanguageMode.ECMASCRIPT3, false);\n  }",
    "begin_line": 51,
    "end_line": 53,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParserRunner.createConfig#55",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/ParserRunner.java",
    "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
    "signature": "com.google.javascript.jscomp.parsing.ParserRunner.createConfig(boolean, com.google.javascript.jscomp.parsing.Config.LanguageMode, boolean)",
    "snippet": "public static Config createConfig(boolean isIdeMode,\n                                    LanguageMode languageMode,\n                                    boolean acceptConstKeyword) {\n    return createConfig(isIdeMode, languageMode, acceptConstKeyword, null);\n  }",
    "begin_line": 55,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParserRunner.createConfig#61",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/ParserRunner.java",
    "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
    "signature": "com.google.javascript.jscomp.parsing.ParserRunner.createConfig(boolean, com.google.javascript.jscomp.parsing.Config.LanguageMode, boolean, java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public static Config createConfig(boolean isIdeMode,\n                                    LanguageMode languageMode,\n                                    boolean acceptConstKeyword,\n                                    Set\u003cString\u003e extraAnnotationNames) {\n    initResourceConfig();\n    Set\u003cString\u003e effectiveAnnotationNames;\n    if (extraAnnotationNames \u003d\u003d null) {\n      effectiveAnnotationNames \u003d annotationNames;\n    } else {\n      effectiveAnnotationNames \u003d new HashSet\u003cString\u003e(annotationNames);\n      effectiveAnnotationNames.addAll(extraAnnotationNames);\n    }\n    return new Config(effectiveAnnotationNames, suppressionNames,\n        isIdeMode, languageMode, acceptConstKeyword);\n  }",
    "begin_line": 61,
    "end_line": 75,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParserRunner.getReservedVars#77",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/ParserRunner.java",
    "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
    "signature": "com.google.javascript.jscomp.parsing.ParserRunner.getReservedVars()",
    "snippet": "public static Set\u003cString\u003e getReservedVars() {\n    initResourceConfig();\n    return reservedVars;\n  }",
    "begin_line": 77,
    "end_line": 80,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParserRunner.initResourceConfig#82",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/ParserRunner.java",
    "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
    "signature": "com.google.javascript.jscomp.parsing.ParserRunner.initResourceConfig()",
    "snippet": "private static synchronized void initResourceConfig() {\n    if (annotationNames !\u003d null) {\n      return;\n    }\n\n    ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n    annotationNames \u003d extractList(config.getString(\"jsdoc.annotations\"));\n    suppressionNames \u003d extractList(config.getString(\"jsdoc.suppressions\"));\n    reservedVars \u003d extractList(config.getString(\"compiler.reserved.vars\"));\n  }",
    "begin_line": 82,
    "end_line": 91,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParserRunner.extractList#93",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/ParserRunner.java",
    "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
    "signature": "com.google.javascript.jscomp.parsing.ParserRunner.extractList(java.lang.String)",
    "snippet": "private static Set\u003cString\u003e extractList(String configProp) {\n    String[] names \u003d configProp.split(\",\");\n    Set\u003cString\u003e trimmedNames \u003d Sets.newHashSet();\n    for (String name : names) {\n      trimmedNames.add(name.trim());\n    }\n    return ImmutableSet.copyOf(trimmedNames);\n  }",
    "begin_line": 93,
    "end_line": 100,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParserRunner.parse#111",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/ParserRunner.java",
    "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
    "signature": "com.google.javascript.jscomp.parsing.ParserRunner.parse(com.google.javascript.rhino.jstype.StaticSourceFile, java.lang.String, com.google.javascript.jscomp.parsing.Config, ErrorReporter, java.util.logging.Logger)",
    "snippet": "public static ParseResult parse(StaticSourceFile sourceFile,\n                                  String sourceString,\n                                  Config config,\n                                  ErrorReporter errorReporter,\n                                  Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n\n    // ES5 specifically allows trailing commas\n    compilerEnv.setWarnTrailingComma(\n        config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n\n    // Do our own identifier check for ECMASCRIPT 5\n    boolean acceptEs5 \u003d\n        config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3;\n    compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n\n    compilerEnv.setAllowMemberExprAsFunctionName(false);\n    compilerEnv.setIdeMode(config.isIdeMode);\n    compilerEnv.setRecoverFromErrors(config.isIdeMode);\n\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n      astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n      logger.info(\n          \"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n      Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n      root \u003d IRFactory.transformTree(\n          astRoot, sourceFile, sourceString, config, errorReporter);\n      root.setIsSyntheticBlock(true);\n    }\n    return new ParseResult(root, astRoot);\n  }",
    "begin_line": 111,
    "end_line": 154,
    "comment": "/** \n * Parses the JavaScript text given by a reader.\n * @param sourceString Source code from the file.\n * @param errorReporter An error.\n * @param logger A logger.\n * @return The AST of the given text.\n * @throws IOException\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ParseResult.ParseResult#163",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/ParserRunner.java",
    "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
    "signature": "com.google.javascript.jscomp.parsing.ParserRunner.ParseResult(com.google.javascript.rhino.Node, AstRoot)",
    "snippet": "public ParseResult(Node ast, AstRoot oldAst) {\n      this.ast \u003d ast;\n      this.oldAst \u003d oldAst;\n    }",
    "begin_line": 163,
    "end_line": 166,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processArrayLiteral#75",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processArrayLiteral(ArrayLiteral)",
    "snippet": "abstract T processArrayLiteral(ArrayLiteral literalNode);",
    "begin_line": 75,
    "end_line": 75,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processAssignment#76",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processAssignment(Assignment)",
    "snippet": "abstract T processAssignment(Assignment assignmentNode);",
    "begin_line": 76,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processAstRoot#77",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processAstRoot(AstRoot)",
    "snippet": "abstract T processAstRoot(AstRoot rootNode);",
    "begin_line": 77,
    "end_line": 77,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processBlock#78",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processBlock(Block)",
    "snippet": "abstract T processBlock(Block blockNode);",
    "begin_line": 78,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processBreakStatement#79",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processBreakStatement(BreakStatement)",
    "snippet": "abstract T processBreakStatement(BreakStatement statementNode);",
    "begin_line": 79,
    "end_line": 79,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processCatchClause#80",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processCatchClause(CatchClause)",
    "snippet": "abstract T processCatchClause(CatchClause clauseNode);",
    "begin_line": 80,
    "end_line": 80,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processConditionalExpression#81",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processConditionalExpression(ConditionalExpression)",
    "snippet": "abstract T processConditionalExpression(ConditionalExpression exprNode);",
    "begin_line": 81,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processContinueStatement#82",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processContinueStatement(ContinueStatement)",
    "snippet": "abstract T processContinueStatement(ContinueStatement statementNode);",
    "begin_line": 82,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processDoLoop#83",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processDoLoop(DoLoop)",
    "snippet": "abstract T processDoLoop(DoLoop loopNode);",
    "begin_line": 83,
    "end_line": 83,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processElementGet#84",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processElementGet(ElementGet)",
    "snippet": "abstract T processElementGet(ElementGet getNode);",
    "begin_line": 84,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processEmptyExpression#85",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processEmptyExpression(EmptyExpression)",
    "snippet": "abstract T processEmptyExpression(EmptyExpression exprNode);",
    "begin_line": 85,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processEmptyStatement#86",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processEmptyStatement(EmptyStatement)",
    "snippet": "abstract T processEmptyStatement(EmptyStatement exprNode);",
    "begin_line": 86,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processExpressionStatement#87",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processExpressionStatement(ExpressionStatement)",
    "snippet": "abstract T processExpressionStatement(ExpressionStatement statementNode);",
    "begin_line": 87,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processForInLoop#88",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processForInLoop(ForInLoop)",
    "snippet": "abstract T processForInLoop(ForInLoop loopNode);",
    "begin_line": 88,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processForLoop#89",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processForLoop(ForLoop)",
    "snippet": "abstract T processForLoop(ForLoop loopNode);",
    "begin_line": 89,
    "end_line": 89,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processFunctionCall#90",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processFunctionCall(FunctionCall)",
    "snippet": "abstract T processFunctionCall(FunctionCall callNode);",
    "begin_line": 90,
    "end_line": 90,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processFunctionNode#91",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processFunctionNode(FunctionNode)",
    "snippet": "abstract T processFunctionNode(FunctionNode functionNode);",
    "begin_line": 91,
    "end_line": 91,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processIfStatement#92",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processIfStatement(IfStatement)",
    "snippet": "abstract T processIfStatement(IfStatement statementNode);",
    "begin_line": 92,
    "end_line": 92,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processInfixExpression#93",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processInfixExpression(InfixExpression)",
    "snippet": "abstract T processInfixExpression(InfixExpression exprNode);",
    "begin_line": 93,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processKeywordLiteral#94",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processKeywordLiteral(KeywordLiteral)",
    "snippet": "abstract T processKeywordLiteral(KeywordLiteral literalNode);",
    "begin_line": 94,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processLabel#95",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processLabel(Label)",
    "snippet": "abstract T processLabel(Label labelNode);",
    "begin_line": 95,
    "end_line": 95,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processLabeledStatement#96",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processLabeledStatement(LabeledStatement)",
    "snippet": "abstract T processLabeledStatement(LabeledStatement statementNode);",
    "begin_line": 96,
    "end_line": 96,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processName#97",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processName(Name)",
    "snippet": "abstract T processName(Name nameNode);",
    "begin_line": 97,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processNewExpression#98",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processNewExpression(NewExpression)",
    "snippet": "abstract T processNewExpression(NewExpression exprNode);",
    "begin_line": 98,
    "end_line": 98,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processNumberLiteral#99",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processNumberLiteral(NumberLiteral)",
    "snippet": "abstract T processNumberLiteral(NumberLiteral literalNode);",
    "begin_line": 99,
    "end_line": 99,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processObjectLiteral#100",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processObjectLiteral(ObjectLiteral)",
    "snippet": "abstract T processObjectLiteral(ObjectLiteral literalNode);",
    "begin_line": 100,
    "end_line": 100,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processObjectProperty#101",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processObjectProperty(ObjectProperty)",
    "snippet": "abstract T processObjectProperty(ObjectProperty propertyNode);",
    "begin_line": 101,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processParenthesizedExpression#102",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processParenthesizedExpression(ParenthesizedExpression)",
    "snippet": "abstract T processParenthesizedExpression(ParenthesizedExpression exprNode);",
    "begin_line": 102,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processPropertyGet#103",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processPropertyGet(PropertyGet)",
    "snippet": "abstract T processPropertyGet(PropertyGet getNode);",
    "begin_line": 103,
    "end_line": 103,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processRegExpLiteral#104",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processRegExpLiteral(RegExpLiteral)",
    "snippet": "abstract T processRegExpLiteral(RegExpLiteral literalNode);",
    "begin_line": 104,
    "end_line": 104,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processReturnStatement#105",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processReturnStatement(ReturnStatement)",
    "snippet": "abstract T processReturnStatement(ReturnStatement statementNode);",
    "begin_line": 105,
    "end_line": 105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processScope#106",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processScope(Scope)",
    "snippet": "abstract T processScope(Scope scopeNode);",
    "begin_line": 106,
    "end_line": 106,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processStringLiteral#107",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processStringLiteral(StringLiteral)",
    "snippet": "abstract T processStringLiteral(StringLiteral literalNode);",
    "begin_line": 107,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processSwitchCase#108",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processSwitchCase(SwitchCase)",
    "snippet": "abstract T processSwitchCase(SwitchCase caseNode);",
    "begin_line": 108,
    "end_line": 108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processSwitchStatement#109",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processSwitchStatement(SwitchStatement)",
    "snippet": "abstract T processSwitchStatement(SwitchStatement statementNode);",
    "begin_line": 109,
    "end_line": 109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processThrowStatement#110",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processThrowStatement(ThrowStatement)",
    "snippet": "abstract T processThrowStatement(ThrowStatement statementNode);",
    "begin_line": 110,
    "end_line": 110,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processTryStatement#111",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processTryStatement(TryStatement)",
    "snippet": "abstract T processTryStatement(TryStatement statementNode);",
    "begin_line": 111,
    "end_line": 111,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processUnaryExpression#112",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processUnaryExpression(UnaryExpression)",
    "snippet": "abstract T processUnaryExpression(UnaryExpression exprNode);",
    "begin_line": 112,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processVariableDeclaration#113",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processVariableDeclaration(VariableDeclaration)",
    "snippet": "abstract T processVariableDeclaration(VariableDeclaration declarationNode);",
    "begin_line": 113,
    "end_line": 113,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processVariableInitializer#114",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processVariableInitializer(VariableInitializer)",
    "snippet": "abstract T processVariableInitializer(VariableInitializer initializerNode);",
    "begin_line": 114,
    "end_line": 114,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processWhileLoop#115",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processWhileLoop(WhileLoop)",
    "snippet": "abstract T processWhileLoop(WhileLoop loopNode);",
    "begin_line": 115,
    "end_line": 115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processWithStatement#116",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processWithStatement(WithStatement)",
    "snippet": "abstract T processWithStatement(WithStatement statementNode);",
    "begin_line": 116,
    "end_line": 116,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.processIllegalToken#118",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.processIllegalToken(AstNode)",
    "snippet": "abstract T processIllegalToken(AstNode node);",
    "begin_line": 118,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeSafeDispatcher.process#120",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
    "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
    "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.process(AstNode)",
    "snippet": "public T process(AstNode node) {\n    switch (node.getType()) {\n      case Token.ADD:\n      case Token.AND:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.IN:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.OR:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return processInfixExpression((InfixExpression) node);\n      case Token.ARRAYLIT:\n        return processArrayLiteral((ArrayLiteral) node);\n      case Token.ASSIGN:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_URSH:\n        return processAssignment((Assignment) node);\n      case Token.BITNOT:\n      case Token.DEC:\n      case Token.DELPROP:\n      case Token.INC:\n      case Token.NEG:\n      case Token.NOT:\n      case Token.POS:\n      case Token.TYPEOF:\n      case Token.VOID:\n        return processUnaryExpression((UnaryExpression) node);\n      case Token.BLOCK:\n        if (node instanceof Block) {\n          return processBlock((Block) node);\n        } else  if (node instanceof Scope) {\n          return processScope((Scope) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.BREAK:\n        return processBreakStatement((BreakStatement) node);\n      case Token.CALL:\n        return processFunctionCall((FunctionCall) node);\n      case Token.CASE:\n      case Token.DEFAULT:\n        return processSwitchCase((SwitchCase) node);\n      case Token.CATCH:\n        return processCatchClause((CatchClause) node);\n      case Token.COLON:\n        return processObjectProperty((ObjectProperty) node);\n      case Token.CONTINUE:\n        return processContinueStatement((ContinueStatement) node);\n      case Token.DO:\n        return processDoLoop((DoLoop) node);\n      case Token.EMPTY:\n        return (node instanceof EmptyExpression) ?\n            processEmptyExpression((EmptyExpression) node) :\n            processEmptyStatement((EmptyStatement) node);\n      case Token.EXPR_RESULT:\n      case Token.EXPR_VOID:\n        if (node instanceof ExpressionStatement) {\n          return processExpressionStatement((ExpressionStatement) node);\n        } else  if (node instanceof LabeledStatement) {\n          return processLabeledStatement((LabeledStatement) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.DEBUGGER:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.THIS:\n      case Token.TRUE:\n        return processKeywordLiteral((KeywordLiteral) node);\n      case Token.FOR:\n        if (node instanceof ForInLoop) {\n          return processForInLoop((ForInLoop) node);\n        } else  if (node instanceof ForLoop) {\n          return processForLoop((ForLoop) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.FUNCTION:\n        return processFunctionNode((FunctionNode) node);\n      case Token.GETELEM:\n        return processElementGet((ElementGet) node);\n      case Token.GETPROP:\n        return processPropertyGet((PropertyGet) node);\n      case Token.HOOK:\n        return processConditionalExpression((ConditionalExpression) node);\n      case Token.IF:\n        return processIfStatement((IfStatement) node);\n      case Token.LABEL:\n        return processLabel((Label) node);\n      case Token.LP:\n        return processParenthesizedExpression((ParenthesizedExpression) node);\n      case Token.NAME:\n        return processName((Name) node);\n      case Token.NEW:\n        return processNewExpression((NewExpression) node);\n      case Token.NUMBER:\n        return processNumberLiteral((NumberLiteral) node);\n      case Token.OBJECTLIT:\n        return processObjectLiteral((ObjectLiteral) node);\n      case Token.REGEXP:\n        return processRegExpLiteral((RegExpLiteral) node);\n      case Token.RETURN:\n        return processReturnStatement((ReturnStatement) node);\n      case Token.SCRIPT:\n        return processAstRoot((AstRoot) node);\n      case Token.STRING:\n        return processStringLiteral((StringLiteral) node);\n      case Token.SWITCH:\n        return processSwitchStatement((SwitchStatement) node);\n      case Token.THROW:\n        return processThrowStatement((ThrowStatement) node);\n      case Token.TRY:\n        return processTryStatement((TryStatement) node);\n      case Token.CONST:\n      case Token.VAR:\n        if (node instanceof VariableDeclaration) {\n          return processVariableDeclaration((VariableDeclaration) node);\n        } else  if (node instanceof VariableInitializer) {\n          return processVariableInitializer((VariableInitializer) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.WHILE:\n        return processWhileLoop((WhileLoop) node);\n      case Token.WITH:\n        return processWithStatement((WithStatement) node);\n    }\n    return processIllegalToken(node);\n  }",
    "begin_line": 120,
    "end_line": 285,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.ChainableReverseAbstractInterpreter#63",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.ChainableReverseAbstractInterpreter(com.google.javascript.jscomp.CodingConvention, com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": "public ChainableReverseAbstractInterpreter(CodingConvention convention,\n      JSTypeRegistry typeRegistry) {\n    Preconditions.checkNotNull(convention);\n    this.convention \u003d convention;\n    this.typeRegistry \u003d typeRegistry;\n    firstLink \u003d this;\n    nextLink \u003d null;\n  }",
    "begin_line": 63,
    "end_line": 70,
    "comment": "/** \n * Constructs an interpreter, which is the only link in a chain. Interpreters can be appended using  {@link #append}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.append#80",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.append(com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter)",
    "snippet": "public ChainableReverseAbstractInterpreter append(\n      ChainableReverseAbstractInterpreter lastLink) {\n    Preconditions.checkArgument(lastLink.nextLink \u003d\u003d null);\n    this.nextLink \u003d lastLink;\n    lastLink.firstLink \u003d this.firstLink;\n    return lastLink;\n  }",
    "begin_line": 80,
    "end_line": 86,
    "comment": "/** \n * Appends a link to  {@code this}, returning the updated last link. \u003cp\u003e The pattern  {@code new X().append(new Y())...append(new Z())} forms achain starting with X, then Y, then ... Z.\n * @param lastLink a chainable interpreter, with no next link\n * @return the updated last link\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.getFirst#91",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.getFirst()",
    "snippet": "public ChainableReverseAbstractInterpreter getFirst() {\n    return firstLink;\n  }",
    "begin_line": 91,
    "end_line": 93,
    "comment": "/** \n * Gets the first link of this chain.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.firstPreciserScopeKnowingConditionOutcome#98",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.firstPreciserScopeKnowingConditionOutcome(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope, boolean)",
    "snippet": "protected FlowScope firstPreciserScopeKnowingConditionOutcome(Node condition,\n      FlowScope blindScope, boolean outcome) {\n    return firstLink.getPreciserScopeKnowingConditionOutcome(\n        condition, blindScope, outcome);\n  }",
    "begin_line": 98,
    "end_line": 102,
    "comment": "/** \n * Calculates the preciser scope starting with the first link.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.nextPreciserScopeKnowingConditionOutcome#108",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.nextPreciserScopeKnowingConditionOutcome(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope, boolean)",
    "snippet": "protected FlowScope nextPreciserScopeKnowingConditionOutcome(Node condition,\n      FlowScope blindScope, boolean outcome) {\n    return nextLink !\u003d null ? nextLink.getPreciserScopeKnowingConditionOutcome(\n        condition, blindScope, outcome) : blindScope;\n  }",
    "begin_line": 108,
    "end_line": 112,
    "comment": "/** \n * Delegates the calculation of the preciser scope to the next link. If there is no next link, returns the blind scope.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.getTypeIfRefinable#119",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.getTypeIfRefinable(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "protected JSType getTypeIfRefinable(Node node, FlowScope scope) {\n    switch (node.getType()) {\n      case Token.NAME:\n        StaticSlot\u003cJSType\u003e nameVar \u003d scope.getSlot(node.getString());\n        if (nameVar !\u003d null) {\n          JSType nameVarType \u003d nameVar.getType();\n          if (nameVarType \u003d\u003d null) {\n            nameVarType \u003d node.getJSType();\n          }\n          return nameVarType;\n        }\n        return null;\n\n      case Token.GETPROP:\n        String qualifiedName \u003d node.getQualifiedName();\n        if (qualifiedName \u003d\u003d null) {\n          return null;\n        }\n        StaticSlot\u003cJSType\u003e propVar \u003d scope.getSlot(qualifiedName);\n        JSType propVarType \u003d null;\n        if (propVar !\u003d null) {\n          propVarType \u003d propVar.getType();\n        }\n        if (propVarType \u003d\u003d null) {\n          propVarType \u003d node.getJSType();\n        }\n        if (propVarType \u003d\u003d null) {\n          propVarType \u003d getNativeType(UNKNOWN_TYPE);\n        }\n        return propVarType;\n    }\n    return null;\n  }",
    "begin_line": 119,
    "end_line": 151,
    "comment": "/** \n * Returns the type of a node in the given scope if the node corresponds to a name whose type is capable of being refined.\n * @return The current type of the node if it can be refined, null otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.declareNameInScope#158",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.declareNameInScope(com.google.javascript.jscomp.type.FlowScope, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "protected void declareNameInScope(FlowScope scope, Node node, JSType type) {\n    switch (node.getType()) {\n      case Token.NAME:\n        scope.inferSlotType(node.getString(), type);\n        break;\n\n      case Token.GETPROP:\n        String qualifiedName \u003d node.getQualifiedName();\n        Preconditions.checkNotNull(qualifiedName);\n\n        JSType origType \u003d node.getJSType();\n        origType \u003d origType \u003d\u003d null ? getNativeType(UNKNOWN_TYPE) : origType;\n        scope.inferQualifiedSlot(node, qualifiedName, origType, type);\n        break;\n\n      case Token.THIS:\n        // \"this\" references aren\u0027t currently modeled in the CFG.\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n            node.toStringTree());\n    }\n  }",
    "begin_line": 158,
    "end_line": 181,
    "comment": "/** \n * Declares a refined type in  {@code scope} for the name represented by{@code node}. It must be possible to refine the type of the given node in the given scope, as determined by  {@link #getTypeIfRefinable}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseEnumElementType#189",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseEnumElementType(com.google.javascript.rhino.jstype.EnumElementType)",
    "snippet": "@Override\n      public JSType caseEnumElementType(EnumElementType enumElementType) {\n        JSType type \u003d enumElementType.getPrimitiveType().visit(this);\n        if (type !\u003d null \u0026\u0026 enumElementType.getPrimitiveType().isEquivalentTo(type)) {\n          return enumElementType;\n        } else {\n          return type;\n        }\n      }",
    "begin_line": 189,
    "end_line": 196,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseAllType#199",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseAllType()",
    "snippet": "@Override\n      public JSType caseAllType() {\n        return typeRegistry.createUnionType(OBJECT_TYPE, NUMBER_TYPE,\n            STRING_TYPE, BOOLEAN_TYPE, NULL_TYPE);\n      }",
    "begin_line": 199,
    "end_line": 202,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseNoObjectType#205",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseNoObjectType()",
    "snippet": "@Override\n      public JSType caseNoObjectType() {\n        return getNativeType(NO_OBJECT_TYPE);\n      }",
    "begin_line": 205,
    "end_line": 207,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseNoType#210",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseNoType()",
    "snippet": "@Override\n      public JSType caseNoType() {\n        return getNativeType(NO_TYPE);\n      }",
    "begin_line": 210,
    "end_line": 212,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseBooleanType#215",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseBooleanType()",
    "snippet": "@Override\n      public JSType caseBooleanType() {\n        return getNativeType(BOOLEAN_TYPE);\n      }",
    "begin_line": 215,
    "end_line": 217,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseFunctionType#220",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseFunctionType(com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "@Override\n      public JSType caseFunctionType(FunctionType type) {\n        return type;\n      }",
    "begin_line": 220,
    "end_line": 222,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseNullType#225",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseNullType()",
    "snippet": "@Override\n      public JSType caseNullType() {\n        return getNativeType(NULL_TYPE);\n      }",
    "begin_line": 225,
    "end_line": 227,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseNumberType#230",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseNumberType()",
    "snippet": "@Override\n      public JSType caseNumberType() {\n        return getNativeType(NUMBER_TYPE);\n      }",
    "begin_line": 230,
    "end_line": 232,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseObjectType#235",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseObjectType(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "@Override\n      public JSType caseObjectType(ObjectType type) {\n        return type;\n      }",
    "begin_line": 235,
    "end_line": 237,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseStringType#240",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseStringType()",
    "snippet": "@Override\n      public JSType caseStringType() {\n        return getNativeType(STRING_TYPE);\n      }",
    "begin_line": 240,
    "end_line": 242,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseUnionType#245",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseUnionType(com.google.javascript.rhino.jstype.UnionType)",
    "snippet": "@Override\n      public JSType caseUnionType(UnionType type) {\n        return type.getRestrictedUnion(getNativeType(VOID_TYPE));\n      }",
    "begin_line": 245,
    "end_line": 247,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseUnknownType#250",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseUnknownType()",
    "snippet": "@Override\n      public JSType caseUnknownType() {\n        return getNativeType(UNKNOWN_TYPE);\n      }",
    "begin_line": 250,
    "end_line": 252,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseVoidType#255",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseVoidType()",
    "snippet": "@Override\n      public JSType caseVoidType() {\n        return null;\n      }",
    "begin_line": 255,
    "end_line": 257,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseParameterizedType#260",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseParameterizedType(com.google.javascript.rhino.jstype.ParameterizedType)",
    "snippet": "@Override\n      public JSType caseParameterizedType(ParameterizedType type) {\n        return caseObjectType(type);\n      }",
    "begin_line": 260,
    "end_line": 262,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseTemplateType#265",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseTemplateType(com.google.javascript.rhino.jstype.TemplateType)",
    "snippet": "@Override\n      public JSType caseTemplateType(TemplateType templateType) {\n        return caseObjectType(templateType);\n      }",
    "begin_line": 265,
    "end_line": 267,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseEnumElementType#277",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseEnumElementType(com.google.javascript.rhino.jstype.EnumElementType)",
    "snippet": "@Override\n      public JSType caseEnumElementType(EnumElementType enumElementType) {\n        JSType type \u003d enumElementType.getPrimitiveType().visit(this);\n        if (type !\u003d null \u0026\u0026\n            enumElementType.getPrimitiveType().isEquivalentTo(type)) {\n          return enumElementType;\n        } else {\n          return type;\n        }\n      }",
    "begin_line": 277,
    "end_line": 285,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseAllType#288",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseAllType()",
    "snippet": "@Override\n      public JSType caseAllType() {\n        return typeRegistry.createUnionType(OBJECT_TYPE, NUMBER_TYPE,\n            STRING_TYPE, BOOLEAN_TYPE, VOID_TYPE);\n      }",
    "begin_line": 288,
    "end_line": 291,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseNoObjectType#294",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseNoObjectType()",
    "snippet": "@Override\n      public JSType caseNoObjectType() {\n        return getNativeType(NO_OBJECT_TYPE);\n      }",
    "begin_line": 294,
    "end_line": 296,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseNoType#299",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseNoType()",
    "snippet": "@Override\n      public JSType caseNoType() {\n        return getNativeType(NO_TYPE);\n      }",
    "begin_line": 299,
    "end_line": 301,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseBooleanType#304",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseBooleanType()",
    "snippet": "@Override\n      public JSType caseBooleanType() {\n        return getNativeType(BOOLEAN_TYPE);\n      }",
    "begin_line": 304,
    "end_line": 306,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseFunctionType#309",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseFunctionType(com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "@Override\n      public JSType caseFunctionType(FunctionType type) {\n        return type;\n      }",
    "begin_line": 309,
    "end_line": 311,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseNullType#314",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseNullType()",
    "snippet": "@Override\n      public JSType caseNullType() {\n        return null;\n      }",
    "begin_line": 314,
    "end_line": 316,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseNumberType#319",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseNumberType()",
    "snippet": "@Override\n      public JSType caseNumberType() {\n        return getNativeType(NUMBER_TYPE);\n      }",
    "begin_line": 319,
    "end_line": 321,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseObjectType#324",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseObjectType(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "@Override\n      public JSType caseObjectType(ObjectType type) {\n        return type;\n      }",
    "begin_line": 324,
    "end_line": 326,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseStringType#329",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseStringType()",
    "snippet": "@Override\n      public JSType caseStringType() {\n        return getNativeType(STRING_TYPE);\n      }",
    "begin_line": 329,
    "end_line": 331,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseUnionType#334",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseUnionType(com.google.javascript.rhino.jstype.UnionType)",
    "snippet": "@Override\n      public JSType caseUnionType(UnionType type) {\n        return type.getRestrictedUnion(getNativeType(NULL_TYPE));\n      }",
    "begin_line": 334,
    "end_line": 336,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseUnknownType#339",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseUnknownType()",
    "snippet": "@Override\n      public JSType caseUnknownType() {\n        return getNativeType(UNKNOWN_TYPE);\n      }",
    "begin_line": 339,
    "end_line": 341,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseVoidType#344",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseVoidType()",
    "snippet": "@Override\n      public JSType caseVoidType() {\n        return getNativeType(VOID_TYPE);\n      }",
    "begin_line": 344,
    "end_line": 346,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseParameterizedType#349",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseParameterizedType(com.google.javascript.rhino.jstype.ParameterizedType)",
    "snippet": "@Override\n      public JSType caseParameterizedType(ParameterizedType type) {\n        return caseObjectType(type);\n      }",
    "begin_line": 349,
    "end_line": 351,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChainableReverseAbstractInterpreter.caseTemplateType#354",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseTemplateType(com.google.javascript.rhino.jstype.TemplateType)",
    "snippet": "@Override\n      public JSType caseTemplateType(TemplateType templateType) {\n        return caseObjectType(templateType);\n      }",
    "begin_line": 354,
    "end_line": 356,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTypeOfResultVisitor.caseTopType#374",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseTopType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "protected abstract JSType caseTopType(JSType topType);",
    "begin_line": 374,
    "end_line": 374,
    "comment": "/** \n * Abstracts away the similarities between visiting the unknown type and the all type.\n * @param topType {@code UNKNOWN_TYPE} or {@code ALL_TYPE}\n * @return the restricted type\n * @see #caseAllType\n * @see #caseUnknownType\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTypeOfResultVisitor.caseAllType#377",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseAllType()",
    "snippet": "@Override\n    public JSType caseAllType() {\n      return caseTopType(getNativeType(ALL_TYPE));\n    }",
    "begin_line": 377,
    "end_line": 379,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTypeOfResultVisitor.caseUnknownType#382",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseUnknownType()",
    "snippet": "@Override\n    public JSType caseUnknownType() {\n      return caseTopType(getNativeType(CHECKED_UNKNOWN_TYPE));\n    }",
    "begin_line": 382,
    "end_line": 384,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTypeOfResultVisitor.caseUnionType#387",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseUnionType(com.google.javascript.rhino.jstype.UnionType)",
    "snippet": "@Override\n    public JSType caseUnionType(UnionType type) {\n      JSType restricted \u003d null;\n      for (JSType alternate : type.getAlternates()) {\n        JSType restrictedAlternate \u003d alternate.visit(this);\n        if (restrictedAlternate !\u003d null) {\n          if (restricted \u003d\u003d null) {\n            restricted \u003d restrictedAlternate;\n          } else {\n            restricted \u003d restrictedAlternate.getLeastSupertype(restricted);\n          }\n        }\n      }\n      return restricted;\n    }",
    "begin_line": 387,
    "end_line": 400,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTypeOfResultVisitor.caseNoType#403",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseNoType()",
    "snippet": "@Override\n    public JSType caseNoType() {\n      return getNativeType(NO_TYPE);\n    }",
    "begin_line": 403,
    "end_line": 405,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTypeOfResultVisitor.caseEnumElementType#408",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseEnumElementType(com.google.javascript.rhino.jstype.EnumElementType)",
    "snippet": "@Override\n    public JSType caseEnumElementType(EnumElementType enumElementType) {\n      // NOTE(nicksantos): This is a white lie. Suppose we have:\n      // /** @enum {string|number} */ var MyEnum \u003d ...;\n      // if (goog.isNumber(myEnumInstance)) {\n      //   /* what is myEnumInstance here? */\n      // }\n      // There is no type that represents {MyEnum - string}. What we really\n      // need is a notion of \"enum subtyping\", so that we could dynamically\n      // create a subtype of MyEnum restricted by string. In any case,\n      // this should catch the common case.\n      JSType type \u003d enumElementType.getPrimitiveType().visit(this);\n      if (type !\u003d null \u0026\u0026\n          enumElementType.getPrimitiveType().isEquivalentTo(type)) {\n        return enumElementType;\n      } else {\n        return type;\n      }\n    }",
    "begin_line": 408,
    "end_line": 425,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTypeOfResultVisitor.caseParameterizedType#428",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseParameterizedType(com.google.javascript.rhino.jstype.ParameterizedType)",
    "snippet": "@Override\n    public JSType caseParameterizedType(ParameterizedType type) {\n      return caseObjectType(type);\n    }",
    "begin_line": 428,
    "end_line": 430,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTypeOfResultVisitor.caseTemplateType#433",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseTemplateType(com.google.javascript.rhino.jstype.TemplateType)",
    "snippet": "@Override\n    public JSType caseTemplateType(TemplateType templateType) {\n      return caseObjectType(templateType);\n    }",
    "begin_line": 433,
    "end_line": 435,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTrueTypeOfResultVisitor.caseNoObjectType#446",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseNoObjectType()",
    "snippet": "@Override\n    public JSType caseNoObjectType() {\n      return null;\n    }",
    "begin_line": 446,
    "end_line": 448,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTrueTypeOfResultVisitor.caseBooleanType#451",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseBooleanType()",
    "snippet": "@Override\n    public JSType caseBooleanType() {\n      return null;\n    }",
    "begin_line": 451,
    "end_line": 453,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTrueTypeOfResultVisitor.caseFunctionType#456",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseFunctionType(com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "@Override\n    public JSType caseFunctionType(FunctionType type) {\n      return null;\n    }",
    "begin_line": 456,
    "end_line": 458,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTrueTypeOfResultVisitor.caseNullType#461",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseNullType()",
    "snippet": "@Override\n    public JSType caseNullType() {\n      return null;\n    }",
    "begin_line": 461,
    "end_line": 463,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTrueTypeOfResultVisitor.caseNumberType#466",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseNumberType()",
    "snippet": "@Override\n    public JSType caseNumberType() {\n      return null;\n    }",
    "begin_line": 466,
    "end_line": 468,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTrueTypeOfResultVisitor.caseObjectType#471",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseObjectType(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "@Override\n    public JSType caseObjectType(ObjectType type) {\n      return null;\n    }",
    "begin_line": 471,
    "end_line": 473,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTrueTypeOfResultVisitor.caseStringType#476",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseStringType()",
    "snippet": "@Override\n    public JSType caseStringType() {\n      return null;\n    }",
    "begin_line": 476,
    "end_line": 478,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTrueTypeOfResultVisitor.caseVoidType#481",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseVoidType()",
    "snippet": "@Override\n    public JSType caseVoidType() {\n      return null;\n    }",
    "begin_line": 481,
    "end_line": 483,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByFalseTypeOfResultVisitor.caseTopType#494",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseTopType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n    protected JSType caseTopType(JSType topType) {\n      return topType;\n    }",
    "begin_line": 494,
    "end_line": 496,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByFalseTypeOfResultVisitor.caseNoObjectType#499",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseNoObjectType()",
    "snippet": "@Override\n    public JSType caseNoObjectType() {\n      return getNativeType(NO_OBJECT_TYPE);\n    }",
    "begin_line": 499,
    "end_line": 501,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByFalseTypeOfResultVisitor.caseBooleanType#504",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseBooleanType()",
    "snippet": "@Override\n    public JSType caseBooleanType() {\n      return getNativeType(BOOLEAN_TYPE);\n    }",
    "begin_line": 504,
    "end_line": 506,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByFalseTypeOfResultVisitor.caseFunctionType#509",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseFunctionType(com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "@Override\n    public JSType caseFunctionType(FunctionType type) {\n      return type;\n    }",
    "begin_line": 509,
    "end_line": 511,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByFalseTypeOfResultVisitor.caseNullType#514",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseNullType()",
    "snippet": "@Override\n    public JSType caseNullType() {\n      return getNativeType(NULL_TYPE);\n    }",
    "begin_line": 514,
    "end_line": 516,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByFalseTypeOfResultVisitor.caseNumberType#519",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseNumberType()",
    "snippet": "@Override\n    public JSType caseNumberType() {\n      return getNativeType(NUMBER_TYPE);\n    }",
    "begin_line": 519,
    "end_line": 521,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByFalseTypeOfResultVisitor.caseObjectType#524",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseObjectType(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "@Override\n    public JSType caseObjectType(ObjectType type) {\n      return type;\n    }",
    "begin_line": 524,
    "end_line": 526,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByFalseTypeOfResultVisitor.caseStringType#529",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseStringType()",
    "snippet": "@Override\n    public JSType caseStringType() {\n      return getNativeType(STRING_TYPE);\n    }",
    "begin_line": 529,
    "end_line": 531,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByFalseTypeOfResultVisitor.caseVoidType#534",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseVoidType()",
    "snippet": "@Override\n    public JSType caseVoidType() {\n      return getNativeType(VOID_TYPE);\n    }",
    "begin_line": 534,
    "end_line": 536,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByOneTypeOfResultVisitor.RestrictByOneTypeOfResultVisitor#557",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByOneTypeOfResultVisitor(java.lang.String, boolean)",
    "snippet": " RestrictByOneTypeOfResultVisitor(String value, boolean resultEqualsValue) {\n      this.value \u003d value;\n      this.resultEqualsValue \u003d resultEqualsValue;\n    }",
    "begin_line": 557,
    "end_line": 560,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByOneTypeOfResultVisitor.matchesExpectation#567",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.matchesExpectation(java.lang.String)",
    "snippet": "private boolean matchesExpectation(String result) {\n      return result.equals(value) \u003d\u003d resultEqualsValue;\n    }",
    "begin_line": 567,
    "end_line": 569,
    "comment": "/** \n * Computes whether the given result of a  {@code typeof} operator matchesexpectations, i.e. whether a type that gives such a result should be kept.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByOneTypeOfResultVisitor.caseTopType#572",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseTopType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n    protected JSType caseTopType(JSType topType) {\n      JSType result \u003d topType;\n      if (resultEqualsValue) {\n        JSType typeByName \u003d getNativeTypeForTypeOf(value);\n        if (typeByName !\u003d null) {\n          result \u003d typeByName;\n        }\n      }\n      return result;\n    }",
    "begin_line": 572,
    "end_line": 581,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByOneTypeOfResultVisitor.caseNoObjectType#584",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseNoObjectType()",
    "snippet": "@Override\n    public JSType caseNoObjectType() {\n      return (value.equals(\"object\") || value.equals(\"function\")) \u003d\u003d\n          resultEqualsValue ? getNativeType(NO_OBJECT_TYPE) : null;\n    }",
    "begin_line": 584,
    "end_line": 587,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByOneTypeOfResultVisitor.caseBooleanType#590",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseBooleanType()",
    "snippet": "@Override\n    public JSType caseBooleanType() {\n      return matchesExpectation(\"boolean\") ? getNativeType(BOOLEAN_TYPE) : null;\n    }",
    "begin_line": 590,
    "end_line": 592,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByOneTypeOfResultVisitor.caseFunctionType#595",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseFunctionType(com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "@Override\n    public JSType caseFunctionType(FunctionType type) {\n      return matchesExpectation(\"function\") ? type : null;\n    }",
    "begin_line": 595,
    "end_line": 597,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByOneTypeOfResultVisitor.caseNullType#600",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseNullType()",
    "snippet": "@Override\n    public JSType caseNullType() {\n      return matchesExpectation(\"object\") ? getNativeType(NULL_TYPE) : null;\n    }",
    "begin_line": 600,
    "end_line": 602,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByOneTypeOfResultVisitor.caseNumberType#605",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseNumberType()",
    "snippet": "@Override\n    public JSType caseNumberType() {\n      return matchesExpectation(\"number\") ? getNativeType(NUMBER_TYPE) : null;\n    }",
    "begin_line": 605,
    "end_line": 607,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByOneTypeOfResultVisitor.caseObjectType#610",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseObjectType(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "@Override\n    public JSType caseObjectType(ObjectType type) {\n      if (value.equals(\"function\")) {\n        JSType ctorType \u003d getNativeType(U2U_CONSTRUCTOR_TYPE);\n        if (resultEqualsValue) {\n          // Objects are restricted to \"Function\", subtypes are left\n          return ctorType.getGreatestSubtype(type);\n        } else {\n          // Only filter out subtypes of \"function\"\n          return type.isSubtype(ctorType) ? null : type;\n        }\n      }\n      return matchesExpectation(\"object\") ? type : null;\n    }",
    "begin_line": 610,
    "end_line": 622,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByOneTypeOfResultVisitor.caseStringType#625",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseStringType()",
    "snippet": "@Override\n    public JSType caseStringType() {\n      return matchesExpectation(\"string\") ? getNativeType(STRING_TYPE) : null;\n    }",
    "begin_line": 625,
    "end_line": 627,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByOneTypeOfResultVisitor.caseVoidType#630",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.caseVoidType()",
    "snippet": "@Override\n    public JSType caseVoidType() {\n      return matchesExpectation(\"undefined\") ? getNativeType(VOID_TYPE) : null;\n    }",
    "begin_line": 630,
    "end_line": 632,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByOneTypeOfResultVisitor.getRestrictedWithoutUndefined#638",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.getRestrictedWithoutUndefined(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "protected final JSType getRestrictedWithoutUndefined(JSType type) {\n    return type \u003d\u003d null ? null : type.visit(restrictUndefinedVisitor);\n  }",
    "begin_line": 638,
    "end_line": 640,
    "comment": "/** \n * Returns a version of type where undefined is not present.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByOneTypeOfResultVisitor.getRestrictedWithoutNull#645",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.getRestrictedWithoutNull(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "protected final JSType getRestrictedWithoutNull(JSType type) {\n    return type \u003d\u003d null ? null : type.visit(restrictNullVisitor);\n  }",
    "begin_line": 645,
    "end_line": 647,
    "comment": "/** \n * Returns a version of type where null is not present.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByOneTypeOfResultVisitor.getRestrictedByTypeOfResult#676",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.getRestrictedByTypeOfResult(com.google.javascript.rhino.jstype.JSType, java.lang.String, boolean)",
    "snippet": "JSType getRestrictedByTypeOfResult(JSType type, String value,\n                                     boolean resultEqualsValue) {\n    if (type \u003d\u003d null) {\n      if (resultEqualsValue) {\n        JSType result \u003d getNativeTypeForTypeOf(value);\n        return result \u003d\u003d null ? getNativeType(CHECKED_UNKNOWN_TYPE) : result;\n      } else {\n        return null;\n      }\n    }\n    return type.visit(\n        new RestrictByOneTypeOfResultVisitor(value, resultEqualsValue));\n  }",
    "begin_line": 676,
    "end_line": 688,
    "comment": "/** \n * Returns a version of  {@code type} that is restricted by some knowledgeabout the result of the  {@code typeof} operation.\u003cp\u003e The behavior of the  {@code typeof} operator can be summarized by thefollowing table: \u003ctable\u003e \u003ctr\u003e\u003cth\u003etype\u003c/th\u003e\u003cth\u003eresult\u003c/th\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code undefined}\u003c/td\u003e\u003ctd\u003e\"undefined\"\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code null}\u003c/td\u003e\u003ctd\u003e\"object\"\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code boolean}\u003c/td\u003e\u003ctd\u003e\"boolean\"\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code number}\u003c/td\u003e\u003ctd\u003e\"number\"\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code string}\u003c/td\u003e\u003ctd\u003e\"string\"\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code Object} (which doesn\u0027t implement [[Call]])\u003c/td\u003e\u003ctd\u003e\"object\"\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code Object} (which implements [[Call]])\u003c/td\u003e\u003ctd\u003e\"function\"\u003c/td\u003e\u003c/tr\u003e \u003c/table\u003e\n * @param type the type to restrict\n * @param value A value known to be equal or not equal to the result of the{@code typeof} operation\n * @param resultEqualsValue {@code true} if the {@code typeOf} result is knownto equal  {@code value};  {@code false} if it is known \u003cem\u003enot\u003c/em\u003e toequal  {@code value}\n * @return the restricted type or null if no version of the type matches therestriction\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByOneTypeOfResultVisitor.getNativeType#690",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
    "snippet": "JSType getNativeType(JSTypeNative typeId) {\n    return typeRegistry.getNativeType(typeId);\n  }",
    "begin_line": 690,
    "end_line": 692,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByOneTypeOfResultVisitor.getNativeTypeForTypeOf#703",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.getNativeTypeForTypeOf(java.lang.String)",
    "snippet": "private JSType getNativeTypeForTypeOf(String value) {\n    if (value.equals(\"number\")) {\n      return getNativeType(NUMBER_TYPE);\n    } else if (value.equals(\"boolean\")) {\n      return getNativeType(BOOLEAN_TYPE);\n    } else if (value.equals(\"string\")) {\n      return getNativeType(STRING_TYPE);\n    } else if (value.equals(\"undefined\")) {\n      return getNativeType(VOID_TYPE);\n    } else if (value.equals(\"function\")) {\n      return getNativeType(U2U_CONSTRUCTOR_TYPE);\n    } else {\n      return null;\n    }\n  }",
    "begin_line": 703,
    "end_line": 717,
    "comment": "/** \n * If we definitely know what a type is based on the typeof result, return it.  Otherwise, return null. The typeof operation in JS is poorly defined, and this function works for both the native typeof and goog.typeOf. It should not be made public, because its semantics are informally defined, and would be wrong in the general case.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SemanticReverseAbstractInterpreter.apply#50",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.apply(com.google.javascript.rhino.jstype.JSType.TypePair)",
    "snippet": "@Override\n      public TypePair apply(TypePair p) {\n        if (p.typeA \u003d\u003d null || p.typeB \u003d\u003d null) {\n          return null;\n        }\n        return p.typeA.getTypesUnderEquality(p.typeB);\n      }",
    "begin_line": 50,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SemanticReverseAbstractInterpreter.apply#64",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.apply(com.google.javascript.rhino.jstype.JSType.TypePair)",
    "snippet": "@Override\n      public TypePair apply(TypePair p) {\n        if (p.typeA \u003d\u003d null || p.typeB \u003d\u003d null) {\n          return null;\n        }\n        return p.typeA.getTypesUnderInequality(p.typeB);\n      }",
    "begin_line": 64,
    "end_line": 69,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SemanticReverseAbstractInterpreter.apply#79",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.apply(com.google.javascript.rhino.jstype.JSType.TypePair)",
    "snippet": "@Override\n      public TypePair apply(TypePair p) {\n        if (p.typeA \u003d\u003d null || p.typeB \u003d\u003d null) {\n          return null;\n        }\n        return p.typeA.getTypesUnderShallowEquality(p.typeB);\n      }",
    "begin_line": 79,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SemanticReverseAbstractInterpreter.apply#94",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.apply(com.google.javascript.rhino.jstype.JSType.TypePair)",
    "snippet": "@Override\n      public TypePair apply(TypePair p) {\n        if (p.typeA \u003d\u003d null || p.typeB \u003d\u003d null) {\n          return null;\n        }\n        return p.typeA.getTypesUnderShallowInequality(p.typeB);\n      }",
    "begin_line": 94,
    "end_line": 99,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SemanticReverseAbstractInterpreter.apply#109",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.apply(com.google.javascript.rhino.jstype.JSType.TypePair)",
    "snippet": "@Override\n      public TypePair apply(TypePair p) {\n        return new TypePair(\n            getRestrictedWithoutUndefined(p.typeA),\n            getRestrictedWithoutUndefined(p.typeB));\n      }",
    "begin_line": 109,
    "end_line": 113,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SemanticReverseAbstractInterpreter.SemanticReverseAbstractInterpreter#119",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SemanticReverseAbstractInterpreter(com.google.javascript.jscomp.CodingConvention, com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": "public SemanticReverseAbstractInterpreter(CodingConvention convention,\n      JSTypeRegistry typeRegistry) {\n    super(convention, typeRegistry);\n  }",
    "begin_line": 119,
    "end_line": 122,
    "comment": "/** \n * Creates a semantic reverse abstract interpreter.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SemanticReverseAbstractInterpreter.getPreciserScopeKnowingConditionOutcome#125",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.getPreciserScopeKnowingConditionOutcome(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope, boolean)",
    "snippet": "@Override\n  public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition,\n      FlowScope blindScope, boolean outcome) {\n    // Check for the typeof operator.\n    int operatorToken \u003d condition.getType();\n    switch (operatorToken) {\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.CASE:\n        Node left;\n        Node right;\n        if (operatorToken \u003d\u003d Token.CASE) {\n          left \u003d condition.getParent().getFirstChild(); // the switch condition\n          right \u003d condition.getFirstChild();\n        } else {\n          left \u003d condition.getFirstChild();\n          right \u003d condition.getLastChild();\n        }\n\n        Node typeOfNode \u003d null;\n        Node stringNode \u003d null;\n        if (left.isTypeOf() \u0026\u0026 right.isString()) {\n          typeOfNode \u003d left;\n          stringNode \u003d right;\n        } else if (right.isTypeOf() \u0026\u0026\n                   left.isString()) {\n          typeOfNode \u003d right;\n          stringNode \u003d left;\n        }\n        if (typeOfNode !\u003d null \u0026\u0026 stringNode !\u003d null) {\n          Node operandNode \u003d typeOfNode.getFirstChild();\n          JSType operandType \u003d getTypeIfRefinable(operandNode, blindScope);\n          if (operandType !\u003d null) {\n            boolean resultEqualsValue \u003d operatorToken \u003d\u003d Token.EQ ||\n                operatorToken \u003d\u003d Token.SHEQ || operatorToken \u003d\u003d Token.CASE;\n            if (!outcome) {\n              resultEqualsValue \u003d !resultEqualsValue;\n            }\n            return caseTypeOf(operandNode, operandType, stringNode.getString(),\n                resultEqualsValue, blindScope);\n          }\n        }\n    }\n    switch (operatorToken) {\n      case Token.AND:\n        if (outcome) {\n          return caseAndOrNotShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, true);\n        } else {\n          return caseAndOrMaybeShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, true);\n        }\n\n      case Token.OR:\n        if (!outcome) {\n          return caseAndOrNotShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, false);\n        } else {\n          return caseAndOrMaybeShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, false);\n        }\n\n      case Token.EQ:\n        if (outcome) {\n          return caseEquality(condition, blindScope, EQ);\n        } else {\n          return caseEquality(condition, blindScope, NE);\n        }\n\n      case Token.NE:\n        if (outcome) {\n          return caseEquality(condition, blindScope, NE);\n        } else {\n          return caseEquality(condition, blindScope, EQ);\n        }\n\n      case Token.SHEQ:\n        if (outcome) {\n          return caseEquality(condition, blindScope, SHEQ);\n        } else {\n          return caseEquality(condition, blindScope, SHNE);\n        }\n\n      case Token.SHNE:\n        if (outcome) {\n          return caseEquality(condition, blindScope, SHNE);\n        } else {\n          return caseEquality(condition, blindScope, SHEQ);\n        }\n\n      case Token.NAME:\n      case Token.GETPROP:\n        return caseNameOrGetProp(condition, blindScope, outcome);\n\n      case Token.ASSIGN:\n        return firstPreciserScopeKnowingConditionOutcome(\n            condition.getFirstChild(),\n            firstPreciserScopeKnowingConditionOutcome(\n                condition.getFirstChild().getNext(), blindScope, outcome),\n            outcome);\n\n      case Token.NOT:\n        return firstPreciserScopeKnowingConditionOutcome(\n            condition.getFirstChild(), blindScope, !outcome);\n\n      case Token.LE:\n      case Token.LT:\n      case Token.GE:\n      case Token.GT:\n        if (outcome) {\n          return caseEquality(condition, blindScope, INEQ);\n        }\n        break;\n\n      case Token.INSTANCEOF:\n        return caseInstanceOf(\n            condition.getFirstChild(), condition.getLastChild(), blindScope,\n            outcome);\n\n      case Token.IN:\n        if (outcome \u0026\u0026 condition.getFirstChild().isString()) {\n          return caseIn(condition.getLastChild(),\n              condition.getFirstChild().getString(), blindScope);\n        }\n        break;\n\n      case Token.CASE:\n        Node left \u003d\n            condition.getParent().getFirstChild(); // the switch condition\n        Node right \u003d condition.getFirstChild();\n        if (outcome) {\n          return caseEquality(left, right, blindScope, SHEQ);\n        } else {\n          return caseEquality(left, right, blindScope, SHNE);\n        }\n    }\n    return nextPreciserScopeKnowingConditionOutcome(\n        condition, blindScope, outcome);\n  }",
    "begin_line": 125,
    "end_line": 264,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SemanticReverseAbstractInterpreter.caseEquality#266",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseEquality(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope, Function\u003cTypePair,TypePair\u003e)",
    "snippet": "private FlowScope caseEquality(Node condition, FlowScope blindScope,\n      Function\u003cTypePair, TypePair\u003e merging) {\n    return caseEquality(condition.getFirstChild(), condition.getLastChild(),\n                        blindScope, merging);\n  }",
    "begin_line": 266,
    "end_line": 270,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SemanticReverseAbstractInterpreter.caseEquality#272",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseEquality(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope, Function\u003cTypePair,TypePair\u003e)",
    "snippet": "private FlowScope caseEquality(Node left, Node right, FlowScope blindScope,\n      Function\u003cTypePair, TypePair\u003e merging) {\n    // left type\n    JSType leftType \u003d getTypeIfRefinable(left, blindScope);\n    boolean leftIsRefineable;\n    if (leftType !\u003d null) {\n      leftIsRefineable \u003d true;\n    } else {\n      leftIsRefineable \u003d false;\n      leftType \u003d left.getJSType();\n    }\n\n    // right type\n    JSType rightType \u003d getTypeIfRefinable(right, blindScope);\n    boolean rightIsRefineable;\n    if (rightType !\u003d null) {\n      rightIsRefineable \u003d true;\n    } else {\n      rightIsRefineable \u003d false;\n      rightType \u003d right.getJSType();\n    }\n\n    // merged types\n    TypePair merged \u003d merging.apply(new TypePair(leftType, rightType));\n\n    // creating new scope\n    if (merged !\u003d null) {\n      return maybeRestrictTwoNames(\n          blindScope,\n          left, leftType, leftIsRefineable ? merged.typeA : null,\n          right, rightType, rightIsRefineable ? merged.typeB : null);\n    }\n    return blindScope;\n  }",
    "begin_line": 272,
    "end_line": 305,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SemanticReverseAbstractInterpreter.caseAndOrNotShortCircuiting#307",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseAndOrNotShortCircuiting(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope, boolean)",
    "snippet": "private FlowScope caseAndOrNotShortCircuiting(Node left, Node right,\n        FlowScope blindScope, boolean condition) {\n    // left type\n    JSType leftType \u003d getTypeIfRefinable(left, blindScope);\n    boolean leftIsRefineable;\n    if (leftType !\u003d null) {\n      leftIsRefineable \u003d true;\n    } else {\n      leftIsRefineable \u003d false;\n      leftType \u003d left.getJSType();\n      blindScope \u003d firstPreciserScopeKnowingConditionOutcome(\n          left, blindScope, condition);\n    }\n\n    // restricting left type\n    JSType restrictedLeftType \u003d (leftType \u003d\u003d null) ? null :\n        leftType.getRestrictedTypeGivenToBooleanOutcome(condition);\n    if (restrictedLeftType \u003d\u003d null) {\n      return firstPreciserScopeKnowingConditionOutcome(\n          right, blindScope, condition);\n    }\n\n    // right type\n    JSType rightType \u003d getTypeIfRefinable(right, blindScope);\n    boolean rightIsRefineable;\n    if (rightType !\u003d null) {\n      rightIsRefineable \u003d true;\n    } else {\n      rightIsRefineable \u003d false;\n      rightType \u003d right.getJSType();\n      blindScope \u003d firstPreciserScopeKnowingConditionOutcome(\n          right, blindScope, condition);\n    }\n\n    if (condition) {\n      JSType restrictedRightType \u003d (rightType \u003d\u003d null) ? null :\n          rightType.getRestrictedTypeGivenToBooleanOutcome(condition);\n\n      // creating new scope\n      return maybeRestrictTwoNames(\n          blindScope,\n          left, leftType, leftIsRefineable ? restrictedLeftType : null,\n          right, rightType, rightIsRefineable ? restrictedRightType : null);\n    }\n    return blindScope;\n  }",
    "begin_line": 307,
    "end_line": 352,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SemanticReverseAbstractInterpreter.caseAndOrMaybeShortCircuiting#354",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseAndOrMaybeShortCircuiting(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope, boolean)",
    "snippet": "private FlowScope caseAndOrMaybeShortCircuiting(Node left, Node right,\n      FlowScope blindScope, boolean condition) {\n    FlowScope leftScope \u003d firstPreciserScopeKnowingConditionOutcome(\n        left, blindScope, !condition);\n    StaticSlot\u003cJSType\u003e leftVar \u003d leftScope.findUniqueRefinedSlot(blindScope);\n    if (leftVar \u003d\u003d null) {\n      return blindScope;\n    }\n    FlowScope rightScope \u003d firstPreciserScopeKnowingConditionOutcome(\n        left, blindScope, condition);\n    rightScope \u003d firstPreciserScopeKnowingConditionOutcome(\n        right, rightScope, !condition);\n    StaticSlot\u003cJSType\u003e rightVar \u003d rightScope.findUniqueRefinedSlot(blindScope);\n    if (rightVar \u003d\u003d null || !leftVar.getName().equals(rightVar.getName())) {\n      return blindScope;\n    }\n    JSType type \u003d leftVar.getType().getLeastSupertype(rightVar.getType());\n    FlowScope informed \u003d blindScope.createChildFlowScope();\n    informed.inferSlotType(leftVar.getName(), type);\n    return informed;\n  }",
    "begin_line": 354,
    "end_line": 374,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SemanticReverseAbstractInterpreter.maybeRestrictName#392",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.maybeRestrictName(com.google.javascript.jscomp.type.FlowScope, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private FlowScope maybeRestrictName(\n      FlowScope blindScope, Node node, JSType originalType, JSType restrictedType) {\n    if (restrictedType !\u003d null \u0026\u0026 restrictedType !\u003d originalType) {\n      FlowScope informed \u003d blindScope.createChildFlowScope();\n      declareNameInScope(informed, node, restrictedType);\n      return informed;\n    }\n    return blindScope;\n  }",
    "begin_line": 392,
    "end_line": 400,
    "comment": "/** \n * If the restrictedType differs from the originalType, then we should branch the current flow scope and create a new flow scope with the name declared with the new type. We try not to create spurious child flow scopes as this makes type inference slower. We also do not want spurious slots around in type inference, because we use these as a signal for \"checked unknown\" types. A \"checked unknown\" type is a symbol that the programmer has already checked and verified that it\u0027s defined, even if we don\u0027t know what it is. It is OK to pass non-name nodes into this method, as long as you pass in  {@code null} for a restricted type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SemanticReverseAbstractInterpreter.maybeRestrictTwoNames#405",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.maybeRestrictTwoNames(com.google.javascript.jscomp.type.FlowScope, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private FlowScope maybeRestrictTwoNames(\n      FlowScope blindScope,\n      Node left, JSType originalLeftType, JSType restrictedLeftType,\n      Node right, JSType originalRightType, JSType restrictedRightType) {\n    boolean shouldRefineLeft \u003d\n        restrictedLeftType !\u003d null \u0026\u0026 restrictedLeftType !\u003d originalLeftType;\n    boolean shouldRefineRight \u003d\n        restrictedRightType !\u003d null \u0026\u0026 restrictedRightType !\u003d originalRightType;\n    if (shouldRefineLeft || shouldRefineRight) {\n      FlowScope informed \u003d blindScope.createChildFlowScope();\n      if (shouldRefineLeft) {\n        declareNameInScope(informed, left, restrictedLeftType);\n      }\n      if (shouldRefineRight) {\n        declareNameInScope(informed, right, restrictedRightType);\n      }\n      return informed;\n    }\n    return blindScope;\n  }",
    "begin_line": 405,
    "end_line": 424,
    "comment": "/** \n * @see #maybeRestrictName\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SemanticReverseAbstractInterpreter.caseNameOrGetProp#426",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseNameOrGetProp(com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope, boolean)",
    "snippet": "private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope,\n      boolean outcome) {\n    JSType type \u003d getTypeIfRefinable(name, blindScope);\n    if (type !\u003d null) {\n      return maybeRestrictName(\n          blindScope, name, type,\n          type.getRestrictedTypeGivenToBooleanOutcome(outcome));\n    }\n    return blindScope;\n  }",
    "begin_line": 426,
    "end_line": 435,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SemanticReverseAbstractInterpreter.caseTypeOf#437",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseTypeOf(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, java.lang.String, boolean, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private FlowScope caseTypeOf(Node node, JSType type, String value,\n        boolean resultEqualsValue, FlowScope blindScope) {\n    return maybeRestrictName(\n        blindScope, node, type,\n        getRestrictedByTypeOfResult(type, value, resultEqualsValue));\n  }",
    "begin_line": 437,
    "end_line": 442,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SemanticReverseAbstractInterpreter.caseInstanceOf#444",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseInstanceOf(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope, boolean)",
    "snippet": "private FlowScope caseInstanceOf(Node left, Node right, FlowScope blindScope,\n      boolean outcome) {\n    JSType leftType \u003d getTypeIfRefinable(left, blindScope);\n    if (leftType \u003d\u003d null) {\n      return blindScope;\n    }\n    JSType rightType \u003d right.getJSType();\n    ObjectType targetType \u003d\n        typeRegistry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n    if (rightType !\u003d null \u0026\u0026 rightType.isFunctionType()) {\n      targetType \u003d rightType.toMaybeFunctionType();\n    }\n    Visitor\u003cJSType\u003e visitor;\n    if (outcome) {\n      visitor \u003d new RestrictByTrueInstanceOfResultVisitor(targetType);\n    } else {\n      visitor \u003d new RestrictByFalseInstanceOfResultVisitor(targetType);\n    }\n    return maybeRestrictName(\n        blindScope, left, leftType, leftType.visit(visitor));\n  }",
    "begin_line": 444,
    "end_line": 464,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SemanticReverseAbstractInterpreter.caseIn#473",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseIn(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.jscomp.type.FlowScope)",
    "snippet": "private FlowScope caseIn(Node object, String propertyName, FlowScope blindScope) {\n    JSType jsType \u003d object.getJSType();\n    jsType \u003d this.getRestrictedWithoutNull(jsType);\n    jsType \u003d this.getRestrictedWithoutUndefined(jsType);\n\n    boolean hasProperty \u003d false;\n    ObjectType objectType \u003d ObjectType.cast(jsType);\n    if (objectType !\u003d null) {\n      hasProperty \u003d objectType.hasProperty(propertyName);\n    }\n    if (!hasProperty) {\n      String qualifiedName \u003d object.getQualifiedName();\n      if (qualifiedName !\u003d null) {\n        String propertyQualifiedName \u003d qualifiedName + \".\" + propertyName;\n        if (blindScope.getSlot(propertyQualifiedName) \u003d\u003d null) {\n          FlowScope informed \u003d blindScope.createChildFlowScope();\n          JSType unknownType \u003d typeRegistry.getNativeType(\n              JSTypeNative.UNKNOWN_TYPE);\n          informed.inferQualifiedSlot(\n              object, propertyQualifiedName, unknownType, unknownType);\n          return informed;\n        }\n      }\n    }\n    return blindScope;\n  }",
    "begin_line": 473,
    "end_line": 498,
    "comment": "/** \n * Given \u0027property in object\u0027, ensures that the object has the property in the informed scope by defining it as a qualified name if the object type lacks the property and it\u0027s not in the blind scope.\n * @param object The node of the right-side of the in.\n * @param propertyName The string of the left-side of the in.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTrueInstanceOfResultVisitor.RestrictByTrueInstanceOfResultVisitor#507",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByTrueInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": " RestrictByTrueInstanceOfResultVisitor(ObjectType target) {\n      this.target \u003d target;\n    }",
    "begin_line": 507,
    "end_line": 509,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTrueInstanceOfResultVisitor.caseTopType#512",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseTopType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n    protected JSType caseTopType(JSType type) {\n      return applyCommonRestriction(type);\n    }",
    "begin_line": 512,
    "end_line": 514,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTrueInstanceOfResultVisitor.caseUnknownType#517",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseUnknownType()",
    "snippet": "@Override\n    public JSType caseUnknownType() {\n      FunctionType funcTarget \u003d JSType.toMaybeFunctionType(target);\n      if (funcTarget !\u003d null \u0026\u0026 funcTarget.hasInstanceType()) {\n        return funcTarget.getInstanceType();\n      }\n      return getNativeType(UNKNOWN_TYPE);\n    }",
    "begin_line": 517,
    "end_line": 523,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTrueInstanceOfResultVisitor.caseObjectType#526",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseObjectType(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "@Override\n    public JSType caseObjectType(ObjectType type) {\n      return applyCommonRestriction(type);\n    }",
    "begin_line": 526,
    "end_line": 528,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTrueInstanceOfResultVisitor.caseUnionType#531",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseUnionType(com.google.javascript.rhino.jstype.UnionType)",
    "snippet": "@Override\n    public JSType caseUnionType(UnionType type) {\n      return applyCommonRestriction(type);\n    }",
    "begin_line": 531,
    "end_line": 533,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTrueInstanceOfResultVisitor.caseFunctionType#536",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseFunctionType(com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "@Override\n    public JSType caseFunctionType(FunctionType type) {\n      return caseObjectType(type);\n    }",
    "begin_line": 536,
    "end_line": 538,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByTrueInstanceOfResultVisitor.applyCommonRestriction#540",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.applyCommonRestriction(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private JSType applyCommonRestriction(JSType type) {\n      if (target.isUnknownType()) {\n        return type;\n      }\n\n      FunctionType funcTarget \u003d target.toMaybeFunctionType();\n      if (funcTarget.hasInstanceType()) {\n        return type.getGreatestSubtype(funcTarget.getInstanceType());\n      }\n\n      return null;\n    }",
    "begin_line": 540,
    "end_line": 551,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByFalseInstanceOfResultVisitor.RestrictByFalseInstanceOfResultVisitor#561",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByFalseInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": " RestrictByFalseInstanceOfResultVisitor(ObjectType target) {\n      this.target \u003d target;\n    }",
    "begin_line": 561,
    "end_line": 563,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByFalseInstanceOfResultVisitor.caseObjectType#566",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseObjectType(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "@Override\n    public JSType caseObjectType(ObjectType type) {\n      if (target.isUnknownType()) {\n        return type;\n      }\n\n      FunctionType funcTarget \u003d target.toMaybeFunctionType();\n      if (funcTarget.hasInstanceType()) {\n        if (type.isSubtype(funcTarget.getInstanceType())) {\n          return null;\n        }\n\n        return type;\n      }\n\n      return null;\n    }",
    "begin_line": 566,
    "end_line": 581,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByFalseInstanceOfResultVisitor.caseUnionType#584",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseUnionType(com.google.javascript.rhino.jstype.UnionType)",
    "snippet": "@Override\n    public JSType caseUnionType(UnionType type) {\n      if (target.isUnknownType()) {\n        return type;\n      }\n\n      FunctionType funcTarget \u003d target.toMaybeFunctionType();\n      if (funcTarget.hasInstanceType()) {\n        return type.getRestrictedUnion(funcTarget.getInstanceType());\n      }\n\n      return null;\n    }",
    "begin_line": 584,
    "end_line": 595,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RestrictByFalseInstanceOfResultVisitor.caseFunctionType#598",
    "is_bug": true,
    "src_path": "com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
    "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
    "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseFunctionType(com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "@Override\n    public JSType caseFunctionType(FunctionType type) {\n      return caseObjectType(type);\n    }",
    "begin_line": 598,
    "end_line": 600,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.IR#51",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.IR()",
    "snippet": "private IR() {}",
    "begin_line": 51,
    "end_line": 51,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.empty#53",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.empty()",
    "snippet": "public static Node empty() {\n    return new Node(Token.EMPTY);\n  }",
    "begin_line": 53,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.function#57",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.function(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node function(Node name, Node params, Node body) {\n    Preconditions.checkState(name.isName());\n    Preconditions.checkState(params.isParamList());\n    Preconditions.checkState(body.isBlock());\n    return new Node(Token.FUNCTION, name, params, body);\n  }",
    "begin_line": 57,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.paramList#64",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.paramList()",
    "snippet": "public static Node paramList() {\n    return new Node(Token.PARAM_LIST);\n  }",
    "begin_line": 64,
    "end_line": 66,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.paramList#68",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.paramList(com.google.javascript.rhino.Node)",
    "snippet": "public static Node paramList(Node param) {\n    Preconditions.checkState(param.isName());\n    return new Node(Token.PARAM_LIST, param);\n  }",
    "begin_line": 68,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.paramList#73",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.paramList(com.google.javascript.rhino.Node)",
    "snippet": "public static Node paramList(Node ... params) {\n    Node paramList \u003d paramList();\n    for (Node param : params) {\n      Preconditions.checkState(param.isName());\n      paramList.addChildToBack(param);\n    }\n    return paramList;\n  }",
    "begin_line": 73,
    "end_line": 80,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.paramList#82",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.paramList(java.util.List\u003ccom.google.javascript.rhino.Node\u003e)",
    "snippet": "public static Node paramList(List\u003cNode\u003e params) {\n    Node paramList \u003d paramList();\n    for (Node param : params) {\n      Preconditions.checkState(param.isName());\n      paramList.addChildToBack(param);\n    }\n    return paramList;\n  }",
    "begin_line": 82,
    "end_line": 89,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.block#91",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.block()",
    "snippet": "public static Node block() {\n    Node block \u003d new Node(Token.BLOCK);\n    return block;\n  }",
    "begin_line": 91,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.block#96",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.block(com.google.javascript.rhino.Node)",
    "snippet": "public static Node block(Node stmt) {\n    Preconditions.checkState(mayBeStatement(stmt));\n    Node block \u003d new Node(Token.BLOCK, stmt);\n    return block;\n  }",
    "begin_line": 96,
    "end_line": 100,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.block#102",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.block(com.google.javascript.rhino.Node)",
    "snippet": "public static Node block(Node ... stmts) {\n    Node block \u003d block();\n    for (Node stmt : stmts) {\n      Preconditions.checkState(mayBeStatement(stmt));\n      block.addChildToBack(stmt);\n    }\n    return block;\n  }",
    "begin_line": 102,
    "end_line": 109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.block#111",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.block(java.util.List\u003ccom.google.javascript.rhino.Node\u003e)",
    "snippet": "public static Node block(List\u003cNode\u003e stmts) {\n    Node paramList \u003d block();\n    for (Node stmt : stmts) {\n      Preconditions.checkState(mayBeStatement(stmt));\n      paramList.addChildToBack(stmt);\n    }\n    return paramList;\n  }",
    "begin_line": 111,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.blockUnchecked#120",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.blockUnchecked(com.google.javascript.rhino.Node)",
    "snippet": "private static Node blockUnchecked(Node stmt) {\n    return new Node(Token.BLOCK, stmt);\n  }",
    "begin_line": 120,
    "end_line": 122,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.script#124",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.script()",
    "snippet": "public static Node script() {\n    // TODO(johnlenz): finish setting up the SCRIPT node\n    Node block \u003d new Node(Token.SCRIPT);\n    return block;\n  }",
    "begin_line": 124,
    "end_line": 128,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.script#130",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.script(com.google.javascript.rhino.Node)",
    "snippet": "public static Node script(Node ... stmts) {\n    Node block \u003d script();\n    for (Node stmt : stmts) {\n      Preconditions.checkState(mayBeStatementNoReturn(stmt));\n      block.addChildToBack(stmt);\n    }\n    return block;\n  }",
    "begin_line": 130,
    "end_line": 137,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.script#139",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.script(java.util.List\u003ccom.google.javascript.rhino.Node\u003e)",
    "snippet": "public static Node script(List\u003cNode\u003e stmts) {\n    Node paramList \u003d script();\n    for (Node stmt : stmts) {\n      Preconditions.checkState(mayBeStatementNoReturn(stmt));\n      paramList.addChildToBack(stmt);\n    }\n    return paramList;\n  }",
    "begin_line": 139,
    "end_line": 146,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.var#148",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.var(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node var(Node name, Node value) {\n    Preconditions.checkState(name.isName() \u0026\u0026 !name.hasChildren());\n    Preconditions.checkState(mayBeExpression(value));\n    name.addChildToFront(value);\n    return var(name);\n  }",
    "begin_line": 148,
    "end_line": 153,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.var#155",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.var(com.google.javascript.rhino.Node)",
    "snippet": "public static Node var(Node name) {\n    Preconditions.checkState(name.isName());\n    return new Node(Token.VAR, name);\n  }",
    "begin_line": 155,
    "end_line": 158,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.returnNode#160",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.returnNode()",
    "snippet": "public static Node returnNode() {\n    return new Node(Token.RETURN);\n  }",
    "begin_line": 160,
    "end_line": 162,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.returnNode#164",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.returnNode(com.google.javascript.rhino.Node)",
    "snippet": "public static Node returnNode(Node expr) {\n    Preconditions.checkState(mayBeExpression(expr));\n    return new Node(Token.RETURN, expr);\n  }",
    "begin_line": 164,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.throwNode#169",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.throwNode(com.google.javascript.rhino.Node)",
    "snippet": "public static Node throwNode(Node expr) {\n    Preconditions.checkState(mayBeExpression(expr));\n    return new Node(Token.THROW, expr);\n  }",
    "begin_line": 169,
    "end_line": 172,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.exprResult#174",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.exprResult(com.google.javascript.rhino.Node)",
    "snippet": "public static Node exprResult(Node expr) {\n    Preconditions.checkState(mayBeExpression(expr));\n    return new Node(Token.EXPR_RESULT, expr);\n  }",
    "begin_line": 174,
    "end_line": 177,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.ifNode#179",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.ifNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node ifNode(Node cond, Node then) {\n    Preconditions.checkState(mayBeExpression(cond));\n    Preconditions.checkState(then.isBlock());\n    return new Node(Token.IF, cond, then);\n  }",
    "begin_line": 179,
    "end_line": 183,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.ifNode#185",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.ifNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node ifNode(Node cond, Node then, Node elseNode) {\n    Preconditions.checkState(mayBeExpression(cond));\n    Preconditions.checkState(then.isBlock());\n    Preconditions.checkState(elseNode.isBlock());\n    return new Node(Token.IF, cond, then, elseNode);\n  }",
    "begin_line": 185,
    "end_line": 190,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.doNode#192",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.doNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node doNode(Node body, Node cond) {\n    Preconditions.checkState(body.isBlock());\n    Preconditions.checkState(mayBeExpression(cond));\n    return new Node(Token.DO, body, cond);\n  }",
    "begin_line": 192,
    "end_line": 196,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.forIn#198",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.forIn(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node forIn(Node target, Node cond, Node body) {\n    Preconditions.checkState(target.isVar() || mayBeExpression(target));\n    Preconditions.checkState(mayBeExpression(cond));\n    Preconditions.checkState(body.isBlock());\n    return new Node(Token.FOR, target, cond, body);\n  }",
    "begin_line": 198,
    "end_line": 203,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.forNode#205",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.forNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node forNode(Node init, Node cond, Node incr, Node body) {\n    Preconditions.checkState(init.isVar() || mayBeExpressionOrEmpty(init));\n    Preconditions.checkState(mayBeExpressionOrEmpty(cond));\n    Preconditions.checkState(mayBeExpressionOrEmpty(incr));\n    Preconditions.checkState(body.isBlock());\n    return new Node(Token.FOR, init, cond, incr, body);\n  }",
    "begin_line": 205,
    "end_line": 211,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.switchNode#213",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.switchNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node switchNode(Node cond, Node ... cases) {\n    Preconditions.checkState(mayBeExpression(cond));\n    Node switchNode \u003d new Node(Token.SWITCH, cond);\n    for (Node caseNode : cases) {\n      Preconditions.checkState(caseNode.isCase() || caseNode.isDefaultCase());\n      switchNode.addChildToBack(caseNode);\n    }\n    return switchNode;\n  }",
    "begin_line": 213,
    "end_line": 221,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.caseNode#223",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.caseNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node caseNode(Node expr, Node body) {\n    Preconditions.checkState(mayBeExpression(expr));\n    Preconditions.checkState(body.isBlock());\n    body.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);\n    return new Node(Token.CASE, expr, body);\n  }",
    "begin_line": 223,
    "end_line": 228,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.defaultCase#230",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.defaultCase(com.google.javascript.rhino.Node)",
    "snippet": "public static Node defaultCase(Node body) {\n    Preconditions.checkState(body.isBlock());\n    body.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);\n    return new Node(Token.DEFAULT_CASE, body);\n  }",
    "begin_line": 230,
    "end_line": 234,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.label#236",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.label(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node label(Node name, Node stmt) {\n    // TODO(johnlenz): additional validation here.\n    Preconditions.checkState(name.isLabelName());\n    Preconditions.checkState(mayBeStatement(stmt));\n    Node block \u003d new Node(Token.LABEL, name, stmt);\n    return block;\n  }",
    "begin_line": 236,
    "end_line": 242,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.labelName#244",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.labelName(java.lang.String)",
    "snippet": "public static Node labelName(String name) {\n    Preconditions.checkState(!name.isEmpty());\n    return Node.newString(Token.LABEL_NAME, name);\n  }",
    "begin_line": 244,
    "end_line": 247,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.tryFinally#249",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.tryFinally(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node tryFinally(Node tryBody, Node finallyBody) {\n    Preconditions.checkState(tryBody.isBlock());\n    Preconditions.checkState(finallyBody.isBlock());\n    Node catchBody \u003d block().copyInformationFrom(tryBody);\n    return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n  }",
    "begin_line": 249,
    "end_line": 254,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.tryCatch#256",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.tryCatch(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node tryCatch(Node tryBody, Node catchNode) {\n    Preconditions.checkState(tryBody.isBlock());\n    Preconditions.checkState(catchNode.isCatch());\n    Node catchBody \u003d blockUnchecked(catchNode).copyInformationFrom(catchNode);\n    return new Node(Token.TRY, tryBody, catchBody);\n  }",
    "begin_line": 256,
    "end_line": 261,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.tryCatchFinally#263",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.tryCatchFinally(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node tryCatchFinally(\n      Node tryBody, Node catchNode, Node finallyBody) {\n    Preconditions.checkState(finallyBody.isBlock());\n    Node tryNode \u003d tryCatch(tryBody, catchNode);\n    tryNode.addChildToBack(finallyBody);\n    return tryNode;\n  }",
    "begin_line": 263,
    "end_line": 269,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.catchNode#271",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.catchNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node catchNode(Node expr, Node body) {\n    Preconditions.checkState(expr.isName());\n    Preconditions.checkState(body.isBlock());\n    return new Node(Token.CATCH, expr, body);\n  }",
    "begin_line": 271,
    "end_line": 275,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.breakNode#277",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.breakNode()",
    "snippet": "public static Node breakNode() {\n    return new Node(Token.BREAK);\n  }",
    "begin_line": 277,
    "end_line": 279,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.breakNode#281",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.breakNode(com.google.javascript.rhino.Node)",
    "snippet": "public static Node breakNode(Node name) {\n    // TODO(johnlenz): additional validation here.\n    Preconditions.checkState(name.isLabelName());\n    return new Node(Token.BREAK, name);\n  }",
    "begin_line": 281,
    "end_line": 285,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.continueNode#287",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.continueNode()",
    "snippet": "public static Node continueNode() {\n    return new Node(Token.CONTINUE);\n  }",
    "begin_line": 287,
    "end_line": 289,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.continueNode#291",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.continueNode(com.google.javascript.rhino.Node)",
    "snippet": "public static Node continueNode(Node name) {\n    // TODO(johnlenz): additional validation here.\n    Preconditions.checkState(name.isLabelName());\n    return new Node(Token.CONTINUE, name);\n  }",
    "begin_line": 291,
    "end_line": 295,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.call#300",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.call(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node call(Node target, Node ... args) {\n    Node call \u003d new Node(Token.CALL, target);\n    for (Node arg : args) {\n      Preconditions.checkState(mayBeExpression(arg));\n      call.addChildToBack(arg);\n    }\n    return call;\n  }",
    "begin_line": 300,
    "end_line": 307,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.newNode#309",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.newNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node newNode(Node target, Node ... args) {\n    Node newcall \u003d new Node(Token.NEW, target);\n    for (Node arg : args) {\n      Preconditions.checkState(mayBeExpression(arg));\n      newcall.addChildToBack(arg);\n    }\n    return newcall;\n  }",
    "begin_line": 309,
    "end_line": 316,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.name#318",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.name(java.lang.String)",
    "snippet": "public static Node name(String name) {\n    return Node.newString(Token.NAME, name);\n  }",
    "begin_line": 318,
    "end_line": 320,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.getprop#322",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.getprop(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node getprop(Node target, Node prop) {\n    Preconditions.checkState(mayBeExpression(target));\n    Preconditions.checkState(prop.isString());\n    return new Node(Token.GETPROP, target, prop);\n  }",
    "begin_line": 322,
    "end_line": 326,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.getelem#328",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.getelem(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node getelem(Node target, Node elem) {\n    Preconditions.checkState(mayBeExpression(target));\n    Preconditions.checkState(mayBeExpression(elem));\n    return new Node(Token.GETELEM, target, elem);\n  }",
    "begin_line": 328,
    "end_line": 332,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.assign#334",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.assign(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node assign(Node target, Node expr) {\n    Preconditions.checkState(isAssignmentTarget(target));\n    Preconditions.checkState(mayBeExpression(expr));\n    return new Node(Token.ASSIGN, target, expr);\n  }",
    "begin_line": 334,
    "end_line": 338,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.hook#340",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.hook(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node hook(Node cond, Node trueval, Node falseval) {\n    Preconditions.checkState(mayBeExpression(cond));\n    Preconditions.checkState(mayBeExpression(trueval));\n    Preconditions.checkState(mayBeExpression(falseval));\n    return new Node(Token.HOOK, cond, trueval, falseval);\n  }",
    "begin_line": 340,
    "end_line": 345,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.comma#347",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.comma(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node comma(Node expr1, Node expr2) {\n    return binaryOp(Token.COMMA, expr1, expr2);\n  }",
    "begin_line": 347,
    "end_line": 349,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.and#351",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.and(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node and(Node expr1, Node expr2) {\n    return binaryOp(Token.AND, expr1, expr2);\n  }",
    "begin_line": 351,
    "end_line": 353,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.or#355",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.or(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node or(Node expr1, Node expr2) {\n    return binaryOp(Token.OR, expr1, expr2);\n  }",
    "begin_line": 355,
    "end_line": 357,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.not#359",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.not(com.google.javascript.rhino.Node)",
    "snippet": "public static Node not(Node expr1) {\n    return unaryOp(Token.NOT, expr1);\n  }",
    "begin_line": 359,
    "end_line": 361,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.eq#366",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.eq(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node eq(Node expr1, Node expr2) {\n    return binaryOp(Token.EQ, expr1, expr2);\n  }",
    "begin_line": 366,
    "end_line": 368,
    "comment": "/** \n * \"\u003d\u003d\"\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.sheq#373",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.sheq(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node sheq(Node expr1, Node expr2) {\n    return binaryOp(Token.SHEQ, expr1, expr2);\n  }",
    "begin_line": 373,
    "end_line": 375,
    "comment": "/** \n * \"\u003d\u003d\u003d\"\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.voidNode#377",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.voidNode(com.google.javascript.rhino.Node)",
    "snippet": "public static Node voidNode(Node expr1) {\n    return unaryOp(Token.VOID, expr1);\n  }",
    "begin_line": 377,
    "end_line": 379,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.neg#381",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.neg(com.google.javascript.rhino.Node)",
    "snippet": "public static Node neg(Node expr1) {\n    return unaryOp(Token.NEG, expr1);\n  }",
    "begin_line": 381,
    "end_line": 383,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.pos#385",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.pos(com.google.javascript.rhino.Node)",
    "snippet": "public static Node pos(Node expr1) {\n    return unaryOp(Token.POS, expr1);\n  }",
    "begin_line": 385,
    "end_line": 387,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.add#389",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.add(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node add(Node expr1, Node expr2) {\n    return binaryOp(Token.ADD, expr1, expr2);\n  }",
    "begin_line": 389,
    "end_line": 391,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.sub#393",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.sub(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node sub(Node expr1, Node expr2) {\n    return binaryOp(Token.SUB, expr1, expr2);\n  }",
    "begin_line": 393,
    "end_line": 395,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.objectlit#400",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.objectlit(com.google.javascript.rhino.Node)",
    "snippet": "public static Node objectlit(Node ... propdefs) {\n    Node objectlit \u003d new Node(Token.OBJECTLIT);\n    for (Node propdef : propdefs) {\n      Preconditions.checkState(\n          propdef.isStringKey() ||\n          propdef.isGetterDef() || propdef.isSetterDef());\n      Preconditions.checkState(propdef.hasOneChild());\n      objectlit.addChildToBack(propdef);\n    }\n    return objectlit;\n  }",
    "begin_line": 400,
    "end_line": 410,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.propdef#414",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.propdef(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node propdef(Node string, Node value) {\n    Preconditions.checkState(string.isStringKey());\n    Preconditions.checkState(!string.hasChildren());\n    Preconditions.checkState(mayBeExpression(value));\n    string.addChildToFront(value);\n    return string;\n  }",
    "begin_line": 414,
    "end_line": 420,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.arraylit#422",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.arraylit(com.google.javascript.rhino.Node)",
    "snippet": "public static Node arraylit(Node ... exprs) {\n    Node arraylit \u003d new Node(Token.ARRAYLIT);\n    for (Node expr : exprs) {\n      Preconditions.checkState(mayBeExpressionOrEmpty(expr));\n      arraylit.addChildToBack(expr);\n    }\n    return arraylit;\n  }",
    "begin_line": 422,
    "end_line": 429,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.regexp#431",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.regexp(com.google.javascript.rhino.Node)",
    "snippet": "public static Node regexp(Node expr) {\n    Preconditions.checkState(expr.isString());\n    return new Node(Token.REGEXP, expr);\n  }",
    "begin_line": 431,
    "end_line": 434,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.regexp#436",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.regexp(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public static Node regexp(Node expr, Node flags) {\n    Preconditions.checkState(expr.isString());\n    Preconditions.checkState(flags.isString());\n    return new Node(Token.REGEXP, expr, flags);\n  }",
    "begin_line": 436,
    "end_line": 440,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.string#442",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.string(java.lang.String)",
    "snippet": "public static Node string(String s) {\n    return Node.newString(s);\n  }",
    "begin_line": 442,
    "end_line": 444,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.stringKey#446",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.stringKey(java.lang.String)",
    "snippet": "public static Node stringKey(String s) {\n    return Node.newString(Token.STRING_KEY, s);\n  }",
    "begin_line": 446,
    "end_line": 448,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.number#450",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.number(double)",
    "snippet": "public static Node number(double d) {\n    return Node.newNumber(d);\n  }",
    "begin_line": 450,
    "end_line": 452,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.thisNode#454",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.thisNode()",
    "snippet": "public static Node thisNode() {\n    return new Node(Token.THIS);\n  }",
    "begin_line": 454,
    "end_line": 456,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.trueNode#458",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.trueNode()",
    "snippet": "public static Node trueNode() {\n    return new Node(Token.TRUE);\n  }",
    "begin_line": 458,
    "end_line": 460,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.falseNode#462",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.falseNode()",
    "snippet": "public static Node falseNode() {\n    return new Node(Token.FALSE);\n  }",
    "begin_line": 462,
    "end_line": 464,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.nullNode#466",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.nullNode()",
    "snippet": "public static Node nullNode() {\n    return new Node(Token.NULL);\n  }",
    "begin_line": 466,
    "end_line": 468,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.binaryOp#472",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.binaryOp(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "private static Node binaryOp(int token, Node expr1, Node expr2) {\n    Preconditions.checkState(mayBeExpression(expr1));\n    Preconditions.checkState(mayBeExpression(expr2));\n    return new Node(token, expr1, expr2);\n  }",
    "begin_line": 472,
    "end_line": 476,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.unaryOp#478",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.unaryOp(int, com.google.javascript.rhino.Node)",
    "snippet": "private static Node unaryOp(int token, Node expr) {\n    Preconditions.checkState(mayBeExpression(expr));\n    return new Node(token, expr);\n  }",
    "begin_line": 478,
    "end_line": 481,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.mayBeExpressionOrEmpty#483",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.mayBeExpressionOrEmpty(com.google.javascript.rhino.Node)",
    "snippet": "private static boolean mayBeExpressionOrEmpty(Node n) {\n    return n.isEmpty() || mayBeExpression(n);\n  }",
    "begin_line": 483,
    "end_line": 485,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.isAssignmentTarget#487",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.isAssignmentTarget(com.google.javascript.rhino.Node)",
    "snippet": "private static boolean isAssignmentTarget(Node n) {\n    return n.isName() || n.isGetProp() || n.isGetElem();\n  }",
    "begin_line": 487,
    "end_line": 489,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.mayBeStatementNoReturn#499",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.mayBeStatementNoReturn(com.google.javascript.rhino.Node)",
    "snippet": "private static boolean mayBeStatementNoReturn(Node n) {\n    switch (n.getType()) {\n      case Token.EMPTY:\n      case Token.FUNCTION:\n        // EMPTY and FUNCTION are used both in expression and statement\n        // contexts\n        return true;\n\n      case Token.BLOCK:\n      case Token.BREAK:\n      case Token.CONST:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.DO:\n      case Token.EXPR_RESULT:\n      case Token.FOR:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.SWITCH:\n      case Token.THROW:\n      case Token.TRY:\n      case Token.VAR:\n      case Token.WHILE:\n      case Token.WITH:\n        return true;\n\n      default:\n        return false;\n    }\n  }",
    "begin_line": 499,
    "end_line": 528,
    "comment": "/** \n * It isn\u0027t possible to always determine if a detached node is a expression, so make a best guess.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.mayBeStatement#534",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.mayBeStatement(com.google.javascript.rhino.Node)",
    "snippet": "private static boolean mayBeStatement(Node n) {\n    if (!mayBeStatementNoReturn(n)) {\n      return n.isReturn();\n    }\n    return true;\n  }",
    "begin_line": 534,
    "end_line": 539,
    "comment": "/** \n * It isn\u0027t possible to always determine if a detached node is a expression, so make a best guess.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IR.mayBeExpression#545",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/IR.java",
    "class_name": "com.google.javascript.rhino.IR",
    "signature": "com.google.javascript.rhino.IR.mayBeExpression(com.google.javascript.rhino.Node)",
    "snippet": "private static boolean mayBeExpression(Node n) {\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        // FUNCTION is used both in expression and statement\n        // contexts.\n        return true;\n\n      case Token.ADD:\n      case Token.AND:\n      case Token.ARRAYLIT:\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITNOT:\n      case Token.BITXOR:\n      case Token.CALL:\n      case Token.COMMA:\n      case Token.DEC:\n      case Token.DELPROP:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.FALSE:\n      case Token.GE:\n      case Token.GETPROP:\n      case Token.GETELEM:\n      case Token.GT:\n      case Token.HOOK:\n      case Token.IN:\n      case Token.INC:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NAME:\n      case Token.NE:\n      case Token.NEG:\n      case Token.NEW:\n      case Token.NOT:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.OBJECTLIT:\n      case Token.OR:\n      case Token.POS:\n      case Token.REGEXP:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.STRING:\n      case Token.SUB:\n      case Token.THIS:\n      case Token.TYPEOF:\n      case Token.TRUE:\n      case Token.URSH:\n      case Token.VOID:\n        return true;\n\n      default:\n        return false;\n    }\n  }",
    "begin_line": 545,
    "end_line": 617,
    "comment": "/** \n * It isn\u0027t possible to always determine if a detached node is a expression, so make a best guess.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InputId.InputId#51",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/InputId.java",
    "class_name": "com.google.javascript.rhino.InputId",
    "signature": "com.google.javascript.rhino.InputId.InputId(java.lang.String)",
    "snippet": "public InputId(String id) {\n    this.id \u003d id;\n  }",
    "begin_line": 51,
    "end_line": 53,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InputId.getIdName#55",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/InputId.java",
    "class_name": "com.google.javascript.rhino.InputId",
    "signature": "com.google.javascript.rhino.InputId.getIdName()",
    "snippet": "public String getIdName() {\n    return id;\n  }",
    "begin_line": 55,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InputId.hashCode#60",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/InputId.java",
    "class_name": "com.google.javascript.rhino.InputId",
    "signature": "com.google.javascript.rhino.InputId.hashCode()",
    "snippet": "@Override\n  public int hashCode() {\n    return id.hashCode();\n  }",
    "begin_line": 60,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InputId.equals#65",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/InputId.java",
    "class_name": "com.google.javascript.rhino.InputId",
    "signature": "com.google.javascript.rhino.InputId.equals(java.lang.Object)",
    "snippet": "@Override\n  public boolean equals(Object obj) {\n    if (this \u003d\u003d obj) return true;\n    if (obj \u003d\u003d null) return false;\n    if (getClass() !\u003d obj.getClass()) return false;\n    return id.equals(((InputId) obj).id);\n  }",
    "begin_line": 65,
    "end_line": 70,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InputId.toString#73",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/InputId.java",
    "class_name": "com.google.javascript.rhino.InputId",
    "signature": "com.google.javascript.rhino.InputId.toString()",
    "snippet": "@Override\n  public String toString() {\n    return \"InputId: \" + getIdName();\n  }",
    "begin_line": 73,
    "end_line": 75,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TrimmedStringPosition.setItem#135",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setItem(java.lang.String)",
    "snippet": "@Override public void setItem(String item) {\n      Preconditions.checkArgument(\n          item.charAt(0) !\u003d \u0027 \u0027 \u0026\u0026\n          item.charAt(item.length() - 1) !\u003d \u0027 \u0027,\n          \"String has leading or trailing whitespace\");\n      super.setItem(item);\n    }",
    "begin_line": 135,
    "end_line": 141,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypePosition.hasBrackets#158",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.hasBrackets()",
    "snippet": "public boolean hasBrackets() {\n      return brackets;\n    }",
    "begin_line": 158,
    "end_line": 160,
    "comment": "/** \n * Returns whether the type has curly braces around it. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypePosition.setHasBrackets#162",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setHasBrackets(boolean)",
    "snippet": "void setHasBrackets(boolean newVal) {\n      brackets \u003d newVal;\n    }",
    "begin_line": 162,
    "end_line": 164,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getAnnotation#187",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getAnnotation()",
    "snippet": "public StringPosition getAnnotation() {\n      return annotation;\n    }",
    "begin_line": 187,
    "end_line": 189,
    "comment": "/** \n * Gets the position information for the annotation name. (e.g., \"param\")\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setAnnotation#191",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setAnnotation(com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition)",
    "snippet": "void setAnnotation(TrimmedStringPosition p) {\n      annotation \u003d p;\n    }",
    "begin_line": 191,
    "end_line": 193,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getName#201",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getName()",
    "snippet": "@Deprecated\n    public StringPosition getName() {\n      return name;\n    }",
    "begin_line": 201,
    "end_line": 203,
    "comment": "/** \n * Gets the position information for the name found in a @param tag.\n * @deprecated Use #getNameNode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setName#205",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setName(com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition)",
    "snippet": "void setName(TrimmedStringPosition p) {\n      name \u003d p;\n    }",
    "begin_line": 205,
    "end_line": 207,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getNameNode#213",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getNameNode()",
    "snippet": "public SourcePosition\u003cNode\u003e getNameNode() {\n      return nameNode;\n    }",
    "begin_line": 213,
    "end_line": 215,
    "comment": "/** \n * Gets the position information for the name found in an @param tag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setNameNode#217",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setNameNode(com.google.javascript.rhino.SourcePosition\u003ccom.google.javascript.rhino.Node\u003e)",
    "snippet": "void setNameNode(SourcePosition\u003cNode\u003e p) {\n      nameNode \u003d p;\n    }",
    "begin_line": 217,
    "end_line": 219,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getDescription#225",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getDescription()",
    "snippet": "public StringPosition getDescription() {\n      return description;\n    }",
    "begin_line": 225,
    "end_line": 227,
    "comment": "/** \n * Gets the position information for the description found in a block tag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setDescription#229",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setDescription(com.google.javascript.rhino.JSDocInfo.StringPosition)",
    "snippet": "void setDescription(StringPosition p) {\n      description \u003d p;\n    }",
    "begin_line": 229,
    "end_line": 231,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getType#237",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getType()",
    "snippet": "public TypePosition getType() {\n      return type;\n    }",
    "begin_line": 237,
    "end_line": 239,
    "comment": "/** \n * Gets the position information for the type expression found in some block tags, like \"@param\" and \"@return\".\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setType#241",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setType(com.google.javascript.rhino.JSDocInfo.TypePosition)",
    "snippet": "void setType(TypePosition p) {\n      type \u003d p;\n    }",
    "begin_line": 241,
    "end_line": 243,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.JSDocInfo#334",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.JSDocInfo(boolean)",
    "snippet": " JSDocInfo(boolean includeDocumentation) {\n    this.includeDocumentation \u003d includeDocumentation;\n  }",
    "begin_line": 334,
    "end_line": 336,
    "comment": "/** \n * Creates a  {@link JSDocInfo} object. This object should be created usinga  {@link JSDocInfoBuilder}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.JSDocInfo#339",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.JSDocInfo()",
    "snippet": "public JSDocInfo() {}",
    "begin_line": 339,
    "end_line": 339,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setConsistentIdGenerator#341",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setConsistentIdGenerator(boolean)",
    "snippet": "void setConsistentIdGenerator(boolean value) {\n    setFlag(value, MASK_CONSISTIDGEN);\n  }",
    "begin_line": 341,
    "end_line": 343,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setStableIdGenerator#345",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setStableIdGenerator(boolean)",
    "snippet": "void setStableIdGenerator(boolean value) {\n    setFlag(value, MASK_STALBEIDGEN);\n  }",
    "begin_line": 345,
    "end_line": 347,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setConstant#349",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setConstant(boolean)",
    "snippet": "void setConstant(boolean value) {\n    setFlag(value, MASK_CONSTANT);\n  }",
    "begin_line": 349,
    "end_line": 351,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setConstructor#353",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setConstructor(boolean)",
    "snippet": "void setConstructor(boolean value) {\n    setFlag(value, MASK_CONSTRUCTOR);\n  }",
    "begin_line": 353,
    "end_line": 355,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setStruct#357",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setStruct()",
    "snippet": "void setStruct() {\n    setFlag(true, MASK_STRUCT);\n  }",
    "begin_line": 357,
    "end_line": 359,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setDict#361",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setDict()",
    "snippet": "void setDict() {\n    setFlag(true, MASK_DICT);\n  }",
    "begin_line": 361,
    "end_line": 363,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setDefine#365",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setDefine(boolean)",
    "snippet": "void setDefine(boolean value) {\n    setFlag(value, MASK_DEFINE);\n  }",
    "begin_line": 365,
    "end_line": 367,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setHidden#369",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setHidden(boolean)",
    "snippet": "void setHidden(boolean value) {\n    setFlag(value, MASK_HIDDEN);\n  }",
    "begin_line": 369,
    "end_line": 371,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setNoCheck#373",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setNoCheck(boolean)",
    "snippet": "void setNoCheck(boolean value) {\n    setFlag(value, MASK_NOCHECK);\n  }",
    "begin_line": 373,
    "end_line": 375,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setShouldPreserveTry#377",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setShouldPreserveTry(boolean)",
    "snippet": "void setShouldPreserveTry(boolean value) {\n    setFlag(value, MASK_PRESERVETRY);\n  }",
    "begin_line": 377,
    "end_line": 379,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setOverride#381",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setOverride(boolean)",
    "snippet": "void setOverride(boolean value) {\n    setFlag(value, MASK_OVERRIDE);\n  }",
    "begin_line": 381,
    "end_line": 383,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setNoAlias#385",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setNoAlias(boolean)",
    "snippet": "void setNoAlias(boolean value) {\n    setFlag(value, MASK_NOALIAS);\n  }",
    "begin_line": 385,
    "end_line": 387,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setDeprecated#390",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setDeprecated(boolean)",
    "snippet": "public void setDeprecated(boolean value) {\n    setFlag(value, MASK_DEPRECATED);\n  }",
    "begin_line": 390,
    "end_line": 392,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setInterface#394",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setInterface(boolean)",
    "snippet": "void setInterface(boolean value) {\n    setFlag(value, MASK_INTERFACE);\n  }",
    "begin_line": 394,
    "end_line": 396,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setExport#398",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setExport(boolean)",
    "snippet": "void setExport(boolean value) {\n    setFlag(value, MASK_EXPORT);\n  }",
    "begin_line": 398,
    "end_line": 400,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setExpose#402",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setExpose(boolean)",
    "snippet": "void setExpose(boolean value) {\n    setFlag(value, MASK_EXPOSE);\n  }",
    "begin_line": 402,
    "end_line": 404,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setNoShadow#406",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setNoShadow(boolean)",
    "snippet": "void setNoShadow(boolean value) {\n    setFlag(value, MASK_NOSHADOW);\n  }",
    "begin_line": 406,
    "end_line": 408,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setIdGenerator#410",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setIdGenerator(boolean)",
    "snippet": "void setIdGenerator(boolean value) {\n    setFlag(value, MASK_IDGEN);\n  }",
    "begin_line": 410,
    "end_line": 412,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setImplicitCast#414",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setImplicitCast(boolean)",
    "snippet": "void setImplicitCast(boolean value) {\n    setFlag(value, MASK_IMPLICITCAST);\n  }",
    "begin_line": 414,
    "end_line": 416,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setNoSideEffects#418",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setNoSideEffects(boolean)",
    "snippet": "void setNoSideEffects(boolean value) {\n    setFlag(value, MASK_NOSIDEEFFECTS);\n  }",
    "begin_line": 418,
    "end_line": 420,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setExterns#422",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setExterns(boolean)",
    "snippet": "void setExterns(boolean value) {\n    setFlag(value, MASK_EXTERNS);\n  }",
    "begin_line": 422,
    "end_line": 424,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setJavaDispatch#426",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setJavaDispatch(boolean)",
    "snippet": "void setJavaDispatch(boolean value) {\n    setFlag(value, MASK_JAVADISPATCH);\n  }",
    "begin_line": 426,
    "end_line": 428,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setNoCompile#430",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setNoCompile(boolean)",
    "snippet": "void setNoCompile(boolean value) {\n    setFlag(value, MASK_NOCOMPILE);\n  }",
    "begin_line": 430,
    "end_line": 432,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setFlag#434",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setFlag(boolean, int)",
    "snippet": "private void setFlag(boolean value, int mask) {\n    if (value) {\n      bitset |\u003d mask;\n    } else {\n      bitset \u0026\u003d ~mask;\n    }\n  }",
    "begin_line": 434,
    "end_line": 440,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.isConsistentIdGenerator#446",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.isConsistentIdGenerator()",
    "snippet": "public boolean isConsistentIdGenerator() {\n    return getFlag(MASK_CONSISTIDGEN);\n  }",
    "begin_line": 446,
    "end_line": 448,
    "comment": "/** \n * @return whether the {@code @consistentIdGenerator} is present onthis  {@link JSDocInfo}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.isStableIdGenerator#453",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.isStableIdGenerator()",
    "snippet": "public boolean isStableIdGenerator() {\n    return getFlag(MASK_STALBEIDGEN);\n  }",
    "begin_line": 453,
    "end_line": 455,
    "comment": "/** \n * @return whether the {@code @stableIdGenerator} is present on this {@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.isConstant#461",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.isConstant()",
    "snippet": "public boolean isConstant() {\n    return getFlag(MASK_CONSTANT) || isDefine();\n  }",
    "begin_line": 461,
    "end_line": 463,
    "comment": "/** \n * Returns whether the  {@code @const} annotation is present on this{@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.isConstructor#469",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.isConstructor()",
    "snippet": "public boolean isConstructor() {\n    return getFlag(MASK_CONSTRUCTOR);\n  }",
    "begin_line": 469,
    "end_line": 471,
    "comment": "/** \n * Returns whether the  {@code @constructor} annotation is present on this{@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.makesStructs#477",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.makesStructs()",
    "snippet": "public boolean makesStructs() {\n    return getFlag(MASK_STRUCT);\n  }",
    "begin_line": 477,
    "end_line": 479,
    "comment": "/** \n * Returns whether the  {@code @struct} annotation is present on this{@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.makesDicts#485",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.makesDicts()",
    "snippet": "public boolean makesDicts() {\n    return getFlag(MASK_DICT);\n  }",
    "begin_line": 485,
    "end_line": 487,
    "comment": "/** \n * Returns whether the  {@code @dict} annotation is present on this{@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.isDefine#494",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.isDefine()",
    "snippet": "public boolean isDefine() {\n    return getFlag(MASK_DEFINE);\n  }",
    "begin_line": 494,
    "end_line": 496,
    "comment": "/** \n * Returns whether the  {@code @define} annotation is present on this{@link JSDocInfo}. If this annotation is present, then the {@link #getType()} method will retrieve the define type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.isHidden#502",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.isHidden()",
    "snippet": "public boolean isHidden() {\n    return getFlag(MASK_HIDDEN);\n  }",
    "begin_line": 502,
    "end_line": 504,
    "comment": "/** \n * Returns whether the  {@code @hidden} annotation is present on this{@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.isNoTypeCheck#510",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.isNoTypeCheck()",
    "snippet": "public boolean isNoTypeCheck() {\n    return getFlag(MASK_NOCHECK);\n  }",
    "begin_line": 510,
    "end_line": 512,
    "comment": "/** \n * Returns whether the  {@code @nocheck} annotation is present on this{@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.shouldPreserveTry#518",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.shouldPreserveTry()",
    "snippet": "public boolean shouldPreserveTry() {\n    return getFlag(MASK_PRESERVETRY);\n  }",
    "begin_line": 518,
    "end_line": 520,
    "comment": "/** \n * Returns whether the  {@code @preserveTry} annotation is present on this{@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.isOverride#526",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.isOverride()",
    "snippet": "public boolean isOverride() {\n    return getFlag(MASK_OVERRIDE);\n  }",
    "begin_line": 526,
    "end_line": 528,
    "comment": "/** \n * Returns whether the  {@code @override} annotation is present on this{@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.isNoAlias#534",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.isNoAlias()",
    "snippet": "public boolean isNoAlias() {\n    return getFlag(MASK_NOALIAS);\n  }",
    "begin_line": 534,
    "end_line": 536,
    "comment": "/** \n * Returns whether the  {@code @noalias} annotation is present on this{@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.isDeprecated#542",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.isDeprecated()",
    "snippet": "public boolean isDeprecated() {\n    return getFlag(MASK_DEPRECATED);\n  }",
    "begin_line": 542,
    "end_line": 544,
    "comment": "/** \n * Returns whether the  {@code @deprecated} annotation is present on this{@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.isInterface#550",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.isInterface()",
    "snippet": "public boolean isInterface() {\n    return getFlag(MASK_INTERFACE);\n  }",
    "begin_line": 550,
    "end_line": 552,
    "comment": "/** \n * Returns whether the  {@code @interface} annotation is present on this{@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.isExport#558",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.isExport()",
    "snippet": "public boolean isExport() {\n    return getFlag(MASK_EXPORT);\n  }",
    "begin_line": 558,
    "end_line": 560,
    "comment": "/** \n * Returns whether the  {@code @export} annotation is present on this{@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.isExpose#566",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.isExpose()",
    "snippet": "public boolean isExpose() {\n    return getFlag(MASK_EXPOSE);\n  }",
    "begin_line": 566,
    "end_line": 568,
    "comment": "/** \n * Returns whether the  {@code @expose} annotation is present on this{@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.isNoShadow#574",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.isNoShadow()",
    "snippet": "public boolean isNoShadow() {\n    return getFlag(MASK_NOSHADOW);\n  }",
    "begin_line": 574,
    "end_line": 576,
    "comment": "/** \n * Returns whether the  {@code @noshadow} annotation is present on this{@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.isIdGenerator#582",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.isIdGenerator()",
    "snippet": "public boolean isIdGenerator() {\n    return getFlag(MASK_IDGEN);\n  }",
    "begin_line": 582,
    "end_line": 584,
    "comment": "/** \n * @return whether the {@code @idGenerator} is present onthis  {@link JSDocInfo}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.isImplicitCast#590",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.isImplicitCast()",
    "snippet": "public boolean isImplicitCast() {\n    return getFlag(MASK_IMPLICITCAST);\n  }",
    "begin_line": 590,
    "end_line": 592,
    "comment": "/** \n * Returns whether the  {@code @implicitCast} annotation is present on this{@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.isNoSideEffects#598",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.isNoSideEffects()",
    "snippet": "public boolean isNoSideEffects() {\n    return getFlag(MASK_NOSIDEEFFECTS);\n  }",
    "begin_line": 598,
    "end_line": 600,
    "comment": "/** \n * Returns whether the  {@code @nosideeffects} annotation is present on this{@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.isExterns#606",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.isExterns()",
    "snippet": "public boolean isExterns() {\n    return getFlag(MASK_EXTERNS);\n  }",
    "begin_line": 606,
    "end_line": 608,
    "comment": "/** \n * Returns whether the  {@code @externs} annotation is present on this{@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.isJavaDispatch#614",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.isJavaDispatch()",
    "snippet": "public boolean isJavaDispatch() {\n    return getFlag(MASK_JAVADISPATCH);\n  }",
    "begin_line": 614,
    "end_line": 616,
    "comment": "/** \n * Returns whether the  {@code @javadispatch} annotation is present on this{@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.isNoCompile#622",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.isNoCompile()",
    "snippet": "public boolean isNoCompile() {\n    return getFlag(MASK_NOCOMPILE);\n  }",
    "begin_line": 622,
    "end_line": 624,
    "comment": "/** \n * Returns whether the  {@code @nocompile} annotation is present on this{@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.containsDeclaration#629",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.containsDeclaration()",
    "snippet": "public boolean containsDeclaration() {\n    return (hasType()\n        || hasReturnType()\n        || hasEnumParameterType()\n        || hasTypedefType()\n        || hasThisType()\n        || getParameterCount() \u003e 0\n        || getFlag(MASK_CONSTANT\n            | MASK_CONSTRUCTOR\n            | MASK_DEFINE\n            | MASK_OVERRIDE\n            | MASK_NOALIAS\n            | MASK_DEPRECATED\n            | MASK_INTERFACE\n            | MASK_NOSHADOW\n            | MASK_IMPLICITCAST\n            | MASK_NOSIDEEFFECTS));\n  }",
    "begin_line": 629,
    "end_line": 646,
    "comment": "/** \n * @return Whether there is declaration present on this {@link JSDocInfo}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getFlag#648",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getFlag(int)",
    "snippet": "private boolean getFlag(int mask) {\n    return (bitset \u0026 mask) !\u003d 0x00;\n  }",
    "begin_line": 648,
    "end_line": 650,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setVisibility#653",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setVisibility(com.google.javascript.rhino.JSDocInfo.Visibility)",
    "snippet": "public void setVisibility(Visibility visibility) {\n    this.visibility \u003d visibility;\n  }",
    "begin_line": 653,
    "end_line": 655,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.lazyInitInfo#657",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.lazyInitInfo()",
    "snippet": "private void lazyInitInfo() {\n    if (info \u003d\u003d null) {\n      info \u003d new LazilyInitializedInfo();\n    }\n  }",
    "begin_line": 657,
    "end_line": 661,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.lazyInitDocumentation#667",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.lazyInitDocumentation()",
    "snippet": "private boolean lazyInitDocumentation() {\n    if (!includeDocumentation) {\n      return false;\n    }\n\n    if (documentation \u003d\u003d null) {\n      documentation \u003d new LazilyInitializedDocumentation();\n    }\n\n    return true;\n  }",
    "begin_line": 667,
    "end_line": 677,
    "comment": "/** \n * Lazily initializes the documentation information object, but only if the JSDocInfo was told to keep such information around.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.addMarker#683",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.addMarker()",
    "snippet": "Marker addMarker() {\n    if (!lazyInitDocumentation()) {\n      return null;\n    }\n\n    if (documentation.markers \u003d\u003d null) {\n      documentation.markers \u003d Lists.newArrayList();\n    }\n\n    Marker marker \u003d new Marker();\n    documentation.markers.add(marker);\n    return marker;\n  }",
    "begin_line": 683,
    "end_line": 695,
    "comment": "/** \n * Adds a marker to the documentation (if it exists) and returns the marker. Returns null otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setDeprecationReason#702",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setDeprecationReason(java.lang.String)",
    "snippet": "boolean setDeprecationReason(String reason) {\n    lazyInitInfo();\n\n    if (info.deprecated !\u003d null) {\n      return false;\n    }\n\n    info.deprecated \u003d reason;\n    return true;\n  }",
    "begin_line": 702,
    "end_line": 711,
    "comment": "/** \n * Sets the deprecation reason.\n * @param reason The deprecation reason\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.addSuppression#716",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.addSuppression(java.lang.String)",
    "snippet": "public void addSuppression(String suppression) {\n    lazyInitInfo();\n\n    if (info.suppressions \u003d\u003d null) {\n      info.suppressions \u003d Sets.newHashSet();\n    }\n    info.suppressions.add(suppression);\n  }",
    "begin_line": 716,
    "end_line": 723,
    "comment": "/** \n * Add a suppressed warning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setSuppressions#729",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setSuppressions(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "boolean setSuppressions(Set\u003cString\u003e suppressions) {\n    lazyInitInfo();\n\n    if (info.suppressions !\u003d null) {\n      return false;\n    }\n\n    info.suppressions \u003d suppressions;\n    return true;\n  }",
    "begin_line": 729,
    "end_line": 738,
    "comment": "/** \n * Sets suppressed warnings.\n * @param suppressions A list of suppressed warning types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.addModifies#743",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.addModifies(java.lang.String)",
    "snippet": "void addModifies(String modifies) {\n    lazyInitInfo();\n\n    if (info.modifies \u003d\u003d null) {\n      info.modifies \u003d Sets.newHashSet();\n    }\n    info.modifies.add(modifies);\n  }",
    "begin_line": 743,
    "end_line": 750,
    "comment": "/** \n * Add modifies values.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setModifies#756",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setModifies(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "boolean setModifies(Set\u003cString\u003e modifies) {\n    lazyInitInfo();\n\n    if (info.modifies !\u003d null) {\n      return false;\n    }\n\n    info.modifies \u003d modifies;\n    return true;\n  }",
    "begin_line": 756,
    "end_line": 765,
    "comment": "/** \n * Sets modifies values.\n * @param modifies A list of modifies types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.documentVersion#770",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.documentVersion(java.lang.String)",
    "snippet": "boolean documentVersion(String version) {\n    if (!lazyInitDocumentation()) {\n      return true;\n    }\n\n    if (documentation.version !\u003d null) {\n      return false;\n    }\n\n    documentation.version \u003d version;\n    return true;\n  }",
    "begin_line": 770,
    "end_line": 781,
    "comment": "/** \n * Documents the version.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.documentReference#786",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.documentReference(java.lang.String)",
    "snippet": "boolean documentReference(String reference) {\n    if (!lazyInitDocumentation()) {\n      return true;\n    }\n\n    if (documentation.sees \u003d\u003d null) {\n      documentation.sees \u003d Lists.newArrayList();\n    }\n\n    documentation.sees.add(reference);\n    return true;\n  }",
    "begin_line": 786,
    "end_line": 797,
    "comment": "/** \n * Documents a reference (i.e. adds a \"see\" reference to the list).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.documentAuthor#802",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.documentAuthor(java.lang.String)",
    "snippet": "boolean documentAuthor(String author) {\n    if (!lazyInitDocumentation()) {\n      return true;\n    }\n\n    if (documentation.authors \u003d\u003d null) {\n      documentation.authors \u003d Lists.newArrayList();\n    }\n\n    documentation.authors.add(author);\n    return true;\n  }",
    "begin_line": 802,
    "end_line": 813,
    "comment": "/** \n * Documents the author (i.e. adds it to the author list).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.documentThrows#818",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.documentThrows(com.google.javascript.rhino.JSTypeExpression, java.lang.String)",
    "snippet": "boolean documentThrows(JSTypeExpression type, String throwsDescription) {\n    if (!lazyInitDocumentation()) {\n      return true;\n    }\n\n    if (documentation.throwsDescriptions \u003d\u003d null) {\n      documentation.throwsDescriptions \u003d\n          new LinkedHashMap\u003cJSTypeExpression, String\u003e();\n    }\n\n    if (!documentation.throwsDescriptions.containsKey(type)) {\n      documentation.throwsDescriptions.put(type, throwsDescription);\n      return true;\n    }\n\n    return false;\n  }",
    "begin_line": 818,
    "end_line": 834,
    "comment": "/** \n * Documents the throws (i.e. adds it to the throws list).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.documentParam#844",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.documentParam(java.lang.String, java.lang.String)",
    "snippet": "boolean documentParam(String parameter, String description) {\n    if (!lazyInitDocumentation()) {\n      return true;\n    }\n\n    if (documentation.parameters \u003d\u003d null) {\n      documentation.parameters \u003d new LinkedHashMap\u003cString, String\u003e();\n    }\n\n    if (!documentation.parameters.containsKey(parameter)) {\n      documentation.parameters.put(parameter, description);\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 844,
    "end_line": 859,
    "comment": "/** \n * Documents a parameter. Parameters are described using the  {@code @param}annotation.\n * @param parameter the parameter\u0027s name\n * @param description the parameter\u0027s description\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.documentBlock#866",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.documentBlock(java.lang.String)",
    "snippet": "boolean documentBlock(String description) {\n    if (!lazyInitDocumentation()) {\n      return true;\n    }\n\n    if (documentation.blockDescription !\u003d null) {\n      return false;\n    }\n\n    documentation.blockDescription \u003d description;\n    return true;\n  }",
    "begin_line": 866,
    "end_line": 877,
    "comment": "/** \n * Documents the block-level comment/description.\n * @param description the description\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.documentFileOverview#884",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.documentFileOverview(java.lang.String)",
    "snippet": "boolean documentFileOverview(String description) {\n    setFlag(true, MASK_FILEOVERVIEW);\n    if (!lazyInitDocumentation()) {\n      return true;\n    }\n\n    if (documentation.fileOverview !\u003d null) {\n      return false;\n    }\n\n    documentation.fileOverview \u003d description;\n    return true;\n  }",
    "begin_line": 884,
    "end_line": 896,
    "comment": "/** \n * Documents the fileoverview comment/description.\n * @param description the description\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.documentReturn#904",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.documentReturn(java.lang.String)",
    "snippet": "boolean documentReturn(String description) {\n    if (!lazyInitDocumentation()) {\n      return true;\n    }\n\n    if (documentation.returnDescription !\u003d null) {\n      return false;\n    }\n\n    documentation.returnDescription \u003d description;\n    return true;\n  }",
    "begin_line": 904,
    "end_line": 915,
    "comment": "/** \n * Documents the return value. Return value is described using the {@code @return} annotation.\n * @param description the return value\u0027s description\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.declareParam#925",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.declareParam(com.google.javascript.rhino.JSTypeExpression, java.lang.String)",
    "snippet": "boolean declareParam(JSTypeExpression jsType, String parameter) {\n    lazyInitInfo();\n    if (info.parameters \u003d\u003d null) {\n      info.parameters \u003d new LinkedHashMap\u003cString, JSTypeExpression\u003e();\n    }\n    if (!info.parameters.containsKey(parameter)) {\n      info.parameters.put(parameter, jsType);\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 925,
    "end_line": 936,
    "comment": "/** \n * Declares a parameter. Parameters are described using the  {@code @param}annotation.\n * @param jsType the parameter\u0027s type, it may be {@code null} when the{@code @param} annotation did not specify a type.\n * @param parameter the parameter\u0027s name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.declareTemplateTypeNames#944",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.declareTemplateTypeNames(java.util.List\u003cjava.lang.String\u003e)",
    "snippet": "boolean declareTemplateTypeNames(List\u003cString\u003e templateTypeNames) {\n    lazyInitInfo();\n\n    if (info.templateTypeNames !\u003d null) {\n      return false;\n    }\n\n    info.templateTypeNames \u003d ImmutableList.copyOf(templateTypeNames);\n    return true;\n  }",
    "begin_line": 944,
    "end_line": 953,
    "comment": "/** \n * Declares a template type name. Template type names are described using the {@code @template} annotation.\n * @param templateTypeNames the template type name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.declareThrows#960",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.declareThrows(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "boolean declareThrows(JSTypeExpression jsType) {\n    lazyInitInfo();\n\n    if (info.thrownTypes \u003d\u003d null) {\n      info.thrownTypes \u003d Lists.newArrayList();\n    }\n\n    info.thrownTypes.add(jsType);\n    return true;\n  }",
    "begin_line": 960,
    "end_line": 969,
    "comment": "/** \n * Declares that the method throws a given type.\n * @param jsType The type that can be thrown by the method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getVisibility#976",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getVisibility()",
    "snippet": "public Visibility getVisibility() {\n    return visibility;\n  }",
    "begin_line": 976,
    "end_line": 978,
    "comment": "/** \n * Gets the visibility specified by  {@code @private},  {@code @protected} or{@code @public} annotation. If no visibility is specified, visibilityis inherited from the base class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getParameterType#986",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getParameterType(java.lang.String)",
    "snippet": "public JSTypeExpression getParameterType(String parameter) {\n    if (info \u003d\u003d null || info.parameters \u003d\u003d null) {\n      return null;\n    }\n    return info.parameters.get(parameter);\n  }",
    "begin_line": 986,
    "end_line": 991,
    "comment": "/** \n * Gets the parameter type.\n * @param parameter the parameter\u0027s name\n * @return the parameter\u0027s type or {@code null} if this parameter is notdefined or has a  {@code null} type\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.hasParameter#996",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.hasParameter(java.lang.String)",
    "snippet": "public boolean hasParameter(String parameter) {\n    if (info \u003d\u003d null || info.parameters \u003d\u003d null) {\n      return false;\n    }\n    return info.parameters.containsKey(parameter);\n  }",
    "begin_line": 996,
    "end_line": 1001,
    "comment": "/** \n * Returns whether the parameter is defined.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.hasParameterType#1009",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.hasParameterType(java.lang.String)",
    "snippet": "public boolean hasParameterType(String parameter) {\n    return getParameterType(parameter) !\u003d null;\n  }",
    "begin_line": 1009,
    "end_line": 1011,
    "comment": "/** \n * Returns whether the parameter has an attached type.\n * @return {@code true} if the parameter has an attached type, {@code false}if the parameter has no attached type or does not exist.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getParameterNames#1020",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getParameterNames()",
    "snippet": "public Set\u003cString\u003e getParameterNames() {\n    if (info \u003d\u003d null || info.parameters \u003d\u003d null) {\n      return ImmutableSet.of();\n    }\n    return ImmutableSet.copyOf(info.parameters.keySet());\n  }",
    "begin_line": 1020,
    "end_line": 1025,
    "comment": "/** \n * Returns the set of names of the defined parameters. The iteration order of the returned set is not the order in which parameters are defined.\n * @return the set of names of the defined parameters. The returned set isimmutable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getParameterCount#1030",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getParameterCount()",
    "snippet": "public int getParameterCount() {\n    if (info \u003d\u003d null || info.parameters \u003d\u003d null) {\n      return 0;\n    }\n    return info.parameters.size();\n  }",
    "begin_line": 1030,
    "end_line": 1035,
    "comment": "/** \n * Gets the number of parameters defined.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setType#1037",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setType(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "void setType(JSTypeExpression type) {\n    setType(type, TYPEFIELD_TYPE);\n  }",
    "begin_line": 1037,
    "end_line": 1039,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setReturnType#1041",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setReturnType(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "void setReturnType(JSTypeExpression type) {\n    setType(type, TYPEFIELD_RETURN);\n  }",
    "begin_line": 1041,
    "end_line": 1043,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setEnumParameterType#1045",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setEnumParameterType(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "void setEnumParameterType(JSTypeExpression type) {\n    setType(type, TYPEFIELD_ENUM);\n  }",
    "begin_line": 1045,
    "end_line": 1047,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setTypedefType#1049",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setTypedefType(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "void setTypedefType(JSTypeExpression type) {\n    setType(type, TYPEFIELD_TYPEDEF);\n  }",
    "begin_line": 1049,
    "end_line": 1051,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setType#1053",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setType(com.google.javascript.rhino.JSTypeExpression, int)",
    "snippet": "private void setType(JSTypeExpression type, int mask) {\n    if ((bitset \u0026 MASK_TYPEFIELD) !\u003d 0) {\n      throw new IllegalStateException(\n          \"API tried to add two incompatible type tags. \" +\n          \"This should have been blocked and emitted a warning.\");\n    }\n    this.bitset \u003d (bitset \u0026 MASK_FLAGS) | mask;\n    this.type \u003d type;\n  }",
    "begin_line": 1053,
    "end_line": 1061,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getThrownTypes#1066",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getThrownTypes()",
    "snippet": "public List\u003cJSTypeExpression\u003e getThrownTypes() {\n    if (info \u003d\u003d null || info.thrownTypes \u003d\u003d null) {\n      return ImmutableList.of();\n    }\n    return Collections.unmodifiableList(info.thrownTypes);\n  }",
    "begin_line": 1066,
    "end_line": 1071,
    "comment": "/** \n * Returns the list of thrown types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.hasType#1077",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.hasType()",
    "snippet": "public boolean hasType() {\n    return hasType(TYPEFIELD_TYPE);\n  }",
    "begin_line": 1077,
    "end_line": 1079,
    "comment": "/** \n * Returns whether a type, specified using the  {@code @type} annotation, ispresent on this JSDoc.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.hasEnumParameterType#1085",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.hasEnumParameterType()",
    "snippet": "public boolean hasEnumParameterType() {\n    return hasType(TYPEFIELD_ENUM);\n  }",
    "begin_line": 1085,
    "end_line": 1087,
    "comment": "/** \n * Returns whether an enum parameter type, specified using the  {@code @enum}annotation, is present on this JSDoc.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.hasTypedefType#1093",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.hasTypedefType()",
    "snippet": "public boolean hasTypedefType() {\n    return hasType(TYPEFIELD_TYPEDEF);\n  }",
    "begin_line": 1093,
    "end_line": 1095,
    "comment": "/** \n * Returns whether a typedef parameter type, specified using the {@code @typedef} annotation, is present on this JSDoc.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.hasReturnType#1101",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.hasReturnType()",
    "snippet": "public boolean hasReturnType() {\n    return hasType(TYPEFIELD_RETURN);\n  }",
    "begin_line": 1101,
    "end_line": 1103,
    "comment": "/** \n * Returns whether this  {@link JSDocInfo} contains a type for {@code @return}annotation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.hasType#1105",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.hasType(int)",
    "snippet": "private boolean hasType(int mask) {\n    return (bitset \u0026 MASK_TYPEFIELD) \u003d\u003d mask;\n  }",
    "begin_line": 1105,
    "end_line": 1107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getType#1112",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getType()",
    "snippet": "public JSTypeExpression getType() {\n    return getType(TYPEFIELD_TYPE);\n  }",
    "begin_line": 1112,
    "end_line": 1114,
    "comment": "/** \n * Gets the type specified by the  {@code @type} annotation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getReturnType#1119",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getReturnType()",
    "snippet": "public JSTypeExpression getReturnType() {\n    return getType(TYPEFIELD_RETURN);\n  }",
    "begin_line": 1119,
    "end_line": 1121,
    "comment": "/** \n * Gets the return type specified by the  {@code @return} annotation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getEnumParameterType#1126",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getEnumParameterType()",
    "snippet": "public JSTypeExpression getEnumParameterType() {\n    return getType(TYPEFIELD_ENUM);\n  }",
    "begin_line": 1126,
    "end_line": 1128,
    "comment": "/** \n * Gets the enum parameter type specified by the  {@code @enum} annotation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getTypedefType#1133",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getTypedefType()",
    "snippet": "public JSTypeExpression getTypedefType() {\n    return getType(TYPEFIELD_TYPEDEF);\n  }",
    "begin_line": 1133,
    "end_line": 1135,
    "comment": "/** \n * Gets the typedef type specified by the  {@code @type} annotation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getType#1137",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getType(int)",
    "snippet": "private JSTypeExpression getType(int typefield) {\n    if ((MASK_TYPEFIELD \u0026 bitset) \u003d\u003d typefield) {\n      return type;\n    } else {\n      return null;\n    }\n  }",
    "begin_line": 1137,
    "end_line": 1143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getThisType#1148",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getThisType()",
    "snippet": "public JSTypeExpression getThisType() {\n    return thisType;\n  }",
    "begin_line": 1148,
    "end_line": 1150,
    "comment": "/** \n * Gets the type specified by the  {@code @this} annotation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setThisType#1155",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setThisType(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "void setThisType(JSTypeExpression type) {\n    this.thisType \u003d type;\n  }",
    "begin_line": 1155,
    "end_line": 1157,
    "comment": "/** \n * Sets the type specified by the  {@code @this} annotation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.hasThisType#1163",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.hasThisType()",
    "snippet": "public boolean hasThisType() {\n    return thisType !\u003d null;\n  }",
    "begin_line": 1163,
    "end_line": 1165,
    "comment": "/** \n * Returns whether this  {@link JSDocInfo} contains a type for {@code @this}annotation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setBaseType#1167",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setBaseType(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "void setBaseType(JSTypeExpression type) {\n    lazyInitInfo();\n    info.baseType \u003d type;\n  }",
    "begin_line": 1167,
    "end_line": 1170,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getBaseType#1175",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getBaseType()",
    "snippet": "public JSTypeExpression getBaseType() {\n    return (info \u003d\u003d null) ? null : info.baseType;\n  }",
    "begin_line": 1175,
    "end_line": 1177,
    "comment": "/** \n * Gets the base type specified by the  {@code @extends} annotation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getDescription#1182",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getDescription()",
    "snippet": "public String getDescription() {\n    return (info \u003d\u003d null) ? null : info.description;\n  }",
    "begin_line": 1182,
    "end_line": 1184,
    "comment": "/** \n * Gets the description specified by the  {@code @desc} annotation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setDescription#1186",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setDescription(java.lang.String)",
    "snippet": "void setDescription(String desc) {\n    lazyInitInfo();\n    info.description \u003d desc;\n  }",
    "begin_line": 1186,
    "end_line": 1189,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getMeaning#1202",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getMeaning()",
    "snippet": "public String getMeaning() {\n    return (info \u003d\u003d null) ? null : info.meaning;\n  }",
    "begin_line": 1202,
    "end_line": 1204,
    "comment": "/** \n * Gets the meaning specified by the  {@code @meaning} annotation.In localization systems, two messages with the same content but different \"meanings\" may be translated differently. By default, we use the name of the variable that the message is initialized to as the \"meaning\" of the message. But some code generators (like Closure Templates) inject their own meaning with the jsdoc  {@code @meaning} annotation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setMeaning#1206",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setMeaning(java.lang.String)",
    "snippet": "void setMeaning(String meaning) {\n    lazyInitInfo();\n    info.meaning \u003d meaning;\n  }",
    "begin_line": 1206,
    "end_line": 1209,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getLendsName#1219",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getLendsName()",
    "snippet": "public String getLendsName() {\n    return (info \u003d\u003d null) ? null : info.lendsName;\n  }",
    "begin_line": 1219,
    "end_line": 1221,
    "comment": "/** \n * Gets the name we\u0027re lending to in a  {@code @lends} annotation.In many reflection APIs, you pass an anonymous object to a function, and that function mixes the anonymous object into another object. The  {@code @lends} annotation allows the type system to trackthose property assignments.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setLendsName#1223",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setLendsName(java.lang.String)",
    "snippet": "void setLendsName(String name) {\n    lazyInitInfo();\n    info.lendsName \u003d name;\n  }",
    "begin_line": 1223,
    "end_line": 1226,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getLicense#1231",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getLicense()",
    "snippet": "public String getLicense() {\n    return (info \u003d\u003d null) ? null : info.license;\n  }",
    "begin_line": 1231,
    "end_line": 1233,
    "comment": "/** \n * Gets the description specified by the  {@code @license} annotation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setLicense#1242",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setLicense(java.lang.String)",
    "snippet": "public void setLicense(String license) {\n    lazyInitInfo();\n    info.license \u003d license;\n  }",
    "begin_line": 1242,
    "end_line": 1245,
    "comment": "/** \n * License directives can appear in multiple comments, and always apply to the entire file.  Break protection and allow outsiders to update the license string so that we can attach the license text even when the JSDocInfo has been created and tagged with other information.\n * @param license String containing new license text.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.toString#1248",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.toString()",
    "snippet": "@Override\n  public String toString() {\n    return \"JSDocInfo\";\n  }",
    "begin_line": 1248,
    "end_line": 1250,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.hasBaseType#1256",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.hasBaseType()",
    "snippet": "public boolean hasBaseType() {\n    return getBaseType() !\u003d null;\n  }",
    "begin_line": 1256,
    "end_line": 1258,
    "comment": "/** \n * Returns whether this  {@link JSDocInfo} contains a type for {@code @extends}annotation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.addImplementedInterface#1264",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.addImplementedInterface(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "boolean addImplementedInterface(JSTypeExpression interfaceName) {\n    lazyInitInfo();\n    if (info.implementedInterfaces \u003d\u003d null) {\n      info.implementedInterfaces \u003d Lists.newArrayListWithCapacity(2);\n    }\n    if (info.implementedInterfaces.contains(interfaceName)) {\n      return false;\n    }\n    info.implementedInterfaces.add(interfaceName);\n    return true;\n  }",
    "begin_line": 1264,
    "end_line": 1274,
    "comment": "/** \n * Adds an implemented interface. Returns whether the interface was added. If the interface was already present in the list, it won\u0027t get added again.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getImplementedInterfaces#1282",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getImplementedInterfaces()",
    "snippet": "public List\u003cJSTypeExpression\u003e getImplementedInterfaces() {\n    if (info \u003d\u003d null || info.implementedInterfaces \u003d\u003d null) {\n      return ImmutableList.of();\n    }\n    return Collections.unmodifiableList(info.implementedInterfaces);\n  }",
    "begin_line": 1282,
    "end_line": 1287,
    "comment": "/** \n * Returns the types specified by the  {@code @implements} annotation.\n * @return An immutable list of JSTypeExpression objects that canbe resolved to types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getImplementedInterfaceCount#1293",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getImplementedInterfaceCount()",
    "snippet": "public int getImplementedInterfaceCount() {\n    if (info \u003d\u003d null || info.implementedInterfaces \u003d\u003d null) {\n      return 0;\n    }\n    return info.implementedInterfaces.size();\n  }",
    "begin_line": 1293,
    "end_line": 1298,
    "comment": "/** \n * Gets the number of interfaces specified by the  {@code @implements}annotation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.addExtendedInterface#1305",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.addExtendedInterface(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "boolean addExtendedInterface(JSTypeExpression type) {\n    lazyInitInfo();\n    if (info.extendedInterfaces \u003d\u003d null) {\n      info.extendedInterfaces \u003d Lists.newArrayListWithCapacity(2);\n    }\n    if (info.extendedInterfaces.contains(type)) {\n      return false;\n    }\n    info.extendedInterfaces.add(type);\n    return true;\n  }",
    "begin_line": 1305,
    "end_line": 1315,
    "comment": "/** \n * Adds an extended interface (for interface only). Returns whether the type was added. if the type was already present in the list, it won\u0027t get added again.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getExtendedInterfaces#1323",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getExtendedInterfaces()",
    "snippet": "public List\u003cJSTypeExpression\u003e getExtendedInterfaces() {\n    if (info \u003d\u003d null || info.extendedInterfaces \u003d\u003d null) {\n      return ImmutableList.of();\n    }\n    return Collections.unmodifiableList(info.extendedInterfaces);\n  }",
    "begin_line": 1323,
    "end_line": 1328,
    "comment": "/** \n * Returns the interfaces extended by an interface\n * @return An immutable list of JSTypeExpression objects that canbe resolved to types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getExtendedInterfacesCount#1333",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getExtendedInterfacesCount()",
    "snippet": "public int getExtendedInterfacesCount() {\n    if (info \u003d\u003d null || info.extendedInterfaces \u003d\u003d null) {\n      return 0;\n    }\n    return info.extendedInterfaces.size();\n  }",
    "begin_line": 1333,
    "end_line": 1338,
    "comment": "/** \n * Gets the number of extended interfaces specified\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getDeprecationReason#1343",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getDeprecationReason()",
    "snippet": "public String getDeprecationReason() {\n    return info \u003d\u003d null ? null : info.deprecated;\n  }",
    "begin_line": 1343,
    "end_line": 1345,
    "comment": "/** \n * Returns the deprecation reason or null if none specified.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getSuppressions#1350",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getSuppressions()",
    "snippet": "public Set\u003cString\u003e getSuppressions() {\n    Set\u003cString\u003e suppressions \u003d info \u003d\u003d null ? null : info.suppressions;\n    return suppressions \u003d\u003d null ? Collections.\u003cString\u003eemptySet() : suppressions;\n  }",
    "begin_line": 1350,
    "end_line": 1353,
    "comment": "/** \n * Returns the set of suppressed warnings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getModifies#1358",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getModifies()",
    "snippet": "public Set\u003cString\u003e getModifies() {\n    Set\u003cString\u003e modifies \u003d info \u003d\u003d null ? null : info.modifies;\n    return modifies \u003d\u003d null ? Collections.\u003cString\u003eemptySet() : modifies;\n  }",
    "begin_line": 1358,
    "end_line": 1361,
    "comment": "/** \n * Returns the set of sideeffect notations.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.hasDescriptionForParameter#1367",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.hasDescriptionForParameter(java.lang.String)",
    "snippet": "public boolean hasDescriptionForParameter(String name) {\n    if (documentation \u003d\u003d null || documentation.parameters \u003d\u003d null) {\n      return false;\n    }\n\n    return documentation.parameters.containsKey(name);\n  }",
    "begin_line": 1367,
    "end_line": 1373,
    "comment": "/** \n * Returns whether a description exists for the parameter with the specified name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getDescriptionForParameter#1379",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getDescriptionForParameter(java.lang.String)",
    "snippet": "public String getDescriptionForParameter(String name) {\n    if (documentation \u003d\u003d null || documentation.parameters \u003d\u003d null) {\n      return null;\n    }\n\n    return documentation.parameters.get(name);\n  }",
    "begin_line": 1379,
    "end_line": 1385,
    "comment": "/** \n * Returns the description for the parameter with the given name, if its exists.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getAuthors#1390",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getAuthors()",
    "snippet": "public Collection\u003cString\u003e getAuthors() {\n    return documentation \u003d\u003d null ? null : documentation.authors;\n  }",
    "begin_line": 1390,
    "end_line": 1392,
    "comment": "/** \n * Returns the list of authors or null if none.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getReferences#1397",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getReferences()",
    "snippet": "public Collection\u003cString\u003e getReferences() {\n    return documentation \u003d\u003d null ? null : documentation.sees;\n  }",
    "begin_line": 1397,
    "end_line": 1399,
    "comment": "/** \n * Returns the list of references or null if none.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getVersion#1404",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getVersion()",
    "snippet": "public String getVersion() {\n    return documentation \u003d\u003d null ? null : documentation.version;\n  }",
    "begin_line": 1404,
    "end_line": 1406,
    "comment": "/** \n * Returns the version or null if none.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getReturnDescription#1411",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getReturnDescription()",
    "snippet": "public String getReturnDescription() {\n    return documentation \u003d\u003d null ? null : documentation.returnDescription;\n  }",
    "begin_line": 1411,
    "end_line": 1413,
    "comment": "/** \n * Returns the description of the returned object or null if none specified.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getBlockDescription#1418",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getBlockDescription()",
    "snippet": "public String getBlockDescription() {\n    return documentation \u003d\u003d null ? null : documentation.blockDescription;\n  }",
    "begin_line": 1418,
    "end_line": 1420,
    "comment": "/** \n * Returns the block-level description or null if none specified.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.hasFileOverview#1425",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.hasFileOverview()",
    "snippet": "public boolean hasFileOverview() {\n    return getFlag(MASK_FILEOVERVIEW);\n  }",
    "begin_line": 1425,
    "end_line": 1427,
    "comment": "/** \n * Returns whether this has a fileoverview flag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getFileOverview#1432",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getFileOverview()",
    "snippet": "public String getFileOverview() {\n    return documentation \u003d\u003d null ? null : documentation.fileOverview;\n  }",
    "begin_line": 1432,
    "end_line": 1434,
    "comment": "/** \n * Returns the file overview or null if none specified.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getAssociatedNode#1436",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getAssociatedNode()",
    "snippet": "public Node getAssociatedNode() {\n    return this.associatedNode;\n  }",
    "begin_line": 1436,
    "end_line": 1438,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setAssociatedNode#1447",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setAssociatedNode(com.google.javascript.rhino.Node)",
    "snippet": "public void setAssociatedNode(Node node) {\n    this.associatedNode \u003d node;\n  }",
    "begin_line": 1447,
    "end_line": 1449,
    "comment": "/** \n * Sets the node associated with this JSDoc. Notice that many nodes may have pointer to the same JSDocInfo object (because we propagate it across the type graph). But there is only one canonical \"owner\" node of the JSDocInfo, which corresponds to its original place in the syntax tree.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getSourceName#1452",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getSourceName()",
    "snippet": "public String getSourceName() {\n    return this.associatedNode !\u003d null\n        ? this.associatedNode.getSourceFileName() : null;\n  }",
    "begin_line": 1452,
    "end_line": 1455,
    "comment": "/** \n * Gets the name of the source file that contains this JSDoc. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getMarkers#1458",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getMarkers()",
    "snippet": "public Collection\u003cMarker\u003e getMarkers() {\n    return (documentation \u003d\u003d null || documentation.markers \u003d\u003d null)\n        ? ImmutableList.\u003cMarker\u003eof() : documentation.markers;\n  }",
    "begin_line": 1458,
    "end_line": 1461,
    "comment": "/** \n * Gets the list of all markers for the documentation in this JSDoc. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getTemplateTypeNames#1464",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getTemplateTypeNames()",
    "snippet": "public ImmutableList\u003cString\u003e getTemplateTypeNames() {\n    if (info \u003d\u003d null || info.templateTypeNames \u003d\u003d null) {\n      return ImmutableList.of();\n    }\n    return info.templateTypeNames;\n  }",
    "begin_line": 1464,
    "end_line": 1469,
    "comment": "/** \n * Gets the template type name. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getTypeNodes#1478",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getTypeNodes()",
    "snippet": "public Collection\u003cNode\u003e getTypeNodes() {\n    List\u003cNode\u003e nodes \u003d Lists.newArrayList();\n\n    if (type !\u003d null) {\n      nodes.add(type.getRoot());\n    }\n\n    if (thisType !\u003d null) {\n      nodes.add(thisType.getRoot());\n    }\n\n    if (info !\u003d null) {\n      if (info.baseType !\u003d null) {\n        nodes.add(info.baseType.getRoot());\n      }\n\n      if (info.extendedInterfaces !\u003d null) {\n        for (JSTypeExpression interfaceType : info.extendedInterfaces) {\n          nodes.add(interfaceType.getRoot());\n        }\n      }\n\n      if (info.implementedInterfaces !\u003d null) {\n        for (JSTypeExpression interfaceType : info.implementedInterfaces) {\n          nodes.add(interfaceType.getRoot());\n        }\n      }\n\n      if (info.parameters !\u003d null) {\n        for (JSTypeExpression parameterType : info.parameters.values()) {\n          if (parameterType !\u003d null) {\n            nodes.add(parameterType.getRoot());\n          }\n        }\n      }\n\n      if (info.thrownTypes !\u003d null) {\n        for (JSTypeExpression thrownType : info.thrownTypes) {\n          if (thrownType !\u003d null) {\n            nodes.add(thrownType.getRoot());\n          }\n        }\n      }\n    }\n\n    return nodes;\n  }",
    "begin_line": 1478,
    "end_line": 1524,
    "comment": "/** \n * Returns a collection of all type nodes that are a part of this JSDocInfo. This includes @type, @this, @extends, @implements, @param, @throws, and @return.  Any future type specific JSDoc should make sure to add the appropriate nodes here.\n * @return collection of all type nodes\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.hasModifies#1526",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.hasModifies()",
    "snippet": "public boolean hasModifies() {\n    return info !\u003d null \u0026\u0026 info.modifies !\u003d null;\n  }",
    "begin_line": 1526,
    "end_line": 1528,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getOriginalCommentString#1534",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.getOriginalCommentString()",
    "snippet": "public String getOriginalCommentString() {\n    return documentation \u003d\u003d null ? null : documentation.sourceComment;\n  }",
    "begin_line": 1534,
    "end_line": 1536,
    "comment": "/** \n * Returns the original JSDoc comment string. Returns null unless parseJsDocDocumentation is enabled via the ParserConfig.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setOriginalCommentString#1538",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfo.java",
    "class_name": "com.google.javascript.rhino.JSDocInfo",
    "signature": "com.google.javascript.rhino.JSDocInfo.setOriginalCommentString(java.lang.String)",
    "snippet": "void setOriginalCommentString(String sourceComment) {\n    if (!lazyInitDocumentation()) {\n      return;\n    }\n    documentation.sourceComment \u003d sourceComment;\n  }",
    "begin_line": 1538,
    "end_line": 1543,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.JSDocInfoBuilder#69",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.JSDocInfoBuilder(boolean)",
    "snippet": "public JSDocInfoBuilder(boolean parseDocumentation) {\n    this.currentInfo \u003d new JSDocInfo(parseDocumentation);\n    this.parseDocumentation \u003d parseDocumentation;\n  }",
    "begin_line": 69,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordOriginalCommentString#78",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordOriginalCommentString(java.lang.String)",
    "snippet": "public void recordOriginalCommentString(String sourceComment) {\n    if (parseDocumentation) {\n      currentInfo.setOriginalCommentString(sourceComment);\n    }\n  }",
    "begin_line": 78,
    "end_line": 82,
    "comment": "/** \n * Sets the original JSDoc comment string. This is a no-op if the builder isn\u0027t configured to record documentation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.shouldParseDocumentation#84",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.shouldParseDocumentation()",
    "snippet": "public boolean shouldParseDocumentation() {\n    return parseDocumentation;\n  }",
    "begin_line": 84,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.isPopulated#92",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.isPopulated()",
    "snippet": "public boolean isPopulated() {\n    return populated;\n  }",
    "begin_line": 92,
    "end_line": 94,
    "comment": "/** \n * Returns whether this builder is populated with information that can be used to  {@link #build} a {@link JSDocInfo} object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.isPopulatedWithFileOverview#101",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.isPopulatedWithFileOverview()",
    "snippet": "public boolean isPopulatedWithFileOverview() {\n    return isPopulated() \u0026\u0026\n        (currentInfo.hasFileOverview() || currentInfo.isExterns() ||\n         currentInfo.isNoCompile());\n  }",
    "begin_line": 101,
    "end_line": 105,
    "comment": "/** \n * Returns whether this builder is populated with information that can be used to  {@link #build} a {@link JSDocInfo} object that has afileoverview tag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.isDescriptionRecorded#110",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.isDescriptionRecorded()",
    "snippet": "public boolean isDescriptionRecorded() {\n    return currentInfo.getDescription() !\u003d null;\n  }",
    "begin_line": 110,
    "end_line": 112,
    "comment": "/** \n * Returns whether this builder recorded a description.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.build#124",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.build(com.google.javascript.rhino.Node)",
    "snippet": "public JSDocInfo build(Node associatedNode) {\n    if (populated) {\n      JSDocInfo built \u003d currentInfo;\n      built.setAssociatedNode(associatedNode);\n      populateDefaults(built);\n      populated \u003d false;\n      currentInfo \u003d new JSDocInfo(this.parseDocumentation);\n      return built;\n    } else {\n      return null;\n    }\n  }",
    "begin_line": 124,
    "end_line": 135,
    "comment": "/** \n * Builds a  {@link JSDocInfo} object based on the populated information andreturns it. Once this method is called, the builder can be reused to build another  {@link JSDocInfo} object.\n * @param associatedNode The source node containing the JSDoc.\n * @return a {@link JSDocInfo} object populated with the values given to thisbuilder. If no value was populated, this method simply returns {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.populateDefaults#138",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.populateDefaults(com.google.javascript.rhino.JSDocInfo)",
    "snippet": "private static void populateDefaults(JSDocInfo info) {\n    if (info.getVisibility() \u003d\u003d null) {\n      info.setVisibility(Visibility.INHERITED);\n    }\n  }",
    "begin_line": 138,
    "end_line": 142,
    "comment": "/** \n * Generate defaults when certain parameters are not specified. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.markAnnotation#148",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.markAnnotation(java.lang.String, int, int)",
    "snippet": "public void markAnnotation(String annotation, int lineno, int charno) {\n    JSDocInfo.Marker marker \u003d currentInfo.addMarker();\n\n    if (marker !\u003d null) {\n      JSDocInfo.TrimmedStringPosition position \u003d\n          new JSDocInfo.TrimmedStringPosition();\n      position.setItem(annotation);\n      position.setPositionInformation(lineno, charno, lineno,\n          charno + annotation.length());\n      marker.setAnnotation(position);\n      populated \u003d true;\n    }\n\n    currentMarker \u003d marker;\n  }",
    "begin_line": 148,
    "end_line": 162,
    "comment": "/** \n * Adds a marker to the current JSDocInfo and populates the marker with the annotation information.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.markText#167",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.markText(java.lang.String, int, int, int, int)",
    "snippet": "public void markText(String text, int startLineno, int startCharno,\n      int endLineno, int endCharno) {\n    if (currentMarker !\u003d null) {\n      JSDocInfo.StringPosition position \u003d new JSDocInfo.StringPosition();\n      position.setItem(text);\n      position.setPositionInformation(startLineno, startCharno,\n          endLineno, endCharno);\n      currentMarker.setDescription(position);\n    }\n  }",
    "begin_line": 167,
    "end_line": 176,
    "comment": "/** \n * Adds a textual block to the current marker.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.markTypeNode#181",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.markTypeNode(com.google.javascript.rhino.Node, int, int, int, int, boolean)",
    "snippet": "public void markTypeNode(Node typeNode, int lineno, int startCharno,\n      int endLineno, int endCharno, boolean hasLC) {\n    if (currentMarker !\u003d null) {\n      JSDocInfo.TypePosition position \u003d new JSDocInfo.TypePosition();\n      position.setItem(typeNode);\n      position.setHasBrackets(hasLC);\n      position.setPositionInformation(lineno, startCharno,\n          endLineno, endCharno);\n      currentMarker.setType(position);\n    }\n  }",
    "begin_line": 181,
    "end_line": 191,
    "comment": "/** \n * Adds a type declaration to the current marker.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.markName#198",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.markName(java.lang.String, int, int)",
    "snippet": "@Deprecated\n  public void markName(String name,  int lineno, int charno) {\n    markName(name, null, lineno, charno);\n  }",
    "begin_line": 198,
    "end_line": 200,
    "comment": "/** \n * Adds a name declaration to the current marker.\n * @deprecated Use #markName(String, StaticSourceFile, int, int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.markName#205",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.markName(java.lang.String, com.google.javascript.rhino.jstype.StaticSourceFile, int, int)",
    "snippet": "public void markName(String name, StaticSourceFile file,\n      int lineno, int charno) {\n    if (currentMarker !\u003d null) {\n      // Record the name as both a SourcePosition\u003cString\u003e and a\n      // SourcePosition\u003cNode\u003e. The \u003cString\u003e form is deprecated,\n      // because \u003cNode\u003e is more consistent with how other name\n      // references are handled (see #markTypeNode)\n      //\n      // TODO(nicksantos): Remove all uses of the Name position\n      // and replace them with the NameNode position.\n      JSDocInfo.TrimmedStringPosition position \u003d\n          new JSDocInfo.TrimmedStringPosition();\n      position.setItem(name);\n      position.setPositionInformation(lineno, charno,\n          lineno, charno + name.length());\n      currentMarker.setName(position);\n\n      SourcePosition\u003cNode\u003e nodePos \u003d\n          new JSDocInfo.NamePosition();\n      Node node \u003d Node.newString(Token.NAME, name, lineno, charno);\n      node.setLength(name.length());\n      node.setStaticSourceFile(file);\n      nodePos.setItem(node);\n      nodePos.setPositionInformation(lineno, charno,\n          lineno, charno + name.length());\n      currentMarker.setNameNode(nodePos);\n    }\n  }",
    "begin_line": 205,
    "end_line": 232,
    "comment": "/** \n * Adds a name declaration to the current marker.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordBlockDescription#239",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordBlockDescription(java.lang.String)",
    "snippet": "public boolean recordBlockDescription(String description) {\n    populated \u003d true;\n    return currentInfo.documentBlock(description);\n  }",
    "begin_line": 239,
    "end_line": 242,
    "comment": "/** \n * Records a block-level description.\n * @return {@code true} if the description was recorded.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordVisibility#250",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordVisibility(com.google.javascript.rhino.JSDocInfo.Visibility)",
    "snippet": "public boolean recordVisibility(Visibility visibility) {\n    if (currentInfo.getVisibility() \u003d\u003d null) {\n      populated \u003d true;\n      currentInfo.setVisibility(visibility);\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 250,
    "end_line": 258,
    "comment": "/** \n * Records a visibility.\n * @return {@code true} if the visibility was recorded and {@code false}if it was already defined\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordParameter#266",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordParameter(java.lang.String, com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "public boolean recordParameter(String parameterName, JSTypeExpression type) {\n    if (!hasAnySingletonTypeTags() \u0026\u0026\n        currentInfo.declareParam(type, parameterName)) {\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 266,
    "end_line": 274,
    "comment": "/** \n * Records a typed parameter.\n * @return {@code true} if the typed parameter was recorded and{@code false} if a parameter with the same name was already defined\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordParameterDescription#282",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordParameterDescription(java.lang.String, java.lang.String)",
    "snippet": "public boolean recordParameterDescription(\n      String parameterName, String description) {\n    if (currentInfo.documentParam(parameterName, description)) {\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 282,
    "end_line": 290,
    "comment": "/** \n * Records a parameter\u0027s description.\n * @return {@code true} if the parameter\u0027s description was recorded and{@code false} if a parameter with the same name was already defined\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordTemplateTypeNames#298",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordTemplateTypeNames(java.util.List\u003cjava.lang.String\u003e)",
    "snippet": "public boolean recordTemplateTypeNames(List\u003cString\u003e names) {\n    if (currentInfo.declareTemplateTypeNames(names)) {\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 298,
    "end_line": 305,
    "comment": "/** \n * Records a template type name.\n * @return {@code true} if the template type name was recorded and{@code false} if a template type name was already defined.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordThrowType#310",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordThrowType(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "public boolean recordThrowType(JSTypeExpression type) {\n    if (!hasAnySingletonTypeTags()) {\n      currentInfo.declareThrows(type);\n      populated \u003d true;\n      return true;\n    }\n    return false;\n  }",
    "begin_line": 310,
    "end_line": 317,
    "comment": "/** \n * Records a thrown type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordThrowDescription#325",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordThrowDescription(com.google.javascript.rhino.JSTypeExpression, java.lang.String)",
    "snippet": "public boolean recordThrowDescription(\n      JSTypeExpression type, String description) {\n    if (currentInfo.documentThrows(type, description)) {\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 325,
    "end_line": 333,
    "comment": "/** \n * Records a throw type\u0027s description.\n * @return {@code true} if the type\u0027s description was recorded and{@code false} if a description with the same type was already defined\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.addAuthor#339",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.addAuthor(java.lang.String)",
    "snippet": "public boolean addAuthor(String author) {\n    if (currentInfo.documentAuthor(author)) {\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 339,
    "end_line": 346,
    "comment": "/** \n * Adds an author to the current information.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.addReference#352",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.addReference(java.lang.String)",
    "snippet": "public boolean addReference(String reference) {\n    if (currentInfo.documentReference(reference)) {\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 352,
    "end_line": 359,
    "comment": "/** \n * Adds a reference (\"@see\") to the current information.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordConsistentIdGenerator#369",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordConsistentIdGenerator()",
    "snippet": "public boolean recordConsistentIdGenerator() {\n    if (!currentInfo.isConsistentIdGenerator()) {\n      currentInfo.setConsistentIdGenerator(true);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 369,
    "end_line": 377,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#isConsistentIdGenerator()} flag set to{@code true}.\n * @return {@code true} if the consistentIdGenerator flag was recorded and{@code false} if it was already recorded\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordStableIdGenerator#386",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordStableIdGenerator()",
    "snippet": "public boolean recordStableIdGenerator() {\n    if (!currentInfo.isStableIdGenerator()) {\n      currentInfo.setStableIdGenerator(true);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 386,
    "end_line": 394,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its {@link JSDocInfo#isStableIdGenerator()} flag set to {@code true}.\n * @return {@code true} if the stableIdGenerator flag was recorded and {@code false} if it wasalready recorded.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordVersion#399",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordVersion(java.lang.String)",
    "snippet": "public boolean recordVersion(String version) {\n    if (currentInfo.documentVersion(version)) {\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 399,
    "end_line": 406,
    "comment": "/** \n * Records the version.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordDeprecationReason#411",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordDeprecationReason(java.lang.String)",
    "snippet": "public boolean recordDeprecationReason(String reason) {\n    if (currentInfo.setDeprecationReason(reason)) {\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 411,
    "end_line": 418,
    "comment": "/** \n * Records the deprecation reason.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordSuppressions#423",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordSuppressions(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public boolean recordSuppressions(Set\u003cString\u003e suppressions) {\n    if (currentInfo.setSuppressions(suppressions)) {\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 423,
    "end_line": 430,
    "comment": "/** \n * Records the list of suppressed warnings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordModifies#435",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordModifies(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public boolean recordModifies(Set\u003cString\u003e modifies) {\n    if (!hasAnySingletonSideEffectTags()\n        \u0026\u0026 currentInfo.setModifies(modifies)) {\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 435,
    "end_line": 443,
    "comment": "/** \n * Records the list of modifies warnings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordType#451",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordType(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "public boolean recordType(JSTypeExpression type) {\n    if (type !\u003d null \u0026\u0026 !hasAnyTypeRelatedTags()) {\n      currentInfo.setType(type);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 451,
    "end_line": 459,
    "comment": "/** \n * Records a type.\n * @return {@code true} if the type was recorded and {@code false} ifit is invalid or was already defined\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordTypedef#465",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordTypedef(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "public boolean recordTypedef(JSTypeExpression type) {\n    if (type !\u003d null \u0026\u0026 !hasAnyTypeRelatedTags()) {\n      currentInfo.setTypedefType(type);\n      populated \u003d true;\n      return true;\n    }\n    return false;\n  }",
    "begin_line": 465,
    "end_line": 472,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should be populatedwith a  {@code typedef}\u0027d type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordIdGenerator#482",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordIdGenerator()",
    "snippet": "public boolean recordIdGenerator() {\n    if (!currentInfo.isIdGenerator()) {\n      currentInfo.setIdGenerator(true);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 482,
    "end_line": 490,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#isIdGenerator()} flag set to{@code true}.\n * @return {@code true} if the idGenerator flag was recorded and {@code false}if it was already recorded\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordReturnType#498",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordReturnType(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "public boolean recordReturnType(JSTypeExpression jsType) {\n    if (jsType !\u003d null \u0026\u0026 currentInfo.getReturnType() \u003d\u003d null \u0026\u0026\n        !hasAnySingletonTypeTags()) {\n      currentInfo.setReturnType(jsType);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 498,
    "end_line": 507,
    "comment": "/** \n * Records a return type.\n * @return {@code true} if the return type was recorded and {@code false} ifit is invalid or was already defined\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordReturnDescription#515",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordReturnDescription(java.lang.String)",
    "snippet": "public boolean recordReturnDescription(String description) {\n    if (currentInfo.documentReturn(description)) {\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 515,
    "end_line": 522,
    "comment": "/** \n * Records a return description\n * @return {@code true} if the return description was recorded and{@code false} if it is invalid or was already defined\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordDefineType#531",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordDefineType(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "public boolean recordDefineType(JSTypeExpression type) {\n    if (type !\u003d null \u0026\u0026\n        !currentInfo.isConstant() \u0026\u0026\n        !currentInfo.isDefine() \u0026\u0026\n        recordType(type)) {\n      currentInfo.setDefine(true);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 531,
    "end_line": 542,
    "comment": "/** \n * Records the type of a define. \u0027Define\u0027 values are special constants that may be manipulated by the compiler. They are designed to mimic the #define command in the C preprocessor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordEnumParameterType#550",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordEnumParameterType(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "public boolean recordEnumParameterType(JSTypeExpression type) {\n    if (type !\u003d null \u0026\u0026 !hasAnyTypeRelatedTags()) {\n      currentInfo.setEnumParameterType(type);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 550,
    "end_line": 558,
    "comment": "/** \n * Records a parameter type to an enum.\n * @return {@code true} if the enum\u0027s parameter type was recorded and{@code false} if it was invalid or already defined\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordThisType#567",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordThisType(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "public boolean recordThisType(JSTypeExpression type) {\n    if (type !\u003d null \u0026\u0026 !hasAnySingletonTypeTags() \u0026\u0026\n        !currentInfo.hasThisType()) {\n      currentInfo.setThisType(type);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 567,
    "end_line": 576,
    "comment": "/** \n * Records a type for  {@code @this} annotation.\n * @return {@code true} if the type was recorded and{@code false} if it is invalid or if it collided with {@code @enum} or{@code @type} annotations\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordBaseType#584",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordBaseType(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "public boolean recordBaseType(JSTypeExpression jsType) {\n    if (jsType !\u003d null \u0026\u0026 !hasAnySingletonTypeTags() \u0026\u0026\n        !currentInfo.hasBaseType()) {\n      currentInfo.setBaseType(jsType);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 584,
    "end_line": 593,
    "comment": "/** \n * Records a base type.\n * @return {@code true} if the base type was recorded and {@code false}if it was already defined\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordConstancy#602",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordConstancy()",
    "snippet": "public boolean recordConstancy() {\n    if (!currentInfo.isConstant()) {\n      currentInfo.setConstant(true);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 602,
    "end_line": 610,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#isConstant()} flag set to {@code true}.\n * @return {@code true} if the constancy was recorded and {@code false}if it was already defined\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordDescription#618",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordDescription(java.lang.String)",
    "snippet": "public boolean recordDescription(String description) {\n    if (description !\u003d null \u0026\u0026 currentInfo.getDescription() \u003d\u003d null) {\n      currentInfo.setDescription(description);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 618,
    "end_line": 626,
    "comment": "/** \n * Records a description giving context for translation (i18n).\n * @return {@code true} if the description was recorded and {@code false}if the description was invalid or was already defined\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordMeaning#634",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordMeaning(java.lang.String)",
    "snippet": "public boolean recordMeaning(String meaning) {\n    if (meaning !\u003d null \u0026\u0026 currentInfo.getMeaning() \u003d\u003d null) {\n      currentInfo.setMeaning(meaning);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 634,
    "end_line": 642,
    "comment": "/** \n * Records a meaning giving context for translation (i18n). Different meanings will result in different translations.\n * @return {@code true} If the meaning was successfully updated.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordFileOverview#650",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordFileOverview(java.lang.String)",
    "snippet": "public boolean recordFileOverview(String description) {\n    if (currentInfo.documentFileOverview(description)) {\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 650,
    "end_line": 657,
    "comment": "/** \n * Records a fileoverview description.\n * @return {@code true} if the description was recorded and {@code false}if the description was invalid or was already defined.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordHiddenness#666",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordHiddenness()",
    "snippet": "public boolean recordHiddenness() {\n    if (!currentInfo.isHidden()) {\n      currentInfo.setHidden(true);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 666,
    "end_line": 674,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#isHidden()} flag set to {@code true}.\n * @return {@code true} if the hiddenness was recorded and {@code false}if it was already defined\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordNoCompile#683",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordNoCompile()",
    "snippet": "public boolean recordNoCompile() {\n    if (!currentInfo.isNoCompile()) {\n      currentInfo.setNoCompile(true);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 683,
    "end_line": 691,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#isNoCompile()} flag set to {@code true}.\n * @return {@code true} if the no compile flag was recorded and {@code false}if it was already recorded\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordNoTypeCheck#700",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordNoTypeCheck()",
    "snippet": "public boolean recordNoTypeCheck() {\n    if (!currentInfo.isNoTypeCheck()) {\n      currentInfo.setNoCheck(true);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 700,
    "end_line": 708,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#isNoTypeCheck()} flag set to {@code true}.\n * @return {@code true} if the no check flag was recorded and {@code false}if it was already recorded\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordConstructor#718",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordConstructor()",
    "snippet": "public boolean recordConstructor() {\n    if (!hasAnySingletonTypeTags() \u0026\u0026\n        !currentInfo.isConstructor() \u0026\u0026 !currentInfo.isInterface()) {\n      currentInfo.setConstructor(true);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 718,
    "end_line": 727,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#isConstructor()} flag set to {@code true}.\n * @return {@code true} if the constructor was recorded and {@code false}if it was already defined or it was incompatible with the existing flags\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.isConstructorRecorded#733",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.isConstructorRecorded()",
    "snippet": "public boolean isConstructorRecorded() {\n    return currentInfo.isConstructor();\n  }",
    "begin_line": 733,
    "end_line": 735,
    "comment": "/** \n * Whether the  {@link JSDocInfo} being built will have its{@link JSDocInfo#isConstructor()} flag set to {@code true}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordStruct#744",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordStruct()",
    "snippet": "public boolean recordStruct() {\n    if (hasAnySingletonTypeTags() || currentInfo.isInterface() ||\n        currentInfo.makesDicts() || currentInfo.makesStructs()) {\n      return false;\n    }\n    currentInfo.setStruct();\n    populated \u003d true;\n    return true;\n  }",
    "begin_line": 744,
    "end_line": 752,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#makesStructs()} flag set to {@code true}.\n * @return {@code true} if the struct was recorded and {@code false}if it was already defined or it was incompatible with the existing flags\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordDict#761",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordDict()",
    "snippet": "public boolean recordDict() {\n    if (hasAnySingletonTypeTags() || currentInfo.isInterface() ||\n        currentInfo.makesDicts() || currentInfo.makesStructs()) {\n      return false;\n    }\n    currentInfo.setDict();\n    populated \u003d true;\n    return true;\n  }",
    "begin_line": 761,
    "end_line": 769,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#makesDicts()} flag set to {@code true}.\n * @return {@code true} if the dict was recorded and {@code false}if it was already defined or it was incompatible with the existing flags\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordJavaDispatch#779",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordJavaDispatch()",
    "snippet": "public boolean recordJavaDispatch() {\n    if (!currentInfo.isJavaDispatch()) {\n      currentInfo.setJavaDispatch(true);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 779,
    "end_line": 787,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#isJavaDispatch()} flag set to {@code true}.\n * @return {@code true} if the javadispatch was recorded and {@code false}if it was already defined or it was incompatible with the existing flags\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.isJavaDispatch#793",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.isJavaDispatch()",
    "snippet": "public boolean isJavaDispatch() {\n    return currentInfo.isJavaDispatch();\n  }",
    "begin_line": 793,
    "end_line": 795,
    "comment": "/** \n * Whether the  {@link JSDocInfo} being built will have its{@link JSDocInfo#isJavaDispatch()} flag set to {@code true}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordPreserveTry#801",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordPreserveTry()",
    "snippet": "public boolean recordPreserveTry() {\n    if (!currentInfo.shouldPreserveTry()) {\n      currentInfo.setShouldPreserveTry(true);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 801,
    "end_line": 809,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#shouldPreserveTry()} flag set to {@code true}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordOverride#815",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordOverride()",
    "snippet": "public boolean recordOverride() {\n    if (!currentInfo.isOverride()) {\n      currentInfo.setOverride(true);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 815,
    "end_line": 823,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#isOverride()} flag set to {@code true}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordNoAlias#829",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordNoAlias()",
    "snippet": "public boolean recordNoAlias() {\n    if (!currentInfo.isNoAlias()) {\n      currentInfo.setNoAlias(true);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 829,
    "end_line": 837,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#isNoAlias()} flag set to {@code true}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordDeprecated#843",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordDeprecated()",
    "snippet": "public boolean recordDeprecated() {\n    if (!currentInfo.isDeprecated()) {\n      currentInfo.setDeprecated(true);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 843,
    "end_line": 851,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#isDeprecated()} flag set to {@code true}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordInterface#860",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordInterface()",
    "snippet": "public boolean recordInterface() {\n    if (hasAnySingletonTypeTags() ||\n        currentInfo.makesStructs() || currentInfo.makesDicts() ||\n        currentInfo.isConstructor() || currentInfo.isInterface()) {\n      return false;\n    }\n    currentInfo.setInterface(true);\n    populated \u003d true;\n    return true;\n  }",
    "begin_line": 860,
    "end_line": 869,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#isInterface()} flag set to {@code true}.\n * @return {@code true} if the flag was recorded and {@code false}if it was already defined or it was incompatible with the existing flags\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordExport#875",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordExport()",
    "snippet": "public boolean recordExport() {\n    if (!currentInfo.isExport()) {\n      currentInfo.setExport(true);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 875,
    "end_line": 883,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#isExport()} flag set to {@code true}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordExpose#889",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordExpose()",
    "snippet": "public boolean recordExpose() {\n    if (!currentInfo.isExpose()) {\n      currentInfo.setExpose(true);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 889,
    "end_line": 897,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#isExpose()} flag set to {@code true}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordNoShadow#903",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordNoShadow()",
    "snippet": "public boolean recordNoShadow() {\n    if (!currentInfo.isNoShadow()) {\n      currentInfo.setNoShadow(true);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 903,
    "end_line": 911,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#isNoShadow()} flag set to {@code true}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordImplicitCast#917",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordImplicitCast()",
    "snippet": "public boolean recordImplicitCast() {\n    if (!currentInfo.isImplicitCast()) {\n      currentInfo.setImplicitCast(true);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 917,
    "end_line": 925,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#isImplicitCast()} flag set to {@code true}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordNoSideEffects#931",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordNoSideEffects()",
    "snippet": "public boolean recordNoSideEffects() {\n    if (!hasAnySingletonSideEffectTags()\n        \u0026\u0026 !currentInfo.isNoSideEffects()) {\n      currentInfo.setNoSideEffects(true);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 931,
    "end_line": 940,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#isNoSideEffects()} flag set to {@code true}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordExterns#946",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordExterns()",
    "snippet": "public boolean recordExterns() {\n    if (!currentInfo.isExterns()) {\n      currentInfo.setExterns(true);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 946,
    "end_line": 954,
    "comment": "/** \n * Records that the  {@link JSDocInfo} being built should have its{@link JSDocInfo#isExterns()} flag set to {@code true}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.isInterfaceRecorded#960",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.isInterfaceRecorded()",
    "snippet": "public boolean isInterfaceRecorded() {\n    return currentInfo.isInterface();\n  }",
    "begin_line": 960,
    "end_line": 962,
    "comment": "/** \n * Whether the  {@link JSDocInfo} being built will have its{@link JSDocInfo#isInterface()} flag set to {@code true}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.hasParameter#967",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.hasParameter(java.lang.String)",
    "snippet": "public boolean hasParameter(String name) {\n    return currentInfo.hasParameter(name);\n  }",
    "begin_line": 967,
    "end_line": 969,
    "comment": "/** \n * @return Whether a parameter of the given name has already been recorded.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordImplementedInterface#974",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordImplementedInterface(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "public boolean recordImplementedInterface(JSTypeExpression interfaceName) {\n    if (currentInfo.addImplementedInterface(interfaceName)) {\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 974,
    "end_line": 981,
    "comment": "/** \n * Records an implemented interface.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordExtendedInterface#986",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordExtendedInterface(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "public boolean recordExtendedInterface(JSTypeExpression interfaceType) {\n    if (currentInfo.addExtendedInterface(interfaceType)) {\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 986,
    "end_line": 993,
    "comment": "/** \n * Records an extended interface type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.recordLends#998",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordLends(java.lang.String)",
    "snippet": "public boolean recordLends(String name) {\n    if (!hasAnyTypeRelatedTags()) {\n      currentInfo.setLendsName(name);\n      populated \u003d true;\n      return true;\n    } else {\n      return false;\n    }\n  }",
    "begin_line": 998,
    "end_line": 1006,
    "comment": "/** \n * Records that we\u0027re lending to another name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.hasAnyTypeRelatedTags#1012",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.hasAnyTypeRelatedTags()",
    "snippet": "private boolean hasAnyTypeRelatedTags() {\n    return currentInfo.isConstructor() ||\n        currentInfo.isInterface() ||\n        currentInfo.getParameterCount() \u003e 0 ||\n        currentInfo.hasReturnType() ||\n        currentInfo.hasBaseType() ||\n        currentInfo.getExtendedInterfacesCount() \u003e 0 ||\n        currentInfo.getLendsName() !\u003d null ||\n        currentInfo.hasThisType() ||\n        hasAnySingletonTypeTags();\n  }",
    "begin_line": 1012,
    "end_line": 1022,
    "comment": "/** \n * Whether the current doc info has other type tags, like {@code @param} or {@code @return} or {@code @type} or etc.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.hasAnySingletonTypeTags#1029",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.hasAnySingletonTypeTags()",
    "snippet": "private boolean hasAnySingletonTypeTags() {\n    return currentInfo.hasType() ||\n        currentInfo.hasTypedefType() ||\n        currentInfo.hasEnumParameterType();\n  }",
    "begin_line": 1029,
    "end_line": 1033,
    "comment": "/** \n * Whether the current doc info has any of the singleton type tags that may not appear with other type tags, like {@code @type} or {@code @typedef}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSDocInfoBuilder.hasAnySingletonSideEffectTags#1040",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSDocInfoBuilder.java",
    "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
    "signature": "com.google.javascript.rhino.JSDocInfoBuilder.hasAnySingletonSideEffectTags()",
    "snippet": "private boolean hasAnySingletonSideEffectTags() {\n    return currentInfo.isNoSideEffects() ||\n        currentInfo.hasModifies();\n  }",
    "begin_line": 1040,
    "end_line": 1043,
    "comment": "/** \n * Whether the current doc info has any of the singleton type tags that may not appear with other type tags, like {@code @type} or {@code @typedef}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeExpression.JSTypeExpression#64",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSTypeExpression.java",
    "class_name": "com.google.javascript.rhino.JSTypeExpression",
    "signature": "com.google.javascript.rhino.JSTypeExpression.JSTypeExpression(com.google.javascript.rhino.Node, java.lang.String)",
    "snippet": "public JSTypeExpression(Node root, String sourceName) {\n    this.root \u003d root;\n    this.sourceName \u003d sourceName;\n  }",
    "begin_line": 64,
    "end_line": 67,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeExpression.makeOptionalArg#73",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSTypeExpression.java",
    "class_name": "com.google.javascript.rhino.JSTypeExpression",
    "signature": "com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(com.google.javascript.rhino.JSTypeExpression)",
    "snippet": "public static JSTypeExpression makeOptionalArg(JSTypeExpression expr) {\n    if (expr.isOptionalArg() || expr.isVarArgs()) {\n      return expr;\n    } else {\n      return new JSTypeExpression(\n          new Node(Token.EQUALS, expr.root), expr.sourceName);\n    }\n  }",
    "begin_line": 73,
    "end_line": 80,
    "comment": "/** \n * Make the given type expression into an optional type expression, if possible.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeExpression.isOptionalArg#85",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSTypeExpression.java",
    "class_name": "com.google.javascript.rhino.JSTypeExpression",
    "signature": "com.google.javascript.rhino.JSTypeExpression.isOptionalArg()",
    "snippet": "public boolean isOptionalArg() {\n    return root.getType() \u003d\u003d Token.EQUALS;\n  }",
    "begin_line": 85,
    "end_line": 87,
    "comment": "/** \n * @return Whether this expression denotes an optional {@code @param}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeExpression.isVarArgs#92",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSTypeExpression.java",
    "class_name": "com.google.javascript.rhino.JSTypeExpression",
    "signature": "com.google.javascript.rhino.JSTypeExpression.isVarArgs()",
    "snippet": "public boolean isVarArgs() {\n    return root.getType() \u003d\u003d Token.ELLIPSIS;\n  }",
    "begin_line": 92,
    "end_line": 94,
    "comment": "/** \n * @return Whether this expression denotes a rest args {@code @param}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeExpression.evaluate#99",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSTypeExpression.java",
    "class_name": "com.google.javascript.rhino.JSTypeExpression",
    "signature": "com.google.javascript.rhino.JSTypeExpression.evaluate(com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e, com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": "public JSType evaluate(StaticScope\u003cJSType\u003e scope, JSTypeRegistry registry) {\n    JSType type \u003d registry.createFromTypeNodes(root, sourceName, scope);\n    root.setJSType(type);\n    return type;\n  }",
    "begin_line": 99,
    "end_line": 103,
    "comment": "/** \n * Evaluates the type expression into a  {@code JSType} object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeExpression.equals#106",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSTypeExpression.java",
    "class_name": "com.google.javascript.rhino.JSTypeExpression",
    "signature": "com.google.javascript.rhino.JSTypeExpression.equals(java.lang.Object)",
    "snippet": "@Override\n  public boolean equals(Object other) {\n    return other instanceof JSTypeExpression \u0026\u0026\n        ((JSTypeExpression) other).root.isEquivalentTo(root);\n  }",
    "begin_line": 106,
    "end_line": 109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeExpression.hashCode#112",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSTypeExpression.java",
    "class_name": "com.google.javascript.rhino.JSTypeExpression",
    "signature": "com.google.javascript.rhino.JSTypeExpression.hashCode()",
    "snippet": "@Override\n  public int hashCode() {\n    return root.toStringTree().hashCode();\n  }",
    "begin_line": 112,
    "end_line": 114,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeExpression.getRoot#120",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/JSTypeExpression.java",
    "class_name": "com.google.javascript.rhino.JSTypeExpression",
    "signature": "com.google.javascript.rhino.JSTypeExpression.getRoot()",
    "snippet": "public Node getRoot() {\n    return root;\n  }",
    "begin_line": 120,
    "end_line": 122,
    "comment": "/** \n * @return The source for this type expression.  Note that it will notcontain an expression if there\u0027s an @override tag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.propToString#111",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.propToString(int)",
    "snippet": "private static final String propToString(int propType) {\n      switch (propType) {\n        case VAR_ARGS_NAME:      return \"var_args_name\";\n\n        case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n\n        case INCRDECR_PROP:      return \"incrdecr\";\n        case QUOTED_PROP:        return \"quoted\";\n        case OPT_ARG_NAME:       return \"opt_arg\";\n\n        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n        case EMPTY_BLOCK:        return \"empty_block\";\n        case ORIGINALNAME_PROP:  return \"originalname\";\n        case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n        case IS_CONSTANT_NAME:   return \"is_constant_name\";\n        case IS_NAMESPACE:       return \"is_namespace\";\n        case IS_DISPATCHER:      return \"is_dispatcher\";\n        case DIRECTIVES:         return \"directives\";\n        case DIRECT_EVAL:        return \"direct_eval\";\n        case FREE_CALL:          return \"free_call\";\n        case STATIC_SOURCE_FILE:    return \"source_file\";\n        case INPUT_ID:  return \"input_id\";\n        case LENGTH:    return \"length\";\n        case SLASH_V:   return \"slash_v\";\n        case INFERRED_FUNCTION:   return \"inferred\";\n        default:\n          throw new IllegalStateException(\"unexpect prop id \" + propType);\n      }\n  }",
    "begin_line": 111,
    "end_line": 140,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberNode.NumberNode#146",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.NumberNode(double)",
    "snippet": " NumberNode(double number) {\n      super(Token.NUMBER);\n      this.number \u003d number;\n    }",
    "begin_line": 146,
    "end_line": 149,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberNode.NumberNode#151",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.NumberNode(double, int, int)",
    "snippet": "public NumberNode(double number, int lineno, int charno) {\n      super(Token.NUMBER, lineno, charno);\n      this.number \u003d number;\n    }",
    "begin_line": 151,
    "end_line": 154,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberNode.getDouble#157",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getDouble()",
    "snippet": "@Override\n    public double getDouble() {\n      return this.number;\n    }",
    "begin_line": 157,
    "end_line": 159,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberNode.setDouble#162",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setDouble(double)",
    "snippet": "@Override\n    public void setDouble(double d) {\n      this.number \u003d d;\n    }",
    "begin_line": 162,
    "end_line": 164,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberNode.isEquivalentTo#167",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isEquivalentTo(com.google.javascript.rhino.Node, boolean, boolean)",
    "snippet": "@Override\n    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent \u003d super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue \u003d getDouble();\n        double thatValue \u003d ((NumberNode) node).getDouble();\n        if (thisValue \u003d\u003d thatValue) {\n          // detect the difference between 0.0 and -0.0.\n          return (thisValue !\u003d 0.0) || (1/thisValue \u003d\u003d 1/thatValue);\n        }\n      }\n      return false;\n    }",
    "begin_line": 167,
    "end_line": 178,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringNode.StringNode#187",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.StringNode(int, java.lang.String)",
    "snippet": " StringNode(int type, String str) {\n      super(type);\n      if (null \u003d\u003d str) {\n        throw new IllegalArgumentException(\"StringNode: str is null\");\n      }\n      this.str \u003d str;\n    }",
    "begin_line": 187,
    "end_line": 193,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringNode.StringNode#195",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.StringNode(int, java.lang.String, int, int)",
    "snippet": " StringNode(int type, String str, int lineno, int charno) {\n      super(type, lineno, charno);\n      if (null \u003d\u003d str) {\n        throw new IllegalArgumentException(\"StringNode: str is null\");\n      }\n      this.str \u003d str;\n    }",
    "begin_line": 195,
    "end_line": 201,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringNode.getString#208",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getString()",
    "snippet": "@Override\n    public String getString() {\n      return this.str;\n    }",
    "begin_line": 208,
    "end_line": 210,
    "comment": "/** \n * returns the string content.\n * @return non null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringNode.setString#217",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setString(java.lang.String)",
    "snippet": "@Override\n    public void setString(String str) {\n      if (null \u003d\u003d str) {\n        throw new IllegalArgumentException(\"StringNode: str is null\");\n      }\n      this.str \u003d str;\n    }",
    "begin_line": 217,
    "end_line": 222,
    "comment": "/** \n * sets the string content.\n * @param str the new value.  Non null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringNode.isEquivalentTo#225",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isEquivalentTo(com.google.javascript.rhino.Node, boolean, boolean)",
    "snippet": "@Override\n    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      return (super.isEquivalentTo(node, compareJsType, recurse)\n          \u0026\u0026 this.str.equals(((StringNode) node).str));\n    }",
    "begin_line": 225,
    "end_line": 228,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringNode.isQuotedString#237",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isQuotedString()",
    "snippet": "@Override\n    public boolean isQuotedString() {\n      return getBooleanProp(QUOTED_PROP);\n    }",
    "begin_line": 237,
    "end_line": 239,
    "comment": "/** \n * If the property is not defined, this was not a quoted key.  The QUOTED_PROP int property is only assigned to STRING tokens used as object lit keys.\n * @return true if this was a quoted string key in an object literal.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringNode.setQuotedString#245",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setQuotedString()",
    "snippet": "@Override\n    public void setQuotedString() {\n      putBooleanProp(QUOTED_PROP, true);\n    }",
    "begin_line": 245,
    "end_line": 247,
    "comment": "/** \n * This should only be called for STRING nodes created in object lits.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropListItem.getType#254",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getType()",
    "snippet": "int getType();",
    "begin_line": 254,
    "end_line": 254,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropListItem.getNext#255",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getNext()",
    "snippet": "PropListItem getNext();",
    "begin_line": 255,
    "end_line": 255,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropListItem.chain#256",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.chain(com.google.javascript.rhino.Node.PropListItem)",
    "snippet": "PropListItem chain(PropListItem next);",
    "begin_line": 256,
    "end_line": 256,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropListItem.getObjectValue#257",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getObjectValue()",
    "snippet": "Object getObjectValue();",
    "begin_line": 257,
    "end_line": 257,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropListItem.getIntValue#258",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getIntValue()",
    "snippet": "int getIntValue();",
    "begin_line": 258,
    "end_line": 258,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractPropListItem.AbstractPropListItem#268",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.AbstractPropListItem(int, com.google.javascript.rhino.Node.PropListItem)",
    "snippet": " AbstractPropListItem(int propType, PropListItem next) {\n      this.propType \u003d propType;\n      this.next \u003d next;\n    }",
    "begin_line": 268,
    "end_line": 271,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractPropListItem.getType#274",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getType()",
    "snippet": "@Override\n    public int getType() {\n      return propType;\n    }",
    "begin_line": 274,
    "end_line": 276,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractPropListItem.getNext#279",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getNext()",
    "snippet": "@Override\n    public PropListItem getNext() {\n      return next;\n    }",
    "begin_line": 279,
    "end_line": 281,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractPropListItem.chain#284",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.chain(com.google.javascript.rhino.Node.PropListItem)",
    "snippet": "@Override\n    public abstract PropListItem chain(PropListItem next);",
    "begin_line": 284,
    "end_line": 284,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectPropListItem.ObjectPropListItem#294",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.ObjectPropListItem(int, java.lang.Object, com.google.javascript.rhino.Node.PropListItem)",
    "snippet": " ObjectPropListItem(int propType, Object objectValue, PropListItem next) {\n      super(propType, next);\n      this.objectValue \u003d objectValue;\n    }",
    "begin_line": 294,
    "end_line": 297,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectPropListItem.getIntValue#300",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getIntValue()",
    "snippet": "@Override\n    public int getIntValue() {\n      throw new UnsupportedOperationException();\n    }",
    "begin_line": 300,
    "end_line": 302,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectPropListItem.getObjectValue#305",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getObjectValue()",
    "snippet": "@Override\n    public Object getObjectValue() {\n      return objectValue;\n    }",
    "begin_line": 305,
    "end_line": 307,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectPropListItem.toString#310",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.toString()",
    "snippet": "@Override\n    public String toString() {\n      return objectValue \u003d\u003d null ? \"null\" : objectValue.toString();\n    }",
    "begin_line": 310,
    "end_line": 312,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectPropListItem.chain#315",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.chain(com.google.javascript.rhino.Node.PropListItem)",
    "snippet": "@Override\n    public PropListItem chain(PropListItem next) {\n      return new ObjectPropListItem(getType(), objectValue, next);\n    }",
    "begin_line": 315,
    "end_line": 317,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.IntPropListItem#326",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.IntPropListItem(int, int, com.google.javascript.rhino.Node.PropListItem)",
    "snippet": " IntPropListItem(int propType, int intValue, PropListItem next) {\n      super(propType, next);\n      this.intValue \u003d intValue;\n    }",
    "begin_line": 326,
    "end_line": 329,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getIntValue#332",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getIntValue()",
    "snippet": "@Override\n    public int getIntValue() {\n      return intValue;\n    }",
    "begin_line": 332,
    "end_line": 334,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getObjectValue#337",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getObjectValue()",
    "snippet": "@Override\n    public Object getObjectValue() {\n      throw new UnsupportedOperationException();\n    }",
    "begin_line": 337,
    "end_line": 339,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.toString#342",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.toString()",
    "snippet": "@Override\n    public String toString() {\n      return String.valueOf(intValue);\n    }",
    "begin_line": 342,
    "end_line": 344,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.chain#347",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.chain(com.google.javascript.rhino.Node.PropListItem)",
    "snippet": "@Override\n    public PropListItem chain(PropListItem next) {\n      return new IntPropListItem(getType(), intValue, next);\n    }",
    "begin_line": 347,
    "end_line": 349,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.Node#352",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.Node(int)",
    "snippet": "public Node(int nodeType) {\n    type \u003d nodeType;\n    parent \u003d null;\n    sourcePosition \u003d -1;\n  }",
    "begin_line": 352,
    "end_line": 356,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.Node#358",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node)",
    "snippet": "public Node(int nodeType, Node child) {\n    Preconditions.checkArgument(child.parent \u003d\u003d null,\n        \"new child has existing parent\");\n    Preconditions.checkArgument(child.next \u003d\u003d null,\n        \"new child has existing sibling\");\n\n    type \u003d nodeType;\n    parent \u003d null;\n    first \u003d last \u003d child;\n    child.next \u003d null;\n    child.parent \u003d this;\n    sourcePosition \u003d -1;\n  }",
    "begin_line": 358,
    "end_line": 370,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.Node#372",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public Node(int nodeType, Node left, Node right) {\n    Preconditions.checkArgument(left.parent \u003d\u003d null,\n        \"first new child has existing parent\");\n    Preconditions.checkArgument(left.next \u003d\u003d null,\n        \"first new child has existing sibling\");\n    Preconditions.checkArgument(right.parent \u003d\u003d null,\n        \"second new child has existing parent\");\n    Preconditions.checkArgument(right.next \u003d\u003d null,\n        \"second new child has existing sibling\");\n    type \u003d nodeType;\n    parent \u003d null;\n    first \u003d left;\n    last \u003d right;\n    left.next \u003d right;\n    left.parent \u003d this;\n    right.next \u003d null;\n    right.parent \u003d this;\n    sourcePosition \u003d -1;\n  }",
    "begin_line": 372,
    "end_line": 390,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.Node#392",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public Node(int nodeType, Node left, Node mid, Node right) {\n    Preconditions.checkArgument(left.parent \u003d\u003d null);\n    Preconditions.checkArgument(left.next \u003d\u003d null);\n    Preconditions.checkArgument(mid.parent \u003d\u003d null);\n    Preconditions.checkArgument(mid.next \u003d\u003d null);\n    Preconditions.checkArgument(right.parent \u003d\u003d null);\n    Preconditions.checkArgument(right.next \u003d\u003d null);\n    type \u003d nodeType;\n    parent \u003d null;\n    first \u003d left;\n    last \u003d right;\n    left.next \u003d mid;\n    left.parent \u003d this;\n    mid.next \u003d right;\n    mid.parent \u003d this;\n    right.next \u003d null;\n    right.parent \u003d this;\n    sourcePosition \u003d -1;\n  }",
    "begin_line": 392,
    "end_line": 410,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.Node#412",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public Node(int nodeType, Node left, Node mid, Node mid2, Node right) {\n    Preconditions.checkArgument(left.parent \u003d\u003d null);\n    Preconditions.checkArgument(left.next \u003d\u003d null);\n    Preconditions.checkArgument(mid.parent \u003d\u003d null);\n    Preconditions.checkArgument(mid.next \u003d\u003d null);\n    Preconditions.checkArgument(mid2.parent \u003d\u003d null);\n    Preconditions.checkArgument(mid2.next \u003d\u003d null);\n    Preconditions.checkArgument(right.parent \u003d\u003d null);\n    Preconditions.checkArgument(right.next \u003d\u003d null);\n    type \u003d nodeType;\n    parent \u003d null;\n    first \u003d left;\n    last \u003d right;\n    left.next \u003d mid;\n    left.parent \u003d this;\n    mid.next \u003d mid2;\n    mid.parent \u003d this;\n    mid2.next \u003d right;\n    mid2.parent \u003d this;\n    right.next \u003d null;\n    right.parent \u003d this;\n    sourcePosition \u003d -1;\n  }",
    "begin_line": 412,
    "end_line": 434,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.Node#436",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.Node(int, int, int)",
    "snippet": "public Node(int nodeType, int lineno, int charno) {\n    type \u003d nodeType;\n    parent \u003d null;\n    sourcePosition \u003d mergeLineCharNo(lineno, charno);\n  }",
    "begin_line": 436,
    "end_line": 440,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.Node#442",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, int, int)",
    "snippet": "public Node(int nodeType, Node child, int lineno, int charno) {\n    this(nodeType, child);\n    sourcePosition \u003d mergeLineCharNo(lineno, charno);\n  }",
    "begin_line": 442,
    "end_line": 445,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.Node#447",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, int, int)",
    "snippet": "public Node(int nodeType, Node left, Node right, int lineno, int charno) {\n    this(nodeType, left, right);\n    sourcePosition \u003d mergeLineCharNo(lineno, charno);\n  }",
    "begin_line": 447,
    "end_line": 450,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.Node#452",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, int, int)",
    "snippet": "public Node(int nodeType, Node left, Node mid, Node right,\n      int lineno, int charno) {\n    this(nodeType, left, mid, right);\n    sourcePosition \u003d mergeLineCharNo(lineno, charno);\n  }",
    "begin_line": 452,
    "end_line": 456,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.Node#458",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, int, int)",
    "snippet": "public Node(int nodeType, Node left, Node mid, Node mid2, Node right,\n      int lineno, int charno) {\n    this(nodeType, left, mid, mid2, right);\n    sourcePosition \u003d mergeLineCharNo(lineno, charno);\n  }",
    "begin_line": 458,
    "end_line": 462,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.Node#464",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node[], int, int)",
    "snippet": "public Node(int nodeType, Node[] children, int lineno, int charno) {\n    this(nodeType, children);\n    sourcePosition \u003d mergeLineCharNo(lineno, charno);\n  }",
    "begin_line": 464,
    "end_line": 467,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.Node#469",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node[])",
    "snippet": "public Node(int nodeType, Node[] children) {\n    this.type \u003d nodeType;\n    parent \u003d null;\n    if (children.length !\u003d 0) {\n      this.first \u003d children[0];\n      this.last \u003d children[children.length - 1];\n\n      for (int i \u003d 1; i \u003c children.length; i++) {\n        if (null !\u003d children[i - 1].next) {\n          // fail early on loops. implies same node in array twice\n          throw new IllegalArgumentException(\"duplicate child\");\n        }\n        children[i - 1].next \u003d children[i];\n        Preconditions.checkArgument(children[i - 1].parent \u003d\u003d null);\n        children[i - 1].parent \u003d this;\n      }\n      Preconditions.checkArgument(children[children.length - 1].parent \u003d\u003d null);\n      children[children.length - 1].parent \u003d this;\n\n      if (null !\u003d this.last.next) {\n        // fail early on loops. implies same node in array twice\n        throw new IllegalArgumentException(\"duplicate child\");\n      }\n    }\n  }",
    "begin_line": 469,
    "end_line": 493,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.newNumber#495",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.newNumber(double)",
    "snippet": "public static Node newNumber(double number) {\n    return new NumberNode(number);\n  }",
    "begin_line": 495,
    "end_line": 497,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.newNumber#499",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.newNumber(double, int, int)",
    "snippet": "public static Node newNumber(double number, int lineno, int charno) {\n    return new NumberNode(number, lineno, charno);\n  }",
    "begin_line": 499,
    "end_line": 501,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.newString#503",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.newString(java.lang.String)",
    "snippet": "public static Node newString(String str) {\n    return new StringNode(Token.STRING, str);\n  }",
    "begin_line": 503,
    "end_line": 505,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.newString#507",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.newString(int, java.lang.String)",
    "snippet": "public static Node newString(int type, String str) {\n    return new StringNode(type, str);\n  }",
    "begin_line": 507,
    "end_line": 509,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.newString#511",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.newString(java.lang.String, int, int)",
    "snippet": "public static Node newString(String str, int lineno, int charno) {\n    return new StringNode(Token.STRING, str, lineno, charno);\n  }",
    "begin_line": 511,
    "end_line": 513,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.newString#515",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.newString(int, java.lang.String, int, int)",
    "snippet": "public static Node newString(int type, String str, int lineno, int charno) {\n    return new StringNode(type, str, lineno, charno);\n  }",
    "begin_line": 515,
    "end_line": 517,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getType#519",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getType()",
    "snippet": "public int getType() {\n    return type;\n  }",
    "begin_line": 519,
    "end_line": 521,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.setType#523",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setType(int)",
    "snippet": "public void setType(int type) {\n    this.type \u003d type;\n  }",
    "begin_line": 523,
    "end_line": 525,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.hasChildren#527",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.hasChildren()",
    "snippet": "public boolean hasChildren() {\n    return first !\u003d null;\n  }",
    "begin_line": 527,
    "end_line": 529,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getFirstChild#531",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getFirstChild()",
    "snippet": "public Node getFirstChild() {\n    return first;\n  }",
    "begin_line": 531,
    "end_line": 533,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getLastChild#535",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getLastChild()",
    "snippet": "public Node getLastChild() {\n    return last;\n  }",
    "begin_line": 535,
    "end_line": 537,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getNext#539",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getNext()",
    "snippet": "public Node getNext() {\n    return next;\n  }",
    "begin_line": 539,
    "end_line": 541,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getChildBefore#543",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getChildBefore(com.google.javascript.rhino.Node)",
    "snippet": "public Node getChildBefore(Node child) {\n    if (child \u003d\u003d first) {\n      return null;\n    }\n    Node n \u003d first;\n    while (n.next !\u003d child) {\n      n \u003d n.next;\n      if (n \u003d\u003d null) {\n        throw new RuntimeException(\"node is not a child\");\n      }\n    }\n    return n;\n  }",
    "begin_line": 543,
    "end_line": 555,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getChildAtIndex#557",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getChildAtIndex(int)",
    "snippet": "public Node getChildAtIndex(int i) {\n    Node n \u003d first;\n    while (i \u003e 0) {\n      n \u003d n.next;\n      i--;\n    }\n    return n;\n  }",
    "begin_line": 557,
    "end_line": 564,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getIndexOfChild#566",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getIndexOfChild(com.google.javascript.rhino.Node)",
    "snippet": "public int getIndexOfChild(Node child) {\n    Node n \u003d first;\n    int i \u003d 0;\n    while (n !\u003d null) {\n      if (child \u003d\u003d n) {\n        return i;\n      }\n\n      n \u003d n.next;\n      i++;\n    }\n    return -1;\n  }",
    "begin_line": 566,
    "end_line": 578,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getLastSibling#580",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getLastSibling()",
    "snippet": "public Node getLastSibling() {\n    Node n \u003d this;\n    while (n.next !\u003d null) {\n      n \u003d n.next;\n    }\n    return n;\n  }",
    "begin_line": 580,
    "end_line": 586,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.addChildToFront#588",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.addChildToFront(com.google.javascript.rhino.Node)",
    "snippet": "public void addChildToFront(Node child) {\n    Preconditions.checkArgument(child.parent \u003d\u003d null);\n    Preconditions.checkArgument(child.next \u003d\u003d null);\n    child.parent \u003d this;\n    child.next \u003d first;\n    first \u003d child;\n    if (last \u003d\u003d null) {\n      last \u003d child;\n    }\n  }",
    "begin_line": 588,
    "end_line": 597,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.addChildToBack#599",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.addChildToBack(com.google.javascript.rhino.Node)",
    "snippet": "public void addChildToBack(Node child) {\n    Preconditions.checkArgument(child.parent \u003d\u003d null);\n    Preconditions.checkArgument(child.next \u003d\u003d null);\n    child.parent \u003d this;\n    child.next \u003d null;\n    if (last \u003d\u003d null) {\n      first \u003d last \u003d child;\n      return;\n    }\n    last.next \u003d child;\n    last \u003d child;\n  }",
    "begin_line": 599,
    "end_line": 610,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.addChildrenToFront#612",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.addChildrenToFront(com.google.javascript.rhino.Node)",
    "snippet": "public void addChildrenToFront(Node children) {\n    for (Node child \u003d children; child !\u003d null; child \u003d child.next) {\n      Preconditions.checkArgument(child.parent \u003d\u003d null);\n      child.parent \u003d this;\n    }\n    Node lastSib \u003d children.getLastSibling();\n    lastSib.next \u003d first;\n    first \u003d children;\n    if (last \u003d\u003d null) {\n      last \u003d lastSib;\n    }\n  }",
    "begin_line": 612,
    "end_line": 623,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.addChildrenToBack#625",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.addChildrenToBack(com.google.javascript.rhino.Node)",
    "snippet": "public void addChildrenToBack(Node children) {\n    addChildrenAfter(children, getLastChild());\n  }",
    "begin_line": 625,
    "end_line": 627,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.addChildBefore#632",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.addChildBefore(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public void addChildBefore(Node newChild, Node node) {\n    Preconditions.checkArgument(node !\u003d null \u0026\u0026 node.parent \u003d\u003d this,\n        \"The existing child node of the parent should not be null.\");\n    Preconditions.checkArgument(newChild.next \u003d\u003d null,\n        \"The new child node has siblings.\");\n    Preconditions.checkArgument(newChild.parent \u003d\u003d null,\n        \"The new child node already has a parent.\");\n    if (first \u003d\u003d node) {\n      newChild.parent \u003d this;\n      newChild.next \u003d first;\n      first \u003d newChild;\n      return;\n    }\n    Node prev \u003d getChildBefore(node);\n    addChildAfter(newChild, prev);\n  }",
    "begin_line": 632,
    "end_line": 647,
    "comment": "/** \n * Add \u0027child\u0027 before \u0027node\u0027.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.addChildAfter#652",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.addChildAfter(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public void addChildAfter(Node newChild, Node node) {\n    Preconditions.checkArgument(newChild.next \u003d\u003d null,\n        \"The new child node has siblings.\");\n    addChildrenAfter(newChild, node);\n  }",
    "begin_line": 652,
    "end_line": 656,
    "comment": "/** \n * Add \u0027child\u0027 after \u0027node\u0027.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.addChildrenAfter#661",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.addChildrenAfter(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public void addChildrenAfter(Node children, Node node) {\n    Preconditions.checkArgument(node \u003d\u003d null || node.parent \u003d\u003d this);\n    for (Node child \u003d children; child !\u003d null; child \u003d child.next) {\n      Preconditions.checkArgument(child.parent \u003d\u003d null);\n      child.parent \u003d this;\n    }\n\n    Node lastSibling \u003d children.getLastSibling();\n    if (node !\u003d null) {\n      Node oldNext \u003d node.next;\n      node.next \u003d children;\n      lastSibling.next \u003d oldNext;\n      if (node \u003d\u003d last) {\n        last \u003d lastSibling;\n      }\n    } else {\n      // Append to the beginning.\n      if (first !\u003d null) {\n        lastSibling.next \u003d first;\n      } else {\n        last \u003d lastSibling;\n      }\n      first \u003d children;\n    }\n  }",
    "begin_line": 661,
    "end_line": 685,
    "comment": "/** \n * Add all children after \u0027node\u0027.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.removeChild#690",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.removeChild(com.google.javascript.rhino.Node)",
    "snippet": "public void removeChild(Node child) {\n    Node prev \u003d getChildBefore(child);\n    if (prev \u003d\u003d null)\n        first \u003d first.next;\n    else\n        prev.next \u003d child.next;\n    if (child \u003d\u003d last) last \u003d prev;\n    child.next \u003d null;\n    child.parent \u003d null;\n  }",
    "begin_line": 690,
    "end_line": 699,
    "comment": "/** \n * Detach a child from its parent and siblings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.replaceChild#704",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.replaceChild(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public void replaceChild(Node child, Node newChild) {\n    Preconditions.checkArgument(newChild.next \u003d\u003d null,\n        \"The new child node has siblings.\");\n    Preconditions.checkArgument(newChild.parent \u003d\u003d null,\n        \"The new child node already has a parent.\");\n\n    // Copy over important information.\n    newChild.copyInformationFrom(child);\n\n    newChild.next \u003d child.next;\n    newChild.parent \u003d this;\n    if (child \u003d\u003d first) {\n        first \u003d newChild;\n    } else {\n        Node prev \u003d getChildBefore(child);\n        prev.next \u003d newChild;\n    }\n    if (child \u003d\u003d last)\n        last \u003d newChild;\n    child.next \u003d null;\n    child.parent \u003d null;\n  }",
    "begin_line": 704,
    "end_line": 725,
    "comment": "/** \n * Detaches child from Node and replaces it with newChild.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.replaceChildAfter#727",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.replaceChildAfter(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": "public void replaceChildAfter(Node prevChild, Node newChild) {\n    Preconditions.checkArgument(prevChild.parent \u003d\u003d this,\n      \"prev is not a child of this node.\");\n\n    Preconditions.checkArgument(newChild.next \u003d\u003d null,\n        \"The new child node has siblings.\");\n    Preconditions.checkArgument(newChild.parent \u003d\u003d null,\n        \"The new child node already has a parent.\");\n\n    // Copy over important information.\n    newChild.copyInformationFrom(prevChild);\n\n    Node child \u003d prevChild.next;\n    newChild.next \u003d child.next;\n    newChild.parent \u003d this;\n    prevChild.next \u003d newChild;\n    if (child \u003d\u003d last)\n        last \u003d newChild;\n    child.next \u003d null;\n    child.parent \u003d null;\n  }",
    "begin_line": 727,
    "end_line": 747,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.lookupProperty#750",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.lookupProperty(int)",
    "snippet": "@VisibleForTesting\n  PropListItem lookupProperty(int propType) {\n    PropListItem x \u003d propListHead;\n    while (x !\u003d null \u0026\u0026 propType !\u003d x.getType()) {\n      x \u003d x.getNext();\n    }\n    return x;\n  }",
    "begin_line": 750,
    "end_line": 756,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.clonePropsFrom#765",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.clonePropsFrom(com.google.javascript.rhino.Node)",
    "snippet": "public Node clonePropsFrom(Node other) {\n    Preconditions.checkState(this.propListHead \u003d\u003d null,\n        \"Node has existing properties.\");\n    this.propListHead \u003d other.propListHead;\n    return this;\n  }",
    "begin_line": 765,
    "end_line": 770,
    "comment": "/** \n * Clone the properties from the provided node without copying the property object.  The receiving node may not have any existing properties.\n * @param other The node to clone properties from.\n * @return this node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.removeProp#772",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.removeProp(int)",
    "snippet": "public void removeProp(int propType) {\n    PropListItem result \u003d removeProp(propListHead, propType);\n    if (result !\u003d propListHead) {\n      propListHead \u003d result;\n    }\n  }",
    "begin_line": 772,
    "end_line": 777,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.removeProp#785",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.removeProp(com.google.javascript.rhino.Node.PropListItem, int)",
    "snippet": "private PropListItem removeProp(PropListItem item, int propType) {\n    if (item \u003d\u003d null) {\n      return null;\n    } else if (item.getType() \u003d\u003d propType) {\n      return item.getNext();\n    } else {\n      PropListItem result \u003d removeProp(item.getNext(), propType);\n      if (result !\u003d item.getNext()) {\n        return item.chain(result);\n      } else {\n        return item;\n      }\n    }\n  }",
    "begin_line": 785,
    "end_line": 798,
    "comment": "/** \n * @param item The item to inspect\n * @param propType The property to look for\n * @return The replacement list if the property was removed, or\u0027item\u0027 otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getProp#800",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getProp(int)",
    "snippet": "public Object getProp(int propType) {\n    PropListItem item \u003d lookupProperty(propType);\n    if (item \u003d\u003d null) {\n      return null;\n    }\n    return item.getObjectValue();\n  }",
    "begin_line": 800,
    "end_line": 806,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getBooleanProp#808",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getBooleanProp(int)",
    "snippet": "public boolean getBooleanProp(int propType) {\n    return getIntProp(propType) !\u003d 0;\n  }",
    "begin_line": 808,
    "end_line": 810,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getIntProp#816",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getIntProp(int)",
    "snippet": "public int getIntProp(int propType) {\n    PropListItem item \u003d lookupProperty(propType);\n    if (item \u003d\u003d null) {\n      return 0;\n    }\n    return item.getIntValue();\n  }",
    "begin_line": 816,
    "end_line": 822,
    "comment": "/** \n * Returns the integer value for the property, or 0 if the property is not defined.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getExistingIntProp#824",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getExistingIntProp(int)",
    "snippet": "public int getExistingIntProp(int propType) {\n    PropListItem item \u003d lookupProperty(propType);\n    if (item \u003d\u003d null) {\n      throw new IllegalStateException(\"missing prop: \" + propType);\n    }\n    return item.getIntValue();\n  }",
    "begin_line": 824,
    "end_line": 830,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.putProp#832",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.putProp(int, java.lang.Object)",
    "snippet": "public void putProp(int propType, Object value) {\n    removeProp(propType);\n    if (value !\u003d null) {\n      propListHead \u003d createProp(propType, value, propListHead);\n    }\n  }",
    "begin_line": 832,
    "end_line": 837,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.putBooleanProp#839",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.putBooleanProp(int, boolean)",
    "snippet": "public void putBooleanProp(int propType, boolean value) {\n    putIntProp(propType, value ? 1 : 0);\n  }",
    "begin_line": 839,
    "end_line": 841,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.putIntProp#843",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.putIntProp(int, int)",
    "snippet": "public void putIntProp(int propType, int value) {\n    removeProp(propType);\n    if (value !\u003d 0) {\n      propListHead \u003d createProp(propType, value, propListHead);\n    }\n  }",
    "begin_line": 843,
    "end_line": 848,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.createProp#850",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.createProp(int, java.lang.Object, com.google.javascript.rhino.Node.PropListItem)",
    "snippet": "PropListItem createProp(int propType, Object value, PropListItem next) {\n    return new ObjectPropListItem(propType, value, next);\n  }",
    "begin_line": 850,
    "end_line": 852,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.createProp#854",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.createProp(int, int, com.google.javascript.rhino.Node.PropListItem)",
    "snippet": "PropListItem createProp(int propType, int value, PropListItem next) {\n    return new IntPropListItem(propType, value, next);\n  }",
    "begin_line": 854,
    "end_line": 856,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getSortedPropTypes#859",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getSortedPropTypes()",
    "snippet": "private int[] getSortedPropTypes() {\n    int count \u003d 0;\n    for (PropListItem x \u003d propListHead; x !\u003d null; x \u003d x.getNext()) {\n      count++;\n    }\n\n    int[] keys \u003d new int[count];\n    for (PropListItem x \u003d propListHead; x !\u003d null; x \u003d x.getNext()) {\n      count--;\n      keys[count] \u003d x.getType();\n    }\n\n    Arrays.sort(keys);\n    return keys;\n  }",
    "begin_line": 859,
    "end_line": 873,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getDouble#876",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getDouble()",
    "snippet": "public double getDouble() throws UnsupportedOperationException {\n    if (this.getType() \u003d\u003d Token.NUMBER) {\n      throw new IllegalStateException(\n          \"Number node not created with Node.newNumber\");\n    } else {\n      throw new UnsupportedOperationException(this + \" is not a number node\");\n    }\n  }",
    "begin_line": 876,
    "end_line": 883,
    "comment": "/** \n * Can only be called when \u003ctt\u003egetType() \u003d\u003d TokenStream.NUMBER\u003c/tt\u003e \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.setDouble#886",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setDouble(double)",
    "snippet": "public void setDouble(double s) throws UnsupportedOperationException {\n    if (this.getType() \u003d\u003d Token.NUMBER) {\n      throw new IllegalStateException(\n          \"Number node not created with Node.newNumber\");\n    } else {\n      throw new UnsupportedOperationException(this + \" is not a string node\");\n    }\n  }",
    "begin_line": 886,
    "end_line": 893,
    "comment": "/** \n * Can only be called when \u003ctt\u003egetType() \u003d\u003d TokenStream.NUMBER\u003c/tt\u003e \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getString#896",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getString()",
    "snippet": "public String getString() throws UnsupportedOperationException {\n    if (this.getType() \u003d\u003d Token.STRING) {\n      throw new IllegalStateException(\n          \"String node not created with Node.newString\");\n    } else {\n      throw new UnsupportedOperationException(this + \" is not a string node\");\n    }\n  }",
    "begin_line": 896,
    "end_line": 903,
    "comment": "/** \n * Can only be called when node has String context. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.setString#906",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setString(java.lang.String)",
    "snippet": "public void setString(String s) throws UnsupportedOperationException {\n    if (this.getType() \u003d\u003d Token.STRING) {\n      throw new IllegalStateException(\n          \"String node not created with Node.newString\");\n    } else {\n      throw new UnsupportedOperationException(this + \" is not a string node\");\n    }\n  }",
    "begin_line": 906,
    "end_line": 913,
    "comment": "/** \n * Can only be called when node has String context. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.toString#916",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.toString()",
    "snippet": "@Override\n  public String toString() {\n    return toString(true, true, true);\n  }",
    "begin_line": 916,
    "end_line": 918,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.toString#920",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.toString(boolean, boolean, boolean)",
    "snippet": "public String toString(\n      boolean printSource,\n      boolean printAnnotations,\n      boolean printType) {\n    StringBuilder sb \u003d new StringBuilder();\n    toString(sb, printSource, printAnnotations, printType);\n    return sb.toString();\n  }",
    "begin_line": 920,
    "end_line": 927,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.toString#929",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.toString(java.lang.StringBuilder, boolean, boolean, boolean)",
    "snippet": "private void toString(\n      StringBuilder sb,\n      boolean printSource,\n      boolean printAnnotations,\n      boolean printType) {\n    sb.append(Token.name(type));\n    if (this instanceof StringNode) {\n      sb.append(\u0027 \u0027);\n      sb.append(getString());\n    } else if (type \u003d\u003d Token.FUNCTION) {\n      sb.append(\u0027 \u0027);\n      // In the case of JsDoc trees, the first child is often not a string\n      // which causes exceptions to be thrown when calling toString or\n      // toStringTree.\n      if (first \u003d\u003d null || first.getType() !\u003d Token.NAME) {\n        sb.append(\"\u003cinvalid\u003e\");\n      } else {\n        sb.append(first.getString());\n      }\n    } else if (type \u003d\u003d Token.NUMBER) {\n      sb.append(\u0027 \u0027);\n      sb.append(getDouble());\n    }\n    if (printSource) {\n      int lineno \u003d getLineno();\n      if (lineno !\u003d -1) {\n        sb.append(\u0027 \u0027);\n        sb.append(lineno);\n      }\n    }\n\n    if (printAnnotations) {\n      int[] keys \u003d getSortedPropTypes();\n      for (int i \u003d 0; i \u003c keys.length; i++) {\n        int type \u003d keys[i];\n        PropListItem x \u003d lookupProperty(type);\n        sb.append(\" [\");\n        sb.append(propToString(type));\n        sb.append(\": \");\n        String value;\n        switch (type) {\n          default:\n            value \u003d x.toString();\n            break;\n        }\n        sb.append(value);\n        sb.append(\u0027]\u0027);\n      }\n    }\n\n    if (printType) {\n      if (jsType !\u003d null) {\n        String jsTypeString \u003d jsType.toString();\n        if (jsTypeString !\u003d null) {\n          sb.append(\" : \");\n          sb.append(jsTypeString);\n        }\n      }\n    }\n  }",
    "begin_line": 929,
    "end_line": 988,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.toStringTree#991",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.toStringTree()",
    "snippet": "public String toStringTree() {\n    return toStringTreeImpl();\n  }",
    "begin_line": 991,
    "end_line": 993,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.toStringTreeImpl#995",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.toStringTreeImpl()",
    "snippet": "private String toStringTreeImpl() {\n    try {\n      StringBuilder s \u003d new StringBuilder();\n      appendStringTree(s);\n      return s.toString();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Should not happen\\n\" + e);\n    }\n  }",
    "begin_line": 995,
    "end_line": 1003,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.appendStringTree#1005",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.appendStringTree(java.lang.Appendable)",
    "snippet": "public void appendStringTree(Appendable appendable) throws IOException {\n    toStringTreeHelper(this, 0, appendable);\n  }",
    "begin_line": 1005,
    "end_line": 1007,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.toStringTreeHelper#1009",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.toStringTreeHelper(com.google.javascript.rhino.Node, int, java.lang.Appendable)",
    "snippet": "private static void toStringTreeHelper(Node n, int level, Appendable sb)\n      throws IOException {\n    for (int i \u003d 0; i !\u003d level; ++i) {\n      sb.append(\"    \");\n    }\n    sb.append(n.toString());\n    sb.append(\u0027\\n\u0027);\n    for (Node cursor \u003d n.getFirstChild();\n         cursor !\u003d null;\n         cursor \u003d cursor.getNext()) {\n      toStringTreeHelper(cursor, level + 1, sb);\n    }\n  }",
    "begin_line": 1009,
    "end_line": 1021,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.setStaticSourceFile#1075",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile)",
    "snippet": "public void setStaticSourceFile(StaticSourceFile file) {\n    this.putProp(STATIC_SOURCE_FILE, file);\n  }",
    "begin_line": 1075,
    "end_line": 1077,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.setSourceFileForTesting#1080",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setSourceFileForTesting(java.lang.String)",
    "snippet": "public void setSourceFileForTesting(String name) {\n    this.putProp(STATIC_SOURCE_FILE, new SimpleSourceFile(name, false));\n  }",
    "begin_line": 1080,
    "end_line": 1082,
    "comment": "/** \n * Sets the source file to a non-extern file of the given name. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getSourceFileName#1084",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getSourceFileName()",
    "snippet": "public String getSourceFileName() {\n    StaticSourceFile file \u003d getStaticSourceFile();\n    return file \u003d\u003d null ? null : file.getName();\n  }",
    "begin_line": 1084,
    "end_line": 1087,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getStaticSourceFile#1090",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getStaticSourceFile()",
    "snippet": "public StaticSourceFile getStaticSourceFile() {\n    return ((StaticSourceFile) this.getProp(STATIC_SOURCE_FILE));\n  }",
    "begin_line": 1090,
    "end_line": 1092,
    "comment": "/** \n * Returns the source file associated with this input. May be null \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.setInputId#1097",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setInputId(com.google.javascript.rhino.InputId)",
    "snippet": "public void setInputId(InputId inputId) {\n    this.putProp(INPUT_ID, inputId);\n  }",
    "begin_line": 1097,
    "end_line": 1099,
    "comment": "/** \n * @param inputId\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getInputId#1104",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getInputId()",
    "snippet": "public InputId getInputId() {\n    return ((InputId) this.getProp(INPUT_ID));\n  }",
    "begin_line": 1104,
    "end_line": 1106,
    "comment": "/** \n * @return The Id of the CompilerInput associated with this Node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.isFromExterns#1108",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isFromExterns()",
    "snippet": "public boolean isFromExterns() {\n    StaticSourceFile file \u003d getStaticSourceFile();\n    return file \u003d\u003d null ? false : file.isExtern();\n  }",
    "begin_line": 1108,
    "end_line": 1111,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getLength#1113",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getLength()",
    "snippet": "public int getLength() {\n    return getIntProp(LENGTH);\n  }",
    "begin_line": 1113,
    "end_line": 1115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.setLength#1117",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setLength(int)",
    "snippet": "public void setLength(int length) {\n    putIntProp(LENGTH, length);\n  }",
    "begin_line": 1117,
    "end_line": 1119,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getLineno#1121",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getLineno()",
    "snippet": "public int getLineno() {\n    return extractLineno(sourcePosition);\n  }",
    "begin_line": 1121,
    "end_line": 1123,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getCharno#1125",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getCharno()",
    "snippet": "public int getCharno() {\n    return extractCharno(sourcePosition);\n  }",
    "begin_line": 1125,
    "end_line": 1127,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getSourceOffset#1129",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getSourceOffset()",
    "snippet": "public int getSourceOffset() {\n    StaticSourceFile file \u003d getStaticSourceFile();\n    if (file \u003d\u003d null) {\n      return -1;\n    }\n    int lineno \u003d getLineno();\n    if (lineno \u003d\u003d -1) {\n      return -1;\n    }\n    return file.getLineOffset(lineno) + getCharno();\n  }",
    "begin_line": 1129,
    "end_line": 1139,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.getSourcePosition#1141",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getSourcePosition()",
    "snippet": "public int getSourcePosition() {\n    return sourcePosition;\n  }",
    "begin_line": 1141,
    "end_line": 1143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.setLineno#1145",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setLineno(int)",
    "snippet": "public void setLineno(int lineno) {\n      int charno \u003d getCharno();\n      if (charno \u003d\u003d -1) {\n        charno \u003d 0;\n      }\n      sourcePosition \u003d mergeLineCharNo(lineno, charno);\n  }",
    "begin_line": 1145,
    "end_line": 1151,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.setCharno#1153",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setCharno(int)",
    "snippet": "public void setCharno(int charno) {\n      sourcePosition \u003d mergeLineCharNo(getLineno(), charno);\n  }",
    "begin_line": 1153,
    "end_line": 1155,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.setSourceEncodedPosition#1157",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setSourceEncodedPosition(int)",
    "snippet": "public void setSourceEncodedPosition(int sourcePosition) {\n    this.sourcePosition \u003d sourcePosition;\n  }",
    "begin_line": 1157,
    "end_line": 1159,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.setSourceEncodedPositionForTree#1161",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(int)",
    "snippet": "public void setSourceEncodedPositionForTree(int sourcePosition) {\n    this.sourcePosition \u003d sourcePosition;\n\n    for (Node child \u003d getFirstChild();\n         child !\u003d null; child \u003d child.getNext()) {\n      child.setSourceEncodedPositionForTree(sourcePosition);\n    }\n  }",
    "begin_line": 1161,
    "end_line": 1168,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.mergeLineCharNo#1176",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.mergeLineCharNo(int, int)",
    "snippet": "protected static int mergeLineCharNo(int lineno, int charno) {\n    if (lineno \u003c 0 || charno \u003c 0) {\n      return -1;\n    } else if ((charno \u0026 ~COLUMN_MASK) !\u003d 0) {\n      return lineno \u003c\u003c COLUMN_BITS | COLUMN_MASK;\n    } else {\n      return lineno \u003c\u003c COLUMN_BITS | (charno \u0026 COLUMN_MASK);\n    }\n  }",
    "begin_line": 1176,
    "end_line": 1184,
    "comment": "/** \n * Merges the line number and character number in one integer. The Character number takes the first 12 bits and the line number takes the rest. If the character number is greater than \u003ccode\u003e2\u003csup\u003e12\u003c/sup\u003e-1\u003c/code\u003e it is adjusted to \u003ccode\u003e2\u003csup\u003e12\u003c/sup\u003e-1\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.extractLineno#1190",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.extractLineno(int)",
    "snippet": "protected static int extractLineno(int lineCharNo) {\n    if (lineCharNo \u003d\u003d -1) {\n      return -1;\n    } else {\n      return lineCharNo \u003e\u003e\u003e COLUMN_BITS;\n    }\n  }",
    "begin_line": 1190,
    "end_line": 1196,
    "comment": "/** \n * Extracts the line number and character number from a merged line char number (see  {@link #mergeLineCharNo(int,int)}).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.extractCharno#1202",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.extractCharno(int)",
    "snippet": "protected static int extractCharno(int lineCharNo) {\n    if (lineCharNo \u003d\u003d -1) {\n      return -1;\n    } else {\n      return lineCharNo \u0026 COLUMN_MASK;\n    }\n  }",
    "begin_line": 1202,
    "end_line": 1208,
    "comment": "/** \n * Extracts the character number and character number from a merged line char number (see  {@link #mergeLineCharNo(int,int)}).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.children#1222",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.children()",
    "snippet": "public Iterable\u003cNode\u003e children() {\n    if (first \u003d\u003d null) {\n      return Collections.emptySet();\n    } else {\n      return new SiblingNodeIterable(first);\n    }\n  }",
    "begin_line": 1222,
    "end_line": 1228,
    "comment": "/** \n * \u003cp\u003eReturn an iterable object that iterates over this node\u0027s children. The iterator does not support the optional operation {@link Iterator#remove()}.\u003c/p\u003e \u003cp\u003eTo iterate over a node\u0027s siblings, one can write\u003c/p\u003e \u003cpre\u003eNode n \u003d ...; for (Node child : n.children()) { ...\u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntPropListItem.siblings#1239",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.siblings()",
    "snippet": "public Iterable\u003cNode\u003e siblings() {\n    return new SiblingNodeIterable(this);\n  }",
    "begin_line": 1239,
    "end_line": 1241,
    "comment": "/** \n * \u003cp\u003eReturn an iterable object that iterates over this node\u0027s siblings. The iterator does not support the optional operation {@link Iterator#remove()}.\u003c/p\u003e \u003cp\u003eTo iterate over a node\u0027s siblings, one can write\u003c/p\u003e \u003cpre\u003eNode n \u003d ...; for (Node sibling : n.siblings()) { ...\u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SiblingNodeIterable.SiblingNodeIterable#1252",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable(com.google.javascript.rhino.Node)",
    "snippet": " SiblingNodeIterable(Node start) {\n      this.start \u003d start;\n      this.current \u003d start;\n      this.used \u003d false;\n    }",
    "begin_line": 1252,
    "end_line": 1256,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SiblingNodeIterable.iterator#1259",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.iterator()",
    "snippet": "@Override\n    public Iterator\u003cNode\u003e iterator() {\n      if (!used) {\n        used \u003d true;\n        return this;\n      } else {\n        // We have already used the current object as an iterator;\n        // we must create a new SiblingNodeIterable based on this\n        // iterable\u0027s start node.\n        //\n        // Since the primary use case for Node.children is in for\n        // loops, this branch is extremely unlikely.\n        return (new SiblingNodeIterable(start)).iterator();\n      }\n    }",
    "begin_line": 1259,
    "end_line": 1272,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SiblingNodeIterable.hasNext#1275",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.hasNext()",
    "snippet": "@Override\n    public boolean hasNext() {\n      return current !\u003d null;\n    }",
    "begin_line": 1275,
    "end_line": 1277,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SiblingNodeIterable.next#1280",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.next()",
    "snippet": "@Override\n    public Node next() {\n      if (current \u003d\u003d null) {\n        throw new NoSuchElementException();\n      }\n      try {\n        return current;\n      } finally {\n        current \u003d current.getNext();\n      }\n    }",
    "begin_line": 1280,
    "end_line": 1289,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SiblingNodeIterable.remove#1292",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.remove()",
    "snippet": "@Override\n    public void remove() {\n      throw new UnsupportedOperationException();\n    }",
    "begin_line": 1292,
    "end_line": 1294,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SiblingNodeIterable.getPropListHeadForTesting#1300",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getPropListHeadForTesting()",
    "snippet": "PropListItem getPropListHeadForTesting() {\n    return propListHead;\n  }",
    "begin_line": 1300,
    "end_line": 1302,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SiblingNodeIterable.getParent#1304",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getParent()",
    "snippet": "public Node getParent() {\n    return parent;\n  }",
    "begin_line": 1304,
    "end_line": 1306,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SiblingNodeIterable.getAncestor#1313",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getAncestor(int)",
    "snippet": "public Node getAncestor(int level) {\n    Preconditions.checkArgument(level \u003e\u003d 0);\n    Node node \u003d this;\n    while (node !\u003d null \u0026\u0026 level-- \u003e 0) {\n      node \u003d node.getParent();\n    }\n    return node;\n  }",
    "begin_line": 1313,
    "end_line": 1320,
    "comment": "/** \n * Gets the ancestor node relative to this.\n * @param level 0 \u003d this, 1 \u003d the parent, etc.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SiblingNodeIterable.getAncestors#1325",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getAncestors()",
    "snippet": "public AncestorIterable getAncestors() {\n    return new AncestorIterable(this.getParent());\n  }",
    "begin_line": 1325,
    "end_line": 1327,
    "comment": "/** \n * Iterates all of the node\u0027s ancestors excluding itself.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.AncestorIterable#1338",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.AncestorIterable(com.google.javascript.rhino.Node)",
    "snippet": " AncestorIterable(Node cur) {\n      this.cur \u003d cur;\n    }",
    "begin_line": 1338,
    "end_line": 1340,
    "comment": "/** \n * @param cur The node to start.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.iterator#1343",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.iterator()",
    "snippet": "@Override\n    public Iterator\u003cNode\u003e iterator() {\n      return new Iterator\u003cNode\u003e() {\n        @Override\n        public boolean hasNext() {\n          return cur !\u003d null;\n        }\n\n        @Override\n        public Node next() {\n          if (!hasNext()) throw new NoSuchElementException();\n          Node n \u003d cur;\n          cur \u003d cur.getParent();\n          return n;\n        }\n\n        @Override\n        public void remove() {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }",
    "begin_line": 1343,
    "end_line": 1363,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.hasNext#1346",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.hasNext()",
    "snippet": "@Override\n        public boolean hasNext() {\n          return cur !\u003d null;\n        }",
    "begin_line": 1346,
    "end_line": 1348,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.next#1351",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.next()",
    "snippet": "@Override\n        public Node next() {\n          if (!hasNext()) throw new NoSuchElementException();\n          Node n \u003d cur;\n          cur \u003d cur.getParent();\n          return n;\n        }",
    "begin_line": 1351,
    "end_line": 1356,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.remove#1359",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.remove()",
    "snippet": "@Override\n        public void remove() {\n          throw new UnsupportedOperationException();\n        }",
    "begin_line": 1359,
    "end_line": 1361,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.hasOneChild#1372",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.hasOneChild()",
    "snippet": "public boolean hasOneChild() {\n    return first !\u003d null \u0026\u0026 first \u003d\u003d last;\n  }",
    "begin_line": 1372,
    "end_line": 1374,
    "comment": "/** \n * Check for one child more efficiently than by iterating over all the children as is done with Node.getChildCount().\n * @return Whether the node has exactly one child.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.hasMoreThanOneChild#1382",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.hasMoreThanOneChild()",
    "snippet": "public boolean hasMoreThanOneChild() {\n    return first !\u003d null \u0026\u0026 first !\u003d last;\n  }",
    "begin_line": 1382,
    "end_line": 1384,
    "comment": "/** \n * Check for more than one child more efficiently than by iterating over all the children as is done with Node.getChildCount().\n * @return Whether the node more than one child.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.getChildCount#1386",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getChildCount()",
    "snippet": "public int getChildCount() {\n    int c \u003d 0;\n    for (Node n \u003d first; n !\u003d null; n \u003d n.next)\n      c++;\n\n    return c;\n  }",
    "begin_line": 1386,
    "end_line": 1392,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.hasChild#1395",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.hasChild(com.google.javascript.rhino.Node)",
    "snippet": "public boolean hasChild(Node child) {\n    for (Node n \u003d first; n !\u003d null; n \u003d n.getNext()) {\n      if (child \u003d\u003d n) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "begin_line": 1395,
    "end_line": 1402,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.checkTreeEquals#1408",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.checkTreeEquals(com.google.javascript.rhino.Node)",
    "snippet": "public String checkTreeEquals(Node node2) {\n      NodeMismatch diff \u003d checkTreeEqualsImpl(node2);\n      if (diff !\u003d null) {\n        return \"Node tree inequality:\" +\n            \"\\nTree1:\\n\" + toStringTree() +\n            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n      }\n      return null;\n  }",
    "begin_line": 1408,
    "end_line": 1418,
    "comment": "/** \n * Checks if the subtree under this node is the same as another subtree. Returns null if it\u0027s equal, or a message describing the differences.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.checkTreeEqualsImpl#1425",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.checkTreeEqualsImpl(com.google.javascript.rhino.Node)",
    "snippet": "NodeMismatch checkTreeEqualsImpl(Node node2) {\n    if (!isEquivalentTo(node2, false, false)) {\n      return new NodeMismatch(this, node2);\n    }\n\n    NodeMismatch res \u003d null;\n    Node n, n2;\n    for (n \u003d first, n2 \u003d node2.first;\n         res \u003d\u003d null \u0026\u0026 n !\u003d null;\n         n \u003d n.next, n2 \u003d n2.next) {\n      if (node2 \u003d\u003d null) {\n        throw new IllegalStateException();\n      }\n      res \u003d n.checkTreeEqualsImpl(n2);\n      if (res !\u003d null) {\n        return res;\n      }\n    }\n    return res;\n  }",
    "begin_line": 1425,
    "end_line": 1444,
    "comment": "/** \n * Compare this node to node2 recursively and return the first pair of nodes that differs doing a preorder depth-first traversal. Package private for testing. Returns null if the nodes are equivalent.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.checkTreeTypeAwareEqualsImpl#1451",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node)",
    "snippet": "NodeMismatch checkTreeTypeAwareEqualsImpl(Node node2) {\n    // Do a non-recursive equivalents check.\n    if (!isEquivalentTo(node2, true, false)) {\n      return new NodeMismatch(this, node2);\n    }\n\n    NodeMismatch res \u003d null;\n    Node n, n2;\n    for (n \u003d first, n2 \u003d node2.first;\n         res \u003d\u003d null \u0026\u0026 n !\u003d null;\n         n \u003d n.next, n2 \u003d n2.next) {\n      res \u003d n.checkTreeTypeAwareEqualsImpl(n2);\n      if (res !\u003d null) {\n        return res;\n      }\n    }\n    return res;\n  }",
    "begin_line": 1451,
    "end_line": 1468,
    "comment": "/** \n * Compare this node to node2 recursively and return the first pair of nodes that differs doing a preorder depth-first traversal. Package private for testing. Returns null if the nodes are equivalent.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.isEquivalentTo#1471",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isEquivalentTo(com.google.javascript.rhino.Node)",
    "snippet": "public boolean isEquivalentTo(Node node) {\n    return isEquivalentTo(node, false, true);\n  }",
    "begin_line": 1471,
    "end_line": 1473,
    "comment": "/** \n * Returns true if this node is equivalent semantically to another \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.isEquivalentToTyped#1479",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isEquivalentToTyped(com.google.javascript.rhino.Node)",
    "snippet": "public boolean isEquivalentToTyped(Node node) {\n    return isEquivalentTo(node, true, true);\n  }",
    "begin_line": 1479,
    "end_line": 1481,
    "comment": "/** \n * Returns true if this node is equivalent semantically to another and the types are equivalent.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.isEquivalentTo#1489",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isEquivalentTo(com.google.javascript.rhino.Node, boolean, boolean)",
    "snippet": "boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n    if (type !\u003d node.getType()\n        || getChildCount() !\u003d node.getChildCount()\n        || this.getClass() !\u003d node.getClass()) {\n      return false;\n    }\n\n    if (compareJsType \u0026\u0026 !JSType.isEquivalent(jsType, node.getJSType())) {\n      return false;\n    }\n\n    if (type \u003d\u003d Token.INC || type \u003d\u003d Token.DEC) {\n      int post1 \u003d this.getIntProp(INCRDECR_PROP);\n      int post2 \u003d node.getIntProp(INCRDECR_PROP);\n      if (post1 !\u003d post2) {\n        return false;\n      }\n    } else if (type \u003d\u003d Token.STRING || type \u003d\u003d Token.STRING_KEY) {\n      if (type \u003d\u003d Token.STRING_KEY) {\n        int quoted1 \u003d this.getIntProp(QUOTED_PROP);\n        int quoted2 \u003d node.getIntProp(QUOTED_PROP);\n        if (quoted1 !\u003d quoted2) {\n          return false;\n        }\n      }\n\n      int slashV1 \u003d this.getIntProp(SLASH_V);\n      int slashV2 \u003d node.getIntProp(SLASH_V);\n      if (slashV1 !\u003d slashV2) {\n        return false;\n      }\n    } else if (type \u003d\u003d Token.CALL) {\n      if (this.getBooleanProp(FREE_CALL) !\u003d node.getBooleanProp(FREE_CALL)) {\n        return false;\n      }\n    }\n\n    if (recurse) {\n      Node n, n2;\n      for (n \u003d first, n2 \u003d node.first;\n           n !\u003d null;\n           n \u003d n.next, n2 \u003d n2.next) {\n        if (!n.isEquivalentTo(n2, compareJsType, true)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }",
    "begin_line": 1489,
    "end_line": 1538,
    "comment": "/** \n * @param compareJsType Whether to compare the JSTypes of the nodes.\n * @param recurse Whether to compare the children of the current node, ifnot only the the count of the children are compared.\n * @return Whether this node is equivalent semantically to the provided node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.getQualifiedName#1548",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getQualifiedName()",
    "snippet": "public String getQualifiedName() {\n    if (type \u003d\u003d Token.NAME) {\n      String name \u003d getString();\n      return name.isEmpty() ? null : name;\n    } else if (type \u003d\u003d Token.GETPROP) {\n      String left \u003d getFirstChild().getQualifiedName();\n      if (left \u003d\u003d null) {\n        return null;\n      }\n      return left + \".\" + getLastChild().getString();\n    } else if (type \u003d\u003d Token.THIS) {\n      return \"this\";\n    } else {\n      return null;\n    }\n  }",
    "begin_line": 1548,
    "end_line": 1563,
    "comment": "/** \n * This function takes a set of GETPROP nodes and produces a string that is each property separated by dots. If the node ultimately under the left sub-tree is not a simple name, this is not a valid qualified name.\n * @return a null if this is not a qualified name, or a dot-separated stringof the name and properties.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.isQualifiedName#1569",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isQualifiedName()",
    "snippet": "public boolean isQualifiedName() {\n    switch (getType()) {\n      case Token.NAME:\n        return getString().isEmpty() ? false : true;\n      case Token.THIS:\n        return true;\n      case Token.GETPROP:\n        return getFirstChild().isQualifiedName();\n      default:\n        return false;\n    }\n  }",
    "begin_line": 1569,
    "end_line": 1580,
    "comment": "/** \n * Returns whether a node corresponds to a simple or a qualified name, such as \u003ccode\u003ex\u003c/code\u003e or \u003ccode\u003ea.b.c\u003c/code\u003e or \u003ccode\u003ethis.a\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.isUnscopedQualifiedName#1587",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isUnscopedQualifiedName()",
    "snippet": "public boolean isUnscopedQualifiedName() {\n    switch (getType()) {\n      case Token.NAME:\n        return getString().isEmpty() ? false : true;\n      case Token.GETPROP:\n        return getFirstChild().isUnscopedQualifiedName();\n      default:\n        return false;\n    }\n  }",
    "begin_line": 1587,
    "end_line": 1596,
    "comment": "/** \n * Returns whether a node corresponds to a simple or a qualified name without a \"this\" reference, such as \u003ccode\u003ea.b.c\u003c/code\u003e, but not \u003ccode\u003ethis.a\u003c/code\u003e .\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.detachFromParent#1605",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.detachFromParent()",
    "snippet": "public Node detachFromParent() {\n    Preconditions.checkState(parent !\u003d null);\n    parent.removeChild(this);\n    return this;\n  }",
    "begin_line": 1605,
    "end_line": 1609,
    "comment": "/** \n * Removes this node from its parent. Equivalent to: node.getParent().removeChild();\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.removeFirstChild#1617",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.removeFirstChild()",
    "snippet": "public Node removeFirstChild() {\n    Node child \u003d first;\n    if (child !\u003d null) {\n      removeChild(child);\n    }\n    return child;\n  }",
    "begin_line": 1617,
    "end_line": 1623,
    "comment": "/** \n * Removes the first child of Node. Equivalent to: node.removeChild(node.getFirstChild());\n * @return The removed Node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.removeChildren#1628",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.removeChildren()",
    "snippet": "public Node removeChildren() {\n    Node children \u003d first;\n    for (Node child \u003d first; child !\u003d null; child \u003d child.getNext()) {\n      child.parent \u003d null;\n    }\n    first \u003d null;\n    last \u003d null;\n    return children;\n  }",
    "begin_line": 1628,
    "end_line": 1636,
    "comment": "/** \n * @return A Node that is the head of the list of children.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.detachChildren#1642",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.detachChildren()",
    "snippet": "public void detachChildren() {\n    for (Node child \u003d first; child !\u003d null;) {\n      Node nextChild \u003d child.getNext();\n      child.parent \u003d null;\n      child.next \u003d null;\n      child \u003d nextChild;\n    }\n    first \u003d null;\n    last \u003d null;\n  }",
    "begin_line": 1642,
    "end_line": 1651,
    "comment": "/** \n * Removes all children from this node and isolates the children from each other.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.removeChildAfter#1653",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.removeChildAfter(com.google.javascript.rhino.Node)",
    "snippet": "public Node removeChildAfter(Node prev) {\n    Preconditions.checkArgument(prev.parent \u003d\u003d this,\n        \"prev is not a child of this node.\");\n    Preconditions.checkArgument(prev.next !\u003d null,\n        \"no next sibling.\");\n\n    Node child \u003d prev.next;\n    prev.next \u003d child.next;\n    if (child \u003d\u003d last) last \u003d prev;\n    child.next \u003d null;\n    child.parent \u003d null;\n    return child;\n  }",
    "begin_line": 1653,
    "end_line": 1665,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.cloneNode#1670",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.cloneNode()",
    "snippet": "public Node cloneNode() {\n    Node result;\n    try {\n      result \u003d (Node) super.clone();\n      // PropListItem lists are immutable and can be shared so there is no\n      // need to clone them here.\n      result.next \u003d null;\n      result.first \u003d null;\n      result.last \u003d null;\n      result.parent \u003d null;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e.getMessage());\n    }\n    return result;\n  }",
    "begin_line": 1670,
    "end_line": 1684,
    "comment": "/** \n * @return A detached clone of the Node, specifically excluding its children.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.cloneTree#1689",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.cloneTree()",
    "snippet": "public Node cloneTree() {\n    Node result \u003d cloneNode();\n    for (Node n2 \u003d getFirstChild(); n2 !\u003d null; n2 \u003d n2.getNext()) {\n      Node n2clone \u003d n2.cloneTree();\n      n2clone.parent \u003d result;\n      if (result.last !\u003d null) {\n        result.last.next \u003d n2clone;\n      }\n      if (result.first \u003d\u003d null) {\n        result.first \u003d n2clone;\n      }\n      result.last \u003d n2clone;\n    }\n    return result;\n  }",
    "begin_line": 1689,
    "end_line": 1703,
    "comment": "/** \n * @return A detached clone of the Node and all its children.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.copyInformationFrom#1712",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.copyInformationFrom(com.google.javascript.rhino.Node)",
    "snippet": " copyInformationFrom(Node other) {\n    if (getProp(ORIGINALNAME_PROP) \u003d\u003d null) {\n      putProp(ORIGINALNAME_PROP, other.getProp(ORIGINALNAME_PROP));\n    }\n\n    if (getProp(STATIC_SOURCE_FILE) \u003d\u003d null) {\n      putProp(STATIC_SOURCE_FILE, other.getProp(STATIC_SOURCE_FILE));\n      sourcePosition \u003d other.sourcePosition;\n    }\n\n    return this;\n  }",
    "begin_line": 1712,
    "end_line": 1723,
    "comment": "/** \n * Copies source file and name information from the other node given to the current node. Used for maintaining debug information across node append and remove operations.\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.copyInformationFromForTree#1731",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.copyInformationFromForTree(com.google.javascript.rhino.Node)",
    "snippet": " copyInformationFromForTree(Node other) {\n    copyInformationFrom(other);\n    for (Node child \u003d getFirstChild();\n         child !\u003d null; child \u003d child.getNext()) {\n      child.copyInformationFromForTree(other);\n    }\n\n    return this;\n  }",
    "begin_line": 1731,
    "end_line": 1739,
    "comment": "/** \n * Copies source file and name information from the other node to the entire tree rooted at this node.\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.useSourceInfoFrom#1745",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.useSourceInfoFrom(com.google.javascript.rhino.Node)",
    "snippet": "public Node useSourceInfoFrom(Node other) {\n    putProp(ORIGINALNAME_PROP, other.getProp(ORIGINALNAME_PROP));\n    putProp(STATIC_SOURCE_FILE, other.getProp(STATIC_SOURCE_FILE));\n    sourcePosition \u003d other.sourcePosition;\n    return this;\n  }",
    "begin_line": 1745,
    "end_line": 1750,
    "comment": "/** \n * Overwrite all the source information in this node with that of  {@code other}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.srcref#1752",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.srcref(com.google.javascript.rhino.Node)",
    "snippet": "public Node srcref(Node other) {\n    return useSourceInfoFrom(other);\n  }",
    "begin_line": 1752,
    "end_line": 1754,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.useSourceInfoFromForTree#1760",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.useSourceInfoFromForTree(com.google.javascript.rhino.Node)",
    "snippet": "public Node useSourceInfoFromForTree(Node other) {\n    useSourceInfoFrom(other);\n    for (Node child \u003d getFirstChild();\n         child !\u003d null; child \u003d child.getNext()) {\n      child.useSourceInfoFromForTree(other);\n    }\n\n    return this;\n  }",
    "begin_line": 1760,
    "end_line": 1768,
    "comment": "/** \n * Overwrite all the source information in this node and its subtree with that of  {@code other}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.srcrefTree#1770",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.srcrefTree(com.google.javascript.rhino.Node)",
    "snippet": "public Node srcrefTree(Node other) {\n    return useSourceInfoFromForTree(other);\n  }",
    "begin_line": 1770,
    "end_line": 1772,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.useSourceInfoIfMissingFrom#1778",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node)",
    "snippet": "public Node useSourceInfoIfMissingFrom(Node other) {\n    if (getProp(ORIGINALNAME_PROP) \u003d\u003d null) {\n      putProp(ORIGINALNAME_PROP, other.getProp(ORIGINALNAME_PROP));\n    }\n\n    if (getProp(STATIC_SOURCE_FILE) \u003d\u003d null) {\n      putProp(STATIC_SOURCE_FILE, other.getProp(STATIC_SOURCE_FILE));\n      sourcePosition \u003d other.sourcePosition;\n    }\n\n    return this;\n  }",
    "begin_line": 1778,
    "end_line": 1789,
    "comment": "/** \n * Overwrite all the source information in this node with that of  {@code other} iff the source info is missing.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.useSourceInfoIfMissingFromForTree#1795",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node)",
    "snippet": "public Node useSourceInfoIfMissingFromForTree(Node other) {\n    useSourceInfoIfMissingFrom(other);\n    for (Node child \u003d getFirstChild();\n         child !\u003d null; child \u003d child.getNext()) {\n      child.useSourceInfoIfMissingFromForTree(other);\n    }\n\n    return this;\n  }",
    "begin_line": 1795,
    "end_line": 1803,
    "comment": "/** \n * Overwrite all the source information in this node and its subtree with that of  {@code other} iff the source info is missing.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.getJSType#1808",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getJSType()",
    "snippet": "public JSType getJSType() {\n      return jsType;\n  }",
    "begin_line": 1808,
    "end_line": 1810,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.setJSType#1812",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setJSType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public void setJSType(JSType jsType) {\n      this.jsType \u003d jsType;\n  }",
    "begin_line": 1812,
    "end_line": 1814,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AncestorIterable.getJsDocBuilderForNode#1816",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getJsDocBuilderForNode()",
    "snippet": "public FileLevelJsDocBuilder getJsDocBuilderForNode() {\n    return new FileLevelJsDocBuilder();\n  }",
    "begin_line": 1816,
    "end_line": 1818,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileLevelJsDocBuilder.append#1829",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.append(java.lang.String)",
    "snippet": "public void append(String fileLevelComment) {\n      JSDocInfo jsDocInfo \u003d getJSDocInfo();\n      if (jsDocInfo \u003d\u003d null) {\n        // TODO(user): Is there a way to determine whether to\n        // parse the JsDoc documentation from here?\n        jsDocInfo \u003d new JSDocInfo(false);\n      }\n      String license \u003d jsDocInfo.getLicense();\n      if (license \u003d\u003d null) {\n        license \u003d \"\";\n      }\n      jsDocInfo.setLicense(license + fileLevelComment);\n      setJSDocInfo(jsDocInfo);\n    }",
    "begin_line": 1829,
    "end_line": 1842,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileLevelJsDocBuilder.getJSDocInfo#1850",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getJSDocInfo()",
    "snippet": "public JSDocInfo getJSDocInfo() {\n    return (JSDocInfo) getProp(JSDOC_INFO_PROP);\n  }",
    "begin_line": 1850,
    "end_line": 1852,
    "comment": "/** \n * Get the  {@link JSDocInfo} attached to this node.\n * @return the information or {@code null} if no JSDoc is attached to thisnode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileLevelJsDocBuilder.setJSDocInfo#1857",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setJSDocInfo(com.google.javascript.rhino.JSDocInfo)",
    "snippet": "public Node setJSDocInfo(JSDocInfo info) {\n      putProp(JSDOC_INFO_PROP, info);\n      return this;\n  }",
    "begin_line": 1857,
    "end_line": 1860,
    "comment": "/** \n * Sets the  {@link JSDocInfo} attached to this node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileLevelJsDocBuilder.setVarArgs#1867",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setVarArgs(boolean)",
    "snippet": "public void setVarArgs(boolean varArgs) {\n    putBooleanProp(VAR_ARGS_NAME, varArgs);\n  }",
    "begin_line": 1867,
    "end_line": 1869,
    "comment": "/** \n * Sets whether this node is a variable length argument node. This method is meaningful only on  {@link Token#NAME} nodesused to define a  {@link Token#FUNCTION}\u0027s argument list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileLevelJsDocBuilder.isVarArgs#1876",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isVarArgs()",
    "snippet": "public boolean isVarArgs() {\n    return getBooleanProp(VAR_ARGS_NAME);\n  }",
    "begin_line": 1876,
    "end_line": 1878,
    "comment": "/** \n * Returns whether this node is a variable length argument node. This method\u0027s return value is meaningful only on  {@link Token#NAME} nodesused to define a  {@link Token#FUNCTION}\u0027s argument list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileLevelJsDocBuilder.setOptionalArg#1885",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setOptionalArg(boolean)",
    "snippet": "public void setOptionalArg(boolean optionalArg) {\n    putBooleanProp(OPT_ARG_NAME, optionalArg);\n  }",
    "begin_line": 1885,
    "end_line": 1887,
    "comment": "/** \n * Sets whether this node is an optional argument node. This method is meaningful only on  {@link Token#NAME} nodesused to define a  {@link Token#FUNCTION}\u0027s argument list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileLevelJsDocBuilder.isOptionalArg#1894",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isOptionalArg()",
    "snippet": "public boolean isOptionalArg() {\n    return getBooleanProp(OPT_ARG_NAME);\n  }",
    "begin_line": 1894,
    "end_line": 1896,
    "comment": "/** \n * Returns whether this node is an optional argument node. This method\u0027s return value is meaningful only on  {@link Token#NAME} nodesused to define a  {@link Token#FUNCTION}\u0027s argument list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileLevelJsDocBuilder.setIsSyntheticBlock#1902",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setIsSyntheticBlock(boolean)",
    "snippet": "public void setIsSyntheticBlock(boolean val) {\n    putBooleanProp(SYNTHETIC_BLOCK_PROP, val);\n  }",
    "begin_line": 1902,
    "end_line": 1904,
    "comment": "/** \n * Sets whether this is a synthetic block that should not be considered a real source block.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileLevelJsDocBuilder.isSyntheticBlock#1910",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isSyntheticBlock()",
    "snippet": "public boolean isSyntheticBlock() {\n    return getBooleanProp(SYNTHETIC_BLOCK_PROP);\n  }",
    "begin_line": 1910,
    "end_line": 1912,
    "comment": "/** \n * Returns whether this is a synthetic block that should not be considered a real source block.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileLevelJsDocBuilder.setDirectives#1917",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setDirectives(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public void setDirectives(Set\u003cString\u003e val) {\n    putProp(DIRECTIVES, val);\n  }",
    "begin_line": 1917,
    "end_line": 1919,
    "comment": "/** \n * Sets the ES5 directives on this node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileLevelJsDocBuilder.getDirectives#1925",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getDirectives()",
    "snippet": "@SuppressWarnings(\"unchecked\")\n  public Set\u003cString\u003e getDirectives() {\n    return (Set\u003cString\u003e) getProp(DIRECTIVES);\n  }",
    "begin_line": 1925,
    "end_line": 1927,
    "comment": "/** \n * Returns the set of ES5 directives for this node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileLevelJsDocBuilder.addSuppression#1933",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.addSuppression(java.lang.String)",
    "snippet": "public void addSuppression(String warning) {\n    if (getJSDocInfo() \u003d\u003d null) {\n      setJSDocInfo(new JSDocInfo(false));\n    }\n    getJSDocInfo().addSuppression(warning);\n  }",
    "begin_line": 1933,
    "end_line": 1938,
    "comment": "/** \n * Adds a warning to be suppressed. This is indistinguishable from having a  {@code @suppress} tag in the code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileLevelJsDocBuilder.setWasEmptyNode#1944",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setWasEmptyNode(boolean)",
    "snippet": "public void setWasEmptyNode(boolean val) {\n    putBooleanProp(EMPTY_BLOCK, val);\n  }",
    "begin_line": 1944,
    "end_line": 1946,
    "comment": "/** \n * Sets whether this is a synthetic block that should not be considered a real source block.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileLevelJsDocBuilder.wasEmptyNode#1952",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.wasEmptyNode()",
    "snippet": "public boolean wasEmptyNode() {\n    return getBooleanProp(EMPTY_BLOCK);\n  }",
    "begin_line": 1952,
    "end_line": 1954,
    "comment": "/** \n * Returns whether this is a synthetic block that should not be considered a real source block.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileLevelJsDocBuilder.setSideEffectFlags#1985",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setSideEffectFlags(int)",
    "snippet": "public void setSideEffectFlags(int flags) {\n    Preconditions.checkArgument(\n       getType() \u003d\u003d Token.CALL || getType() \u003d\u003d Token.NEW,\n       \"setIsNoSideEffectsCall only supports CALL and NEW nodes, got \" +\n       Token.name(getType()));\n\n    putIntProp(SIDE_EFFECT_FLAGS, flags);\n  }",
    "begin_line": 1985,
    "end_line": 1992,
    "comment": "/** \n * Marks this function or constructor call\u0027s side effect flags. This property is only meaningful for  {@link Token#CALL} and{@link Token#NEW} nodes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileLevelJsDocBuilder.setSideEffectFlags#1994",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags)",
    "snippet": "public void setSideEffectFlags(SideEffectFlags flags) {\n    setSideEffectFlags(flags.valueOf());\n  }",
    "begin_line": 1994,
    "end_line": 1996,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileLevelJsDocBuilder.getSideEffectFlags#2001",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.getSideEffectFlags()",
    "snippet": "public int getSideEffectFlags() {\n    return getIntProp(SIDE_EFFECT_FLAGS);\n  }",
    "begin_line": 2001,
    "end_line": 2003,
    "comment": "/** \n * Returns the side effects flags for this node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SideEffectFlags.SideEffectFlags#2012",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.SideEffectFlags()",
    "snippet": "public SideEffectFlags() {\n    }",
    "begin_line": 2012,
    "end_line": 2013,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SideEffectFlags.SideEffectFlags#2015",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.SideEffectFlags(int)",
    "snippet": "public SideEffectFlags(int value) {\n      this.value \u003d value;\n    }",
    "begin_line": 2015,
    "end_line": 2017,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SideEffectFlags.valueOf#2019",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.valueOf()",
    "snippet": "public int valueOf() {\n      return value;\n    }",
    "begin_line": 2019,
    "end_line": 2021,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SideEffectFlags.setAllFlags#2024",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setAllFlags()",
    "snippet": "public void setAllFlags() {\n      value \u003d Node.SIDE_EFFECTS_ALL;\n    }",
    "begin_line": 2024,
    "end_line": 2026,
    "comment": "/** \n * All side-effect occur and the returned results are non-local. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SideEffectFlags.clearAllFlags#2029",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.clearAllFlags()",
    "snippet": "public void clearAllFlags() {\n      value \u003d Node.NO_SIDE_EFFECTS | Node.FLAG_LOCAL_RESULTS;\n    }",
    "begin_line": 2029,
    "end_line": 2031,
    "comment": "/** \n * No side-effects occur and the returned results are local. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SideEffectFlags.areAllFlagsSet#2033",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.areAllFlagsSet()",
    "snippet": "public boolean areAllFlagsSet() {\n      return value \u003d\u003d Node.SIDE_EFFECTS_ALL;\n    }",
    "begin_line": 2033,
    "end_line": 2035,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SideEffectFlags.clearSideEffectFlags#2041",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.clearSideEffectFlags()",
    "snippet": "public void clearSideEffectFlags() {\n      value |\u003d Node.NO_SIDE_EFFECTS;\n    }",
    "begin_line": 2041,
    "end_line": 2043,
    "comment": "/** \n * Preserve the return result flag, but clear the others: no global state change, no throws, no this change, no arguments change\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SideEffectFlags.setMutatesGlobalState#2045",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setMutatesGlobalState()",
    "snippet": "public void setMutatesGlobalState() {\n      // Modify global means everything must be assumed to be modified.\n      removeFlag(Node.FLAG_GLOBAL_STATE_UNMODIFIED);\n      removeFlag(Node.FLAG_ARGUMENTS_UNMODIFIED);\n      removeFlag(Node.FLAG_THIS_UNMODIFIED);\n    }",
    "begin_line": 2045,
    "end_line": 2050,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SideEffectFlags.setThrows#2052",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setThrows()",
    "snippet": "public void setThrows() {\n      removeFlag(Node.FLAG_NO_THROWS);\n    }",
    "begin_line": 2052,
    "end_line": 2054,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SideEffectFlags.setMutatesThis#2056",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setMutatesThis()",
    "snippet": "public void setMutatesThis() {\n      removeFlag(Node.FLAG_THIS_UNMODIFIED);\n    }",
    "begin_line": 2056,
    "end_line": 2058,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SideEffectFlags.setMutatesArguments#2060",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setMutatesArguments()",
    "snippet": "public void setMutatesArguments() {\n      removeFlag(Node.FLAG_ARGUMENTS_UNMODIFIED);\n    }",
    "begin_line": 2060,
    "end_line": 2062,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SideEffectFlags.setReturnsTainted#2064",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setReturnsTainted()",
    "snippet": "public void setReturnsTainted() {\n      removeFlag(Node.FLAG_LOCAL_RESULTS);\n    }",
    "begin_line": 2064,
    "end_line": 2066,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SideEffectFlags.removeFlag#2068",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.removeFlag(int)",
    "snippet": "private void removeFlag(int flag) {\n      value \u0026\u003d ~flag;\n    }",
    "begin_line": 2068,
    "end_line": 2070,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SideEffectFlags.isOnlyModifiesThisCall#2076",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isOnlyModifiesThisCall()",
    "snippet": "public boolean isOnlyModifiesThisCall() {\n    return areBitFlagsSet(\n        getSideEffectFlags() \u0026 Node.NO_SIDE_EFFECTS,\n        Node.FLAG_GLOBAL_STATE_UNMODIFIED\n            | Node.FLAG_ARGUMENTS_UNMODIFIED\n            | Node.FLAG_NO_THROWS);\n  }",
    "begin_line": 2076,
    "end_line": 2082,
    "comment": "/** \n * @return Whether the only side-effect is \"modifies this\"\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SideEffectFlags.isNoSideEffectsCall#2088",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isNoSideEffectsCall()",
    "snippet": "public boolean isNoSideEffectsCall() {\n    return areBitFlagsSet(getSideEffectFlags(), NO_SIDE_EFFECTS);\n  }",
    "begin_line": 2088,
    "end_line": 2090,
    "comment": "/** \n * Returns true if this node is a function or constructor call that has no side effects.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SideEffectFlags.isLocalResultCall#2097",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isLocalResultCall()",
    "snippet": "public boolean isLocalResultCall() {\n    return areBitFlagsSet(getSideEffectFlags(), FLAG_LOCAL_RESULTS);\n  }",
    "begin_line": 2097,
    "end_line": 2099,
    "comment": "/** \n * Returns true if this node is a function or constructor call that returns a primitive or a local object (an object that has no other references).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SideEffectFlags.areBitFlagsSet#2104",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.areBitFlagsSet(int, int)",
    "snippet": "private boolean areBitFlagsSet(int value, int flags) {\n    return (value \u0026 flags) \u003d\u003d flags;\n  }",
    "begin_line": 2104,
    "end_line": 2106,
    "comment": "/** \n * returns true if all the flags are set in value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SideEffectFlags.isQuotedString#2111",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isQuotedString()",
    "snippet": "public boolean isQuotedString() {\n    return false;\n  }",
    "begin_line": 2111,
    "end_line": 2113,
    "comment": "/** \n * This should only be called for STRING nodes children of OBJECTLIT.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SideEffectFlags.setQuotedString#2118",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.setQuotedString()",
    "snippet": "public void setQuotedString() {\n    throw new IllegalStateException(\"not a StringNode\");\n  }",
    "begin_line": 2118,
    "end_line": 2120,
    "comment": "/** \n * This should only be called for STRING nodes children of OBJECTLIT.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.NodeMismatch#2126",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.NodeMismatch(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
    "snippet": " NodeMismatch(Node nodeA, Node nodeB) {\n      this.nodeA \u003d nodeA;\n      this.nodeB \u003d nodeB;\n    }",
    "begin_line": 2126,
    "end_line": 2129,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.equals#2132",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object object) {\n      if (object instanceof NodeMismatch) {\n        NodeMismatch that \u003d (NodeMismatch) object;\n        return that.nodeA.equals(this.nodeA) \u0026\u0026 that.nodeB.equals(this.nodeB);\n      }\n      return false;\n    }",
    "begin_line": 2132,
    "end_line": 2138,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.hashCode#2141",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n      return Objects.hashCode(nodeA, nodeB);\n    }",
    "begin_line": 2141,
    "end_line": 2143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isAdd#2149",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isAdd()",
    "snippet": "public boolean isAdd() {\n    return this.getType() \u003d\u003d Token.ADD;\n  }",
    "begin_line": 2149,
    "end_line": 2151,
    "comment": "/** \n * AST type check methods \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isAnd#2153",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isAnd()",
    "snippet": "public boolean isAnd() {\n    return this.getType() \u003d\u003d Token.AND;\n  }",
    "begin_line": 2153,
    "end_line": 2155,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isArrayLit#2157",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isArrayLit()",
    "snippet": "public boolean isArrayLit() {\n    return this.getType() \u003d\u003d Token.ARRAYLIT;\n  }",
    "begin_line": 2157,
    "end_line": 2159,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isAssign#2161",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isAssign()",
    "snippet": "public boolean isAssign() {\n    return this.getType() \u003d\u003d Token.ASSIGN;\n  }",
    "begin_line": 2161,
    "end_line": 2163,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isAssignAdd#2165",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isAssignAdd()",
    "snippet": "public boolean isAssignAdd() {\n    return this.getType() \u003d\u003d Token.ASSIGN_ADD;\n  }",
    "begin_line": 2165,
    "end_line": 2167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isBlock#2169",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isBlock()",
    "snippet": "public boolean isBlock() {\n    return this.getType() \u003d\u003d Token.BLOCK;\n  }",
    "begin_line": 2169,
    "end_line": 2171,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isBreak#2173",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isBreak()",
    "snippet": "public boolean isBreak() {\n    return this.getType() \u003d\u003d Token.BREAK;\n  }",
    "begin_line": 2173,
    "end_line": 2175,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isCall#2177",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isCall()",
    "snippet": "public boolean isCall() {\n    return this.getType() \u003d\u003d Token.CALL;\n  }",
    "begin_line": 2177,
    "end_line": 2179,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isCase#2181",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isCase()",
    "snippet": "public boolean isCase() {\n    return this.getType() \u003d\u003d Token.CASE;\n  }",
    "begin_line": 2181,
    "end_line": 2183,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isCast#2185",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isCast()",
    "snippet": "public boolean isCast() {\n    return this.getType() \u003d\u003d Token.CAST;\n  }",
    "begin_line": 2185,
    "end_line": 2187,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isCatch#2189",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isCatch()",
    "snippet": "public boolean isCatch() {\n    return this.getType() \u003d\u003d Token.CATCH;\n  }",
    "begin_line": 2189,
    "end_line": 2191,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isComma#2193",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isComma()",
    "snippet": "public boolean isComma() {\n    return this.getType() \u003d\u003d Token.COMMA;\n  }",
    "begin_line": 2193,
    "end_line": 2195,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isContinue#2197",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isContinue()",
    "snippet": "public boolean isContinue() {\n    return this.getType() \u003d\u003d Token.CONTINUE;\n  }",
    "begin_line": 2197,
    "end_line": 2199,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isDebugger#2201",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isDebugger()",
    "snippet": "public boolean isDebugger() {\n    return this.getType() \u003d\u003d Token.DEBUGGER;\n  }",
    "begin_line": 2201,
    "end_line": 2203,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isDec#2205",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isDec()",
    "snippet": "public boolean isDec() {\n    return this.getType() \u003d\u003d Token.DEC;\n  }",
    "begin_line": 2205,
    "end_line": 2207,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isDefaultCase#2209",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isDefaultCase()",
    "snippet": "public boolean isDefaultCase() {\n    return this.getType() \u003d\u003d Token.DEFAULT_CASE;\n  }",
    "begin_line": 2209,
    "end_line": 2211,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isDelProp#2213",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isDelProp()",
    "snippet": "public boolean isDelProp() {\n    return this.getType() \u003d\u003d Token.DELPROP;\n  }",
    "begin_line": 2213,
    "end_line": 2215,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isDo#2217",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isDo()",
    "snippet": "public boolean isDo() {\n    return this.getType() \u003d\u003d Token.DO;\n  }",
    "begin_line": 2217,
    "end_line": 2219,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isEmpty#2221",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isEmpty()",
    "snippet": "public boolean isEmpty() {\n    return this.getType() \u003d\u003d Token.EMPTY;\n  }",
    "begin_line": 2221,
    "end_line": 2223,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isExprResult#2225",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isExprResult()",
    "snippet": "public boolean isExprResult() {\n    return this.getType() \u003d\u003d Token.EXPR_RESULT;\n  }",
    "begin_line": 2225,
    "end_line": 2227,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isFalse#2229",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isFalse()",
    "snippet": "public boolean isFalse() {\n    return this.getType() \u003d\u003d Token.FALSE;\n  }",
    "begin_line": 2229,
    "end_line": 2231,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isFor#2233",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isFor()",
    "snippet": "public boolean isFor() {\n    return this.getType() \u003d\u003d Token.FOR;\n  }",
    "begin_line": 2233,
    "end_line": 2235,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isFunction#2237",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isFunction()",
    "snippet": "public boolean isFunction() {\n    return this.getType() \u003d\u003d Token.FUNCTION;\n  }",
    "begin_line": 2237,
    "end_line": 2239,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isGetterDef#2241",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isGetterDef()",
    "snippet": "public boolean isGetterDef() {\n    return this.getType() \u003d\u003d Token.GETTER_DEF;\n  }",
    "begin_line": 2241,
    "end_line": 2243,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isGetElem#2245",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isGetElem()",
    "snippet": "public boolean isGetElem() {\n    return this.getType() \u003d\u003d Token.GETELEM;\n  }",
    "begin_line": 2245,
    "end_line": 2247,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isGetProp#2249",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isGetProp()",
    "snippet": "public boolean isGetProp() {\n    return this.getType() \u003d\u003d Token.GETPROP;\n  }",
    "begin_line": 2249,
    "end_line": 2251,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isHook#2253",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isHook()",
    "snippet": "public boolean isHook() {\n    return this.getType() \u003d\u003d Token.HOOK;\n  }",
    "begin_line": 2253,
    "end_line": 2255,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isIf#2257",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isIf()",
    "snippet": "public boolean isIf() {\n    return this.getType() \u003d\u003d Token.IF;\n  }",
    "begin_line": 2257,
    "end_line": 2259,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isIn#2261",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isIn()",
    "snippet": "public boolean isIn() {\n    return this.getType() \u003d\u003d Token.IN;\n  }",
    "begin_line": 2261,
    "end_line": 2263,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isInc#2265",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isInc()",
    "snippet": "public boolean isInc() {\n    return this.getType() \u003d\u003d Token.INC;\n  }",
    "begin_line": 2265,
    "end_line": 2267,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isInstanceOf#2269",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isInstanceOf()",
    "snippet": "public boolean isInstanceOf() {\n    return this.getType() \u003d\u003d Token.INSTANCEOF;\n  }",
    "begin_line": 2269,
    "end_line": 2271,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isLabel#2273",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isLabel()",
    "snippet": "public boolean isLabel() {\n    return this.getType() \u003d\u003d Token.LABEL;\n  }",
    "begin_line": 2273,
    "end_line": 2275,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isLabelName#2277",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isLabelName()",
    "snippet": "public boolean isLabelName() {\n    return this.getType() \u003d\u003d Token.LABEL_NAME;\n  }",
    "begin_line": 2277,
    "end_line": 2279,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isName#2281",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isName()",
    "snippet": "public boolean isName() {\n    return this.getType() \u003d\u003d Token.NAME;\n  }",
    "begin_line": 2281,
    "end_line": 2283,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isNE#2285",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isNE()",
    "snippet": "public boolean isNE() {\n    return this.getType() \u003d\u003d Token.NE;\n  }",
    "begin_line": 2285,
    "end_line": 2287,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isNew#2289",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isNew()",
    "snippet": "public boolean isNew() {\n    return this.getType() \u003d\u003d Token.NEW;\n  }",
    "begin_line": 2289,
    "end_line": 2291,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isNot#2293",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isNot()",
    "snippet": "public boolean isNot() {\n    return this.getType() \u003d\u003d Token.NOT;\n  }",
    "begin_line": 2293,
    "end_line": 2295,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isNull#2297",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isNull()",
    "snippet": "public boolean isNull() {\n    return this.getType() \u003d\u003d Token.NULL;\n  }",
    "begin_line": 2297,
    "end_line": 2299,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isNumber#2301",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isNumber()",
    "snippet": "public boolean isNumber() {\n    return this.getType() \u003d\u003d Token.NUMBER;\n  }",
    "begin_line": 2301,
    "end_line": 2303,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isObjectLit#2305",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isObjectLit()",
    "snippet": "public boolean isObjectLit() {\n    return this.getType() \u003d\u003d Token.OBJECTLIT;\n  }",
    "begin_line": 2305,
    "end_line": 2307,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isOr#2309",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isOr()",
    "snippet": "public boolean isOr() {\n    return this.getType() \u003d\u003d Token.OR;\n  }",
    "begin_line": 2309,
    "end_line": 2311,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isParamList#2313",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isParamList()",
    "snippet": "public boolean isParamList() {\n    return this.getType() \u003d\u003d Token.PARAM_LIST;\n  }",
    "begin_line": 2313,
    "end_line": 2315,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isRegExp#2317",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isRegExp()",
    "snippet": "public boolean isRegExp() {\n    return this.getType() \u003d\u003d Token.REGEXP;\n  }",
    "begin_line": 2317,
    "end_line": 2319,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isReturn#2321",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isReturn()",
    "snippet": "public boolean isReturn() {\n    return this.getType() \u003d\u003d Token.RETURN;\n  }",
    "begin_line": 2321,
    "end_line": 2323,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isScript#2325",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isScript()",
    "snippet": "public boolean isScript() {\n    return this.getType() \u003d\u003d Token.SCRIPT;\n  }",
    "begin_line": 2325,
    "end_line": 2327,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isSetterDef#2329",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isSetterDef()",
    "snippet": "public boolean isSetterDef() {\n    return this.getType() \u003d\u003d Token.SETTER_DEF;\n  }",
    "begin_line": 2329,
    "end_line": 2331,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isString#2333",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isString()",
    "snippet": "public boolean isString() {\n    return this.getType() \u003d\u003d Token.STRING;\n  }",
    "begin_line": 2333,
    "end_line": 2335,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isStringKey#2337",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isStringKey()",
    "snippet": "public boolean isStringKey() {\n    return this.getType() \u003d\u003d Token.STRING_KEY;\n  }",
    "begin_line": 2337,
    "end_line": 2339,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isSwitch#2341",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isSwitch()",
    "snippet": "public boolean isSwitch() {\n    return this.getType() \u003d\u003d Token.SWITCH;\n  }",
    "begin_line": 2341,
    "end_line": 2343,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isThis#2345",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isThis()",
    "snippet": "public boolean isThis() {\n    return this.getType() \u003d\u003d Token.THIS;\n  }",
    "begin_line": 2345,
    "end_line": 2347,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isThrow#2349",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isThrow()",
    "snippet": "public boolean isThrow() {\n    return this.getType() \u003d\u003d Token.THROW;\n  }",
    "begin_line": 2349,
    "end_line": 2351,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isTrue#2353",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isTrue()",
    "snippet": "public boolean isTrue() {\n    return this.getType() \u003d\u003d Token.TRUE;\n  }",
    "begin_line": 2353,
    "end_line": 2355,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isTry#2357",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isTry()",
    "snippet": "public boolean isTry() {\n    return this.getType() \u003d\u003d Token.TRY;\n  }",
    "begin_line": 2357,
    "end_line": 2359,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isTypeOf#2361",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isTypeOf()",
    "snippet": "public boolean isTypeOf() {\n    return this.getType() \u003d\u003d Token.TYPEOF;\n  }",
    "begin_line": 2361,
    "end_line": 2363,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isVar#2365",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isVar()",
    "snippet": "public boolean isVar() {\n    return this.getType() \u003d\u003d Token.VAR;\n  }",
    "begin_line": 2365,
    "end_line": 2367,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isVoid#2369",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isVoid()",
    "snippet": "public boolean isVoid() {\n    return this.getType() \u003d\u003d Token.VOID;\n  }",
    "begin_line": 2369,
    "end_line": 2371,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isWhile#2373",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isWhile()",
    "snippet": "public boolean isWhile() {\n    return this.getType() \u003d\u003d Token.WHILE;\n  }",
    "begin_line": 2373,
    "end_line": 2375,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeMismatch.isWith#2377",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/Node.java",
    "class_name": "com.google.javascript.rhino.Node",
    "signature": "com.google.javascript.rhino.Node.isWith()",
    "snippet": "public boolean isWith() {\n    return this.getType() \u003d\u003d Token.WITH;\n  }",
    "begin_line": 2377,
    "end_line": 2379,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ScriptRuntime.ScriptRuntime#63",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/ScriptRuntime.java",
    "class_name": "com.google.javascript.rhino.ScriptRuntime",
    "signature": "com.google.javascript.rhino.ScriptRuntime.ScriptRuntime()",
    "snippet": "protected ScriptRuntime() {\n    }",
    "begin_line": 63,
    "end_line": 64,
    "comment": "/** \n * No instances should be created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ScriptRuntime.isJSLineTerminator#67",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/ScriptRuntime.java",
    "class_name": "com.google.javascript.rhino.ScriptRuntime",
    "signature": "com.google.javascript.rhino.ScriptRuntime.isJSLineTerminator(int)",
    "snippet": "public static boolean isJSLineTerminator(int c) {\n        // Optimization for faster check for EOL character:\n        // they do not have 0xDFD0 bits set\n        if ((c \u0026 0xDFD0) !\u003d 0) {\n            return false;\n        }\n        return c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d 0x2028 || c \u003d\u003d 0x2029;\n    }",
    "begin_line": 67,
    "end_line": 74,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ScriptRuntime.stringToNumber#91",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/ScriptRuntime.java",
    "class_name": "com.google.javascript.rhino.ScriptRuntime",
    "signature": "com.google.javascript.rhino.ScriptRuntime.stringToNumber(java.lang.String, int, int)",
    "snippet": "@SuppressWarnings(\"fallthrough\")\n    static double stringToNumber(String s, int start, int radix) {\n        char digitMax \u003d \u00279\u0027;\n        char lowerCaseBound \u003d \u0027a\u0027;\n        char upperCaseBound \u003d \u0027A\u0027;\n        int len \u003d s.length();\n        if (radix \u003c 10) {\n            digitMax \u003d (char) (\u00270\u0027 + radix - 1);\n        }\n        if (radix \u003e 10) {\n            lowerCaseBound \u003d (char) (\u0027a\u0027 + radix - 10);\n            upperCaseBound \u003d (char) (\u0027A\u0027 + radix - 10);\n        }\n        int end;\n        double sum \u003d 0.0;\n        for (end\u003dstart; end \u003c len; end++) {\n            char c \u003d s.charAt(end);\n            int newDigit;\n            if (\u00270\u0027 \u003c\u003d c \u0026\u0026 c \u003c\u003d digitMax)\n                newDigit \u003d c - \u00270\u0027;\n            else if (\u0027a\u0027 \u003c\u003d c \u0026\u0026 c \u003c lowerCaseBound)\n                newDigit \u003d c - \u0027a\u0027 + 10;\n            else if (\u0027A\u0027 \u003c\u003d c \u0026\u0026 c \u003c upperCaseBound)\n                newDigit \u003d c - \u0027A\u0027 + 10;\n            else\n                break;\n            sum \u003d sum*radix + newDigit;\n        }\n        if (start \u003d\u003d end) {\n            return NaN;\n        }\n        if (sum \u003e\u003d 9007199254740992.0) {\n            if (radix \u003d\u003d 10) {\n                /* If we\u0027re accumulating a decimal number and the number\n                 * is \u003e\u003d 2^53, then the result from the repeated multiply-add\n                 * above may be inaccurate.  Call Java to get the correct\n                 * answer.\n                 */\n                try {\n                    return Double.valueOf(s.substring(start, end)).doubleValue();\n                } catch (NumberFormatException nfe) {\n                    return NaN;\n                }\n            } else if (radix \u003d\u003d 2 || radix \u003d\u003d 4 || radix \u003d\u003d 8 ||\n                       radix \u003d\u003d 16 || radix \u003d\u003d 32) {\n                /* The number may also be inaccurate for one of these bases.\n                 * This happens if the addition in value*radix + digit causes\n                 * a round-down to an even least significant mantissa bit\n                 * when the first dropped bit is a one.  If any of the\n                 * following digits in the number (which haven\u0027t been added\n                 * in yet) are nonzero then the correct action would have\n                 * been to round up instead of down.  An example of this\n                 * occurs when reading the number 0x1000000000000081, which\n                 * rounds to 0x1000000000000000 instead of 0x1000000000000100.\n                 */\n                int bitShiftInChar \u003d 1;\n                int digit \u003d 0;\n\n                final int SKIP_LEADING_ZEROS \u003d 0;\n                final int FIRST_EXACT_53_BITS \u003d 1;\n                final int AFTER_BIT_53         \u003d 2;\n                final int ZEROS_AFTER_54 \u003d 3;\n                final int MIXED_AFTER_54 \u003d 4;\n\n                int state \u003d SKIP_LEADING_ZEROS;\n                int exactBitsLimit \u003d 53;\n                double factor \u003d 0.0;\n                boolean bit53 \u003d false;\n                // bit54 is the 54th bit (the first dropped from the mantissa)\n                boolean bit54 \u003d false;\n\n                for (;;) {\n                    if (bitShiftInChar \u003d\u003d 1) {\n                        if (start \u003d\u003d end)\n                            break;\n                        digit \u003d s.charAt(start++);\n                        if (\u00270\u0027 \u003c\u003d digit \u0026\u0026 digit \u003c\u003d \u00279\u0027)\n                            digit -\u003d \u00270\u0027;\n                        else if (\u0027a\u0027 \u003c\u003d digit \u0026\u0026 digit \u003c\u003d \u0027z\u0027)\n                            digit -\u003d \u0027a\u0027 - 10;\n                        else\n                            digit -\u003d \u0027A\u0027 - 10;\n                        bitShiftInChar \u003d radix;\n                    }\n                    bitShiftInChar \u003e\u003e\u003d 1;\n                    boolean bit \u003d (digit \u0026 bitShiftInChar) !\u003d 0;\n\n                    switch (state) {\n                      case SKIP_LEADING_ZEROS:\n                          if (bit) {\n                            --exactBitsLimit;\n                            sum \u003d 1.0;\n                            state \u003d FIRST_EXACT_53_BITS;\n                        }\n                        break;\n                      case FIRST_EXACT_53_BITS:\n                           sum *\u003d 2.0;\n                        if (bit)\n                            sum +\u003d 1.0;\n                        --exactBitsLimit;\n                        if (exactBitsLimit \u003d\u003d 0) {\n                            bit53 \u003d bit;\n                            state \u003d AFTER_BIT_53;\n                        }\n                        break;\n                      case AFTER_BIT_53:\n                        bit54 \u003d bit;\n                        factor \u003d 2.0;\n                        state \u003d ZEROS_AFTER_54;\n                        break;\n                      case ZEROS_AFTER_54:\n                        if (bit) {\n                            state \u003d MIXED_AFTER_54;\n                        }\n                        // fallthrough\n                      case MIXED_AFTER_54:\n                        factor *\u003d 2;\n                        break;\n                    }\n                }\n                switch (state) {\n                  case SKIP_LEADING_ZEROS:\n                    sum \u003d 0.0;\n                    break;\n                  case FIRST_EXACT_53_BITS:\n                  case AFTER_BIT_53:\n                    // do nothing\n                    break;\n                  case ZEROS_AFTER_54:\n                    // x1.1 -\u003e x1 + 1 (round up)\n                    // x0.1 -\u003e x0 (round down)\n                    if (bit54 \u0026 bit53)\n                        sum +\u003d 1.0;\n                    sum *\u003d factor;\n                    break;\n                  case MIXED_AFTER_54:\n                    // x.100...1.. -\u003e x + 1 (round up)\n                    // x.0anything -\u003e x (round down)\n                    if (bit54)\n                        sum +\u003d 1.0;\n                    sum *\u003d factor;\n                    break;\n                }\n            }\n            /* We don\u0027t worry about inaccurate numbers for any other base. */\n        }\n        return sum;\n    }",
    "begin_line": 91,
    "end_line": 237,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ScriptRuntime.escapeString#239",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/ScriptRuntime.java",
    "class_name": "com.google.javascript.rhino.ScriptRuntime",
    "signature": "com.google.javascript.rhino.ScriptRuntime.escapeString(java.lang.String)",
    "snippet": "public static String escapeString(String s) {\n        return escapeString(s, \u0027\"\u0027);\n    }",
    "begin_line": 239,
    "end_line": 241,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ScriptRuntime.escapeString#247",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/ScriptRuntime.java",
    "class_name": "com.google.javascript.rhino.ScriptRuntime",
    "signature": "com.google.javascript.rhino.ScriptRuntime.escapeString(java.lang.String, char)",
    "snippet": "public static String escapeString(String s, char escapeQuote) {\n        if (!(escapeQuote \u003d\u003d \u0027\"\u0027 || escapeQuote \u003d\u003d \u0027\\\u0027\u0027)) {\n          throw new IllegalStateException(\"unexpected quote char:\" + escapeQuote);\n        }\n        StringBuffer sb \u003d null;\n\n        for(int i \u003d 0, L \u003d s.length(); i !\u003d L; ++i) {\n            int c \u003d s.charAt(i);\n\n            if (\u0027 \u0027 \u003c\u003d c \u0026\u0026 c \u003c\u003d \u0027~\u0027 \u0026\u0026 c !\u003d escapeQuote \u0026\u0026 c !\u003d \u0027\\\\\u0027) {\n                // an ordinary print character (like C isprint()) and not \"\n                // or \\ .\n                if (sb !\u003d null) {\n                    sb.append((char)c);\n                }\n                continue;\n            }\n            if (sb \u003d\u003d null) {\n                sb \u003d new StringBuffer(L + 3);\n                sb.append(s);\n                sb.setLength(i);\n            }\n\n            int escape \u003d -1;\n            switch (c) {\n                case \u0027\\b\u0027:  escape \u003d \u0027b\u0027;  break;\n                case \u0027\\f\u0027:  escape \u003d \u0027f\u0027;  break;\n                case \u0027\\n\u0027:  escape \u003d \u0027n\u0027;  break;\n                case \u0027\\r\u0027:  escape \u003d \u0027r\u0027;  break;\n                case \u0027\\t\u0027:  escape \u003d \u0027t\u0027;  break;\n                case 0xb:   escape \u003d \u0027v\u0027;  break; // Java lacks \\v.\n                case \u0027 \u0027:   escape \u003d \u0027 \u0027;  break;\n                case \u0027\\\\\u0027:  escape \u003d \u0027\\\\\u0027; break;\n            }\n            if (escape \u003e\u003d 0) {\n                // an \\escaped sort of character\n                sb.append(\u0027\\\\\u0027);\n                sb.append((char)escape);\n            } else if (c \u003d\u003d escapeQuote) {\n                sb.append(\u0027\\\\\u0027);\n                sb.append(escapeQuote);\n            } else {\n                int hexSize;\n                if (c \u003c 256) {\n                    // 2-digit hex\n                    sb.append(\"\\\\x\");\n                    hexSize \u003d 2;\n                } else {\n                    // Unicode.\n                    sb.append(\"\\\\u\");\n                    hexSize \u003d 4;\n                }\n                // append hexadecimal form of c left-padded with 0\n                for (int shift \u003d (hexSize - 1) * 4; shift \u003e\u003d 0; shift -\u003d 4) {\n                    int digit \u003d 0xf \u0026 (c \u003e\u003e shift);\n                    int hc \u003d (digit \u003c 10) ? \u00270\u0027 + digit : \u0027a\u0027 - 10 + digit;\n                    sb.append((char)hc);\n                }\n            }\n        }\n        return (sb \u003d\u003d null) ? s : sb.toString();\n    }",
    "begin_line": 247,
    "end_line": 308,
    "comment": "/** \n * For escaping strings printed by object and array literals; not quite the same as \u0027escape.\u0027\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ScriptRuntime.isValidIdentifierName#310",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/ScriptRuntime.java",
    "class_name": "com.google.javascript.rhino.ScriptRuntime",
    "signature": "com.google.javascript.rhino.ScriptRuntime.isValidIdentifierName(java.lang.String)",
    "snippet": "static boolean isValidIdentifierName(String s) {\n        int L \u003d s.length();\n        if (L \u003d\u003d 0)\n            return false;\n        if (!Character.isJavaIdentifierStart(s.charAt(0)))\n            return false;\n        for (int i \u003d 1; i !\u003d L; ++i) {\n            if (!Character.isJavaIdentifierPart(s.charAt(i)))\n                return false;\n        }\n        return !TokenStream.isKeyword(s);\n    }",
    "begin_line": 310,
    "end_line": 321,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ScriptRuntime.testUint32String#327",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/ScriptRuntime.java",
    "class_name": "com.google.javascript.rhino.ScriptRuntime",
    "signature": "com.google.javascript.rhino.ScriptRuntime.testUint32String(java.lang.String)",
    "snippet": "public static long testUint32String(String str) {\n        // The length of the decimal string representation of\n        //  UINT32_MAX_VALUE, 4294967296\n        final int MAX_VALUE_LENGTH \u003d 10;\n\n        int len \u003d str.length();\n        if (1 \u003c\u003d len \u0026\u0026 len \u003c\u003d MAX_VALUE_LENGTH) {\n            int c \u003d str.charAt(0);\n            c -\u003d \u00270\u0027;\n            if (c \u003d\u003d 0) {\n                // Note that 00,01 etc. are not valid Uint32 presentations\n                return (len \u003d\u003d 1) ? 0L : -1L;\n            }\n            if (1 \u003c\u003d c \u0026\u0026 c \u003c\u003d 9) {\n                long v \u003d c;\n                for (int i \u003d 1; i !\u003d len; ++i) {\n                    c \u003d str.charAt(i) - \u00270\u0027;\n                    if (!(0 \u003c\u003d c \u0026\u0026 c \u003c\u003d 9)) {\n                        return -1;\n                    }\n                    v \u003d 10 * v + c;\n                }\n                // Check for overflow\n                if ((v \u003e\u003e\u003e 32) \u003d\u003d 0) {\n                    return v;\n                }\n            }\n        }\n        return -1;\n    }",
    "begin_line": 327,
    "end_line": 356,
    "comment": "/** \n * If str is a decimal presentation of Uint32 value, return it as long. Otherwise, return -1L;\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ScriptRuntime.isSpecialProperty#358",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/ScriptRuntime.java",
    "class_name": "com.google.javascript.rhino.ScriptRuntime",
    "signature": "com.google.javascript.rhino.ScriptRuntime.isSpecialProperty(java.lang.String)",
    "snippet": "static boolean isSpecialProperty(String s) {\n        return s.equals(\"__proto__\") || s.equals(\"__parent__\");\n    }",
    "begin_line": 358,
    "end_line": 360,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ScriptRuntime.getMessage0#366",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/ScriptRuntime.java",
    "class_name": "com.google.javascript.rhino.ScriptRuntime",
    "signature": "com.google.javascript.rhino.ScriptRuntime.getMessage0(java.lang.String)",
    "snippet": "public static String getMessage0(String messageId) {\n        return getMessage(messageId, null);\n    }",
    "begin_line": 366,
    "end_line": 368,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ScriptRuntime.getMessage1#370",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/ScriptRuntime.java",
    "class_name": "com.google.javascript.rhino.ScriptRuntime",
    "signature": "com.google.javascript.rhino.ScriptRuntime.getMessage1(java.lang.String, java.lang.Object)",
    "snippet": "public static String getMessage1(String messageId, Object arg1) {\n        Object[] arguments \u003d {arg1};\n        return getMessage(messageId, arguments);\n    }",
    "begin_line": 370,
    "end_line": 373,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ScriptRuntime.getMessage#379",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/ScriptRuntime.java",
    "class_name": "com.google.javascript.rhino.ScriptRuntime",
    "signature": "com.google.javascript.rhino.ScriptRuntime.getMessage(java.lang.String, java.lang.Object[])",
    "snippet": "public static String getMessage(String messageId, Object[] arguments) {\n        final String defaultResource\n            \u003d \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n\n        Locale locale \u003d Locale.getDefault();\n\n        // ResourceBundle does caching.\n        ResourceBundle rb \u003d ResourceBundle.getBundle(defaultResource, locale);\n\n        String formatString;\n        try {\n            formatString \u003d rb.getString(messageId);\n        } catch (java.util.MissingResourceException mre) {\n            throw new RuntimeException\n                (\"no message resource found for message property \"+ messageId);\n        }\n\n        /*\n         * It\u0027s OK to format the string, even if \u0027arguments\u0027 is null;\n         * we need to format it anyway, to make double \u0027\u0027s collapse to\n         * single \u0027s.\n         */\n        // TODO: MessageFormat is not available on pJava\n        MessageFormat formatter \u003d new MessageFormat(formatString);\n        return formatter.format(arguments);\n    }",
    "begin_line": 379,
    "end_line": 404,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AllType.AllType#52",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/AllType.java",
    "class_name": "com.google.javascript.rhino.jstype.AllType",
    "signature": "com.google.javascript.rhino.jstype.AllType.AllType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": " AllType(JSTypeRegistry registry) {\n    super(registry);\n  }",
    "begin_line": 52,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AllType.isAllType#57",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/AllType.java",
    "class_name": "com.google.javascript.rhino.jstype.AllType",
    "signature": "com.google.javascript.rhino.jstype.AllType.isAllType()",
    "snippet": "@Override\n  public boolean isAllType() {\n    return true;\n  }",
    "begin_line": 57,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AllType.matchesStringContext#62",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/AllType.java",
    "class_name": "com.google.javascript.rhino.jstype.AllType",
    "signature": "com.google.javascript.rhino.jstype.AllType.matchesStringContext()",
    "snippet": "@Override\n  public boolean matchesStringContext() {\n    // Be lenient.\n    return true;\n  }",
    "begin_line": 62,
    "end_line": 65,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AllType.matchesObjectContext#68",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/AllType.java",
    "class_name": "com.google.javascript.rhino.jstype.AllType",
    "signature": "com.google.javascript.rhino.jstype.AllType.matchesObjectContext()",
    "snippet": "@Override\n  public boolean matchesObjectContext() {\n    // Be lenient.\n    return true;\n  }",
    "begin_line": 68,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AllType.canBeCalled#74",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/AllType.java",
    "class_name": "com.google.javascript.rhino.jstype.AllType",
    "signature": "com.google.javascript.rhino.jstype.AllType.canBeCalled()",
    "snippet": "@Override\n  public boolean canBeCalled() {\n    return false;\n  }",
    "begin_line": 74,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AllType.testForEquality#79",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/AllType.java",
    "class_name": "com.google.javascript.rhino.jstype.AllType",
    "signature": "com.google.javascript.rhino.jstype.AllType.testForEquality(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public TernaryValue testForEquality(JSType that) {\n    return UNKNOWN;\n  }",
    "begin_line": 79,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AllType.toStringHelper#84",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/AllType.java",
    "class_name": "com.google.javascript.rhino.jstype.AllType",
    "signature": "com.google.javascript.rhino.jstype.AllType.toStringHelper(boolean)",
    "snippet": "@Override\n  String toStringHelper(boolean forAnnotations) {\n    return \"*\";\n  }",
    "begin_line": 84,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AllType.getDisplayName#89",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/AllType.java",
    "class_name": "com.google.javascript.rhino.jstype.AllType",
    "signature": "com.google.javascript.rhino.jstype.AllType.getDisplayName()",
    "snippet": "@Override\n  public String getDisplayName() {\n    return \"\u003cAny Type\u003e\";\n  }",
    "begin_line": 89,
    "end_line": 91,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AllType.hasDisplayName#94",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/AllType.java",
    "class_name": "com.google.javascript.rhino.jstype.AllType",
    "signature": "com.google.javascript.rhino.jstype.AllType.hasDisplayName()",
    "snippet": "@Override\n  public boolean hasDisplayName() {\n    return true;\n  }",
    "begin_line": 94,
    "end_line": 96,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AllType.visit#99",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/AllType.java",
    "class_name": "com.google.javascript.rhino.jstype.AllType",
    "signature": "com.google.javascript.rhino.jstype.AllType.visit(com.google.javascript.rhino.jstype.Visitor\u003cT\u003e)",
    "snippet": "@Override\n  public \u003cT\u003e T visit(Visitor\u003cT\u003e visitor) {\n    return visitor.caseAllType();\n  }",
    "begin_line": 99,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AllType.visit#103",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/AllType.java",
    "class_name": "com.google.javascript.rhino.jstype.AllType",
    "signature": "com.google.javascript.rhino.jstype.AllType.visit(com.google.javascript.rhino.jstype.RelationshipVisitor\u003cT\u003e, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override \u003cT\u003e T visit(RelationshipVisitor\u003cT\u003e visitor, JSType that) {\n    return visitor.caseAllType(that);\n  }",
    "begin_line": 103,
    "end_line": 105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AllType.getPossibleToBooleanOutcomes#108",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/AllType.java",
    "class_name": "com.google.javascript.rhino.jstype.AllType",
    "signature": "com.google.javascript.rhino.jstype.AllType.getPossibleToBooleanOutcomes()",
    "snippet": "@Override\n  public BooleanLiteralSet getPossibleToBooleanOutcomes() {\n    return BooleanLiteralSet.BOTH;\n  }",
    "begin_line": 108,
    "end_line": 110,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AllType.resolveInternal#113",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/AllType.java",
    "class_name": "com.google.javascript.rhino.jstype.AllType",
    "signature": "com.google.javascript.rhino.jstype.AllType.resolveInternal(com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "@Override\n  JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    return this;\n  }",
    "begin_line": 113,
    "end_line": 115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrowType.ArrowType#62",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ArrowType.java",
    "class_name": "com.google.javascript.rhino.jstype.ArrowType",
    "signature": "com.google.javascript.rhino.jstype.ArrowType.ArrowType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
    "snippet": " ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType) {\n    this(registry, parameters, returnType, false);\n  }",
    "begin_line": 62,
    "end_line": 65,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrowType.ArrowType#67",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ArrowType.java",
    "class_name": "com.google.javascript.rhino.jstype.ArrowType",
    "signature": "com.google.javascript.rhino.jstype.ArrowType.ArrowType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, boolean)",
    "snippet": " ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType, boolean returnTypeInferred) {\n    super(registry);\n\n    this.parameters \u003d parameters \u003d\u003d null ?\n        registry.createParametersWithVarArgs(getNativeType(UNKNOWN_TYPE)) :\n        parameters;\n    this.returnType \u003d returnType \u003d\u003d null ?\n        getNativeType(UNKNOWN_TYPE) : returnType;\n    this.returnTypeInferred \u003d returnTypeInferred;\n  }",
    "begin_line": 67,
    "end_line": 77,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrowType.isSubtype#80",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ArrowType.java",
    "class_name": "com.google.javascript.rhino.jstype.ArrowType",
    "signature": "com.google.javascript.rhino.jstype.ArrowType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that \u003d (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType \u003c: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // that.paramType[i] \u003c: this.paramType[i] (contravariant)\n    //\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required.\n    //\n    // In theory, the \"required-ness\" should work in the other direction as\n    // well. In other words, if we have\n    //\n    // function f(number, number) {}\n    // function g(number) {}\n    //\n    // Then f *should* not be a subtype of g, and g *should* not be\n    // a subtype of f. But in practice, we do not implement it this way.\n    // We want to support the use case where you can pass g where f is\n    // expected, and pretend that g ignores the second argument.\n    // That way, you can have a single \"no-op\" function, and you don\u0027t have\n    // to create a new no-op function for every possible type signature.\n    //\n    // So, in this case, g \u003c f, but f !\u003c g\n    Node thisParam \u003d parameters.getFirstChild();\n    Node thatParam \u003d that.parameters.getFirstChild();\n    while (thisParam !\u003d null \u0026\u0026 thatParam !\u003d null) {\n      JSType thisParamType \u003d thisParam.getJSType();\n      JSType thatParamType \u003d thatParam.getJSType();\n      if (thisParamType !\u003d null) {\n        if (thatParamType \u003d\u003d null ||\n            !thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      }\n\n      boolean thisIsVarArgs \u003d thisParam.isVarArgs();\n      boolean thatIsVarArgs \u003d thatParam.isVarArgs();\n      boolean thisIsOptional \u003d thisIsVarArgs || thisParam.isOptionalArg();\n      boolean thatIsOptional \u003d thatIsVarArgs || thatParam.isOptionalArg();\n\n      // \"that\" can\u0027t be a supertype, because it\u0027s missing a required argument.\n      if (!thisIsOptional \u0026\u0026 thatIsOptional) {\n        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n        // {function(...NoType)} to to indicate that arity should not be\n        // checked. Strictly speaking, this is not a correct formulation,\n        // because now a sub-function can required arguments that are var_args\n        // in the super-function. So we special-case this.\n        boolean isTopFunction \u003d\n            thatIsVarArgs \u0026\u0026\n            (thatParamType \u003d\u003d null ||\n             thatParamType.isUnknownType() ||\n             thatParamType.isNoType());\n        if (!isTopFunction) {\n          return false;\n        }\n      }\n\n      // don\u0027t advance if we have variable arguments\n      if (!thisIsVarArgs) {\n        thisParam \u003d thisParam.getNext();\n      }\n      if (!thatIsVarArgs) {\n        thatParam \u003d thatParam.getNext();\n      }\n\n      // both var_args indicates the end\n      if (thisIsVarArgs \u0026\u0026 thatIsVarArgs) {\n        thisParam \u003d null;\n        thatParam \u003d null;\n      }\n    }\n\n    // \"that\" can\u0027t be a supertype, because it\u0027s missing a required argument.\n    if (thisParam !\u003d null\n        \u0026\u0026 !thisParam.isOptionalArg() \u0026\u0026 !thisParam.isVarArgs()\n        \u0026\u0026 thatParam \u003d\u003d null) {\n      return false;\n    }\n\n    return true;\n  }",
    "begin_line": 80,
    "end_line": 171,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrowType.hasEqualParameters#177",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ArrowType.java",
    "class_name": "com.google.javascript.rhino.jstype.ArrowType",
    "signature": "com.google.javascript.rhino.jstype.ArrowType.hasEqualParameters(com.google.javascript.rhino.jstype.ArrowType, com.google.javascript.rhino.jstype.EquivalenceMethod)",
    "snippet": "boolean hasEqualParameters(ArrowType that, EquivalenceMethod eqMethod) {\n    Node thisParam \u003d parameters.getFirstChild();\n    Node otherParam \u003d that.parameters.getFirstChild();\n    while (thisParam !\u003d null \u0026\u0026 otherParam !\u003d null) {\n      JSType thisParamType \u003d thisParam.getJSType();\n      JSType otherParamType \u003d otherParam.getJSType();\n      if (thisParamType !\u003d null) {\n        // Both parameter lists give a type for this param, it should be equal\n        if (otherParamType !\u003d null \u0026\u0026\n            !thisParamType.checkEquivalenceHelper(\n                otherParamType, eqMethod)) {\n          return false;\n        }\n      } else {\n        if (otherParamType !\u003d null) {\n          return false;\n        }\n      }\n\n      // Check var_args/optionality\n      if (thisParam.isOptionalArg() !\u003d otherParam.isOptionalArg()) {\n        return false;\n      }\n\n      if (thisParam.isVarArgs() !\u003d otherParam.isVarArgs()) {\n        return false;\n      }\n\n      thisParam \u003d thisParam.getNext();\n      otherParam \u003d otherParam.getNext();\n    }\n    // One of the parameters is null, so the types are only equal if both\n    // parameter lists are null (they are equal).\n    return thisParam \u003d\u003d otherParam;\n  }",
    "begin_line": 177,
    "end_line": 211,
    "comment": "/** \n * @return True if our parameter spec is equal to {@code that}\u0027s parameter spec.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrowType.checkArrowEquivalenceHelper#213",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ArrowType.java",
    "class_name": "com.google.javascript.rhino.jstype.ArrowType",
    "signature": "com.google.javascript.rhino.jstype.ArrowType.checkArrowEquivalenceHelper(com.google.javascript.rhino.jstype.ArrowType, com.google.javascript.rhino.jstype.EquivalenceMethod)",
    "snippet": "boolean checkArrowEquivalenceHelper(\n      ArrowType that, EquivalenceMethod eqMethod) {\n    // Please keep this method in sync with the hashCode() method below.\n    if (!returnType.checkEquivalenceHelper(that.returnType, eqMethod)) {\n      return false;\n    }\n    return hasEqualParameters(that, eqMethod);\n  }",
    "begin_line": 213,
    "end_line": 220,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrowType.hashCode#223",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ArrowType.java",
    "class_name": "com.google.javascript.rhino.jstype.ArrowType",
    "signature": "com.google.javascript.rhino.jstype.ArrowType.hashCode()",
    "snippet": "@Override\n  public int hashCode() {\n    int hashCode \u003d 0;\n    if (returnType !\u003d null) {\n      hashCode +\u003d returnType.hashCode();\n    }\n    if (returnTypeInferred) {\n      hashCode +\u003d 1;\n    }\n    if (parameters !\u003d null) {\n      Node param \u003d parameters.getFirstChild();\n      while (param !\u003d null) {\n        JSType paramType \u003d param.getJSType();\n        if (paramType !\u003d null) {\n          hashCode +\u003d paramType.hashCode();\n        }\n        param \u003d param.getNext();\n      }\n    }\n    return hashCode;\n  }",
    "begin_line": 223,
    "end_line": 242,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrowType.getLeastSupertype#245",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ArrowType.java",
    "class_name": "com.google.javascript.rhino.jstype.ArrowType",
    "signature": "com.google.javascript.rhino.jstype.ArrowType.getLeastSupertype(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public JSType getLeastSupertype(JSType that) {\n    throw new UnsupportedOperationException();\n  }",
    "begin_line": 245,
    "end_line": 247,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrowType.getGreatestSubtype#250",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ArrowType.java",
    "class_name": "com.google.javascript.rhino.jstype.ArrowType",
    "signature": "com.google.javascript.rhino.jstype.ArrowType.getGreatestSubtype(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public JSType getGreatestSubtype(JSType that) {\n    throw new UnsupportedOperationException();\n  }",
    "begin_line": 250,
    "end_line": 252,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrowType.testForEquality#255",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ArrowType.java",
    "class_name": "com.google.javascript.rhino.jstype.ArrowType",
    "signature": "com.google.javascript.rhino.jstype.ArrowType.testForEquality(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public TernaryValue testForEquality(JSType that) {\n    throw new UnsupportedOperationException();\n  }",
    "begin_line": 255,
    "end_line": 257,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrowType.visit#260",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ArrowType.java",
    "class_name": "com.google.javascript.rhino.jstype.ArrowType",
    "signature": "com.google.javascript.rhino.jstype.ArrowType.visit(com.google.javascript.rhino.jstype.Visitor\u003cT\u003e)",
    "snippet": "@Override\n  public \u003cT\u003e T visit(Visitor\u003cT\u003e visitor) {\n    throw new UnsupportedOperationException();\n  }",
    "begin_line": 260,
    "end_line": 262,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrowType.visit#264",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ArrowType.java",
    "class_name": "com.google.javascript.rhino.jstype.ArrowType",
    "signature": "com.google.javascript.rhino.jstype.ArrowType.visit(com.google.javascript.rhino.jstype.RelationshipVisitor\u003cT\u003e, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override \u003cT\u003e T visit(RelationshipVisitor\u003cT\u003e visitor, JSType that) {\n    throw new UnsupportedOperationException();\n  }",
    "begin_line": 264,
    "end_line": 266,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrowType.getPossibleToBooleanOutcomes#269",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ArrowType.java",
    "class_name": "com.google.javascript.rhino.jstype.ArrowType",
    "signature": "com.google.javascript.rhino.jstype.ArrowType.getPossibleToBooleanOutcomes()",
    "snippet": "@Override\n  public BooleanLiteralSet getPossibleToBooleanOutcomes() {\n    return BooleanLiteralSet.TRUE;\n  }",
    "begin_line": 269,
    "end_line": 271,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrowType.resolveInternal#274",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ArrowType.java",
    "class_name": "com.google.javascript.rhino.jstype.ArrowType",
    "signature": "com.google.javascript.rhino.jstype.ArrowType.resolveInternal(com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "@Override\n  JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    returnType \u003d safeResolve(returnType, t, scope);\n    if (parameters !\u003d null) {\n      for (Node paramNode \u003d parameters.getFirstChild();\n           paramNode !\u003d null; paramNode \u003d paramNode.getNext()) {\n        paramNode.setJSType(paramNode.getJSType().resolve(t, scope));\n      }\n    }\n    return this;\n  }",
    "begin_line": 274,
    "end_line": 283,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrowType.hasUnknownParamsOrReturn#285",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ArrowType.java",
    "class_name": "com.google.javascript.rhino.jstype.ArrowType",
    "signature": "com.google.javascript.rhino.jstype.ArrowType.hasUnknownParamsOrReturn()",
    "snippet": "boolean hasUnknownParamsOrReturn() {\n    if (parameters !\u003d null) {\n      for (Node paramNode \u003d parameters.getFirstChild();\n           paramNode !\u003d null; paramNode \u003d paramNode.getNext()) {\n        JSType type \u003d paramNode.getJSType();\n        if (type \u003d\u003d null || type.isUnknownType()) {\n          return true;\n        }\n      }\n    }\n    return returnType \u003d\u003d null || returnType.isUnknownType();\n  }",
    "begin_line": 285,
    "end_line": 296,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrowType.toStringHelper#299",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ArrowType.java",
    "class_name": "com.google.javascript.rhino.jstype.ArrowType",
    "signature": "com.google.javascript.rhino.jstype.ArrowType.toStringHelper(boolean)",
    "snippet": "@Override\n  String toStringHelper(boolean forAnnotations) {\n    return \"[ArrowType]\";\n  }",
    "begin_line": 299,
    "end_line": 301,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrowType.hasAnyTemplateTypesInternal#304",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ArrowType.java",
    "class_name": "com.google.javascript.rhino.jstype.ArrowType",
    "signature": "com.google.javascript.rhino.jstype.ArrowType.hasAnyTemplateTypesInternal()",
    "snippet": "@Override\n  public boolean hasAnyTemplateTypesInternal() {\n    return returnType.hasAnyTemplateTypes()\n        || hasTemplatedParameterType();\n  }",
    "begin_line": 304,
    "end_line": 307,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrowType.hasTemplatedParameterType#309",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ArrowType.java",
    "class_name": "com.google.javascript.rhino.jstype.ArrowType",
    "signature": "com.google.javascript.rhino.jstype.ArrowType.hasTemplatedParameterType()",
    "snippet": "private boolean hasTemplatedParameterType() {\n    if (parameters !\u003d null) {\n      for (Node paramNode \u003d parameters.getFirstChild();\n           paramNode !\u003d null; paramNode \u003d paramNode.getNext()) {\n        JSType type \u003d paramNode.getJSType();\n        if (type !\u003d null \u0026\u0026 type.hasAnyTemplateTypes()) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
    "begin_line": 309,
    "end_line": 320,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanType.BooleanType#52",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/BooleanType.java",
    "class_name": "com.google.javascript.rhino.jstype.BooleanType",
    "signature": "com.google.javascript.rhino.jstype.BooleanType.BooleanType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": " BooleanType(JSTypeRegistry registry) {\n    super(registry);\n  }",
    "begin_line": 52,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanType.isNullable#57",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/BooleanType.java",
    "class_name": "com.google.javascript.rhino.jstype.BooleanType",
    "signature": "com.google.javascript.rhino.jstype.BooleanType.isNullable()",
    "snippet": "@Override\n  public boolean isNullable() {\n    return false;\n  }",
    "begin_line": 57,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanType.testForEquality#62",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/BooleanType.java",
    "class_name": "com.google.javascript.rhino.jstype.BooleanType",
    "signature": "com.google.javascript.rhino.jstype.BooleanType.testForEquality(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public TernaryValue testForEquality(JSType that) {\n    TernaryValue result \u003d super.testForEquality(that);\n    if (result !\u003d null) {\n      return result;\n    }\n    if (that.isUnknownType() || that.isSubtype(\n            getNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN)) ||\n        that.isObject()) {\n      return UNKNOWN;\n    }\n    return FALSE;\n  }",
    "begin_line": 62,
    "end_line": 73,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanType.isBooleanValueType#76",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/BooleanType.java",
    "class_name": "com.google.javascript.rhino.jstype.BooleanType",
    "signature": "com.google.javascript.rhino.jstype.BooleanType.isBooleanValueType()",
    "snippet": "@Override\n  public boolean isBooleanValueType() {\n    return true;\n  }",
    "begin_line": 76,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanType.matchesNumberContext#81",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/BooleanType.java",
    "class_name": "com.google.javascript.rhino.jstype.BooleanType",
    "signature": "com.google.javascript.rhino.jstype.BooleanType.matchesNumberContext()",
    "snippet": "@Override\n  public boolean matchesNumberContext() {\n    return true;\n  }",
    "begin_line": 81,
    "end_line": 83,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanType.matchesStringContext#86",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/BooleanType.java",
    "class_name": "com.google.javascript.rhino.jstype.BooleanType",
    "signature": "com.google.javascript.rhino.jstype.BooleanType.matchesStringContext()",
    "snippet": "@Override\n  public boolean matchesStringContext() {\n    return true;\n  }",
    "begin_line": 86,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanType.matchesObjectContext#91",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/BooleanType.java",
    "class_name": "com.google.javascript.rhino.jstype.BooleanType",
    "signature": "com.google.javascript.rhino.jstype.BooleanType.matchesObjectContext()",
    "snippet": "@Override\n  public boolean matchesObjectContext() {\n    // TODO(user): Revisit this for ES4, which is stricter.\n    return true;\n  }",
    "begin_line": 91,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanType.autoboxesTo#97",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/BooleanType.java",
    "class_name": "com.google.javascript.rhino.jstype.BooleanType",
    "signature": "com.google.javascript.rhino.jstype.BooleanType.autoboxesTo()",
    "snippet": "@Override\n  public JSType autoboxesTo() {\n    return getNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE);\n  }",
    "begin_line": 97,
    "end_line": 99,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanType.toStringHelper#102",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/BooleanType.java",
    "class_name": "com.google.javascript.rhino.jstype.BooleanType",
    "signature": "com.google.javascript.rhino.jstype.BooleanType.toStringHelper(boolean)",
    "snippet": "@Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }",
    "begin_line": 102,
    "end_line": 104,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanType.getDisplayName#107",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/BooleanType.java",
    "class_name": "com.google.javascript.rhino.jstype.BooleanType",
    "signature": "com.google.javascript.rhino.jstype.BooleanType.getDisplayName()",
    "snippet": "@Override\n  public String getDisplayName() {\n    return \"boolean\";\n  }",
    "begin_line": 107,
    "end_line": 109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanType.getPossibleToBooleanOutcomes#112",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/BooleanType.java",
    "class_name": "com.google.javascript.rhino.jstype.BooleanType",
    "signature": "com.google.javascript.rhino.jstype.BooleanType.getPossibleToBooleanOutcomes()",
    "snippet": "@Override\n  public BooleanLiteralSet getPossibleToBooleanOutcomes() {\n    return BooleanLiteralSet.BOTH;\n  }",
    "begin_line": 112,
    "end_line": 114,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanType.visit#117",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/BooleanType.java",
    "class_name": "com.google.javascript.rhino.jstype.BooleanType",
    "signature": "com.google.javascript.rhino.jstype.BooleanType.visit(com.google.javascript.rhino.jstype.Visitor\u003cT\u003e)",
    "snippet": "@Override\n  public \u003cT\u003e T visit(Visitor\u003cT\u003e visitor) {\n    return visitor.caseBooleanType();\n  }",
    "begin_line": 117,
    "end_line": 119,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CanCastToVisitor.caseUnknownType#48",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/CanCastToVisitor.java",
    "class_name": "com.google.javascript.rhino.jstype.CanCastToVisitor",
    "signature": "com.google.javascript.rhino.jstype.CanCastToVisitor.caseUnknownType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public Boolean caseUnknownType(JSType thisType, JSType thatType) {\n    return true;\n  }",
    "begin_line": 48,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CanCastToVisitor.caseNoType#53",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/CanCastToVisitor.java",
    "class_name": "com.google.javascript.rhino.jstype.CanCastToVisitor",
    "signature": "com.google.javascript.rhino.jstype.CanCastToVisitor.caseNoType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public Boolean caseNoType(JSType thatType) {\n    return true;\n  }",
    "begin_line": 53,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CanCastToVisitor.caseNoObjectType#58",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/CanCastToVisitor.java",
    "class_name": "com.google.javascript.rhino.jstype.CanCastToVisitor",
    "signature": "com.google.javascript.rhino.jstype.CanCastToVisitor.caseNoObjectType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public Boolean caseNoObjectType(JSType thatType) {\n    return true; // TODO(johnlenz): restrict to objects\n  }",
    "begin_line": 58,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CanCastToVisitor.caseAllType#63",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/CanCastToVisitor.java",
    "class_name": "com.google.javascript.rhino.jstype.CanCastToVisitor",
    "signature": "com.google.javascript.rhino.jstype.CanCastToVisitor.caseAllType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public Boolean caseAllType(JSType thatType) {\n    return true;\n  }",
    "begin_line": 63,
    "end_line": 65,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CanCastToVisitor.canCastToUnion#67",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/CanCastToVisitor.java",
    "class_name": "com.google.javascript.rhino.jstype.CanCastToVisitor",
    "signature": "com.google.javascript.rhino.jstype.CanCastToVisitor.canCastToUnion(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.UnionType)",
    "snippet": "boolean canCastToUnion(JSType thisType, UnionType unionType) {\n    for (JSType type : unionType.getAlternates()) {\n      if (thisType.visit(this, type)) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "begin_line": 67,
    "end_line": 74,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CanCastToVisitor.canCastToFunction#76",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/CanCastToVisitor.java",
    "class_name": "com.google.javascript.rhino.jstype.CanCastToVisitor",
    "signature": "com.google.javascript.rhino.jstype.CanCastToVisitor.canCastToFunction(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "boolean canCastToFunction(JSType thisType, FunctionType functionType) {\n    if (thisType.isFunctionType()) {\n      // TODO(johnlenz): visit function parts\n      return true;\n    } else {\n      return thisType.isSubtype(functionType)\n          || functionType.isSubtype(thisType);\n    }\n  }",
    "begin_line": 76,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CanCastToVisitor.isInterface#86",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/CanCastToVisitor.java",
    "class_name": "com.google.javascript.rhino.jstype.CanCastToVisitor",
    "signature": "com.google.javascript.rhino.jstype.CanCastToVisitor.isInterface(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private boolean isInterface(JSType type) {\n    ObjectType objType \u003d type.toObjectType();\n    if (objType !\u003d null) {\n      JSType constructor \u003d objType.getConstructor();\n      return constructor !\u003d null \u0026\u0026 constructor.isInterface();\n    }\n    return false;\n  }",
    "begin_line": 86,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CanCastToVisitor.castCastToHelper#95",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/CanCastToVisitor.java",
    "class_name": "com.google.javascript.rhino.jstype.CanCastToVisitor",
    "signature": "com.google.javascript.rhino.jstype.CanCastToVisitor.castCastToHelper(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "Boolean castCastToHelper(JSType thisType, JSType thatType) {\n    if (thatType.isUnknownType()\n        || thatType.isAllType()\n        || thatType.isNoObjectType() // TODO(johnlenz): restrict to objects\n        || thatType.isNoType()) {\n      return true;\n    } else if (thisType.isRecordType() || thatType.isRecordType()) {\n      return true;  // TODO(johnlenz): are there any misuses we can catch?\n    } else if (isInterface(thisType) || isInterface(thatType)) {\n      return true;  // TODO(johnlenz): are there any misuses we can catch?\n    } else if (thatType.isEnumElementType()) {\n      return thisType.visit(this,\n          thatType.toMaybeEnumElementType().getPrimitiveType());\n    } else if (thatType.isUnionType()) {\n      return canCastToUnion(thisType, thatType.toMaybeUnionType());\n    } else if (thatType.isFunctionType()) {\n      return canCastToFunction(thisType, thatType.toMaybeFunctionType());\n    } else if (thatType.isParameterizedType()) {\n      // TODO(johnlenz): once the templated type work is finished,\n      // restrict the type parameters.\n      return thisType.visit(this,\n          thatType.toMaybeParameterizedType().getReferencedTypeInternal());\n    }\n\n    return thisType.isSubtype(thatType) || thatType.isSubtype(thisType);\n  }",
    "begin_line": 95,
    "end_line": 120,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CanCastToVisitor.caseValueType#123",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/CanCastToVisitor.java",
    "class_name": "com.google.javascript.rhino.jstype.CanCastToVisitor",
    "signature": "com.google.javascript.rhino.jstype.CanCastToVisitor.caseValueType(com.google.javascript.rhino.jstype.ValueType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public Boolean caseValueType(ValueType thisType, JSType thatType) {\n    return castCastToHelper(thisType, thatType);\n  }",
    "begin_line": 123,
    "end_line": 125,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CanCastToVisitor.caseObjectType#128",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/CanCastToVisitor.java",
    "class_name": "com.google.javascript.rhino.jstype.CanCastToVisitor",
    "signature": "com.google.javascript.rhino.jstype.CanCastToVisitor.caseObjectType(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public Boolean caseObjectType(ObjectType thisType, JSType thatType) {\n    return castCastToHelper(thisType, thatType);\n  }",
    "begin_line": 128,
    "end_line": 130,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CanCastToVisitor.caseFunctionType#133",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/CanCastToVisitor.java",
    "class_name": "com.google.javascript.rhino.jstype.CanCastToVisitor",
    "signature": "com.google.javascript.rhino.jstype.CanCastToVisitor.caseFunctionType(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public Boolean caseFunctionType(FunctionType thisType, JSType thatType) {\n    return castCastToHelper(thisType, thatType);\n  }",
    "begin_line": 133,
    "end_line": 135,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CanCastToVisitor.caseUnionType#138",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/CanCastToVisitor.java",
    "class_name": "com.google.javascript.rhino.jstype.CanCastToVisitor",
    "signature": "com.google.javascript.rhino.jstype.CanCastToVisitor.caseUnionType(com.google.javascript.rhino.jstype.UnionType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public Boolean caseUnionType(UnionType thisType, JSType thatType) {\n    boolean visited \u003d false;\n    for (JSType type : thisType.getAlternates()) {\n      if (type.isVoidType() || type.isNullType()) {\n        // Don\u0027t allow if the only match between the types is null or void,\n        // otherwise any nullable type would be castable to any other nullable\n        // type and we don\u0027t want that.\n      } else {\n        visited \u003d true;\n        if (type.visit(this, thatType)) {\n          return true;\n        }\n      }\n    }\n\n    // Special case the \"null|undefined\" union and allow it to be cast\n    // to any cast to any type containing allowing either null|undefined.\n    if (!visited) {\n      JSType NULL_TYPE \u003d thisType.getNativeType(JSTypeNative.NULL_TYPE);\n      JSType VOID_TYPE \u003d thisType.getNativeType(JSTypeNative.VOID_TYPE);\n      return NULL_TYPE.visit(this, thatType) || VOID_TYPE.visit(this, thatType);\n    }\n\n    return false;\n  }",
    "begin_line": 138,
    "end_line": 162,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CanCastToVisitor.caseParameterizedType#165",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/CanCastToVisitor.java",
    "class_name": "com.google.javascript.rhino.jstype.CanCastToVisitor",
    "signature": "com.google.javascript.rhino.jstype.CanCastToVisitor.caseParameterizedType(com.google.javascript.rhino.jstype.ParameterizedType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public Boolean caseParameterizedType(\n      ParameterizedType thisType, JSType thatType) {\n    // TODO(johnlenz): once the templated type work is finished,\n    // restrict the type parameters.\n    return thisType.getReferencedTypeInternal().visit(this, thatType);\n  }",
    "begin_line": 165,
    "end_line": 170,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CanCastToVisitor.caseTemplateType#173",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/CanCastToVisitor.java",
    "class_name": "com.google.javascript.rhino.jstype.CanCastToVisitor",
    "signature": "com.google.javascript.rhino.jstype.CanCastToVisitor.caseTemplateType(com.google.javascript.rhino.jstype.TemplateType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public Boolean caseTemplateType(TemplateType thisType, JSType thatType) {\n    return true;\n  }",
    "begin_line": 173,
    "end_line": 175,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CanCastToVisitor.caseEnumElementType#178",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/CanCastToVisitor.java",
    "class_name": "com.google.javascript.rhino.jstype.CanCastToVisitor",
    "signature": "com.google.javascript.rhino.jstype.CanCastToVisitor.caseEnumElementType(com.google.javascript.rhino.jstype.EnumElementType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public Boolean caseEnumElementType(\n      EnumElementType typeType, JSType thatType) {\n    return typeType.getPrimitiveType().visit(this, thatType);\n  }",
    "begin_line": 178,
    "end_line": 181,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ErrorFunctionType.ErrorFunctionType#50",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ErrorFunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
    "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.ErrorFunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String)",
    "snippet": " ErrorFunctionType(JSTypeRegistry registry, String name) {\n    super(\n        registry, name, null,\n        registry.createArrowType(\n            registry.createOptionalParameters(\n                registry.getNativeType(ALL_TYPE),\n                registry.getNativeType(ALL_TYPE),\n                registry.getNativeType(ALL_TYPE)),\n            null),\n        null, null, true, true);\n\n    // NOTE(nicksantos): Errors have the weird behavior in that they can\n    // be called as functions, and they will return instances of themselves.\n    // Error(\u0027x\u0027) instanceof Error \u003d\u003e true\n    //\n    // In user-defined types, we would deal with this case by creating\n    // a NamedType with the name \"Error\" and then resolve it later.\n    //\n    // For native types, we don\u0027t really want the native types to\n    // depend on type-resolution. So we just set the return type manually\n    // at the end of construction.\n    //\n    // There\u0027s similar logic in JSTypeRegistry for Array and RegExp.\n    getInternalArrowType().returnType \u003d getInstanceType();\n  }",
    "begin_line": 50,
    "end_line": 74,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionBuilder.FunctionBuilder#65",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.FunctionBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": "public FunctionBuilder(JSTypeRegistry registry) {\n    this.registry \u003d registry;\n  }",
    "begin_line": 65,
    "end_line": 67,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionBuilder.withName#70",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withName(java.lang.String)",
    "snippet": "public FunctionBuilder withName(String name) {\n    this.name \u003d name;\n    return this;\n  }",
    "begin_line": 70,
    "end_line": 73,
    "comment": "/** \n * Set the name of the function type. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionBuilder.withSourceNode#76",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withSourceNode(com.google.javascript.rhino.Node)",
    "snippet": "public FunctionBuilder withSourceNode(Node sourceNode) {\n    this.sourceNode \u003d sourceNode;\n    return this;\n  }",
    "begin_line": 76,
    "end_line": 79,
    "comment": "/** \n * Set the source node of the function type. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionBuilder.withParams#82",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withParams(com.google.javascript.rhino.jstype.FunctionParamBuilder)",
    "snippet": "public FunctionBuilder withParams(FunctionParamBuilder params) {\n    this.parametersNode \u003d params.build();\n    return this;\n  }",
    "begin_line": 82,
    "end_line": 85,
    "comment": "/** \n * Set the parameters of the function type from a FunctionParamBuilder. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionBuilder.withParamsNode#90",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withParamsNode(com.google.javascript.rhino.Node)",
    "snippet": "public FunctionBuilder withParamsNode(Node parametersNode) {\n    this.parametersNode \u003d parametersNode;\n    return this;\n  }",
    "begin_line": 90,
    "end_line": 93,
    "comment": "/** \n * Set the parameters of the function type with a specially-formatted node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionBuilder.withReturnType#96",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withReturnType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public FunctionBuilder withReturnType(JSType returnType) {\n    this.returnType \u003d returnType;\n    return this;\n  }",
    "begin_line": 96,
    "end_line": 99,
    "comment": "/** \n * Set the return type. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionBuilder.withReturnType#102",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withReturnType(com.google.javascript.rhino.jstype.JSType, boolean)",
    "snippet": "public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {\n    this.returnType \u003d returnType;\n    this.inferredReturnType \u003d inferred;\n    return this;\n  }",
    "begin_line": 102,
    "end_line": 106,
    "comment": "/** \n * Set the return type and whether it\u0027s inferred. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionBuilder.withInferredReturnType#109",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withInferredReturnType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public FunctionBuilder withInferredReturnType(JSType returnType) {\n    this.returnType \u003d returnType;\n    this.inferredReturnType \u003d true;\n    return this;\n  }",
    "begin_line": 109,
    "end_line": 113,
    "comment": "/** \n * Sets an inferred return type. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionBuilder.withTypeOfThis#116",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withTypeOfThis(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public FunctionBuilder withTypeOfThis(JSType typeOfThis) {\n    this.typeOfThis \u003d typeOfThis;\n    return this;\n  }",
    "begin_line": 116,
    "end_line": 119,
    "comment": "/** \n * Set the \"this\" type. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionBuilder.withTemplateKeys#122",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withTemplateKeys(ImmutableList\u003cString\u003e)",
    "snippet": "public FunctionBuilder withTemplateKeys(\n      ImmutableList\u003cString\u003e templateKeys) {\n    this.templateKeys \u003d templateKeys;\n    return this;\n  }",
    "begin_line": 122,
    "end_line": 126,
    "comment": "/** \n * Set the template name. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionBuilder.forConstructor#129",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.forConstructor()",
    "snippet": "public FunctionBuilder forConstructor() {\n    this.isConstructor \u003d true;\n    return this;\n  }",
    "begin_line": 129,
    "end_line": 132,
    "comment": "/** \n * Make this a constructor. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionBuilder.setIsConstructor#135",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.setIsConstructor(boolean)",
    "snippet": "public FunctionBuilder setIsConstructor(boolean isConstructor) {\n    this.isConstructor \u003d isConstructor;\n    return this;\n  }",
    "begin_line": 135,
    "end_line": 138,
    "comment": "/** \n * Set whether this is a constructor. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionBuilder.forNativeType#141",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.forNativeType()",
    "snippet": "FunctionBuilder forNativeType() {\n    this.isNativeType \u003d true;\n    return this;\n  }",
    "begin_line": 141,
    "end_line": 144,
    "comment": "/** \n * Make this a native type. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionBuilder.copyFromOtherFunction#147",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.copyFromOtherFunction(com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "public FunctionBuilder copyFromOtherFunction(FunctionType otherType) {\n    this.name \u003d otherType.getReferenceName();\n    this.sourceNode \u003d otherType.getSource();\n    this.parametersNode \u003d otherType.getParametersNode();\n    this.returnType \u003d otherType.getReturnType();\n    this.typeOfThis \u003d otherType.getTypeOfThis();\n    this.templateKeys \u003d otherType.getTemplateKeys();\n    this.isConstructor \u003d otherType.isConstructor();\n    this.isNativeType \u003d otherType.isNativeObjectType();\n    return this;\n  }",
    "begin_line": 147,
    "end_line": 157,
    "comment": "/** \n * Copies all the information from another function type. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionBuilder.build#160",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.build()",
    "snippet": "public FunctionType build() {\n    return new FunctionType(registry, name, sourceNode,\n        new ArrowType(registry, parametersNode, returnType, inferredReturnType),\n        typeOfThis, templateKeys, isConstructor, isNativeType);\n  }",
    "begin_line": 160,
    "end_line": 164,
    "comment": "/** \n * Construct a new function type. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionParamBuilder.FunctionParamBuilder#54",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.FunctionParamBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": "public FunctionParamBuilder(JSTypeRegistry registry) {\n    this.registry \u003d registry;\n  }",
    "begin_line": 54,
    "end_line": 56,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionParamBuilder.addRequiredParams#62",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addRequiredParams(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public boolean addRequiredParams(JSType ...types) {\n    if (hasOptionalOrVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(type);\n    }\n    return true;\n  }",
    "begin_line": 62,
    "end_line": 71,
    "comment": "/** \n * Add parameters of the given type to the end of the param list.\n * @return False if this is called after optional params are added.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionParamBuilder.addOptionalParams#79",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addOptionalParams(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public boolean addOptionalParams(JSType ...types) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(registry.createOptionalType(type)).setOptionalArg(true);\n    }\n    return true;\n  }",
    "begin_line": 79,
    "end_line": 88,
    "comment": "/** \n * Add optional parameters of the given type to the end of the param list.\n * @param types Types for each optional parameter. The builder will make themundefine-able.\n * @return False if this is called after var args are added.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionParamBuilder.addVarArgs#94",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addVarArgs(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public boolean addVarArgs(JSType type) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    // There are two types of variable argument functions:\n    // 1) Programmer-defined var args\n    // 2) Native bottom types that can accept any argument.\n    // For the first one, \"undefined\" is a valid value for all arguments.\n    // For the second, we do not want to cast it up to undefined.\n    if (!type.isEmptyType()) {\n      type \u003d registry.createOptionalType(type);\n    }\n    newParameter(type).setVarArgs(true);\n    return true;\n  }",
    "begin_line": 94,
    "end_line": 109,
    "comment": "/** \n * Add variable arguments to the end of the parameter list.\n * @return False if this is called after var args are added.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionParamBuilder.newParameterFromNode#114",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.newParameterFromNode(com.google.javascript.rhino.Node)",
    "snippet": "public Node newParameterFromNode(Node n) {\n    Node newParam \u003d newParameter(n.getJSType());\n    newParam.setVarArgs(n.isVarArgs());\n    newParam.setOptionalArg(n.isOptionalArg());\n    return newParam;\n  }",
    "begin_line": 114,
    "end_line": 119,
    "comment": "/** \n * Copies the parameter specification from the given node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionParamBuilder.newOptionalParameterFromNode#125",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.newOptionalParameterFromNode(com.google.javascript.rhino.Node)",
    "snippet": "public Node newOptionalParameterFromNode(Node n) {\n    Node newParam \u003d newParameterFromNode(n);\n    if (!newParam.isVarArgs() \u0026\u0026 !newParam.isOptionalArg()) {\n      newParam.setOptionalArg(true);\n    }\n    return newParam;\n  }",
    "begin_line": 125,
    "end_line": 131,
    "comment": "/** \n * Copies the parameter specification from the given node, but makes sure it\u0027s optional.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionParamBuilder.newParameter#134",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.newParameter(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private Node newParameter(JSType type) {\n    Node paramNode \u003d Node.newString(Token.NAME, \"\");\n    paramNode.setJSType(type);\n    root.addChildToBack(paramNode);\n    return paramNode;\n  }",
    "begin_line": 134,
    "end_line": 139,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionParamBuilder.build#141",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.build()",
    "snippet": "public Node build() {\n    return root;\n  }",
    "begin_line": 141,
    "end_line": 143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionParamBuilder.hasOptionalOrVarArgs#145",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasOptionalOrVarArgs()",
    "snippet": "private boolean hasOptionalOrVarArgs() {\n    Node lastChild \u003d root.getLastChild();\n    return lastChild !\u003d null \u0026\u0026\n        (lastChild.isOptionalArg() || lastChild.isVarArgs());\n  }",
    "begin_line": 145,
    "end_line": 149,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionParamBuilder.hasVarArgs#151",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
    "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasVarArgs()",
    "snippet": "public boolean hasVarArgs() {\n    Node lastChild \u003d root.getLastChild();\n    return lastChild !\u003d null \u0026\u0026 lastChild.isVarArgs();\n  }",
    "begin_line": 151,
    "end_line": 154,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.FunctionType#134",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.FunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.ArrowType, com.google.javascript.rhino.jstype.JSType, ImmutableList\u003cString\u003e, boolean, boolean)",
    "snippet": " FunctionType(JSTypeRegistry registry, String name, Node source,\n               ArrowType arrowType, JSType typeOfThis,\n               ImmutableList\u003cString\u003e templateKeys,\n               boolean isConstructor, boolean nativeType) {\n    super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType, templateKeys, null);\n    setPrettyPrint(true);\n\n    Preconditions.checkArgument(source \u003d\u003d null ||\n        Token.FUNCTION \u003d\u003d source.getType());\n    Preconditions.checkNotNull(arrowType);\n    this.source \u003d source;\n    if (isConstructor) {\n      this.kind \u003d Kind.CONSTRUCTOR;\n      this.propAccess \u003d PropAccess.ANY;\n      this.typeOfThis \u003d typeOfThis !\u003d null ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType, null);\n    } else {\n      this.kind \u003d Kind.ORDINARY;\n      this.typeOfThis \u003d typeOfThis !\u003d null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n    }\n    this.call \u003d arrowType;\n  }",
    "begin_line": 134,
    "end_line": 159,
    "comment": "/** \n * Creates an instance for a function that might be a constructor. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.FunctionType#162",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.FunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.Node)",
    "snippet": "private FunctionType(JSTypeRegistry registry, String name, Node source) {\n    super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE));\n    setPrettyPrint(true);\n\n    Preconditions.checkArgument(source \u003d\u003d null ||\n        Token.FUNCTION \u003d\u003d source.getType());\n    Preconditions.checkArgument(name !\u003d null);\n    this.source \u003d source;\n    this.call \u003d new ArrowType(registry, new Node(Token.PARAM_LIST), null);\n    this.kind \u003d Kind.INTERFACE;\n    this.typeOfThis \u003d new InstanceObjectType(registry, this);\n  }",
    "begin_line": 162,
    "end_line": 174,
    "comment": "/** \n * Creates an instance for a function that is an interface. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.forInterface#177",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.forInterface(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.Node)",
    "snippet": "static FunctionType forInterface(\n      JSTypeRegistry registry, String name, Node source) {\n    return new FunctionType(registry, name, source);\n  }",
    "begin_line": 177,
    "end_line": 180,
    "comment": "/** \n * Creates an instance for a function that is an interface. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.isInstanceType#183",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.isInstanceType()",
    "snippet": "@Override\n  public boolean isInstanceType() {\n    // The universal constructor is its own instance, bizarrely. It overrides\n    // getConstructor() appropriately when it\u0027s declared.\n    return this \u003d\u003d registry.getNativeType(U2U_CONSTRUCTOR_TYPE);\n  }",
    "begin_line": 183,
    "end_line": 187,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.isConstructor#190",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.isConstructor()",
    "snippet": "@Override\n  public boolean isConstructor() {\n    return kind \u003d\u003d Kind.CONSTRUCTOR;\n  }",
    "begin_line": 190,
    "end_line": 192,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.isInterface#195",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.isInterface()",
    "snippet": "@Override\n  public boolean isInterface() {\n    return kind \u003d\u003d Kind.INTERFACE;\n  }",
    "begin_line": 195,
    "end_line": 197,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.isOrdinaryFunction#200",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.isOrdinaryFunction()",
    "snippet": "@Override\n  public boolean isOrdinaryFunction() {\n    return kind \u003d\u003d Kind.ORDINARY;\n  }",
    "begin_line": 200,
    "end_line": 202,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.makesStructs#209",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.makesStructs()",
    "snippet": "public boolean makesStructs() {\n    if (!isConstructor()) {\n      return false;\n    }\n    if (propAccess \u003d\u003d PropAccess.STRUCT) {\n      return true;\n    }\n    FunctionType superc \u003d getSuperClassConstructor();\n    if (superc !\u003d null \u0026\u0026 superc.makesStructs()) {\n      setStruct();\n      return true;\n    }\n    return false;\n  }",
    "begin_line": 209,
    "end_line": 222,
    "comment": "/** \n * When a class B inherits from A and A is annotated as a struct, then B automatically gets the annotation, even if B\u0027s constructor is not explicitly annotated.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.makesDicts#229",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.makesDicts()",
    "snippet": "public boolean makesDicts() {\n    if (!isConstructor()) {\n      return false;\n    }\n    if (propAccess \u003d\u003d PropAccess.DICT) {\n      return true;\n    }\n    FunctionType superc \u003d getSuperClassConstructor();\n    if (superc !\u003d null \u0026\u0026 superc.makesDicts()) {\n      setDict();\n      return true;\n    }\n    return false;\n  }",
    "begin_line": 229,
    "end_line": 242,
    "comment": "/** \n * When a class B inherits from A and A is annotated as a dict, then B automatically gets the annotation, even if B\u0027s constructor is not explicitly annotated.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.setStruct#244",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.setStruct()",
    "snippet": "public void setStruct() {\n    propAccess \u003d PropAccess.STRUCT;\n  }",
    "begin_line": 244,
    "end_line": 246,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.setDict#248",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.setDict()",
    "snippet": "public void setDict() {\n    propAccess \u003d PropAccess.DICT;\n  }",
    "begin_line": 248,
    "end_line": 250,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.toMaybeFunctionType#253",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.toMaybeFunctionType()",
    "snippet": "@Override\n  public FunctionType toMaybeFunctionType() {\n    return this;\n  }",
    "begin_line": 253,
    "end_line": 255,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.canBeCalled#258",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.canBeCalled()",
    "snippet": "@Override\n  public boolean canBeCalled() {\n    return true;\n  }",
    "begin_line": 258,
    "end_line": 260,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.hasImplementedInterfaces#262",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.hasImplementedInterfaces()",
    "snippet": "public boolean hasImplementedInterfaces() {\n    if (!implementedInterfaces.isEmpty()){\n      return true;\n    }\n    FunctionType superCtor \u003d isConstructor() ?\n        getSuperClassConstructor() : null;\n    if (superCtor !\u003d null) {\n      return superCtor.hasImplementedInterfaces();\n    }\n    return false;\n  }",
    "begin_line": 262,
    "end_line": 272,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getParameters#274",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getParameters()",
    "snippet": "public Iterable\u003cNode\u003e getParameters() {\n    Node n \u003d getParametersNode();\n    if (n !\u003d null) {\n      return n.children();\n    } else {\n      return Collections.emptySet();\n    }\n  }",
    "begin_line": 274,
    "end_line": 281,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getParametersNode#284",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getParametersNode()",
    "snippet": "public Node getParametersNode() {\n    return call.parameters;\n  }",
    "begin_line": 284,
    "end_line": 286,
    "comment": "/** \n * Gets an LP node that contains all params. May be null. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getMinArguments#289",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getMinArguments()",
    "snippet": "public int getMinArguments() {\n    // NOTE(nicksantos): There are some native functions that have optional\n    // parameters before required parameters. This algorithm finds the position\n    // of the last required parameter.\n    int i \u003d 0;\n    int min \u003d 0;\n    for (Node n : getParameters()) {\n      i++;\n      if (!n.isOptionalArg() \u0026\u0026 !n.isVarArgs()) {\n        min \u003d i;\n      }\n    }\n    return min;\n  }",
    "begin_line": 289,
    "end_line": 302,
    "comment": "/** \n * Gets the minimum number of arguments that this function requires. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getMaxArguments#308",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getMaxArguments()",
    "snippet": "public int getMaxArguments() {\n    Node params \u003d getParametersNode();\n    if (params !\u003d null) {\n      Node lastParam \u003d params.getLastChild();\n      if (lastParam \u003d\u003d null || !lastParam.isVarArgs()) {\n        return params.getChildCount();\n      }\n    }\n\n    return Integer.MAX_VALUE;\n  }",
    "begin_line": 308,
    "end_line": 318,
    "comment": "/** \n * Gets the maximum number of arguments that this function requires, or Integer.MAX_VALUE if this is a variable argument function.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getReturnType#320",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getReturnType()",
    "snippet": "public JSType getReturnType() {\n    return call.returnType;\n  }",
    "begin_line": 320,
    "end_line": 322,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.isReturnTypeInferred#324",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.isReturnTypeInferred()",
    "snippet": "public boolean isReturnTypeInferred() {\n    return call.returnTypeInferred;\n  }",
    "begin_line": 324,
    "end_line": 326,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getInternalArrowType#329",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getInternalArrowType()",
    "snippet": "ArrowType getInternalArrowType() {\n    return call;\n  }",
    "begin_line": 329,
    "end_line": 331,
    "comment": "/** \n * Gets the internal arrow type. For use by subclasses only. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getSlot#334",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getSlot(java.lang.String)",
    "snippet": "@Override\n  public Property getSlot(String name) {\n    if (\"prototype\".equals(name)) {\n      // Lazy initialization of the prototype field.\n      getPrototype();\n      return prototypeSlot;\n    } else {\n      return super.getSlot(name);\n    }\n  }",
    "begin_line": 334,
    "end_line": 342,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getOwnPropertyNames#349",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getOwnPropertyNames()",
    "snippet": "@Override\n  public Set\u003cString\u003e getOwnPropertyNames() {\n    if (prototypeSlot \u003d\u003d null) {\n      return super.getOwnPropertyNames();\n    } else {\n      Set\u003cString\u003e names \u003d Sets.newHashSet(\"prototype\");\n      names.addAll(super.getOwnPropertyNames());\n      return names;\n    }\n  }",
    "begin_line": 349,
    "end_line": 357,
    "comment": "/** \n * Includes the prototype iff someone has created it. We do not want to expose the prototype for ordinary functions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getPrototype#363",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getPrototype()",
    "snippet": "public ObjectType getPrototype() {\n    // lazy initialization of the prototype field\n    if (prototypeSlot \u003d\u003d null) {\n      String refName \u003d getReferenceName();\n      if (refName \u003d\u003d null) {\n        // Someone is trying to access the prototype of a structural function.\n        // We don\u0027t want to give real properties to this prototype, because\n        // then it would propagate to all structural functions.\n        setPrototypeNoCheck(\n           registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE),\n           null);\n      } else {\n        setPrototype(\n            new PrototypeObjectType(\n                registry,\n                getReferenceName() + \".prototype\",\n                registry.getNativeObjectType(OBJECT_TYPE),\n                isNativeObjectType(), null, null),\n            null);\n      }\n    }\n    return (ObjectType) prototypeSlot.getType();\n  }",
    "begin_line": 363,
    "end_line": 385,
    "comment": "/** \n * Gets the  {@code prototype} property of this function type. This isequivalent to  {@code (ObjectType) getPropertyType(\"prototype\")}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.setPrototypeBasedOn#392",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "public void setPrototypeBasedOn(ObjectType baseType) {\n    setPrototypeBasedOn(baseType, null);\n  }",
    "begin_line": 392,
    "end_line": 394,
    "comment": "/** \n * Sets the prototype, creating the prototype object from the given base type.\n * @param baseType The base type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.setPrototypeBasedOn#396",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.Node)",
    "snippet": "void setPrototypeBasedOn(ObjectType baseType, Node propertyNode) {\n    // This is a bit weird. We need to successfully handle these\n    // two cases:\n    // Foo.prototype \u003d new Bar();\n    // and\n    // Foo.prototype \u003d {baz: 3};\n    // In the first case, we do not want new properties to get\n    // added to Bar. In the second case, we do want new properties\n    // to get added to the type of the anonymous object.\n    //\n    // We handle this by breaking it into two cases:\n    //\n    // In the first case, we create a new PrototypeObjectType and set\n    // its implicit prototype to the type being assigned. This ensures\n    // that Bar will not get any properties of Foo.prototype, but properties\n    // later assigned to Bar will get inherited properly.\n    //\n    // In the second case, we just use the anonymous object as the prototype.\n    if (baseType.hasReferenceName() ||\n        isNativeObjectType() ||\n        baseType.isFunctionPrototypeType()) {\n      baseType \u003d new PrototypeObjectType(\n          registry, getReferenceName() + \".prototype\", baseType);\n    }\n    setPrototype(baseType, propertyNode);\n  }",
    "begin_line": 396,
    "end_line": 421,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.setPrototype#428",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototype(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.Node)",
    "snippet": "boolean setPrototype(ObjectType prototype, Node propertyNode) {\n    if (prototype \u003d\u003d null) {\n      return false;\n    }\n    // getInstanceType fails if the function is not a constructor\n    if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n      return false;\n    }\n    return setPrototypeNoCheck(prototype, propertyNode);\n  }",
    "begin_line": 428,
    "end_line": 437,
    "comment": "/** \n * Sets the prototype.\n * @param prototype the prototype. If this value is {@code null} it willsilently be discarded.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.setPrototypeNoCheck#440",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeNoCheck(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.Node)",
    "snippet": "private boolean setPrototypeNoCheck(ObjectType prototype, Node propertyNode) {\n    ObjectType oldPrototype \u003d prototypeSlot \u003d\u003d null\n        ? null : (ObjectType) prototypeSlot.getType();\n    boolean replacedPrototype \u003d oldPrototype !\u003d null;\n\n    this.prototypeSlot \u003d new Property(\"prototype\", prototype, true,\n        propertyNode \u003d\u003d null ? source : propertyNode);\n    prototype.setOwnerFunction(this);\n\n    if (oldPrototype !\u003d null) {\n      // Disassociating the old prototype makes this easier to debug--\n      // we don\u0027t have to worry about two prototypes running around.\n      oldPrototype.setOwnerFunction(null);\n    }\n\n    if (isConstructor() || isInterface()) {\n      FunctionType superClass \u003d getSuperClassConstructor();\n      if (superClass !\u003d null) {\n        superClass.addSubType(this);\n      }\n\n      if (isInterface()) {\n        for (ObjectType interfaceType : getExtendedInterfaces()) {\n          if (interfaceType.getConstructor() !\u003d null) {\n            interfaceType.getConstructor().addSubType(this);\n          }\n        }\n      }\n    }\n\n    if (replacedPrototype) {\n      clearCachedValues();\n    }\n\n    return true;\n  }",
    "begin_line": 440,
    "end_line": 475,
    "comment": "/** \n * Set the prototype without doing any sanity checks. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getAllImplementedInterfaces#482",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getAllImplementedInterfaces()",
    "snippet": "public Iterable\u003cObjectType\u003e getAllImplementedInterfaces() {\n    // Store them in a linked hash set, so that the compile job is\n    // deterministic.\n    Set\u003cObjectType\u003e interfaces \u003d Sets.newLinkedHashSet();\n\n    for (ObjectType type : getImplementedInterfaces()) {\n      addRelatedInterfaces(type, interfaces);\n    }\n    return interfaces;\n  }",
    "begin_line": 482,
    "end_line": 491,
    "comment": "/** \n * Returns all interfaces implemented by a class or its superclass and any superclasses for any of those interfaces. If this is called before all types are resolved, it may return an incomplete set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.addRelatedInterfaces#493",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.addRelatedInterfaces(com.google.javascript.rhino.jstype.ObjectType, java.util.Set\u003ccom.google.javascript.rhino.jstype.ObjectType\u003e)",
    "snippet": "private void addRelatedInterfaces(ObjectType instance, Set\u003cObjectType\u003e set) {\n    FunctionType constructor \u003d instance.getConstructor();\n    if (constructor !\u003d null) {\n      if (!constructor.isInterface()) {\n        return;\n      }\n\n      set.add(instance);\n\n      for (ObjectType interfaceType : instance.getCtorExtendedInterfaces()) {\n        addRelatedInterfaces(interfaceType, set);\n      }\n    }\n  }",
    "begin_line": 493,
    "end_line": 506,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getImplementedInterfaces#509",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getImplementedInterfaces()",
    "snippet": "public Iterable\u003cObjectType\u003e getImplementedInterfaces() {\n    FunctionType superCtor \u003d isConstructor() ?\n        getSuperClassConstructor() : null;\n    if (superCtor \u003d\u003d null) {\n      return implementedInterfaces;\n    } else {\n      return Iterables.concat(\n          implementedInterfaces, superCtor.getImplementedInterfaces());\n    }\n  }",
    "begin_line": 509,
    "end_line": 518,
    "comment": "/** \n * Returns interfaces implemented directly by a class or its superclass. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getOwnImplementedInterfaces#521",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getOwnImplementedInterfaces()",
    "snippet": "public Iterable\u003cObjectType\u003e getOwnImplementedInterfaces() {\n    return implementedInterfaces;\n  }",
    "begin_line": 521,
    "end_line": 523,
    "comment": "/** \n * Returns interfaces directly implemented by the class. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.setImplementedInterfaces#525",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.setImplementedInterfaces(java.util.List\u003ccom.google.javascript.rhino.jstype.ObjectType\u003e)",
    "snippet": "public void setImplementedInterfaces(List\u003cObjectType\u003e implementedInterfaces) {\n    if (isConstructor()) {\n      // Records this type for each implemented interface.\n      for (ObjectType type : implementedInterfaces) {\n        registry.registerTypeImplementingInterface(this, type);\n      }\n      this.implementedInterfaces \u003d ImmutableList.copyOf(implementedInterfaces);\n    } else {\n      throw new UnsupportedOperationException();\n    }\n  }",
    "begin_line": 525,
    "end_line": 535,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getAllExtendedInterfaces#542",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getAllExtendedInterfaces()",
    "snippet": "public Iterable\u003cObjectType\u003e getAllExtendedInterfaces() {\n    // Store them in a linked hash set, so that the compile job is\n    // deterministic.\n    Set\u003cObjectType\u003e extendedInterfaces \u003d Sets.newLinkedHashSet();\n\n    for (ObjectType interfaceType : getExtendedInterfaces()) {\n      addRelatedExtendedInterfaces(interfaceType, extendedInterfaces);\n    }\n    return extendedInterfaces;\n  }",
    "begin_line": 542,
    "end_line": 551,
    "comment": "/** \n * Returns all extended interfaces declared by an interfaces or its super- interfaces. If this is called before all types are resolved, it may return an incomplete set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.addRelatedExtendedInterfaces#553",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.addRelatedExtendedInterfaces(com.google.javascript.rhino.jstype.ObjectType, java.util.Set\u003ccom.google.javascript.rhino.jstype.ObjectType\u003e)",
    "snippet": "private void addRelatedExtendedInterfaces(ObjectType instance,\n      Set\u003cObjectType\u003e set) {\n    FunctionType constructor \u003d instance.getConstructor();\n    if (constructor !\u003d null) {\n      set.add(instance);\n\n      for (ObjectType interfaceType : constructor.getExtendedInterfaces()) {\n        addRelatedExtendedInterfaces(interfaceType, set);\n      }\n    }\n  }",
    "begin_line": 553,
    "end_line": 563,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getExtendedInterfaces#566",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getExtendedInterfaces()",
    "snippet": "public Iterable\u003cObjectType\u003e getExtendedInterfaces() {\n    return extendedInterfaces;\n  }",
    "begin_line": 566,
    "end_line": 568,
    "comment": "/** \n * Returns interfaces directly extended by an interface \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getExtendedInterfacesCount#571",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getExtendedInterfacesCount()",
    "snippet": "public int getExtendedInterfacesCount() {\n    return extendedInterfaces.size();\n  }",
    "begin_line": 571,
    "end_line": 573,
    "comment": "/** \n * Returns the number of interfaces directly extended by an interface \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.setExtendedInterfaces#575",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.setExtendedInterfaces(java.util.List\u003ccom.google.javascript.rhino.jstype.ObjectType\u003e)",
    "snippet": "public void setExtendedInterfaces(List\u003cObjectType\u003e extendedInterfaces)\n    throws UnsupportedOperationException {\n    if (isInterface()) {\n      this.extendedInterfaces \u003d ImmutableList.copyOf(extendedInterfaces);\n    } else {\n      throw new UnsupportedOperationException();\n    }\n  }",
    "begin_line": 575,
    "end_line": 582,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getPropertyType#585",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getPropertyType(java.lang.String)",
    "snippet": "@Override\n  public JSType getPropertyType(String name) {\n    if (!hasOwnProperty(name)) {\n      // Define the \"call\", \"apply\", and \"bind\" functions lazily.\n      boolean isCall \u003d \"call\".equals(name);\n      boolean isBind \u003d \"bind\".equals(name);\n      if (isCall || isBind) {\n        defineDeclaredProperty(name, getCallOrBindSignature(isCall), source);\n      } else if (\"apply\".equals(name)) {\n        // Define the \"apply\" function lazily.\n        FunctionParamBuilder builder \u003d new FunctionParamBuilder(registry);\n\n        // ECMA-262 says that apply\u0027s second argument must be an Array\n        // or an arguments object. We don\u0027t model the arguments object,\n        // so let\u0027s just be forgiving for now.\n        // TODO(nicksantos): Model the Arguments object.\n        builder.addOptionalParams(\n            registry.createNullableType(getTypeOfThis()),\n            registry.createNullableType(\n                registry.getNativeType(JSTypeNative.OBJECT_TYPE)));\n\n        defineDeclaredProperty(name,\n            new FunctionBuilder(registry)\n            .withParams(builder)\n            .withReturnType(getReturnType())\n            .withTemplateKeys(getTemplateKeys())\n            .build(),\n            source);\n      }\n    }\n\n    return super.getPropertyType(name);\n  }",
    "begin_line": 585,
    "end_line": 616,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getBindReturnType#625",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getBindReturnType(int)",
    "snippet": "public FunctionType getBindReturnType(int argsToBind) {\n    FunctionBuilder builder \u003d new FunctionBuilder(registry)\n        .withReturnType(getReturnType())\n        .withTemplateKeys(getTemplateKeys());\n    if (argsToBind \u003e\u003d 0) {\n      Node origParams \u003d getParametersNode();\n      if (origParams !\u003d null) {\n        Node params \u003d origParams.cloneTree();\n        for (int i \u003d 1; i \u003c argsToBind \u0026\u0026 params.getFirstChild() !\u003d null; i++) {\n          if (params.getFirstChild().isVarArgs()) {\n            break;\n          }\n          params.removeFirstChild();\n        }\n        builder.withParamsNode(params);\n      }\n    }\n    return builder.build();\n  }",
    "begin_line": 625,
    "end_line": 643,
    "comment": "/** \n * Get the return value of calling \"bind\" on this function with the specified number of arguments. If -1 is passed, then we will return a result that accepts any parameters.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getCallOrBindSignature#650",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getCallOrBindSignature(boolean)",
    "snippet": "private FunctionType getCallOrBindSignature(boolean isCall) {\n    boolean isBind \u003d !isCall;\n    FunctionBuilder builder \u003d new FunctionBuilder(registry)\n        .withReturnType(isCall ? getReturnType() : getBindReturnType(-1))\n        .withTemplateKeys(getTemplateKeys());\n\n    Node origParams \u003d getParametersNode();\n    if (origParams !\u003d null) {\n      Node params \u003d origParams.cloneTree();\n\n      Node thisTypeNode \u003d Node.newString(Token.NAME, \"thisType\");\n      thisTypeNode.setJSType(\n          registry.createOptionalNullableType(getTypeOfThis()));\n      params.addChildToFront(thisTypeNode);\n\n      if (isBind) {\n        // The arguments of bind() are unique in that they are all\n        // optional but not undefinable.\n        for (Node current \u003d thisTypeNode.getNext();\n             current !\u003d null; current \u003d current.getNext()) {\n          current.setOptionalArg(true);\n        }\n      } else if (isCall) {\n        // The first argument of call() is optional iff all the arguments\n        // are optional. It\u0027s sufficient to check the first argument.\n        Node firstArg \u003d thisTypeNode.getNext();\n        if (firstArg \u003d\u003d null\n            || firstArg.isOptionalArg()\n            || firstArg.isVarArgs()) {\n          thisTypeNode.setOptionalArg(true);\n        }\n      }\n\n      builder.withParamsNode(params);\n    }\n\n    return builder.build();\n  }",
    "begin_line": 650,
    "end_line": 687,
    "comment": "/** \n * Notice that \"call\" and \"bind\" have the same argument signature, except that all the arguments of \"bind\" (except the first) are optional.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.defineProperty#690",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  boolean defineProperty(String name, JSType type,\n      boolean inferred, Node propertyNode) {\n    if (\"prototype\".equals(name)) {\n      ObjectType objType \u003d type.toObjectType();\n      if (objType !\u003d null) {\n        if (prototypeSlot !\u003d null \u0026\u0026\n            objType.isEquivalentTo(prototypeSlot.getType())) {\n          return true;\n        }\n        setPrototypeBasedOn(objType, propertyNode);\n        return true;\n      } else {\n        return false;\n      }\n    }\n    return super.defineProperty(name, type, inferred, propertyNode);\n  }",
    "begin_line": 690,
    "end_line": 706,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.supAndInfHelper#716",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.supAndInfHelper(com.google.javascript.rhino.jstype.FunctionType, boolean)",
    "snippet": "FunctionType supAndInfHelper(FunctionType that, boolean leastSuper) {\n    // NOTE(nicksantos): When we remove the unknown type, the function types\n    // form a lattice with the universal constructor at the top of the lattice,\n    // and the LEAST_FUNCTION_TYPE type at the bottom of the lattice.\n    //\n    // When we introduce the unknown type, it\u0027s much more difficult to make\n    // heads or tails of the partial ordering of types, because there\u0027s no\n    // clear hierarchy between the different components (parameter types and\n    // return types) in the ArrowType.\n    //\n    // Rather than make the situation more complicated by introducing new\n    // types (like unions of functions), we just fallback on the simpler\n    // approach of getting things right at the top and the bottom of the\n    // lattice.\n    //\n    // If there are unknown parameters or return types making things\n    // ambiguous, then sup(A, B) is always the top function type, and\n    // inf(A, B) is always the bottom function type.\n    Preconditions.checkNotNull(that);\n\n    if (isEquivalentTo(that)) {\n      return this;\n    }\n\n    // If these are ordinary functions, then merge them.\n    // Don\u0027t do this if any of the params/return\n    // values are unknown, because then there will be cycles in\n    // their local lattice and they will merge in weird ways.\n    if (isOrdinaryFunction() \u0026\u0026 that.isOrdinaryFunction() \u0026\u0026\n        !this.call.hasUnknownParamsOrReturn() \u0026\u0026\n        !that.call.hasUnknownParamsOrReturn()) {\n\n      // Check for the degenerate case, but double check\n      // that there\u0027s not a cycle.\n      boolean isSubtypeOfThat \u003d isSubtype(that);\n      boolean isSubtypeOfThis \u003d that.isSubtype(this);\n      if (isSubtypeOfThat \u0026\u0026 !isSubtypeOfThis) {\n        return leastSuper ? that : this;\n      } else if (isSubtypeOfThis \u0026\u0026 !isSubtypeOfThat) {\n        return leastSuper ? this : that;\n      }\n\n      // Merge the two functions component-wise.\n      FunctionType merged \u003d tryMergeFunctionPiecewise(that, leastSuper);\n      if (merged !\u003d null) {\n        return merged;\n      }\n    }\n\n    // The function instance type is a special case\n    // that lives above the rest of the lattice.\n    JSType functionInstance \u003d registry.getNativeType(\n        JSTypeNative.FUNCTION_INSTANCE_TYPE);\n    if (functionInstance.isEquivalentTo(that)) {\n      return leastSuper ? that : this;\n    } else if (functionInstance.isEquivalentTo(this)) {\n      return leastSuper ? this : that;\n    }\n\n    // In theory, we should be using the GREATEST_FUNCTION_TYPE as the\n    // greatest function. In practice, we don\u0027t because it\u0027s way too\n    // broad. The greatest function takes var_args None parameters, which\n    // means that all parameters register a type warning.\n    //\n    // Instead, we use the U2U ctor type, which has unknown type args.\n    FunctionType greatestFn \u003d\n        registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);\n    FunctionType leastFn \u003d\n        registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);\n    return leastSuper ? greatestFn : leastFn;\n  }",
    "begin_line": 716,
    "end_line": 786,
    "comment": "/** \n * Computes the supremum or infimum of two functions. Because sup() and inf() share a lot of logic for functions, we use a single helper.\n * @param leastSuper If true, compute the supremum of {@code this} with{@code that}. Otherwise, compute the infimum.\n * @return The least supertype or greatest subtype.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.tryMergeFunctionPiecewise#792",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.tryMergeFunctionPiecewise(com.google.javascript.rhino.jstype.FunctionType, boolean)",
    "snippet": "private FunctionType tryMergeFunctionPiecewise(\n      FunctionType other, boolean leastSuper) {\n    Node newParamsNode \u003d null;\n    if (call.hasEqualParameters(other.call, EquivalenceMethod.IDENTITY)) {\n      newParamsNode \u003d call.parameters;\n    } else {\n      // If the parameters are not equal, don\u0027t try to merge them.\n      // Someday, we should try to merge the individual params.\n      return null;\n    }\n\n    JSType newReturnType \u003d leastSuper ?\n        call.returnType.getLeastSupertype(other.call.returnType) :\n        call.returnType.getGreatestSubtype(other.call.returnType);\n\n    JSType newTypeOfThis \u003d null;\n    if (isEquivalent(typeOfThis, other.typeOfThis)) {\n      newTypeOfThis \u003d typeOfThis;\n    } else {\n      JSType maybeNewTypeOfThis \u003d leastSuper ?\n          typeOfThis.getLeastSupertype(other.typeOfThis) :\n          typeOfThis.getGreatestSubtype(other.typeOfThis);\n      newTypeOfThis \u003d maybeNewTypeOfThis;\n    }\n\n    boolean newReturnTypeInferred \u003d\n        call.returnTypeInferred || other.call.returnTypeInferred;\n\n    return new FunctionType(\n        registry, null, null,\n        new ArrowType(\n            registry, newParamsNode, newReturnType, newReturnTypeInferred),\n        newTypeOfThis, null, false, false);\n  }",
    "begin_line": 792,
    "end_line": 825,
    "comment": "/** \n * Try to get the sup/inf of two functions by looking at the piecewise components.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getSuperClassConstructor#831",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getSuperClassConstructor()",
    "snippet": "public FunctionType getSuperClassConstructor() {\n    Preconditions.checkArgument(isConstructor() || isInterface());\n    ObjectType maybeSuperInstanceType \u003d getPrototype().getImplicitPrototype();\n    if (maybeSuperInstanceType \u003d\u003d null) {\n      return null;\n    }\n    return maybeSuperInstanceType.getConstructor();\n  }",
    "begin_line": 831,
    "end_line": 838,
    "comment": "/** \n * Given a constructor or an interface type, get its superclass constructor or  {@code null} if none exists.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getTopDefiningInterface#844",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(com.google.javascript.rhino.jstype.ObjectType, java.lang.String)",
    "snippet": "public static ObjectType getTopDefiningInterface(ObjectType type,\n      String propertyName) {\n    ObjectType foundType \u003d null;\n    if (type.hasProperty(propertyName)) {\n      foundType \u003d type;\n    }\n    for (ObjectType interfaceType : type.getCtorExtendedInterfaces()) {\n      if (interfaceType.hasProperty(propertyName)) {\n        foundType \u003d getTopDefiningInterface(interfaceType, propertyName);\n      }\n    }\n    return foundType;\n  }",
    "begin_line": 844,
    "end_line": 856,
    "comment": "/** \n * Given an interface and a property, finds the top-most super interface that has the property defined (including this interface).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getTopMostDefiningType#863",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getTopMostDefiningType(java.lang.String)",
    "snippet": "public ObjectType getTopMostDefiningType(String propertyName) {\n    Preconditions.checkState(isConstructor() || isInterface());\n    Preconditions.checkArgument(getInstanceType().hasProperty(propertyName));\n    FunctionType ctor \u003d this;\n\n    if (isInterface()) {\n      return getTopDefiningInterface(getInstanceType(), propertyName);\n    }\n\n    ObjectType topInstanceType \u003d null;\n    do {\n      topInstanceType \u003d ctor.getInstanceType();\n      ctor \u003d ctor.getSuperClassConstructor();\n    } while (ctor !\u003d null\n        \u0026\u0026 ctor.getPrototype().hasProperty(propertyName));\n\n    return topInstanceType;\n  }",
    "begin_line": 863,
    "end_line": 880,
    "comment": "/** \n * Given a constructor or an interface type and a property, finds the top-most superclass that has the property defined (including this constructor).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.checkFunctionEquivalenceHelper#886",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.checkFunctionEquivalenceHelper(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.EquivalenceMethod)",
    "snippet": "boolean checkFunctionEquivalenceHelper(\n      FunctionType that, EquivalenceMethod eqMethod) {\n    if (isConstructor()) {\n      if (that.isConstructor()) {\n        return this \u003d\u003d that;\n      }\n      return false;\n    }\n    if (isInterface()) {\n      if (that.isInterface()) {\n        return getReferenceName().equals(that.getReferenceName());\n      }\n      return false;\n    }\n    if (that.isInterface()) {\n      return false;\n    }\n\n    return typeOfThis.checkEquivalenceHelper(that.typeOfThis, eqMethod) \u0026\u0026\n        call.checkArrowEquivalenceHelper(that.call, eqMethod);\n  }",
    "begin_line": 886,
    "end_line": 906,
    "comment": "/** \n * Two function types are equal if their signatures match. Since they don\u0027t have signatures, two interfaces are equal if their names match.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.hashCode#909",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.hashCode()",
    "snippet": "@Override\n  public int hashCode() {\n    return isInterface() ? getReferenceName().hashCode() : call.hashCode();\n  }",
    "begin_line": 909,
    "end_line": 911,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.hasEqualCallType#913",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.hasEqualCallType(com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "public boolean hasEqualCallType(FunctionType otherType) {\n    return this.call.checkArrowEquivalenceHelper(\n        otherType.call, EquivalenceMethod.IDENTITY);\n  }",
    "begin_line": 913,
    "end_line": 916,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.toStringHelper#925",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.toStringHelper(boolean)",
    "snippet": "@Override\n  String toStringHelper(boolean forAnnotations) {\n    if (!isPrettyPrint() ||\n        this \u003d\u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {\n      return \"Function\";\n    }\n\n    setPrettyPrint(false);\n\n    StringBuilder b \u003d new StringBuilder(32);\n    b.append(\"function (\");\n    int paramNum \u003d call.parameters.getChildCount();\n    boolean hasKnownTypeOfThis \u003d !(typeOfThis instanceof UnknownType);\n    if (hasKnownTypeOfThis) {\n      if (isConstructor()) {\n        b.append(\"new:\");\n      } else {\n        b.append(\"this:\");\n      }\n      b.append(typeOfThis.toStringHelper(forAnnotations));\n    }\n    if (paramNum \u003e 0) {\n      if (hasKnownTypeOfThis) {\n        b.append(\", \");\n      }\n      Node p \u003d call.parameters.getFirstChild();\n      appendArgString(b, p, forAnnotations);\n\n      p \u003d p.getNext();\n      while (p !\u003d null) {\n        b.append(\", \");\n        appendArgString(b, p, forAnnotations);\n        p \u003d p.getNext();\n      }\n    }\n    b.append(\"): \");\n    b.append(call.returnType.toStringHelper(forAnnotations));\n\n    setPrettyPrint(true);\n    return b.toString();\n  }",
    "begin_line": 925,
    "end_line": 964,
    "comment": "/** \n * Informally, a function is represented by {@code function (params): returnType} where the {@code params} is a commaseparated list of types, the first one being a special {@code this:T} if the function expects a known type for {@code this}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.appendArgString#966",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.appendArgString(java.lang.StringBuilder, com.google.javascript.rhino.Node, boolean)",
    "snippet": "private void appendArgString(\n      StringBuilder b, Node p, boolean forAnnotations) {\n    if (p.isVarArgs()) {\n      appendVarArgsString(b, p.getJSType(), forAnnotations);\n    } else if (p.isOptionalArg()) {\n      appendOptionalArgString(b, p.getJSType(), forAnnotations);\n    } else {\n      b.append(p.getJSType().toStringHelper(forAnnotations));\n    }\n  }",
    "begin_line": 966,
    "end_line": 975,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.appendVarArgsString#978",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.appendVarArgsString(java.lang.StringBuilder, com.google.javascript.rhino.jstype.JSType, boolean)",
    "snippet": "private void appendVarArgsString(StringBuilder builder, JSType paramType,\n      boolean forAnnotations) {\n    if (paramType.isUnionType()) {\n      // Remove the optionality from the var arg.\n      paramType \u003d paramType.toMaybeUnionType().getRestrictedUnion(\n          registry.getNativeType(JSTypeNative.VOID_TYPE));\n    }\n    builder.append(\"...[\").append(\n        paramType.toStringHelper(forAnnotations)).append(\"]\");\n  }",
    "begin_line": 978,
    "end_line": 987,
    "comment": "/** \n * Gets the string representation of a var args param. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.appendOptionalArgString#990",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.appendOptionalArgString(java.lang.StringBuilder, com.google.javascript.rhino.jstype.JSType, boolean)",
    "snippet": "private void appendOptionalArgString(\n      StringBuilder builder, JSType paramType, boolean forAnnotations) {\n    if (paramType.isUnionType()) {\n      // Remove the optionality from the var arg.\n      paramType \u003d paramType.toMaybeUnionType().getRestrictedUnion(\n          registry.getNativeType(JSTypeNative.VOID_TYPE));\n    }\n    builder.append(paramType.toStringHelper(forAnnotations)).append(\"\u003d\");\n  }",
    "begin_line": 990,
    "end_line": 998,
    "comment": "/** \n * Gets the string representation of an optional param. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.isSubtype#1006",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public boolean isSubtype(JSType that) {\n    if (JSType.isSubtypeHelper(this, that)) {\n      return true;\n    }\n\n    if (that.isFunctionType()) {\n      FunctionType other \u003d that.toMaybeFunctionType();\n      if (other.isInterface()) {\n        // Any function can be assigned to an interface function.\n        return true;\n      }\n      if (isInterface()) {\n        // An interface function cannot be assigned to anything.\n        return false;\n      }\n\n      // If functionA is a subtype of functionB, then their \"this\" types\n      // should be contravariant. However, this causes problems because\n      // of the way we enforce overrides. Because function(this:SubFoo)\n      // is not a subtype of function(this:Foo), our override check treats\n      // this as an error. Let\u0027s punt on all this for now.\n      // TODO(nicksantos): fix this.\n      boolean treatThisTypesAsCovariant \u003d\n        // An interface \u0027this\u0027-type is non-restrictive.\n        // In practical terms, if C implements I, and I has a method m,\n        // then any m doesn\u0027t necessarily have to C#m\u0027s \u0027this\u0027\n        // type doesn\u0027t need to match I.\n        (other.typeOfThis.toObjectType() !\u003d null \u0026\u0026\n             other.typeOfThis.toObjectType().getConstructor() !\u003d null \u0026\u0026\n             other.typeOfThis.toObjectType().getConstructor().isInterface()) ||\n\n        // If one of the \u0027this\u0027 types is covariant of the other,\n        // then we\u0027ll treat them as covariant (see comment above).\n        other.typeOfThis.isSubtype(this.typeOfThis) ||\n        this.typeOfThis.isSubtype(other.typeOfThis);\n      return treatThisTypesAsCovariant \u0026\u0026 this.call.isSubtype(other.call);\n    }\n\n    return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);\n  }",
    "begin_line": 1006,
    "end_line": 1045,
    "comment": "/** \n * A function is a subtype of another if their call methods are related via subtyping and  {@code this} is a subtype of {@code that} with regard tothe prototype chain.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.visit#1048",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.visit(com.google.javascript.rhino.jstype.Visitor\u003cT\u003e)",
    "snippet": "@Override\n  public \u003cT\u003e T visit(Visitor\u003cT\u003e visitor) {\n    return visitor.caseFunctionType(this);\n  }",
    "begin_line": 1048,
    "end_line": 1050,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.visit#1052",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.visit(com.google.javascript.rhino.jstype.RelationshipVisitor\u003cT\u003e, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override \u003cT\u003e T visit(RelationshipVisitor\u003cT\u003e visitor, JSType that) {\n    return visitor.caseFunctionType(this, that);\n  }",
    "begin_line": 1052,
    "end_line": 1054,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getInstanceType#1061",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getInstanceType()",
    "snippet": "public ObjectType getInstanceType() {\n    Preconditions.checkState(hasInstanceType());\n    return typeOfThis.toObjectType();\n  }",
    "begin_line": 1061,
    "end_line": 1064,
    "comment": "/** \n * Gets the type of instance of this function.\n * @throws IllegalStateException if this function is not a constructor(see  {@link #isConstructor()}).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.setInstanceType#1070",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.setInstanceType(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "void setInstanceType(ObjectType instanceType) {\n    typeOfThis \u003d instanceType;\n  }",
    "begin_line": 1070,
    "end_line": 1072,
    "comment": "/** \n * Sets the instance type. This should only be used for special native types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.hasInstanceType#1077",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.hasInstanceType()",
    "snippet": "public boolean hasInstanceType() {\n    return isConstructor() || isInterface();\n  }",
    "begin_line": 1077,
    "end_line": 1079,
    "comment": "/** \n * Returns whether this function type has an instance type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getTypeOfThis#1085",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getTypeOfThis()",
    "snippet": "@Override\n  public JSType getTypeOfThis() {\n    return typeOfThis.isEmptyType() ?\n        registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE) : typeOfThis;\n  }",
    "begin_line": 1085,
    "end_line": 1088,
    "comment": "/** \n * Gets the type of  {@code this} in this function.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getSource#1093",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getSource()",
    "snippet": "public Node getSource() {\n    return source;\n  }",
    "begin_line": 1093,
    "end_line": 1095,
    "comment": "/** \n * Gets the source node or null if this is an unknown function.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.setSource#1100",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.setSource(com.google.javascript.rhino.Node)",
    "snippet": "public void setSource(Node source) {\n    if (prototypeSlot !\u003d null) {\n      // NOTE(bashir): On one hand when source is null we want to drop any\n      // references to old nodes retained in prototypeSlot. On the other hand\n      // we cannot simply drop prototypeSlot, so we retain all information\n      // except the propertyNode for which we use an approximation! These\n      // details mostly matter in hot-swap passes.\n      if (source \u003d\u003d null || prototypeSlot.getNode() \u003d\u003d null) {\n        prototypeSlot \u003d new Property(prototypeSlot.getName(),\n            prototypeSlot.getType(), prototypeSlot.isTypeInferred(), source);\n      }\n    }\n    this.source \u003d source;\n  }",
    "begin_line": 1100,
    "end_line": 1113,
    "comment": "/** \n * Sets the source node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.addSubType#1116",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.addSubType(com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "private void addSubType(FunctionType subType) {\n    if (subTypes \u003d\u003d null) {\n      subTypes \u003d Lists.newArrayList();\n    }\n    subTypes.add(subType);\n  }",
    "begin_line": 1116,
    "end_line": 1121,
    "comment": "/** \n * Adds a type to the list of subtypes for this type. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.clearCachedValues#1124",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.clearCachedValues()",
    "snippet": "@Override\n  public void clearCachedValues() {\n    super.clearCachedValues();\n\n    if (subTypes !\u003d null) {\n      for (FunctionType subType : subTypes) {\n        subType.clearCachedValues();\n      }\n    }\n\n    if (!isNativeObjectType()) {\n      if (hasInstanceType()) {\n        getInstanceType().clearCachedValues();\n      }\n\n      if (prototypeSlot !\u003d null) {\n        ((ObjectType) prototypeSlot.getType()).clearCachedValues();\n      }\n    }\n  }",
    "begin_line": 1124,
    "end_line": 1142,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getSubTypes#1149",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getSubTypes()",
    "snippet": "public List\u003cFunctionType\u003e getSubTypes() {\n    return subTypes;\n  }",
    "begin_line": 1149,
    "end_line": 1151,
    "comment": "/** \n * Returns a list of types that are subtypes of this type. This is only valid for constructor functions, and may be null. This allows a downward traversal of the subtype graph.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.hasCachedValues#1154",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.hasCachedValues()",
    "snippet": "@Override\n  public boolean hasCachedValues() {\n    return prototypeSlot !\u003d null || super.hasCachedValues();\n  }",
    "begin_line": 1154,
    "end_line": 1156,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.resolveInternal#1159",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.resolveInternal(com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "@Override\n  JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    setResolvedTypeInternal(this);\n\n    call \u003d (ArrowType) safeResolve(call, t, scope);\n    if (prototypeSlot !\u003d null) {\n      prototypeSlot.setType(\n          safeResolve(prototypeSlot.getType(), t, scope));\n    }\n\n    // Warning about typeOfThis if it doesn\u0027t resolve to an ObjectType\n    // is handled further upstream.\n    //\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    //\n    // TODO(nicksantos): In ES3, the run-time coerces \"null\" to the global\n    // activation object. In ES5, it leaves it as null. Just punt on this\n    // issue for now by coercing out null. This is complicated by the\n    // fact that when most people write @this {Foo}, they really don\u0027t\n    // mean \"nullable Foo\". For certain tags (like @extends) we de-nullify\n    // the name for them.\n    JSType maybeTypeOfThis \u003d safeResolve(typeOfThis, t, scope);\n    if (maybeTypeOfThis !\u003d null) {\n      maybeTypeOfThis \u003d maybeTypeOfThis.restrictByNotNullOrUndefined();\n    }\n    if (maybeTypeOfThis instanceof ObjectType) {\n      typeOfThis \u003d maybeTypeOfThis;\n    }\n\n    boolean changed \u003d false;\n    ImmutableList.Builder\u003cObjectType\u003e resolvedInterfaces \u003d\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface \u003d (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |\u003d (resolvedIface !\u003d iface);\n    }\n    if (changed) {\n      implementedInterfaces \u003d resolvedInterfaces.build();\n    }\n\n    if (subTypes !\u003d null) {\n      for (int i \u003d 0; i \u003c subTypes.size(); i++) {\n        subTypes.set(\n            i, JSType.toMaybeFunctionType(subTypes.get(i).resolve(t, scope)));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "begin_line": 1159,
    "end_line": 1207,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.toDebugHashCodeString#1210",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.toDebugHashCodeString()",
    "snippet": "@Override\n  public String toDebugHashCodeString() {\n    if (this \u003d\u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {\n      return super.toDebugHashCodeString();\n    }\n\n    StringBuilder b \u003d new StringBuilder(32);\n    b.append(\"function (\");\n    int paramNum \u003d call.parameters.getChildCount();\n    boolean hasKnownTypeOfThis \u003d !typeOfThis.isUnknownType();\n    if (hasKnownTypeOfThis) {\n      b.append(\"this:\");\n      b.append(getDebugHashCodeStringOf(typeOfThis));\n    }\n    if (paramNum \u003e 0) {\n      if (hasKnownTypeOfThis) {\n        b.append(\", \");\n      }\n      Node p \u003d call.parameters.getFirstChild();\n      b.append(getDebugHashCodeStringOf(p.getJSType()));\n      p \u003d p.getNext();\n      while (p !\u003d null) {\n        b.append(\", \");\n        b.append(getDebugHashCodeStringOf(p.getJSType()));\n        p \u003d p.getNext();\n      }\n    }\n    b.append(\")\");\n    b.append(\": \");\n    b.append(getDebugHashCodeStringOf(call.returnType));\n    return b.toString();\n  }",
    "begin_line": 1210,
    "end_line": 1240,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.getDebugHashCodeStringOf#1242",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.getDebugHashCodeStringOf(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private String getDebugHashCodeStringOf(JSType type) {\n    if (type \u003d\u003d this) {\n      return \"me\";\n    } else {\n      return type.toDebugHashCodeString();\n    }\n  }",
    "begin_line": 1242,
    "end_line": 1248,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.cloneWithoutArrowType#1251",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.cloneWithoutArrowType()",
    "snippet": "public FunctionType cloneWithoutArrowType() {\n    FunctionType result \u003d new FunctionType(\n        registry, getReferenceName(), source,\n        registry.createArrowType(null, null), getInstanceType(),\n        null, true, false);\n    result.setPrototypeBasedOn(getInstanceType());\n    return result;\n  }",
    "begin_line": 1251,
    "end_line": 1258,
    "comment": "/** \n * Create a new constructor with the parameters and return type stripped. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FunctionType.hasAnyTemplateTypesInternal#1261",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/FunctionType.java",
    "class_name": "com.google.javascript.rhino.jstype.FunctionType",
    "signature": "com.google.javascript.rhino.jstype.FunctionType.hasAnyTemplateTypesInternal()",
    "snippet": "@Override\n  public boolean hasAnyTemplateTypesInternal() {\n    return !getTemplateKeys().isEmpty()\n        || typeOfThis.hasAnyTemplateTypes()\n        || call.hasAnyTemplateTypes();\n  }",
    "begin_line": 1261,
    "end_line": 1265,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InstanceObjectType.InstanceObjectType#56",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/InstanceObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
    "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.InstanceObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": " InstanceObjectType(JSTypeRegistry registry, FunctionType constructor) {\n    this(registry, constructor, false, null);\n  }",
    "begin_line": 56,
    "end_line": 58,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InstanceObjectType.InstanceObjectType#60",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/InstanceObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
    "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.InstanceObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.FunctionType, boolean, ImmutableList\u003cJSType\u003e)",
    "snippet": " InstanceObjectType(JSTypeRegistry registry, FunctionType constructor,\n                     boolean isNativeType,\n                     ImmutableList\u003cJSType\u003e templatizedTypes) {\n    super(registry, null, null, isNativeType, constructor.getTemplateKeys(),\n        templatizedTypes);\n    Preconditions.checkNotNull(constructor);\n    this.constructor \u003d constructor;\n  }",
    "begin_line": 60,
    "end_line": 67,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InstanceObjectType.getReferenceName#70",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/InstanceObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
    "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getReferenceName()",
    "snippet": "@Override\n  public String getReferenceName() {\n    return getConstructor().getReferenceName();\n  }",
    "begin_line": 70,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InstanceObjectType.hasReferenceName#75",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/InstanceObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
    "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hasReferenceName()",
    "snippet": "@Override\n  public boolean hasReferenceName() {\n    return getConstructor().hasReferenceName();\n  }",
    "begin_line": 75,
    "end_line": 77,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InstanceObjectType.getImplicitPrototype#80",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/InstanceObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
    "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getImplicitPrototype()",
    "snippet": "@Override\n  public ObjectType getImplicitPrototype() {\n    return getConstructor().getPrototype();\n  }",
    "begin_line": 80,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InstanceObjectType.getConstructor#85",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/InstanceObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
    "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getConstructor()",
    "snippet": "@Override\n  public FunctionType getConstructor() {\n    return constructor;\n  }",
    "begin_line": 85,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InstanceObjectType.defineProperty#90",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/InstanceObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
    "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      Node propertyNode) {\n    ObjectType proto \u003d getImplicitPrototype();\n    if (proto !\u003d null \u0026\u0026 proto.hasOwnDeclaredProperty(name)) {\n      return false;\n    }\n    return super.defineProperty(name, type, inferred, propertyNode);\n  }",
    "begin_line": 90,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InstanceObjectType.toStringHelper#100",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/InstanceObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
    "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.toStringHelper(boolean)",
    "snippet": "@Override\n  String toStringHelper(boolean forAnnotations) {\n    if (constructor.hasReferenceName()) {\n      String typeString \u003d constructor.getReferenceName();\n\n      ImmutableList\u003cJSType\u003e templatizedTypes \u003d getTemplatizedTypes();\n      if (!templatizedTypes.isEmpty()) {\n        typeString +\u003d \".\u003c\" + Joiner.on(\",\").join(templatizedTypes) + \"\u003e\";\n      }\n\n      return typeString;\n    } else {\n      return super.toStringHelper(forAnnotations);\n    }\n  }",
    "begin_line": 100,
    "end_line": 113,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InstanceObjectType.isTheObjectType#116",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/InstanceObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
    "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isTheObjectType()",
    "snippet": "@Override\n  boolean isTheObjectType() {\n    return getConstructor().isNativeObjectType()\n        \u0026\u0026 \"Object\".equals(getReferenceName());\n  }",
    "begin_line": 116,
    "end_line": 119,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InstanceObjectType.isInstanceType#122",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/InstanceObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
    "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isInstanceType()",
    "snippet": "@Override\n  public boolean isInstanceType() {\n    return true;\n  }",
    "begin_line": 122,
    "end_line": 124,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InstanceObjectType.isArrayType#127",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/InstanceObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
    "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isArrayType()",
    "snippet": "@Override\n  public boolean isArrayType() {\n    return getConstructor().isNativeObjectType()\n        \u0026\u0026 \"Array\".equals(getReferenceName());\n  }",
    "begin_line": 127,
    "end_line": 130,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InstanceObjectType.isStringObjectType#133",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/InstanceObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
    "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isStringObjectType()",
    "snippet": "@Override\n  public boolean isStringObjectType() {\n    return getConstructor().isNativeObjectType()\n        \u0026\u0026 \"String\".equals(getReferenceName());\n  }",
    "begin_line": 133,
    "end_line": 136,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InstanceObjectType.isBooleanObjectType#139",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/InstanceObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
    "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isBooleanObjectType()",
    "snippet": "@Override\n  public boolean isBooleanObjectType() {\n    return getConstructor().isNativeObjectType()\n        \u0026\u0026 \"Boolean\".equals(getReferenceName());\n  }",
    "begin_line": 139,
    "end_line": 142,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InstanceObjectType.isNumberObjectType#145",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/InstanceObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
    "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isNumberObjectType()",
    "snippet": "@Override\n  public boolean isNumberObjectType() {\n    return getConstructor().isNativeObjectType()\n        \u0026\u0026 \"Number\".equals(getReferenceName());\n  }",
    "begin_line": 145,
    "end_line": 148,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InstanceObjectType.isDateType#151",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/InstanceObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
    "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isDateType()",
    "snippet": "@Override\n  public boolean isDateType() {\n    return getConstructor().isNativeObjectType()\n        \u0026\u0026 \"Date\".equals(getReferenceName());\n  }",
    "begin_line": 151,
    "end_line": 154,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InstanceObjectType.isRegexpType#157",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/InstanceObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
    "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isRegexpType()",
    "snippet": "@Override\n  public boolean isRegexpType() {\n    return getConstructor().isNativeObjectType()\n        \u0026\u0026 \"RegExp\".equals(getReferenceName());\n  }",
    "begin_line": 157,
    "end_line": 160,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InstanceObjectType.isNominalType#163",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/InstanceObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
    "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isNominalType()",
    "snippet": "@Override\n  public boolean isNominalType() {\n    return hasReferenceName();\n  }",
    "begin_line": 163,
    "end_line": 165,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InstanceObjectType.hashCode#172",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/InstanceObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
    "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hashCode()",
    "snippet": "@Override\n  public int hashCode() {\n    if (hasReferenceName()) {\n      return getReferenceName().hashCode();\n    } else {\n      return super.hashCode();\n    }\n  }",
    "begin_line": 172,
    "end_line": 178,
    "comment": "/** \n * If this is equal to a NamedType object, its hashCode must be equal to the hashCode of the NamedType object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InstanceObjectType.getCtorImplementedInterfaces#181",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/InstanceObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
    "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getCtorImplementedInterfaces()",
    "snippet": "@Override\n  public Iterable\u003cObjectType\u003e getCtorImplementedInterfaces() {\n    return getConstructor().getImplementedInterfaces();\n  }",
    "begin_line": 181,
    "end_line": 183,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InstanceObjectType.getCtorExtendedInterfaces#186",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/InstanceObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
    "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getCtorExtendedInterfaces()",
    "snippet": "@Override\n  public Iterable\u003cObjectType\u003e getCtorExtendedInterfaces() {\n    return getConstructor().getExtendedInterfaces();\n  }",
    "begin_line": 186,
    "end_line": 188,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.compare#99",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.compare(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n    public int compare(JSType t1, JSType t2) {\n      return t1.toString().compareTo(t2.toString());\n    }",
    "begin_line": 99,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.JSType#110",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.JSType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": " JSType(JSTypeRegistry registry) {\n    this(registry, null, null);\n  }",
    "begin_line": 110,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.JSType#114",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.JSType(com.google.javascript.rhino.jstype.JSTypeRegistry, ImmutableList\u003cString\u003e, ImmutableList\u003cJSType\u003e)",
    "snippet": " JSType(JSTypeRegistry registry, ImmutableList\u003cString\u003e templateKeys,\n      ImmutableList\u003cJSType\u003e templatizedTypes) {\n    this.registry \u003d registry;\n\n    // Do sanity checking on the specified keys and templatized types.\n    int keysLength \u003d templateKeys \u003d\u003d null ? 0 : templateKeys.size();\n    int typesLength \u003d templatizedTypes \u003d\u003d null ? 0 : templatizedTypes.size();\n    if (typesLength \u003e keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength \u003c keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder\u003cJSType\u003e builder \u003d ImmutableList.builder();\n      if (typesLength \u003e 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i \u003d 0; i \u003c keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes \u003d builder.build();\n    } else if (keysLength \u003d\u003d 0 \u0026\u0026 typesLength \u003d\u003d 0) {\n      // Ensure that both lists are non-null.\n      templateKeys \u003d ImmutableList.of();\n      templatizedTypes \u003d ImmutableList.of();\n    }\n\n    this.templateKeys \u003d templateKeys;\n    this.templatizedTypes \u003d templatizedTypes;\n  }",
    "begin_line": 114,
    "end_line": 144,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.getNativeType#149",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
    "snippet": "JSType getNativeType(JSTypeNative typeId) {\n    return registry.getNativeType(typeId);\n  }",
    "begin_line": 149,
    "end_line": 151,
    "comment": "/** \n * Utility method for less verbose code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.getJSDocInfo#158",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.getJSDocInfo()",
    "snippet": "public JSDocInfo getJSDocInfo() {\n    return null;\n  }",
    "begin_line": 158,
    "end_line": 160,
    "comment": "/** \n * Gets the docInfo for this type. By default, documentation cannot be attached to arbitrary types. This must be overridden for programmer-defined types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.getDisplayName#171",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.getDisplayName()",
    "snippet": "public String getDisplayName() {\n    return null;\n  }",
    "begin_line": 171,
    "end_line": 173,
    "comment": "/** \n * Returns a user meaningful label for the JSType instance.  For example, Functions and Enums will return their declaration name (if they have one). Some types will not have a meaningful display name.  Calls to hasDisplayName() will return true IFF getDisplayName() will return null or a zero length string.\n * @return the display name of the type, or null if one is not available\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.hasDisplayName#178",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.hasDisplayName()",
    "snippet": "public boolean hasDisplayName() {\n    String displayName \u003d getDisplayName();\n    return displayName !\u003d null \u0026\u0026 !displayName.isEmpty();\n  }",
    "begin_line": 178,
    "end_line": 181,
    "comment": "/** \n * @return true if the JSType has a user meaningful label.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.hasProperty#184",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.hasProperty(java.lang.String)",
    "snippet": "public boolean hasProperty(String pname) {\n    return false;\n  }",
    "begin_line": 184,
    "end_line": 186,
    "comment": "/** \n * Checks whether the property pname is present on the object. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isNoType#188",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isNoType()",
    "snippet": "public boolean isNoType() {\n    return false;\n  }",
    "begin_line": 188,
    "end_line": 190,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isNoResolvedType#192",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isNoResolvedType()",
    "snippet": "public boolean isNoResolvedType() {\n    return false;\n  }",
    "begin_line": 192,
    "end_line": 194,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isNoObjectType#196",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isNoObjectType()",
    "snippet": "public boolean isNoObjectType() {\n    return false;\n  }",
    "begin_line": 196,
    "end_line": 198,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isEmptyType#200",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isEmptyType()",
    "snippet": "public final boolean isEmptyType() {\n    return isNoType() || isNoObjectType() || isNoResolvedType() ||\n        (registry.getNativeFunctionType(\n             JSTypeNative.LEAST_FUNCTION_TYPE) \u003d\u003d this);\n  }",
    "begin_line": 200,
    "end_line": 204,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isNumberObjectType#206",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isNumberObjectType()",
    "snippet": "public boolean isNumberObjectType() {\n    return false;\n  }",
    "begin_line": 206,
    "end_line": 208,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isNumberValueType#210",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isNumberValueType()",
    "snippet": "public boolean isNumberValueType() {\n    return false;\n  }",
    "begin_line": 210,
    "end_line": 212,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isFunctionPrototypeType#215",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isFunctionPrototypeType()",
    "snippet": "public boolean isFunctionPrototypeType() {\n    return false;\n  }",
    "begin_line": 215,
    "end_line": 217,
    "comment": "/** \n * Whether this is the prototype of a function. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isStringObjectType#219",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isStringObjectType()",
    "snippet": "public boolean isStringObjectType() {\n    return false;\n  }",
    "begin_line": 219,
    "end_line": 221,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isTheObjectType#223",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isTheObjectType()",
    "snippet": "boolean isTheObjectType() {\n    return false;\n  }",
    "begin_line": 223,
    "end_line": 225,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isStringValueType#227",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isStringValueType()",
    "snippet": "public boolean isStringValueType() {\n    return false;\n  }",
    "begin_line": 227,
    "end_line": 229,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isString#235",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isString()",
    "snippet": "public final boolean isString() {\n    return isSubtype(\n        getNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE));\n  }",
    "begin_line": 235,
    "end_line": 238,
    "comment": "/** \n * Tests whether the type is a string (value or Object).\n * @return {@code this \u0026lt;: (String, string)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isNumber#244",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isNumber()",
    "snippet": "public final boolean isNumber() {\n    return isSubtype(\n        getNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE));\n  }",
    "begin_line": 244,
    "end_line": 247,
    "comment": "/** \n * Tests whether the type is a number (value or Object).\n * @return {@code this \u0026lt;: (Number, number)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isArrayType#249",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isArrayType()",
    "snippet": "public boolean isArrayType() {\n    return false;\n  }",
    "begin_line": 249,
    "end_line": 251,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isBooleanObjectType#253",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isBooleanObjectType()",
    "snippet": "public boolean isBooleanObjectType() {\n    return false;\n  }",
    "begin_line": 253,
    "end_line": 255,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isBooleanValueType#257",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isBooleanValueType()",
    "snippet": "public boolean isBooleanValueType() {\n    return false;\n  }",
    "begin_line": 257,
    "end_line": 259,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isRegexpType#261",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isRegexpType()",
    "snippet": "public boolean isRegexpType() {\n    return false;\n  }",
    "begin_line": 261,
    "end_line": 263,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isDateType#265",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isDateType()",
    "snippet": "public boolean isDateType() {\n    return false;\n  }",
    "begin_line": 265,
    "end_line": 267,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isNullType#269",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isNullType()",
    "snippet": "public boolean isNullType() {\n    return false;\n  }",
    "begin_line": 269,
    "end_line": 271,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isVoidType#273",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isVoidType()",
    "snippet": "public boolean isVoidType() {\n    return false;\n  }",
    "begin_line": 273,
    "end_line": 275,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isAllType#277",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isAllType()",
    "snippet": "public boolean isAllType() {\n    return false;\n  }",
    "begin_line": 277,
    "end_line": 279,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isUnknownType#281",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isUnknownType()",
    "snippet": "public boolean isUnknownType() {\n    return false;\n  }",
    "begin_line": 281,
    "end_line": 283,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isCheckedUnknownType#285",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isCheckedUnknownType()",
    "snippet": "public boolean isCheckedUnknownType() {\n    return false;\n  }",
    "begin_line": 285,
    "end_line": 287,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isUnionType#289",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isUnionType()",
    "snippet": "public final boolean isUnionType() {\n    return toMaybeUnionType() !\u003d null;\n  }",
    "begin_line": 289,
    "end_line": 291,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isStruct#297",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isStruct()",
    "snippet": "public boolean isStruct() {\n    if (isObject()) {\n      ObjectType objType \u003d toObjectType();\n      ObjectType iproto \u003d objType.getImplicitPrototype();\n      // For the case when a @struct constructor is assigned to a function\u0027s\n      // prototype property\n      if (iproto !\u003d null \u0026\u0026 iproto.isStruct()) {\n        return true;\n      }\n      FunctionType ctor \u003d objType.getConstructor();\n      // This test is true for object literals\n      if (ctor \u003d\u003d null) {\n        JSDocInfo info \u003d objType.getJSDocInfo();\n        return info !\u003d null \u0026\u0026 info.makesStructs();\n      } else {\n        return ctor.makesStructs();\n      }\n    }\n    return false;\n  }",
    "begin_line": 297,
    "end_line": 316,
    "comment": "/** \n * Returns true iff  {@code this} can be a {@code struct}. UnionType overrides the method, assume  {@code this} is not a union here.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isDict#322",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isDict()",
    "snippet": "public boolean isDict() {\n    if (isObject()) {\n      ObjectType objType \u003d toObjectType();\n      ObjectType iproto \u003d objType.getImplicitPrototype();\n      // For the case when a @dict constructor is assigned to a function\u0027s\n      // prototype property\n      if (iproto !\u003d null \u0026\u0026 iproto.isDict()) {\n        return true;\n      }\n      FunctionType ctor \u003d objType.getConstructor();\n      // This test is true for object literals\n      if (ctor \u003d\u003d null) {\n        JSDocInfo info \u003d objType.getJSDocInfo();\n        return info !\u003d null \u0026\u0026 info.makesDicts();\n      } else {\n        return ctor.makesDicts();\n      }\n    }\n    return false;\n  }",
    "begin_line": 322,
    "end_line": 341,
    "comment": "/** \n * Returns true iff  {@code this} can be a {@code dict}. UnionType overrides the method, assume  {@code this} is not a union here.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.toMaybeUnionType#348",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeUnionType()",
    "snippet": "public UnionType toMaybeUnionType() {\n    return null;\n  }",
    "begin_line": 348,
    "end_line": 350,
    "comment": "/** \n * Downcasts this to a UnionType, or returns null if this is not a UnionType. Named in honor of Haskell\u0027s Maybe type constructor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isGlobalThisType#353",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isGlobalThisType()",
    "snippet": "public final boolean isGlobalThisType() {\n    return this \u003d\u003d registry.getNativeType(JSTypeNative.GLOBAL_THIS);\n  }",
    "begin_line": 353,
    "end_line": 355,
    "comment": "/** \n * Returns true if this is a global this type. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isFunctionType#358",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isFunctionType()",
    "snippet": "public final boolean isFunctionType() {\n    return toMaybeFunctionType() !\u003d null;\n  }",
    "begin_line": 358,
    "end_line": 360,
    "comment": "/** \n * Returns true if toMaybeFunctionType returns a non-null FunctionType. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.toMaybeFunctionType#374",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType()",
    "snippet": "public FunctionType toMaybeFunctionType() {\n    return null;\n  }",
    "begin_line": 374,
    "end_line": 376,
    "comment": "/** \n * Downcasts this to a FunctionType, or returns null if this is not a function. For the purposes of this function, we define a MaybeFunctionType as any type in the sub-lattice { x | LEAST_FUNCTION_TYPE \u003c\u003d x \u003c\u003d GREATEST_FUNCTION_TYPE } This definition excludes bottom types like NoType and NoObjectType. This definition is somewhat arbitrary and axiomatic, but this is the definition that makes the most sense for the most callers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.toMaybeFunctionType#381",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public static FunctionType toMaybeFunctionType(JSType type) {\n    return type \u003d\u003d null ? null : type.toMaybeFunctionType();\n  }",
    "begin_line": 381,
    "end_line": 383,
    "comment": "/** \n * Null-safe version of toMaybeFunctionType().\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isEnumElementType#385",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isEnumElementType()",
    "snippet": "public final boolean isEnumElementType() {\n    return toMaybeEnumElementType() !\u003d null;\n  }",
    "begin_line": 385,
    "end_line": 387,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.toMaybeEnumElementType#392",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeEnumElementType()",
    "snippet": "public EnumElementType toMaybeEnumElementType() {\n    return null;\n  }",
    "begin_line": 392,
    "end_line": 394,
    "comment": "/** \n * Downcasts this to an EnumElementType, or returns null if this is not an EnumElementType.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isEnumType#396",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isEnumType()",
    "snippet": "public boolean isEnumType() {\n    return toMaybeEnumType() !\u003d null;\n  }",
    "begin_line": 396,
    "end_line": 398,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.toMaybeEnumType#403",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeEnumType()",
    "snippet": "public EnumType toMaybeEnumType() {\n    return null;\n  }",
    "begin_line": 403,
    "end_line": 405,
    "comment": "/** \n * Downcasts this to an EnumType, or returns null if this is not an EnumType.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isNamedType#407",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isNamedType()",
    "snippet": "boolean isNamedType() {\n    return false;\n  }",
    "begin_line": 407,
    "end_line": 409,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isRecordType#411",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isRecordType()",
    "snippet": "public boolean isRecordType() {\n    return toMaybeRecordType() !\u003d null;\n  }",
    "begin_line": 411,
    "end_line": 413,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.toMaybeRecordType#419",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeRecordType()",
    "snippet": "RecordType toMaybeRecordType() {\n    return null;\n  }",
    "begin_line": 419,
    "end_line": 421,
    "comment": "/** \n * Downcasts this to a RecordType, or returns null if this is not a RecordType.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isParameterizedType#423",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isParameterizedType()",
    "snippet": "public final boolean isParameterizedType() {\n    return toMaybeParameterizedType() !\u003d null;\n  }",
    "begin_line": 423,
    "end_line": 425,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.toMaybeParameterizedType#431",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeParameterizedType()",
    "snippet": "public ParameterizedType toMaybeParameterizedType() {\n    return null;\n  }",
    "begin_line": 431,
    "end_line": 433,
    "comment": "/** \n * Downcasts this to a ParameterizedType, or returns null if this is not a function.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.toMaybeParameterizedType#438",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeParameterizedType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public static ParameterizedType toMaybeParameterizedType(JSType type) {\n    return type \u003d\u003d null ? null : type.toMaybeParameterizedType();\n  }",
    "begin_line": 438,
    "end_line": 440,
    "comment": "/** \n * Null-safe version of toMaybeParameterizedType().\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isTemplateType#442",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isTemplateType()",
    "snippet": "public final boolean isTemplateType() {\n    return toMaybeTemplateType() !\u003d null;\n  }",
    "begin_line": 442,
    "end_line": 444,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.toMaybeTemplateType#450",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeTemplateType()",
    "snippet": "public TemplateType toMaybeTemplateType() {\n    return null;\n  }",
    "begin_line": 450,
    "end_line": 452,
    "comment": "/** \n * Downcasts this to a TemplateType, or returns null if this is not a function.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.toMaybeTemplateType#457",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeTemplateType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public static TemplateType toMaybeTemplateType(JSType type) {\n    return type \u003d\u003d null ? null : type.toMaybeTemplateType();\n  }",
    "begin_line": 457,
    "end_line": 459,
    "comment": "/** \n * Null-safe version of toMaybeTemplateType().\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.hasAnyTemplateTypes#461",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.hasAnyTemplateTypes()",
    "snippet": "public boolean hasAnyTemplateTypes() {\n    if (!this.inTemplatedCheckVisit) {\n      this.inTemplatedCheckVisit \u003d true;\n      boolean result \u003d hasAnyTemplateTypesInternal();\n      this.inTemplatedCheckVisit \u003d false;\n      return result;\n    } else {\n      // prevent infinite recursion, this is \"not yet\".\n      return false;\n    }\n  }",
    "begin_line": 461,
    "end_line": 471,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.hasAnyTemplateTypesInternal#473",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.hasAnyTemplateTypesInternal()",
    "snippet": "boolean hasAnyTemplateTypesInternal() {\n    if (isTemplatized()) {\n      for (JSType templatizedType : templatizedTypes) {\n        if (templatizedType.hasAnyTemplateTypes()) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
    "begin_line": 473,
    "end_line": 482,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isTemplatized#487",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isTemplatized()",
    "snippet": "public boolean isTemplatized() {\n    return !templateKeys.isEmpty();\n  }",
    "begin_line": 487,
    "end_line": 489,
    "comment": "/** \n * Returns true if this type is templatized; false otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.getTemplateKeys#494",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.getTemplateKeys()",
    "snippet": "public ImmutableList\u003cString\u003e getTemplateKeys() {\n    return templateKeys;\n  }",
    "begin_line": 494,
    "end_line": 496,
    "comment": "/** \n * Returns the template keys associated with this type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.getTemplatizedTypes#498",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.getTemplatizedTypes()",
    "snippet": "public ImmutableList\u003cJSType\u003e getTemplatizedTypes() {\n    return templatizedTypes;\n  }",
    "begin_line": 498,
    "end_line": 500,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.hasTemplatizedType#506",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.hasTemplatizedType(java.lang.String)",
    "snippet": "public boolean hasTemplatizedType(String key) {\n    return templateKeys.contains(key);\n  }",
    "begin_line": 506,
    "end_line": 508,
    "comment": "/** \n * Returns true if this type is templatized for the specified key; false otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.getTemplatizedType#515",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.getTemplatizedType(java.lang.String)",
    "snippet": "public JSType getTemplatizedType(String key) {\n     int index \u003d templateKeys.indexOf(key);\n     if (index \u003c 0) {\n       return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n     }\n     return templatizedTypes.get(index);\n  }",
    "begin_line": 515,
    "end_line": 521,
    "comment": "/** \n * Returns the type associated with a given template key. Will return the UNKNOWN_TYPE if there is no template type associated with that template key.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.hasEquivalentTemplateTypes#527",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.hasEquivalentTemplateTypes(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.EquivalenceMethod)",
    "snippet": "static boolean hasEquivalentTemplateTypes(\n      JSType type1, JSType type2, EquivalenceMethod eqMethod) {\n    ImmutableList\u003cJSType\u003e templatizedTypes1 \u003d type1.getTemplatizedTypes();\n    ImmutableList\u003cJSType\u003e templatizedTypes2 \u003d type2.getTemplatizedTypes();\n    int nTemplatizedTypes1 \u003d templatizedTypes1.size();\n    int nTemplatizedTypes2 \u003d templatizedTypes2.size();\n\n    if (nTemplatizedTypes1 !\u003d nTemplatizedTypes2) {\n      return false;\n    }\n\n    for (int i \u003d 0; i \u003c nTemplatizedTypes1; i++) {\n      JSType templatizedType1 \u003d templatizedTypes1.get(i);\n      JSType templatizedType2 \u003d templatizedTypes2.get(i);\n      if (templatizedType1.checkEquivalenceHelper(templatizedType2, eqMethod)) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
    "begin_line": 527,
    "end_line": 547,
    "comment": "/** \n * Determines if the two specified JSTypes have equivalent, invariant templatized types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isObject#554",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isObject()",
    "snippet": "public boolean isObject() {\n    return false;\n  }",
    "begin_line": 554,
    "end_line": 556,
    "comment": "/** \n * Tests whether this type is an  {@code Object}, or any subtype thereof.\n * @return {@code this \u0026lt;: Object}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isConstructor#562",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isConstructor()",
    "snippet": "public boolean isConstructor() {\n    return false;\n  }",
    "begin_line": 562,
    "end_line": 564,
    "comment": "/** \n * Whether this type is a  {@link FunctionType} that is a constructor or anamed type that points to such a type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isNominalType#570",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isNominalType()",
    "snippet": "public boolean isNominalType() {\n    return false;\n  }",
    "begin_line": 570,
    "end_line": 572,
    "comment": "/** \n * Whether this type is a nominal type (a named instance object or a named enum).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isNominalConstructor#578",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isNominalConstructor()",
    "snippet": "public final boolean isNominalConstructor() {\n    if (isConstructor() || isInterface()) {\n      FunctionType fn \u003d toMaybeFunctionType();\n      if (fn \u003d\u003d null) {\n        return false;\n      }\n\n      // Programmer-defined constructors will have a link\n      // back to the original function in the source tree.\n      // Structural constructors will not.\n      if (fn.getSource() !\u003d null) {\n        return true;\n      }\n\n      // Native constructors are always nominal.\n      return fn.isNativeObjectType();\n    }\n    return false;\n  }",
    "begin_line": 578,
    "end_line": 596,
    "comment": "/** \n * Whether this type is the original constructor of a nominal type. Does not include structural constructors.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isInstanceType#602",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isInstanceType()",
    "snippet": "public boolean isInstanceType() {\n    return false;\n  }",
    "begin_line": 602,
    "end_line": 604,
    "comment": "/** \n * Whether this type is an Instance object of some constructor. Does not necessarily mean this is an  {@link InstanceObjectType}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isInterface#610",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isInterface()",
    "snippet": "public boolean isInterface() {\n    return false;\n  }",
    "begin_line": 610,
    "end_line": 612,
    "comment": "/** \n * Whether this type is a  {@link FunctionType} that is an interface or a namedtype that points to such a type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isOrdinaryFunction#618",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isOrdinaryFunction()",
    "snippet": "public boolean isOrdinaryFunction() {\n    return false;\n  }",
    "begin_line": 618,
    "end_line": 620,
    "comment": "/** \n * Whether this type is a  {@link FunctionType} that is an ordinary function ora named type that points to such a type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isEquivalentTo#625",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isEquivalentTo(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public final boolean isEquivalentTo(JSType that) {\n    return checkEquivalenceHelper(that, EquivalenceMethod.IDENTITY);\n  }",
    "begin_line": 625,
    "end_line": 627,
    "comment": "/** \n * Checks if two types are equivalent.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isInvariant#633",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isInvariant(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public final boolean isInvariant(JSType that) {\n    return checkEquivalenceHelper(that, EquivalenceMethod.INVARIANT);\n  }",
    "begin_line": 633,
    "end_line": 635,
    "comment": "/** \n * Checks if two types are invariant.\n * @see EquivalenceMethod\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.differsFrom#647",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.differsFrom(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public final boolean differsFrom(JSType that) {\n    return !checkEquivalenceHelper(that, EquivalenceMethod.DATA_FLOW);\n  }",
    "begin_line": 647,
    "end_line": 649,
    "comment": "/** \n * Whether this type is meaningfully different from  {@code that} type forthe purposes of data flow analysis. This is a trickier check than pure equality, because it has to properly handle unknown types. See  {@code EquivalenceMethod} for more info.\n * @see \u003ca href\u003d\"http://www.youtube.com/watch?v\u003d_RpSv3HjpEw\"\u003eUnknown\n   *     unknowns\u003c/a\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.checkEquivalenceHelper#654",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.checkEquivalenceHelper(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.EquivalenceMethod)",
    "snippet": "boolean checkEquivalenceHelper(JSType that, EquivalenceMethod eqMethod) {\n    if (this \u003d\u003d that) {\n      return true;\n    }\n\n    boolean thisUnknown \u003d isUnknownType();\n    boolean thatUnknown \u003d that.isUnknownType();\n    if (thisUnknown || thatUnknown) {\n      if (eqMethod \u003d\u003d EquivalenceMethod.INVARIANT) {\n        // If we\u0027re checking for invariance, the unknown type is invariant\n        // with everyone.\n        return true;\n      } else if (eqMethod \u003d\u003d EquivalenceMethod.DATA_FLOW) {\n        // If we\u0027re checking data flow, then two types are the same if they\u0027re\n        // both unknown.\n        return thisUnknown \u0026\u0026 thatUnknown;\n      } else if (thisUnknown \u0026\u0026 thatUnknown \u0026\u0026\n          (isNominalType() ^ that.isNominalType())) {\n        // If they\u0027re both unknown, but one is a nominal type and the other\n        // is not, then we should fail out immediately. This ensures that\n        // we won\u0027t unbox the unknowns further down.\n        return false;\n      }\n    }\n\n    if (isUnionType() \u0026\u0026 that.isUnionType()) {\n      return toMaybeUnionType().checkUnionEquivalenceHelper(\n          that.toMaybeUnionType(), eqMethod);\n    }\n\n    if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n      return toMaybeFunctionType().checkFunctionEquivalenceHelper(\n          that.toMaybeFunctionType(), eqMethod);\n    }\n\n    if (isRecordType() \u0026\u0026 that.isRecordType()) {\n      return toMaybeRecordType().checkRecordEquivalenceHelper(\n          that.toMaybeRecordType(), eqMethod);\n    }\n\n    ParameterizedType thisParamType \u003d toMaybeParameterizedType();\n    ParameterizedType thatParamType \u003d that.toMaybeParameterizedType();\n    if (thisParamType !\u003d null || thatParamType !\u003d null) {\n      // Check if one type is parameterized, but the other is not.\n      boolean paramsMatch \u003d false;\n      if (thisParamType !\u003d null \u0026\u0026 thatParamType !\u003d null) {\n        paramsMatch \u003d thisParamType.getParameterType().checkEquivalenceHelper(\n            thatParamType.getParameterType(), eqMethod);\n      } else if (eqMethod \u003d\u003d EquivalenceMethod.IDENTITY) {\n        paramsMatch \u003d false;\n      } else {\n        // If one of the type parameters is unknown, but the other is not,\n        // then we consider these the same for the purposes of data flow\n        // and invariance.\n        paramsMatch \u003d true;\n      }\n\n      JSType thisRootType \u003d thisParamType \u003d\u003d null ?\n          this : thisParamType.getReferencedTypeInternal();\n      JSType thatRootType \u003d thatParamType \u003d\u003d null ?\n          that : thatParamType.getReferencedTypeInternal();\n      return paramsMatch \u0026\u0026\n          thisRootType.checkEquivalenceHelper(thatRootType, eqMethod);\n    }\n\n    if (isNominalType() \u0026\u0026 that.isNominalType()) {\n      return toObjectType().getReferenceName().equals(\n          that.toObjectType().getReferenceName());\n    }\n\n    // Unbox other proxies.\n    if (this instanceof ProxyObjectType) {\n      return ((ProxyObjectType) this)\n          .getReferencedTypeInternal().checkEquivalenceHelper(\n              that, eqMethod);\n    }\n\n    if (that instanceof ProxyObjectType) {\n      return checkEquivalenceHelper(\n          ((ProxyObjectType) that).getReferencedTypeInternal(),\n          eqMethod);\n    }\n\n    // Relies on the fact that for the base {@link JSType}, only one\n    // instance of each sub-type will ever be created in a given registry, so\n    // there is no need to verify members. If the object pointers are not\n    // identical, then the type member must be different.\n    return this \u003d\u003d that;\n  }",
    "begin_line": 654,
    "end_line": 742,
    "comment": "/** \n * An equivalence visitor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isEquivalent#744",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isEquivalent(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public static boolean isEquivalent(JSType typeA, JSType typeB) {\n    return (typeA \u003d\u003d null || typeB \u003d\u003d null) ?\n        typeA \u003d\u003d typeB : typeA.isEquivalentTo(typeB);\n  }",
    "begin_line": 744,
    "end_line": 747,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.equals#750",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.equals(java.lang.Object)",
    "snippet": "@Override\n  public boolean equals(Object jsType) {\n    return (jsType instanceof JSType) ?\n        isEquivalentTo((JSType) jsType) : false;\n  }",
    "begin_line": 750,
    "end_line": 753,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.hashCode#756",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.hashCode()",
    "snippet": "@Override\n  public int hashCode() {\n    return System.identityHashCode(this);\n  }",
    "begin_line": 756,
    "end_line": 758,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.matchesInt32Context#766",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.matchesInt32Context()",
    "snippet": "public final boolean matchesInt32Context() {\n    return matchesNumberContext();\n  }",
    "begin_line": 766,
    "end_line": 768,
    "comment": "/** \n * This predicate is used to test whether a given type can appear in a \u0027Int32\u0027 context.  This context includes, for example, the operands of a bitwise or operator.  Since we do not currently support integer types, this is a synonym for  {@code Number}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.matchesUint32Context#775",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.matchesUint32Context()",
    "snippet": "public final boolean matchesUint32Context() {\n    return matchesNumberContext();\n  }",
    "begin_line": 775,
    "end_line": 777,
    "comment": "/** \n * This predicate is used to test whether a given type can appear in a \u0027Uint32\u0027 context.  This context includes the right-hand operand of a shift operator.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.matchesNumberContext#783",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.matchesNumberContext()",
    "snippet": "public boolean matchesNumberContext() {\n    return false;\n  }",
    "begin_line": 783,
    "end_line": 785,
    "comment": "/** \n * This predicate is used to test whether a given type can appear in a numeric context, such as an operand of a multiply operator.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.matchesStringContext#795",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.matchesStringContext()",
    "snippet": "public boolean matchesStringContext() {\n    return false;\n  }",
    "begin_line": 795,
    "end_line": 797,
    "comment": "/** \n * This predicate is used to test whether a given type can appear in a {@code String} context, such as an operand of a string concat (+) operator.All types have at least the potential for converting to  {@code String}. When we add externally defined types, such as a browser OM, we may choose to add types that do not automatically convert to  {@code String}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.matchesObjectContext#807",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.matchesObjectContext()",
    "snippet": "public boolean matchesObjectContext() {\n    return false;\n  }",
    "begin_line": 807,
    "end_line": 809,
    "comment": "/** \n * This predicate is used to test whether a given type can appear in an {@code Object} context, such as the expression in a with statement.Most types we will encounter, except notably  {@code null}, have at least the potential for converting to  {@code Object}.  Host defined objects can get peculiar.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.findPropertyType#821",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.findPropertyType(java.lang.String)",
    "snippet": "public JSType findPropertyType(String propertyName) {\n    ObjectType autoboxObjType \u003d ObjectType.cast(autoboxesTo());\n    if (autoboxObjType !\u003d null) {\n      return autoboxObjType.findPropertyType(propertyName);\n    }\n\n    return null;\n  }",
    "begin_line": 821,
    "end_line": 828,
    "comment": "/** \n * Coerces this type to an Object type, then gets the type of the property whose name is given. Unlike  {@link ObjectType#getPropertyType}, returns null if the property is not found.\n * @return The property\u0027s type. {@code null} if the current type cannothave properties, or if the type is not found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.canBeCalled#836",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.canBeCalled()",
    "snippet": "public boolean canBeCalled() {\n    return false;\n  }",
    "begin_line": 836,
    "end_line": 838,
    "comment": "/** \n * This predicate is used to test whether a given type can be used as the \u0027function\u0027 in a function call.\n * @return {@code true} if this type might be callable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.canCastTo#847",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.canCastTo(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public boolean canCastTo(JSType that) {\n    return this.visit(CAN_CAST_TO_VISITOR, that);\n  }",
    "begin_line": 847,
    "end_line": 849,
    "comment": "/** \n * Tests whether values of  {@code this} type can be safely assignedto values of  {@code that} type.\u003cp\u003eThe default implementation verifies that  {@code this} is a subtypeof  {@code that}.\u003cp\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.autoboxesTo#856",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.autoboxesTo()",
    "snippet": "public JSType autoboxesTo() {\n    return null;\n  }",
    "begin_line": 856,
    "end_line": 858,
    "comment": "/** \n * Turn a scalar type to the corresponding object type.\n * @return the auto-boxed type or {@code null} if this type is not a scalar.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.unboxesTo#865",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.unboxesTo()",
    "snippet": "public JSType unboxesTo() {\n    return null;\n  }",
    "begin_line": 865,
    "end_line": 867,
    "comment": "/** \n * Turn an object type to its corresponding scalar type.\n * @return the unboxed type or {@code null} if this type does not unbox.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.toObjectType#875",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.toObjectType()",
    "snippet": "public ObjectType toObjectType() {\n    return this instanceof ObjectType ? (ObjectType) this : null;\n  }",
    "begin_line": 875,
    "end_line": 877,
    "comment": "/** \n * Casts this to an ObjectType, or returns null if this is not an ObjectType. If this is a scalar type, it will *not* be converted to an object type. If you want to simulate JS autoboxing or dereferencing, you should use autoboxesTo() or dereference().\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.autobox#885",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.autobox()",
    "snippet": "public JSType autobox() {\n    JSType restricted \u003d restrictByNotNullOrUndefined();\n    JSType autobox \u003d restricted.autoboxesTo();\n    return autobox \u003d\u003d null ? restricted : autobox;\n  }",
    "begin_line": 885,
    "end_line": 889,
    "comment": "/** \n * Dereference a type for property access. Filters null/undefined and autoboxes the resulting type. Never returns null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.dereference#897",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.dereference()",
    "snippet": "public final ObjectType dereference() {\n    return autobox().toObjectType();\n  }",
    "begin_line": 897,
    "end_line": 899,
    "comment": "/** \n * Dereference a type for property access. Filters null/undefined, autoboxes the resulting type, and returns it iff it\u0027s an object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.canTestForEqualityWith#907",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.canTestForEqualityWith(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public final boolean canTestForEqualityWith(JSType that) {\n    return testForEquality(that).equals(UNKNOWN);\n  }",
    "begin_line": 907,
    "end_line": 909,
    "comment": "/** \n * Tests whether  {@code this} and {@code that} are meaningfullycomparable. By meaningfully, we mean compatible types that do not lead to step 22 of the definition of the Abstract Equality Comparison Algorithm (11.9.3, page 55\u0026ndash;56) of the ECMA-262 specification.\u003cp\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.testForEquality#924",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.testForEquality(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public TernaryValue testForEquality(JSType that) {\n    return testForEqualityHelper(this, that);\n  }",
    "begin_line": 924,
    "end_line": 926,
    "comment": "/** \n * Compares  {@code this} and {@code that}.\n * @return \u003cul\u003e\u003cli\u003e {@link TernaryValue#TRUE} if the comparison of values of{@code this} type and {@code that} always succeed (such as{@code undefined} compared to {@code null})\u003c/li\u003e \u003cli\u003e {@link TernaryValue#FALSE} if the comparison of values of{@code this} type and {@code that} always fails (such as{@code undefined} compared to {@code number})\u003c/li\u003e \u003cli\u003e {@link TernaryValue#UNKNOWN} if the comparison can succeed orfail depending on the concrete values\u003c/li\u003e \u003c/ul\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.testForEqualityHelper#928",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.testForEqualityHelper(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "TernaryValue testForEqualityHelper(JSType aType, JSType bType) {\n    if (bType.isAllType() || bType.isUnknownType() ||\n        bType.isNoResolvedType() ||\n        aType.isAllType() || aType.isUnknownType() ||\n        aType.isNoResolvedType()) {\n      return UNKNOWN;\n    }\n\n    boolean aIsEmpty \u003d aType.isEmptyType();\n    boolean bIsEmpty \u003d bType.isEmptyType();\n    if (aIsEmpty || bIsEmpty) {\n      if (aIsEmpty \u0026\u0026 bIsEmpty) {\n        return TernaryValue.TRUE;\n      } else {\n        return UNKNOWN;\n      }\n    }\n\n    if (aType.isFunctionType() || bType.isFunctionType()) {\n      JSType otherType \u003d aType.isFunctionType() ? bType : aType;\n      // In theory, functions are comparable to anything except\n      // null/undefined. For example, on FF3:\n      // function() {} \u003d\u003d \u0027function () {\\n}\u0027\n      // In practice, how a function serializes to a string is\n      // implementation-dependent, so it does not really make sense to test\n      // for equality with a string.\n      JSType meet \u003d otherType.getGreatestSubtype(\n          getNativeType(JSTypeNative.OBJECT_TYPE));\n      if (meet.isNoType() || meet.isNoObjectType()) {\n        return TernaryValue.FALSE;\n      } else {\n        return TernaryValue.UNKNOWN;\n      }\n    }\n    if (bType.isEnumElementType() || bType.isUnionType()) {\n      return bType.testForEquality(aType);\n    }\n    return null;\n  }",
    "begin_line": 928,
    "end_line": 966,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.canTestForShallowEqualityWith#975",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.canTestForShallowEqualityWith(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public final boolean canTestForShallowEqualityWith(JSType that) {\n    if (isEmptyType() || that.isEmptyType()) {\n      return isSubtype(that) || that.isSubtype(this);\n    }\n\n    JSType inf \u003d getGreatestSubtype(that);\n    return !inf.isEmptyType() ||\n        // Our getGreatestSubtype relation on functions is pretty bad.\n        // Let\u0027s just say it\u0027s always ok to compare two functions.\n        // Once the TODO in FunctionType is fixed, we should be able to\n        // remove this.\n        inf \u003d\u003d registry.getNativeType(JSTypeNative.LEAST_FUNCTION_TYPE);\n  }",
    "begin_line": 975,
    "end_line": 987,
    "comment": "/** \n * Tests whether  {@code this} and {@code that} are meaningfullycomparable using shallow comparison. By meaningfully, we mean compatible types that are not rejected by step 1 of the definition of the Strict Equality Comparison Algorithm (11.9.6, page 56\u0026ndash;57) of the ECMA-262 specification.\u003cp\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isNullable#992",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isNullable()",
    "snippet": "public boolean isNullable() {\n    return isSubtype(getNativeType(JSTypeNative.NULL_TYPE));\n  }",
    "begin_line": 992,
    "end_line": 994,
    "comment": "/** \n * Tests whether this type is nullable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.collapseUnion#999",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.collapseUnion()",
    "snippet": "public JSType collapseUnion() {\n    return this;\n  }",
    "begin_line": 999,
    "end_line": 1001,
    "comment": "/** \n * Gets the least supertype of this that\u0027s not a union.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.getLeastSupertype#1015",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.getLeastSupertype(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public JSType getLeastSupertype(JSType that) {\n    if (that.isUnionType()) {\n      // Union types have their own implementation of getLeastSupertype.\n      return that.toMaybeUnionType().getLeastSupertype(this);\n    }\n    return getLeastSupertype(this, that);\n  }",
    "begin_line": 1015,
    "end_line": 1021,
    "comment": "/** \n * Gets the least supertype of  {@code this} and {@code that}. The least supertype is the join (\u0026#8744;) or supremum of both types in the type lattice.\u003cp\u003e Examples: \u003cul\u003e \u003cli\u003e {@code number \u0026#8744; *} \u003d {@code *}\u003c/li\u003e \u003cli\u003e {@code number \u0026#8744; Object} \u003d {@code (number, Object)}\u003c/li\u003e \u003cli\u003e {@code Number \u0026#8744; Object} \u003d {@code Object}\u003c/li\u003e \u003c/ul\u003e\n * @return {@code this \u0026#8744; that}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.getLeastSupertype#1027",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.getLeastSupertype(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "static JSType getLeastSupertype(JSType thisType, JSType thatType) {\n    boolean areEquivalent \u003d thisType.isEquivalentTo(thatType);\n    return areEquivalent ? thisType :\n        filterNoResolvedType(\n            thisType.registry.createUnionType(thisType, thatType));\n  }",
    "begin_line": 1027,
    "end_line": 1032,
    "comment": "/** \n * A generic implementation meant to be used as a helper for common getLeastSupertype implementations.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.getGreatestSubtype#1046",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.getGreatestSubtype(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public JSType getGreatestSubtype(JSType that) {\n    return getGreatestSubtype(this, that);\n  }",
    "begin_line": 1046,
    "end_line": 1048,
    "comment": "/** \n * Gets the greatest subtype of  {@code this} and {@code that}. The greatest subtype is the meet (\u0026#8743;) or infimum of both types in the type lattice.\u003cp\u003e Examples \u003cul\u003e \u003cli\u003e {@code Number \u0026#8743; Any} \u003d {@code Any}\u003c/li\u003e \u003cli\u003e {@code number \u0026#8743; Object} \u003d {@code Any}\u003c/li\u003e \u003cli\u003e {@code Number \u0026#8743; Object} \u003d {@code Number}\u003c/li\u003e \u003c/ul\u003e\n * @return {@code this \u0026#8744; that}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.getGreatestSubtype#1054",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.getGreatestSubtype(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "static JSType getGreatestSubtype(JSType thisType, JSType thatType) {\n    if (thisType.isFunctionType() \u0026\u0026 thatType.isFunctionType()) {\n      // The FunctionType sub-lattice is not well-defined. i.e., the\n      // proposition\n      // A \u003c B \u003d\u003e sup(A, B) \u003d\u003d B\n      // does not hold because of unknown parameters and return types.\n      // See the comment in supAndInfHelper for more info on this.\n      return thisType.toMaybeFunctionType().supAndInfHelper(\n          thatType.toMaybeFunctionType(), false);\n    } else if (thisType.isEquivalentTo(thatType)) {\n      return thisType;\n    } else if (thisType.isUnknownType() || thatType.isUnknownType()) {\n      // The greatest subtype with any unknown type is the universal\n      // unknown type, unless the two types are equal.\n      return thisType.isEquivalentTo(thatType) ? thisType :\n          thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n    } else if (thisType.isUnionType()) {\n      return thisType.toMaybeUnionType().meet(thatType);\n    } else if (thatType.isUnionType()) {\n      return thatType.toMaybeUnionType().meet(thisType);\n    } else if (thisType.isParameterizedType()) {\n      return thisType.toMaybeParameterizedType().getGreatestSubtypeHelper(\n          thatType);\n    }  else if (thatType.isParameterizedType()) {\n      return thatType.toMaybeParameterizedType().getGreatestSubtypeHelper(\n          thisType);\n    } else if (thisType.isSubtype(thatType)) {\n      return filterNoResolvedType(thisType);\n    } else if (thatType.isSubtype(thisType)) {\n      return filterNoResolvedType(thatType);\n    } else if (thisType.isRecordType()) {\n      return thisType.toMaybeRecordType().getGreatestSubtypeHelper(thatType);\n    } else if (thatType.isRecordType()) {\n      return thatType.toMaybeRecordType().getGreatestSubtypeHelper(thisType);\n    }\n\n    if (thisType.isEnumElementType()) {\n      JSType inf \u003d thisType.toMaybeEnumElementType().meet(thatType);\n      if (inf !\u003d null) {\n        return inf;\n      }\n    } else if (thatType.isEnumElementType()) {\n      JSType inf \u003d thatType.toMaybeEnumElementType().meet(thisType);\n      if (inf !\u003d null) {\n        return inf;\n      }\n    }\n\n    if (thisType.isObject() \u0026\u0026 thatType.isObject()) {\n      return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    }\n    return thisType.getNativeType(JSTypeNative.NO_TYPE);\n  }",
    "begin_line": 1054,
    "end_line": 1106,
    "comment": "/** \n * A generic implementation meant to be used as a helper for common getGreatestSubtype implementations.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.filterNoResolvedType#1116",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.filterNoResolvedType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "static JSType filterNoResolvedType(JSType type) {\n    if (type.isNoResolvedType()) {\n      // inf(UnresolvedType1, UnresolvedType2) needs to resolve\n      // to the base unresolved type, so that the relation is symmetric.\n      return type.getNativeType(JSTypeNative.NO_RESOLVED_TYPE);\n    } else if (type.isUnionType()) {\n      UnionType unionType \u003d type.toMaybeUnionType();\n      boolean needsFiltering \u003d false;\n      for (JSType alt : unionType.getAlternates()) {\n        if (alt.isNoResolvedType()) {\n          needsFiltering \u003d true;\n          break;\n        }\n      }\n\n      if (needsFiltering) {\n        UnionTypeBuilder builder \u003d new UnionTypeBuilder(type.registry);\n        builder.addAlternate(type.getNativeType(JSTypeNative.NO_RESOLVED_TYPE));\n        for (JSType alt : unionType.getAlternates()) {\n          if (!alt.isNoResolvedType()) {\n            builder.addAlternate(alt);\n          }\n        }\n        return builder.build();\n      }\n    }\n    return type;\n  }",
    "begin_line": 1116,
    "end_line": 1143,
    "comment": "/** \n * When computing infima, we may get a situation like inf(Type1, Type2) where both types are unresolved, so they\u0027re technically subtypes of one another. If this happens, filter them down to NoResolvedType.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.getRestrictedTypeGivenToBooleanOutcome#1159",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.getRestrictedTypeGivenToBooleanOutcome(boolean)",
    "snippet": "public JSType getRestrictedTypeGivenToBooleanOutcome(boolean outcome) {\n    if (outcome \u0026\u0026 this \u003d\u003d getNativeType(JSTypeNative.UNKNOWN_TYPE)) {\n      return getNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE);\n    }\n\n    BooleanLiteralSet literals \u003d getPossibleToBooleanOutcomes();\n    if (literals.contains(outcome)) {\n      return this;\n    } else {\n      return getNativeType(JSTypeNative.NO_TYPE);\n    }\n  }",
    "begin_line": 1159,
    "end_line": 1170,
    "comment": "/** \n * Computes the restricted type of this type knowing that the {@code ToBoolean} predicate has a specific value. For more informationabout the  {@code ToBoolean} predicate, see{@link #getPossibleToBooleanOutcomes}.\n * @param outcome the value of the {@code ToBoolean} predicate\n * @return the restricted type, or the Any Type if the underlying type couldnot have yielded this ToBoolean value TODO(user): Move this method to the SemanticRAI and use the visit method of types to get the restricted type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.getPossibleToBooleanOutcomes#1188",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.getPossibleToBooleanOutcomes()",
    "snippet": "public abstract BooleanLiteralSet getPossibleToBooleanOutcomes();",
    "begin_line": 1188,
    "end_line": 1188,
    "comment": "/** \n * Computes the set of possible outcomes of the  {@code ToBoolean} predicatefor this type. The  {@code ToBoolean} predicate is defined by the ECMA-262standard, 3\u003csup\u003erd\u003c/sup\u003e edition. Its behavior for simple types can be summarized by the following table: \u003ctable\u003e \u003ctr\u003e\u003cth\u003etype\u003c/th\u003e\u003cth\u003eresult\u003c/th\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code undefined}\u003c/td\u003e\u003ctd\u003e{false}\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code null}\u003c/td\u003e\u003ctd\u003e{false}\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code boolean}\u003c/td\u003e\u003ctd\u003e{true, false}\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code number}\u003c/td\u003e\u003ctd\u003e{true, false}\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code string}\u003c/td\u003e\u003ctd\u003e{true, false}\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code Object}\u003c/td\u003e\u003ctd\u003e{true}\u003c/td\u003e\u003c/tr\u003e \u003c/table\u003e\n * @return the set of boolean literals for this type\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.getTypesUnderEquality#1202",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.getTypesUnderEquality(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public TypePair getTypesUnderEquality(JSType that) {\n    // unions types\n    if (that.isUnionType()) {\n      TypePair p \u003d that.toMaybeUnionType().getTypesUnderEquality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    switch (testForEquality(that)) {\n      case FALSE:\n        return new TypePair(null, null);\n\n      case TRUE:\n      case UNKNOWN:\n        return new TypePair(this, that);\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();\n  }",
    "begin_line": 1202,
    "end_line": 1221,
    "comment": "/** \n * Computes the subset of  {@code this} and {@code that} types if equalityis observed. If a value  {@code v1} of type {@code null} is equal to a value{@code v2} of type {@code (undefined,number)}, we can infer that the type of  {@code v1} is {@code null} and the type of {@code v2} is{@code undefined}.\n * @return a pair containing the restricted type of {@code this} as the firstcomponent and the restricted type of  {@code that} as the secondelement. The returned pair is never  {@code null} even though itscomponents may be  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.getTypesUnderInequality#1235",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.getTypesUnderInequality(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that.isUnionType()) {\n      TypePair p \u003d that.toMaybeUnionType().getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    switch (testForEquality(that)) {\n      case TRUE:\n        JSType noType \u003d getNativeType(JSTypeNative.NO_TYPE);\n        return new TypePair(noType, noType);\n\n      case FALSE:\n      case UNKNOWN:\n        return new TypePair(this, that);\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();\n  }",
    "begin_line": 1235,
    "end_line": 1255,
    "comment": "/** \n * Computes the subset of  {@code this} and {@code that} types if inequalityis observed. If a value  {@code v1} of type {@code number} is not equal to avalue  {@code v2} of type {@code (undefined,number)}, we can infer that the type of  {@code v1} is {@code number} and the type of {@code v2} is{@code number} as well.\n * @return a pair containing the restricted type of {@code this} as the firstcomponent and the restricted type of  {@code that} as the secondelement. The returned pair is never  {@code null} even though itscomponents may be  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.getTypesUnderShallowEquality#1266",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.getTypesUnderShallowEquality(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public TypePair getTypesUnderShallowEquality(JSType that) {\n    JSType commonType \u003d getGreatestSubtype(that);\n    return new TypePair(commonType, commonType);\n  }",
    "begin_line": 1266,
    "end_line": 1269,
    "comment": "/** \n * Computes the subset of  {@code this} and {@code that} types under shallowequality.\n * @return a pair containing the restricted type of {@code this} as the firstcomponent and the restricted type of  {@code that} as the secondelement. The returned pair is never  {@code null} even though itscomponents may be  {@code null}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.getTypesUnderShallowInequality#1280",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.getTypesUnderShallowInequality(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public TypePair getTypesUnderShallowInequality(JSType that) {\n    // union types\n    if (that.isUnionType()) {\n      TypePair p \u003d that.toMaybeUnionType().getTypesUnderShallowInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // Other types.\n    // There are only two types whose shallow inequality is deterministically\n    // true -- null and undefined. We can just enumerate them.\n    if (isNullType() \u0026\u0026 that.isNullType() ||\n        isVoidType() \u0026\u0026 that.isVoidType()) {\n      return new TypePair(null, null);\n    } else {\n      return new TypePair(this, that);\n    }\n  }",
    "begin_line": 1280,
    "end_line": 1296,
    "comment": "/** \n * Computes the subset of  {@code this} and {@code that} types undershallow inequality.\n * @return A pair containing the restricted type of {@code this} as the firstcomponent and the restricted type of  {@code that} as the secondelement. The returned pair is never  {@code null} even though itscomponents may be  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.restrictByNotNullOrUndefined#1302",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.restrictByNotNullOrUndefined()",
    "snippet": "public JSType restrictByNotNullOrUndefined() {\n    return this;\n  }",
    "begin_line": 1302,
    "end_line": 1304,
    "comment": "/** \n * If this is a union type, returns a union type that does not include the null or undefined type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isSubtype#1332",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public boolean isSubtype(JSType that) {\n    return isSubtypeHelper(this, that);\n  }",
    "begin_line": 1332,
    "end_line": 1334,
    "comment": "/** \n * Checks whether  {@code this} is a subtype of {@code that}.\u003cp\u003e Subtyping rules: \u003cul\u003e \u003cli\u003e(unknown) \u0026mdash; every type is a subtype of the Unknown type.\u003c/li\u003e \u003cli\u003e(no) \u0026mdash; the No type is a subtype of every type.\u003c/li\u003e \u003cli\u003e(no-object) \u0026mdash; the NoObject type is a subtype of every object type (i.e. subtypes of the Object type).\u003c/li\u003e \u003cli\u003e(ref) \u0026mdash; a type is a subtype of itself.\u003c/li\u003e \u003cli\u003e(union-l) \u0026mdash; A union type is a subtype of a type U if all the union type\u0027s constituents are a subtype of U. Formally\u003cbr\u003e {@code (T\u003csub\u003e1\u003c/sub\u003e, \u0026hellip;, T\u003csub\u003en\u003c/sub\u003e) \u0026lt;: U} if and only{@code T\u003csub\u003ek\u003c/sub\u003e \u0026lt;: U} for all {@code k \u0026isin; 1..n}.\u003c/li\u003e \u003cli\u003e(union-r) \u0026mdash; A type U is a subtype of a union type if it is a subtype of one of the union type\u0027s constituents. Formally\u003cbr\u003e {@code U \u0026lt;: (T\u003csub\u003e1\u003c/sub\u003e, \u0026hellip;, T\u003csub\u003en\u003c/sub\u003e)} if and onlyif  {@code U \u0026lt;: T\u003csub\u003ek\u003c/sub\u003e} for some index {@code k}.\u003c/li\u003e \u003cli\u003e(objects) \u0026mdash; an Object  {@code O\u003csub\u003e1\u003c/sub\u003e} is a subtypeof an object  {@code O\u003csub\u003e2\u003c/sub\u003e} if it has more propertiesthan  {@code O\u003csub\u003e2\u003c/sub\u003e} and all common properties arepairwise subtypes.\u003c/li\u003e \u003c/ul\u003e\n * @return {@code this \u0026lt;: that}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isSubtypeHelper#1340",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isSubtypeHelper(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n    // unknown\n    if (thatType.isUnknownType()) {\n      return true;\n    }\n    // all type\n    if (thatType.isAllType()) {\n      return true;\n    }\n    // equality\n    if (thisType.isEquivalentTo(thatType)) {\n      return true;\n    }\n    // unions\n    if (thatType.isUnionType()) {\n      UnionType union \u003d thatType.toMaybeUnionType();\n      for (JSType element : union.alternates) {\n        if (thisType.isSubtype(element)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    // parameterized types.\n    if (thisType.isParameterizedType()) {\n      return thisType.toMaybeParameterizedType().isParameterizeSubtypeOf(\n          thatType);\n    }\n\n    // proxy types\n    if (thatType instanceof ProxyObjectType) {\n      return thisType.isSubtype(\n          ((ProxyObjectType) thatType).getReferencedTypeInternal());\n    }\n    return false;\n  }",
    "begin_line": 1340,
    "end_line": 1376,
    "comment": "/** \n * A generic implementation meant to be used as a helper for common subtyping cases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.visit#1383",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.visit(com.google.javascript.rhino.jstype.Visitor\u003cT\u003e)",
    "snippet": "public abstract \u003cT\u003e T visit(Visitor\u003cT\u003e visitor);",
    "begin_line": 1383,
    "end_line": 1383,
    "comment": "/** \n * Visit this type with the given visitor.\n * @see com.google.javascript.rhino.jstype.Visitor\n * @return the value returned by the visitor\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.visit#1390",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.visit(com.google.javascript.rhino.jstype.RelationshipVisitor\u003cT\u003e, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "abstract \u003cT\u003e T visit(RelationshipVisitor\u003cT\u003e visitor, JSType that);",
    "begin_line": 1390,
    "end_line": 1390,
    "comment": "/** \n * Visit the types with the given visitor.\n * @see com.google.javascript.rhino.jstype.RelationshipVisitor\n * @return the value returned by the visitor\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.forceResolve#1397",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.forceResolve(com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "public final JSType forceResolve(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    ResolveMode oldResolveMode \u003d registry.getResolveMode();\n    registry.setResolveMode(ResolveMode.IMMEDIATE);\n    JSType result \u003d resolve(t, scope);\n    registry.setResolveMode(oldResolveMode);\n    return result;\n  }",
    "begin_line": 1397,
    "end_line": 1403,
    "comment": "/** \n * Force this type to resolve, even if the registry is in a lazy resolving mode.\n * @see #resolve\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.resolve#1419",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.resolve(com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "public final JSType resolve(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    if (resolved) {\n      // TODO(nicksantos): Check to see if resolve() looped back on itself.\n      // Preconditions.checkNotNull(resolveResult);\n      if (resolveResult \u003d\u003d null) {\n        return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n      }\n      return resolveResult;\n    }\n    resolved \u003d true;\n    resolveResult \u003d resolveInternal(t, scope);\n    resolveResult.setResolvedTypeInternal(resolveResult);\n    return resolveResult;\n  }",
    "begin_line": 1419,
    "end_line": 1432,
    "comment": "/** \n * Resolve this type in the given scope. The returned value must be equal to  {@code this}, as defined by {@link #isEquivalentTo}. It may or may not be the same object. This method may modify the internal state of  {@code this}, as long as it does so in a way that preserves Object equality. For efficiency, we should only resolve a type once per compilation job. For incremental compilations, one compilation job may need the artifacts from a previous generation, so we will eventually need a generational flag instead of a boolean one.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.resolveInternal#1437",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.resolveInternal(com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "abstract JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope);",
    "begin_line": 1437,
    "end_line": 1437,
    "comment": "/** \n * @see #resolve\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.setResolvedTypeInternal#1439",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.setResolvedTypeInternal(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "void setResolvedTypeInternal(JSType type) {\n    resolveResult \u003d type;\n    resolved \u003d true;\n  }",
    "begin_line": 1439,
    "end_line": 1442,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.isResolved#1445",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.isResolved()",
    "snippet": "public final boolean isResolved() {\n    return resolved;\n  }",
    "begin_line": 1445,
    "end_line": 1447,
    "comment": "/** \n * Whether the type has been resolved. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.clearResolved#1450",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.clearResolved()",
    "snippet": "public final void clearResolved() {\n    resolved \u003d false;\n    resolveResult \u003d null;\n  }",
    "begin_line": 1450,
    "end_line": 1453,
    "comment": "/** \n * Clears the resolved field. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.safeResolve#1459",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.safeResolve(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "static final JSType safeResolve(\n      JSType type, ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    return type \u003d\u003d null ? null : type.resolve(t, scope);\n  }",
    "begin_line": 1459,
    "end_line": 1462,
    "comment": "/** \n * A null-safe resolve.\n * @see #resolve\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSType.setValidator#1470",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.setValidator(Predicate\u003cJSType\u003e)",
    "snippet": "public boolean setValidator(Predicate\u003cJSType\u003e validator) {\n    return validator.apply(this);\n  }",
    "begin_line": 1470,
    "end_line": 1472,
    "comment": "/** \n * Certain types have constraints on them at resolution-time. For example, a type in an  {@code @extends} annotation must be anobject. Clients should inject a validator that emits a warning if the type does not validate, and return false.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypePair.TypePair#1478",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.TypePair(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public TypePair(JSType typeA, JSType typeB) {\n      this.typeA \u003d typeA;\n      this.typeB \u003d typeB;\n    }",
    "begin_line": 1478,
    "end_line": 1481,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypePair.toString#1489",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.toString()",
    "snippet": "@Override\n  public String toString() {\n    return toStringHelper(false);\n  }",
    "begin_line": 1489,
    "end_line": 1491,
    "comment": "/** \n * A string representation of this type, suitable for printing in warnings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypePair.toDebugHashCodeString#1497",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.toDebugHashCodeString()",
    "snippet": "public String toDebugHashCodeString() {\n    return \"{\" + hashCode() + \"}\";\n  }",
    "begin_line": 1497,
    "end_line": 1499,
    "comment": "/** \n * A hash code function for diagnosing complicated issues around type-identity.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypePair.toAnnotationString#1505",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.toAnnotationString()",
    "snippet": "public final String toAnnotationString() {\n    return toStringHelper(true);\n  }",
    "begin_line": 1505,
    "end_line": 1507,
    "comment": "/** \n * A string representation of this type, suitable for printing in type annotations at code generation time.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypePair.toStringHelper#1513",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.toStringHelper(boolean)",
    "snippet": "abstract String toStringHelper(boolean forAnnotations);",
    "begin_line": 1513,
    "end_line": 1513,
    "comment": "/** \n * @param forAnnotations Whether this is for use in code generatorannotations. Otherwise, it\u0027s for warnings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypePair.matchConstraint#1522",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSType.java",
    "class_name": "com.google.javascript.rhino.jstype.JSType",
    "signature": "com.google.javascript.rhino.jstype.JSType.matchConstraint(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public void matchConstraint(JSType constraint) {}",
    "begin_line": 1522,
    "end_line": 1522,
    "comment": "/** \n * Modify this type so that it matches the specified type. This is useful for reverse type-inference, where we want to infer that an object literal matches its constraint (much like how the java compiler does reverse-inference to figure out generics).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.JSTypeRegistry#196",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.JSTypeRegistry(com.google.javascript.rhino.ErrorReporter)",
    "snippet": "public JSTypeRegistry(ErrorReporter reporter) {\n    this(reporter, false);\n  }",
    "begin_line": 196,
    "end_line": 198,
    "comment": "/** \n * Constructs a new type registry populated with the built-in types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.JSTypeRegistry#203",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.JSTypeRegistry(com.google.javascript.rhino.ErrorReporter, boolean)",
    "snippet": "public JSTypeRegistry(\n      ErrorReporter reporter, boolean tolerateUndefinedValues) {\n    this.reporter \u003d reporter;\n    nativeTypes \u003d new JSType[JSTypeNative.values().length];\n    namesToTypes \u003d new HashMap\u003cString, JSType\u003e();\n    resetForTypeCheck();\n    this.tolerateUndefinedValues \u003d tolerateUndefinedValues;\n  }",
    "begin_line": 203,
    "end_line": 210,
    "comment": "/** \n * Constructs a new type registry populated with the built-in types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.setResolveMode#216",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.setResolveMode(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode)",
    "snippet": "public void setResolveMode(ResolveMode mode) {\n    this.resolveMode \u003d mode;\n  }",
    "begin_line": 216,
    "end_line": 218,
    "comment": "/** \n * Set the current resolving mode of the type registry.\n * @see ResolveMode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.getResolveMode#220",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getResolveMode()",
    "snippet": "ResolveMode getResolveMode() {\n    return resolveMode;\n  }",
    "begin_line": 220,
    "end_line": 222,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.getErrorReporter#224",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getErrorReporter()",
    "snippet": "public ErrorReporter getErrorReporter() {\n    return reporter;\n  }",
    "begin_line": 224,
    "end_line": 226,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.shouldTolerateUndefinedValues#228",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.shouldTolerateUndefinedValues()",
    "snippet": "public boolean shouldTolerateUndefinedValues() {\n    return tolerateUndefinedValues;\n  }",
    "begin_line": 228,
    "end_line": 230,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.resetForTypeCheck#235",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resetForTypeCheck()",
    "snippet": "public void resetForTypeCheck() {\n    typesIndexedByProperty.clear();\n    eachRefTypeIndexedByProperty.clear();\n    initializeBuiltInTypes();\n    namesToTypes.clear();\n    namespaces.clear();\n    initializeRegistry();\n  }",
    "begin_line": 235,
    "end_line": 242,
    "comment": "/** \n * Reset to run the TypeCheck pass.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.initializeBuiltInTypes#244",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeBuiltInTypes()",
    "snippet": "private void initializeBuiltInTypes() {\n    // These locals shouldn\u0027t be all caps.\n    BooleanType BOOLEAN_TYPE \u003d new BooleanType(this);\n    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n\n    NullType NULL_TYPE \u003d new NullType(this);\n    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n\n    NumberType NUMBER_TYPE \u003d new NumberType(this);\n    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n\n    StringType STRING_TYPE \u003d new StringType(this);\n    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n\n    UnknownType UNKNOWN_TYPE \u003d new UnknownType(this, false);\n    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n    UnknownType checkedUnknownType \u003d new UnknownType(this, true);\n    registerNativeType(\n        JSTypeNative.CHECKED_UNKNOWN_TYPE, checkedUnknownType);\n\n    VoidType VOID_TYPE \u003d new VoidType(this);\n    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n\n    AllType ALL_TYPE \u003d new AllType(this);\n    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n\n    // Top Level Prototype (the One)\n    // The initializations of TOP_LEVEL_PROTOTYPE and OBJECT_FUNCTION_TYPE\n    // use each other\u0027s results, so at least one of them will get null\n    // instead of an actual type; however, this seems to be benign.\n    PrototypeObjectType TOP_LEVEL_PROTOTYPE \u003d\n        new PrototypeObjectType(this, null, null, true, null, null);\n    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n\n    // Object\n    FunctionType OBJECT_FUNCTION_TYPE \u003d\n        new FunctionType(this, \"Object\", null,\n            createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE),\n            null, null, true, true);\n\n    OBJECT_FUNCTION_TYPE.setPrototype(TOP_LEVEL_PROTOTYPE, null);\n    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n\n    ObjectType OBJECT_TYPE \u003d OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n\n    ObjectType OBJECT_PROTOTYPE \u003d OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n\n    // Function\n    FunctionType FUNCTION_FUNCTION_TYPE \u003d\n        new FunctionType(this, \"Function\", null,\n            createArrowType(\n                createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE),\n            null, null, true, true);\n    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n\n    ObjectType FUNCTION_PROTOTYPE \u003d FUNCTION_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n\n    NoType NO_TYPE \u003d new NoType(this);\n    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n\n    NoObjectType NO_OBJECT_TYPE \u003d new NoObjectType(this);\n    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n\n    NoObjectType NO_RESOLVED_TYPE \u003d new NoResolvedType(this);\n    registerNativeType(JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);\n\n    // Array\n    FunctionType ARRAY_FUNCTION_TYPE \u003d\n      new FunctionType(this, \"Array\", null,\n          createArrowType(createParametersWithVarArgs(ALL_TYPE), null),\n          null, null, true, true);\n    ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType \u003d\n        ARRAY_FUNCTION_TYPE.getInstanceType();\n\n    ObjectType arrayPrototype \u003d ARRAY_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n\n    ObjectType ARRAY_TYPE \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n\n    // Boolean\n    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE \u003d\n        new FunctionType(this, \"Boolean\", null,\n            createArrowType(createOptionalParameters(ALL_TYPE), BOOLEAN_TYPE),\n            null, null, true, true);\n    ObjectType booleanPrototype \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE,\n        BOOLEAN_OBJECT_FUNCTION_TYPE);\n\n    ObjectType BOOLEAN_OBJECT_TYPE \u003d\n        BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n\n    // Date\n    FunctionType DATE_FUNCTION_TYPE \u003d\n      new FunctionType(this, \"Date\", null,\n          createArrowType(\n              createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE,\n                  UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE),\n              STRING_TYPE),\n          null, null, true, true);\n    ObjectType datePrototype \u003d DATE_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n\n    ObjectType DATE_TYPE \u003d DATE_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n\n    // Error\n    FunctionType ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"Error\");\n    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n\n    ObjectType ERROR_TYPE \u003d ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n\n    // EvalError\n    FunctionType EVAL_ERROR_FUNCTION_TYPE \u003d\n        new ErrorFunctionType(this, \"EvalError\");\n    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n\n    ObjectType EVAL_ERROR_TYPE \u003d EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n\n    // RangeError\n    FunctionType RANGE_ERROR_FUNCTION_TYPE \u003d\n        new ErrorFunctionType(this, \"RangeError\");\n    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n\n    ObjectType RANGE_ERROR_TYPE \u003d RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n\n    // ReferenceError\n    FunctionType REFERENCE_ERROR_FUNCTION_TYPE \u003d\n        new ErrorFunctionType(this, \"ReferenceError\");\n    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE,\n        REFERENCE_ERROR_FUNCTION_TYPE);\n\n    ObjectType REFERENCE_ERROR_TYPE \u003d\n        REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n\n    // SyntaxError\n    FunctionType SYNTAX_ERROR_FUNCTION_TYPE \u003d\n        new ErrorFunctionType(this, \"SyntaxError\");\n    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n\n    ObjectType SYNTAX_ERROR_TYPE \u003d SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n\n    // TypeError\n    FunctionType TYPE_ERROR_FUNCTION_TYPE \u003d\n        new ErrorFunctionType(this, \"TypeError\");\n    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n\n    ObjectType TYPE_ERROR_TYPE \u003d TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n\n    // URIError\n    FunctionType URI_ERROR_FUNCTION_TYPE \u003d\n        new ErrorFunctionType(this, \"URIError\");\n    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n\n    ObjectType URI_ERROR_TYPE \u003d URI_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n\n    // Number\n    FunctionType NUMBER_OBJECT_FUNCTION_TYPE \u003d\n        new FunctionType(this, \"Number\", null,\n            createArrowType(createOptionalParameters(ALL_TYPE), NUMBER_TYPE),\n            null, null, true, true);\n    ObjectType numberPrototype \u003d NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n\n    ObjectType NUMBER_OBJECT_TYPE \u003d\n        NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n\n    // RegExp\n    FunctionType REGEXP_FUNCTION_TYPE \u003d\n      new FunctionType(this, \"RegExp\", null,\n          createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)),\n          null, null, true, true);\n    REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType \u003d\n        REGEXP_FUNCTION_TYPE.getInstanceType();\n\n    ObjectType regexpPrototype \u003d REGEXP_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n\n    ObjectType REGEXP_TYPE \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n\n    // String\n    FunctionType STRING_OBJECT_FUNCTION_TYPE \u003d\n        new FunctionType(this, \"String\", null,\n            createArrowType(createOptionalParameters(ALL_TYPE), STRING_TYPE),\n            null, null, true, true);\n    ObjectType stringPrototype \u003d STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n\n    ObjectType STRING_OBJECT_TYPE \u003d\n        STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n\n    // (null,void)\n    JSType NULL_VOID \u003d\n        createUnionType(NULL_TYPE, VOID_TYPE);\n    registerNativeType(JSTypeNative.NULL_VOID, NULL_VOID);\n\n    // (Object,string,number)\n    JSType OBJECT_NUMBER_STRING \u003d\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n\n    // (Object,string,number,boolean)\n    JSType OBJECT_NUMBER_STRING_BOOLEAN \u003d\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN,\n        OBJECT_NUMBER_STRING_BOOLEAN);\n\n    // (string,number,boolean)\n    JSType NUMBER_STRING_BOOLEAN \u003d\n        createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN,\n        NUMBER_STRING_BOOLEAN);\n\n    // (string,number)\n    JSType NUMBER_STRING \u003d createUnionType(NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n\n    // Native object properties are filled in by externs...\n\n    // (String, string)\n    JSType STRING_VALUE_OR_OBJECT_TYPE \u003d\n        createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    registerNativeType(\n        JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n\n    // (Number, number)\n    JSType NUMBER_VALUE_OR_OBJECT_TYPE \u003d\n        createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    registerNativeType(\n        JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n\n    // unknown function type, i.e. (?...) -\u003e ?\n    FunctionType U2U_FUNCTION_TYPE \u003d\n        createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n\n    // unknown constructor type, i.e. (?...) -\u003e ? with the Unknown type\n    // as instance type\n    FunctionType U2U_CONSTRUCTOR_TYPE \u003d\n        // This is equivalent to\n        // createConstructorType(UNKNOWN_TYPE, true, UNKNOWN_TYPE), but,\n        // in addition, overrides getInstanceType() to return the NoObject type\n        // instead of a new anonymous object.\n        new FunctionType(this, \"Function\", null,\n            createArrowType(\n                createParametersWithVarArgs(UNKNOWN_TYPE),\n                UNKNOWN_TYPE),\n            UNKNOWN_TYPE, null, true, true) {\n          private static final long serialVersionUID \u003d 1L;\n\n          @Override public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(\n                JSTypeNative.FUNCTION_FUNCTION_TYPE);\n          }\n        };\n\n    // The U2U_CONSTRUCTOR is weird, because it\u0027s the supertype of its\n    // own constructor.\n    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n\n    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n\n    // least function type, i.e. (All...) -\u003e NoType\n    FunctionType LEAST_FUNCTION_TYPE \u003d\n        createNativeFunctionTypeWithVarArgs(NO_TYPE, ALL_TYPE);\n    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n\n    // the \u0027this\u0027 object in the global scope\n    FunctionType GLOBAL_THIS_CTOR \u003d\n        new FunctionType(this, \"global this\", null,\n            createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE),\n            null, null, true, true);\n    ObjectType GLOBAL_THIS \u003d GLOBAL_THIS_CTOR.getInstanceType();\n    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n\n    // greatest function type, i.e. (NoType...) -\u003e All\n    FunctionType GREATEST_FUNCTION_TYPE \u003d\n        createNativeFunctionTypeWithVarArgs(ALL_TYPE, NO_TYPE);\n    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE,\n        GREATEST_FUNCTION_TYPE);\n\n    // Register the prototype property. See the comments below in\n    // registerPropertyOnType about the bootstrapping process.\n    registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n  }",
    "begin_line": 244,
    "end_line": 563,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.getConstructor#526",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getConstructor()",
    "snippet": "@Override public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(\n                JSTypeNative.FUNCTION_FUNCTION_TYPE);\n          }",
    "begin_line": 526,
    "end_line": 529,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.initializeRegistry#565",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeRegistry()",
    "snippet": "private void initializeRegistry() {\n    register(getNativeType(JSTypeNative.ARRAY_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_TYPE));\n    register(getNativeType(JSTypeNative.DATE_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE), \"Null\");\n    register(getNativeType(JSTypeNative.NUMBER_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.NUMBER_TYPE));\n    register(getNativeType(JSTypeNative.OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.ERROR_TYPE));\n    register(getNativeType(JSTypeNative.URI_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.EVAL_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.TYPE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.RANGE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REFERENCE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.SYNTAX_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REGEXP_TYPE));\n    register(getNativeType(JSTypeNative.STRING_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.STRING_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"Undefined\");\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"void\");\n    register(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE), \"Function\");\n  }",
    "begin_line": 565,
    "end_line": 589,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.register#591",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private void register(JSType type) {\n    register(type, type.toString());\n  }",
    "begin_line": 591,
    "end_line": 593,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.register#595",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType, java.lang.String)",
    "snippet": "private void register(JSType type, String name) {\n    Preconditions.checkArgument(\n        !name.contains(\"\u003c\"), \"Type names cannot contain template annotations.\");\n\n    namesToTypes.put(name, type);\n\n    // Add all the namespaces in which this name lives.\n    while (name.indexOf(\u0027.\u0027) \u003e 0) {\n      name \u003d name.substring(0, name.lastIndexOf(\u0027.\u0027));\n      namespaces.add(name);\n    }\n  }",
    "begin_line": 595,
    "end_line": 606,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.registerNativeType#608",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private void registerNativeType(JSTypeNative typeId, JSType type) {\n    nativeTypes[typeId.ordinal()] \u003d type;\n  }",
    "begin_line": 608,
    "end_line": 610,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.registerPropertyOnType#624",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerPropertyOnType(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public void registerPropertyOnType(String propertyName, JSType type) {\n    UnionTypeBuilder typeSet \u003d typesIndexedByProperty.get(propertyName);\n    if (typeSet \u003d\u003d null) {\n      typeSet \u003d new UnionTypeBuilder(this, PROPERTY_CHECKING_UNION_SIZE);\n      typesIndexedByProperty.put(propertyName, typeSet);\n    }\n\n    typeSet.addAlternate(type);\n    addReferenceTypeIndexedByProperty(propertyName, type);\n\n    // Clear cached values that depend on typesIndexedByProperty.\n    greatestSubtypeByProperty.remove(propertyName);\n  }",
    "begin_line": 624,
    "end_line": 636,
    "comment": "/** \n * Tells the type system that  {@code owner} may have a property named{@code propertyName}. This allows the registry to keep track of what types a property is defined upon. This is NOT the same as saying that  {@code owner} must have a propertynamed type. ObjectType#hasProperty attempts to minimize false positives (\"if we\u0027re not sure, then don\u0027t type check this property\"). The type registry, on the other hand, should attempt to minimize false negatives (\"if this property is assigned anywhere in the program, it must show up in the type registry\").\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.addReferenceTypeIndexedByProperty#638",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.addReferenceTypeIndexedByProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private void addReferenceTypeIndexedByProperty(\n      String propertyName, JSType type) {\n    if (type instanceof ObjectType \u0026\u0026 ((ObjectType) type).hasReferenceName()) {\n      Map\u003cString, ObjectType\u003e typeSet \u003d\n          eachRefTypeIndexedByProperty.get(propertyName);\n      if (typeSet \u003d\u003d null) {\n        typeSet \u003d Maps.newHashMap();\n        eachRefTypeIndexedByProperty.put(propertyName, typeSet);\n      }\n      ObjectType objType \u003d (ObjectType) type;\n      typeSet.put(objType.getReferenceName(), objType);\n    } else if (type instanceof NamedType) {\n      addReferenceTypeIndexedByProperty(\n          propertyName, ((NamedType) type).getReferencedType());\n    } else if (type.isUnionType()) {\n      for (JSType alternate : type.toMaybeUnionType().getAlternates()) {\n        addReferenceTypeIndexedByProperty(propertyName, alternate);\n      }\n    }\n  }",
    "begin_line": 638,
    "end_line": 657,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.unregisterPropertyOnType#667",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.unregisterPropertyOnType(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public void unregisterPropertyOnType(String propertyName, JSType type) {\n    // TODO(bashir): typesIndexedByProperty should also be updated!\n    Map\u003cString, ObjectType\u003e typeSet \u003d\n        eachRefTypeIndexedByProperty.get(propertyName);\n    if (typeSet !\u003d null) {\n      typeSet.remove(type.toObjectType().getReferenceName());\n    }\n  }",
    "begin_line": 667,
    "end_line": 674,
    "comment": "/** \n * Removes the index\u0027s reference to a property on the given type (if it is currently registered). If the property is not registered on the type yet, this method will not change internal state.\n * @param propertyName the name of the property to unregister\n * @param type the type to unregister the property on.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.getGreatestSubtypeWithProperty#680",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getGreatestSubtypeWithProperty(com.google.javascript.rhino.jstype.JSType, java.lang.String)",
    "snippet": "public JSType getGreatestSubtypeWithProperty(\n      JSType type, String propertyName) {\n    if (greatestSubtypeByProperty.containsKey(propertyName)) {\n      return greatestSubtypeByProperty.get(propertyName)\n          .getGreatestSubtype(type);\n    }\n    if (typesIndexedByProperty.containsKey(propertyName)) {\n      JSType built \u003d typesIndexedByProperty.get(propertyName).build();\n      greatestSubtypeByProperty.put(propertyName, built);\n      return built.getGreatestSubtype(type);\n    }\n    return getNativeType(NO_TYPE);\n  }",
    "begin_line": 680,
    "end_line": 692,
    "comment": "/** \n * Gets the greatest subtype of the  {@code type} that has a property{@code propertyName} defined on it.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.canPropertyBeDefined#697",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.canPropertyBeDefined(com.google.javascript.rhino.jstype.JSType, java.lang.String)",
    "snippet": "public boolean canPropertyBeDefined(JSType type, String propertyName) {\n    if (typesIndexedByProperty.containsKey(propertyName)) {\n      for (JSType alt :\n               typesIndexedByProperty.get(propertyName).getAlternates()) {\n        JSType greatestSubtype \u003d alt.getGreatestSubtype(type);\n        if (!greatestSubtype.isEmptyType()) {\n          // We\u0027ve found a type with this property. Now we just have to make\n          // sure it\u0027s not a type used for internal bookkeeping.\n          RecordType maybeRecordType \u003d greatestSubtype.toMaybeRecordType();\n          if (maybeRecordType !\u003d null \u0026\u0026 maybeRecordType.isSynthetic()) {\n            continue;\n          }\n\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
    "begin_line": 697,
    "end_line": 715,
    "comment": "/** \n * Returns whether the given property can possibly be set on the given type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.getTypesWithProperty#725",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getTypesWithProperty(java.lang.String)",
    "snippet": "public Iterable\u003cJSType\u003e getTypesWithProperty(String propertyName) {\n    if (typesIndexedByProperty.containsKey(propertyName)) {\n      return typesIndexedByProperty.get(propertyName).getAlternates();\n    } else {\n      return ImmutableList.of();\n    }\n  }",
    "begin_line": 725,
    "end_line": 731,
    "comment": "/** \n * Returns each type that has a property  {@code propertyName} defined on it.Like most types in our type system, the collection of types returned will be collapsed. This means that if a type is defined on {@code Object} and on {@code Array}, it would be reasonable for this method to return either  {@code [Object, Array]} or just {@code [Object]}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.getEachReferenceTypeWithProperty#743",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getEachReferenceTypeWithProperty(java.lang.String)",
    "snippet": "public Iterable\u003cObjectType\u003e getEachReferenceTypeWithProperty(\n      String propertyName) {\n    if (eachRefTypeIndexedByProperty.containsKey(propertyName)) {\n      return eachRefTypeIndexedByProperty.get(propertyName).values();\n    } else {\n      return ImmutableList.of();\n    }\n  }",
    "begin_line": 743,
    "end_line": 750,
    "comment": "/** \n * Returns each reference type that has a property  {@code propertyName}defined on it. Unlike most types in our type system, the collection of types returned will not be collapsed. This means that if a type is defined on {@code Object} and on {@code Array}, this method must return {@code [Object, Array]}. It would not be correct to collapse them to {@code [Object]}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.findCommonSuperObject#755",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.findCommonSuperObject(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "ObjectType findCommonSuperObject(ObjectType a, ObjectType b) {\n    List\u003cObjectType\u003e stackA \u003d getSuperStack(a);\n    List\u003cObjectType\u003e stackB \u003d getSuperStack(b);\n\n    ObjectType result \u003d getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n    while (!stackA.isEmpty() \u0026\u0026 !stackB.isEmpty()) {\n      ObjectType currentA \u003d stackA.remove(stackA.size() - 1);\n      ObjectType currentB \u003d stackB.remove(stackB.size() - 1);\n      if (currentA.isEquivalentTo(currentB)) {\n        result \u003d currentA;\n      } else {\n        return result;\n      }\n    }\n    return result;\n  }",
    "begin_line": 755,
    "end_line": 770,
    "comment": "/** \n * Finds the common supertype of the two given object types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.getSuperStack#772",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getSuperStack(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "private static List\u003cObjectType\u003e getSuperStack(ObjectType a) {\n    List\u003cObjectType\u003e stack \u003d Lists.newArrayListWithExpectedSize(5);\n    for (ObjectType current \u003d a;\n         current !\u003d null;\n         current \u003d current.getImplicitPrototype()) {\n      stack.add(current);\n    }\n    return stack;\n  }",
    "begin_line": 772,
    "end_line": 780,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.incrementGeneration#787",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.incrementGeneration()",
    "snippet": "public void incrementGeneration() {\n    for (NamedType type : resolvedNamedTypes.values()) {\n      type.clearResolved();\n    }\n    unresolvedNamedTypes.putAll(resolvedNamedTypes);\n    resolvedNamedTypes.clear();\n  }",
    "begin_line": 787,
    "end_line": 793,
    "comment": "/** \n * Increments the current generation. Clients must call this in order to move to the next generation of type resolution, allowing types to attempt resolution again.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.isLastGeneration#795",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.isLastGeneration()",
    "snippet": "boolean isLastGeneration() {\n    return lastGeneration;\n  }",
    "begin_line": 795,
    "end_line": 797,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.setLastGeneration#803",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.setLastGeneration(boolean)",
    "snippet": "public void setLastGeneration(boolean lastGeneration) {\n    this.lastGeneration \u003d lastGeneration;\n  }",
    "begin_line": 803,
    "end_line": 805,
    "comment": "/** \n * Sets whether this is the last generation. In the last generation, {@link NamedType} warns about unresolved types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.registerTypeImplementingInterface#813",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerTypeImplementingInterface(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "void registerTypeImplementingInterface(\n      FunctionType type, ObjectType interfaceInstance) {\n    interfaceToImplementors.put(interfaceInstance.getReferenceName(), type);\n  }",
    "begin_line": 813,
    "end_line": 816,
    "comment": "/** \n * Tells the type system that  {@code type} implements interface {@code interfaceInstance}. {@code inter} must be an ObjectType for the instance of the interface as itcould be a named type and not yet have the constructor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.getDirectImplementors#824",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getDirectImplementors(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "public Collection\u003cFunctionType\u003e getDirectImplementors(\n      ObjectType interfaceInstance) {\n    return interfaceToImplementors.get(interfaceInstance.getReferenceName());\n  }",
    "begin_line": 824,
    "end_line": 827,
    "comment": "/** \n * Returns a collection of types that directly implement  {@code interfaceInstance}.  Subtypes of implementing types are not guaranteed to be returned.   {@code interfaceInstance} must be an ObjectType for theinstance of the interface.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.declareType#837",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.declareType(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public boolean declareType(String name, JSType t) {\n    if (namesToTypes.containsKey(name)) {\n      return false;\n    }\n    register(t, name);\n    return true;\n  }",
    "begin_line": 837,
    "end_line": 843,
    "comment": "/** \n * Records declared global type names. This makes resolution faster and more robust in the common case.\n * @param name The name of the type to be recorded.\n * @param t The actual type being associated with the name.\n * @return True if this name is not already defined, false otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.overwriteDeclaredType#849",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.overwriteDeclaredType(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public void overwriteDeclaredType(String name, JSType t) {\n    Preconditions.checkState(namesToTypes.containsKey(name));\n    register(t, name);\n  }",
    "begin_line": 849,
    "end_line": 852,
    "comment": "/** \n * Overrides a declared global type name. Throws an exception if this type name hasn\u0027t been declared yet.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.forwardDeclareType#858",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.forwardDeclareType(java.lang.String)",
    "snippet": "public void forwardDeclareType(String name) {\n    forwardDeclaredTypes.add(name);\n  }",
    "begin_line": 858,
    "end_line": 860,
    "comment": "/** \n * Records a forward-declared type name. We will not emit errors if this type name never resolves to anything.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.isForwardDeclaredType#865",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.isForwardDeclaredType(java.lang.String)",
    "snippet": "public boolean isForwardDeclaredType(String name) {\n    return forwardDeclaredTypes.contains(name);\n  }",
    "begin_line": 865,
    "end_line": 867,
    "comment": "/** \n * Whether this is a forward-declared type name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.hasNamespace#870",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.hasNamespace(java.lang.String)",
    "snippet": "public boolean hasNamespace(String name) {\n    return namespaces.contains(name);\n  }",
    "begin_line": 870,
    "end_line": 872,
    "comment": "/** \n * Determines whether the given JS package exists. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.getType#880",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getType(java.lang.String)",
    "snippet": "public JSType getType(String jsTypeName) {\n    // TODO(user): Push every local type name out of namesToTypes so that\n    // NamedType#resolve is correct.\n    TemplateType templateType \u003d templateTypes.get(jsTypeName);\n    if (templateType !\u003d null) {\n      return templateType;\n    }\n    return namesToTypes.get(jsTypeName);\n  }",
    "begin_line": 880,
    "end_line": 888,
    "comment": "/** \n * Looks up a type by name.\n * @param jsTypeName The name string.\n * @return the corresponding JSType object or {@code null} it cannot be found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.getNativeType#890",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
    "snippet": "public JSType getNativeType(JSTypeNative typeId) {\n    return nativeTypes[typeId.ordinal()];\n  }",
    "begin_line": 890,
    "end_line": 892,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.getNativeObjectType#894",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative)",
    "snippet": "public ObjectType getNativeObjectType(JSTypeNative typeId) {\n    return (ObjectType) getNativeType(typeId);\n  }",
    "begin_line": 894,
    "end_line": 896,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.getNativeFunctionType#898",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative)",
    "snippet": "public FunctionType getNativeFunctionType(JSTypeNative typeId) {\n    return (FunctionType) getNativeType(typeId);\n  }",
    "begin_line": 898,
    "end_line": 900,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.getType#914",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getType(com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e, java.lang.String, java.lang.String, int, int)",
    "snippet": "public JSType getType(StaticScope\u003cJSType\u003e scope, String jsTypeName,\n      String sourceName, int lineno, int charno) {\n    JSType type \u003d getType(jsTypeName);\n    if (type \u003d\u003d null) {\n      // TODO(user): Each instance should support named type creation using\n      // interning.\n      NamedType namedType \u003d\n          new NamedType(this, jsTypeName, sourceName, lineno, charno);\n      unresolvedNamedTypes.put(scope, namedType);\n      type \u003d namedType;\n    }\n    return type;\n  }",
    "begin_line": 914,
    "end_line": 926,
    "comment": "/** \n * Looks up a type by name. To allow for forward references to types, an unrecognized string has to be bound to a NamedType object that will be resolved later.\n * @param scope A scope for doing type name resolution.\n * @param jsTypeName The name string.\n * @param sourceName The name of the source file where this reference appears.\n * @param lineno The line number of the reference.\n * @return a NamedType if the string argument is not one of the known types,otherwise the corresponding JSType object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.clearNamedTypes#933",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.clearNamedTypes()",
    "snippet": "public void clearNamedTypes() {\n    resolvedNamedTypes.clear();\n    unresolvedNamedTypes.clear();\n  }",
    "begin_line": 933,
    "end_line": 936,
    "comment": "/** \n * Flushes out the current resolved and unresolved Named Types from the type registry.  This is intended to be used ONLY before a compile is run.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.resolveTypesInScope#941",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resolveTypesInScope(com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "public void resolveTypesInScope(StaticScope\u003cJSType\u003e scope) {\n    for (NamedType type : unresolvedNamedTypes.get(scope)) {\n      type.resolve(reporter, scope);\n    }\n\n    resolvedNamedTypes.putAll(scope, unresolvedNamedTypes.removeAll(scope));\n\n    if (scope !\u003d null \u0026\u0026 scope.getParentScope() \u003d\u003d null) {\n      // By default, the global \"this\" type is just an anonymous object.\n      // If the user has defined a Window type, make the Window the\n      // implicit prototype of \"this\".\n      PrototypeObjectType globalThis \u003d (PrototypeObjectType) getNativeType(\n          JSTypeNative.GLOBAL_THIS);\n      JSType windowType \u003d getType(\"Window\");\n      if (globalThis.isUnknownType()) {\n        ObjectType windowObjType \u003d ObjectType.cast(windowType);\n        if (windowObjType !\u003d null) {\n          globalThis.setImplicitPrototype(windowObjType);\n        } else {\n          globalThis.setImplicitPrototype(\n              getNativeObjectType(JSTypeNative.OBJECT_TYPE));\n        }\n      }\n    }\n  }",
    "begin_line": 941,
    "end_line": 965,
    "comment": "/** \n * Resolve all the unresolved types in the given scope.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createOptionalType#971",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public JSType createOptionalType(JSType type) {\n    if (type instanceof UnknownType || type.isAllType()) {\n      return type;\n    } else {\n      return createUnionType(type, getNativeType(JSTypeNative.VOID_TYPE));\n    }\n  }",
    "begin_line": 971,
    "end_line": 977,
    "comment": "/** \n * Creates a type representing optional values of the given type.\n * @return the union of the type and the void type\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createDefaultObjectUnion#983",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createDefaultObjectUnion(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public JSType createDefaultObjectUnion(JSType type) {\n    if (type.isTemplateType()) {\n      // Template types represent the substituted type exactly and should\n      // not be wrapped.\n      return type;\n    } else {\n      return shouldTolerateUndefinedValues()\n        ? createOptionalNullableType(type)\n        : createNullableType(type);\n    }\n  }",
    "begin_line": 983,
    "end_line": 993,
    "comment": "/** \n * Creates a type representing nullable values of the given type.\n * @return the union of the type and the Null type\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createNullableType#999",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createNullableType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public JSType createNullableType(JSType type) {\n    return createUnionType(type, getNativeType(JSTypeNative.NULL_TYPE));\n  }",
    "begin_line": 999,
    "end_line": 1001,
    "comment": "/** \n * Creates a type representing nullable values of the given type.\n * @return the union of the type and the Null type\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createOptionalNullableType#1007",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalNullableType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public JSType createOptionalNullableType(JSType type) {\n    return createUnionType(type, getNativeType(JSTypeNative.VOID_TYPE),\n        getNativeType(JSTypeNative.NULL_TYPE));\n  }",
    "begin_line": 1007,
    "end_line": 1010,
    "comment": "/** \n * Creates a nullable and undefine-able value of the given type.\n * @return The union of the type and null and undefined.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createUnionType#1015",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createUnionType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public JSType createUnionType(JSType... variants) {\n    UnionTypeBuilder builder \u003d new UnionTypeBuilder(this);\n    for (JSType type : variants) {\n      builder.addAlternate(type);\n    }\n    return builder.build();\n  }",
    "begin_line": 1015,
    "end_line": 1021,
    "comment": "/** \n * Creates a union type whose variants are the arguments.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createUnionType#1027",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createUnionType(com.google.javascript.rhino.jstype.JSTypeNative)",
    "snippet": "public JSType createUnionType(JSTypeNative... variants) {\n    UnionTypeBuilder builder \u003d new UnionTypeBuilder(this);\n    for (JSTypeNative typeId : variants) {\n      builder.addAlternate(getNativeType(typeId));\n    }\n    return builder.build();\n  }",
    "begin_line": 1027,
    "end_line": 1033,
    "comment": "/** \n * Creates a union type whose variants are the built-in types specified by the arguments.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createEnumType#1038",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createEnumType(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public EnumType createEnumType(\n      String name, Node source, JSType elementsType) {\n    return new EnumType(this, name, source, elementsType);\n  }",
    "begin_line": 1038,
    "end_line": 1041,
    "comment": "/** \n * Creates an enum type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createArrowType#1051",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createArrowType(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "ArrowType createArrowType(Node parametersNode, JSType returnType) {\n    return new ArrowType(this, parametersNode, returnType);\n  }",
    "begin_line": 1051,
    "end_line": 1053,
    "comment": "/** \n * Creates an arrow type, an abstract representation of the parameters and return value of a function.\n * @param parametersNode the parameters\u0027 types, formatted as a Node withparam names and optionality info.\n * @param returnType the function\u0027s return type\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createArrowType#1061",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createArrowType(com.google.javascript.rhino.Node)",
    "snippet": "ArrowType createArrowType(Node parametersNode) {\n    return new ArrowType(this, parametersNode, null);\n  }",
    "begin_line": 1061,
    "end_line": 1063,
    "comment": "/** \n * Creates an arrow type with an unknown return type.\n * @param parametersNode the parameters\u0027 types, formatted as a Node withparam names and optionality info.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createFunctionType#1071",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public FunctionType createFunctionType(\n      JSType returnType, JSType... parameterTypes) {\n    return createFunctionType(returnType, createParameters(parameterTypes));\n  }",
    "begin_line": 1071,
    "end_line": 1074,
    "comment": "/** \n * Creates a function type.\n * @param returnType the function\u0027s return type\n * @param parameterTypes the parameters\u0027 types\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createFunctionTypeWithVarArgs#1083",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, java.util.List\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "public FunctionType createFunctionTypeWithVarArgs(\n      JSType returnType, List\u003cJSType\u003e parameterTypes) {\n    return createFunctionType(\n        returnType, createParametersWithVarArgs(parameterTypes));\n  }",
    "begin_line": 1083,
    "end_line": 1087,
    "comment": "/** \n * Creates a function type. The last parameter type of the function is considered a variable length argument.\n * @param returnType the function\u0027s return type\n * @param parameterTypes the parameters\u0027 types\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createFunctionType#1095",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, java.util.List\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "public FunctionType createFunctionType(\n      JSType returnType, List\u003cJSType\u003e parameterTypes) {\n    return createFunctionType(returnType, createParameters(parameterTypes));\n  }",
    "begin_line": 1095,
    "end_line": 1098,
    "comment": "/** \n * Creates a function type.\n * @param returnType the function\u0027s return type\n * @param parameterTypes the parameters\u0027 types\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createFunctionTypeWithVarArgs#1107",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public FunctionType createFunctionTypeWithVarArgs(\n      JSType returnType, JSType... parameterTypes) {\n    return createFunctionType(\n        returnType, createParametersWithVarArgs(parameterTypes));\n  }",
    "begin_line": 1107,
    "end_line": 1111,
    "comment": "/** \n * Creates a function type. The last parameter type of the function is considered a variable length argument.\n * @param returnType the function\u0027s return type\n * @param parameterTypes the parameters\u0027 types\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createNativeFunctionTypeWithVarArgs#1120",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createNativeFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private FunctionType createNativeFunctionTypeWithVarArgs(\n      JSType returnType, JSType... parameterTypes) {\n    return createNativeFunctionType(\n        returnType, createParametersWithVarArgs(parameterTypes));\n  }",
    "begin_line": 1120,
    "end_line": 1124,
    "comment": "/** \n * Creates a function type. The last parameter type of the function is considered a variable length argument.\n * @param returnType the function\u0027s return type\n * @param parameterTypes the parameters\u0027 types\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createConstructorType#1132",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createConstructorType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public FunctionType createConstructorType(\n      JSType returnType, JSType... parameterTypes) {\n    return createConstructorType(\n        null, null, createParameters(parameterTypes), returnType, null);\n  }",
    "begin_line": 1132,
    "end_line": 1136,
    "comment": "/** \n * Creates a function type which can act as a constructor.\n * @param returnType the function\u0027s return type\n * @param parameterTypes the parameters\u0027 types\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createConstructorTypeWithVarArgs#1145",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createConstructorTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private FunctionType createConstructorTypeWithVarArgs(\n      JSType returnType, JSType... parameterTypes) {\n    return createConstructorType(\n        null, null, createParametersWithVarArgs(parameterTypes), returnType,\n        null);\n  }",
    "begin_line": 1145,
    "end_line": 1150,
    "comment": "/** \n * Creates a function type which can act as a constructor. The last parameter type of the constructor is considered a variable length argument.\n * @param returnType the function\u0027s return type\n * @param parameterTypes the parameters\u0027 types\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createFunctionType#1159",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.JSType, java.util.List\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "public JSType createFunctionType(ObjectType instanceType,\n      JSType returnType, List\u003cJSType\u003e parameterTypes) {\n    return new FunctionBuilder(this)\n        .withParamsNode(createParameters(parameterTypes))\n        .withReturnType(returnType)\n        .withTypeOfThis(instanceType)\n        .build();\n  }",
    "begin_line": 1159,
    "end_line": 1166,
    "comment": "/** \n * Creates a function type in which  {@code this} refers to an object instance.\n * @param instanceType the type of {@code this}\n * @param returnType the function\u0027s return type\n * @param parameterTypes the parameters\u0027 types\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createFunctionTypeWithVarArgs#1177",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.JSType, java.util.List\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "public JSType createFunctionTypeWithVarArgs(ObjectType instanceType,\n      JSType returnType, List\u003cJSType\u003e parameterTypes) {\n    return new FunctionBuilder(this)\n        .withParamsNode(createParametersWithVarArgs(parameterTypes))\n        .withReturnType(returnType)\n        .withTypeOfThis(instanceType)\n        .build();\n  }",
    "begin_line": 1177,
    "end_line": 1184,
    "comment": "/** \n * Creates a function type in which  {@code this} refers to an object instance.The last parameter type of the function is considered a variable length argument.\n * @param instanceType the type of {@code this}\n * @param returnType the function\u0027s return type\n * @param parameterTypes the parameters\u0027 types\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createParameters#1192",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParameters(java.util.List\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "public Node createParameters(List\u003cJSType\u003e parameterTypes) {\n    return createParameters(\n        parameterTypes.toArray(new JSType[parameterTypes.size()]));\n  }",
    "begin_line": 1192,
    "end_line": 1195,
    "comment": "/** \n * Creates a tree hierarchy representing a typed argument list.\n * @param parameterTypes the parameter types.\n * @return a tree hierarchy representing a typed argument list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createParametersWithVarArgs#1205",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParametersWithVarArgs(java.util.List\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "public Node createParametersWithVarArgs(List\u003cJSType\u003e parameterTypes) {\n    return createParametersWithVarArgs(\n        parameterTypes.toArray(new JSType[parameterTypes.size()]));\n  }",
    "begin_line": 1205,
    "end_line": 1208,
    "comment": "/** \n * Creates a tree hierarchy representing a typed argument list. The last parameter type is considered a variable length argument.\n * @param parameterTypes the parameter types. The last element of this arrayis considered a variable length argument.\n * @return a tree hierarchy representing a typed argument list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createParameters#1216",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParameters(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public Node createParameters(JSType... parameterTypes) {\n    return createParameters(false, parameterTypes);\n  }",
    "begin_line": 1216,
    "end_line": 1218,
    "comment": "/** \n * Creates a tree hierarchy representing a typed argument list.\n * @param parameterTypes the parameter types.\n * @return a tree hierarchy representing a typed argument list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createParametersWithVarArgs#1228",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParametersWithVarArgs(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public Node createParametersWithVarArgs(JSType... parameterTypes) {\n    return createParameters(true, parameterTypes);\n  }",
    "begin_line": 1228,
    "end_line": 1230,
    "comment": "/** \n * Creates a tree hierarchy representing a typed argument list. The last parameter type is considered a variable length argument.\n * @param parameterTypes the parameter types. The last element of this arrayis considered a variable length argument.\n * @return a tree hierarchy representing a typed argument list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createOptionalParameters#1236",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalParameters(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public Node createOptionalParameters(JSType... parameterTypes) {\n    FunctionParamBuilder builder \u003d new FunctionParamBuilder(this);\n    builder.addOptionalParams(parameterTypes);\n    return builder.build();\n  }",
    "begin_line": 1236,
    "end_line": 1240,
    "comment": "/** \n * Creates a tree hierarchy representing a typed parameter list in which every parameter is optional.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createParameters#1252",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParameters(boolean, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "private Node createParameters(boolean lastVarArgs, JSType... parameterTypes) {\n    FunctionParamBuilder builder \u003d new FunctionParamBuilder(this);\n    int max \u003d parameterTypes.length - 1;\n    for (int i \u003d 0; i \u003c\u003d max; i++) {\n      if (lastVarArgs \u0026\u0026 i \u003d\u003d max) {\n        builder.addVarArgs(parameterTypes[i]);\n      } else {\n        builder.addRequiredParams(parameterTypes[i]);\n      }\n    }\n    return builder.build();\n  }",
    "begin_line": 1252,
    "end_line": 1263,
    "comment": "/** \n * Creates a tree hierarchy representing a typed argument list.\n * @param lastVarArgs whether the last type should considered as a variablelength argument.\n * @param parameterTypes the parameter types. The last element of this arrayis considered a variable length argument is  {@code lastVarArgs} is{@code true}.\n * @return a tree hierarchy representing a typed argument list\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createFunctionType#1272",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public FunctionType createFunctionType(JSType returnType,\n      boolean lastVarArgs, JSType... parameterTypes) {\n    if (lastVarArgs) {\n      return createFunctionTypeWithVarArgs(returnType, parameterTypes);\n    } else {\n      return createFunctionType(returnType, parameterTypes);\n    }\n  }",
    "begin_line": 1272,
    "end_line": 1279,
    "comment": "/** \n * Creates a function type.\n * @param returnType the function\u0027s return type\n * @param lastVarArgs whether the last parameter type should be considered asan extensible var_args parameter\n * @param parameterTypes the parameters\u0027 types\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createFunctionTypeWithNewReturnType#1287",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionTypeWithNewReturnType(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public FunctionType createFunctionTypeWithNewReturnType(\n      FunctionType existingFunctionType, JSType returnType) {\n    return new FunctionBuilder(this)\n        .copyFromOtherFunction(existingFunctionType)\n        .withReturnType(returnType)\n        .build();\n  }",
    "begin_line": 1287,
    "end_line": 1293,
    "comment": "/** \n * Creates a new function type based on an existing function type but with a new return type.\n * @param existingFunctionType the existing function type.\n * @param returnType the new return type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createFunctionTypeWithNewThisType#1301",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionTypeWithNewThisType(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "public FunctionType createFunctionTypeWithNewThisType(\n      FunctionType existingFunctionType, ObjectType thisType) {\n    return new FunctionBuilder(this)\n        .copyFromOtherFunction(existingFunctionType)\n        .withTypeOfThis(thisType)\n        .build();\n  }",
    "begin_line": 1301,
    "end_line": 1307,
    "comment": "/** \n * Creates a new function type based on an existing function type but with a new  {@code this} type.\n * @param existingFunctionType the existing function type.\n * @param thisType the new this type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createFunctionType#1315",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
    "snippet": "public FunctionType createFunctionType(\n      JSType returnType, Node parameters) {\n    return new FunctionBuilder(this)\n        .withParamsNode(parameters)\n        .withReturnType(returnType)\n        .build();\n  }",
    "begin_line": 1315,
    "end_line": 1321,
    "comment": "/** \n * @param parameters the function\u0027s parameters or {@code null}to indicate that the parameter types are unknown.\n * @param returnType the function\u0027s return type or {@code null} to indicatethat the return type is unknown.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createNativeFunctionType#1323",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createNativeFunctionType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
    "snippet": "private FunctionType createNativeFunctionType(\n      JSType returnType, Node parameters) {\n    return new FunctionBuilder(this)\n        .withParamsNode(parameters)\n        .withReturnType(returnType)\n        .forNativeType()\n        .build();\n  }",
    "begin_line": 1323,
    "end_line": 1330,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createConstructorType#1339",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createConstructorType(com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public FunctionType createConstructorType(JSType returnType,\n      boolean lastVarArgs, JSType... parameterTypes) {\n    if (lastVarArgs) {\n      return createConstructorTypeWithVarArgs(returnType, parameterTypes);\n    } else {\n      return createConstructorType(returnType, parameterTypes);\n    }\n  }",
    "begin_line": 1339,
    "end_line": 1346,
    "comment": "/** \n * Creates a function type which can act as a constructor.\n * @param returnType the function\u0027s return type\n * @param lastVarArgs whether the last parameter type should be considered asan extensible var_args parameter\n * @param parameterTypes the parameters\u0027 types\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createObjectType#1351",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createObjectType(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "public ObjectType createObjectType(ObjectType implicitPrototype) {\n    return createObjectType(null, null, implicitPrototype);\n  }",
    "begin_line": 1351,
    "end_line": 1353,
    "comment": "/** \n * Create an object type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createRecordType#1358",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createRecordType(java.util.Map\u003cjava.lang.String,com.google.javascript.rhino.jstype.RecordTypeBuilder.RecordProperty\u003e)",
    "snippet": "public RecordType createRecordType(Map\u003cString, RecordProperty\u003e properties) {\n    return new RecordType(this, properties);\n  }",
    "begin_line": 1358,
    "end_line": 1360,
    "comment": "/** \n * Creates a record type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createObjectType#1365",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createObjectType(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "public ObjectType createObjectType(String name, Node n,\n      ObjectType implicitPrototype) {\n    return new PrototypeObjectType(this, name, implicitPrototype);\n  }",
    "begin_line": 1365,
    "end_line": 1368,
    "comment": "/** \n * Create an object type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createAnonymousObjectType#1374",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createAnonymousObjectType(com.google.javascript.rhino.JSDocInfo)",
    "snippet": "public ObjectType createAnonymousObjectType(JSDocInfo info) {\n    PrototypeObjectType type \u003d new PrototypeObjectType(this, null, null);\n    type.setPrettyPrint(true);\n    type.setJSDocInfo(info);\n    return type;\n  }",
    "begin_line": 1374,
    "end_line": 1379,
    "comment": "/** \n * Create an anonymous object type.\n * @param info Used to mark object literals as structs; can be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.resetImplicitPrototype#1389",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resetImplicitPrototype(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "public boolean resetImplicitPrototype(\n      JSType type, ObjectType newImplicitProto) {\n    if (type instanceof PrototypeObjectType) {\n      PrototypeObjectType poType \u003d (PrototypeObjectType) type;\n      poType.clearCachedValues();\n      poType.setImplicitPrototype(newImplicitProto);\n      return true;\n    }\n    return false;\n  }",
    "begin_line": 1389,
    "end_line": 1398,
    "comment": "/** \n * Set the implicit prototype if it\u0027s possible to do so.\n * @return True if we were able to set the implicit prototype successfully,false if it was not possible to do so for some reason. There are a few different reasons why this could fail: for example, numbers can\u0027t be implicit prototypes, and we don\u0027t want to change the implicit prototype if other classes have already subclassed this one.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createNativeAnonymousObjectType#1403",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createNativeAnonymousObjectType()",
    "snippet": "ObjectType createNativeAnonymousObjectType() {\n    PrototypeObjectType type \u003d\n        new PrototypeObjectType(this, null, null, true, null, null);\n    type.setPrettyPrint(true);\n    return type;\n  }",
    "begin_line": 1403,
    "end_line": 1408,
    "comment": "/** \n * Create an anonymous object type for a native type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createConstructorType#1422",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createConstructorType(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, ImmutableList\u003cString\u003e)",
    "snippet": "public FunctionType createConstructorType(String name, Node source,\n      Node parameters, JSType returnType, ImmutableList\u003cString\u003e templateKeys) {\n    return new FunctionType(this, name, source,\n        createArrowType(parameters, returnType), null,\n        templateKeys, true, false);\n  }",
    "begin_line": 1422,
    "end_line": 1427,
    "comment": "/** \n * Creates a constructor function type.\n * @param name the function\u0027s name or {@code null} to indicate that thefunction is anonymous.\n * @param source the node defining this function. Its type( {@link Node#getType()}) must be  {@link Token#FUNCTION}.\n * @param parameters the function\u0027s parameters or {@code null}to indicate that the parameter types are unknown.\n * @param returnType the function\u0027s return type or {@code null} to indicatethat the return type is unknown.\n * @param templateKeys the templatized type keys for the class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createInterfaceType#1435",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createInterfaceType(java.lang.String, com.google.javascript.rhino.Node)",
    "snippet": "public FunctionType createInterfaceType(String name, Node source) {\n    return FunctionType.forInterface(this, name, source);\n  }",
    "begin_line": 1435,
    "end_line": 1437,
    "comment": "/** \n * Creates an interface function type.\n * @param name the function\u0027s name\n * @param source the node defining this function. Its type( {@link Node#getType()}) must be  {@link Token#FUNCTION}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createParameterizedType#1442",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParameterizedType(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public ParameterizedType createParameterizedType(\n      ObjectType objectType, JSType parameterType) {\n    return new ParameterizedType(this, objectType, parameterType);\n  }",
    "begin_line": 1442,
    "end_line": 1445,
    "comment": "/** \n * Creates a parameterized type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createTemplatizedType#1453",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createTemplatizedType(com.google.javascript.rhino.jstype.JSType, ImmutableList\u003cJSType\u003e)",
    "snippet": "public JSType createTemplatizedType(\n      JSType baseType, ImmutableList\u003cJSType\u003e templatizedTypes) {\n    // Only instance object types can currently be templatized; extend this\n    // logic when more types can be templatized.\n    if (baseType instanceof InstanceObjectType) {\n      ObjectType baseObjType \u003d baseType.toObjectType();\n      return new InstanceObjectType(\n          this, baseObjType.getConstructor(), baseObjType.isNativeObjectType(),\n          templatizedTypes);\n    } else {\n      throw new IllegalArgumentException(\n          \"Only instance object types can be templatized\");\n    }\n  }",
    "begin_line": 1453,
    "end_line": 1466,
    "comment": "/** \n * Creates a templatized instance of the specified type.\n * @param baseType the type to be templatized.\n * @param templatizedTypes a list of the template JSTypes. Will be matched bylist order to the template keys specified in the constructor function.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createNamedType#1472",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createNamedType(java.lang.String, java.lang.String, int, int)",
    "snippet": "@VisibleForTesting\n  public JSType createNamedType(String reference,\n      String sourceName, int lineno, int charno) {\n    return new NamedType(this, reference, sourceName, lineno, charno);\n  }",
    "begin_line": 1472,
    "end_line": 1475,
    "comment": "/** \n * Creates a named type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.identifyNonNullableName#1480",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.identifyNonNullableName(java.lang.String)",
    "snippet": "public void identifyNonNullableName(String name) {\n    Preconditions.checkNotNull(name);\n    nonNullableTypeNames.add(name);\n  }",
    "begin_line": 1480,
    "end_line": 1483,
    "comment": "/** \n * Identifies the name of a typedef or enum before we actually declare it.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createFromTypeNodes#1491",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFromTypeNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "public JSType createFromTypeNodes(Node n, String sourceName,\n      StaticScope\u003cJSType\u003e scope) {\n    if (resolveMode \u003d\u003d ResolveMode.LAZY_EXPRESSIONS) {\n      // If the type expression doesn\u0027t contain any names, just\n      // resolve it anyway.\n      boolean hasNames \u003d hasTypeName(n);\n      if (hasNames) {\n        return new UnresolvedTypeExpression(this, n, sourceName);\n      }\n    }\n    return createFromTypeNodesInternal(n, sourceName, scope);\n  }",
    "begin_line": 1491,
    "end_line": 1502,
    "comment": "/** \n * Creates a JSType from the nodes representing a type.\n * @param n The node with type info.\n * @param sourceName The source file name.\n * @param scope A scope for doing type name lookups.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.hasTypeName#1504",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.hasTypeName(com.google.javascript.rhino.Node)",
    "snippet": "private boolean hasTypeName(Node n) {\n    if (n.getType() \u003d\u003d Token.STRING) {\n      return true;\n    }\n\n    for (Node child \u003d n.getFirstChild();\n         child !\u003d null; child \u003d child.getNext()) {\n      if (hasTypeName(child)) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
    "begin_line": 1504,
    "end_line": 1517,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createFromTypeNodesInternal#1520",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFromTypeNodesInternal(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "private JSType createFromTypeNodesInternal(Node n, String sourceName,\n      StaticScope\u003cJSType\u003e scope) {\n    switch (n.getType()) {\n      case Token.LC: // Record type.\n        return createRecordTypeFromNodes(\n            n.getFirstChild(), sourceName, scope);\n\n      case Token.BANG: // Not nullable\n        return createFromTypeNodesInternal(\n            n.getFirstChild(), sourceName, scope)\n            .restrictByNotNullOrUndefined();\n\n      case Token.QMARK: // Nullable or unknown\n        Node firstChild \u003d n.getFirstChild();\n        if (firstChild \u003d\u003d null) {\n          return getNativeType(UNKNOWN_TYPE);\n        }\n        return createDefaultObjectUnion(\n            createFromTypeNodesInternal(\n                firstChild, sourceName, scope));\n\n      case Token.EQUALS: // Optional\n        return createOptionalType(\n            createFromTypeNodesInternal(\n                n.getFirstChild(), sourceName, scope));\n\n      case Token.ELLIPSIS: // Var args\n        return createOptionalType(\n            createFromTypeNodesInternal(\n                n.getFirstChild(), sourceName, scope));\n\n      case Token.STAR: // The AllType\n        return getNativeType(ALL_TYPE);\n\n      case Token.LB: // Array type\n        // TODO(nicksantos): Enforce membership restrictions on the Array.\n        return getNativeType(ARRAY_TYPE);\n\n      case Token.PIPE: // Union type\n        UnionTypeBuilder builder \u003d new UnionTypeBuilder(this);\n        for (Node child \u003d n.getFirstChild(); child !\u003d null;\n             child \u003d child.getNext()) {\n          builder.addAlternate(\n              createFromTypeNodesInternal(child, sourceName, scope));\n        }\n        return builder.build();\n\n      case Token.EMPTY: // When the return value of a function is not specified\n        return getNativeType(UNKNOWN_TYPE);\n\n      case Token.VOID: // Only allowed in the return value of a function.\n        return getNativeType(VOID_TYPE);\n\n      case Token.STRING:\n        JSType namedType \u003d getType(scope, n.getString(), sourceName,\n            n.getLineno(), n.getCharno());\n        if (resolveMode !\u003d ResolveMode.LAZY_NAMES) {\n          namedType \u003d namedType.resolveInternal(reporter, scope);\n        }\n        if ((namedType instanceof ObjectType) \u0026\u0026\n            !(nonNullableTypeNames.contains(n.getString()))) {\n          Node typeList \u003d n.getFirstChild();\n          if (typeList !\u003d null \u0026\u0026\n              (\"Array\".equals(n.getString()) ||\n               \"Object\".equals(n.getString()))) {\n            JSType parameterType \u003d\n                createFromTypeNodesInternal(\n                    typeList.getLastChild(), sourceName, scope);\n            namedType \u003d new ParameterizedType(\n                this, (ObjectType) namedType, parameterType);\n            if (typeList.hasMoreThanOneChild()) {\n              JSType indexType \u003d\n                  createFromTypeNodesInternal(\n                      typeList.getFirstChild(), sourceName, scope);\n              namedType \u003d new IndexedType(\n                  this, (ObjectType) namedType, indexType);\n            }\n          }\n          return createDefaultObjectUnion(namedType);\n        } else {\n          return namedType;\n        }\n\n      case Token.FUNCTION:\n        ObjectType thisType \u003d null;\n        boolean isConstructor \u003d false;\n        Node current \u003d n.getFirstChild();\n        if (current.getType() \u003d\u003d Token.THIS ||\n            current.getType() \u003d\u003d Token.NEW) {\n          Node contextNode \u003d current.getFirstChild();\n          thisType \u003d\n              ObjectType.cast(\n                  createFromTypeNodesInternal(\n                      contextNode, sourceName, scope)\n                  .restrictByNotNullOrUndefined());\n          if (thisType \u003d\u003d null) {\n            reporter.warning(\n                ScriptRuntime.getMessage0(\n                    current.getType() \u003d\u003d Token.THIS ?\n                    \"msg.jsdoc.function.thisnotobject\" :\n                    \"msg.jsdoc.function.newnotobject\"),\n                sourceName,\n                contextNode.getLineno(), contextNode.getCharno());\n          }\n\n          isConstructor \u003d current.getType() \u003d\u003d Token.NEW;\n          current \u003d current.getNext();\n        }\n\n        FunctionParamBuilder paramBuilder \u003d new FunctionParamBuilder(this);\n\n        if (current.getType() \u003d\u003d Token.PARAM_LIST) {\n          Node args \u003d current.getFirstChild();\n          for (Node arg \u003d current.getFirstChild(); arg !\u003d null;\n               arg \u003d arg.getNext()) {\n            if (arg.getType() \u003d\u003d Token.ELLIPSIS) {\n              if (arg.getChildCount() \u003d\u003d 0) {\n                paramBuilder.addVarArgs(getNativeType(UNKNOWN_TYPE));\n              } else {\n                paramBuilder.addVarArgs(\n                    createFromTypeNodesInternal(\n                        arg.getFirstChild(), sourceName, scope));\n              }\n            } else {\n              JSType type \u003d createFromTypeNodesInternal(\n                  arg, sourceName, scope);\n              if (arg.getType() \u003d\u003d Token.EQUALS) {\n                boolean addSuccess \u003d paramBuilder.addOptionalParams(type);\n                if (!addSuccess) {\n                  reporter.warning(\n                      ScriptRuntime.getMessage0(\"msg.jsdoc.function.varargs\"),\n                      sourceName, arg.getLineno(), arg.getCharno());\n                }\n              } else {\n                paramBuilder.addRequiredParams(type);\n              }\n            }\n          }\n          current \u003d current.getNext();\n        }\n\n        JSType returnType \u003d\n            createFromTypeNodesInternal(current, sourceName, scope);\n\n        return new FunctionBuilder(this)\n            .withParams(paramBuilder)\n            .withReturnType(returnType)\n            .withTypeOfThis(thisType)\n            .setIsConstructor(isConstructor)\n            .build();\n    }\n\n    throw new IllegalStateException(\n        \"Unexpected node in type expression: \" + n.toString());\n  }",
    "begin_line": 1520,
    "end_line": 1674,
    "comment": "/** \n * @see #createFromTypeNodes(Node,String,StaticScope) \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.createRecordTypeFromNodes#1682",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createRecordTypeFromNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "private JSType createRecordTypeFromNodes(Node n, String sourceName,\n      StaticScope\u003cJSType\u003e scope) {\n\n    RecordTypeBuilder builder \u003d new RecordTypeBuilder(this);\n\n    // For each of the fields in the record type.\n    for (Node fieldTypeNode \u003d n.getFirstChild();\n         fieldTypeNode !\u003d null;\n         fieldTypeNode \u003d fieldTypeNode.getNext()) {\n\n      // Get the property\u0027s name.\n      Node fieldNameNode \u003d fieldTypeNode;\n      boolean hasType \u003d false;\n\n      if (fieldTypeNode.getType() \u003d\u003d Token.COLON) {\n        fieldNameNode \u003d fieldTypeNode.getFirstChild();\n        hasType \u003d true;\n      }\n\n      String fieldName \u003d fieldNameNode.getString();\n\n      // TODO(user): Move this into the lexer/parser.\n      // Remove the string literal characters around a field name,\n      // if any.\n      if (fieldName.startsWith(\"\u0027\") || fieldName.startsWith(\"\\\"\")) {\n        fieldName \u003d fieldName.substring(1, fieldName.length() - 1);\n      }\n\n      // Get the property\u0027s type.\n      JSType fieldType \u003d null;\n\n      if (hasType) {\n        // We have a declared type.\n        fieldType \u003d createFromTypeNodesInternal(\n            fieldTypeNode.getLastChild(), sourceName, scope);\n      } else {\n        // Otherwise, the type is UNKNOWN.\n        fieldType \u003d getNativeType(JSTypeNative.UNKNOWN_TYPE);\n      }\n\n      // Add the property to the record.\n      if (builder.addProperty(fieldName, fieldType, fieldNameNode) \u003d\u003d null) {\n        // Duplicate field name, warning and skip\n        reporter.warning(\n            \"Duplicate record field \" + fieldName,\n            sourceName,\n            n.getLineno(), fieldNameNode.getCharno());\n      }\n    }\n\n    return builder.build();\n  }",
    "begin_line": 1682,
    "end_line": 1733,
    "comment": "/** \n * Creates a RecordType from the nodes representing said record type.\n * @param n The node with type info.\n * @param sourceName The source file name.\n * @param scope A scope for doing type name lookups.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.setTemplateTypeNames#1738",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.setTemplateTypeNames(java.util.List\u003cjava.lang.String\u003e)",
    "snippet": "public void setTemplateTypeNames(List\u003cString\u003e names) {\n    Preconditions.checkNotNull(names);\n    for (String name : names) {\n      templateTypes.put(name, new TemplateType(this, name));\n    }\n  }",
    "begin_line": 1738,
    "end_line": 1743,
    "comment": "/** \n * Sets the template type name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JSTypeRegistry.clearTemplateTypeNames#1748",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/JSTypeRegistry.java",
    "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
    "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.clearTemplateTypeNames()",
    "snippet": "public void clearTemplateTypeNames() {\n    templateTypes.clear();\n  }",
    "begin_line": 1748,
    "end_line": 1750,
    "comment": "/** \n * Clears the template type name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.NamedType#103",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.NamedType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, java.lang.String, int, int)",
    "snippet": " NamedType(JSTypeRegistry registry, String reference,\n      String sourceName, int lineno, int charno) {\n    super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));\n\n    Preconditions.checkNotNull(reference);\n    this.reference \u003d reference;\n    this.sourceName \u003d sourceName;\n    this.lineno \u003d lineno;\n    this.charno \u003d charno;\n  }",
    "begin_line": 103,
    "end_line": 112,
    "comment": "/** \n * Create a named type based on the reference.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.defineProperty#115",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  boolean defineProperty(String propertyName, JSType type,\n      boolean inferred, Node propertyNode) {\n    if (!isResolved()) {\n      // If this is an unresolved object type, we need to save all its\n      // properties and define them when it is resolved.\n      if (propertyContinuations \u003d\u003d null) {\n        propertyContinuations \u003d Lists.newArrayList();\n      }\n      propertyContinuations.add(\n          new PropertyContinuation(\n              propertyName, type, inferred, propertyNode));\n      return true;\n    } else {\n      return super.defineProperty(\n          propertyName, type, inferred, propertyNode);\n    }\n  }",
    "begin_line": 115,
    "end_line": 131,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.finishPropertyContinuations#133",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.finishPropertyContinuations()",
    "snippet": "private void finishPropertyContinuations() {\n    ObjectType referencedObjType \u003d getReferencedObjTypeInternal();\n    if (referencedObjType !\u003d null \u0026\u0026 !referencedObjType.isUnknownType()) {\n      if (propertyContinuations !\u003d null) {\n        for (PropertyContinuation c : propertyContinuations) {\n          c.commit(this);\n        }\n      }\n    }\n    propertyContinuations \u003d null;\n  }",
    "begin_line": 133,
    "end_line": 143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.getReferencedType#146",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.getReferencedType()",
    "snippet": "public JSType getReferencedType() {\n    return getReferencedTypeInternal();\n  }",
    "begin_line": 146,
    "end_line": 148,
    "comment": "/** \n * Returns the type to which this refers (which is unknown if unresolved). \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.getReferenceName#151",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.getReferenceName()",
    "snippet": "@Override\n  public String getReferenceName() {\n    return reference;\n  }",
    "begin_line": 151,
    "end_line": 153,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.toStringHelper#156",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.toStringHelper(boolean)",
    "snippet": "@Override\n  String toStringHelper(boolean forAnnotations) {\n    return reference;\n  }",
    "begin_line": 156,
    "end_line": 158,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.hasReferenceName#161",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.hasReferenceName()",
    "snippet": "@Override\n  public boolean hasReferenceName() {\n    return true;\n  }",
    "begin_line": 161,
    "end_line": 163,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.isNamedType#166",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.isNamedType()",
    "snippet": "@Override\n  boolean isNamedType() {\n    return true;\n  }",
    "begin_line": 166,
    "end_line": 168,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.isNominalType#171",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.isNominalType()",
    "snippet": "@Override\n  public boolean isNominalType() {\n    return true;\n  }",
    "begin_line": 171,
    "end_line": 173,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.hashCode#176",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.hashCode()",
    "snippet": "@Override\n  public int hashCode() {\n    return reference.hashCode();\n  }",
    "begin_line": 176,
    "end_line": 178,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.resolveInternal#184",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.resolveInternal(com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "@Override\n  JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n    // TODO(user): Investigate whether it is really necessary to keep two\n    // different mechanisms for resolving named types, and if so, which order\n    // makes more sense. Now, resolution via registry is first in order to\n    // avoid triggering the warnings built into the resolution via properties.\n    boolean resolved \u003d resolveViaRegistry(t, enclosing);\n    if (detectInheritanceCycle()) {\n      handleTypeCycle(t);\n    }\n\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    resolveViaProperties(t, enclosing);\n    if (detectInheritanceCycle()) {\n      handleTypeCycle(t);\n    }\n\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }",
    "begin_line": 184,
    "end_line": 212,
    "comment": "/** \n * Resolve the referenced type within the enclosing scope.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.resolveViaRegistry#218",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.resolveViaRegistry(com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "private boolean resolveViaRegistry(\n      ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n    JSType type \u003d registry.getType(reference);\n    if (type !\u003d null) {\n      setReferencedAndResolvedType(type, t, enclosing);\n      return true;\n    }\n    return false;\n  }",
    "begin_line": 218,
    "end_line": 226,
    "comment": "/** \n * Resolves a named type by looking it up in the registry.\n * @return True if we resolved successfully.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.resolveViaProperties#233",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.resolveViaProperties(com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "private void resolveViaProperties(ErrorReporter t,\n                                    StaticScope\u003cJSType\u003e enclosing) {\n    JSType value \u003d lookupViaProperties(t, enclosing);\n    // last component of the chain\n    if (value !\u003d null \u0026\u0026 value.isFunctionType() \u0026\u0026\n        (value.isConstructor() || value.isInterface())) {\n      FunctionType functionType \u003d value.toMaybeFunctionType();\n      setReferencedAndResolvedType(\n          functionType.getInstanceType(), t, enclosing);\n    } else if (value !\u003d null \u0026\u0026 value.isNoObjectType()) {\n      setReferencedAndResolvedType(\n          registry.getNativeFunctionType(\n              JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing);\n    } else if (value instanceof EnumType) {\n      setReferencedAndResolvedType(\n          ((EnumType) value).getElementsType(), t, enclosing);\n    } else {\n      // We\u0027ve been running into issues where people forward-declare\n      // non-named types. (This is legitimate...our dependency management\n      // code doubles as our forward-declaration code.)\n      //\n      // So if the type does resolve to an actual value, but it\u0027s not named,\n      // then don\u0027t respect the forward declaration.\n      handleUnresolvedType(t, value \u003d\u003d null || value.isUnknownType());\n    }\n  }",
    "begin_line": 233,
    "end_line": 258,
    "comment": "/** \n * Resolves a named type by looking up its first component in the scope, and subsequent components as properties. The scope must have been fully parsed and a symbol table constructed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.lookupViaProperties#266",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.lookupViaProperties(com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "private JSType lookupViaProperties( ErrorReporter t,\n      StaticScope\u003cJSType\u003e enclosing) {\n    String[] componentNames \u003d reference.split(\"\\\\.\", -1);\n    if (componentNames[0].length() \u003d\u003d 0) {\n      return null;\n    }\n    StaticSlot\u003cJSType\u003e slot \u003d enclosing.getSlot(componentNames[0]);\n    if (slot \u003d\u003d null) {\n      return null;\n    }\n    // If the first component has a type of \u0027Unknown\u0027, then any type\n    // names using it should be regarded as silently \u0027Unknown\u0027 rather than be\n    // noisy about it.\n    JSType slotType \u003d slot.getType();\n    if (slotType \u003d\u003d null || slotType.isAllType() || slotType.isNoType()) {\n      return null;\n    }\n    JSType value \u003d getTypedefType(t, slot, componentNames[0]);\n    if (value \u003d\u003d null) {\n      return null;\n    }\n\n    // resolving component by component\n    for (int i \u003d 1; i \u003c componentNames.length; i++) {\n      ObjectType parentClass \u003d ObjectType.cast(value);\n      if (parentClass \u003d\u003d null) {\n        return null;\n      }\n      if (componentNames[i].length() \u003d\u003d 0) {\n        return null;\n      }\n      value \u003d parentClass.getPropertyType(componentNames[i]);\n    }\n    return value;\n  }",
    "begin_line": 266,
    "end_line": 300,
    "comment": "/** \n * Resolves a type by looking up its first component in the scope, and subsequent components as properties. The scope must have been fully parsed and a symbol table constructed.\n * @return The type of the symbol, or null if the type could not be found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.setReferencedAndResolvedType#302",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.setReferencedAndResolvedType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "private void setReferencedAndResolvedType(JSType type, ErrorReporter t,\n      StaticScope\u003cJSType\u003e enclosing) {\n    if (validator !\u003d null) {\n      validator.apply(type);\n    }\n    setReferencedType(type);\n    checkEnumElementCycle(t);\n    checkProtoCycle(t);\n    setResolvedTypeInternal(getReferencedType());\n  }",
    "begin_line": 302,
    "end_line": 311,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.handleTypeCycle#313",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.handleTypeCycle(com.google.javascript.rhino.ErrorReporter)",
    "snippet": "private void handleTypeCycle(ErrorReporter t) {\n    setReferencedType(\n        registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));\n    t.warning(\"Cycle detected in inheritance chain of type \" + reference,\n        sourceName, lineno, charno);\n    setResolvedTypeInternal(getReferencedType());\n  }",
    "begin_line": 313,
    "end_line": 319,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.checkEnumElementCycle#321",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.checkEnumElementCycle(com.google.javascript.rhino.ErrorReporter)",
    "snippet": "private void checkEnumElementCycle(ErrorReporter t) {\n    JSType referencedType \u003d getReferencedType();\n    if (referencedType instanceof EnumElementType \u0026\u0026\n        ((EnumElementType) referencedType).getPrimitiveType() \u003d\u003d this) {\n      handleTypeCycle(t);\n    }\n  }",
    "begin_line": 321,
    "end_line": 327,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.checkProtoCycle#329",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.checkProtoCycle(com.google.javascript.rhino.ErrorReporter)",
    "snippet": "private void checkProtoCycle(ErrorReporter t) {\n    JSType referencedType \u003d getReferencedType();\n    if (referencedType \u003d\u003d this) {\n      handleTypeCycle(t);\n    }\n  }",
    "begin_line": 329,
    "end_line": 334,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.handleUnresolvedType#338",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.handleUnresolvedType(com.google.javascript.rhino.ErrorReporter, boolean)",
    "snippet": "private void handleUnresolvedType(\n      ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n    if (registry.isLastGeneration()) {\n      boolean isForwardDeclared \u003d\n          ignoreForwardReferencedTypes \u0026\u0026\n          registry.isForwardDeclaredType(reference);\n      if (!isForwardDeclared \u0026\u0026 registry.isLastGeneration()) {\n        t.warning(\"Bad type annotation. Unknown type \" + reference,\n            sourceName, lineno, charno);\n      } else {\n        setReferencedType(\n            registry.getNativeObjectType(\n                JSTypeNative.NO_RESOLVED_TYPE));\n\n        if (registry.isLastGeneration() \u0026\u0026 validator !\u003d null) {\n          validator.apply(getReferencedType());\n        }\n      }\n\n      setResolvedTypeInternal(getReferencedType());\n    } else {\n      setResolvedTypeInternal(this);\n    }\n  }",
    "begin_line": 338,
    "end_line": 361,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.getTypedefType#363",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.getTypedefType(com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticSlot\u003ccom.google.javascript.rhino.jstype.JSType\u003e, java.lang.String)",
    "snippet": "JSType getTypedefType(ErrorReporter t, StaticSlot\u003cJSType\u003e slot, String name) {\n    JSType type \u003d slot.getType();\n    if (type !\u003d null) {\n      return type;\n    }\n    handleUnresolvedType(t, true);\n    return null;\n  }",
    "begin_line": 363,
    "end_line": 370,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.setValidator#373",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.setValidator(Predicate\u003cJSType\u003e)",
    "snippet": "@Override\n  public boolean setValidator(Predicate\u003cJSType\u003e validator) {\n    // If the type is already resolved, we can validate it now. If\n    // the type has not been resolved yet, we need to wait till its\n    // resolved before we can validate it.\n    if (this.isResolved()) {\n      return super.setValidator(validator);\n    } else {\n      this.validator \u003d validator;\n      return true;\n    }\n  }",
    "begin_line": 373,
    "end_line": 383,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyContinuation.PropertyContinuation#392",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.PropertyContinuation(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
    "snippet": "private PropertyContinuation(\n        String propertyName,\n        JSType type,\n        boolean inferred,\n        Node propertyNode) {\n      this.propertyName \u003d propertyName;\n      this.type \u003d type;\n      this.inferred \u003d inferred;\n      this.propertyNode \u003d propertyNode;\n    }",
    "begin_line": 392,
    "end_line": 401,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyContinuation.commit#403",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NamedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NamedType",
    "signature": "com.google.javascript.rhino.jstype.NamedType.commit(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "void commit(ObjectType target) {\n      target.defineProperty(\n          propertyName, type, inferred, propertyNode);\n    }",
    "begin_line": 403,
    "end_line": 406,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoObjectType.NoObjectType#66",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
    "signature": "com.google.javascript.rhino.jstype.NoObjectType.NoObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": " NoObjectType(JSTypeRegistry registry) {\n    super(registry, null, null,\n          registry.createArrowType(null, null),\n          null, null, true, true);\n    getInternalArrowType().returnType \u003d this;\n    this.setInstanceType(this);\n  }",
    "begin_line": 66,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoObjectType.isSubtype#75",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
    "signature": "com.google.javascript.rhino.jstype.NoObjectType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public boolean isSubtype(JSType that) {\n    if (JSType.isSubtypeHelper(this, that)) {\n      return true;\n    } else {\n      return that.isObject() \u0026\u0026 !that.isNoType() \u0026\u0026 !that.isNoResolvedType();\n    }\n  }",
    "begin_line": 75,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoObjectType.toMaybeFunctionType#84",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
    "signature": "com.google.javascript.rhino.jstype.NoObjectType.toMaybeFunctionType()",
    "snippet": "@Override\n  public FunctionType toMaybeFunctionType() {\n    return null;\n  }",
    "begin_line": 84,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoObjectType.isNoObjectType#89",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
    "signature": "com.google.javascript.rhino.jstype.NoObjectType.isNoObjectType()",
    "snippet": "@Override\n  public boolean isNoObjectType() {\n    return true;\n  }",
    "begin_line": 89,
    "end_line": 91,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoObjectType.getImplicitPrototype#94",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
    "signature": "com.google.javascript.rhino.jstype.NoObjectType.getImplicitPrototype()",
    "snippet": "@Override\n  public ObjectType getImplicitPrototype() {\n    return null;\n  }",
    "begin_line": 94,
    "end_line": 96,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoObjectType.getReferenceName#99",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
    "signature": "com.google.javascript.rhino.jstype.NoObjectType.getReferenceName()",
    "snippet": "@Override\n  public String getReferenceName() {\n    return null;\n  }",
    "begin_line": 99,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoObjectType.matchesNumberContext#104",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
    "signature": "com.google.javascript.rhino.jstype.NoObjectType.matchesNumberContext()",
    "snippet": "@Override\n  public boolean matchesNumberContext() {\n    return true;\n  }",
    "begin_line": 104,
    "end_line": 106,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoObjectType.matchesObjectContext#109",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
    "signature": "com.google.javascript.rhino.jstype.NoObjectType.matchesObjectContext()",
    "snippet": "@Override\n  public boolean matchesObjectContext() {\n    return true;\n  }",
    "begin_line": 109,
    "end_line": 111,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoObjectType.matchesStringContext#114",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
    "signature": "com.google.javascript.rhino.jstype.NoObjectType.matchesStringContext()",
    "snippet": "@Override\n  public boolean matchesStringContext() {\n    return true;\n  }",
    "begin_line": 114,
    "end_line": 116,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoObjectType.hashCode#119",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
    "signature": "com.google.javascript.rhino.jstype.NoObjectType.hashCode()",
    "snippet": "@Override\n  public int hashCode() {\n    return System.identityHashCode(this);\n  }",
    "begin_line": 119,
    "end_line": 121,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoObjectType.defineProperty#124",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
    "signature": "com.google.javascript.rhino.jstype.NoObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  boolean defineProperty(String propertyName, JSType type,\n      boolean inferred, Node propertyNode) {\n    // nothing, all properties are defined\n    return true;\n  }",
    "begin_line": 124,
    "end_line": 128,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoObjectType.removeProperty#131",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
    "signature": "com.google.javascript.rhino.jstype.NoObjectType.removeProperty(java.lang.String)",
    "snippet": "@Override\n  public boolean removeProperty(String name) {\n    return false;\n  }",
    "begin_line": 131,
    "end_line": 133,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoObjectType.setPropertyJSDocInfo#136",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
    "signature": "com.google.javascript.rhino.jstype.NoObjectType.setPropertyJSDocInfo(java.lang.String, com.google.javascript.rhino.JSDocInfo)",
    "snippet": "@Override\n  public void setPropertyJSDocInfo(String propertyName, JSDocInfo info) {\n    // Do nothing, specific properties do not have JSDocInfo.\n  }",
    "begin_line": 136,
    "end_line": 138,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoObjectType.visit#141",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
    "signature": "com.google.javascript.rhino.jstype.NoObjectType.visit(com.google.javascript.rhino.jstype.Visitor\u003cT\u003e)",
    "snippet": "@Override\n  public \u003cT\u003e T visit(Visitor\u003cT\u003e visitor) {\n    return visitor.caseNoObjectType();\n  }",
    "begin_line": 141,
    "end_line": 143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoObjectType.visit#145",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
    "signature": "com.google.javascript.rhino.jstype.NoObjectType.visit(com.google.javascript.rhino.jstype.RelationshipVisitor\u003cT\u003e, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override \u003cT\u003e T visit(RelationshipVisitor\u003cT\u003e visitor, JSType that) {\n    return visitor.caseNoObjectType(that);\n  }",
    "begin_line": 145,
    "end_line": 147,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoObjectType.toStringHelper#150",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
    "signature": "com.google.javascript.rhino.jstype.NoObjectType.toStringHelper(boolean)",
    "snippet": "@Override\n  String toStringHelper(boolean forAnnotations) {\n    return forAnnotations ? \"?\" : \"NoObject\";\n  }",
    "begin_line": 150,
    "end_line": 152,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoObjectType.getConstructor#155",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
    "signature": "com.google.javascript.rhino.jstype.NoObjectType.getConstructor()",
    "snippet": "@Override\n  public FunctionType getConstructor() {\n    return null;\n  }",
    "begin_line": 155,
    "end_line": 157,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoObjectType.resolveInternal#160",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
    "signature": "com.google.javascript.rhino.jstype.NoObjectType.resolveInternal(com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "@Override\n  JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    return this;\n  }",
    "begin_line": 160,
    "end_line": 162,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoResolvedType.NoResolvedType#58",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoResolvedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoResolvedType",
    "signature": "com.google.javascript.rhino.jstype.NoResolvedType.NoResolvedType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": " NoResolvedType(JSTypeRegistry registry) {\n    super(registry);\n  }",
    "begin_line": 58,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoResolvedType.isNoResolvedType#63",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoResolvedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoResolvedType",
    "signature": "com.google.javascript.rhino.jstype.NoResolvedType.isNoResolvedType()",
    "snippet": "@Override\n  public boolean isNoResolvedType() {\n    return true;\n  }",
    "begin_line": 63,
    "end_line": 65,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoResolvedType.isNoType#68",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoResolvedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoResolvedType",
    "signature": "com.google.javascript.rhino.jstype.NoResolvedType.isNoType()",
    "snippet": "@Override\n  public boolean isNoType() {\n    return false;\n  }",
    "begin_line": 68,
    "end_line": 70,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoResolvedType.isSubtype#73",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoResolvedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoResolvedType",
    "signature": "com.google.javascript.rhino.jstype.NoResolvedType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public boolean isSubtype(JSType that) {\n    if (JSType.isSubtypeHelper(this, that)) {\n      return true;\n    } else {\n      return !that.isNoType();\n    }\n  }",
    "begin_line": 73,
    "end_line": 79,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoResolvedType.toStringHelper#82",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoResolvedType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoResolvedType",
    "signature": "com.google.javascript.rhino.jstype.NoResolvedType.toStringHelper(boolean)",
    "snippet": "@Override\n  String toStringHelper(boolean forAnnotations) {\n    return forAnnotations ? \"?\" : \"NoResolvedType\";\n  }",
    "begin_line": 82,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoType.NoType#64",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoType",
    "signature": "com.google.javascript.rhino.jstype.NoType.NoType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": " NoType(JSTypeRegistry registry) {\n    super(registry);\n  }",
    "begin_line": 64,
    "end_line": 66,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoType.isNoObjectType#69",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoType",
    "signature": "com.google.javascript.rhino.jstype.NoType.isNoObjectType()",
    "snippet": "@Override\n  public boolean isNoObjectType() {\n    return false;\n  }",
    "begin_line": 69,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoType.isNoType#74",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoType",
    "signature": "com.google.javascript.rhino.jstype.NoType.isNoType()",
    "snippet": "@Override\n  public boolean isNoType() {\n    return true;\n  }",
    "begin_line": 74,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoType.isNullable#79",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoType",
    "signature": "com.google.javascript.rhino.jstype.NoType.isNullable()",
    "snippet": "@Override\n  public boolean isNullable() {\n    return true;\n  }",
    "begin_line": 79,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoType.isSubtype#84",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoType",
    "signature": "com.google.javascript.rhino.jstype.NoType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public boolean isSubtype(JSType that) {\n    return true;\n  }",
    "begin_line": 84,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoType.getPossibleToBooleanOutcomes#89",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoType",
    "signature": "com.google.javascript.rhino.jstype.NoType.getPossibleToBooleanOutcomes()",
    "snippet": "@Override\n  public BooleanLiteralSet getPossibleToBooleanOutcomes() {\n    return BooleanLiteralSet.EMPTY;\n  }",
    "begin_line": 89,
    "end_line": 91,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoType.matchesNumberContext#94",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoType",
    "signature": "com.google.javascript.rhino.jstype.NoType.matchesNumberContext()",
    "snippet": "@Override\n  public boolean matchesNumberContext() {\n    return true;\n  }",
    "begin_line": 94,
    "end_line": 96,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoType.matchesObjectContext#99",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoType",
    "signature": "com.google.javascript.rhino.jstype.NoType.matchesObjectContext()",
    "snippet": "@Override\n  public boolean matchesObjectContext() {\n    return true;\n  }",
    "begin_line": 99,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoType.matchesStringContext#104",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoType",
    "signature": "com.google.javascript.rhino.jstype.NoType.matchesStringContext()",
    "snippet": "@Override\n  public boolean matchesStringContext() {\n    return true;\n  }",
    "begin_line": 104,
    "end_line": 106,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoType.visit#109",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoType",
    "signature": "com.google.javascript.rhino.jstype.NoType.visit(com.google.javascript.rhino.jstype.Visitor\u003cT\u003e)",
    "snippet": "@Override\n  public \u003cT\u003e T visit(Visitor\u003cT\u003e visitor) {\n    return visitor.caseNoType();\n  }",
    "begin_line": 109,
    "end_line": 111,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoType.visit#113",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoType",
    "signature": "com.google.javascript.rhino.jstype.NoType.visit(com.google.javascript.rhino.jstype.RelationshipVisitor\u003cT\u003e, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override \u003cT\u003e T visit(RelationshipVisitor\u003cT\u003e visitor, JSType that) {\n    return visitor.caseNoType(that);\n  }",
    "begin_line": 113,
    "end_line": 115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoType.toStringHelper#118",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NoType.java",
    "class_name": "com.google.javascript.rhino.jstype.NoType",
    "signature": "com.google.javascript.rhino.jstype.NoType.toStringHelper(boolean)",
    "snippet": "@Override\n  String toStringHelper(boolean forAnnotations) {\n    return forAnnotations ? \"?\" : \"None\";\n  }",
    "begin_line": 118,
    "end_line": 120,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullType.NullType#53",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NullType.java",
    "class_name": "com.google.javascript.rhino.jstype.NullType",
    "signature": "com.google.javascript.rhino.jstype.NullType.NullType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": " NullType(JSTypeRegistry registry) {\n    super(registry);\n  }",
    "begin_line": 53,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullType.isNullType#58",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NullType.java",
    "class_name": "com.google.javascript.rhino.jstype.NullType",
    "signature": "com.google.javascript.rhino.jstype.NullType.isNullType()",
    "snippet": "@Override\n  public boolean isNullType() {\n    return true;\n  }",
    "begin_line": 58,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullType.isNullable#63",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NullType.java",
    "class_name": "com.google.javascript.rhino.jstype.NullType",
    "signature": "com.google.javascript.rhino.jstype.NullType.isNullable()",
    "snippet": "@Override\n  public boolean isNullable() {\n    return true;\n  }",
    "begin_line": 63,
    "end_line": 65,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullType.matchesNumberContext#68",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NullType.java",
    "class_name": "com.google.javascript.rhino.jstype.NullType",
    "signature": "com.google.javascript.rhino.jstype.NullType.matchesNumberContext()",
    "snippet": "@Override\n  public boolean matchesNumberContext() {\n    return true;\n  }",
    "begin_line": 68,
    "end_line": 70,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullType.matchesObjectContext#73",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NullType.java",
    "class_name": "com.google.javascript.rhino.jstype.NullType",
    "signature": "com.google.javascript.rhino.jstype.NullType.matchesObjectContext()",
    "snippet": "@Override\n  public boolean matchesObjectContext() {\n    return false;\n  }",
    "begin_line": 73,
    "end_line": 75,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullType.matchesStringContext#78",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NullType.java",
    "class_name": "com.google.javascript.rhino.jstype.NullType",
    "signature": "com.google.javascript.rhino.jstype.NullType.matchesStringContext()",
    "snippet": "@Override\n  public boolean matchesStringContext() {\n    return true;\n  }",
    "begin_line": 78,
    "end_line": 80,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullType.restrictByNotNullOrUndefined#83",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NullType.java",
    "class_name": "com.google.javascript.rhino.jstype.NullType",
    "signature": "com.google.javascript.rhino.jstype.NullType.restrictByNotNullOrUndefined()",
    "snippet": "@Override\n  public JSType restrictByNotNullOrUndefined() {\n    return registry.getNativeType(JSTypeNative.NO_TYPE);\n  }",
    "begin_line": 83,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullType.testForEquality#88",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NullType.java",
    "class_name": "com.google.javascript.rhino.jstype.NullType",
    "signature": "com.google.javascript.rhino.jstype.NullType.testForEquality(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public TernaryValue testForEquality(JSType that) {\n    TernaryValue result \u003d super.testForEquality(that);\n    if (result !\u003d null) {\n      return result;\n    }\n    if (that.isNullType() || that.isVoidType()) {\n      return TRUE;\n    }\n    if (that.isUnknownType() || that.isNullable()) {\n      return UNKNOWN;\n    }\n    return FALSE;\n  }",
    "begin_line": 88,
    "end_line": 100,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullType.toStringHelper#103",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NullType.java",
    "class_name": "com.google.javascript.rhino.jstype.NullType",
    "signature": "com.google.javascript.rhino.jstype.NullType.toStringHelper(boolean)",
    "snippet": "@Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }",
    "begin_line": 103,
    "end_line": 105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullType.getDisplayName#108",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NullType.java",
    "class_name": "com.google.javascript.rhino.jstype.NullType",
    "signature": "com.google.javascript.rhino.jstype.NullType.getDisplayName()",
    "snippet": "@Override\n  public String getDisplayName() {\n    return \"null\";\n  }",
    "begin_line": 108,
    "end_line": 110,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullType.getPossibleToBooleanOutcomes#113",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NullType.java",
    "class_name": "com.google.javascript.rhino.jstype.NullType",
    "signature": "com.google.javascript.rhino.jstype.NullType.getPossibleToBooleanOutcomes()",
    "snippet": "@Override\n  public BooleanLiteralSet getPossibleToBooleanOutcomes() {\n    return BooleanLiteralSet.FALSE;\n  }",
    "begin_line": 113,
    "end_line": 115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullType.visit#118",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NullType.java",
    "class_name": "com.google.javascript.rhino.jstype.NullType",
    "signature": "com.google.javascript.rhino.jstype.NullType.visit(com.google.javascript.rhino.jstype.Visitor\u003cT\u003e)",
    "snippet": "@Override\n  public \u003cT\u003e T visit(Visitor\u003cT\u003e visitor) {\n    return visitor.caseNullType();\n  }",
    "begin_line": 118,
    "end_line": 120,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberType.NumberType#52",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NumberType.java",
    "class_name": "com.google.javascript.rhino.jstype.NumberType",
    "signature": "com.google.javascript.rhino.jstype.NumberType.NumberType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": " NumberType(JSTypeRegistry registry) {\n    super(registry);\n  }",
    "begin_line": 52,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberType.isNullable#57",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NumberType.java",
    "class_name": "com.google.javascript.rhino.jstype.NumberType",
    "signature": "com.google.javascript.rhino.jstype.NumberType.isNullable()",
    "snippet": "@Override\n  public boolean isNullable() {\n    return false;\n  }",
    "begin_line": 57,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberType.testForEquality#62",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NumberType.java",
    "class_name": "com.google.javascript.rhino.jstype.NumberType",
    "signature": "com.google.javascript.rhino.jstype.NumberType.testForEquality(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public TernaryValue testForEquality(JSType that) {\n    TernaryValue result \u003d super.testForEquality(that);\n    if (result !\u003d null) {\n      return result;\n    }\n    if (that.isUnknownType() || that.isSubtype(\n            getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN))) {\n      return UNKNOWN;\n    }\n    return FALSE;\n  }",
    "begin_line": 62,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberType.isNumberValueType#75",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NumberType.java",
    "class_name": "com.google.javascript.rhino.jstype.NumberType",
    "signature": "com.google.javascript.rhino.jstype.NumberType.isNumberValueType()",
    "snippet": "@Override\n  public boolean isNumberValueType() {\n    return true;\n  }",
    "begin_line": 75,
    "end_line": 77,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberType.matchesNumberContext#80",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NumberType.java",
    "class_name": "com.google.javascript.rhino.jstype.NumberType",
    "signature": "com.google.javascript.rhino.jstype.NumberType.matchesNumberContext()",
    "snippet": "@Override\n  public boolean matchesNumberContext() {\n    return true;\n  }",
    "begin_line": 80,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberType.matchesStringContext#85",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NumberType.java",
    "class_name": "com.google.javascript.rhino.jstype.NumberType",
    "signature": "com.google.javascript.rhino.jstype.NumberType.matchesStringContext()",
    "snippet": "@Override\n  public boolean matchesStringContext() {\n    return true;\n  }",
    "begin_line": 85,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberType.matchesObjectContext#90",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NumberType.java",
    "class_name": "com.google.javascript.rhino.jstype.NumberType",
    "signature": "com.google.javascript.rhino.jstype.NumberType.matchesObjectContext()",
    "snippet": "@Override\n  public boolean matchesObjectContext() {\n    // TODO(user): Revisit this for ES4, which is stricter.\n    return true;\n  }",
    "begin_line": 90,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberType.toStringHelper#96",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NumberType.java",
    "class_name": "com.google.javascript.rhino.jstype.NumberType",
    "signature": "com.google.javascript.rhino.jstype.NumberType.toStringHelper(boolean)",
    "snippet": "@Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }",
    "begin_line": 96,
    "end_line": 98,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberType.getDisplayName#101",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NumberType.java",
    "class_name": "com.google.javascript.rhino.jstype.NumberType",
    "signature": "com.google.javascript.rhino.jstype.NumberType.getDisplayName()",
    "snippet": "@Override\n  public String getDisplayName() {\n    return \"number\";\n  }",
    "begin_line": 101,
    "end_line": 103,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberType.getPossibleToBooleanOutcomes#106",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NumberType.java",
    "class_name": "com.google.javascript.rhino.jstype.NumberType",
    "signature": "com.google.javascript.rhino.jstype.NumberType.getPossibleToBooleanOutcomes()",
    "snippet": "@Override\n  public BooleanLiteralSet getPossibleToBooleanOutcomes() {\n    return BooleanLiteralSet.BOTH;\n  }",
    "begin_line": 106,
    "end_line": 108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberType.visit#111",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NumberType.java",
    "class_name": "com.google.javascript.rhino.jstype.NumberType",
    "signature": "com.google.javascript.rhino.jstype.NumberType.visit(com.google.javascript.rhino.jstype.Visitor\u003cT\u003e)",
    "snippet": "@Override\n  public \u003cT\u003e T visit(Visitor\u003cT\u003e visitor) {\n    return visitor.caseNumberType();\n  }",
    "begin_line": 111,
    "end_line": 113,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberType.autoboxesTo#116",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/NumberType.java",
    "class_name": "com.google.javascript.rhino.jstype.NumberType",
    "signature": "com.google.javascript.rhino.jstype.NumberType.autoboxesTo()",
    "snippet": "@Override\n  public JSType autoboxesTo() {\n    return getNativeType(JSTypeNative.NUMBER_OBJECT_TYPE);\n  }",
    "begin_line": 116,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.ObjectType#87",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.ObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": " ObjectType(JSTypeRegistry registry) {\n    super(registry);\n  }",
    "begin_line": 87,
    "end_line": 89,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.ObjectType#91",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.ObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, ImmutableList\u003cString\u003e, ImmutableList\u003cJSType\u003e)",
    "snippet": " ObjectType(JSTypeRegistry registry, ImmutableList\u003cString\u003e templateKeys,\n      ImmutableList\u003cJSType\u003e templatizedTypes) {\n    super(registry, templateKeys, templatizedTypes);\n  }",
    "begin_line": 91,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getRootNode#97",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getRootNode()",
    "snippet": "@Override\n  public Node getRootNode() { return null; }",
    "begin_line": 97,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getParentScope#100",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getParentScope()",
    "snippet": "@Override\n  public ObjectType getParentScope() {\n    return getImplicitPrototype();\n  }",
    "begin_line": 100,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getPropertyMap#107",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getPropertyMap()",
    "snippet": "PropertyMap getPropertyMap() {\n    return PropertyMap.immutableEmptyMap();\n  }",
    "begin_line": 107,
    "end_line": 109,
    "comment": "/** \n * Returns the property map that manages the set of properties for an object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getSlot#116",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getSlot(java.lang.String)",
    "snippet": "@Override\n  public Property getSlot(String name) {\n    return getPropertyMap().getSlot(name);\n  }",
    "begin_line": 116,
    "end_line": 118,
    "comment": "/** \n * Default getSlot implementation. This gets overridden by FunctionType for lazily-resolved prototypes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getOwnSlot#121",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getOwnSlot(java.lang.String)",
    "snippet": "@Override\n  public Property getOwnSlot(String name) {\n    return getPropertyMap().getOwnProperty(name);\n  }",
    "begin_line": 121,
    "end_line": 123,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getTypeOfThis#126",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getTypeOfThis()",
    "snippet": "@Override\n  public JSType getTypeOfThis() {\n    return null;\n  }",
    "begin_line": 126,
    "end_line": 128,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getParameterType#134",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getParameterType()",
    "snippet": "public JSType getParameterType() {\n    return null;\n  }",
    "begin_line": 134,
    "end_line": 136,
    "comment": "/** \n * Gets the declared default element type.\n * @see ParameterizedType\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getIndexType#142",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getIndexType()",
    "snippet": "public JSType getIndexType() {\n    return null;\n  }",
    "begin_line": 142,
    "end_line": 144,
    "comment": "/** \n * Gets the declared default index type.\n * @see IndexedType\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getJSDocInfo#150",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getJSDocInfo()",
    "snippet": "@Override\n  public JSDocInfo getJSDocInfo() {\n    if (docInfo !\u003d null) {\n      return docInfo;\n    } else if (getImplicitPrototype() !\u003d null) {\n      return getImplicitPrototype().getJSDocInfo();\n    } else {\n      return super.getJSDocInfo();\n    }\n  }",
    "begin_line": 150,
    "end_line": 158,
    "comment": "/** \n * Gets the docInfo for this type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.setJSDocInfo#164",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.setJSDocInfo(com.google.javascript.rhino.JSDocInfo)",
    "snippet": "public void setJSDocInfo(JSDocInfo info) {\n    docInfo \u003d info;\n  }",
    "begin_line": 164,
    "end_line": 166,
    "comment": "/** \n * Sets the docInfo for this type from the given {@link JSDocInfo}. The  {@code JSDocInfo} may be {@code null}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.detectImplicitPrototypeCycle#176",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.detectImplicitPrototypeCycle()",
    "snippet": "final boolean detectImplicitPrototypeCycle() {\n    // detecting cycle\n    this.visited \u003d true;\n    ObjectType p \u003d getImplicitPrototype();\n    while (p !\u003d null) {\n      if (p.visited) {\n        return true;\n      } else {\n        p.visited \u003d true;\n      }\n      p \u003d p.getImplicitPrototype();\n    }\n\n    // clean up\n    p \u003d this;\n    do {\n      p.visited \u003d false;\n      p \u003d p.getImplicitPrototype();\n    } while (p !\u003d null);\n    return false;\n  }",
    "begin_line": 176,
    "end_line": 196,
    "comment": "/** \n * Detects a cycle in the implicit prototype chain. This method accesses the  {@link #getImplicitPrototype()} method and must therefore beinvoked only after the object is sufficiently initialized to respond to calls to this method.\u003cp\u003e\n * @return True iff an implicit prototype cycle was detected.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.detectInheritanceCycle#204",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.detectInheritanceCycle()",
    "snippet": "final boolean detectInheritanceCycle() {\n    // TODO(user): This should get moved to preventing cycles in FunctionTypeBuilder\n    // rather than removing them here after they have been created.\n    // Also, this doesn\u0027t do the right thing for extended interfaces, though that is\n    // masked by another bug.\n    return detectImplicitPrototypeCycle()\n        || Iterables.contains(this.getCtorImplementedInterfaces(), this)\n        || Iterables.contains(this.getCtorExtendedInterfaces(), this);\n  }",
    "begin_line": 204,
    "end_line": 212,
    "comment": "/** \n * Detects cycles in either the implicit prototype chain, or the implemented/extended interfaces.\u003cp\u003e\n * @return True iff a cycle was detected.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getReferenceName#221",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getReferenceName()",
    "snippet": "public abstract String getReferenceName();",
    "begin_line": 221,
    "end_line": 221,
    "comment": "/** \n * Gets the reference name for this object. This includes named types like constructors, prototypes, and enums. It notably does not include literal types like strings and booleans and structural types.\n * @return the object\u0027s name or {@code null} if this is an anonymousobject\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getNormalizedReferenceName#232",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getNormalizedReferenceName()",
    "snippet": "public String getNormalizedReferenceName() {\n    String name \u003d getReferenceName();\n    if (name !\u003d null) {\n      int pos \u003d name.indexOf(\"(\");\n      if (pos !\u003d -1) {\n        return name.substring(0, pos);\n      }\n    }\n    return name;\n  }",
    "begin_line": 232,
    "end_line": 241,
    "comment": "/** \n * Due to the complexity of some of our internal type systems, sometimes we have different types constructed by the same constructor. In other parts of the type system, these are called delegates. We construct these types by appending suffixes to the constructor name. The normalized reference name does not have these suffixes, and as such, recollapses these implicit types back to their real type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getDisplayName#244",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getDisplayName()",
    "snippet": "@Override\n  public String getDisplayName() {\n    return getNormalizedReferenceName();\n  }",
    "begin_line": 244,
    "end_line": 246,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.createDelegateSuffix#252",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix(java.lang.String)",
    "snippet": "public static String createDelegateSuffix(String suffix) {\n    return \"(\" + suffix + \")\";\n  }",
    "begin_line": 252,
    "end_line": 254,
    "comment": "/** \n * Creates a suffix for a proxy delegate.\n * @see #getNormalizedReferenceName\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.hasReferenceName#260",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.hasReferenceName()",
    "snippet": "public boolean hasReferenceName() {\n    return false;\n  }",
    "begin_line": 260,
    "end_line": 262,
    "comment": "/** \n * Returns true if the object is named.\n * @return true if the object is named, false if it is anonymous\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.testForEquality#265",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.testForEquality(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public TernaryValue testForEquality(JSType that) {\n    // super\n    TernaryValue result \u003d super.testForEquality(that);\n    if (result !\u003d null) {\n      return result;\n    }\n    // objects are comparable to everything but null/undefined\n    if (that.isSubtype(\n            getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN))) {\n      return UNKNOWN;\n    } else {\n      return FALSE;\n    }\n  }",
    "begin_line": 265,
    "end_line": 278,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getConstructor#285",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getConstructor()",
    "snippet": "public abstract FunctionType getConstructor();",
    "begin_line": 285,
    "end_line": 285,
    "comment": "/** \n * Gets this object\u0027s constructor.\n * @return this object\u0027s constructor or {@code null} if it is a nativeobject (constructed natively v.s. by instantiation of a function)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getImplicitPrototype#290",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getImplicitPrototype()",
    "snippet": "public abstract ObjectType getImplicitPrototype();",
    "begin_line": 290,
    "end_line": 290,
    "comment": "/** \n * Gets the implicit prototype (a.k.a. the  {@code [[Prototype]]} property).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.defineDeclaredProperty#299",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
    "snippet": "public final boolean defineDeclaredProperty(String propertyName,\n      JSType type, Node propertyNode) {\n    boolean result \u003d defineProperty(propertyName, type, false, propertyNode);\n    // All property definitions go through this method\n    // or defineInferredProperty. Because the properties defined an an\n    // object can affect subtyping, it\u0027s slightly more efficient\n    // to register this after defining the property.\n    registry.registerPropertyOnType(propertyName, this);\n    return result;\n  }",
    "begin_line": 299,
    "end_line": 308,
    "comment": "/** \n * Defines a property whose type is explicitly declared by the programmer.\n * @param propertyName the property\u0027s name\n * @param type the type\n * @param propertyNode the node corresponding to the declaration of propertywhich might later be accessed using  {@code getPropertyNode}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.defineSynthesizedProperty#315",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.defineSynthesizedProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
    "snippet": "public final boolean defineSynthesizedProperty(String propertyName,\n      JSType type, Node propertyNode) {\n    return defineProperty(propertyName, type, false, propertyNode);\n  }",
    "begin_line": 315,
    "end_line": 318,
    "comment": "/** \n * Defines a property whose type is on a synthesized object. These objects don\u0027t actually exist in the user\u0027s program. They\u0027re just used for bookkeeping in the type system.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.defineInferredProperty#327",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.defineInferredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
    "snippet": "public final boolean defineInferredProperty(String propertyName,\n      JSType type, Node propertyNode) {\n    StaticSlot\u003cJSType\u003e originalSlot \u003d getSlot(propertyName);\n    if (hasProperty(propertyName)) {\n      if (isPropertyTypeDeclared(propertyName)) {\n        // We never want to hide a declared property with an inferred property.\n        return true;\n      }\n      JSType originalType \u003d getPropertyType(propertyName);\n      type \u003d originalType \u003d\u003d null ? type :\n          originalType.getLeastSupertype(type);\n    }\n\n    boolean result \u003d defineProperty(propertyName, type, true,\n        propertyNode);\n\n    // All property definitions go through this method\n    // or defineDeclaredProperty. Because the properties defined an an\n    // object can affect subtyping, it\u0027s slightly more efficient\n    // to register this after defining the property.\n    registry.registerPropertyOnType(propertyName, this);\n\n    return result;\n  }",
    "begin_line": 327,
    "end_line": 350,
    "comment": "/** \n * Defines a property whose type is inferred.\n * @param propertyName the property\u0027s name\n * @param type the type\n * @param propertyNode the node corresponding to the inferred definition ofproperty that might later be accessed using  {@code getPropertyNode}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.defineProperty#368",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
    "snippet": "abstract boolean defineProperty(String propertyName, JSType type,\n      boolean inferred, Node propertyNode);",
    "begin_line": 368,
    "end_line": 369,
    "comment": "/** \n * Defines a property.\u003cp\u003e For clarity, callers should prefer  {@link #defineDeclaredProperty} and{@link #defineInferredProperty}.\n * @param propertyName the property\u0027s name\n * @param type the type\n * @param inferred {@code true} if this property\u0027s type is inferred\n * @param propertyNode the node that represents the definition of property.Depending on the actual sub-type the node type might be different. The general idea is to have an estimate of where in the source code this property is defined.\n * @return True if the property was registered successfully, false if thisconflicts with a previous property type declaration.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.removeProperty#378",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.removeProperty(java.lang.String)",
    "snippet": "public boolean removeProperty(String propertyName) {\n    return false;\n  }",
    "begin_line": 378,
    "end_line": 380,
    "comment": "/** \n * Removes the declared or inferred property from this ObjectType.\n * @param propertyName the property\u0027s name\n * @return true if the property was removed successfully. False if theproperty did not exist, or could not be removed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getPropertyNode#394",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getPropertyNode(java.lang.String)",
    "snippet": "public Node getPropertyNode(String propertyName) {\n    Property p \u003d getSlot(propertyName);\n    return p \u003d\u003d null ? null : p.getNode();\n  }",
    "begin_line": 394,
    "end_line": 397,
    "comment": "/** \n * Gets the node corresponding to the definition of the specified property. This could be the node corresponding to declaration of the property or the node corresponding to the first reference to this property, e.g., \"this.propertyName\" in a constructor. Note this is mainly intended to be an estimate of where in the source code a property is defined. Sometime the returned node is not even part of the global AST but in the AST of the JsDoc that defines a type.\n * @param propertyName the name of the property\n * @return the {@code Node} corresponding to the property or null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getOwnPropertyJSDocInfo#404",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getOwnPropertyJSDocInfo(java.lang.String)",
    "snippet": "public JSDocInfo getOwnPropertyJSDocInfo(String propertyName) {\n    Property p \u003d getOwnSlot(propertyName);\n    return p \u003d\u003d null ? null : p.getJSDocInfo();\n  }",
    "begin_line": 404,
    "end_line": 407,
    "comment": "/** \n * Gets the docInfo on the specified property on this type.  This should not be implemented recursively, as you generally need to know exactly on which type in the prototype chain the JSDocInfo exists.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.setPropertyJSDocInfo#415",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.setPropertyJSDocInfo(java.lang.String, com.google.javascript.rhino.JSDocInfo)",
    "snippet": "public void setPropertyJSDocInfo(String propertyName, JSDocInfo info) {\n    // by default, do nothing\n  }",
    "begin_line": 415,
    "end_line": 417,
    "comment": "/** \n * Sets the docInfo for the specified property from the {@link JSDocInfo} on its definition.\n * @param info {@code JSDocInfo} for the property definition. May be{@code null}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.findPropertyType#420",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.findPropertyType(java.lang.String)",
    "snippet": "@Override\n  public JSType findPropertyType(String propertyName) {\n    return hasProperty(propertyName) ?\n        getPropertyType(propertyName) : null;\n  }",
    "begin_line": 420,
    "end_line": 423,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getPropertyType#436",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getPropertyType(java.lang.String)",
    "snippet": "public JSType getPropertyType(String propertyName) {\n    StaticSlot\u003cJSType\u003e slot \u003d getSlot(propertyName);\n    if (slot \u003d\u003d null) {\n      if (isNoResolvedType() || isCheckedUnknownType()) {\n        return getNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE);\n      } else if (isEmptyType()) {\n        return getNativeType(JSTypeNative.NO_TYPE);\n      }\n      return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n    }\n    return slot.getType();\n  }",
    "begin_line": 436,
    "end_line": 447,
    "comment": "/** \n * Gets the property type of the property whose name is given. If the underlying object does not have this property, the Unknown type is returned to indicate that no information is available on this property. This gets overridden by FunctionType for lazily-resolved call() and bind() functions.\n * @return the property\u0027s type or {@link UnknownType}. This method never returns  {@code null}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.hasProperty#450",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.hasProperty(java.lang.String)",
    "snippet": "@Override\n  public boolean hasProperty(String propertyName) {\n    // Unknown types have all properties.\n    return isEmptyType() || isUnknownType() || getSlot(propertyName) !\u003d null;\n  }",
    "begin_line": 450,
    "end_line": 453,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.hasOwnProperty#459",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.hasOwnProperty(java.lang.String)",
    "snippet": "public boolean hasOwnProperty(String propertyName) {\n    return getOwnSlot(propertyName) !\u003d null;\n  }",
    "begin_line": 459,
    "end_line": 461,
    "comment": "/** \n * Checks whether the property whose name is given is present directly on the object.  Returns false even if it is declared on a supertype.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getOwnPropertyNames#468",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getOwnPropertyNames()",
    "snippet": "public Set\u003cString\u003e getOwnPropertyNames() {\n    return getPropertyMap().getOwnPropertyNames();\n  }",
    "begin_line": 468,
    "end_line": 470,
    "comment": "/** \n * Returns the names of all the properties directly on this type. Overridden by FunctionType to add \"prototype\".\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.isPropertyTypeInferred#475",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.isPropertyTypeInferred(java.lang.String)",
    "snippet": "public boolean isPropertyTypeInferred(String propertyName) {\n    StaticSlot\u003cJSType\u003e slot \u003d getSlot(propertyName);\n    return slot \u003d\u003d null ? false : slot.isTypeInferred();\n  }",
    "begin_line": 475,
    "end_line": 478,
    "comment": "/** \n * Checks whether the property\u0027s type is inferred.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.isPropertyTypeDeclared#483",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.isPropertyTypeDeclared(java.lang.String)",
    "snippet": "public boolean isPropertyTypeDeclared(String propertyName) {\n    StaticSlot\u003cJSType\u003e slot \u003d getSlot(propertyName);\n    return slot \u003d\u003d null ? false : !slot.isTypeInferred();\n  }",
    "begin_line": 483,
    "end_line": 486,
    "comment": "/** \n * Checks whether the property\u0027s type is declared.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.hasOwnDeclaredProperty#491",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.hasOwnDeclaredProperty(java.lang.String)",
    "snippet": "final boolean hasOwnDeclaredProperty(String name) {\n    return hasOwnProperty(name) \u0026\u0026 isPropertyTypeDeclared(name);\n  }",
    "begin_line": 491,
    "end_line": 493,
    "comment": "/** \n * Whether the given property is declared on this object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.isPropertyInExterns#496",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.isPropertyInExterns(java.lang.String)",
    "snippet": "public boolean isPropertyInExterns(String propertyName) {\n    Property p \u003d getSlot(propertyName);\n    return p \u003d\u003d null ? false : p.isFromExterns();\n  }",
    "begin_line": 496,
    "end_line": 499,
    "comment": "/** \n * Checks whether the property was defined in the externs. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getPropertiesCount#504",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getPropertiesCount()",
    "snippet": "public int getPropertiesCount() {\n    return getPropertyMap().getPropertiesCount();\n  }",
    "begin_line": 504,
    "end_line": 506,
    "comment": "/** \n * Gets the number of properties of this object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getPropertyNames#512",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getPropertyNames()",
    "snippet": "public Set\u003cString\u003e getPropertyNames() {\n    Set\u003cString\u003e props \u003d Sets.newTreeSet();\n    collectPropertyNames(props);\n    return props;\n  }",
    "begin_line": 512,
    "end_line": 516,
    "comment": "/** \n * Returns a list of properties defined or inferred on this type and any of its supertypes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.collectPropertyNames#521",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.collectPropertyNames(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "final void collectPropertyNames(Set\u003cString\u003e props) {\n    getPropertyMap().collectPropertyNames(props);\n  }",
    "begin_line": 521,
    "end_line": 523,
    "comment": "/** \n * Adds any properties defined on this type or its supertypes to the set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.visit#526",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.visit(com.google.javascript.rhino.jstype.Visitor\u003cT\u003e)",
    "snippet": "@Override\n  public \u003cT\u003e T visit(Visitor\u003cT\u003e visitor) {\n    return visitor.caseObjectType(this);\n  }",
    "begin_line": 526,
    "end_line": 528,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.visit#530",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.visit(com.google.javascript.rhino.jstype.RelationshipVisitor\u003cT\u003e, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override \u003cT\u003e T visit(RelationshipVisitor\u003cT\u003e visitor, JSType that) {\n    return visitor.caseObjectType(this, that);\n  }",
    "begin_line": 530,
    "end_line": 532,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.isImplicitPrototype#544",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.isImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "final boolean isImplicitPrototype(ObjectType prototype) {\n    for (ObjectType current \u003d this;\n         current !\u003d null;\n         current \u003d current.getImplicitPrototype()) {\n      if (current.isEquivalentTo(prototype)) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "begin_line": 544,
    "end_line": 553,
    "comment": "/** \n * Checks that the prototype is an implicit prototype of this object. Since each object has an implicit prototype, an implicit prototype\u0027s implicit prototype is also this implicit prototype\u0027s.\n * @param prototype any prototype based object\n * @return {@code true} if {@code prototype} is {@code equal} to anyobject in this object\u0027s implicit prototype chain.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getPossibleToBooleanOutcomes#556",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getPossibleToBooleanOutcomes()",
    "snippet": "@Override\n  public BooleanLiteralSet getPossibleToBooleanOutcomes() {\n    return BooleanLiteralSet.TRUE;\n  }",
    "begin_line": 556,
    "end_line": 558,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.isUnknownType#565",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.isUnknownType()",
    "snippet": "@Override\n  public boolean isUnknownType() {\n    // If the object is unknown now, check the supertype again,\n    // because it might have been resolved since the last check.\n    if (unknown) {\n      ObjectType implicitProto \u003d getImplicitPrototype();\n      if (implicitProto \u003d\u003d null ||\n          implicitProto.isNativeObjectType()) {\n        unknown \u003d false;\n        for (ObjectType interfaceType : getCtorExtendedInterfaces()) {\n          if (interfaceType.isUnknownType()) {\n            unknown \u003d true;\n            break;\n          }\n        }\n      } else {\n        unknown \u003d implicitProto.isUnknownType();\n      }\n    }\n    return unknown;\n  }",
    "begin_line": 565,
    "end_line": 584,
    "comment": "/** \n * We treat this as the unknown type if any of its implicit prototype properties is unknown.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.isObject#587",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.isObject()",
    "snippet": "@Override\n  public boolean isObject() {\n    return true;\n  }",
    "begin_line": 587,
    "end_line": 589,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.hasCachedValues#596",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.hasCachedValues()",
    "snippet": "public boolean hasCachedValues() {\n    return !unknown;\n  }",
    "begin_line": 596,
    "end_line": 598,
    "comment": "/** \n * Returns true if any cached values have been set for this type.  If true, then the prototype chain should not be changed, as it might invalidate the cached values.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.clearCachedValues#604",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.clearCachedValues()",
    "snippet": "public void clearCachedValues() {\n    unknown \u003d true;\n  }",
    "begin_line": 604,
    "end_line": 606,
    "comment": "/** \n * Clear cached values. Should be called before making changes to a prototype that may have been changed since creation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.isNativeObjectType#609",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.isNativeObjectType()",
    "snippet": "public boolean isNativeObjectType() {\n    return false;\n  }",
    "begin_line": 609,
    "end_line": 611,
    "comment": "/** \n * Whether this is a built-in object. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.cast#616",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.cast(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public static ObjectType cast(JSType type) {\n    return type \u003d\u003d null ? null : type.toObjectType();\n  }",
    "begin_line": 616,
    "end_line": 618,
    "comment": "/** \n * A null-safe version of JSType#toObjectType.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.isFunctionPrototypeType#621",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.isFunctionPrototypeType()",
    "snippet": "@Override\n  public final boolean isFunctionPrototypeType() {\n    return getOwnerFunction() !\u003d null;\n  }",
    "begin_line": 621,
    "end_line": 623,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getOwnerFunction#626",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getOwnerFunction()",
    "snippet": "public FunctionType getOwnerFunction() {\n    return null;\n  }",
    "begin_line": 626,
    "end_line": 628,
    "comment": "/** \n * Gets the owner of this if it\u0027s a function prototype. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.setOwnerFunction#631",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.setOwnerFunction(com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "void setOwnerFunction(FunctionType type) {}",
    "begin_line": 631,
    "end_line": 631,
    "comment": "/** \n * Sets the owner function. By default, does nothing. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getCtorImplementedInterfaces#637",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getCtorImplementedInterfaces()",
    "snippet": "public Iterable\u003cObjectType\u003e getCtorImplementedInterfaces() {\n    return ImmutableSet.of();\n  }",
    "begin_line": 637,
    "end_line": 639,
    "comment": "/** \n * Gets the interfaces implemented by the ctor associated with this type. Intended to be overridden by subclasses.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectType.getCtorExtendedInterfaces#645",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ObjectType",
    "signature": "com.google.javascript.rhino.jstype.ObjectType.getCtorExtendedInterfaces()",
    "snippet": "public Iterable\u003cObjectType\u003e getCtorExtendedInterfaces() {\n    return ImmutableSet.of();\n  }",
    "begin_line": 645,
    "end_line": 647,
    "comment": "/** \n * Gets the interfaces extended by the interface associated with this type. Intended to be overridden by subclasses.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.Property#79",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/Property.java",
    "class_name": "com.google.javascript.rhino.jstype.Property",
    "signature": "com.google.javascript.rhino.jstype.Property.Property(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
    "snippet": " Property(String name, JSType type, boolean inferred,\n      Node propertyNode) {\n    this.name \u003d name;\n    this.type \u003d type;\n    this.inferred \u003d inferred;\n    this.propertyNode \u003d propertyNode;\n  }",
    "begin_line": 79,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.getName#88",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/Property.java",
    "class_name": "com.google.javascript.rhino.jstype.Property",
    "signature": "com.google.javascript.rhino.jstype.Property.getName()",
    "snippet": "@Override\n      public String getName() {\n    return name;\n  }",
    "begin_line": 88,
    "end_line": 90,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.getNode#93",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/Property.java",
    "class_name": "com.google.javascript.rhino.jstype.Property",
    "signature": "com.google.javascript.rhino.jstype.Property.getNode()",
    "snippet": "@Override\n      public Node getNode() {\n    return propertyNode;\n  }",
    "begin_line": 93,
    "end_line": 95,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.getSourceFile#98",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/Property.java",
    "class_name": "com.google.javascript.rhino.jstype.Property",
    "signature": "com.google.javascript.rhino.jstype.Property.getSourceFile()",
    "snippet": "@Override\n      public StaticSourceFile getSourceFile() {\n    return propertyNode \u003d\u003d null ? null : propertyNode.getStaticSourceFile();\n  }",
    "begin_line": 98,
    "end_line": 100,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.getSymbol#103",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/Property.java",
    "class_name": "com.google.javascript.rhino.jstype.Property",
    "signature": "com.google.javascript.rhino.jstype.Property.getSymbol()",
    "snippet": "@Override\n      public Property getSymbol() {\n    return this;\n  }",
    "begin_line": 103,
    "end_line": 105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.getDeclaration#108",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/Property.java",
    "class_name": "com.google.javascript.rhino.jstype.Property",
    "signature": "com.google.javascript.rhino.jstype.Property.getDeclaration()",
    "snippet": "@Override\n      public Property getDeclaration() {\n    return propertyNode \u003d\u003d null ? null : this;\n  }",
    "begin_line": 108,
    "end_line": 110,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.getType#113",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/Property.java",
    "class_name": "com.google.javascript.rhino.jstype.Property",
    "signature": "com.google.javascript.rhino.jstype.Property.getType()",
    "snippet": "@Override\n      public JSType getType() {\n    return type;\n  }",
    "begin_line": 113,
    "end_line": 115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.isTypeInferred#118",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/Property.java",
    "class_name": "com.google.javascript.rhino.jstype.Property",
    "signature": "com.google.javascript.rhino.jstype.Property.isTypeInferred()",
    "snippet": "@Override\n      public boolean isTypeInferred() {\n    return inferred;\n  }",
    "begin_line": 118,
    "end_line": 120,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.isFromExterns#122",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/Property.java",
    "class_name": "com.google.javascript.rhino.jstype.Property",
    "signature": "com.google.javascript.rhino.jstype.Property.isFromExterns()",
    "snippet": "boolean isFromExterns() {\n    return propertyNode \u003d\u003d null ? false : propertyNode.isFromExterns();\n  }",
    "begin_line": 122,
    "end_line": 124,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.setType#126",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/Property.java",
    "class_name": "com.google.javascript.rhino.jstype.Property",
    "signature": "com.google.javascript.rhino.jstype.Property.setType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "void setType(JSType type) {\n    this.type \u003d type;\n  }",
    "begin_line": 126,
    "end_line": 128,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.getJSDocInfo#130",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/Property.java",
    "class_name": "com.google.javascript.rhino.jstype.Property",
    "signature": "com.google.javascript.rhino.jstype.Property.getJSDocInfo()",
    "snippet": "@Override public JSDocInfo getJSDocInfo() {\n    return this.docInfo;\n  }",
    "begin_line": 130,
    "end_line": 132,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.setJSDocInfo#134",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/Property.java",
    "class_name": "com.google.javascript.rhino.jstype.Property",
    "signature": "com.google.javascript.rhino.jstype.Property.setJSDocInfo(com.google.javascript.rhino.JSDocInfo)",
    "snippet": "void setJSDocInfo(JSDocInfo info) {\n    this.docInfo \u003d info;\n  }",
    "begin_line": 134,
    "end_line": 136,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Property.setNode#138",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/Property.java",
    "class_name": "com.google.javascript.rhino.jstype.Property",
    "signature": "com.google.javascript.rhino.jstype.Property.setNode(com.google.javascript.rhino.Node)",
    "snippet": "public void setNode(Node n) {\n    this.propertyNode \u003d n;\n  }",
    "begin_line": 138,
    "end_line": 140,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyMap.apply#65",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PropertyMap.java",
    "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
    "signature": "com.google.javascript.rhino.jstype.PropertyMap.apply(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "@Override public PropertyMap apply(ObjectType t) {\n      return t.getPropertyMap();\n    }",
    "begin_line": 65,
    "end_line": 67,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyMap.PropertyMap#79",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PropertyMap.java",
    "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
    "signature": "com.google.javascript.rhino.jstype.PropertyMap.PropertyMap()",
    "snippet": " PropertyMap() {\n    this(Maps.\u003cString, Property\u003enewTreeMap());\n  }",
    "begin_line": 79,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyMap.PropertyMap#83",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PropertyMap.java",
    "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
    "signature": "com.google.javascript.rhino.jstype.PropertyMap.PropertyMap(java.util.Map\u003cjava.lang.String,com.google.javascript.rhino.jstype.Property\u003e)",
    "snippet": "private PropertyMap(Map\u003cString, Property\u003e underlyingMap) {\n    this.properties \u003d underlyingMap;\n  }",
    "begin_line": 83,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyMap.immutableEmptyMap#87",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PropertyMap.java",
    "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
    "signature": "com.google.javascript.rhino.jstype.PropertyMap.immutableEmptyMap()",
    "snippet": "static PropertyMap immutableEmptyMap() {\n    return EMPTY_MAP;\n  }",
    "begin_line": 87,
    "end_line": 89,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyMap.setParentSource#91",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PropertyMap.java",
    "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
    "signature": "com.google.javascript.rhino.jstype.PropertyMap.setParentSource(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "void setParentSource(ObjectType ownerType) {\n    if (this !\u003d EMPTY_MAP) {\n      this.parentSource \u003d ownerType;\n    }\n  }",
    "begin_line": 91,
    "end_line": 95,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyMap.getPrimaryParent#98",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PropertyMap.java",
    "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
    "signature": "com.google.javascript.rhino.jstype.PropertyMap.getPrimaryParent()",
    "snippet": "PropertyMap getPrimaryParent() {\n    if (parentSource \u003d\u003d null) {\n      return null;\n    }\n    ObjectType iProto \u003d parentSource.getImplicitPrototype();\n    return iProto \u003d\u003d null ? null : iProto.getPropertyMap();\n  }",
    "begin_line": 98,
    "end_line": 104,
    "comment": "/** \n * Returns the direct parent of this property map. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyMap.getSecondaryParents#110",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PropertyMap.java",
    "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
    "signature": "com.google.javascript.rhino.jstype.PropertyMap.getSecondaryParents()",
    "snippet": "Iterable\u003cPropertyMap\u003e getSecondaryParents() {\n    if (parentSource \u003d\u003d null) {\n      return ImmutableList.of();\n    }\n    Iterable\u003cObjectType\u003e extendedInterfaces \u003d\n        parentSource.getCtorExtendedInterfaces();\n\n    // Most of the time, this will be empty.\n    if (Iterables.isEmpty(extendedInterfaces)) {\n      return ImmutableList.of();\n    }\n\n    return Iterables.transform(extendedInterfaces, PROP_MAP_FROM_TYPE);\n  }",
    "begin_line": 110,
    "end_line": 123,
    "comment": "/** \n * Returns the secondary parents of this property map, for interfaces that need multiple inheritance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyMap.getSlot#125",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PropertyMap.java",
    "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
    "signature": "com.google.javascript.rhino.jstype.PropertyMap.getSlot(java.lang.String)",
    "snippet": "Property getSlot(String name) {\n    if (properties.containsKey(name)) {\n      return properties.get(name);\n    }\n    PropertyMap primaryParent \u003d getPrimaryParent();\n    if (primaryParent !\u003d null) {\n      Property prop \u003d primaryParent.getSlot(name);\n      if (prop !\u003d null) {\n        return prop;\n      }\n    }\n    for (PropertyMap p : getSecondaryParents()) {\n      if (p !\u003d null) {\n        Property prop \u003d p.getSlot(name);\n        if (prop !\u003d null) {\n          return prop;\n        }\n      }\n    }\n    return null;\n  }",
    "begin_line": 125,
    "end_line": 145,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyMap.getOwnProperty#147",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PropertyMap.java",
    "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
    "signature": "com.google.javascript.rhino.jstype.PropertyMap.getOwnProperty(java.lang.String)",
    "snippet": "Property getOwnProperty(String propertyName) {\n    return properties.get(propertyName);\n  }",
    "begin_line": 147,
    "end_line": 149,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyMap.getPropertiesCount#151",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PropertyMap.java",
    "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
    "signature": "com.google.javascript.rhino.jstype.PropertyMap.getPropertiesCount()",
    "snippet": "int getPropertiesCount() {\n    PropertyMap primaryParent \u003d getPrimaryParent();\n    if (primaryParent \u003d\u003d null) {\n      return this.properties.size();\n    }\n    Set\u003cString\u003e props \u003d Sets.newHashSet();\n    collectPropertyNames(props);\n    return props.size();\n  }",
    "begin_line": 151,
    "end_line": 159,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyMap.hasOwnProperty#161",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PropertyMap.java",
    "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
    "signature": "com.google.javascript.rhino.jstype.PropertyMap.hasOwnProperty(java.lang.String)",
    "snippet": "boolean hasOwnProperty(String propertyName) {\n    return properties.get(propertyName) !\u003d null;\n  }",
    "begin_line": 161,
    "end_line": 163,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyMap.hasProperty#165",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PropertyMap.java",
    "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
    "signature": "com.google.javascript.rhino.jstype.PropertyMap.hasProperty(java.lang.String)",
    "snippet": "boolean hasProperty(String propertyName) {\n    return getSlot(propertyName) !\u003d null;\n  }",
    "begin_line": 165,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyMap.getOwnPropertyNames#169",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PropertyMap.java",
    "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
    "signature": "com.google.javascript.rhino.jstype.PropertyMap.getOwnPropertyNames()",
    "snippet": "Set\u003cString\u003e getOwnPropertyNames() {\n    return properties.keySet();\n  }",
    "begin_line": 169,
    "end_line": 171,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyMap.collectPropertyNames#173",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PropertyMap.java",
    "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
    "signature": "com.google.javascript.rhino.jstype.PropertyMap.collectPropertyNames(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "void collectPropertyNames(Set\u003cString\u003e props) {\n    for (String prop : properties.keySet()) {\n      props.add(prop);\n    }\n    PropertyMap primaryParent \u003d getPrimaryParent();\n    if (primaryParent !\u003d null) {\n      primaryParent.collectPropertyNames(props);\n    }\n    for (PropertyMap p : getSecondaryParents()) {\n      if (p !\u003d null) {\n        p.collectPropertyNames(props);\n      }\n    }\n  }",
    "begin_line": 173,
    "end_line": 186,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyMap.removeProperty#188",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PropertyMap.java",
    "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
    "signature": "com.google.javascript.rhino.jstype.PropertyMap.removeProperty(java.lang.String)",
    "snippet": "boolean removeProperty(String name) {\n    return properties.remove(name) !\u003d null;\n  }",
    "begin_line": 188,
    "end_line": 190,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyMap.putProperty#192",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PropertyMap.java",
    "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
    "signature": "com.google.javascript.rhino.jstype.PropertyMap.putProperty(java.lang.String, com.google.javascript.rhino.jstype.Property)",
    "snippet": "void putProperty(String name, Property newProp) {\n    Property oldProp \u003d properties.get(name);\n    if (oldProp !\u003d null) {\n      // This is to keep previously inferred JsDoc info, e.g., in a\n      // replaceScript scenario.\n      newProp.setJSDocInfo(oldProp.getJSDocInfo());\n    }\n    properties.put(name, newProp);\n  }",
    "begin_line": 192,
    "end_line": 200,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyMap.values#202",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PropertyMap.java",
    "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
    "signature": "com.google.javascript.rhino.jstype.PropertyMap.values()",
    "snippet": "Iterable\u003cProperty\u003e values() {\n    return properties.values();\n  }",
    "begin_line": 202,
    "end_line": 204,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.PrototypeObjectType#103",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": " PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype) {\n    this(registry, className, implicitPrototype, false, null, null);\n  }",
    "begin_line": 103,
    "end_line": 106,
    "comment": "/** \n * Creates an object type.\n * @param className the name of the class.  May be {@code null} todenote an anonymous class.\n * @param implicitPrototype the implicit prototype(a.k.a.  {@code [[Prototype]]}) as defined by ECMA-262. If the implicit prototype is  {@code null} the implicit prototype will beset to the  {@link JSTypeNative#OBJECT_TYPE}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.PrototypeObjectType#112",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType, boolean, ImmutableList\u003cString\u003e, ImmutableList\u003cJSType\u003e)",
    "snippet": " PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype, boolean nativeType,\n      ImmutableList\u003cString\u003e templateKeys,\n      ImmutableList\u003cJSType\u003e templatizedTypes) {\n    super(registry, templateKeys, templatizedTypes);\n    this.properties \u003d new PropertyMap();\n    this.properties.setParentSource(this);\n\n    this.className \u003d className;\n    this.nativeType \u003d nativeType;\n    if (nativeType || implicitPrototype !\u003d null) {\n      setImplicitPrototype(implicitPrototype);\n    } else {\n      setImplicitPrototype(\n          registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE));\n    }\n  }",
    "begin_line": 112,
    "end_line": 128,
    "comment": "/** \n * Creates an object type, allowing specification of the implicit prototype, whether the object is native, and any templatized types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.getPropertyMap#131",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getPropertyMap()",
    "snippet": "@Override\n  PropertyMap getPropertyMap() {\n    return properties;\n  }",
    "begin_line": 131,
    "end_line": 133,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.defineProperty#136",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      Node propertyNode) {\n    if (hasOwnDeclaredProperty(name)) {\n      return false;\n    }\n    Property newProp \u003d new Property(\n        name, type, inferred, propertyNode);\n    properties.putProperty(name, newProp);\n    return true;\n  }",
    "begin_line": 136,
    "end_line": 145,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.removeProperty#148",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.removeProperty(java.lang.String)",
    "snippet": "@Override\n  public boolean removeProperty(String name) {\n    return properties.removeProperty(name);\n  }",
    "begin_line": 148,
    "end_line": 150,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.setPropertyJSDocInfo#153",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setPropertyJSDocInfo(java.lang.String, com.google.javascript.rhino.JSDocInfo)",
    "snippet": "@Override\n  public void setPropertyJSDocInfo(String propertyName, JSDocInfo info) {\n    if (info !\u003d null) {\n      if (properties.getOwnProperty(propertyName) \u003d\u003d null) {\n        // If docInfo was attached, but the type of the property\n        // was not defined anywhere, then we consider this an explicit\n        // declaration of the property.\n        defineInferredProperty(propertyName, getPropertyType(propertyName),\n            null);\n      }\n\n      // The prototype property is not represented as a normal Property.\n      // We probably don\u0027t want to attach any JSDoc to it anyway.\n      Property property \u003d properties.getOwnProperty(propertyName);\n      if (property !\u003d null) {\n        property.setJSDocInfo(info);\n      }\n    }\n  }",
    "begin_line": 153,
    "end_line": 170,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.matchesNumberContext#173",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.matchesNumberContext()",
    "snippet": "@Override\n  public boolean matchesNumberContext() {\n    return isNumberObjectType() || isDateType() || isBooleanObjectType() ||\n        isStringObjectType() || hasOverridenNativeProperty(\"valueOf\");\n  }",
    "begin_line": 173,
    "end_line": 176,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.matchesStringContext#179",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.matchesStringContext()",
    "snippet": "@Override\n  public boolean matchesStringContext() {\n    return isTheObjectType() || isStringObjectType() || isDateType() ||\n        isRegexpType() || isArrayType() || isNumberObjectType() ||\n        isBooleanObjectType() || hasOverridenNativeProperty(\"toString\");\n  }",
    "begin_line": 179,
    "end_line": 183,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.hasOverridenNativeProperty#189",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasOverridenNativeProperty(java.lang.String)",
    "snippet": "private boolean hasOverridenNativeProperty(String propertyName) {\n    if (isNativeObjectType()) {\n      return false;\n    }\n\n    JSType propertyType \u003d getPropertyType(propertyName);\n    ObjectType nativeType \u003d\n        isFunctionType() ?\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_PROTOTYPE) :\n        registry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE);\n    JSType nativePropertyType \u003d nativeType.getPropertyType(propertyName);\n    return propertyType !\u003d nativePropertyType;\n  }",
    "begin_line": 189,
    "end_line": 201,
    "comment": "/** \n * Given the name of a native object property, checks whether the property is present on the object and different from the native one.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.unboxesTo#204",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.unboxesTo()",
    "snippet": "@Override\n  public JSType unboxesTo() {\n    if (isStringObjectType()) {\n      return getNativeType(JSTypeNative.STRING_TYPE);\n    } else if (isBooleanObjectType()) {\n      return getNativeType(JSTypeNative.BOOLEAN_TYPE);\n    } else if (isNumberObjectType()) {\n      return getNativeType(JSTypeNative.NUMBER_TYPE);\n    } else {\n      return super.unboxesTo();\n    }\n  }",
    "begin_line": 204,
    "end_line": 214,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.matchesObjectContext#217",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.matchesObjectContext()",
    "snippet": "@Override\n  public boolean matchesObjectContext() {\n    return true;\n  }",
    "begin_line": 217,
    "end_line": 219,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.canBeCalled#222",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.canBeCalled()",
    "snippet": "@Override\n  public boolean canBeCalled() {\n    return isRegexpType();\n  }",
    "begin_line": 222,
    "end_line": 224,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.toStringHelper#227",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.toStringHelper(boolean)",
    "snippet": "@Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don\u0027t pretty print recursively.\n      prettyPrint \u003d false;\n\n      // Use a tree set so that the properties are sorted.\n      Set\u003cString\u003e propertyNames \u003d Sets.newTreeSet();\n      for (ObjectType current \u003d this;\n           current !\u003d null \u0026\u0026 !current.isNativeObjectType() \u0026\u0026\n               propertyNames.size() \u003c\u003d MAX_PRETTY_PRINTED_PROPERTIES;\n           current \u003d current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb \u003d new StringBuilder();\n      sb.append(\"{\");\n\n      int i \u003d 0;\n      for (String property : propertyNames) {\n        if (i \u003e 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        sb.append(getPropertyType(property).toStringHelper(forAnnotations));\n\n        ++i;\n        if (!forAnnotations \u0026\u0026 i \u003d\u003d MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint \u003d true;\n      return sb.toString();\n    } else {\n      return forAnnotations ? \"?\" : \"{...}\";\n    }\n  }",
    "begin_line": 227,
    "end_line": 270,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.setPrettyPrint#272",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setPrettyPrint(boolean)",
    "snippet": "void setPrettyPrint(boolean prettyPrint) {\n    this.prettyPrint \u003d prettyPrint;\n  }",
    "begin_line": 272,
    "end_line": 274,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.isPrettyPrint#276",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isPrettyPrint()",
    "snippet": "boolean isPrettyPrint() {\n    return prettyPrint;\n  }",
    "begin_line": 276,
    "end_line": 278,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.getConstructor#281",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getConstructor()",
    "snippet": "@Override\n  public FunctionType getConstructor() {\n    return null;\n  }",
    "begin_line": 281,
    "end_line": 283,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.getImplicitPrototype#286",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getImplicitPrototype()",
    "snippet": "@Override\n  public ObjectType getImplicitPrototype() {\n    return implicitPrototypeFallback;\n  }",
    "begin_line": 286,
    "end_line": 288,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.setImplicitPrototype#296",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "final void setImplicitPrototype(ObjectType implicitPrototype) {\n    checkState(!hasCachedValues());\n    this.implicitPrototypeFallback \u003d implicitPrototype;\n  }",
    "begin_line": 296,
    "end_line": 299,
    "comment": "/** \n * This should only be reset on the FunctionPrototypeType, only to fix an incorrectly established prototype chain due to the user having a mismatch in super class declaration, and only before properties on that type are processed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.getReferenceName#302",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getReferenceName()",
    "snippet": "@Override\n  public String getReferenceName() {\n    if (className !\u003d null) {\n      return className;\n    } else if (ownerFunction !\u003d null) {\n      return ownerFunction.getReferenceName() + \".prototype\";\n    } else {\n      return null;\n    }\n  }",
    "begin_line": 302,
    "end_line": 310,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.hasReferenceName#313",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasReferenceName()",
    "snippet": "@Override\n  public boolean hasReferenceName() {\n    return className !\u003d null || ownerFunction !\u003d null;\n  }",
    "begin_line": 313,
    "end_line": 315,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.isSubtype#318",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public boolean isSubtype(JSType that) {\n    if (JSType.isSubtypeHelper(this, that)) {\n      return true;\n    }\n\n    // Union types\n    if (that.isUnionType()) {\n      // The static {@code JSType.isSubtype} check already decomposed\n      // union types, so we don\u0027t need to check those again.\n      return false;\n    }\n\n    // record types\n    if (that.isRecordType()) {\n      return RecordType.isSubtype(this, that.toMaybeRecordType());\n    }\n\n    // Interfaces\n    // Find all the interfaces implemented by this class and compare each one\n    // to the interface instance.\n    ObjectType thatObj \u003d that.toObjectType();\n    FunctionType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n\n    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n      for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n        if (thisInterface.isSubtype(that)) {\n          return true;\n        }\n      }\n    } else if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n      Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n      for (ObjectType thisInterface : thisInterfaces) {\n        if (thisInterface.isSubtype(that)) {\n          return true;\n        }\n      }\n    }\n\n    // other prototype based objects\n    if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n      // If unsure, say \u0027yes\u0027, to avoid spurious warnings.\n      // TODO(user): resolve the prototype chain completely in all cases,\n      // to avoid guessing.\n      return true;\n    }\n    return thatObj !\u003d null \u0026\u0026 isImplicitPrototype(thatObj);\n  }",
    "begin_line": 318,
    "end_line": 364,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.implicitPrototypeChainIsUnknown#366",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.implicitPrototypeChainIsUnknown()",
    "snippet": "private boolean implicitPrototypeChainIsUnknown() {\n    ObjectType p \u003d getImplicitPrototype();\n    while (p !\u003d null) {\n      if (p.isUnknownType()) {\n        return true;\n      }\n      p \u003d p.getImplicitPrototype();\n    }\n    return false;\n  }",
    "begin_line": 366,
    "end_line": 375,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.hasCachedValues#378",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasCachedValues()",
    "snippet": "@Override\n  public boolean hasCachedValues() {\n    return super.hasCachedValues();\n  }",
    "begin_line": 378,
    "end_line": 380,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.isNativeObjectType#384",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isNativeObjectType()",
    "snippet": "@Override\n  public boolean isNativeObjectType() {\n    return nativeType;\n  }",
    "begin_line": 384,
    "end_line": 386,
    "comment": "/** \n * Whether this is a built-in object. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.setOwnerFunction#389",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setOwnerFunction(com.google.javascript.rhino.jstype.FunctionType)",
    "snippet": "@Override\n  void setOwnerFunction(FunctionType type) {\n    Preconditions.checkState(ownerFunction \u003d\u003d null || type \u003d\u003d null);\n    ownerFunction \u003d type;\n  }",
    "begin_line": 389,
    "end_line": 392,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.getOwnerFunction#395",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getOwnerFunction()",
    "snippet": "@Override\n  public FunctionType getOwnerFunction() {\n    return ownerFunction;\n  }",
    "begin_line": 395,
    "end_line": 397,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.getCtorImplementedInterfaces#400",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getCtorImplementedInterfaces()",
    "snippet": "@Override\n  public Iterable\u003cObjectType\u003e getCtorImplementedInterfaces() {\n    return isFunctionPrototypeType()\n        ? getOwnerFunction().getImplementedInterfaces()\n        : ImmutableList.\u003cObjectType\u003eof();\n  }",
    "begin_line": 400,
    "end_line": 404,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.getCtorExtendedInterfaces#407",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getCtorExtendedInterfaces()",
    "snippet": "@Override\n  public Iterable\u003cObjectType\u003e getCtorExtendedInterfaces() {\n    return isFunctionPrototypeType()\n        ? getOwnerFunction().getExtendedInterfaces()\n        : ImmutableList.\u003cObjectType\u003eof();\n  }",
    "begin_line": 407,
    "end_line": 411,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.resolveInternal#414",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.resolveInternal(com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "@Override\n  JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    setResolvedTypeInternal(this);\n\n    ObjectType implicitPrototype \u003d getImplicitPrototype();\n    if (implicitPrototype !\u003d null) {\n      implicitPrototypeFallback \u003d\n          (ObjectType) implicitPrototype.resolve(t, scope);\n    }\n    for (Property prop : properties.values()) {\n      prop.setType(safeResolve(prop.getType(), t, scope));\n    }\n    return this;\n  }",
    "begin_line": 414,
    "end_line": 426,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.matchConstraint#429",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.matchConstraint(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public void matchConstraint(JSType constraint) {\n    // We only want to match constraints on anonymous types.\n    if (hasReferenceName()) {\n      return;\n    }\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraint {{prop: (number|undefined)}}\n    // function f(constraint) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    if (constraint.isRecordType()) {\n      matchRecordTypeConstraint(constraint.toObjectType());\n    } else if (constraint.isUnionType()) {\n      for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {\n        if (alt.isRecordType()) {\n          matchRecordTypeConstraint(alt.toObjectType());\n        }\n      }\n    }\n  }",
    "begin_line": 429,
    "end_line": 453,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrototypeObjectType.matchRecordTypeConstraint#455",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
    "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.matchRecordTypeConstraint(com.google.javascript.rhino.jstype.ObjectType)",
    "snippet": "public void matchRecordTypeConstraint(ObjectType constraintObj) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType \u003d constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer \u003d propType;\n        if (!hasProperty(prop)) {\n          typeToInfer \u003d getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }",
    "begin_line": 455,
    "end_line": 467,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.ProxyObjectType#61",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.ProxyObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.JSType)",
    "snippet": " ProxyObjectType(JSTypeRegistry registry, JSType referencedType) {\n    super(registry);\n    setReferencedType(referencedType);\n  }",
    "begin_line": 61,
    "end_line": 64,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.getPropertyMap#67",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.getPropertyMap()",
    "snippet": "@Override\n  PropertyMap getPropertyMap() {\n    return referencedObjType \u003d\u003d null\n        ? PropertyMap.immutableEmptyMap() : referencedObjType.getPropertyMap();\n  }",
    "begin_line": 67,
    "end_line": 70,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.getReferencedTypeInternal#72",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.getReferencedTypeInternal()",
    "snippet": "JSType getReferencedTypeInternal() {\n    return referencedType;\n  }",
    "begin_line": 72,
    "end_line": 74,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.getReferencedObjTypeInternal#76",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.getReferencedObjTypeInternal()",
    "snippet": "ObjectType getReferencedObjTypeInternal() {\n    return referencedObjType;\n  }",
    "begin_line": 76,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.setReferencedType#80",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.setReferencedType(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "void setReferencedType(JSType referencedType) {\n    this.referencedType \u003d referencedType;\n    if (referencedType instanceof ObjectType) {\n      this.referencedObjType \u003d (ObjectType) referencedType;\n    } else {\n      this.referencedObjType \u003d null;\n    }\n  }",
    "begin_line": 80,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.getReferenceName#90",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.getReferenceName()",
    "snippet": "@Override\n  public String getReferenceName() {\n    return referencedObjType \u003d\u003d null ?\n        \"\" : referencedObjType.getReferenceName();\n  }",
    "begin_line": 90,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.hasReferenceName#96",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.hasReferenceName()",
    "snippet": "@Override\n  public boolean hasReferenceName() {\n    return referencedObjType \u003d\u003d null ?\n        null : referencedObjType.hasReferenceName();\n  }",
    "begin_line": 96,
    "end_line": 99,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.matchesNumberContext#102",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.matchesNumberContext()",
    "snippet": "@Override\n  public boolean matchesNumberContext() {\n    return referencedType.matchesNumberContext();\n  }",
    "begin_line": 102,
    "end_line": 104,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.matchesStringContext#107",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.matchesStringContext()",
    "snippet": "@Override\n  public boolean matchesStringContext() {\n    return referencedType.matchesStringContext();\n  }",
    "begin_line": 107,
    "end_line": 109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.matchesObjectContext#112",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.matchesObjectContext()",
    "snippet": "@Override\n  public boolean matchesObjectContext() {\n    return referencedType.matchesObjectContext();\n  }",
    "begin_line": 112,
    "end_line": 114,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.canBeCalled#117",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.canBeCalled()",
    "snippet": "@Override\n  public boolean canBeCalled() {\n    return referencedType.canBeCalled();\n  }",
    "begin_line": 117,
    "end_line": 119,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.isNoType#122",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.isNoType()",
    "snippet": "@Override\n  public boolean isNoType() {\n    return referencedType.isNoType();\n  }",
    "begin_line": 122,
    "end_line": 124,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.isNoObjectType#127",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.isNoObjectType()",
    "snippet": "@Override\n  public boolean isNoObjectType() {\n    return referencedType.isNoObjectType();\n  }",
    "begin_line": 127,
    "end_line": 129,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.isNoResolvedType#132",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.isNoResolvedType()",
    "snippet": "@Override\n  public boolean isNoResolvedType() {\n    return referencedType.isNoResolvedType();\n  }",
    "begin_line": 132,
    "end_line": 134,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.isUnknownType#137",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.isUnknownType()",
    "snippet": "@Override\n  public boolean isUnknownType() {\n    return referencedType.isUnknownType();\n  }",
    "begin_line": 137,
    "end_line": 139,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.isCheckedUnknownType#142",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.isCheckedUnknownType()",
    "snippet": "@Override\n  public boolean isCheckedUnknownType() {\n    return referencedType.isCheckedUnknownType();\n  }",
    "begin_line": 142,
    "end_line": 144,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.isNullable#147",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.isNullable()",
    "snippet": "@Override\n  public boolean isNullable() {\n    return referencedType.isNullable();\n  }",
    "begin_line": 147,
    "end_line": 149,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.toMaybeEnumType#152",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.toMaybeEnumType()",
    "snippet": "@Override\n  public EnumType toMaybeEnumType() {\n    return referencedType.toMaybeEnumType();\n  }",
    "begin_line": 152,
    "end_line": 154,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.isConstructor#157",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.isConstructor()",
    "snippet": "@Override\n  public boolean isConstructor() {\n    return referencedType.isConstructor();\n  }",
    "begin_line": 157,
    "end_line": 159,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.isNominalType#162",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.isNominalType()",
    "snippet": "@Override\n  public boolean isNominalType() {\n    return referencedType.isNominalType();\n  }",
    "begin_line": 162,
    "end_line": 164,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.isInstanceType#167",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.isInstanceType()",
    "snippet": "@Override\n  public boolean isInstanceType() {\n    return referencedType.isInstanceType();\n  }",
    "begin_line": 167,
    "end_line": 169,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.isInterface#172",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.isInterface()",
    "snippet": "@Override\n  public boolean isInterface() {\n    return referencedType.isInterface();\n  }",
    "begin_line": 172,
    "end_line": 174,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.isOrdinaryFunction#177",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.isOrdinaryFunction()",
    "snippet": "@Override\n  public boolean isOrdinaryFunction() {\n    return referencedType.isOrdinaryFunction();\n  }",
    "begin_line": 177,
    "end_line": 179,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.isAllType#182",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.isAllType()",
    "snippet": "@Override\n  public boolean isAllType() {\n    return referencedType.isAllType();\n  }",
    "begin_line": 182,
    "end_line": 184,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.isStruct#187",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.isStruct()",
    "snippet": "@Override\n  public boolean isStruct() {\n    return referencedType.isStruct();\n  }",
    "begin_line": 187,
    "end_line": 189,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.isDict#192",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.isDict()",
    "snippet": "@Override\n  public boolean isDict() {\n    return referencedType.isDict();\n  }",
    "begin_line": 192,
    "end_line": 194,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.isNativeObjectType#197",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.isNativeObjectType()",
    "snippet": "@Override\n  public boolean isNativeObjectType() {\n    return referencedObjType \u003d\u003d null\n        ? false : referencedObjType.isNativeObjectType();\n  }",
    "begin_line": 197,
    "end_line": 200,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.toMaybeRecordType#203",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.toMaybeRecordType()",
    "snippet": "@Override\n  RecordType toMaybeRecordType() {\n    return referencedType.toMaybeRecordType();\n  }",
    "begin_line": 203,
    "end_line": 205,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.toMaybeUnionType#208",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.toMaybeUnionType()",
    "snippet": "@Override\n  public UnionType toMaybeUnionType() {\n    return referencedType.toMaybeUnionType();\n  }",
    "begin_line": 208,
    "end_line": 210,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.toMaybeFunctionType#213",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.toMaybeFunctionType()",
    "snippet": "@Override\n  public FunctionType toMaybeFunctionType() {\n    return referencedType.toMaybeFunctionType();\n  }",
    "begin_line": 213,
    "end_line": 215,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.toMaybeEnumElementType#218",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.toMaybeEnumElementType()",
    "snippet": "@Override\n  public EnumElementType toMaybeEnumElementType() {\n    return referencedType.toMaybeEnumElementType();\n  }",
    "begin_line": 218,
    "end_line": 220,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.testForEquality#223",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.testForEquality(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public TernaryValue testForEquality(JSType that) {\n    return referencedType.testForEquality(that);\n  }",
    "begin_line": 223,
    "end_line": 225,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.isSubtype#228",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public boolean isSubtype(JSType that) {\n    return referencedType.isSubtype(that);\n  }",
    "begin_line": 228,
    "end_line": 230,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.getOwnerFunction#233",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.getOwnerFunction()",
    "snippet": "@Override\n  public FunctionType getOwnerFunction() {\n    return referencedObjType \u003d\u003d null\n        ? null : referencedObjType.getOwnerFunction();\n  }",
    "begin_line": 233,
    "end_line": 236,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.getCtorImplementedInterfaces#239",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.getCtorImplementedInterfaces()",
    "snippet": "@Override\n  public Iterable\u003cObjectType\u003e getCtorImplementedInterfaces() {\n    return referencedObjType \u003d\u003d null ? Collections.\u003cObjectType\u003eemptyList() :\n        referencedObjType.getCtorImplementedInterfaces();\n  }",
    "begin_line": 239,
    "end_line": 242,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.hashCode#245",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.hashCode()",
    "snippet": "@Override\n  public int hashCode() {\n    return referencedType.hashCode();\n  }",
    "begin_line": 245,
    "end_line": 247,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.toStringHelper#250",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.toStringHelper(boolean)",
    "snippet": "@Override\n  String toStringHelper(boolean forAnnotations) {\n    return referencedType.toStringHelper(forAnnotations);\n  }",
    "begin_line": 250,
    "end_line": 252,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.getImplicitPrototype#255",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.getImplicitPrototype()",
    "snippet": "@Override\n  public ObjectType getImplicitPrototype() {\n    return referencedObjType \u003d\u003d null ? null :\n        referencedObjType.getImplicitPrototype();\n  }",
    "begin_line": 255,
    "end_line": 258,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.defineProperty#261",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  boolean defineProperty(String propertyName, JSType type,\n      boolean inferred, Node propertyNode) {\n    return referencedObjType \u003d\u003d null ? true :\n        referencedObjType.defineProperty(\n            propertyName, type, inferred, propertyNode);\n  }",
    "begin_line": 261,
    "end_line": 266,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.removeProperty#269",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.removeProperty(java.lang.String)",
    "snippet": "@Override\n  public boolean removeProperty(String name) {\n    return referencedObjType \u003d\u003d null ? false :\n        referencedObjType.removeProperty(name);\n  }",
    "begin_line": 269,
    "end_line": 272,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.findPropertyType#275",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.findPropertyType(java.lang.String)",
    "snippet": "@Override\n  public JSType findPropertyType(String propertyName) {\n    return referencedType.findPropertyType(propertyName);\n  }",
    "begin_line": 275,
    "end_line": 277,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.getJSDocInfo#280",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.getJSDocInfo()",
    "snippet": "@Override\n  public JSDocInfo getJSDocInfo() {\n    return referencedType.getJSDocInfo();\n  }",
    "begin_line": 280,
    "end_line": 282,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.setJSDocInfo#285",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.setJSDocInfo(com.google.javascript.rhino.JSDocInfo)",
    "snippet": "@Override\n  public void setJSDocInfo(JSDocInfo info) {\n    if (referencedObjType !\u003d null) {\n      referencedObjType.setJSDocInfo(info);\n    }\n  }",
    "begin_line": 285,
    "end_line": 289,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.setPropertyJSDocInfo#292",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.setPropertyJSDocInfo(java.lang.String, com.google.javascript.rhino.JSDocInfo)",
    "snippet": "@Override\n  public void setPropertyJSDocInfo(String propertyName, JSDocInfo info) {\n    if (referencedObjType !\u003d null) {\n      referencedObjType.setPropertyJSDocInfo(propertyName, info);\n    }\n  }",
    "begin_line": 292,
    "end_line": 296,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.getConstructor#299",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.getConstructor()",
    "snippet": "@Override\n  public FunctionType getConstructor() {\n    return referencedObjType \u003d\u003d null ? null :\n        referencedObjType.getConstructor();\n  }",
    "begin_line": 299,
    "end_line": 302,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.getParameterType#305",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.getParameterType()",
    "snippet": "@Override\n  public JSType getParameterType() {\n    return referencedObjType \u003d\u003d null ? null :\n        referencedObjType.getParameterType();\n  }",
    "begin_line": 305,
    "end_line": 308,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.getIndexType#311",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.getIndexType()",
    "snippet": "@Override\n  public JSType getIndexType() {\n    return referencedObjType \u003d\u003d null ? null :\n        referencedObjType.getIndexType();\n  }",
    "begin_line": 311,
    "end_line": 314,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.visit#317",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.visit(com.google.javascript.rhino.jstype.Visitor\u003cT\u003e)",
    "snippet": "@Override\n  public \u003cT\u003e T visit(Visitor\u003cT\u003e visitor) {\n    return referencedType.visit(visitor);\n  }",
    "begin_line": 317,
    "end_line": 319,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.visit#321",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.visit(com.google.javascript.rhino.jstype.RelationshipVisitor\u003cT\u003e, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override \u003cT\u003e T visit(RelationshipVisitor\u003cT\u003e visitor, JSType that) {\n    return referencedType.visit(visitor, that);\n  }",
    "begin_line": 321,
    "end_line": 323,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.resolveInternal#326",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.resolveInternal(com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "@Override\n  JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    setReferencedType(referencedType.resolve(t, scope));\n    return this;\n  }",
    "begin_line": 326,
    "end_line": 329,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.toDebugHashCodeString#332",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.toDebugHashCodeString()",
    "snippet": "@Override\n  public String toDebugHashCodeString() {\n    return \"{proxy:\" + referencedType.toDebugHashCodeString() + \"}\";\n  }",
    "begin_line": 332,
    "end_line": 334,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.getTypeOfThis#337",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.getTypeOfThis()",
    "snippet": "@Override\n  public JSType getTypeOfThis() {\n    if (referencedObjType !\u003d null) {\n      return referencedObjType.getTypeOfThis();\n    }\n    return super.getTypeOfThis();\n  }",
    "begin_line": 337,
    "end_line": 342,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.collapseUnion#345",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.collapseUnion()",
    "snippet": "@Override\n  public JSType collapseUnion() {\n    if (referencedType.isUnionType()) {\n      return referencedType.collapseUnion();\n    }\n    return this;\n  }",
    "begin_line": 345,
    "end_line": 350,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.matchConstraint#353",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.matchConstraint(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public void matchConstraint(JSType constraint) {\n    referencedType.matchConstraint(constraint);\n  }",
    "begin_line": 353,
    "end_line": 355,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.toMaybeParameterizedType#358",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.toMaybeParameterizedType()",
    "snippet": "@Override\n  public ParameterizedType toMaybeParameterizedType() {\n    return referencedType.toMaybeParameterizedType();\n  }",
    "begin_line": 358,
    "end_line": 360,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.toMaybeTemplateType#363",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.toMaybeTemplateType()",
    "snippet": "@Override\n  public TemplateType toMaybeTemplateType() {\n    return referencedType.toMaybeTemplateType();\n  }",
    "begin_line": 363,
    "end_line": 365,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProxyObjectType.hasAnyTemplateTypesInternal#368",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ProxyObjectType.java",
    "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
    "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.hasAnyTemplateTypesInternal()",
    "snippet": "@Override\n  public boolean hasAnyTemplateTypesInternal() {\n    return referencedType.hasAnyTemplateTypes();\n  }",
    "begin_line": 368,
    "end_line": 370,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringType.StringType#52",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/StringType.java",
    "class_name": "com.google.javascript.rhino.jstype.StringType",
    "signature": "com.google.javascript.rhino.jstype.StringType.StringType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": " StringType(JSTypeRegistry registry) {\n    super(registry);\n  }",
    "begin_line": 52,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringType.testForEquality#57",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/StringType.java",
    "class_name": "com.google.javascript.rhino.jstype.StringType",
    "signature": "com.google.javascript.rhino.jstype.StringType.testForEquality(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public TernaryValue testForEquality(JSType that) {\n    TernaryValue result \u003d super.testForEquality(that);\n    if (result !\u003d null) {\n      return result;\n    }\n    if (that.isUnknownType() || that.isSubtype(\n            getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN))) {\n      return UNKNOWN;\n    }\n    return FALSE;\n  }",
    "begin_line": 57,
    "end_line": 67,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringType.isStringValueType#70",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/StringType.java",
    "class_name": "com.google.javascript.rhino.jstype.StringType",
    "signature": "com.google.javascript.rhino.jstype.StringType.isStringValueType()",
    "snippet": "@Override\n  public boolean isStringValueType() {\n    return true;\n  }",
    "begin_line": 70,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringType.matchesNumberContext#75",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/StringType.java",
    "class_name": "com.google.javascript.rhino.jstype.StringType",
    "signature": "com.google.javascript.rhino.jstype.StringType.matchesNumberContext()",
    "snippet": "@Override\n  public boolean matchesNumberContext() {\n    return true;\n  }",
    "begin_line": 75,
    "end_line": 77,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringType.matchesStringContext#80",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/StringType.java",
    "class_name": "com.google.javascript.rhino.jstype.StringType",
    "signature": "com.google.javascript.rhino.jstype.StringType.matchesStringContext()",
    "snippet": "@Override\n  public boolean matchesStringContext() {\n    return true;\n  }",
    "begin_line": 80,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringType.matchesObjectContext#85",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/StringType.java",
    "class_name": "com.google.javascript.rhino.jstype.StringType",
    "signature": "com.google.javascript.rhino.jstype.StringType.matchesObjectContext()",
    "snippet": "@Override\n  public boolean matchesObjectContext() {\n    // TODO(user): Revisit this for ES4, which is stricter.\n    return true;\n  }",
    "begin_line": 85,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringType.toStringHelper#91",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/StringType.java",
    "class_name": "com.google.javascript.rhino.jstype.StringType",
    "signature": "com.google.javascript.rhino.jstype.StringType.toStringHelper(boolean)",
    "snippet": "@Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }",
    "begin_line": 91,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringType.getDisplayName#96",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/StringType.java",
    "class_name": "com.google.javascript.rhino.jstype.StringType",
    "signature": "com.google.javascript.rhino.jstype.StringType.getDisplayName()",
    "snippet": "@Override\n  public String getDisplayName() {\n    return \"string\";\n  }",
    "begin_line": 96,
    "end_line": 98,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringType.autoboxesTo#101",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/StringType.java",
    "class_name": "com.google.javascript.rhino.jstype.StringType",
    "signature": "com.google.javascript.rhino.jstype.StringType.autoboxesTo()",
    "snippet": "@Override\n  public JSType autoboxesTo() {\n    return getNativeType(JSTypeNative.STRING_OBJECT_TYPE);\n  }",
    "begin_line": 101,
    "end_line": 103,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringType.getPossibleToBooleanOutcomes#106",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/StringType.java",
    "class_name": "com.google.javascript.rhino.jstype.StringType",
    "signature": "com.google.javascript.rhino.jstype.StringType.getPossibleToBooleanOutcomes()",
    "snippet": "@Override\n  public BooleanLiteralSet getPossibleToBooleanOutcomes() {\n    return BooleanLiteralSet.BOTH;\n  }",
    "begin_line": 106,
    "end_line": 108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringType.visit#111",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/StringType.java",
    "class_name": "com.google.javascript.rhino.jstype.StringType",
    "signature": "com.google.javascript.rhino.jstype.StringType.visit(com.google.javascript.rhino.jstype.Visitor\u003cT\u003e)",
    "snippet": "@Override\n  public \u003cT\u003e T visit(Visitor\u003cT\u003e visitor) {\n    return visitor.caseStringType();\n  }",
    "begin_line": 111,
    "end_line": 113,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.UnionType#81",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.UnionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.util.Collection\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": " UnionType(JSTypeRegistry registry, Collection\u003cJSType\u003e alternates) {\n    super(registry);\n    this.alternates \u003d alternates;\n    this.hashcode \u003d this.alternates.hashCode();\n  }",
    "begin_line": 81,
    "end_line": 85,
    "comment": "/** \n * Creates a union type.\n * @param alternates the alternates of the union\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.getAlternates#92",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.getAlternates()",
    "snippet": "public Iterable\u003cJSType\u003e getAlternates() {\n    return alternates;\n  }",
    "begin_line": 92,
    "end_line": 94,
    "comment": "/** \n * Gets the alternate types of this union type.\n * @return The alternate types of this union type. The returned set isimmutable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.matchesNumberContext#103",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.matchesNumberContext()",
    "snippet": "@Override\n  public boolean matchesNumberContext() {\n    // TODO(user): Reverse this logic to make it correct instead of generous.\n    for (JSType t : alternates) {\n      if (t.matchesNumberContext()) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "begin_line": 103,
    "end_line": 111,
    "comment": "/** \n * This predicate is used to test whether a given type can appear in a numeric context, such as an operand of a multiply operator.\n * @return true if the type can appear in a numeric context.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.matchesStringContext#125",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.matchesStringContext()",
    "snippet": "@Override\n  public boolean matchesStringContext() {\n    // TODO(user): Reverse this logic to make it correct instead of generous.\n    for (JSType t : alternates) {\n      if (t.matchesStringContext()) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "begin_line": 125,
    "end_line": 133,
    "comment": "/** \n * This predicate is used to test whether a given type can appear in a {@code String} context, such as an operand of a string concat ({@code +}) operator.\u003cp\u003e All types have at least the potential for converting to  {@code String}. When we add externally defined types, such as a browser OM, we may choose to add types that do not automatically convert to  {@code String}.\n * @return {@code true} if not {@link VoidType}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.matchesObjectContext#152",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.matchesObjectContext()",
    "snippet": "@Override\n  public boolean matchesObjectContext() {\n    // TODO(user): Reverse this logic to make it correct instead of generous.\n    for (JSType t : alternates) {\n      if (t.matchesObjectContext()) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "begin_line": 152,
    "end_line": 160,
    "comment": "/** \n * This predicate is used to test whether a given type can appear in an {@code Object} context, such as the expression in a {@code with}statement.\u003cp\u003e Most types we will encounter, except notably  {@code null}, have at least the potential for converting to  {@code Object}.  Host defined objects can get peculiar.\u003cp\u003e VOID type is included here because while it is not part of the JavaScript language, functions returning \u0027void\u0027 type can\u0027t be used as operands of any operator or statement.\u003cp\u003e\n * @return {@code true} if the type is not {@link NullType} or{@link VoidType}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.findPropertyType#163",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.findPropertyType(java.lang.String)",
    "snippet": "@Override\n  public JSType findPropertyType(String propertyName) {\n    JSType propertyType \u003d null;\n\n    for (JSType alternate : getAlternates()) {\n      // Filter out the null/undefined type.\n      if (alternate.isNullType() || alternate.isVoidType()) {\n        continue;\n      }\n\n      JSType altPropertyType \u003d alternate.findPropertyType(propertyName);\n      if (altPropertyType \u003d\u003d null) {\n        continue;\n      }\n\n      if (propertyType \u003d\u003d null) {\n        propertyType \u003d altPropertyType;\n      } else {\n        propertyType \u003d propertyType.getLeastSupertype(altPropertyType);\n      }\n    }\n\n    return propertyType;\n  }",
    "begin_line": 163,
    "end_line": 185,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.canBeCalled#188",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.canBeCalled()",
    "snippet": "@Override\n  public boolean canBeCalled() {\n    for (JSType t : alternates) {\n      if (!t.canBeCalled()) {\n        return false;\n      }\n    }\n    return true;\n  }",
    "begin_line": 188,
    "end_line": 195,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.autobox#198",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.autobox()",
    "snippet": "@Override\n  public JSType autobox() {\n    UnionTypeBuilder restricted \u003d new UnionTypeBuilder(registry);\n    for (JSType t : alternates) {\n      restricted.addAlternate(t.autobox());\n    }\n    return restricted.build();\n  }",
    "begin_line": 198,
    "end_line": 204,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.restrictByNotNullOrUndefined#207",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.restrictByNotNullOrUndefined()",
    "snippet": "@Override\n  public JSType restrictByNotNullOrUndefined() {\n    UnionTypeBuilder restricted \u003d new UnionTypeBuilder(registry);\n    for (JSType t : alternates) {\n      restricted.addAlternate(t.restrictByNotNullOrUndefined());\n    }\n    return restricted.build();\n  }",
    "begin_line": 207,
    "end_line": 213,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.testForEquality#216",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.testForEquality(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public TernaryValue testForEquality(JSType that) {\n    TernaryValue result \u003d null;\n    for (JSType t : alternates) {\n      TernaryValue test \u003d t.testForEquality(that);\n      if (result \u003d\u003d null) {\n        result \u003d test;\n      } else if (!result.equals(test)) {\n        return UNKNOWN;\n      }\n    }\n    return result;\n  }",
    "begin_line": 216,
    "end_line": 227,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.isNullable#238",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.isNullable()",
    "snippet": "@Override\n  public boolean isNullable() {\n    for (JSType t : alternates) {\n      if (t.isNullable()) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "begin_line": 238,
    "end_line": 245,
    "comment": "/** \n * This predicate determines whether objects of this type can have the {@code null} value, and therefore can appear in contexts where{@code null} is expected.\n * @return {@code true} for everything but {@code Number} and{@code Boolean} types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.isUnknownType#248",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.isUnknownType()",
    "snippet": "@Override\n  public boolean isUnknownType() {\n    for (JSType t : alternates) {\n      if (t.isUnknownType()) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "begin_line": 248,
    "end_line": 255,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.isStruct#258",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.isStruct()",
    "snippet": "@Override\n  public boolean isStruct() {\n    for (JSType typ : getAlternates()) {\n      if (typ.isStruct()) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "begin_line": 258,
    "end_line": 265,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.isDict#268",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.isDict()",
    "snippet": "@Override\n  public boolean isDict() {\n    for (JSType typ : getAlternates()) {\n      if (typ.isDict()) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "begin_line": 268,
    "end_line": 275,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.getLeastSupertype#278",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.getLeastSupertype(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isUnknownType() \u0026\u0026 !that.isUnionType()) {\n      for (JSType alternate : alternates) {\n        if (!alternate.isUnknownType() \u0026\u0026 that.isSubtype(alternate)) {\n          return this;\n        }\n      }\n    }\n\n    return getLeastSupertype(this, that);\n  }",
    "begin_line": 278,
    "end_line": 288,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.meet#290",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.meet(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "JSType meet(JSType that) {\n    UnionTypeBuilder builder \u003d new UnionTypeBuilder(registry);\n    for (JSType alternate : alternates) {\n      if (alternate.isSubtype(that)) {\n        builder.addAlternate(alternate);\n      }\n    }\n\n    if (that.isUnionType()) {\n      for (JSType otherAlternate : that.toMaybeUnionType().alternates) {\n        if (otherAlternate.isSubtype(this)) {\n          builder.addAlternate(otherAlternate);\n        }\n      }\n    } else if (that.isSubtype(this)) {\n      builder.addAlternate(that);\n    }\n    JSType result \u003d builder.build();\n    if (!result.isNoType()) {\n      return result;\n    } else if (this.isObject() \u0026\u0026 (that.isObject() \u0026\u0026 !that.isNoType())) {\n      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    } else {\n      return getNativeType(JSTypeNative.NO_TYPE);\n    }\n  }",
    "begin_line": 290,
    "end_line": 315,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.checkUnionEquivalenceHelper#321",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.checkUnionEquivalenceHelper(com.google.javascript.rhino.jstype.UnionType, com.google.javascript.rhino.jstype.EquivalenceMethod)",
    "snippet": "boolean checkUnionEquivalenceHelper(\n      UnionType that, EquivalenceMethod eqMethod) {\n    if (eqMethod \u003d\u003d EquivalenceMethod.IDENTITY\n        \u0026\u0026 alternates.size() !\u003d that.alternates.size()) {\n      return false;\n    }\n    for (JSType alternate : that.alternates) {\n      if (!hasAlternate(alternate, eqMethod)) {\n        return false;\n      }\n    }\n    return true;\n  }",
    "begin_line": 321,
    "end_line": 333,
    "comment": "/** \n * Two union types are equal if they have the same number of alternates and all alternates are equal.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.hasAlternate#335",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.hasAlternate(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.EquivalenceMethod)",
    "snippet": "private boolean hasAlternate(JSType type, EquivalenceMethod eqMethod) {\n    for (JSType alternate : alternates) {\n      if (alternate.checkEquivalenceHelper(type, eqMethod)) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "begin_line": 335,
    "end_line": 342,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.hasProperty#345",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.hasProperty(java.lang.String)",
    "snippet": "@Override\n  public boolean hasProperty(String pname) {\n    for (JSType alternate : alternates) {\n      if (alternate.hasProperty(pname)) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "begin_line": 345,
    "end_line": 352,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.hashCode#355",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.hashCode()",
    "snippet": "@Override\n  public int hashCode() {\n    return this.hashcode;\n  }",
    "begin_line": 355,
    "end_line": 357,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.toMaybeUnionType#360",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.toMaybeUnionType()",
    "snippet": "@Override\n  public UnionType toMaybeUnionType() {\n    return this;\n  }",
    "begin_line": 360,
    "end_line": 362,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.isObject#365",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.isObject()",
    "snippet": "@Override\n  public boolean isObject() {\n    for (JSType alternate : alternates) {\n      if (!alternate.isObject()) {\n        return false;\n      }\n    }\n    return true;\n  }",
    "begin_line": 365,
    "end_line": 372,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.contains#382",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.contains(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public boolean contains(JSType type) {\n    for (JSType alt : alternates) {\n      if (alt.isEquivalentTo(type)) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "begin_line": 382,
    "end_line": 389,
    "comment": "/** \n * A  {@link UnionType} contains a given type (alternate) iff the membervector contains it.\n * @param type The alternate which might be in this union.\n * @return {@code true} if the alternate is in the union\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.getRestrictedUnion#405",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.getRestrictedUnion(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "public JSType getRestrictedUnion(JSType type) {\n    UnionTypeBuilder restricted \u003d new UnionTypeBuilder(registry);\n    for (JSType t : alternates) {\n      // Keep all unknown/unresolved types.\n      if (t.isUnknownType() || t.isNoResolvedType() || !t.isSubtype(type)) {\n        restricted.addAlternate(t);\n      }\n    }\n    return restricted.build();\n  }",
    "begin_line": 405,
    "end_line": 414,
    "comment": "/** \n * Returns a more restricted union type than  {@code this} one, in which allsubtypes of  {@code type} have been removed.\u003cp\u003eExamples: \u003cul\u003e \u003cli\u003e {@code (number,string)} restricted by {@code number} is{@code string}\u003c/li\u003e \u003cli\u003e {@code (null, EvalError, URIError)} restricted by{@code Error} is {@code null}\u003c/li\u003e \u003c/ul\u003e\n * @param type the supertype of the types to remove from this union type\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.toStringHelper#416",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.toStringHelper(boolean)",
    "snippet": "@Override String toStringHelper(boolean forAnnotations) {\n    StringBuilder result \u003d new StringBuilder();\n    boolean firstAlternate \u003d true;\n\n    result.append(\"(\");\n    SortedSet\u003cJSType\u003e sorted \u003d new TreeSet\u003cJSType\u003e(ALPHA);\n    sorted.addAll(alternates);\n    for (JSType t : sorted) {\n      if (!firstAlternate) {\n        result.append(\"|\");\n      }\n      result.append(t.toStringHelper(forAnnotations));\n      firstAlternate \u003d false;\n    }\n    result.append(\")\");\n    return result.toString();\n  }",
    "begin_line": 416,
    "end_line": 432,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.isSubtype#435",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public boolean isSubtype(JSType that) {\n    // unknown\n    if (that.isUnknownType()) {\n      return true;\n    }\n    // all type\n    if (that.isAllType()) {\n      return true;\n    }\n    for (JSType element : alternates) {\n      if (!element.isSubtype(that)) {\n        return false;\n      }\n    }\n    return true;\n  }",
    "begin_line": 435,
    "end_line": 450,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.getRestrictedTypeGivenToBooleanOutcome#453",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.getRestrictedTypeGivenToBooleanOutcome(boolean)",
    "snippet": "@Override\n  public JSType getRestrictedTypeGivenToBooleanOutcome(boolean outcome) {\n    // gather elements after restriction\n    UnionTypeBuilder restricted \u003d new UnionTypeBuilder(registry);\n    for (JSType element : alternates) {\n      restricted.addAlternate(\n          element.getRestrictedTypeGivenToBooleanOutcome(outcome));\n    }\n    return restricted.build();\n  }",
    "begin_line": 453,
    "end_line": 461,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.getPossibleToBooleanOutcomes#464",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.getPossibleToBooleanOutcomes()",
    "snippet": "@Override\n  public BooleanLiteralSet getPossibleToBooleanOutcomes() {\n    BooleanLiteralSet literals \u003d BooleanLiteralSet.EMPTY;\n    for (JSType element : alternates) {\n      literals \u003d literals.union(element.getPossibleToBooleanOutcomes());\n      if (literals \u003d\u003d BooleanLiteralSet.BOTH) {\n        break;\n      }\n    }\n    return literals;\n  }",
    "begin_line": 464,
    "end_line": 473,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.getTypesUnderEquality#476",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.getTypesUnderEquality(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public TypePair getTypesUnderEquality(JSType that) {\n    UnionTypeBuilder thisRestricted \u003d new UnionTypeBuilder(registry);\n    UnionTypeBuilder thatRestricted \u003d new UnionTypeBuilder(registry);\n    for (JSType element : alternates) {\n      TypePair p \u003d element.getTypesUnderEquality(that);\n      if (p.typeA !\u003d null) {\n        thisRestricted.addAlternate(p.typeA);\n      }\n      if (p.typeB !\u003d null) {\n        thatRestricted.addAlternate(p.typeB);\n      }\n    }\n    return new TypePair(\n        thisRestricted.build(),\n        thatRestricted.build());\n  }",
    "begin_line": 476,
    "end_line": 491,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.getTypesUnderInequality#494",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.getTypesUnderInequality(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public TypePair getTypesUnderInequality(JSType that) {\n    UnionTypeBuilder thisRestricted \u003d new UnionTypeBuilder(registry);\n    UnionTypeBuilder thatRestricted \u003d new UnionTypeBuilder(registry);\n    for (JSType element : alternates) {\n      TypePair p \u003d element.getTypesUnderInequality(that);\n      if (p.typeA !\u003d null) {\n        thisRestricted.addAlternate(p.typeA);\n      }\n      if (p.typeB !\u003d null) {\n        thatRestricted.addAlternate(p.typeB);\n      }\n    }\n    return new TypePair(\n        thisRestricted.build(),\n        thatRestricted.build());\n  }",
    "begin_line": 494,
    "end_line": 509,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.getTypesUnderShallowInequality#512",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.getTypesUnderShallowInequality(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public TypePair getTypesUnderShallowInequality(JSType that) {\n    UnionTypeBuilder thisRestricted \u003d new UnionTypeBuilder(registry);\n    UnionTypeBuilder thatRestricted \u003d new UnionTypeBuilder(registry);\n    for (JSType element : alternates) {\n      TypePair p \u003d element.getTypesUnderShallowInequality(that);\n      if (p.typeA !\u003d null) {\n        thisRestricted.addAlternate(p.typeA);\n      }\n      if (p.typeB !\u003d null) {\n        thatRestricted.addAlternate(p.typeB);\n      }\n    }\n    return new TypePair(\n        thisRestricted.build(),\n        thatRestricted.build());\n  }",
    "begin_line": 512,
    "end_line": 527,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.visit#530",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.visit(com.google.javascript.rhino.jstype.Visitor\u003cT\u003e)",
    "snippet": "@Override\n  public \u003cT\u003e T visit(Visitor\u003cT\u003e visitor) {\n    return visitor.caseUnionType(this);\n  }",
    "begin_line": 530,
    "end_line": 532,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.visit#534",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.visit(com.google.javascript.rhino.jstype.RelationshipVisitor\u003cT\u003e, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override \u003cT\u003e T visit(RelationshipVisitor\u003cT\u003e visitor, JSType that) {\n    return visitor.caseUnionType(this, that);\n  }",
    "begin_line": 534,
    "end_line": 536,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.resolveInternal#539",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.resolveInternal(com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "@Override\n  JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    setResolvedTypeInternal(this); // for circularly defined types.\n\n    boolean changed \u003d false;\n    ImmutableList.Builder\u003cJSType\u003e resolvedTypes \u003d ImmutableList.builder();\n    for (JSType alternate : alternates) {\n      JSType newAlternate \u003d alternate.resolve(t, scope);\n      changed |\u003d (alternate !\u003d newAlternate);\n      resolvedTypes.add(alternate);\n    }\n    if (changed) {\n      Collection\u003cJSType\u003e newAlternates \u003d resolvedTypes.build();\n      Preconditions.checkState(\n          newAlternates.hashCode() \u003d\u003d this.hashcode);\n      alternates \u003d newAlternates;\n    }\n    return this;\n  }",
    "begin_line": 539,
    "end_line": 556,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.toDebugHashCodeString#559",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.toDebugHashCodeString()",
    "snippet": "@Override\n  public String toDebugHashCodeString() {\n    List\u003cString\u003e hashCodes \u003d Lists.newArrayList();\n    for (JSType a : alternates) {\n      hashCodes.add(a.toDebugHashCodeString());\n    }\n    return \"{(\" + Joiner.on(\",\").join(hashCodes) + \")}\";\n  }",
    "begin_line": 559,
    "end_line": 565,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.setValidator#568",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.setValidator(Predicate\u003cJSType\u003e)",
    "snippet": "@Override\n  public boolean setValidator(Predicate\u003cJSType\u003e validator) {\n    for (JSType a : alternates) {\n      a.setValidator(validator);\n    }\n    return true;\n  }",
    "begin_line": 568,
    "end_line": 573,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.collapseUnion#576",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.collapseUnion()",
    "snippet": "@Override\n  public JSType collapseUnion() {\n    JSType currentValue \u003d null;\n    ObjectType currentCommonSuper \u003d null;\n    for (JSType a : alternates) {\n      if (a.isUnknownType()) {\n        return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n      }\n\n      ObjectType obj \u003d a.toObjectType();\n      if (obj \u003d\u003d null) {\n        if (currentValue \u003d\u003d null \u0026\u0026 currentCommonSuper \u003d\u003d null) {\n          // If obj is not an object, then it must be a value.\n          currentValue \u003d a;\n        } else {\n          // Multiple values and objects will always collapse to the ALL_TYPE.\n          return getNativeType(JSTypeNative.ALL_TYPE);\n        }\n      } else if (currentValue !\u003d null) {\n        // Values and objects will always collapse to the ALL_TYPE.\n        return getNativeType(JSTypeNative.ALL_TYPE);\n      } else if (currentCommonSuper \u003d\u003d null) {\n        currentCommonSuper \u003d obj;\n      } else {\n        currentCommonSuper \u003d\n            registry.findCommonSuperObject(currentCommonSuper, obj);\n      }\n    }\n    return currentCommonSuper;\n  }",
    "begin_line": 576,
    "end_line": 604,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.matchConstraint#607",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.matchConstraint(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public void matchConstraint(JSType constraint) {\n    for (JSType alternate : alternates) {\n      alternate.matchConstraint(constraint);\n    }\n  }",
    "begin_line": 607,
    "end_line": 611,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionType.hasAnyTemplateTypesInternal#614",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionType",
    "signature": "com.google.javascript.rhino.jstype.UnionType.hasAnyTemplateTypesInternal()",
    "snippet": "@Override\n  public boolean hasAnyTemplateTypesInternal() {\n    for (JSType alternate : alternates) {\n      if (alternate.hasAnyTemplateTypes()) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "begin_line": 614,
    "end_line": 621,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionTypeBuilder.UnionTypeBuilder#99",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
    "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": " UnionTypeBuilder(JSTypeRegistry registry) {\n    this(registry, DEFAULT_MAX_UNION_SIZE);\n  }",
    "begin_line": 99,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionTypeBuilder.UnionTypeBuilder#103",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
    "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry, int)",
    "snippet": " UnionTypeBuilder(JSTypeRegistry registry, int maxUnionSize) {\n    this.registry \u003d registry;\n    this.maxUnionSize \u003d maxUnionSize;\n  }",
    "begin_line": 103,
    "end_line": 106,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionTypeBuilder.getAlternates#108",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
    "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.getAlternates()",
    "snippet": "Iterable\u003cJSType\u003e getAlternates() {\n    JSType specialCaseType \u003d reduceAlternatesWithoutUnion();\n    if (specialCaseType !\u003d null) {\n      return ImmutableList.of(specialCaseType);\n    }\n    return Collections.unmodifiableList(alternates);\n  }",
    "begin_line": 108,
    "end_line": 114,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionTypeBuilder.addAlternate#120",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
    "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.addAlternate(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "UnionTypeBuilder addAlternate(JSType alternate) {\n    // build() returns the bottom type by default, so we can\n    // just bail out early here.\n    if (alternate.isNoType()) {\n      return this;\n    }\n\n    isAllType \u003d isAllType || alternate.isAllType();\n\n    boolean isAlternateUnknown \u003d alternate instanceof UnknownType;\n    isNativeUnknownType \u003d isNativeUnknownType || isAlternateUnknown;\n    if (isAlternateUnknown) {\n      areAllUnknownsChecked \u003d areAllUnknownsChecked \u0026\u0026\n          alternate.isCheckedUnknownType();\n    }\n    if (!isAllType \u0026\u0026 !isNativeUnknownType) {\n      if (alternate.isUnionType()) {\n        UnionType union \u003d alternate.toMaybeUnionType();\n        for (JSType unionAlt : union.getAlternates()) {\n          addAlternate(unionAlt);\n        }\n      } else {\n        if (alternates.size() \u003e maxUnionSize) {\n          return this;\n        }\n\n        // Function types are special, because they have their\n        // own bizarre sub-lattice. See the comments on\n        // FunctionType#supAndInf helper and above at functionTypePosition.\n        if (alternate.isFunctionType() \u0026\u0026 functionTypePosition !\u003d -1) {\n          // See the comments on functionTypePosition above.\n          FunctionType other \u003d\n              alternates.get(functionTypePosition).toMaybeFunctionType();\n          FunctionType supremum \u003d\n              alternate.toMaybeFunctionType().supAndInfHelper(other, true);\n          alternates.set(functionTypePosition, supremum);\n          result \u003d null;\n          return this;\n        }\n\n        // Look through the alternates we\u0027ve got so far,\n        // and check if any of them are duplicates of\n        // one another.\n        int currentIndex \u003d 0;\n        Iterator\u003cJSType\u003e it \u003d alternates.iterator();\n        while (it.hasNext()) {\n          boolean removeCurrent \u003d false;\n          JSType current \u003d it.next();\n\n          // Unknown and NoResolved types may just be names that haven\u0027t\n          // been resolved yet. So keep these in the union, and just use\n          // equality checking for simple de-duping.\n          if (alternate.isUnknownType() ||\n              current.isUnknownType() ||\n              alternate.isNoResolvedType() ||\n              current.isNoResolvedType() ||\n              alternate.hasAnyTemplateTypes() ||\n              current.hasAnyTemplateTypes()) {\n            if (alternate.isEquivalentTo(current)) {\n              // Alternate is unnecessary.\n              return this;\n            }\n          } else {\n\n            // Because \"Foo\" and \"Foo.\u003c?\u003e\" are roughly equivalent\n            // parameterized types, special care is needed when building the\n            // union. For example:\n            //   Object is consider a subtype of Object.\u003cstring\u003e\n            // but we want to leave \"Object\" not \"Object.\u003cstring\u003e\" when\n            // building the subtype.\n            //\n\n            if (alternate.isParameterizedType() || current.isParameterizedType()) {\n              // Cases:\n              // 1) alternate:Array.\u003cstring\u003e and current:Object \u003d\u003d\u003e Object\n              // 2) alternate:Array.\u003cstring\u003e and current:Array \u003d\u003d\u003e Array\n              // 3) alternate:Object.\u003cstring\u003e and\n              //    current:Array \u003d\u003d\u003e Array|Object.\u003cstring\u003e\n              // 4) alternate:Object and current:Array.\u003cstring\u003e \u003d\u003d\u003e Object\n              // 5) alternate:Array and current:Array.\u003cstring\u003e \u003d\u003d\u003e Array\n              // 6) alternate:Array and\n              //    current:Object.\u003cstring\u003e \u003d\u003d\u003e Array|Object.\u003cstring\u003e\n              // 7) alternate:Array.\u003cstring\u003e and\n              //    current:Array.\u003cnumber\u003e \u003d\u003d\u003e Array.\u003c?\u003e\n              // 8) alternate:Array.\u003cstring\u003e and\n              //    current:Array.\u003cstring\u003e \u003d\u003d\u003e Array.\u003cstring\u003e\n              // 9) alternate:Array.\u003cstring\u003e and\n              //    current:Object.\u003cstring\u003e \u003d\u003d\u003e Object.\u003cstring\u003e|Array.\u003cstring\u003e\n\n              if (!current.isParameterizedType()) {\n                if (alternate.isSubtype(current)) {\n                  // case 1, 2\n                  return this;\n                }\n                // case 3: leave current, add alternate\n              } else if (!alternate.isParameterizedType()) {\n                if (current.isSubtype(alternate)) {\n                  // case 4, 5\n                  removeCurrent \u003d true;\n                }\n                // case 6: leave current, add alternate\n              } else {\n                Preconditions.checkState(current.isParameterizedType()\n                    \u0026\u0026 alternate.isParameterizedType());\n                ParameterizedType parameterizedAlternate \u003d alternate.toMaybeParameterizedType();\n                ParameterizedType parameterizedCurrent \u003d current.toMaybeParameterizedType();\n\n                if (parameterizedCurrent.wrapsSameRawType(parameterizedAlternate)) {\n                  JSType alternateTypeParameter \u003d parameterizedAlternate.getParameterType();\n                  JSType currentTypeParameter \u003d parameterizedCurrent.getParameterType();\n                  if (currentTypeParameter.isEquivalentTo(parameterizedCurrent)) {\n                    // case 8\n                    return this;\n                  } else {\n                    // TODO(johnlenz): should we leave both types?\n                    // case 7: add a merged alternate\n                    // We currently merge to the parameterized types to \"unknown\"\n                    // which is equivalent to the raw type.\n                    JSType merged \u003d parameterizedCurrent\n                        .getReferencedObjTypeInternal();\n                    return addAlternate(merged);\n                  }\n                }\n                // case 9: leave current, add alternate\n              }\n              // Otherwise leave both parameterized types.\n            } else if (alternate.isSubtype(current)) {\n              // Alternate is unnecessary.\n              return this;\n            } else if (current.isSubtype(alternate)) {\n              // Alternate makes current obsolete\n              removeCurrent \u003d true;\n            }\n          }\n\n          if (removeCurrent) {\n            it.remove();\n\n            if (currentIndex \u003d\u003d functionTypePosition) {\n              functionTypePosition \u003d -1;\n            } else if (currentIndex \u003c functionTypePosition) {\n              functionTypePosition--;\n              currentIndex--;\n            }\n          }\n          currentIndex++;\n        }\n\n        if (alternate.isFunctionType()) {\n          // See the comments on functionTypePosition above.\n          Preconditions.checkState(functionTypePosition \u003d\u003d -1);\n          functionTypePosition \u003d alternates.size();\n        }\n\n        alternates.add(alternate);\n        result \u003d null; // invalidate the memoized result\n      }\n    } else {\n      result \u003d null;\n    }\n    return this;\n  }",
    "begin_line": 120,
    "end_line": 281,
    "comment": "/** \n * Adds an alternate to the union type under construction. Returns this for easy chaining.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionTypeBuilder.reduceAlternatesWithoutUnion#288",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
    "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.reduceAlternatesWithoutUnion()",
    "snippet": "private JSType reduceAlternatesWithoutUnion() {\n    if (isAllType) {\n      return registry.getNativeType(ALL_TYPE);\n    } else if (isNativeUnknownType) {\n      if (areAllUnknownsChecked) {\n        return registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n      } else {\n        return registry.getNativeType(UNKNOWN_TYPE);\n      }\n    } else {\n      int size \u003d alternates.size();\n      if (size \u003e maxUnionSize) {\n        return registry.getNativeType(UNKNOWN_TYPE);\n      } else if (size \u003e 1) {\n        return null;\n      } else if (size \u003d\u003d 1) {\n        return alternates.iterator().next();\n      } else {\n        return registry.getNativeType(NO_TYPE);\n      }\n    }\n  }",
    "begin_line": 288,
    "end_line": 309,
    "comment": "/** \n * Reduce the alternates into a non-union type. If the alternates can\u0027t be accurately represented with a non-union type, return null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionTypeBuilder.build#316",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
    "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.build()",
    "snippet": "JSType build() {\n    if (result \u003d\u003d null) {\n      result \u003d reduceAlternatesWithoutUnion();\n      if (result \u003d\u003d null) {\n        result \u003d new UnionType(registry, getAlternateListCopy());\n      }\n    }\n    return result;\n  }",
    "begin_line": 316,
    "end_line": 324,
    "comment": "/** \n * Creates a union.\n * @return A UnionType if it has two or more alternates, theonly alternate if it has one and otherwise  {@code NO_TYPE}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnionTypeBuilder.getAlternateListCopy#326",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
    "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
    "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.getAlternateListCopy()",
    "snippet": "private Collection\u003cJSType\u003e getAlternateListCopy() {\n    return ImmutableList.copyOf(alternates);\n  }",
    "begin_line": 326,
    "end_line": 328,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.UnknownType#56",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.UnknownType(com.google.javascript.rhino.jstype.JSTypeRegistry, boolean)",
    "snippet": " UnknownType(JSTypeRegistry registry, boolean isChecked) {\n    super(registry);\n    this.isChecked \u003d isChecked;\n  }",
    "begin_line": 56,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.isUnknownType#62",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.isUnknownType()",
    "snippet": "@Override\n  public boolean isUnknownType() {\n    return true;\n  }",
    "begin_line": 62,
    "end_line": 64,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.isCheckedUnknownType#67",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.isCheckedUnknownType()",
    "snippet": "@Override\n  public boolean isCheckedUnknownType() {\n    return isChecked;\n  }",
    "begin_line": 67,
    "end_line": 69,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.canBeCalled#72",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.canBeCalled()",
    "snippet": "@Override\n  public boolean canBeCalled() {\n    return true;\n  }",
    "begin_line": 72,
    "end_line": 74,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.matchesNumberContext#77",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.matchesNumberContext()",
    "snippet": "@Override\n  public boolean matchesNumberContext() {\n    return true;\n  }",
    "begin_line": 77,
    "end_line": 79,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.matchesObjectContext#82",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.matchesObjectContext()",
    "snippet": "@Override\n  public boolean matchesObjectContext() {\n    return true;\n  }",
    "begin_line": 82,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.matchesStringContext#87",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.matchesStringContext()",
    "snippet": "@Override\n  public boolean matchesStringContext() {\n    return true;\n  }",
    "begin_line": 87,
    "end_line": 89,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.testForEquality#92",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.testForEquality(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public TernaryValue testForEquality(JSType that) {\n    return UNKNOWN;\n  }",
    "begin_line": 92,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.isNullable#97",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.isNullable()",
    "snippet": "@Override\n  public boolean isNullable() {\n    return true;\n  }",
    "begin_line": 97,
    "end_line": 99,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.isSubtype#102",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public boolean isSubtype(JSType that) {\n    return true;\n  }",
    "begin_line": 102,
    "end_line": 104,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.visit#107",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.visit(com.google.javascript.rhino.jstype.Visitor\u003cT\u003e)",
    "snippet": "@Override\n  public \u003cT\u003e T visit(Visitor\u003cT\u003e visitor) {\n    return visitor.caseUnknownType();\n  }",
    "begin_line": 107,
    "end_line": 109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.visit#111",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.visit(com.google.javascript.rhino.jstype.RelationshipVisitor\u003cT\u003e, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override \u003cT\u003e T visit(RelationshipVisitor\u003cT\u003e visitor, JSType that) {\n    return visitor.caseUnknownType(this, that);\n  }",
    "begin_line": 111,
    "end_line": 113,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.toStringHelper#116",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.toStringHelper(boolean)",
    "snippet": "@Override\n  String toStringHelper(boolean forAnnotations) {\n    return getReferenceName();\n  }",
    "begin_line": 116,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.defineProperty#121",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
    "snippet": "@Override\n  boolean defineProperty(String propertyName, JSType type,\n      boolean inferred, Node propertyNode) {\n    // nothing to define\n    return true;\n  }",
    "begin_line": 121,
    "end_line": 125,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.getImplicitPrototype#128",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.getImplicitPrototype()",
    "snippet": "@Override\n  public ObjectType getImplicitPrototype() {\n    return null;\n  }",
    "begin_line": 128,
    "end_line": 130,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.getConstructor#133",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.getConstructor()",
    "snippet": "@Override\n  public FunctionType getConstructor() {\n    return null;\n  }",
    "begin_line": 133,
    "end_line": 135,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.getReferenceName#138",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.getReferenceName()",
    "snippet": "@Override\n  public String getReferenceName() {\n    return isChecked ? \"??\" : \"?\";\n  }",
    "begin_line": 138,
    "end_line": 140,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.getDisplayName#143",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.getDisplayName()",
    "snippet": "@Override\n  public String getDisplayName() {\n    return \"Unknown\";\n  }",
    "begin_line": 143,
    "end_line": 145,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.hasDisplayName#148",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.hasDisplayName()",
    "snippet": "@Override\n  public boolean hasDisplayName() {\n    return true;\n  }",
    "begin_line": 148,
    "end_line": 150,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.getPossibleToBooleanOutcomes#153",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.getPossibleToBooleanOutcomes()",
    "snippet": "@Override\n  public BooleanLiteralSet getPossibleToBooleanOutcomes() {\n    return BooleanLiteralSet.BOTH;\n  }",
    "begin_line": 153,
    "end_line": 155,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownType.resolveInternal#158",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/UnknownType.java",
    "class_name": "com.google.javascript.rhino.jstype.UnknownType",
    "signature": "com.google.javascript.rhino.jstype.UnknownType.resolveInternal(com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "@Override\n  JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    return this;\n  }",
    "begin_line": 158,
    "end_line": 160,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueType.ValueType#48",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ValueType.java",
    "class_name": "com.google.javascript.rhino.jstype.ValueType",
    "signature": "com.google.javascript.rhino.jstype.ValueType.ValueType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": " ValueType(JSTypeRegistry registry) {\n    super(registry);\n  }",
    "begin_line": 48,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueType.resolveInternal#53",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ValueType.java",
    "class_name": "com.google.javascript.rhino.jstype.ValueType",
    "signature": "com.google.javascript.rhino.jstype.ValueType.resolveInternal(com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticScope\u003ccom.google.javascript.rhino.jstype.JSType\u003e)",
    "snippet": "@Override\n  final JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    return this;\n  }",
    "begin_line": 53,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueType.hasDisplayName#58",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ValueType.java",
    "class_name": "com.google.javascript.rhino.jstype.ValueType",
    "signature": "com.google.javascript.rhino.jstype.ValueType.hasDisplayName()",
    "snippet": "@Override\n  public boolean hasDisplayName() {\n    return true;\n  }",
    "begin_line": 58,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueType.visit#62",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/ValueType.java",
    "class_name": "com.google.javascript.rhino.jstype.ValueType",
    "signature": "com.google.javascript.rhino.jstype.ValueType.visit(com.google.javascript.rhino.jstype.RelationshipVisitor\u003cT\u003e, com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override \u003cT\u003e T visit(RelationshipVisitor\u003cT\u003e visitor, JSType that) {\n    return visitor.caseValueType(this, that);\n  }",
    "begin_line": 62,
    "end_line": 64,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VoidType.VoidType#53",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/VoidType.java",
    "class_name": "com.google.javascript.rhino.jstype.VoidType",
    "signature": "com.google.javascript.rhino.jstype.VoidType.VoidType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
    "snippet": " VoidType(JSTypeRegistry registry) {\n    super(registry);\n  }",
    "begin_line": 53,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VoidType.restrictByNotNullOrUndefined#58",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/VoidType.java",
    "class_name": "com.google.javascript.rhino.jstype.VoidType",
    "signature": "com.google.javascript.rhino.jstype.VoidType.restrictByNotNullOrUndefined()",
    "snippet": "@Override\n  public JSType restrictByNotNullOrUndefined() {\n    return registry.getNativeType(JSTypeNative.NO_TYPE);\n  }",
    "begin_line": 58,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VoidType.testForEquality#63",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/VoidType.java",
    "class_name": "com.google.javascript.rhino.jstype.VoidType",
    "signature": "com.google.javascript.rhino.jstype.VoidType.testForEquality(com.google.javascript.rhino.jstype.JSType)",
    "snippet": "@Override\n  public TernaryValue testForEquality(JSType that) {\n    if (UNKNOWN.equals(super.testForEquality(that))) {\n      return UNKNOWN;\n    }\n    if (that.isSubtype(this) ||\n        that.isSubtype(getNativeType(JSTypeNative.NULL_TYPE))) {\n      return TRUE;\n    }\n    return FALSE;\n  }",
    "begin_line": 63,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VoidType.matchesNumberContext#75",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/VoidType.java",
    "class_name": "com.google.javascript.rhino.jstype.VoidType",
    "signature": "com.google.javascript.rhino.jstype.VoidType.matchesNumberContext()",
    "snippet": "@Override\n  public boolean matchesNumberContext() {\n    return false;\n  }",
    "begin_line": 75,
    "end_line": 77,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VoidType.matchesObjectContext#80",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/VoidType.java",
    "class_name": "com.google.javascript.rhino.jstype.VoidType",
    "signature": "com.google.javascript.rhino.jstype.VoidType.matchesObjectContext()",
    "snippet": "@Override\n  public boolean matchesObjectContext() {\n    return false;\n  }",
    "begin_line": 80,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VoidType.matchesStringContext#85",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/VoidType.java",
    "class_name": "com.google.javascript.rhino.jstype.VoidType",
    "signature": "com.google.javascript.rhino.jstype.VoidType.matchesStringContext()",
    "snippet": "@Override\n  public boolean matchesStringContext() {\n    return true;\n  }",
    "begin_line": 85,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VoidType.isVoidType#90",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/VoidType.java",
    "class_name": "com.google.javascript.rhino.jstype.VoidType",
    "signature": "com.google.javascript.rhino.jstype.VoidType.isVoidType()",
    "snippet": "@Override\n  public boolean isVoidType() {\n    return true;\n  }",
    "begin_line": 90,
    "end_line": 92,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VoidType.toStringHelper#95",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/VoidType.java",
    "class_name": "com.google.javascript.rhino.jstype.VoidType",
    "signature": "com.google.javascript.rhino.jstype.VoidType.toStringHelper(boolean)",
    "snippet": "@Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }",
    "begin_line": 95,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VoidType.getDisplayName#100",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/VoidType.java",
    "class_name": "com.google.javascript.rhino.jstype.VoidType",
    "signature": "com.google.javascript.rhino.jstype.VoidType.getDisplayName()",
    "snippet": "@Override\n  public String getDisplayName() {\n    return \"undefined\";\n  }",
    "begin_line": 100,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VoidType.getPossibleToBooleanOutcomes#105",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/VoidType.java",
    "class_name": "com.google.javascript.rhino.jstype.VoidType",
    "signature": "com.google.javascript.rhino.jstype.VoidType.getPossibleToBooleanOutcomes()",
    "snippet": "@Override\n  public BooleanLiteralSet getPossibleToBooleanOutcomes() {\n    return BooleanLiteralSet.FALSE;\n  }",
    "begin_line": 105,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VoidType.visit#110",
    "is_bug": true,
    "src_path": "com/google/javascript/rhino/jstype/VoidType.java",
    "class_name": "com.google.javascript.rhino.jstype.VoidType",
    "signature": "com.google.javascript.rhino.jstype.VoidType.visit(com.google.javascript.rhino.jstype.Visitor\u003cT\u003e)",
    "snippet": "@Override\n  public \u003cT\u003e T visit(Visitor\u003cT\u003e visitor) {\n    return visitor.caseVoidType();\n  }",
    "begin_line": 110,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]