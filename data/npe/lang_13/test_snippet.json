[
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.toString()",
    "snippet": "@Override\n                public String toString() {\n                    return null;\n                }",
    "begin_line": 87,
    "end_line": 89,
    "comment": "",
    "child_ranges": [
      "(line 88,col 21)-(line 88,col 32)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testConstructor()",
    "snippet": "@Test\n    public void testConstructor() {\n        assertNotNull(new StringUtils());\n        final Constructor\u003c?\u003e[] cons \u003d StringUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n        assertTrue(Modifier.isPublic(StringUtils.class.getModifiers()));\n        assertFalse(Modifier.isFinal(StringUtils.class.getModifiers()));\n    }",
    "begin_line": 117,
    "end_line": 124,
    "comment": "",
    "child_ranges": [
      "(line 118,col 9)-(line 118,col 41)",
      "(line 119,col 9)-(line 119,col 82)",
      "(line 120,col 9)-(line 120,col 37)",
      "(line 121,col 9)-(line 121,col 62)",
      "(line 122,col 9)-(line 122,col 72)",
      "(line 123,col 9)-(line 123,col 72)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testIsEmpty()",
    "snippet": "@Test\n    public void testIsEmpty() {\n        assertTrue(StringUtils.isEmpty(null));\n        assertTrue(StringUtils.isEmpty(\"\"));\n        assertFalse(StringUtils.isEmpty(\" \"));\n        assertFalse(StringUtils.isEmpty(\"bob\"));\n        assertFalse(StringUtils.isEmpty(\"  bob  \"));\n    }",
    "begin_line": 128,
    "end_line": 134,
    "comment": "",
    "child_ranges": [
      "(line 129,col 9)-(line 129,col 46)",
      "(line 130,col 9)-(line 130,col 44)",
      "(line 131,col 9)-(line 131,col 46)",
      "(line 132,col 9)-(line 132,col 48)",
      "(line 133,col 9)-(line 133,col 52)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testIsNotEmpty()",
    "snippet": "@Test\n    public void testIsNotEmpty() {\n        assertFalse(StringUtils.isNotEmpty(null));\n        assertFalse(StringUtils.isNotEmpty(\"\"));\n        assertTrue(StringUtils.isNotEmpty(\" \"));\n        assertTrue(StringUtils.isNotEmpty(\"bob\"));\n        assertTrue(StringUtils.isNotEmpty(\"  bob  \"));\n    }",
    "begin_line": 137,
    "end_line": 143,
    "comment": "",
    "child_ranges": [
      "(line 138,col 9)-(line 138,col 50)",
      "(line 139,col 9)-(line 139,col 48)",
      "(line 140,col 9)-(line 140,col 48)",
      "(line 141,col 9)-(line 141,col 50)",
      "(line 142,col 9)-(line 142,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testIsAnyEmpty()",
    "snippet": "@Test\n    public void testIsAnyEmpty() {\n        assertTrue(StringUtils.isAnyEmpty((String) null));\n        assertTrue(StringUtils.isAnyEmpty((String[]) null));\n        assertTrue(StringUtils.isAnyEmpty(null, \"foo\"));\n        assertTrue(StringUtils.isAnyEmpty(\"\", \"bar\"));\n        assertTrue(StringUtils.isAnyEmpty(\"bob\", \"\"));\n        assertTrue(StringUtils.isAnyEmpty(\"  bob  \", null));\n        assertFalse(StringUtils.isAnyEmpty(\" \", \"bar\"));\n        assertFalse(StringUtils.isAnyEmpty(\"foo\", \"bar\"));\n    }",
    "begin_line": 146,
    "end_line": 155,
    "comment": "",
    "child_ranges": [
      "(line 147,col 9)-(line 147,col 58)",
      "(line 148,col 9)-(line 148,col 60)",
      "(line 149,col 9)-(line 149,col 56)",
      "(line 150,col 9)-(line 150,col 54)",
      "(line 151,col 9)-(line 151,col 54)",
      "(line 152,col 9)-(line 152,col 60)",
      "(line 153,col 9)-(line 153,col 56)",
      "(line 154,col 9)-(line 154,col 58)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testIsNoneEmpty()",
    "snippet": "@Test\n    public void testIsNoneEmpty() {\n        assertFalse(StringUtils.isNoneEmpty((String) null));\n        assertFalse(StringUtils.isNoneEmpty((String[]) null));\n        assertFalse(StringUtils.isNoneEmpty(null, \"foo\"));\n        assertFalse(StringUtils.isNoneEmpty(\"\", \"bar\"));\n        assertFalse(StringUtils.isNoneEmpty(\"bob\", \"\"));\n        assertFalse(StringUtils.isNoneEmpty(\"  bob  \", null));\n        assertTrue(StringUtils.isNoneEmpty(\" \", \"bar\"));\n        assertTrue(StringUtils.isNoneEmpty(\"foo\", \"bar\"));\n    }",
    "begin_line": 158,
    "end_line": 167,
    "comment": "",
    "child_ranges": [
      "(line 159,col 9)-(line 159,col 60)",
      "(line 160,col 9)-(line 160,col 62)",
      "(line 161,col 9)-(line 161,col 58)",
      "(line 162,col 9)-(line 162,col 56)",
      "(line 163,col 9)-(line 163,col 56)",
      "(line 164,col 9)-(line 164,col 62)",
      "(line 165,col 9)-(line 165,col 56)",
      "(line 166,col 9)-(line 166,col 58)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testIsBlank()",
    "snippet": "@Test\n    public void testIsBlank() {\n        assertTrue(StringUtils.isBlank(null));\n        assertTrue(StringUtils.isBlank(\"\"));\n        assertTrue(StringUtils.isBlank(\" \"));\n        assertFalse(StringUtils.isBlank(\"bob\"));\n        assertFalse(StringUtils.isBlank(\"  bob  \"));\n    }",
    "begin_line": 170,
    "end_line": 176,
    "comment": "",
    "child_ranges": [
      "(line 171,col 9)-(line 171,col 46)",
      "(line 172,col 9)-(line 172,col 44)",
      "(line 173,col 9)-(line 173,col 45)",
      "(line 174,col 9)-(line 174,col 48)",
      "(line 175,col 9)-(line 175,col 52)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testIsNotBlank()",
    "snippet": "@Test\n    public void testIsNotBlank() {\n        assertFalse(StringUtils.isNotBlank(null));\n        assertFalse(StringUtils.isNotBlank(\"\"));\n        assertFalse(StringUtils.isNotBlank(\" \"));\n        assertTrue(StringUtils.isNotBlank(\"bob\"));\n        assertTrue(StringUtils.isNotBlank(\"  bob  \"));\n    }",
    "begin_line": 179,
    "end_line": 185,
    "comment": "",
    "child_ranges": [
      "(line 180,col 9)-(line 180,col 50)",
      "(line 181,col 9)-(line 181,col 48)",
      "(line 182,col 9)-(line 182,col 49)",
      "(line 183,col 9)-(line 183,col 50)",
      "(line 184,col 9)-(line 184,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testIsAnyBlank()",
    "snippet": "@Test\n    public void testIsAnyBlank() {\n        assertTrue(StringUtils.isAnyBlank((String) null));\n        assertTrue(StringUtils.isAnyBlank((String[]) null));\n        assertTrue(StringUtils.isAnyBlank(null, \"foo\"));\n        assertTrue(StringUtils.isAnyBlank(null, null));\n        assertTrue(StringUtils.isAnyBlank(\"\", \"bar\"));\n        assertTrue(StringUtils.isAnyBlank(\"bob\", \"\"));\n        assertTrue(StringUtils.isAnyBlank(\"  bob  \", null));\n        assertTrue(StringUtils.isAnyBlank(\" \", \"bar\"));\n        assertFalse(StringUtils.isAnyBlank(\"foo\", \"bar\"));\n    }",
    "begin_line": 188,
    "end_line": 198,
    "comment": "",
    "child_ranges": [
      "(line 189,col 9)-(line 189,col 58)",
      "(line 190,col 9)-(line 190,col 60)",
      "(line 191,col 9)-(line 191,col 56)",
      "(line 192,col 9)-(line 192,col 55)",
      "(line 193,col 9)-(line 193,col 54)",
      "(line 194,col 9)-(line 194,col 54)",
      "(line 195,col 9)-(line 195,col 60)",
      "(line 196,col 9)-(line 196,col 55)",
      "(line 197,col 9)-(line 197,col 58)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testIsNoneBlank()",
    "snippet": "@Test\n    public void testIsNoneBlank() {\n        assertFalse(StringUtils.isNoneBlank((String) null));\n        assertFalse(StringUtils.isNoneBlank((String[]) null));\n        assertFalse(StringUtils.isNoneBlank(null, \"foo\"));\n        assertFalse(StringUtils.isNoneBlank(null, null));\n        assertFalse(StringUtils.isNoneBlank(\"\", \"bar\"));\n        assertFalse(StringUtils.isNoneBlank(\"bob\", \"\"));\n        assertFalse(StringUtils.isNoneBlank(\"  bob  \", null));\n        assertFalse(StringUtils.isNoneBlank(\" \", \"bar\"));\n        assertTrue(StringUtils.isNoneBlank(\"foo\", \"bar\"));\n    }",
    "begin_line": 201,
    "end_line": 211,
    "comment": "",
    "child_ranges": [
      "(line 202,col 9)-(line 202,col 60)",
      "(line 203,col 9)-(line 203,col 62)",
      "(line 204,col 9)-(line 204,col 58)",
      "(line 205,col 9)-(line 205,col 57)",
      "(line 206,col 9)-(line 206,col 56)",
      "(line 207,col 9)-(line 207,col 56)",
      "(line 208,col 9)-(line 208,col 62)",
      "(line 209,col 9)-(line 209,col 57)",
      "(line 210,col 9)-(line 210,col 58)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testUpperCase()",
    "snippet": "@Test\n    public void testUpperCase() {\n        assertNull(StringUtils.upperCase(null));\n        assertNull(StringUtils.upperCase(null, Locale.ENGLISH));\n        assertEquals(\"upperCase(String) failed\",\n                \"FOO TEST THING\", StringUtils.upperCase(\"fOo test THING\"));\n        assertEquals(\"upperCase(empty-string) failed\",\n                \"\", StringUtils.upperCase(\"\"));\n        assertEquals(\"upperCase(String, Locale) failed\",\n                \"FOO TEST THING\", StringUtils.upperCase(\"fOo test THING\", Locale.ENGLISH));\n        assertEquals(\"upperCase(empty-string, Locale) failed\",\n                \"\", StringUtils.upperCase(\"\", Locale.ENGLISH));\n    }",
    "begin_line": 214,
    "end_line": 225,
    "comment": "",
    "child_ranges": [
      "(line 215,col 9)-(line 215,col 48)",
      "(line 216,col 9)-(line 216,col 64)",
      "(line 217,col 9)-(line 218,col 75)",
      "(line 219,col 9)-(line 220,col 47)",
      "(line 221,col 9)-(line 222,col 91)",
      "(line 223,col 9)-(line 224,col 63)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testLowerCase()",
    "snippet": "@Test\n    public void testLowerCase() {\n        assertNull(StringUtils.lowerCase(null));\n        assertNull(StringUtils.lowerCase(null, Locale.ENGLISH));\n        assertEquals(\"lowerCase(String) failed\",\n                \"foo test thing\", StringUtils.lowerCase(\"fOo test THING\"));\n        assertEquals(\"lowerCase(empty-string) failed\",\n                \"\", StringUtils.lowerCase(\"\"));\n        assertEquals(\"lowerCase(String, Locale) failed\",\n                \"foo test thing\", StringUtils.lowerCase(\"fOo test THING\", Locale.ENGLISH));\n        assertEquals(\"lowerCase(empty-string, Locale) failed\",\n                \"\", StringUtils.lowerCase(\"\", Locale.ENGLISH));\n    }",
    "begin_line": 228,
    "end_line": 239,
    "comment": "",
    "child_ranges": [
      "(line 229,col 9)-(line 229,col 48)",
      "(line 230,col 9)-(line 230,col 64)",
      "(line 231,col 9)-(line 232,col 75)",
      "(line 233,col 9)-(line 234,col 47)",
      "(line 235,col 9)-(line 236,col 91)",
      "(line 237,col 9)-(line 238,col 63)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testCapitalize()",
    "snippet": "@Test\n    public void testCapitalize() {\n        assertNull(StringUtils.capitalize(null));\n\n        assertEquals(\"capitalize(empty-string) failed\",\n                \"\", StringUtils.capitalize(\"\"));\n        assertEquals(\"capitalize(single-char-string) failed\",\n                \"X\", StringUtils.capitalize(\"x\"));\n        assertEquals(\"capitalize(String) failed\",\n                FOO_CAP, StringUtils.capitalize(FOO_CAP));\n        assertEquals(\"capitalize(string) failed\",\n                FOO_CAP, StringUtils.capitalize(FOO_UNCAP));\n\n        assertEquals(\"capitalize(String) is not using TitleCase\",\n                \"\\u01C8\", StringUtils.capitalize(\"\\u01C9\"));\n\n        // Javadoc examples\n        assertNull(StringUtils.capitalize(null));\n        assertEquals(\"\", StringUtils.capitalize(\"\"));\n        assertEquals(\"Cat\", StringUtils.capitalize(\"cat\"));\n        assertEquals(\"CAt\", StringUtils.capitalize(\"cAt\"));\n        assertEquals(\"\u0027cat\u0027\", StringUtils.capitalize(\"\u0027cat\u0027\"));\n    }",
    "begin_line": 242,
    "end_line": 263,
    "comment": "",
    "child_ranges": [
      "(line 243,col 9)-(line 243,col 49)",
      "(line 245,col 9)-(line 246,col 48)",
      "(line 247,col 9)-(line 248,col 50)",
      "(line 249,col 9)-(line 250,col 58)",
      "(line 251,col 9)-(line 252,col 60)",
      "(line 254,col 9)-(line 255,col 60)",
      "(line 258,col 9)-(line 258,col 49)",
      "(line 259,col 9)-(line 259,col 53)",
      "(line 260,col 9)-(line 260,col 59)",
      "(line 261,col 9)-(line 261,col 59)",
      "(line 262,col 9)-(line 262,col 63)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testUnCapitalize()",
    "snippet": "@Test\n    public void testUnCapitalize() {\n        assertNull(StringUtils.uncapitalize(null));\n\n        assertEquals(\"uncapitalize(String) failed\",\n                FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP));\n        assertEquals(\"uncapitalize(string) failed\",\n                FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP));\n        assertEquals(\"uncapitalize(empty-string) failed\",\n                \"\", StringUtils.uncapitalize(\"\"));\n        assertEquals(\"uncapitalize(single-char-string) failed\",\n                \"x\", StringUtils.uncapitalize(\"X\"));\n\n        // Examples from uncapitalize Javadoc\n        assertEquals(\"cat\", StringUtils.uncapitalize(\"cat\"));\n        assertEquals(\"cat\", StringUtils.uncapitalize(\"Cat\"));\n        assertEquals(\"cAT\", StringUtils.uncapitalize(\"CAT\"));\n    }",
    "begin_line": 266,
    "end_line": 282,
    "comment": "",
    "child_ranges": [
      "(line 267,col 9)-(line 267,col 51)",
      "(line 269,col 9)-(line 270,col 62)",
      "(line 271,col 9)-(line 272,col 64)",
      "(line 273,col 9)-(line 274,col 50)",
      "(line 275,col 9)-(line 276,col 52)",
      "(line 279,col 9)-(line 279,col 61)",
      "(line 280,col 9)-(line 280,col 61)",
      "(line 281,col 9)-(line 281,col 61)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testReCapitalize()",
    "snippet": "@Test\n    public void testReCapitalize() {\n        // reflection type of tests: Sentences.\n        assertEquals(\"uncapitalize(capitalize(String)) failed\",\n                SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)));\n        assertEquals(\"capitalize(uncapitalize(String)) failed\",\n                SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)));\n\n        // reflection type of tests: One word.\n        assertEquals(\"uncapitalize(capitalize(String)) failed\",\n                FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)));\n        assertEquals(\"capitalize(uncapitalize(String)) failed\",\n                FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)));\n    }",
    "begin_line": 285,
    "end_line": 297,
    "comment": "",
    "child_ranges": [
      "(line 287,col 9)-(line 288,col 98)",
      "(line 289,col 9)-(line 290,col 94)",
      "(line 293,col 9)-(line 294,col 88)",
      "(line 295,col 9)-(line 296,col 84)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testSwapCase_String()",
    "snippet": "@Test\n    public void testSwapCase_String() {\n        assertNull(StringUtils.swapCase(null));\n        assertEquals(\"\", StringUtils.swapCase(\"\"));\n        assertEquals(\"  \", StringUtils.swapCase(\"  \"));\n\n        assertEquals(\"i\", WordUtils.swapCase(\"I\"));\n        assertEquals(\"I\", WordUtils.swapCase(\"i\"));\n        assertEquals(\"I AM HERE 123\", StringUtils.swapCase(\"i am here 123\"));\n        assertEquals(\"i aM hERE 123\", StringUtils.swapCase(\"I Am Here 123\"));\n        assertEquals(\"I AM here 123\", StringUtils.swapCase(\"i am HERE 123\"));\n        assertEquals(\"i am here 123\", StringUtils.swapCase(\"I AM HERE 123\"));\n\n        final String test \u003d \"This String contains a TitleCase character: \\u01C8\";\n        final String expect \u003d \"tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \\u01C9\";\n        assertEquals(expect, WordUtils.swapCase(test));\n    }",
    "begin_line": 300,
    "end_line": 315,
    "comment": "",
    "child_ranges": [
      "(line 301,col 9)-(line 301,col 47)",
      "(line 302,col 9)-(line 302,col 51)",
      "(line 303,col 9)-(line 303,col 55)",
      "(line 305,col 9)-(line 305,col 51)",
      "(line 306,col 9)-(line 306,col 51)",
      "(line 307,col 9)-(line 307,col 77)",
      "(line 308,col 9)-(line 308,col 77)",
      "(line 309,col 9)-(line 309,col 77)",
      "(line 310,col 9)-(line 310,col 77)",
      "(line 312,col 9)-(line 312,col 81)",
      "(line 313,col 9)-(line 313,col 83)",
      "(line 314,col 9)-(line 314,col 55)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_Objects()",
    "snippet": "@Test\n    public void testJoin_Objects() {\n        assertEquals(\"abc\", StringUtils.join(\"a\", \"b\", \"c\"));\n        assertEquals(\"a\", StringUtils.join(null, \"\", \"a\"));\n        assertNull(StringUtils.join((Object[]) null));\n    }",
    "begin_line": 319,
    "end_line": 323,
    "comment": "",
    "child_ranges": [
      "(line 320,col 9)-(line 320,col 61)",
      "(line 321,col 9)-(line 321,col 59)",
      "(line 322,col 9)-(line 322,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_Objectarray()",
    "snippet": "@Test\n    public void testJoin_Objectarray() {\n//        assertNull(StringUtils.join(null)); // generates warning\n        assertNull(StringUtils.join((Object[]) null)); // equivalent explicit cast\n        // test additional varargs calls\n        assertEquals(\"\", StringUtils.join(new Object[0])); // empty array\n        assertEquals(\"\", StringUtils.join((Object) null)); // \u003d\u003e new Object[]{null}\n\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));\n        assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));\n        assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));\n        assertEquals(\"abc\", StringUtils.join(new String[]{\"a\", \"b\", \"c\"}));\n        assertEquals(\"a\", StringUtils.join(new String[]{null, \"a\", \"\"}));\n        assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));\n        assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));\n    }",
    "begin_line": 326,
    "end_line": 340,
    "comment": "",
    "child_ranges": [
      "(line 328,col 9)-(line 328,col 54)",
      "(line 330,col 9)-(line 330,col 58)",
      "(line 331,col 9)-(line 331,col 58)",
      "(line 333,col 9)-(line 333,col 61)",
      "(line 334,col 9)-(line 334,col 60)",
      "(line 335,col 9)-(line 335,col 68)",
      "(line 336,col 9)-(line 336,col 75)",
      "(line 337,col 9)-(line 337,col 73)",
      "(line 338,col 9)-(line 338,col 64)",
      "(line 339,col 9)-(line 339,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayCharSeparator()",
    "snippet": "@Test\n    public void testJoin_ArrayCharSeparator() {\n        assertNull(StringUtils.join((Object[]) null, \u0027,\u0027));\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));\n\n        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, \u0027/\u0027, 0, MIXED_ARRAY_LIST.length - 1));\n        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, \u0027/\u0027, 0, 1));\n        assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST, \u0027/\u0027, 0, 1));\n        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, \u0027/\u0027, 0, 2));\n        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, \u0027/\u0027, 1, 2));\n        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, \u0027/\u0027, 2, 1));\n    }",
    "begin_line": 343,
    "end_line": 356,
    "comment": "",
    "child_ranges": [
      "(line 344,col 9)-(line 344,col 59)",
      "(line 345,col 9)-(line 345,col 83)",
      "(line 346,col 9)-(line 346,col 77)",
      "(line 347,col 9)-(line 347,col 82)",
      "(line 348,col 9)-(line 348,col 81)",
      "(line 350,col 9)-(line 350,col 99)",
      "(line 351,col 9)-(line 351,col 74)",
      "(line 352,col 9)-(line 352,col 79)",
      "(line 353,col 9)-(line 353,col 76)",
      "(line 354,col 9)-(line 354,col 72)",
      "(line 355,col 9)-(line 355,col 71)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfChars()",
    "snippet": "@Test\n    public void testJoin_ArrayOfChars() {\n        assertNull(StringUtils.join((char[]) null, \u0027,\u0027));\n        assertEquals(\"1;2\", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR));\n        assertEquals(\"2\", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n    }",
    "begin_line": 359,
    "end_line": 363,
    "comment": "",
    "child_ranges": [
      "(line 360,col 9)-(line 360,col 57)",
      "(line 361,col 9)-(line 361,col 78)",
      "(line 362,col 9)-(line 362,col 82)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfBytes()",
    "snippet": "@Test\n    public void testJoin_ArrayOfBytes() {\n        assertNull(StringUtils.join((byte[]) null, \u0027,\u0027));\n        assertEquals(\"1;2\", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR));\n        assertEquals(\"2\", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n    }",
    "begin_line": 366,
    "end_line": 370,
    "comment": "",
    "child_ranges": [
      "(line 367,col 9)-(line 367,col 57)",
      "(line 368,col 9)-(line 368,col 78)",
      "(line 369,col 9)-(line 369,col 82)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfInts()",
    "snippet": "@Test\n    public void testJoin_ArrayOfInts() {\n        assertNull(StringUtils.join((int[]) null, \u0027,\u0027));\n        assertEquals(\"1;2\", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR));\n        assertEquals(\"2\", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n    }",
    "begin_line": 373,
    "end_line": 377,
    "comment": "",
    "child_ranges": [
      "(line 374,col 9)-(line 374,col 56)",
      "(line 375,col 9)-(line 375,col 77)",
      "(line 376,col 9)-(line 376,col 81)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfLongs()",
    "snippet": "@Test\n    public void testJoin_ArrayOfLongs() {\n        assertNull(StringUtils.join((long[]) null, \u0027,\u0027));\n        assertEquals(\"1;2\", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR));\n        assertEquals(\"2\", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n    }",
    "begin_line": 380,
    "end_line": 384,
    "comment": "",
    "child_ranges": [
      "(line 381,col 9)-(line 381,col 57)",
      "(line 382,col 9)-(line 382,col 78)",
      "(line 383,col 9)-(line 383,col 82)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfFloats()",
    "snippet": "@Test\n    public void testJoin_ArrayOfFloats() {\n        assertNull(StringUtils.join((float[]) null, \u0027,\u0027));\n        assertEquals(\"1.0;2.0\", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR));\n        assertEquals(\"2.0\", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n    }",
    "begin_line": 387,
    "end_line": 391,
    "comment": "",
    "child_ranges": [
      "(line 388,col 9)-(line 388,col 58)",
      "(line 389,col 9)-(line 389,col 83)",
      "(line 390,col 9)-(line 390,col 85)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfDoubles()",
    "snippet": "@Test\n    public void testJoin_ArrayOfDoubles() {\n        assertNull(StringUtils.join((double[]) null, \u0027,\u0027));\n        assertEquals(\"1.0;2.0\", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR));\n        assertEquals(\"2.0\", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n    }",
    "begin_line": 394,
    "end_line": 398,
    "comment": "",
    "child_ranges": [
      "(line 395,col 9)-(line 395,col 59)",
      "(line 396,col 9)-(line 396,col 84)",
      "(line 397,col 9)-(line 397,col 86)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfShorts()",
    "snippet": "@Test\n    public void testJoin_ArrayOfShorts() {\n        assertNull(StringUtils.join((short[]) null, \u0027,\u0027));\n        assertEquals(\"1;2\", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR));\n        assertEquals(\"2\", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n    }",
    "begin_line": 401,
    "end_line": 405,
    "comment": "",
    "child_ranges": [
      "(line 402,col 9)-(line 402,col 58)",
      "(line 403,col 9)-(line 403,col 79)",
      "(line 404,col 9)-(line 404,col 83)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayString()",
    "snippet": "@Test\n    public void testJoin_ArrayString() {\n        assertNull(StringUtils.join((Object[]) null, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, \"\"));\n\n        assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST, null));\n\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, null));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, \"\"));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR));\n\n        assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR));\n        assertEquals(\",,foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR));\n        assertEquals(\"foo,2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR));\n\n        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, \"/\", 0, MIXED_ARRAY_LIST.length - 1));\n        assertEquals(\"\", StringUtils.join(MIXED_ARRAY_LIST, \"\", 0, MIXED_ARRAY_LIST.length - 1));\n        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 0, 1));\n        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 0, 2));\n        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 1, 2));\n        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 2, 1));\n    }",
    "begin_line": 408,
    "end_line": 429,
    "comment": "",
    "child_ranges": [
      "(line 409,col 9)-(line 409,col 60)",
      "(line 410,col 9)-(line 410,col 74)",
      "(line 411,col 9)-(line 411,col 72)",
      "(line 413,col 9)-(line 413,col 66)",
      "(line 415,col 9)-(line 415,col 67)",
      "(line 416,col 9)-(line 416,col 65)",
      "(line 417,col 9)-(line 417,col 72)",
      "(line 419,col 9)-(line 419,col 73)",
      "(line 420,col 9)-(line 420,col 77)",
      "(line 421,col 9)-(line 421,col 76)",
      "(line 423,col 9)-(line 423,col 99)",
      "(line 424,col 9)-(line 424,col 97)",
      "(line 425,col 9)-(line 425,col 74)",
      "(line 426,col 9)-(line 426,col 76)",
      "(line 427,col 9)-(line 427,col 72)",
      "(line 428,col 9)-(line 428,col 71)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IteratorChar()",
    "snippet": "@Test\n    public void testJoin_IteratorChar() {\n        assertNull(StringUtils.join((Iterator\u003c?\u003e) null, \u0027,\u0027));\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), \u0027x\u0027));\n    }",
    "begin_line": 432,
    "end_line": 438,
    "comment": "",
    "child_ranges": [
      "(line 433,col 9)-(line 433,col 62)",
      "(line 434,col 9)-(line 434,col 109)",
      "(line 435,col 9)-(line 435,col 102)",
      "(line 436,col 9)-(line 436,col 103)",
      "(line 437,col 9)-(line 437,col 92)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IteratorString()",
    "snippet": "@Test\n    public void testJoin_IteratorString() {\n        assertNull(StringUtils.join((Iterator\u003c?\u003e) null, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), \"\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), \"x\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), null));\n\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), null));\n\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), null));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), \"\"));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR));\n\n        assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR));\n\n        assertNull(StringUtils.join(Arrays.asList(NULL_TO_STRING_LIST).iterator(), SEPARATOR));\n    }",
    "begin_line": 441,
    "end_line": 457,
    "comment": "",
    "child_ranges": [
      "(line 442,col 9)-(line 442,col 63)",
      "(line 443,col 9)-(line 443,col 100)",
      "(line 444,col 9)-(line 444,col 98)",
      "(line 445,col 9)-(line 445,col 92)",
      "(line 446,col 9)-(line 446,col 93)",
      "(line 448,col 9)-(line 448,col 92)",
      "(line 450,col 9)-(line 450,col 93)",
      "(line 451,col 9)-(line 451,col 91)",
      "(line 452,col 9)-(line 452,col 98)",
      "(line 454,col 9)-(line 454,col 99)",
      "(line 456,col 9)-(line 456,col 95)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IterableChar()",
    "snippet": "@Test\n    public void testJoin_IterableChar() {\n        assertNull(StringUtils.join((Iterable\u003c?\u003e) null, \u0027,\u0027));\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), \u0027x\u0027));\n    }",
    "begin_line": 460,
    "end_line": 466,
    "comment": "",
    "child_ranges": [
      "(line 461,col 9)-(line 461,col 62)",
      "(line 462,col 9)-(line 462,col 98)",
      "(line 463,col 9)-(line 463,col 91)",
      "(line 464,col 9)-(line 464,col 92)",
      "(line 465,col 9)-(line 465,col 81)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IterableString()",
    "snippet": "@Test\n    public void testJoin_IterableString() {\n        assertNull(StringUtils.join((Iterable\u003c?\u003e) null, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), \"\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), \"x\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), null));\n\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null));\n\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), \"\"));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR));\n\n        assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR));\n    }",
    "begin_line": 469,
    "end_line": 483,
    "comment": "",
    "child_ranges": [
      "(line 470,col 9)-(line 470,col 63)",
      "(line 471,col 9)-(line 471,col 89)",
      "(line 472,col 9)-(line 472,col 87)",
      "(line 473,col 9)-(line 473,col 81)",
      "(line 474,col 9)-(line 474,col 82)",
      "(line 476,col 9)-(line 476,col 81)",
      "(line 478,col 9)-(line 478,col 82)",
      "(line 479,col 9)-(line 479,col 80)",
      "(line 480,col 9)-(line 480,col 87)",
      "(line 482,col 9)-(line 482,col 88)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testJoinWith()",
    "snippet": "@Test\n    public void testJoinWith() {\n        assertEquals(\"\", StringUtils.joinWith(\",\", new Object[0]));        // empty array\n        assertEquals(\"\", StringUtils.joinWith(\",\", (Object[]) NULL_ARRAY_LIST));\n        assertEquals(\"null\", StringUtils.joinWith(\",\", NULL_TO_STRING_LIST));   //toString method prints \u0027null\u0027\n\n        assertEquals(\"a,b,c\", StringUtils.joinWith(\",\", new Object[]{\"a\", \"b\", \"c\"}));\n        assertEquals(\",a,\", StringUtils.joinWith(\",\", new Object[]{null, \"a\", \"\"}));\n\n        assertEquals(\"ab\", StringUtils.joinWith(null, \"a\", \"b\"));\n    }",
    "begin_line": 486,
    "end_line": 495,
    "comment": "",
    "child_ranges": [
      "(line 487,col 9)-(line 487,col 67)",
      "(line 488,col 9)-(line 488,col 80)",
      "(line 489,col 9)-(line 489,col 77)",
      "(line 491,col 9)-(line 491,col 86)",
      "(line 492,col 9)-(line 492,col 84)",
      "(line 494,col 9)-(line 494,col 65)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testJoinWithThrowsException()",
    "snippet": "@Test(expected \u003d IllegalArgumentException.class)\n    public void testJoinWithThrowsException() {\n        StringUtils.joinWith(\",\", (Object[]) null);\n    }",
    "begin_line": 498,
    "end_line": 500,
    "comment": "",
    "child_ranges": [
      "(line 499,col 9)-(line 499,col 51)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testSplit_String()",
    "snippet": "@Test\n    public void testSplit_String() {\n        assertNull(StringUtils.split(null));\n        assertEquals(0, StringUtils.split(\"\").length);\n\n        String str \u003d \"a b  .c\";\n        String[] res \u003d StringUtils.split(str);\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\".c\", res[2]);\n\n        str \u003d \" a \";\n        res \u003d StringUtils.split(str);\n        assertEquals(1, res.length);\n        assertEquals(\"a\", res[0]);\n\n        str \u003d \"a\" + WHITESPACE + \"b\" + NON_WHITESPACE + \"c\";\n        res \u003d StringUtils.split(str);\n        assertEquals(2, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[1]);\n    }",
    "begin_line": 504,
    "end_line": 525,
    "comment": "",
    "child_ranges": [
      "(line 505,col 9)-(line 505,col 44)",
      "(line 506,col 9)-(line 506,col 54)",
      "(line 508,col 9)-(line 508,col 31)",
      "(line 509,col 9)-(line 509,col 46)",
      "(line 510,col 9)-(line 510,col 36)",
      "(line 511,col 9)-(line 511,col 34)",
      "(line 512,col 9)-(line 512,col 34)",
      "(line 513,col 9)-(line 513,col 35)",
      "(line 515,col 9)-(line 515,col 20)",
      "(line 516,col 9)-(line 516,col 37)",
      "(line 517,col 9)-(line 517,col 36)",
      "(line 518,col 9)-(line 518,col 34)",
      "(line 520,col 9)-(line 520,col 60)",
      "(line 521,col 9)-(line 521,col 37)",
      "(line 522,col 9)-(line 522,col 36)",
      "(line 523,col 9)-(line 523,col 34)",
      "(line 524,col 9)-(line 524,col 57)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testSplit_StringChar()",
    "snippet": "@Test\n    public void testSplit_StringChar() {\n        assertNull(StringUtils.split(null, \u0027.\u0027));\n        assertEquals(0, StringUtils.split(\"\", \u0027.\u0027).length);\n\n        String str \u003d \"a.b.. c\";\n        String[] res \u003d StringUtils.split(str, \u0027.\u0027);\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\" c\", res[2]);\n\n        str \u003d \".a.\";\n        res \u003d StringUtils.split(str, \u0027.\u0027);\n        assertEquals(1, res.length);\n        assertEquals(\"a\", res[0]);\n\n        str \u003d \"a b c\";\n        res \u003d StringUtils.split(str, \u0027 \u0027);\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n    }",
    "begin_line": 528,
    "end_line": 550,
    "comment": "",
    "child_ranges": [
      "(line 529,col 9)-(line 529,col 49)",
      "(line 530,col 9)-(line 530,col 59)",
      "(line 532,col 9)-(line 532,col 31)",
      "(line 533,col 9)-(line 533,col 51)",
      "(line 534,col 9)-(line 534,col 36)",
      "(line 535,col 9)-(line 535,col 34)",
      "(line 536,col 9)-(line 536,col 34)",
      "(line 537,col 9)-(line 537,col 35)",
      "(line 539,col 9)-(line 539,col 20)",
      "(line 540,col 9)-(line 540,col 42)",
      "(line 541,col 9)-(line 541,col 36)",
      "(line 542,col 9)-(line 542,col 34)",
      "(line 544,col 9)-(line 544,col 22)",
      "(line 545,col 9)-(line 545,col 42)",
      "(line 546,col 9)-(line 546,col 36)",
      "(line 547,col 9)-(line 547,col 34)",
      "(line 548,col 9)-(line 548,col 34)",
      "(line 549,col 9)-(line 549,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testSplit_StringString_StringStringInt()",
    "snippet": "@Test\n    public void testSplit_StringString_StringStringInt() {\n        assertNull(StringUtils.split(null, \".\"));\n        assertNull(StringUtils.split(null, \".\", 3));\n\n        assertEquals(0, StringUtils.split(\"\", \".\").length);\n        assertEquals(0, StringUtils.split(\"\", \".\", 3).length);\n\n        innerTestSplit(\u0027.\u0027, \".\", \u0027 \u0027);\n        innerTestSplit(\u0027.\u0027, \".\", \u0027,\u0027);\n        innerTestSplit(\u0027.\u0027, \".,\", \u0027x\u0027);\n        for (int i \u003d 0; i \u003c WHITESPACE.length(); i++) {\n            for (int j \u003d 0; j \u003c NON_WHITESPACE.length(); j++) {\n                innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));\n                innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));\n            }\n        }\n\n        String[] results;\n        final String[] expectedResults \u003d {\"ab\", \"de fg\"};\n        results \u003d StringUtils.split(\"ab   de fg\", null, 2);\n        assertEquals(expectedResults.length, results.length);\n        for (int i \u003d 0; i \u003c expectedResults.length; i++) {\n            assertEquals(expectedResults[i], results[i]);\n        }\n\n        final String[] expectedResults2 \u003d {\"ab\", \"cd:ef\"};\n        results \u003d StringUtils.split(\"ab:cd:ef\", \":\", 2);\n        assertEquals(expectedResults2.length, results.length);\n        for (int i \u003d 0; i \u003c expectedResults2.length; i++) {\n            assertEquals(expectedResults2[i], results[i]);\n        }\n    }",
    "begin_line": 553,
    "end_line": 584,
    "comment": "",
    "child_ranges": [
      "(line 554,col 9)-(line 554,col 49)",
      "(line 555,col 9)-(line 555,col 52)",
      "(line 557,col 9)-(line 557,col 59)",
      "(line 558,col 9)-(line 558,col 62)",
      "(line 560,col 9)-(line 560,col 38)",
      "(line 561,col 9)-(line 561,col 38)",
      "(line 562,col 9)-(line 562,col 39)",
      "(line 563,col 9)-(line 568,col 9)",
      "(line 570,col 9)-(line 570,col 25)",
      "(line 571,col 9)-(line 571,col 57)",
      "(line 572,col 9)-(line 572,col 59)",
      "(line 573,col 9)-(line 573,col 61)",
      "(line 574,col 9)-(line 576,col 9)",
      "(line 578,col 9)-(line 578,col 58)",
      "(line 579,col 9)-(line 579,col 56)",
      "(line 580,col 9)-(line 580,col 62)",
      "(line 581,col 9)-(line 583,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.innerTestSplit(char, java.lang.String, char)",
    "snippet": "private void innerTestSplit(final char separator, final String sepStr, final char noMatch) {\n        final String msg \u003d \"Failed on separator hex(\" + Integer.toHexString(separator) +\n                \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n\n        final String str \u003d \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n        String[] res;\n        // (str, sepStr)\n        res \u003d StringUtils.split(str, sepStr);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n\n        final String str2 \u003d separator + \"a\" + separator;\n        res \u003d StringUtils.split(str2, sepStr);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, \"a\", res[0]);\n\n        res \u003d StringUtils.split(str, sepStr, -1);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n\n        res \u003d StringUtils.split(str, sepStr, 0);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n\n        res \u003d StringUtils.split(str, sepStr, 1);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, str, res[0]);\n\n        res \u003d StringUtils.split(str, sepStr, 2);\n        assertEquals(msg, 2, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, str.substring(2), res[1]);\n    }",
    "begin_line": 586,
    "end_line": 624,
    "comment": "",
    "child_ranges": [
      "(line 587,col 9)-(line 588,col 95)",
      "(line 590,col 9)-(line 590,col 89)",
      "(line 591,col 9)-(line 591,col 21)",
      "(line 593,col 9)-(line 593,col 45)",
      "(line 594,col 9)-(line 594,col 41)",
      "(line 595,col 9)-(line 595,col 39)",
      "(line 596,col 9)-(line 596,col 39)",
      "(line 597,col 9)-(line 597,col 49)",
      "(line 599,col 9)-(line 599,col 56)",
      "(line 600,col 9)-(line 600,col 46)",
      "(line 601,col 9)-(line 601,col 41)",
      "(line 602,col 9)-(line 602,col 39)",
      "(line 604,col 9)-(line 604,col 49)",
      "(line 605,col 9)-(line 605,col 41)",
      "(line 606,col 9)-(line 606,col 39)",
      "(line 607,col 9)-(line 607,col 39)",
      "(line 608,col 9)-(line 608,col 49)",
      "(line 610,col 9)-(line 610,col 48)",
      "(line 611,col 9)-(line 611,col 41)",
      "(line 612,col 9)-(line 612,col 39)",
      "(line 613,col 9)-(line 613,col 39)",
      "(line 614,col 9)-(line 614,col 49)",
      "(line 616,col 9)-(line 616,col 48)",
      "(line 617,col 9)-(line 617,col 41)",
      "(line 618,col 9)-(line 618,col 39)",
      "(line 620,col 9)-(line 620,col 48)",
      "(line 621,col 9)-(line 621,col 41)",
      "(line 622,col 9)-(line 622,col 39)",
      "(line 623,col 9)-(line 623,col 52)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByWholeString_StringStringBoolean()",
    "snippet": "@Test\n    public void testSplitByWholeString_StringStringBoolean() {\n        assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, \".\"));\n\n        assertEquals(0, StringUtils.splitByWholeSeparator(\"\", \".\").length);\n\n        final String stringToSplitOnNulls \u003d \"ab   de fg\";\n        final String[] splitOnNullExpectedResults \u003d {\"ab\", \"de\", \"fg\"};\n\n        final String[] splitOnNullResults \u003d StringUtils.splitByWholeSeparator(stringToSplitOnNulls, null);\n        assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length);\n        for (int i \u003d 0; i \u003c splitOnNullExpectedResults.length; i +\u003d 1) {\n            assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]);\n        }\n\n        final String stringToSplitOnCharactersAndString \u003d \"abstemiouslyaeiouyabstemiously\";\n\n        final String[] splitOnStringExpectedResults \u003d {\"abstemiously\", \"abstemiously\"};\n        final String[] splitOnStringResults \u003d StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString, \"aeiouy\");\n        assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length);\n        for (int i \u003d 0; i \u003c splitOnStringExpectedResults.length; i +\u003d 1) {\n            assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]);\n        }\n\n        final String[] splitWithMultipleSeparatorExpectedResults \u003d {\"ab\", \"cd\", \"ef\"};\n        final String[] splitWithMultipleSeparator \u003d StringUtils.splitByWholeSeparator(\"ab:cd::ef\", \":\");\n        assertEquals(splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length);\n        for (int i \u003d 0; i \u003c splitWithMultipleSeparatorExpectedResults.length; i++) {\n            assertEquals(splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i]);\n        }\n    }",
    "begin_line": 627,
    "end_line": 656,
    "comment": "",
    "child_ranges": [
      "(line 628,col 9)-(line 628,col 78)",
      "(line 630,col 9)-(line 630,col 75)",
      "(line 632,col 9)-(line 632,col 57)",
      "(line 633,col 9)-(line 633,col 71)",
      "(line 635,col 9)-(line 635,col 106)",
      "(line 636,col 9)-(line 636,col 83)",
      "(line 637,col 9)-(line 639,col 9)",
      "(line 641,col 9)-(line 641,col 91)",
      "(line 643,col 9)-(line 643,col 87)",
      "(line 644,col 9)-(line 644,col 126)",
      "(line 645,col 9)-(line 645,col 87)",
      "(line 646,col 9)-(line 648,col 9)",
      "(line 650,col 9)-(line 650,col 86)",
      "(line 651,col 9)-(line 651,col 104)",
      "(line 652,col 9)-(line 652,col 106)",
      "(line 653,col 9)-(line 655,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByWholeString_StringStringBooleanInt()",
    "snippet": "@Test\n    public void testSplitByWholeString_StringStringBooleanInt() {\n        assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, \".\", 3));\n\n        assertEquals(0, StringUtils.splitByWholeSeparator(\"\", \".\", 3).length);\n\n        final String stringToSplitOnNulls \u003d \"ab   de fg\";\n        final String[] splitOnNullExpectedResults \u003d {\"ab\", \"de fg\"};\n        //String[] splitOnNullExpectedResults \u003d { \"ab\", \"de\" } ;\n\n        final String[] splitOnNullResults \u003d StringUtils.splitByWholeSeparator(stringToSplitOnNulls, null, 2);\n        assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length);\n        for (int i \u003d 0; i \u003c splitOnNullExpectedResults.length; i +\u003d 1) {\n            assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]);\n        }\n\n        final String stringToSplitOnCharactersAndString \u003d \"abstemiouslyaeiouyabstemiouslyaeiouyabstemiously\";\n\n        final String[] splitOnStringExpectedResults \u003d {\"abstemiously\", \"abstemiouslyaeiouyabstemiously\"};\n        //String[] splitOnStringExpectedResults \u003d { \"abstemiously\", \"abstemiously\" } ;\n        final String[] splitOnStringResults \u003d StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString, \"aeiouy\", 2);\n        assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length);\n        for (int i \u003d 0; i \u003c splitOnStringExpectedResults.length; i++) {\n            assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]);\n        }\n    }",
    "begin_line": 659,
    "end_line": 683,
    "comment": "",
    "child_ranges": [
      "(line 660,col 9)-(line 660,col 81)",
      "(line 662,col 9)-(line 662,col 78)",
      "(line 664,col 9)-(line 664,col 57)",
      "(line 665,col 9)-(line 665,col 68)",
      "(line 668,col 9)-(line 668,col 109)",
      "(line 669,col 9)-(line 669,col 83)",
      "(line 670,col 9)-(line 672,col 9)",
      "(line 674,col 9)-(line 674,col 109)",
      "(line 676,col 9)-(line 676,col 105)",
      "(line 678,col 9)-(line 678,col 129)",
      "(line 679,col 9)-(line 679,col 87)",
      "(line 680,col 9)-(line 682,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByWholeSeparatorPreserveAllTokens_StringStringInt()",
    "snippet": "@Test\n    public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() {\n        assertArrayEquals(null, StringUtils.splitByWholeSeparatorPreserveAllTokens(null, \".\", -1));\n\n        assertEquals(0, StringUtils.splitByWholeSeparatorPreserveAllTokens(\"\", \".\", -1).length);\n\n        // test whitespace\n        String input \u003d \"ab   de fg\";\n        String[] expected \u003d new String[]{\"ab\", \"\", \"\", \"de\", \"fg\"};\n\n        String[] actual \u003d StringUtils.splitByWholeSeparatorPreserveAllTokens(input, null, -1);\n        assertEquals(expected.length, actual.length);\n        for (int i \u003d 0; i \u003c actual.length; i +\u003d 1) {\n            assertEquals(expected[i], actual[i]);\n        }\n\n        // test delimiter singlechar\n        input \u003d \"1::2:::3::::4\";\n        expected \u003d new String[]{\"1\", \"\", \"2\", \"\", \"\", \"3\", \"\", \"\", \"\", \"4\"};\n\n        actual \u003d StringUtils.splitByWholeSeparatorPreserveAllTokens(input, \":\", -1);\n        assertEquals(expected.length, actual.length);\n        for (int i \u003d 0; i \u003c actual.length; i +\u003d 1) {\n            assertEquals(expected[i], actual[i]);\n        }\n\n        // test delimiter multichar\n        input \u003d \"1::2:::3::::4\";\n        expected \u003d new String[]{\"1\", \"2\", \":3\", \"\", \"4\"};\n\n        actual \u003d StringUtils.splitByWholeSeparatorPreserveAllTokens(input, \"::\", -1);\n        assertEquals(expected.length, actual.length);\n        for (int i \u003d 0; i \u003c actual.length; i +\u003d 1) {\n            assertEquals(expected[i], actual[i]);\n        }\n\n        // test delimiter char with max\n        input \u003d \"1::2::3:4\";\n        expected \u003d new String[]{\"1\", \"\", \"2\", \":3:4\"};\n\n        actual \u003d StringUtils.splitByWholeSeparatorPreserveAllTokens(input, \":\", 4);\n        assertEquals(expected.length, actual.length);\n        for (int i \u003d 0; i \u003c actual.length; i +\u003d 1) {\n            assertEquals(expected[i], actual[i]);\n        }\n    }",
    "begin_line": 686,
    "end_line": 730,
    "comment": "",
    "child_ranges": [
      "(line 687,col 9)-(line 687,col 99)",
      "(line 689,col 9)-(line 689,col 96)",
      "(line 692,col 9)-(line 692,col 36)",
      "(line 693,col 9)-(line 693,col 67)",
      "(line 695,col 9)-(line 695,col 94)",
      "(line 696,col 9)-(line 696,col 53)",
      "(line 697,col 9)-(line 699,col 9)",
      "(line 702,col 9)-(line 702,col 32)",
      "(line 703,col 9)-(line 703,col 76)",
      "(line 705,col 9)-(line 705,col 84)",
      "(line 706,col 9)-(line 706,col 53)",
      "(line 707,col 9)-(line 709,col 9)",
      "(line 712,col 9)-(line 712,col 32)",
      "(line 713,col 9)-(line 713,col 57)",
      "(line 715,col 9)-(line 715,col 85)",
      "(line 716,col 9)-(line 716,col 53)",
      "(line 717,col 9)-(line 719,col 9)",
      "(line 722,col 9)-(line 722,col 28)",
      "(line 723,col 9)-(line 723,col 54)",
      "(line 725,col 9)-(line 725,col 83)",
      "(line 726,col 9)-(line 726,col 53)",
      "(line 727,col 9)-(line 729,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_String()",
    "snippet": "@Test\n    public void testSplitPreserveAllTokens_String() {\n        assertNull(StringUtils.splitPreserveAllTokens(null));\n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\").length);\n\n        String str \u003d \"abc def\";\n        String[] res \u003d StringUtils.splitPreserveAllTokens(str);\n        assertEquals(2, res.length);\n        assertEquals(\"abc\", res[0]);\n        assertEquals(\"def\", res[1]);\n\n        str \u003d \"abc  def\";\n        res \u003d StringUtils.splitPreserveAllTokens(str);\n        assertEquals(3, res.length);\n        assertEquals(\"abc\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"def\", res[2]);\n\n        str \u003d \" abc \";\n        res \u003d StringUtils.splitPreserveAllTokens(str);\n        assertEquals(3, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"abc\", res[1]);\n        assertEquals(\"\", res[2]);\n\n        str \u003d \"a b .c\";\n        res \u003d StringUtils.splitPreserveAllTokens(str);\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\".c\", res[2]);\n\n        str \u003d \" a b .c\";\n        res \u003d StringUtils.splitPreserveAllTokens(str);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\".c\", res[3]);\n\n        str \u003d \"a  b  .c\";\n        res \u003d StringUtils.splitPreserveAllTokens(str);\n        assertEquals(5, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\"\", res[3]);\n        assertEquals(\".c\", res[4]);\n\n        str \u003d \" a  \";\n        res \u003d StringUtils.splitPreserveAllTokens(str);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\"\", res[3]);\n\n        str \u003d \" a  b\";\n        res \u003d StringUtils.splitPreserveAllTokens(str);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\"b\", res[3]);\n\n        str \u003d \"a\" + WHITESPACE + \"b\" + NON_WHITESPACE + \"c\";\n        res \u003d StringUtils.splitPreserveAllTokens(str);\n        assertEquals(WHITESPACE.length() + 1, res.length);\n        assertEquals(\"a\", res[0]);\n        for (int i \u003d 1; i \u003c WHITESPACE.length() - 1; i++) {\n            assertEquals(\"\", res[i]);\n        }\n        assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[WHITESPACE.length()]);\n    }",
    "begin_line": 733,
    "end_line": 805,
    "comment": "",
    "child_ranges": [
      "(line 734,col 9)-(line 734,col 61)",
      "(line 735,col 9)-(line 735,col 71)",
      "(line 737,col 9)-(line 737,col 31)",
      "(line 738,col 9)-(line 738,col 63)",
      "(line 739,col 9)-(line 739,col 36)",
      "(line 740,col 9)-(line 740,col 36)",
      "(line 741,col 9)-(line 741,col 36)",
      "(line 743,col 9)-(line 743,col 25)",
      "(line 744,col 9)-(line 744,col 54)",
      "(line 745,col 9)-(line 745,col 36)",
      "(line 746,col 9)-(line 746,col 36)",
      "(line 747,col 9)-(line 747,col 33)",
      "(line 748,col 9)-(line 748,col 36)",
      "(line 750,col 9)-(line 750,col 22)",
      "(line 751,col 9)-(line 751,col 54)",
      "(line 752,col 9)-(line 752,col 36)",
      "(line 753,col 9)-(line 753,col 33)",
      "(line 754,col 9)-(line 754,col 36)",
      "(line 755,col 9)-(line 755,col 33)",
      "(line 757,col 9)-(line 757,col 23)",
      "(line 758,col 9)-(line 758,col 54)",
      "(line 759,col 9)-(line 759,col 36)",
      "(line 760,col 9)-(line 760,col 34)",
      "(line 761,col 9)-(line 761,col 34)",
      "(line 762,col 9)-(line 762,col 35)",
      "(line 764,col 9)-(line 764,col 24)",
      "(line 765,col 9)-(line 765,col 54)",
      "(line 766,col 9)-(line 766,col 36)",
      "(line 767,col 9)-(line 767,col 33)",
      "(line 768,col 9)-(line 768,col 34)",
      "(line 769,col 9)-(line 769,col 34)",
      "(line 770,col 9)-(line 770,col 35)",
      "(line 772,col 9)-(line 772,col 25)",
      "(line 773,col 9)-(line 773,col 54)",
      "(line 774,col 9)-(line 774,col 36)",
      "(line 775,col 9)-(line 775,col 34)",
      "(line 776,col 9)-(line 776,col 33)",
      "(line 777,col 9)-(line 777,col 34)",
      "(line 778,col 9)-(line 778,col 33)",
      "(line 779,col 9)-(line 779,col 35)",
      "(line 781,col 9)-(line 781,col 21)",
      "(line 782,col 9)-(line 782,col 54)",
      "(line 783,col 9)-(line 783,col 36)",
      "(line 784,col 9)-(line 784,col 33)",
      "(line 785,col 9)-(line 785,col 34)",
      "(line 786,col 9)-(line 786,col 33)",
      "(line 787,col 9)-(line 787,col 33)",
      "(line 789,col 9)-(line 789,col 22)",
      "(line 790,col 9)-(line 790,col 54)",
      "(line 791,col 9)-(line 791,col 36)",
      "(line 792,col 9)-(line 792,col 33)",
      "(line 793,col 9)-(line 793,col 34)",
      "(line 794,col 9)-(line 794,col 33)",
      "(line 795,col 9)-(line 795,col 34)",
      "(line 797,col 9)-(line 797,col 60)",
      "(line 798,col 9)-(line 798,col 54)",
      "(line 799,col 9)-(line 799,col 58)",
      "(line 800,col 9)-(line 800,col 34)",
      "(line 801,col 9)-(line 803,col 9)",
      "(line 804,col 9)-(line 804,col 75)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_StringChar()",
    "snippet": "@Test\n    public void testSplitPreserveAllTokens_StringChar() {\n        assertNull(StringUtils.splitPreserveAllTokens(null, \u0027.\u0027));\n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \u0027.\u0027).length);\n\n        String str \u003d \"a.b. c\";\n        String[] res \u003d StringUtils.splitPreserveAllTokens(str, \u0027.\u0027);\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\" c\", res[2]);\n\n        str \u003d \"a.b.. c\";\n        res \u003d StringUtils.splitPreserveAllTokens(str, \u0027.\u0027);\n        assertEquals(4, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\" c\", res[3]);\n\n        str \u003d \".a.\";\n        res \u003d StringUtils.splitPreserveAllTokens(str, \u0027.\u0027);\n        assertEquals(3, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n\n        str \u003d \".a..\";\n        res \u003d StringUtils.splitPreserveAllTokens(str, \u0027.\u0027);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\"\", res[3]);\n\n        str \u003d \"..a.\";\n        res \u003d StringUtils.splitPreserveAllTokens(str, \u0027.\u0027);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"a\", res[2]);\n        assertEquals(\"\", res[3]);\n\n        str \u003d \"..a\";\n        res \u003d StringUtils.splitPreserveAllTokens(str, \u0027.\u0027);\n        assertEquals(3, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"a\", res[2]);\n\n        str \u003d \"a b c\";\n        res \u003d StringUtils.splitPreserveAllTokens(str, \u0027 \u0027);\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n\n        str \u003d \"a  b  c\";\n        res \u003d StringUtils.splitPreserveAllTokens(str, \u0027 \u0027);\n        assertEquals(5, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\"\", res[3]);\n        assertEquals(\"c\", res[4]);\n\n        str \u003d \" a b c\";\n        res \u003d StringUtils.splitPreserveAllTokens(str, \u0027 \u0027);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\"c\", res[3]);\n\n        str \u003d \"  a b c\";\n        res \u003d StringUtils.splitPreserveAllTokens(str, \u0027 \u0027);\n        assertEquals(5, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"a\", res[2]);\n        assertEquals(\"b\", res[3]);\n        assertEquals(\"c\", res[4]);\n\n        str \u003d \"a b c \";\n        res \u003d StringUtils.splitPreserveAllTokens(str, \u0027 \u0027);\n        assertEquals(4, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n        assertEquals(\"\", res[3]);\n\n        str \u003d \"a b c  \";\n        res \u003d StringUtils.splitPreserveAllTokens(str, \u0027 \u0027);\n        assertEquals(5, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n        assertEquals(\"\", res[3]);\n        assertEquals(\"\", res[3]);\n\n        // Match example in javadoc\n        {\n            String[] results;\n            final String[] expectedResults \u003d {\"a\", \"\", \"b\", \"c\"};\n            results \u003d StringUtils.splitPreserveAllTokens(\"a..b.c\", \u0027.\u0027);\n            assertEquals(expectedResults.length, results.length);\n            for (int i \u003d 0; i \u003c expectedResults.length; i++) {\n                assertEquals(expectedResults[i], results[i]);\n            }\n        }\n    }",
    "begin_line": 808,
    "end_line": 917,
    "comment": "",
    "child_ranges": [
      "(line 809,col 9)-(line 809,col 66)",
      "(line 810,col 9)-(line 810,col 76)",
      "(line 812,col 9)-(line 812,col 30)",
      "(line 813,col 9)-(line 813,col 68)",
      "(line 814,col 9)-(line 814,col 36)",
      "(line 815,col 9)-(line 815,col 34)",
      "(line 816,col 9)-(line 816,col 34)",
      "(line 817,col 9)-(line 817,col 35)",
      "(line 819,col 9)-(line 819,col 24)",
      "(line 820,col 9)-(line 820,col 59)",
      "(line 821,col 9)-(line 821,col 36)",
      "(line 822,col 9)-(line 822,col 34)",
      "(line 823,col 9)-(line 823,col 34)",
      "(line 824,col 9)-(line 824,col 33)",
      "(line 825,col 9)-(line 825,col 35)",
      "(line 827,col 9)-(line 827,col 20)",
      "(line 828,col 9)-(line 828,col 59)",
      "(line 829,col 9)-(line 829,col 36)",
      "(line 830,col 9)-(line 830,col 33)",
      "(line 831,col 9)-(line 831,col 34)",
      "(line 832,col 9)-(line 832,col 33)",
      "(line 834,col 9)-(line 834,col 21)",
      "(line 835,col 9)-(line 835,col 59)",
      "(line 836,col 9)-(line 836,col 36)",
      "(line 837,col 9)-(line 837,col 33)",
      "(line 838,col 9)-(line 838,col 34)",
      "(line 839,col 9)-(line 839,col 33)",
      "(line 840,col 9)-(line 840,col 33)",
      "(line 842,col 9)-(line 842,col 21)",
      "(line 843,col 9)-(line 843,col 59)",
      "(line 844,col 9)-(line 844,col 36)",
      "(line 845,col 9)-(line 845,col 33)",
      "(line 846,col 9)-(line 846,col 33)",
      "(line 847,col 9)-(line 847,col 34)",
      "(line 848,col 9)-(line 848,col 33)",
      "(line 850,col 9)-(line 850,col 20)",
      "(line 851,col 9)-(line 851,col 59)",
      "(line 852,col 9)-(line 852,col 36)",
      "(line 853,col 9)-(line 853,col 33)",
      "(line 854,col 9)-(line 854,col 33)",
      "(line 855,col 9)-(line 855,col 34)",
      "(line 857,col 9)-(line 857,col 22)",
      "(line 858,col 9)-(line 858,col 59)",
      "(line 859,col 9)-(line 859,col 36)",
      "(line 860,col 9)-(line 860,col 34)",
      "(line 861,col 9)-(line 861,col 34)",
      "(line 862,col 9)-(line 862,col 34)",
      "(line 864,col 9)-(line 864,col 24)",
      "(line 865,col 9)-(line 865,col 59)",
      "(line 866,col 9)-(line 866,col 36)",
      "(line 867,col 9)-(line 867,col 34)",
      "(line 868,col 9)-(line 868,col 33)",
      "(line 869,col 9)-(line 869,col 34)",
      "(line 870,col 9)-(line 870,col 33)",
      "(line 871,col 9)-(line 871,col 34)",
      "(line 873,col 9)-(line 873,col 23)",
      "(line 874,col 9)-(line 874,col 59)",
      "(line 875,col 9)-(line 875,col 36)",
      "(line 876,col 9)-(line 876,col 33)",
      "(line 877,col 9)-(line 877,col 34)",
      "(line 878,col 9)-(line 878,col 34)",
      "(line 879,col 9)-(line 879,col 34)",
      "(line 881,col 9)-(line 881,col 24)",
      "(line 882,col 9)-(line 882,col 59)",
      "(line 883,col 9)-(line 883,col 36)",
      "(line 884,col 9)-(line 884,col 33)",
      "(line 885,col 9)-(line 885,col 33)",
      "(line 886,col 9)-(line 886,col 34)",
      "(line 887,col 9)-(line 887,col 34)",
      "(line 888,col 9)-(line 888,col 34)",
      "(line 890,col 9)-(line 890,col 23)",
      "(line 891,col 9)-(line 891,col 59)",
      "(line 892,col 9)-(line 892,col 36)",
      "(line 893,col 9)-(line 893,col 34)",
      "(line 894,col 9)-(line 894,col 34)",
      "(line 895,col 9)-(line 895,col 34)",
      "(line 896,col 9)-(line 896,col 33)",
      "(line 898,col 9)-(line 898,col 24)",
      "(line 899,col 9)-(line 899,col 59)",
      "(line 900,col 9)-(line 900,col 36)",
      "(line 901,col 9)-(line 901,col 34)",
      "(line 902,col 9)-(line 902,col 34)",
      "(line 903,col 9)-(line 903,col 34)",
      "(line 904,col 9)-(line 904,col 33)",
      "(line 905,col 9)-(line 905,col 33)",
      "(line 908,col 9)-(line 916,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_StringString_StringStringInt()",
    "snippet": "@Test\n    public void testSplitPreserveAllTokens_StringString_StringStringInt() {\n        assertNull(StringUtils.splitPreserveAllTokens(null, \".\"));\n        assertNull(StringUtils.splitPreserveAllTokens(null, \".\", 3));\n\n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \".\").length);\n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \".\", 3).length);\n\n        innerTestSplitPreserveAllTokens(\u0027.\u0027, \".\", \u0027 \u0027);\n        innerTestSplitPreserveAllTokens(\u0027.\u0027, \".\", \u0027,\u0027);\n        innerTestSplitPreserveAllTokens(\u0027.\u0027, \".,\", \u0027x\u0027);\n        for (int i \u003d 0; i \u003c WHITESPACE.length(); i++) {\n            for (int j \u003d 0; j \u003c NON_WHITESPACE.length(); j++) {\n                innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));\n                innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));\n            }\n        }\n\n        {\n            String[] results;\n            final String[] expectedResults \u003d {\"ab\", \"de fg\"};\n            results \u003d StringUtils.splitPreserveAllTokens(\"ab de fg\", null, 2);\n            assertEquals(expectedResults.length, results.length);\n            for (int i \u003d 0; i \u003c expectedResults.length; i++) {\n                assertEquals(expectedResults[i], results[i]);\n            }\n        }\n\n        {\n            String[] results;\n            final String[] expectedResults \u003d {\"ab\", \"  de fg\"};\n            results \u003d StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 2);\n            assertEquals(expectedResults.length, results.length);\n            for (int i \u003d 0; i \u003c expectedResults.length; i++) {\n                assertEquals(expectedResults[i], results[i]);\n            }\n        }\n\n        {\n            String[] results;\n            final String[] expectedResults \u003d {\"ab\", \"::de:fg\"};\n            results \u003d StringUtils.splitPreserveAllTokens(\"ab:::de:fg\", \":\", 2);\n            assertEquals(expectedResults.length, results.length);\n            for (int i \u003d 0; i \u003c expectedResults.length; i++) {\n                assertEquals(expectedResults[i], results[i]);\n            }\n        }\n\n        {\n            String[] results;\n            final String[] expectedResults \u003d {\"ab\", \"\", \" de fg\"};\n            results \u003d StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 3);\n            assertEquals(expectedResults.length, results.length);\n            for (int i \u003d 0; i \u003c expectedResults.length; i++) {\n                assertEquals(expectedResults[i], results[i]);\n            }\n        }\n\n        {\n            String[] results;\n            final String[] expectedResults \u003d {\"ab\", \"\", \"\", \"de fg\"};\n            results \u003d StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 4);\n            assertEquals(expectedResults.length, results.length);\n            for (int i \u003d 0; i \u003c expectedResults.length; i++) {\n                assertEquals(expectedResults[i], results[i]);\n            }\n        }\n\n        {\n            final String[] expectedResults \u003d {\"ab\", \"cd:ef\"};\n            String[] results;\n            results \u003d StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\", 2);\n            assertEquals(expectedResults.length, results.length);\n            for (int i \u003d 0; i \u003c expectedResults.length; i++) {\n                assertEquals(expectedResults[i], results[i]);\n            }\n        }\n\n        {\n            String[] results;\n            final String[] expectedResults \u003d {\"ab\", \":cd:ef\"};\n            results \u003d StringUtils.splitPreserveAllTokens(\"ab::cd:ef\", \":\", 2);\n            assertEquals(expectedResults.length, results.length);\n            for (int i \u003d 0; i \u003c expectedResults.length; i++) {\n                assertEquals(expectedResults[i], results[i]);\n            }\n        }\n\n        {\n            String[] results;\n            final String[] expectedResults \u003d {\"ab\", \"\", \":cd:ef\"};\n            results \u003d StringUtils.splitPreserveAllTokens(\"ab:::cd:ef\", \":\", 3);\n            assertEquals(expectedResults.length, results.length);\n            for (int i \u003d 0; i \u003c expectedResults.length; i++) {\n                assertEquals(expectedResults[i], results[i]);\n            }\n        }\n\n        {\n            String[] results;\n            final String[] expectedResults \u003d {\"ab\", \"\", \"\", \"cd:ef\"};\n            results \u003d StringUtils.splitPreserveAllTokens(\"ab:::cd:ef\", \":\", 4);\n            assertEquals(expectedResults.length, results.length);\n            for (int i \u003d 0; i \u003c expectedResults.length; i++) {\n                assertEquals(expectedResults[i], results[i]);\n            }\n        }\n\n        {\n            String[] results;\n            final String[] expectedResults \u003d {\"\", \"ab\", \"\", \"\", \"cd:ef\"};\n            results \u003d StringUtils.splitPreserveAllTokens(\":ab:::cd:ef\", \":\", 5);\n            assertEquals(expectedResults.length, results.length);\n            for (int i \u003d 0; i \u003c expectedResults.length; i++) {\n                assertEquals(expectedResults[i], results[i]);\n            }\n        }\n\n        {\n            String[] results;\n            final String[] expectedResults \u003d {\"\", \"\", \"ab\", \"\", \"\", \"cd:ef\"};\n            results \u003d StringUtils.splitPreserveAllTokens(\"::ab:::cd:ef\", \":\", 6);\n            assertEquals(expectedResults.length, results.length);\n            for (int i \u003d 0; i \u003c expectedResults.length; i++) {\n                assertEquals(expectedResults[i], results[i]);\n            }\n        }\n\n    }",
    "begin_line": 920,
    "end_line": 1047,
    "comment": "",
    "child_ranges": [
      "(line 921,col 9)-(line 921,col 66)",
      "(line 922,col 9)-(line 922,col 69)",
      "(line 924,col 9)-(line 924,col 76)",
      "(line 925,col 9)-(line 925,col 79)",
      "(line 927,col 9)-(line 927,col 55)",
      "(line 928,col 9)-(line 928,col 55)",
      "(line 929,col 9)-(line 929,col 56)",
      "(line 930,col 9)-(line 935,col 9)",
      "(line 937,col 9)-(line 945,col 9)",
      "(line 947,col 9)-(line 955,col 9)",
      "(line 957,col 9)-(line 965,col 9)",
      "(line 967,col 9)-(line 975,col 9)",
      "(line 977,col 9)-(line 985,col 9)",
      "(line 987,col 9)-(line 995,col 9)",
      "(line 997,col 9)-(line 1005,col 9)",
      "(line 1007,col 9)-(line 1015,col 9)",
      "(line 1017,col 9)-(line 1025,col 9)",
      "(line 1027,col 9)-(line 1035,col 9)",
      "(line 1037,col 9)-(line 1045,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.innerTestSplitPreserveAllTokens(char, java.lang.String, char)",
    "snippet": "private void innerTestSplitPreserveAllTokens(final char separator, final String sepStr, final char noMatch) {\n        final String msg \u003d \"Failed on separator hex(\" + Integer.toHexString(separator) +\n                \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n\n        final String str \u003d \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n        String[] res;\n        // (str, sepStr)\n        res \u003d StringUtils.splitPreserveAllTokens(str, sepStr);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n\n        final String str2 \u003d separator + \"a\" + separator;\n        res \u003d StringUtils.splitPreserveAllTokens(str2, sepStr);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"\", res[0]);\n        assertEquals(msg, \"a\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n\n        res \u003d StringUtils.splitPreserveAllTokens(str, sepStr, -1);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n\n        res \u003d StringUtils.splitPreserveAllTokens(str, sepStr, 0);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n\n        res \u003d StringUtils.splitPreserveAllTokens(str, sepStr, 1);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, str, res[0]);\n\n        res \u003d StringUtils.splitPreserveAllTokens(str, sepStr, 2);\n        assertEquals(msg, 2, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, str.substring(2), res[1]);\n    }",
    "begin_line": 1049,
    "end_line": 1092,
    "comment": "",
    "child_ranges": [
      "(line 1050,col 9)-(line 1051,col 95)",
      "(line 1053,col 9)-(line 1053,col 89)",
      "(line 1054,col 9)-(line 1054,col 21)",
      "(line 1056,col 9)-(line 1056,col 62)",
      "(line 1057,col 9)-(line 1057,col 41)",
      "(line 1058,col 9)-(line 1058,col 39)",
      "(line 1059,col 9)-(line 1059,col 39)",
      "(line 1060,col 9)-(line 1060,col 38)",
      "(line 1061,col 9)-(line 1061,col 49)",
      "(line 1063,col 9)-(line 1063,col 56)",
      "(line 1064,col 9)-(line 1064,col 63)",
      "(line 1065,col 9)-(line 1065,col 41)",
      "(line 1066,col 9)-(line 1066,col 38)",
      "(line 1067,col 9)-(line 1067,col 39)",
      "(line 1068,col 9)-(line 1068,col 38)",
      "(line 1070,col 9)-(line 1070,col 66)",
      "(line 1071,col 9)-(line 1071,col 41)",
      "(line 1072,col 9)-(line 1072,col 39)",
      "(line 1073,col 9)-(line 1073,col 39)",
      "(line 1074,col 9)-(line 1074,col 38)",
      "(line 1075,col 9)-(line 1075,col 49)",
      "(line 1077,col 9)-(line 1077,col 65)",
      "(line 1078,col 9)-(line 1078,col 41)",
      "(line 1079,col 9)-(line 1079,col 39)",
      "(line 1080,col 9)-(line 1080,col 39)",
      "(line 1081,col 9)-(line 1081,col 38)",
      "(line 1082,col 9)-(line 1082,col 49)",
      "(line 1084,col 9)-(line 1084,col 65)",
      "(line 1085,col 9)-(line 1085,col 41)",
      "(line 1086,col 9)-(line 1086,col 39)",
      "(line 1088,col 9)-(line 1088,col 65)",
      "(line 1089,col 9)-(line 1089,col 41)",
      "(line 1090,col 9)-(line 1090,col 39)",
      "(line 1091,col 9)-(line 1091,col 52)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterType()",
    "snippet": "@Test\n    public void testSplitByCharacterType() {\n        assertNull(StringUtils.splitByCharacterType(null));\n        assertEquals(0, StringUtils.splitByCharacterType(\"\").length);\n\n        assertTrue(ArrayUtils.isEquals(new String[]{\"ab\", \" \", \"de\", \" \",\n                \"fg\"}, StringUtils.splitByCharacterType(\"ab de fg\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[]{\"ab\", \"   \", \"de\", \" \",\n                \"fg\"}, StringUtils.splitByCharacterType(\"ab   de fg\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[]{\"ab\", \":\", \"cd\", \":\",\n                \"ef\"}, StringUtils.splitByCharacterType(\"ab:cd:ef\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[]{\"number\", \"5\"},\n                StringUtils.splitByCharacterType(\"number5\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[]{\"foo\", \"B\", \"ar\"},\n                StringUtils.splitByCharacterType(\"fooBar\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[]{\"foo\", \"200\", \"B\", \"ar\"},\n                StringUtils.splitByCharacterType(\"foo200Bar\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[]{\"ASFR\", \"ules\"},\n                StringUtils.splitByCharacterType(\"ASFRules\")));\n    }",
    "begin_line": 1095,
    "end_line": 1119,
    "comment": "",
    "child_ranges": [
      "(line 1096,col 9)-(line 1096,col 59)",
      "(line 1097,col 9)-(line 1097,col 69)",
      "(line 1099,col 9)-(line 1100,col 70)",
      "(line 1102,col 9)-(line 1103,col 72)",
      "(line 1105,col 9)-(line 1106,col 70)",
      "(line 1108,col 9)-(line 1109,col 62)",
      "(line 1111,col 9)-(line 1112,col 61)",
      "(line 1114,col 9)-(line 1115,col 64)",
      "(line 1117,col 9)-(line 1118,col 63)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterTypeCamelCase()",
    "snippet": "@Test\n    public void testSplitByCharacterTypeCamelCase() {\n        assertNull(StringUtils.splitByCharacterTypeCamelCase(null));\n        assertEquals(0, StringUtils.splitByCharacterTypeCamelCase(\"\").length);\n\n        assertTrue(ArrayUtils.isEquals(new String[]{\"ab\", \" \", \"de\", \" \",\n                \"fg\"}, StringUtils.splitByCharacterTypeCamelCase(\"ab de fg\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[]{\"ab\", \"   \", \"de\", \" \",\n                \"fg\"}, StringUtils.splitByCharacterTypeCamelCase(\"ab   de fg\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[]{\"ab\", \":\", \"cd\", \":\",\n                \"ef\"}, StringUtils.splitByCharacterTypeCamelCase(\"ab:cd:ef\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[]{\"number\", \"5\"},\n                StringUtils.splitByCharacterTypeCamelCase(\"number5\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[]{\"foo\", \"Bar\"},\n                StringUtils.splitByCharacterTypeCamelCase(\"fooBar\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[]{\"foo\", \"200\", \"Bar\"},\n                StringUtils.splitByCharacterTypeCamelCase(\"foo200Bar\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[]{\"ASF\", \"Rules\"},\n                StringUtils.splitByCharacterTypeCamelCase(\"ASFRules\")));\n    }",
    "begin_line": 1122,
    "end_line": 1146,
    "comment": "",
    "child_ranges": [
      "(line 1123,col 9)-(line 1123,col 68)",
      "(line 1124,col 9)-(line 1124,col 78)",
      "(line 1126,col 9)-(line 1127,col 79)",
      "(line 1129,col 9)-(line 1130,col 81)",
      "(line 1132,col 9)-(line 1133,col 79)",
      "(line 1135,col 9)-(line 1136,col 71)",
      "(line 1138,col 9)-(line 1139,col 70)",
      "(line 1141,col 9)-(line 1142,col 73)",
      "(line 1144,col 9)-(line 1145,col 72)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testDeleteWhitespace_String()",
    "snippet": "@Test\n    public void testDeleteWhitespace_String() {\n        assertNull(StringUtils.deleteWhitespace(null));\n        assertEquals(\"\", StringUtils.deleteWhitespace(\"\"));\n        assertEquals(\"\", StringUtils.deleteWhitespace(\"  \\u000C  \\t\\t\\u001F\\n\\n \\u000B  \"));\n        assertEquals(\"\", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE));\n        assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE));\n        // Note: u-2007 and u-000A both cause problems in the source code\n        // it should ignore 2007 but delete 000A\n        assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"  \\u00A0  \\t\\t\\n\\n \\u202F  \"));\n        assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"\\u00A0\\u202F\"));\n        assertEquals(\"test\", StringUtils.deleteWhitespace(\"\\u000Bt  \\t\\n\\u0009e\\rs\\n\\n   \\tt\"));\n    }",
    "begin_line": 1149,
    "end_line": 1160,
    "comment": "",
    "child_ranges": [
      "(line 1150,col 9)-(line 1150,col 55)",
      "(line 1151,col 9)-(line 1151,col 59)",
      "(line 1152,col 9)-(line 1152,col 92)",
      "(line 1153,col 9)-(line 1153,col 83)",
      "(line 1154,col 9)-(line 1154,col 115)",
      "(line 1157,col 9)-(line 1157,col 98)",
      "(line 1158,col 9)-(line 1158,col 83)",
      "(line 1159,col 9)-(line 1159,col 96)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testLang623()",
    "snippet": "@Test\n    public void testLang623() {\n        assertEquals(\"t\", StringUtils.replaceChars(\"\\u00DE\", \u0027\\u00DE\u0027, \u0027t\u0027));\n        assertEquals(\"t\", StringUtils.replaceChars(\"\\u00FE\", \u0027\\u00FE\u0027, \u0027t\u0027));\n    }",
    "begin_line": 1163,
    "end_line": 1166,
    "comment": "",
    "child_ranges": [
      "(line 1164,col 9)-(line 1164,col 77)",
      "(line 1165,col 9)-(line 1165,col 77)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringString()",
    "snippet": "@Test\n    public void testReplace_StringStringString() {\n        assertNull(StringUtils.replace(null, null, null));\n        assertNull(StringUtils.replace(null, null, \"any\"));\n        assertNull(StringUtils.replace(null, \"any\", null));\n        assertNull(StringUtils.replace(null, \"any\", \"any\"));\n\n        assertEquals(\"\", StringUtils.replace(\"\", null, null));\n        assertEquals(\"\", StringUtils.replace(\"\", null, \"any\"));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", null));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", \"any\"));\n\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", \"\", \"any\"));\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", null, \"any\"));\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", \"F\", null));\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", null, null));\n\n        assertEquals(\"\", StringUtils.replace(\"foofoofoo\", \"foo\", \"\"));\n        assertEquals(\"barbarbar\", StringUtils.replace(\"foofoofoo\", \"foo\", \"bar\"));\n        assertEquals(\"farfarfar\", StringUtils.replace(\"foofoofoo\", \"oo\", \"ar\"));\n    }",
    "begin_line": 1169,
    "end_line": 1188,
    "comment": "",
    "child_ranges": [
      "(line 1170,col 9)-(line 1170,col 58)",
      "(line 1171,col 9)-(line 1171,col 59)",
      "(line 1172,col 9)-(line 1172,col 59)",
      "(line 1173,col 9)-(line 1173,col 60)",
      "(line 1175,col 9)-(line 1175,col 62)",
      "(line 1176,col 9)-(line 1176,col 63)",
      "(line 1177,col 9)-(line 1177,col 63)",
      "(line 1178,col 9)-(line 1178,col 64)",
      "(line 1180,col 9)-(line 1180,col 67)",
      "(line 1181,col 9)-(line 1181,col 69)",
      "(line 1182,col 9)-(line 1182,col 67)",
      "(line 1183,col 9)-(line 1183,col 68)",
      "(line 1185,col 9)-(line 1185,col 70)",
      "(line 1186,col 9)-(line 1186,col 82)",
      "(line 1187,col 9)-(line 1187,col 80)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testReplacePattern()",
    "snippet": "@Test\n    public void testReplacePattern() {\n        assertNull(StringUtils.replacePattern(null, \"\", \"\"));\n        assertEquals(\"any\", StringUtils.replacePattern(\"any\", null, \"\"));\n        assertEquals(\"any\", StringUtils.replacePattern(\"any\", \"\", null));\n\n        assertEquals(\"zzz\", StringUtils.replacePattern(\"\", \"\", \"zzz\"));\n        assertEquals(\"zzz\", StringUtils.replacePattern(\"\", \".*\", \"zzz\"));\n        assertEquals(\"\", StringUtils.replacePattern(\"\", \".+\", \"zzz\"));\n\n        assertEquals(\"z\", StringUtils.replacePattern(\"\u003c__\u003e\\n\u003c__\u003e\", \"\u003c.*\u003e\", \"z\"));\n        assertEquals(\"z\", StringUtils.replacePattern(\"\u003c__\u003e\\\\n\u003c__\u003e\", \"\u003c.*\u003e\", \"z\"));\n        assertEquals(\"X\", StringUtils.replacePattern(\"\u003cA\u003e\\nxy\\n\u003c/A\u003e\", \"\u003cA\u003e.*\u003c/A\u003e\", \"X\"));\n\n        assertEquals(\"ABC___123\", StringUtils.replacePattern(\"ABCabc123\", \"[a-z]\", \"_\"));\n        assertEquals(\"ABC_123\", StringUtils.replacePattern(\"ABCabc123\", \"[^A-Z0-9]+\", \"_\"));\n        assertEquals(\"ABC123\", StringUtils.replacePattern(\"ABCabc123\", \"[^A-Z0-9]+\", \"\"));\n        assertEquals(\"Lorem_ipsum_dolor_sit\",\n                     StringUtils.replacePattern(\"Lorem ipsum  dolor   sit\", \"( +)([a-z]+)\", \"_$2\"));\n    }",
    "begin_line": 1191,
    "end_line": 1209,
    "comment": "",
    "child_ranges": [
      "(line 1192,col 9)-(line 1192,col 61)",
      "(line 1193,col 9)-(line 1193,col 73)",
      "(line 1194,col 9)-(line 1194,col 73)",
      "(line 1196,col 9)-(line 1196,col 71)",
      "(line 1197,col 9)-(line 1197,col 73)",
      "(line 1198,col 9)-(line 1198,col 70)",
      "(line 1200,col 9)-(line 1200,col 81)",
      "(line 1201,col 9)-(line 1201,col 82)",
      "(line 1202,col 9)-(line 1202,col 89)",
      "(line 1204,col 9)-(line 1204,col 89)",
      "(line 1205,col 9)-(line 1205,col 92)",
      "(line 1206,col 9)-(line 1206,col 90)",
      "(line 1207,col 9)-(line 1208,col 100)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testRemovePattern()",
    "snippet": "@Test\n    public void testRemovePattern() {\n        assertNull(StringUtils.removePattern(null, \"\"));\n        assertEquals(\"any\", StringUtils.removePattern(\"any\", null));\n\n        assertEquals(\"\", StringUtils.removePattern(\"\", \"\"));\n        assertEquals(\"\", StringUtils.removePattern(\"\", \".*\"));\n        assertEquals(\"\", StringUtils.removePattern(\"\", \".+\"));\n\n        assertEquals(\"AB\", StringUtils.removePattern(\"A\u003c__\u003e\\n\u003c__\u003eB\", \"\u003c.*\u003e\"));\n        assertEquals(\"AB\", StringUtils.removePattern(\"A\u003c__\u003e\\\\n\u003c__\u003eB\", \"\u003c.*\u003e\"));\n        assertEquals(\"\", StringUtils.removePattern(\"\u003cA\u003ex\\\\ny\u003c/A\u003e\", \"\u003cA\u003e.*\u003c/A\u003e\"));\n        assertEquals(\"\", StringUtils.removePattern(\"\u003cA\u003e\\nxy\\n\u003c/A\u003e\", \"\u003cA\u003e.*\u003c/A\u003e\"));\n\n        assertEquals(\"ABC123\", StringUtils.removePattern(\"ABCabc123\", \"[a-z]\"));\n    }",
    "begin_line": 1212,
    "end_line": 1226,
    "comment": "",
    "child_ranges": [
      "(line 1213,col 9)-(line 1213,col 56)",
      "(line 1214,col 9)-(line 1214,col 68)",
      "(line 1216,col 9)-(line 1216,col 60)",
      "(line 1217,col 9)-(line 1217,col 62)",
      "(line 1218,col 9)-(line 1218,col 62)",
      "(line 1220,col 9)-(line 1220,col 78)",
      "(line 1221,col 9)-(line 1221,col 79)",
      "(line 1222,col 9)-(line 1222,col 81)",
      "(line 1223,col 9)-(line 1223,col 82)",
      "(line 1225,col 9)-(line 1225,col 80)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testReplaceAll_StringStringString()",
    "snippet": "@Test\n    public void testReplaceAll_StringStringString() {\n        assertNull(StringUtils.replaceAll(null, \"\", \"\"));\n\n        assertEquals(\"any\", StringUtils.replaceAll(\"any\", null, \"\"));\n        assertEquals(\"any\", StringUtils.replaceAll(\"any\", \"\", null));\n\n        assertEquals(\"zzz\", StringUtils.replaceAll(\"\", \"\", \"zzz\"));\n        assertEquals(\"zzz\", StringUtils.replaceAll(\"\", \".*\", \"zzz\"));\n        assertEquals(\"\", StringUtils.replaceAll(\"\", \".+\", \"zzz\"));\n\n        assertEquals(\"z\\nz\", StringUtils.replaceAll(\"\u003c__\u003e\\n\u003c__\u003e\", \"\u003c.*\u003e\", \"z\"));\n        assertEquals(\"z\", StringUtils.replaceAll(\"\u003c__\u003e\\n\u003c__\u003e\", \"(?s)\u003c.*\u003e\", \"z\"));\n\n        assertEquals(\"ABC___123\", StringUtils.replaceAll(\"ABCabc123\", \"[a-z]\", \"_\"));\n        assertEquals(\"ABC_123\", StringUtils.replaceAll(\"ABCabc123\", \"[^A-Z0-9]+\", \"_\"));\n        assertEquals(\"ABC123\", StringUtils.replaceAll(\"ABCabc123\", \"[^A-Z0-9]+\", \"\"));\n        assertEquals(\"Lorem_ipsum_dolor_sit\",\n                     StringUtils.replaceAll(\"Lorem ipsum  dolor   sit\", \"( +)([a-z]+)\", \"_$2\"));\n\n        try {\n            StringUtils.replaceAll(\"any\", \"{badRegexSyntax}\", \"\");\n            fail(\"StringUtils.replaceAll expecting PatternSyntaxException\");\n        } catch (final PatternSyntaxException ex) {\n            // empty\n        }\n    }",
    "begin_line": 1229,
    "end_line": 1254,
    "comment": "",
    "child_ranges": [
      "(line 1230,col 9)-(line 1230,col 57)",
      "(line 1232,col 9)-(line 1232,col 69)",
      "(line 1233,col 9)-(line 1233,col 69)",
      "(line 1235,col 9)-(line 1235,col 67)",
      "(line 1236,col 9)-(line 1236,col 69)",
      "(line 1237,col 9)-(line 1237,col 66)",
      "(line 1239,col 9)-(line 1239,col 80)",
      "(line 1240,col 9)-(line 1240,col 81)",
      "(line 1242,col 9)-(line 1242,col 85)",
      "(line 1243,col 9)-(line 1243,col 88)",
      "(line 1244,col 9)-(line 1244,col 86)",
      "(line 1245,col 9)-(line 1246,col 96)",
      "(line 1248,col 9)-(line 1253,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testReplaceFirst_StringStringString()",
    "snippet": "@Test\n    public void testReplaceFirst_StringStringString() {\n        assertNull(StringUtils.replaceFirst(null, \"\", \"\"));\n\n        assertEquals(\"any\", StringUtils.replaceFirst(\"any\", null, \"\"));\n        assertEquals(\"any\", StringUtils.replaceFirst(\"any\", \"\", null));\n\n        assertEquals(\"zzz\", StringUtils.replaceFirst(\"\", \"\", \"zzz\"));\n        assertEquals(\"zzz\", StringUtils.replaceFirst(\"\", \".*\", \"zzz\"));\n        assertEquals(\"\", StringUtils.replaceFirst(\"\", \".+\", \"zzz\"));\n\n        assertEquals(\"z\\n\u003c__\u003e\", StringUtils.replaceFirst(\"\u003c__\u003e\\n\u003c__\u003e\", \"\u003c.*\u003e\", \"z\"));\n        assertEquals(\"z\", StringUtils.replaceFirst(\"\u003c__\u003e\\n\u003c__\u003e\", \"(?s)\u003c.*\u003e\", \"z\"));\n\n        assertEquals(\"ABC_bc123\", StringUtils.replaceFirst(\"ABCabc123\", \"[a-z]\", \"_\"));\n        assertEquals(\"ABC_123abc\", StringUtils.replaceFirst(\"ABCabc123abc\", \"[^A-Z0-9]+\", \"_\"));\n        assertEquals(\"ABC123abc\", StringUtils.replaceFirst(\"ABCabc123abc\", \"[^A-Z0-9]+\", \"\"));\n        assertEquals(\"Lorem_ipsum  dolor   sit\",\n                     StringUtils.replaceFirst(\"Lorem ipsum  dolor   sit\", \"( +)([a-z]+)\", \"_$2\"));\n\n        try {\n            StringUtils.replaceFirst(\"any\", \"{badRegexSyntax}\", \"\");\n            fail(\"StringUtils.replaceFirst expecting PatternSyntaxException\");\n        } catch (final PatternSyntaxException ex) {\n            // empty\n        }\n    }",
    "begin_line": 1257,
    "end_line": 1282,
    "comment": "",
    "child_ranges": [
      "(line 1258,col 9)-(line 1258,col 59)",
      "(line 1260,col 9)-(line 1260,col 71)",
      "(line 1261,col 9)-(line 1261,col 71)",
      "(line 1263,col 9)-(line 1263,col 69)",
      "(line 1264,col 9)-(line 1264,col 71)",
      "(line 1265,col 9)-(line 1265,col 68)",
      "(line 1267,col 9)-(line 1267,col 85)",
      "(line 1268,col 9)-(line 1268,col 83)",
      "(line 1270,col 9)-(line 1270,col 87)",
      "(line 1271,col 9)-(line 1271,col 96)",
      "(line 1272,col 9)-(line 1272,col 94)",
      "(line 1273,col 9)-(line 1274,col 98)",
      "(line 1276,col 9)-(line 1281,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringStringInt()",
    "snippet": "@Test\n    public void testReplace_StringStringStringInt() {\n        assertNull(StringUtils.replace(null, null, null, 2));\n        assertNull(StringUtils.replace(null, null, \"any\", 2));\n        assertNull(StringUtils.replace(null, \"any\", null, 2));\n        assertNull(StringUtils.replace(null, \"any\", \"any\", 2));\n\n        assertEquals(\"\", StringUtils.replace(\"\", null, null, 2));\n        assertEquals(\"\", StringUtils.replace(\"\", null, \"any\", 2));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", null, 2));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", \"any\", 2));\n\n        final String str \u003d new String(new char[]{\u0027o\u0027, \u0027o\u0027, \u0027f\u0027, \u0027o\u0027, \u0027o\u0027});\n        assertSame(str, StringUtils.replace(str, \"x\", \"\", -1));\n\n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", -1));\n        assertEquals(\"oofoo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 0));\n        assertEquals(\"ofoo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 1));\n        assertEquals(\"foo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 2));\n        assertEquals(\"fo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 3));\n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", 4));\n\n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", -5));\n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", 1000));\n    }",
    "begin_line": 1285,
    "end_line": 1308,
    "comment": "",
    "child_ranges": [
      "(line 1286,col 9)-(line 1286,col 61)",
      "(line 1287,col 9)-(line 1287,col 62)",
      "(line 1288,col 9)-(line 1288,col 62)",
      "(line 1289,col 9)-(line 1289,col 63)",
      "(line 1291,col 9)-(line 1291,col 65)",
      "(line 1292,col 9)-(line 1292,col 66)",
      "(line 1293,col 9)-(line 1293,col 66)",
      "(line 1294,col 9)-(line 1294,col 67)",
      "(line 1296,col 9)-(line 1296,col 75)",
      "(line 1297,col 9)-(line 1297,col 63)",
      "(line 1299,col 9)-(line 1299,col 69)",
      "(line 1300,col 9)-(line 1300,col 72)",
      "(line 1301,col 9)-(line 1301,col 71)",
      "(line 1302,col 9)-(line 1302,col 70)",
      "(line 1303,col 9)-(line 1303,col 69)",
      "(line 1304,col 9)-(line 1304,col 68)",
      "(line 1306,col 9)-(line 1306,col 69)",
      "(line 1307,col 9)-(line 1307,col 71)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testReplaceOnce_StringStringString()",
    "snippet": "@Test\n    public void testReplaceOnce_StringStringString() {\n        assertNull(StringUtils.replaceOnce(null, null, null));\n        assertNull(StringUtils.replaceOnce(null, null, \"any\"));\n        assertNull(StringUtils.replaceOnce(null, \"any\", null));\n        assertNull(StringUtils.replaceOnce(null, \"any\", \"any\"));\n\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", null, null));\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", null, \"any\"));\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", \"any\", null));\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", \"any\", \"any\"));\n\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", \"\", \"any\"));\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", null, \"any\"));\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", \"F\", null));\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", null, null));\n\n        assertEquals(\"foofoo\", StringUtils.replaceOnce(\"foofoofoo\", \"foo\", \"\"));\n    }",
    "begin_line": 1311,
    "end_line": 1328,
    "comment": "",
    "child_ranges": [
      "(line 1312,col 9)-(line 1312,col 62)",
      "(line 1313,col 9)-(line 1313,col 63)",
      "(line 1314,col 9)-(line 1314,col 63)",
      "(line 1315,col 9)-(line 1315,col 64)",
      "(line 1317,col 9)-(line 1317,col 66)",
      "(line 1318,col 9)-(line 1318,col 67)",
      "(line 1319,col 9)-(line 1319,col 67)",
      "(line 1320,col 9)-(line 1320,col 68)",
      "(line 1322,col 9)-(line 1322,col 71)",
      "(line 1323,col 9)-(line 1323,col 73)",
      "(line 1324,col 9)-(line 1324,col 71)",
      "(line 1325,col 9)-(line 1325,col 72)",
      "(line 1327,col 9)-(line 1327,col 80)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArray()",
    "snippet": "@Test\n    public void testReplace_StringStringArrayStringArray() {\n        //JAVADOC TESTS START\n        assertNull(StringUtils.replaceEach(null, new String[]{\"a\"}, new String[]{\"b\"}));\n        assertEquals(StringUtils.replaceEach(\"\", new String[]{\"a\"}, new String[]{\"b\"}), \"\");\n        assertEquals(StringUtils.replaceEach(\"aba\", null, null), \"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[0], null), \"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", null, new String[0]), \"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null), \"aba\");\n\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"}), \"b\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"}), \"aba\");\n        assertEquals(StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}), \"wcte\");\n        assertEquals(StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}), \"dcte\");\n        //JAVADOC TESTS END\n\n        assertEquals(\"bcc\", StringUtils.replaceEach(\"abc\", new String[]{\"a\", \"b\"}, new String[]{\"b\", \"c\"}));\n        assertEquals(\"q651.506bera\", StringUtils.replaceEach(\"d216.102oren\",\n                new String[]{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\",\n                        \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\",\n                        \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\",\n                        \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"},\n                new String[]{\"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\",\n                        \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"N\", \"O\", \"P\", \"Q\",\n                        \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\",\n                        \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"5\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\", \"3\", \"4\"}));\n\n        // Test null safety inside arrays - LANG-552\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{null}), \"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\", \"b\"}, new String[]{\"c\", null}), \"cbc\");\n    }",
    "begin_line": 1334,
    "end_line": 1363,
    "comment": "/** \n * Test method for \u0027StringUtils.replaceEach(String, String[], String[])\u0027\n */\n",
    "child_ranges": [
      "(line 1336,col 9)-(line 1336,col 88)",
      "(line 1337,col 9)-(line 1337,col 92)",
      "(line 1338,col 9)-(line 1338,col 72)",
      "(line 1339,col 9)-(line 1339,col 81)",
      "(line 1340,col 9)-(line 1340,col 81)",
      "(line 1341,col 9)-(line 1341,col 85)",
      "(line 1343,col 9)-(line 1343,col 95)",
      "(line 1344,col 9)-(line 1344,col 99)",
      "(line 1345,col 9)-(line 1345,col 112)",
      "(line 1346,col 9)-(line 1346,col 112)",
      "(line 1349,col 9)-(line 1349,col 108)",
      "(line 1350,col 9)-(line 1358,col 101)",
      "(line 1361,col 9)-(line 1361,col 99)",
      "(line 1362,col 9)-(line 1362,col 109)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArrayBoolean()",
    "snippet": "@Test\n    public void testReplace_StringStringArrayStringArrayBoolean() {\n        //JAVADOC TESTS START\n        assertNull(StringUtils.replaceEachRepeatedly(null, new String[]{\"a\"}, new String[]{\"b\"}));\n        assertEquals(StringUtils.replaceEachRepeatedly(\"\", new String[]{\"a\"}, new String[]{\"b\"}), \"\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", null, null), \"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[0], null), \"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", null, new String[0]), \"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[0], null), \"aba\");\n\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[]{\"a\"}, new String[]{\"\"}), \"b\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[]{null}, new String[]{\"a\"}), \"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}), \"wcte\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}), \"tcte\");\n\n        try {\n            StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"ab\"});\n            fail(\"Should be a circular reference\");\n        } catch (final IllegalStateException e) {\n        }\n\n        //JAVADOC TESTS END\n    }",
    "begin_line": 1369,
    "end_line": 1390,
    "comment": "/** \n * Test method for \u0027StringUtils.replaceEachRepeatedly(String, String[], String[])\u0027\n */\n",
    "child_ranges": [
      "(line 1371,col 9)-(line 1371,col 98)",
      "(line 1372,col 9)-(line 1372,col 102)",
      "(line 1373,col 9)-(line 1373,col 82)",
      "(line 1374,col 9)-(line 1374,col 91)",
      "(line 1375,col 9)-(line 1375,col 91)",
      "(line 1376,col 9)-(line 1376,col 91)",
      "(line 1378,col 9)-(line 1378,col 105)",
      "(line 1379,col 9)-(line 1379,col 109)",
      "(line 1380,col 9)-(line 1380,col 122)",
      "(line 1381,col 9)-(line 1381,col 122)",
      "(line 1383,col 9)-(line 1387,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testReplaceChars_StringCharChar()",
    "snippet": "@Test\n    public void testReplaceChars_StringCharChar() {\n        assertNull(StringUtils.replaceChars(null, \u0027b\u0027, \u0027z\u0027));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", \u0027b\u0027, \u0027z\u0027));\n        assertEquals(\"azcza\", StringUtils.replaceChars(\"abcba\", \u0027b\u0027, \u0027z\u0027));\n        assertEquals(\"abcba\", StringUtils.replaceChars(\"abcba\", \u0027x\u0027, \u0027z\u0027));\n    }",
    "begin_line": 1393,
    "end_line": 1398,
    "comment": "",
    "child_ranges": [
      "(line 1394,col 9)-(line 1394,col 61)",
      "(line 1395,col 9)-(line 1395,col 65)",
      "(line 1396,col 9)-(line 1396,col 75)",
      "(line 1397,col 9)-(line 1397,col 75)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testReplaceChars_StringStringString()",
    "snippet": "@Test\n    public void testReplaceChars_StringStringString() {\n        assertNull(StringUtils.replaceChars(null, null, null));\n        assertNull(StringUtils.replaceChars(null, \"\", null));\n        assertNull(StringUtils.replaceChars(null, \"a\", null));\n        assertNull(StringUtils.replaceChars(null, null, \"\"));\n        assertNull(StringUtils.replaceChars(null, null, \"x\"));\n\n        assertEquals(\"\", StringUtils.replaceChars(\"\", null, null));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", \"\", null));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", \"a\", null));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", null, \"\"));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", null, \"x\"));\n\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, null));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, \"\"));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, \"x\"));\n\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", null));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", \"\"));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", \"x\"));\n\n        assertEquals(\"ac\", StringUtils.replaceChars(\"abc\", \"b\", null));\n        assertEquals(\"ac\", StringUtils.replaceChars(\"abc\", \"b\", \"\"));\n        assertEquals(\"axc\", StringUtils.replaceChars(\"abc\", \"b\", \"x\"));\n\n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\"));\n        assertEquals(\"ayya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"y\"));\n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\"));\n\n        assertEquals(\"abcba\", StringUtils.replaceChars(\"abcba\", \"z\", \"w\"));\n        assertSame(\"abcba\", StringUtils.replaceChars(\"abcba\", \"z\", \"w\"));\n\n        // Javadoc examples:\n        assertEquals(\"jelly\", StringUtils.replaceChars(\"hello\", \"ho\", \"jy\"));\n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\"));\n        assertEquals(\"ayya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"y\"));\n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\"));\n\n        // From http://issues.apache.org/bugzilla/show_bug.cgi?id\u003d25454\n        assertEquals(\"bcc\", StringUtils.replaceChars(\"abc\", \"ab\", \"bc\"));\n        assertEquals(\"q651.506bera\", StringUtils.replaceChars(\"d216.102oren\",\n                \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789\",\n                \"nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234\"));\n    }",
    "begin_line": 1401,
    "end_line": 1444,
    "comment": "",
    "child_ranges": [
      "(line 1402,col 9)-(line 1402,col 63)",
      "(line 1403,col 9)-(line 1403,col 61)",
      "(line 1404,col 9)-(line 1404,col 62)",
      "(line 1405,col 9)-(line 1405,col 61)",
      "(line 1406,col 9)-(line 1406,col 62)",
      "(line 1408,col 9)-(line 1408,col 67)",
      "(line 1409,col 9)-(line 1409,col 65)",
      "(line 1410,col 9)-(line 1410,col 66)",
      "(line 1411,col 9)-(line 1411,col 65)",
      "(line 1412,col 9)-(line 1412,col 66)",
      "(line 1414,col 9)-(line 1414,col 73)",
      "(line 1415,col 9)-(line 1415,col 71)",
      "(line 1416,col 9)-(line 1416,col 72)",
      "(line 1418,col 9)-(line 1418,col 71)",
      "(line 1419,col 9)-(line 1419,col 69)",
      "(line 1420,col 9)-(line 1420,col 70)",
      "(line 1422,col 9)-(line 1422,col 71)",
      "(line 1423,col 9)-(line 1423,col 69)",
      "(line 1424,col 9)-(line 1424,col 71)",
      "(line 1426,col 9)-(line 1426,col 77)",
      "(line 1427,col 9)-(line 1427,col 75)",
      "(line 1428,col 9)-(line 1428,col 78)",
      "(line 1430,col 9)-(line 1430,col 75)",
      "(line 1431,col 9)-(line 1431,col 73)",
      "(line 1434,col 9)-(line 1434,col 77)",
      "(line 1435,col 9)-(line 1435,col 77)",
      "(line 1436,col 9)-(line 1436,col 75)",
      "(line 1437,col 9)-(line 1437,col 78)",
      "(line 1440,col 9)-(line 1440,col 73)",
      "(line 1441,col 9)-(line 1443,col 82)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testOverlay_StringStringIntInt()",
    "snippet": "@Test\n    public void testOverlay_StringStringIntInt() {\n        assertNull(StringUtils.overlay(null, null, 2, 4));\n        assertNull(StringUtils.overlay(null, null, -2, -4));\n\n        assertEquals(\"\", StringUtils.overlay(\"\", null, 0, 0));\n        assertEquals(\"\", StringUtils.overlay(\"\", \"\", 0, 0));\n        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", 0, 0));\n        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", 2, 4));\n        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", -2, -4));\n\n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", null, 2, 4));\n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", null, 4, 2));\n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", \"\", 2, 4));\n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", \"\", 4, 2));\n        assertEquals(\"abzzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 2, 4));\n        assertEquals(\"abzzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 2));\n\n        assertEquals(\"zzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -1, 4));\n        assertEquals(\"zzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, -1));\n        assertEquals(\"zzzzabcdef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -2, -1));\n        assertEquals(\"zzzzabcdef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -1, -2));\n        assertEquals(\"abcdzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 10));\n        assertEquals(\"abcdzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 4));\n        assertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 8, 10));\n        assertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 8));\n    }",
    "begin_line": 1447,
    "end_line": 1472,
    "comment": "",
    "child_ranges": [
      "(line 1448,col 9)-(line 1448,col 58)",
      "(line 1449,col 9)-(line 1449,col 60)",
      "(line 1451,col 9)-(line 1451,col 62)",
      "(line 1452,col 9)-(line 1452,col 60)",
      "(line 1453,col 9)-(line 1453,col 68)",
      "(line 1454,col 9)-(line 1454,col 68)",
      "(line 1455,col 9)-(line 1455,col 70)",
      "(line 1457,col 9)-(line 1457,col 72)",
      "(line 1458,col 9)-(line 1458,col 72)",
      "(line 1459,col 9)-(line 1459,col 70)",
      "(line 1460,col 9)-(line 1460,col 70)",
      "(line 1461,col 9)-(line 1461,col 78)",
      "(line 1462,col 9)-(line 1462,col 78)",
      "(line 1464,col 9)-(line 1464,col 77)",
      "(line 1465,col 9)-(line 1465,col 77)",
      "(line 1466,col 9)-(line 1466,col 82)",
      "(line 1467,col 9)-(line 1467,col 82)",
      "(line 1468,col 9)-(line 1468,col 79)",
      "(line 1469,col 9)-(line 1469,col 79)",
      "(line 1470,col 9)-(line 1470,col 81)",
      "(line 1471,col 9)-(line 1471,col 81)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testRepeat_StringInt()",
    "snippet": "@Test\n    public void testRepeat_StringInt() {\n        assertNull(StringUtils.repeat(null, 2));\n        assertEquals(\"\", StringUtils.repeat(\"ab\", 0));\n        assertEquals(\"\", StringUtils.repeat(\"\", 3));\n        assertEquals(\"aaa\", StringUtils.repeat(\"a\", 3));\n        assertEquals(\"\", StringUtils.repeat(\"a\", -2));\n        assertEquals(\"ababab\", StringUtils.repeat(\"ab\", 3));\n        assertEquals(\"abcabcabc\", StringUtils.repeat(\"abc\", 3));\n        final String str \u003d StringUtils.repeat(\"a\", 10000);  // bigger than pad limit\n        assertEquals(10000, str.length());\n        assertTrue(StringUtils.containsOnly(str, new char[]{\u0027a\u0027}));\n    }",
    "begin_line": 1475,
    "end_line": 1486,
    "comment": "",
    "child_ranges": [
      "(line 1476,col 9)-(line 1476,col 48)",
      "(line 1477,col 9)-(line 1477,col 54)",
      "(line 1478,col 9)-(line 1478,col 52)",
      "(line 1479,col 9)-(line 1479,col 56)",
      "(line 1480,col 9)-(line 1480,col 54)",
      "(line 1481,col 9)-(line 1481,col 60)",
      "(line 1482,col 9)-(line 1482,col 64)",
      "(line 1483,col 9)-(line 1483,col 58)",
      "(line 1484,col 9)-(line 1484,col 42)",
      "(line 1485,col 9)-(line 1485,col 67)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testRepeat_StringStringInt()",
    "snippet": "@Test\n    public void testRepeat_StringStringInt() {\n        assertNull(StringUtils.repeat(null, null, 2));\n        assertNull(StringUtils.repeat(null, \"x\", 2));\n        assertEquals(\"\", StringUtils.repeat(\"\", null, 2));\n\n        assertEquals(\"\", StringUtils.repeat(\"ab\", \"\", 0));\n        assertEquals(\"\", StringUtils.repeat(\"\", \"\", 2));\n\n        assertEquals(\"xx\", StringUtils.repeat(\"\", \"x\", 3));\n\n        assertEquals(\"?, ?, ?\", StringUtils.repeat(\"?\", \", \", 3));\n    }",
    "begin_line": 1489,
    "end_line": 1500,
    "comment": "",
    "child_ranges": [
      "(line 1490,col 9)-(line 1490,col 54)",
      "(line 1491,col 9)-(line 1491,col 53)",
      "(line 1492,col 9)-(line 1492,col 58)",
      "(line 1494,col 9)-(line 1494,col 58)",
      "(line 1495,col 9)-(line 1495,col 56)",
      "(line 1497,col 9)-(line 1497,col 59)",
      "(line 1499,col 9)-(line 1499,col 66)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testRepeat_CharInt()",
    "snippet": "@Test\n    public void testRepeat_CharInt() {\n        assertEquals(\"zzz\", StringUtils.repeat(\u0027z\u0027, 3));\n        assertEquals(\"\", StringUtils.repeat(\u0027z\u0027, 0));\n        assertEquals(\"\", StringUtils.repeat(\u0027z\u0027, -2));\n    }",
    "begin_line": 1503,
    "end_line": 1507,
    "comment": "",
    "child_ranges": [
      "(line 1504,col 9)-(line 1504,col 56)",
      "(line 1505,col 9)-(line 1505,col 53)",
      "(line 1506,col 9)-(line 1506,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testChop()",
    "snippet": "@Test\n    public void testChop() {\n\n        final String[][] chopCases \u003d {\n                {FOO_UNCAP + \"\\r\\n\", FOO_UNCAP},\n                {FOO_UNCAP + \"\\n\", FOO_UNCAP},\n                {FOO_UNCAP + \"\\r\", FOO_UNCAP},\n                {FOO_UNCAP + \" \\r\", FOO_UNCAP + \" \"},\n                {\"foo\", \"fo\"},\n                {\"foo\\nfoo\", \"foo\\nfo\"},\n                {\"\\n\", \"\"},\n                {\"\\r\", \"\"},\n                {\"\\r\\n\", \"\"},\n                {null, null},\n                {\"\", \"\"},\n                {\"a\", \"\"},\n        };\n        for (final String[] chopCase : chopCases) {\n            final String original \u003d chopCase[0];\n            final String expectedResult \u003d chopCase[1];\n            assertEquals(\"chop(String) failed\",\n                    expectedResult, StringUtils.chop(original));\n        }\n    }",
    "begin_line": 1510,
    "end_line": 1532,
    "comment": "",
    "child_ranges": [
      "(line 1512,col 9)-(line 1525,col 10)",
      "(line 1526,col 9)-(line 1531,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testChomp()",
    "snippet": "@Test\n    public void testChomp() {\n\n        final String[][] chompCases \u003d {\n                {FOO_UNCAP + \"\\r\\n\", FOO_UNCAP},\n                {FOO_UNCAP + \"\\n\", FOO_UNCAP},\n                {FOO_UNCAP + \"\\r\", FOO_UNCAP},\n                {FOO_UNCAP + \" \\r\", FOO_UNCAP + \" \"},\n                {FOO_UNCAP, FOO_UNCAP},\n                {FOO_UNCAP + \"\\n\\n\", FOO_UNCAP + \"\\n\"},\n                {FOO_UNCAP + \"\\r\\n\\r\\n\", FOO_UNCAP + \"\\r\\n\"},\n                {\"foo\\nfoo\", \"foo\\nfoo\"},\n                {\"foo\\n\\rfoo\", \"foo\\n\\rfoo\"},\n                {\"\\n\", \"\"},\n                {\"\\r\", \"\"},\n                {\"a\", \"a\"},\n                {\"\\r\\n\", \"\"},\n                {\"\", \"\"},\n                {null, null},\n                {FOO_UNCAP + \"\\n\\r\", FOO_UNCAP + \"\\n\"}\n        };\n        for (final String[] chompCase : chompCases) {\n            final String original \u003d chompCase[0];\n            final String expectedResult \u003d chompCase[1];\n            assertEquals(\"chomp(String) failed\",\n                    expectedResult, StringUtils.chomp(original));\n        }\n\n        assertEquals(\"chomp(String, String) failed\",\n                \"foo\", StringUtils.chomp(\"foobar\", \"bar\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foobar\", StringUtils.chomp(\"foobar\", \"baz\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foo\", StringUtils.chomp(\"foo\", \"foooo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foobar\", StringUtils.chomp(\"foobar\", \"\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foobar\", StringUtils.chomp(\"foobar\", null));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"\", \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"\", null));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"\", \"\"));\n        assertEquals(\"chomp(String, String) failed\",\n                null, StringUtils.chomp(null, \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                null, StringUtils.chomp(null, null));\n        assertEquals(\"chomp(String, String) failed\",\n                null, StringUtils.chomp(null, \"\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"foo\", \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \" \", StringUtils.chomp(\" foo\", \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foo \", StringUtils.chomp(\"foo \", \"foo\"));\n    }",
    "begin_line": 1535,
    "end_line": 1590,
    "comment": "",
    "child_ranges": [
      "(line 1537,col 9)-(line 1554,col 10)",
      "(line 1555,col 9)-(line 1560,col 9)",
      "(line 1562,col 9)-(line 1563,col 59)",
      "(line 1564,col 9)-(line 1565,col 62)",
      "(line 1566,col 9)-(line 1567,col 58)",
      "(line 1568,col 9)-(line 1569,col 59)",
      "(line 1570,col 9)-(line 1571,col 61)",
      "(line 1572,col 9)-(line 1573,col 50)",
      "(line 1574,col 9)-(line 1575,col 49)",
      "(line 1576,col 9)-(line 1577,col 47)",
      "(line 1578,col 9)-(line 1579,col 54)",
      "(line 1580,col 9)-(line 1581,col 53)",
      "(line 1582,col 9)-(line 1583,col 51)",
      "(line 1584,col 9)-(line 1585,col 53)",
      "(line 1586,col 9)-(line 1587,col 55)",
      "(line 1588,col 9)-(line 1589,col 58)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testRightPad_StringInt()",
    "snippet": "@Test\n    public void testRightPad_StringInt() {\n        assertNull(StringUtils.rightPad(null, 5));\n        assertEquals(\"     \", StringUtils.rightPad(\"\", 5));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1));\n    }",
    "begin_line": 1594,
    "end_line": 1600,
    "comment": "",
    "child_ranges": [
      "(line 1595,col 9)-(line 1595,col 50)",
      "(line 1596,col 9)-(line 1596,col 59)",
      "(line 1597,col 9)-(line 1597,col 62)",
      "(line 1598,col 9)-(line 1598,col 60)",
      "(line 1599,col 9)-(line 1599,col 61)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntChar()",
    "snippet": "@Test\n    public void testRightPad_StringIntChar() {\n        assertNull(StringUtils.rightPad(null, 5, \u0027 \u0027));\n        assertEquals(\"     \", StringUtils.rightPad(\"\", 5, \u0027 \u0027));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, \u0027 \u0027));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, \u0027 \u0027));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, \u0027 \u0027));\n        assertEquals(\"abcxx\", StringUtils.rightPad(\"abc\", 5, \u0027x\u0027));\n        final String str \u003d StringUtils.rightPad(\"aaa\", 10000, \u0027a\u0027);  // bigger than pad length\n        assertEquals(10000, str.length());\n        assertTrue(StringUtils.containsOnly(str, new char[]{\u0027a\u0027}));\n    }",
    "begin_line": 1603,
    "end_line": 1613,
    "comment": "",
    "child_ranges": [
      "(line 1604,col 9)-(line 1604,col 55)",
      "(line 1605,col 9)-(line 1605,col 64)",
      "(line 1606,col 9)-(line 1606,col 67)",
      "(line 1607,col 9)-(line 1607,col 65)",
      "(line 1608,col 9)-(line 1608,col 66)",
      "(line 1609,col 9)-(line 1609,col 67)",
      "(line 1610,col 9)-(line 1610,col 67)",
      "(line 1611,col 9)-(line 1611,col 42)",
      "(line 1612,col 9)-(line 1612,col 67)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntString()",
    "snippet": "@Test\n    public void testRightPad_StringIntString() {\n        assertNull(StringUtils.rightPad(null, 5, \"-+\"));\n        assertEquals(\"     \", StringUtils.rightPad(\"\", 5, \" \"));\n        assertNull(StringUtils.rightPad(null, 8, null));\n        assertEquals(\"abc-+-+\", StringUtils.rightPad(\"abc\", 7, \"-+\"));\n        assertEquals(\"abc-+~\", StringUtils.rightPad(\"abc\", 6, \"-+~\"));\n        assertEquals(\"abc-+\", StringUtils.rightPad(\"abc\", 5, \"-+~\"));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, \" \"));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, \" \"));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, null));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, \"\"));\n    }",
    "begin_line": 1616,
    "end_line": 1627,
    "comment": "",
    "child_ranges": [
      "(line 1617,col 9)-(line 1617,col 56)",
      "(line 1618,col 9)-(line 1618,col 64)",
      "(line 1619,col 9)-(line 1619,col 56)",
      "(line 1620,col 9)-(line 1620,col 70)",
      "(line 1621,col 9)-(line 1621,col 70)",
      "(line 1622,col 9)-(line 1622,col 69)",
      "(line 1623,col 9)-(line 1623,col 65)",
      "(line 1624,col 9)-(line 1624,col 66)",
      "(line 1625,col 9)-(line 1625,col 68)",
      "(line 1626,col 9)-(line 1626,col 66)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringInt()",
    "snippet": "@Test\n    public void testLeftPad_StringInt() {\n        assertNull(StringUtils.leftPad(null, 5));\n        assertEquals(\"     \", StringUtils.leftPad(\"\", 5));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2));\n    }",
    "begin_line": 1631,
    "end_line": 1636,
    "comment": "",
    "child_ranges": [
      "(line 1632,col 9)-(line 1632,col 49)",
      "(line 1633,col 9)-(line 1633,col 58)",
      "(line 1634,col 9)-(line 1634,col 61)",
      "(line 1635,col 9)-(line 1635,col 59)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntChar()",
    "snippet": "@Test\n    public void testLeftPad_StringIntChar() {\n        assertNull(StringUtils.leftPad(null, 5, \u0027 \u0027));\n        assertEquals(\"     \", StringUtils.leftPad(\"\", 5, \u0027 \u0027));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, \u0027 \u0027));\n        assertEquals(\"xxabc\", StringUtils.leftPad(\"abc\", 5, \u0027x\u0027));\n        assertEquals(\"\\uffff\\uffffabc\", StringUtils.leftPad(\"abc\", 5, \u0027\\uffff\u0027));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, \u0027 \u0027));\n        final String str \u003d StringUtils.leftPad(\"aaa\", 10000, \u0027a\u0027);  // bigger than pad length\n        assertEquals(10000, str.length());\n        assertTrue(StringUtils.containsOnly(str, new char[]{\u0027a\u0027}));\n    }",
    "begin_line": 1639,
    "end_line": 1649,
    "comment": "",
    "child_ranges": [
      "(line 1640,col 9)-(line 1640,col 54)",
      "(line 1641,col 9)-(line 1641,col 63)",
      "(line 1642,col 9)-(line 1642,col 66)",
      "(line 1643,col 9)-(line 1643,col 66)",
      "(line 1644,col 9)-(line 1644,col 81)",
      "(line 1645,col 9)-(line 1645,col 64)",
      "(line 1646,col 9)-(line 1646,col 66)",
      "(line 1647,col 9)-(line 1647,col 42)",
      "(line 1648,col 9)-(line 1648,col 67)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntString()",
    "snippet": "@Test\n    public void testLeftPad_StringIntString() {\n        assertNull(StringUtils.leftPad(null, 5, \"-+\"));\n        assertNull(StringUtils.leftPad(null, 5, null));\n        assertEquals(\"     \", StringUtils.leftPad(\"\", 5, \" \"));\n        assertEquals(\"-+-+abc\", StringUtils.leftPad(\"abc\", 7, \"-+\"));\n        assertEquals(\"-+~abc\", StringUtils.leftPad(\"abc\", 6, \"-+~\"));\n        assertEquals(\"-+abc\", StringUtils.leftPad(\"abc\", 5, \"-+~\"));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, \" \"));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", -1, \" \"));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, null));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, \"\"));\n    }",
    "begin_line": 1652,
    "end_line": 1663,
    "comment": "",
    "child_ranges": [
      "(line 1653,col 9)-(line 1653,col 55)",
      "(line 1654,col 9)-(line 1654,col 55)",
      "(line 1655,col 9)-(line 1655,col 63)",
      "(line 1656,col 9)-(line 1656,col 69)",
      "(line 1657,col 9)-(line 1657,col 69)",
      "(line 1658,col 9)-(line 1658,col 68)",
      "(line 1659,col 9)-(line 1659,col 64)",
      "(line 1660,col 9)-(line 1660,col 65)",
      "(line 1661,col 9)-(line 1661,col 67)",
      "(line 1662,col 9)-(line 1662,col 65)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testLengthString()",
    "snippet": "@Test\n    public void testLengthString() {\n        assertEquals(0, StringUtils.length(null));\n        assertEquals(0, StringUtils.length(\"\"));\n        assertEquals(0, StringUtils.length(StringUtils.EMPTY));\n        assertEquals(1, StringUtils.length(\"A\"));\n        assertEquals(1, StringUtils.length(\" \"));\n        assertEquals(8, StringUtils.length(\"ABCDEFGH\"));\n    }",
    "begin_line": 1666,
    "end_line": 1673,
    "comment": "",
    "child_ranges": [
      "(line 1667,col 9)-(line 1667,col 50)",
      "(line 1668,col 9)-(line 1668,col 48)",
      "(line 1669,col 9)-(line 1669,col 63)",
      "(line 1670,col 9)-(line 1670,col 49)",
      "(line 1671,col 9)-(line 1671,col 49)",
      "(line 1672,col 9)-(line 1672,col 56)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testLengthStringBuffer()",
    "snippet": "@Test\n    public void testLengthStringBuffer() {\n        assertEquals(0, StringUtils.length(new StringBuffer(\"\")));\n        assertEquals(0, StringUtils.length(new StringBuffer(StringUtils.EMPTY)));\n        assertEquals(1, StringUtils.length(new StringBuffer(\"A\")));\n        assertEquals(1, StringUtils.length(new StringBuffer(\" \")));\n        assertEquals(8, StringUtils.length(new StringBuffer(\"ABCDEFGH\")));\n    }",
    "begin_line": 1676,
    "end_line": 1682,
    "comment": "",
    "child_ranges": [
      "(line 1677,col 9)-(line 1677,col 66)",
      "(line 1678,col 9)-(line 1678,col 81)",
      "(line 1679,col 9)-(line 1679,col 67)",
      "(line 1680,col 9)-(line 1680,col 67)",
      "(line 1681,col 9)-(line 1681,col 74)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testLengthStringBuilder()",
    "snippet": "@Test\n    public void testLengthStringBuilder() {\n        assertEquals(0, StringUtils.length(new StringBuilder(\"\")));\n        assertEquals(0, StringUtils.length(new StringBuilder(StringUtils.EMPTY)));\n        assertEquals(1, StringUtils.length(new StringBuilder(\"A\")));\n        assertEquals(1, StringUtils.length(new StringBuilder(\" \")));\n        assertEquals(8, StringUtils.length(new StringBuilder(\"ABCDEFGH\")));\n    }",
    "begin_line": 1685,
    "end_line": 1691,
    "comment": "",
    "child_ranges": [
      "(line 1686,col 9)-(line 1686,col 67)",
      "(line 1687,col 9)-(line 1687,col 82)",
      "(line 1688,col 9)-(line 1688,col 68)",
      "(line 1689,col 9)-(line 1689,col 68)",
      "(line 1690,col 9)-(line 1690,col 75)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testLength_CharBuffer()",
    "snippet": "@Test\n    public void testLength_CharBuffer() {\n        assertEquals(0, StringUtils.length(CharBuffer.wrap(\"\")));\n        assertEquals(1, StringUtils.length(CharBuffer.wrap(\"A\")));\n        assertEquals(1, StringUtils.length(CharBuffer.wrap(\" \")));\n        assertEquals(8, StringUtils.length(CharBuffer.wrap(\"ABCDEFGH\")));\n    }",
    "begin_line": 1694,
    "end_line": 1699,
    "comment": "",
    "child_ranges": [
      "(line 1695,col 9)-(line 1695,col 65)",
      "(line 1696,col 9)-(line 1696,col 66)",
      "(line 1697,col 9)-(line 1697,col 66)",
      "(line 1698,col 9)-(line 1698,col 73)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testCenter_StringInt()",
    "snippet": "@Test\n    public void testCenter_StringInt() {\n        assertNull(StringUtils.center(null, -1));\n        assertNull(StringUtils.center(null, 4));\n        assertEquals(\"    \", StringUtils.center(\"\", 4));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 0));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", -1));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 1));\n        assertEquals(\"    \", StringUtils.center(\"\", 4));\n        assertEquals(\" ab \", StringUtils.center(\"ab\", 4));\n        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2));\n        assertEquals(\" a  \", StringUtils.center(\"a\", 4));\n        assertEquals(\"  a  \", StringUtils.center(\"a\", 5));\n    }",
    "begin_line": 1703,
    "end_line": 1715,
    "comment": "",
    "child_ranges": [
      "(line 1704,col 9)-(line 1704,col 49)",
      "(line 1705,col 9)-(line 1705,col 48)",
      "(line 1706,col 9)-(line 1706,col 56)",
      "(line 1707,col 9)-(line 1707,col 56)",
      "(line 1708,col 9)-(line 1708,col 57)",
      "(line 1709,col 9)-(line 1709,col 56)",
      "(line 1710,col 9)-(line 1710,col 56)",
      "(line 1711,col 9)-(line 1711,col 58)",
      "(line 1712,col 9)-(line 1712,col 60)",
      "(line 1713,col 9)-(line 1713,col 57)",
      "(line 1714,col 9)-(line 1714,col 58)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntChar()",
    "snippet": "@Test\n    public void testCenter_StringIntChar() {\n        assertNull(StringUtils.center(null, -1, \u0027 \u0027));\n        assertNull(StringUtils.center(null, 4, \u0027 \u0027));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, \u0027 \u0027));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 0, \u0027 \u0027));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", -1, \u0027 \u0027));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 1, \u0027 \u0027));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, \u0027 \u0027));\n        assertEquals(\" ab \", StringUtils.center(\"ab\", 4, \u0027 \u0027));\n        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, \u0027 \u0027));\n        assertEquals(\" a  \", StringUtils.center(\"a\", 4, \u0027 \u0027));\n        assertEquals(\"  a  \", StringUtils.center(\"a\", 5, \u0027 \u0027));\n        assertEquals(\"xxaxx\", StringUtils.center(\"a\", 5, \u0027x\u0027));\n    }",
    "begin_line": 1718,
    "end_line": 1731,
    "comment": "",
    "child_ranges": [
      "(line 1719,col 9)-(line 1719,col 54)",
      "(line 1720,col 9)-(line 1720,col 53)",
      "(line 1721,col 9)-(line 1721,col 61)",
      "(line 1722,col 9)-(line 1722,col 61)",
      "(line 1723,col 9)-(line 1723,col 62)",
      "(line 1724,col 9)-(line 1724,col 61)",
      "(line 1725,col 9)-(line 1725,col 61)",
      "(line 1726,col 9)-(line 1726,col 63)",
      "(line 1727,col 9)-(line 1727,col 65)",
      "(line 1728,col 9)-(line 1728,col 62)",
      "(line 1729,col 9)-(line 1729,col 63)",
      "(line 1730,col 9)-(line 1730,col 63)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntString()",
    "snippet": "@Test\n    public void testCenter_StringIntString() {\n        assertNull(StringUtils.center(null, 4, null));\n        assertNull(StringUtils.center(null, -1, \" \"));\n        assertNull(StringUtils.center(null, 4, \" \"));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 0, \" \"));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", -1, \" \"));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 1, \" \"));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\n        assertEquals(\" ab \", StringUtils.center(\"ab\", 4, \" \"));\n        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, \" \"));\n        assertEquals(\" a  \", StringUtils.center(\"a\", 4, \" \"));\n        assertEquals(\"yayz\", StringUtils.center(\"a\", 4, \"yz\"));\n        assertEquals(\"yzyayzy\", StringUtils.center(\"a\", 7, \"yz\"));\n        assertEquals(\"  abc  \", StringUtils.center(\"abc\", 7, null));\n        assertEquals(\"  abc  \", StringUtils.center(\"abc\", 7, \"\"));\n    }",
    "begin_line": 1734,
    "end_line": 1750,
    "comment": "",
    "child_ranges": [
      "(line 1735,col 9)-(line 1735,col 54)",
      "(line 1736,col 9)-(line 1736,col 54)",
      "(line 1737,col 9)-(line 1737,col 53)",
      "(line 1738,col 9)-(line 1738,col 61)",
      "(line 1739,col 9)-(line 1739,col 61)",
      "(line 1740,col 9)-(line 1740,col 62)",
      "(line 1741,col 9)-(line 1741,col 61)",
      "(line 1742,col 9)-(line 1742,col 61)",
      "(line 1743,col 9)-(line 1743,col 63)",
      "(line 1744,col 9)-(line 1744,col 65)",
      "(line 1745,col 9)-(line 1745,col 62)",
      "(line 1746,col 9)-(line 1746,col 63)",
      "(line 1747,col 9)-(line 1747,col 66)",
      "(line 1748,col 9)-(line 1748,col 68)",
      "(line 1749,col 9)-(line 1749,col 66)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testRotate_StringInt()",
    "snippet": "@Test\n    public void testRotate_StringInt() {\n        assertEquals(null, StringUtils.rotate(null, 1));\n        assertEquals(\"\", StringUtils.rotate(\"\", 1));\n        assertEquals(\"abcdefg\", StringUtils.rotate(\"abcdefg\", 0));\n        assertEquals(\"fgabcde\", StringUtils.rotate(\"abcdefg\", 2));\n        assertEquals(\"cdefgab\", StringUtils.rotate(\"abcdefg\", -2));\n        assertEquals(\"abcdefg\", StringUtils.rotate(\"abcdefg\", 7));\n        assertEquals(\"abcdefg\", StringUtils.rotate(\"abcdefg\", -7));\n        assertEquals(\"fgabcde\", StringUtils.rotate(\"abcdefg\", 9));\n        assertEquals(\"cdefgab\", StringUtils.rotate(\"abcdefg\", -9));\n        assertEquals(\"efgabcd\", StringUtils.rotate(\"abcdefg\", 17));\n        assertEquals(\"defgabc\", StringUtils.rotate(\"abcdefg\", -17));\n    }",
    "begin_line": 1754,
    "end_line": 1766,
    "comment": "",
    "child_ranges": [
      "(line 1755,col 9)-(line 1755,col 56)",
      "(line 1756,col 9)-(line 1756,col 52)",
      "(line 1757,col 9)-(line 1757,col 66)",
      "(line 1758,col 9)-(line 1758,col 66)",
      "(line 1759,col 9)-(line 1759,col 67)",
      "(line 1760,col 9)-(line 1760,col 66)",
      "(line 1761,col 9)-(line 1761,col 67)",
      "(line 1762,col 9)-(line 1762,col 66)",
      "(line 1763,col 9)-(line 1763,col 67)",
      "(line 1764,col 9)-(line 1764,col 67)",
      "(line 1765,col 9)-(line 1765,col 68)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testReverse_String()",
    "snippet": "@Test\n    public void testReverse_String() {\n        assertNull(StringUtils.reverse(null));\n        assertEquals(\"\", StringUtils.reverse(\"\"));\n        assertEquals(\"sdrawkcab\", StringUtils.reverse(\"backwards\"));\n    }",
    "begin_line": 1770,
    "end_line": 1774,
    "comment": "",
    "child_ranges": [
      "(line 1771,col 9)-(line 1771,col 46)",
      "(line 1772,col 9)-(line 1772,col 50)",
      "(line 1773,col 9)-(line 1773,col 68)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testReverseDelimited_StringChar()",
    "snippet": "@Test\n    public void testReverseDelimited_StringChar() {\n        assertNull(StringUtils.reverseDelimited(null, \u0027.\u0027));\n        assertEquals(\"\", StringUtils.reverseDelimited(\"\", \u0027.\u0027));\n        assertEquals(\"c.b.a\", StringUtils.reverseDelimited(\"a.b.c\", \u0027.\u0027));\n        assertEquals(\"a b c\", StringUtils.reverseDelimited(\"a b c\", \u0027.\u0027));\n        assertEquals(\"\", StringUtils.reverseDelimited(\"\", \u0027.\u0027));\n    }",
    "begin_line": 1777,
    "end_line": 1783,
    "comment": "",
    "child_ranges": [
      "(line 1778,col 9)-(line 1778,col 60)",
      "(line 1779,col 9)-(line 1779,col 64)",
      "(line 1780,col 9)-(line 1780,col 74)",
      "(line 1781,col 9)-(line 1781,col 74)",
      "(line 1782,col 9)-(line 1782,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testDefault_String()",
    "snippet": "@Test\n    public void testDefault_String() {\n        assertEquals(\"\", StringUtils.defaultString(null));\n        assertEquals(\"\", StringUtils.defaultString(\"\"));\n        assertEquals(\"abc\", StringUtils.defaultString(\"abc\"));\n    }",
    "begin_line": 1787,
    "end_line": 1791,
    "comment": "",
    "child_ranges": [
      "(line 1788,col 9)-(line 1788,col 58)",
      "(line 1789,col 9)-(line 1789,col 56)",
      "(line 1790,col 9)-(line 1790,col 62)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testDefault_StringString()",
    "snippet": "@Test\n    public void testDefault_StringString() {\n        assertEquals(\"NULL\", StringUtils.defaultString(null, \"NULL\"));\n        assertEquals(\"\", StringUtils.defaultString(\"\", \"NULL\"));\n        assertEquals(\"abc\", StringUtils.defaultString(\"abc\", \"NULL\"));\n    }",
    "begin_line": 1794,
    "end_line": 1798,
    "comment": "",
    "child_ranges": [
      "(line 1795,col 9)-(line 1795,col 70)",
      "(line 1796,col 9)-(line 1796,col 64)",
      "(line 1797,col 9)-(line 1797,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfEmpty_StringString()",
    "snippet": "@Test\n    public void testDefaultIfEmpty_StringString() {\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(null, \"NULL\"));\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(\"\", \"NULL\"));\n        assertEquals(\"abc\", StringUtils.defaultIfEmpty(\"abc\", \"NULL\"));\n        assertNull(StringUtils.defaultIfEmpty(\"\", null));\n        // Tests compatibility for the API return type\n        final String s \u003d StringUtils.defaultIfEmpty(\"abc\", \"NULL\");\n        assertEquals(\"abc\", s);\n    }",
    "begin_line": 1801,
    "end_line": 1809,
    "comment": "",
    "child_ranges": [
      "(line 1802,col 9)-(line 1802,col 71)",
      "(line 1803,col 9)-(line 1803,col 69)",
      "(line 1804,col 9)-(line 1804,col 71)",
      "(line 1805,col 9)-(line 1805,col 57)",
      "(line 1807,col 9)-(line 1807,col 67)",
      "(line 1808,col 9)-(line 1808,col 31)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfBlank_StringString()",
    "snippet": "@Test\n    public void testDefaultIfBlank_StringString() {\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(null, \"NULL\"));\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(\"\", \"NULL\"));\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(\" \", \"NULL\"));\n        assertEquals(\"abc\", StringUtils.defaultIfBlank(\"abc\", \"NULL\"));\n        assertNull(StringUtils.defaultIfBlank(\"\", null));\n        // Tests compatibility for the API return type\n        final String s \u003d StringUtils.defaultIfBlank(\"abc\", \"NULL\");\n        assertEquals(\"abc\", s);\n    }",
    "begin_line": 1812,
    "end_line": 1821,
    "comment": "",
    "child_ranges": [
      "(line 1813,col 9)-(line 1813,col 71)",
      "(line 1814,col 9)-(line 1814,col 69)",
      "(line 1815,col 9)-(line 1815,col 70)",
      "(line 1816,col 9)-(line 1816,col 71)",
      "(line 1817,col 9)-(line 1817,col 57)",
      "(line 1819,col 9)-(line 1819,col 67)",
      "(line 1820,col 9)-(line 1820,col 31)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfEmpty_StringBuilders()",
    "snippet": "@Test\n    public void testDefaultIfEmpty_StringBuilders() {\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(new StringBuilder(\"\"), new StringBuilder(\"NULL\")).toString());\n        assertEquals(\"abc\", StringUtils.defaultIfEmpty(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\")).toString());\n        assertNull(StringUtils.defaultIfEmpty(new StringBuilder(\"\"), null));\n        // Tests compatibility for the API return type\n        final StringBuilder s \u003d StringUtils.defaultIfEmpty(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\"));\n        assertEquals(\"abc\", s.toString());\n    }",
    "begin_line": 1824,
    "end_line": 1831,
    "comment": "",
    "child_ranges": [
      "(line 1825,col 9)-(line 1825,col 118)",
      "(line 1826,col 9)-(line 1826,col 120)",
      "(line 1827,col 9)-(line 1827,col 76)",
      "(line 1829,col 9)-(line 1829,col 112)",
      "(line 1830,col 9)-(line 1830,col 42)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfBlank_StringBuilders()",
    "snippet": "@Test\n    public void testDefaultIfBlank_StringBuilders() {\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuilder(\"\"), new StringBuilder(\"NULL\")).toString());\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuilder(\" \"), new StringBuilder(\"NULL\")).toString());\n        assertEquals(\"abc\", StringUtils.defaultIfBlank(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\")).toString());\n        assertNull(StringUtils.defaultIfBlank(new StringBuilder(\"\"), null));\n        // Tests compatibility for the API return type\n        final StringBuilder s \u003d StringUtils.defaultIfBlank(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\"));\n        assertEquals(\"abc\", s.toString());\n    }",
    "begin_line": 1834,
    "end_line": 1842,
    "comment": "",
    "child_ranges": [
      "(line 1835,col 9)-(line 1835,col 118)",
      "(line 1836,col 9)-(line 1836,col 119)",
      "(line 1837,col 9)-(line 1837,col 120)",
      "(line 1838,col 9)-(line 1838,col 76)",
      "(line 1840,col 9)-(line 1840,col 112)",
      "(line 1841,col 9)-(line 1841,col 42)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfEmpty_StringBuffers()",
    "snippet": "@Test\n    public void testDefaultIfEmpty_StringBuffers() {\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(new StringBuffer(\"\"), new StringBuffer(\"NULL\")).toString());\n        assertEquals(\"abc\", StringUtils.defaultIfEmpty(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\")).toString());\n        assertNull(StringUtils.defaultIfEmpty(new StringBuffer(\"\"), null));\n        // Tests compatibility for the API return type\n        final StringBuffer s \u003d StringUtils.defaultIfEmpty(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\"));\n        assertEquals(\"abc\", s.toString());\n    }",
    "begin_line": 1845,
    "end_line": 1852,
    "comment": "",
    "child_ranges": [
      "(line 1846,col 9)-(line 1846,col 116)",
      "(line 1847,col 9)-(line 1847,col 118)",
      "(line 1848,col 9)-(line 1848,col 75)",
      "(line 1850,col 9)-(line 1850,col 109)",
      "(line 1851,col 9)-(line 1851,col 42)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfBlank_StringBuffers()",
    "snippet": "@Test\n    public void testDefaultIfBlank_StringBuffers() {\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuffer(\"\"), new StringBuffer(\"NULL\")).toString());\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuffer(\" \"), new StringBuffer(\"NULL\")).toString());\n        assertEquals(\"abc\", StringUtils.defaultIfBlank(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\")).toString());\n        assertNull(StringUtils.defaultIfBlank(new StringBuffer(\"\"), null));\n        // Tests compatibility for the API return type\n        final StringBuffer s \u003d StringUtils.defaultIfBlank(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\"));\n        assertEquals(\"abc\", s.toString());\n    }",
    "begin_line": 1855,
    "end_line": 1863,
    "comment": "",
    "child_ranges": [
      "(line 1856,col 9)-(line 1856,col 116)",
      "(line 1857,col 9)-(line 1857,col 117)",
      "(line 1858,col 9)-(line 1858,col 118)",
      "(line 1859,col 9)-(line 1859,col 75)",
      "(line 1861,col 9)-(line 1861,col 109)",
      "(line 1862,col 9)-(line 1862,col 42)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfEmpty_CharBuffers()",
    "snippet": "@Test\n    public void testDefaultIfEmpty_CharBuffers() {\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(CharBuffer.wrap(\"\"), CharBuffer.wrap(\"NULL\")).toString());\n        assertEquals(\"abc\", StringUtils.defaultIfEmpty(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\")).toString());\n        assertNull(StringUtils.defaultIfEmpty(CharBuffer.wrap(\"\"), null));\n        // Tests compatibility for the API return type\n        final CharBuffer s \u003d StringUtils.defaultIfEmpty(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\"));\n        assertEquals(\"abc\", s.toString());\n    }",
    "begin_line": 1866,
    "end_line": 1873,
    "comment": "",
    "child_ranges": [
      "(line 1867,col 9)-(line 1867,col 114)",
      "(line 1868,col 9)-(line 1868,col 116)",
      "(line 1869,col 9)-(line 1869,col 74)",
      "(line 1871,col 9)-(line 1871,col 105)",
      "(line 1872,col 9)-(line 1872,col 42)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfBlank_CharBuffers()",
    "snippet": "@Test\n    public void testDefaultIfBlank_CharBuffers() {\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(CharBuffer.wrap(\"\"), CharBuffer.wrap(\"NULL\")).toString());\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(CharBuffer.wrap(\" \"), CharBuffer.wrap(\"NULL\")).toString());\n        assertEquals(\"abc\", StringUtils.defaultIfBlank(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\")).toString());\n        assertNull(StringUtils.defaultIfBlank(CharBuffer.wrap(\"\"), null));\n        // Tests compatibility for the API return type\n        final CharBuffer s \u003d StringUtils.defaultIfBlank(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\"));\n        assertEquals(\"abc\", s.toString());\n    }",
    "begin_line": 1876,
    "end_line": 1884,
    "comment": "",
    "child_ranges": [
      "(line 1877,col 9)-(line 1877,col 114)",
      "(line 1878,col 9)-(line 1878,col 115)",
      "(line 1879,col 9)-(line 1879,col 116)",
      "(line 1880,col 9)-(line 1880,col 74)",
      "(line 1882,col 9)-(line 1882,col 105)",
      "(line 1883,col 9)-(line 1883,col 42)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testAbbreviate_StringInt()",
    "snippet": "@Test\n    public void testAbbreviate_StringInt() {\n        assertNull(StringUtils.abbreviate(null, 10));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 10));\n        assertEquals(\"short\", StringUtils.abbreviate(\"short\", 10));\n        assertEquals(\"Now is ...\", StringUtils.abbreviate(\"Now is the time for all good men to come to the aid of their party.\", 10));\n\n        final String raspberry \u003d \"raspberry peach\";\n        assertEquals(\"raspberry p...\", StringUtils.abbreviate(raspberry, 14));\n        assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 15));\n        assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 16));\n        assertEquals(\"abc...\", StringUtils.abbreviate(\"abcdefg\", 6));\n        assertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", 7));\n        assertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", 8));\n        assertEquals(\"a...\", StringUtils.abbreviate(\"abcdefg\", 4));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 4));\n\n        try {\n            @SuppressWarnings(\"unused\")\n            final\n            String res \u003d StringUtils.abbreviate(\"abc\", 3);\n            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n        } catch (final IllegalArgumentException ex) {\n            // empty\n        }\n    }",
    "begin_line": 1888,
    "end_line": 1912,
    "comment": "",
    "child_ranges": [
      "(line 1889,col 9)-(line 1889,col 53)",
      "(line 1890,col 9)-(line 1890,col 57)",
      "(line 1891,col 9)-(line 1891,col 67)",
      "(line 1892,col 9)-(line 1892,col 134)",
      "(line 1894,col 9)-(line 1894,col 51)",
      "(line 1895,col 9)-(line 1895,col 78)",
      "(line 1896,col 9)-(line 1896,col 87)",
      "(line 1897,col 9)-(line 1897,col 87)",
      "(line 1898,col 9)-(line 1898,col 69)",
      "(line 1899,col 9)-(line 1899,col 70)",
      "(line 1900,col 9)-(line 1900,col 70)",
      "(line 1901,col 9)-(line 1901,col 67)",
      "(line 1902,col 9)-(line 1902,col 56)",
      "(line 1904,col 9)-(line 1911,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testAbbreviate_StringIntInt()",
    "snippet": "@Test\n    public void testAbbreviate_StringIntInt() {\n        assertNull(StringUtils.abbreviate(null, 10, 12));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 0, 10));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 2, 10));\n\n        try {\n            @SuppressWarnings(\"unused\")\n            final\n            String res \u003d StringUtils.abbreviate(\"abcdefghij\", 0, 3);\n            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n        } catch (final IllegalArgumentException ex) {\n            // empty\n        }\n        try {\n            @SuppressWarnings(\"unused\")\n            final\n            String res \u003d StringUtils.abbreviate(\"abcdefghij\", 5, 6);\n            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n        } catch (final IllegalArgumentException ex) {\n            // empty\n        }\n\n\n        final String raspberry \u003d \"raspberry peach\";\n        assertEquals(\"raspberry peach\", StringUtils.abbreviate(raspberry, 11, 15));\n\n        assertNull(StringUtils.abbreviate(null, 7, 14));\n        assertAbbreviateWithOffset(\"abcdefg...\", -1, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 0, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 1, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 2, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 3, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 4, 10);\n        assertAbbreviateWithOffset(\"...fghi...\", 5, 10);\n        assertAbbreviateWithOffset(\"...ghij...\", 6, 10);\n        assertAbbreviateWithOffset(\"...hijk...\", 7, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 8, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 9, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 10, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 10, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 11, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 12, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 13, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 14, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 15, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 16, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", Integer.MAX_VALUE, 10);\n    }",
    "begin_line": 1915,
    "end_line": 1962,
    "comment": "",
    "child_ranges": [
      "(line 1916,col 9)-(line 1916,col 57)",
      "(line 1917,col 9)-(line 1917,col 60)",
      "(line 1918,col 9)-(line 1918,col 60)",
      "(line 1920,col 9)-(line 1927,col 9)",
      "(line 1928,col 9)-(line 1935,col 9)",
      "(line 1938,col 9)-(line 1938,col 51)",
      "(line 1939,col 9)-(line 1939,col 83)",
      "(line 1941,col 9)-(line 1941,col 56)",
      "(line 1942,col 9)-(line 1942,col 57)",
      "(line 1943,col 9)-(line 1943,col 56)",
      "(line 1944,col 9)-(line 1944,col 56)",
      "(line 1945,col 9)-(line 1945,col 56)",
      "(line 1946,col 9)-(line 1946,col 56)",
      "(line 1947,col 9)-(line 1947,col 56)",
      "(line 1948,col 9)-(line 1948,col 56)",
      "(line 1949,col 9)-(line 1949,col 56)",
      "(line 1950,col 9)-(line 1950,col 56)",
      "(line 1951,col 9)-(line 1951,col 56)",
      "(line 1952,col 9)-(line 1952,col 56)",
      "(line 1953,col 9)-(line 1953,col 57)",
      "(line 1954,col 9)-(line 1954,col 57)",
      "(line 1955,col 9)-(line 1955,col 57)",
      "(line 1956,col 9)-(line 1956,col 57)",
      "(line 1957,col 9)-(line 1957,col 57)",
      "(line 1958,col 9)-(line 1958,col 57)",
      "(line 1959,col 9)-(line 1959,col 57)",
      "(line 1960,col 9)-(line 1960,col 57)",
      "(line 1961,col 9)-(line 1961,col 72)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.assertAbbreviateWithOffset(java.lang.String, int, int)",
    "snippet": "private void assertAbbreviateWithOffset(final String expected, final int offset, final int maxWidth) {\n        final String abcdefghijklmno \u003d \"abcdefghijklmno\";\n        final String message \u003d \"abbreviate(String,int,int) failed\";\n        final String actual \u003d StringUtils.abbreviate(abcdefghijklmno, offset, maxWidth);\n        if (offset \u003e\u003d 0 \u0026\u0026 offset \u003c abcdefghijklmno.length()) {\n            assertTrue(message + \" -- should contain offset character\",\n                    actual.indexOf((char) (\u0027a\u0027 + offset)) !\u003d -1);\n        }\n        assertTrue(message + \" -- should not be greater than maxWidth\",\n                actual.length() \u003c\u003d maxWidth);\n        assertEquals(message, expected, actual);\n    }",
    "begin_line": 1964,
    "end_line": 1975,
    "comment": "",
    "child_ranges": [
      "(line 1965,col 9)-(line 1965,col 57)",
      "(line 1966,col 9)-(line 1966,col 67)",
      "(line 1967,col 9)-(line 1967,col 88)",
      "(line 1968,col 9)-(line 1971,col 9)",
      "(line 1972,col 9)-(line 1973,col 45)",
      "(line 1974,col 9)-(line 1974,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testAbbreviateMiddle()",
    "snippet": "@Test\n    public void testAbbreviateMiddle() {\n        // javadoc examples\n        assertNull(StringUtils.abbreviateMiddle(null, null, 0));\n        assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", null, 0));\n        assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 0));\n        assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 3));\n        assertEquals(\"ab.f\", StringUtils.abbreviateMiddle(\"abcdef\", \".\", 4));\n\n        // JIRA issue (LANG-405) example (slightly different than actual expected result)\n        assertEquals(\n                \"A very long text with un...f the text is complete.\",\n                StringUtils.abbreviateMiddle(\n                        \"A very long text with unimportant stuff in the middle but interesting start and \" +\n                                \"end to see if the text is complete.\", \"...\", 50));\n\n        // Test a much longer text :)\n        final String longText \u003d \"Start text\" + StringUtils.repeat(\"x\", 10000) + \"Close text\";\n        assertEquals(\n                \"Start text-\u003eClose text\",\n                StringUtils.abbreviateMiddle(longText, \"-\u003e\", 22));\n\n        // Test negative length\n        assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", -1));\n\n        // Test boundaries\n        // Fails to change anything as method ensures first and last char are kept\n        assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 1));\n        assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 2));\n\n        // Test length of n\u003d1\n        assertEquals(\"a\", StringUtils.abbreviateMiddle(\"a\", \".\", 1));\n\n        // Test smallest length that can lead to success\n        assertEquals(\"a.d\", StringUtils.abbreviateMiddle(\"abcd\", \".\", 3));\n\n        // More from LANG-405\n        assertEquals(\"a..f\", StringUtils.abbreviateMiddle(\"abcdef\", \"..\", 4));\n        assertEquals(\"ab.ef\", StringUtils.abbreviateMiddle(\"abcdef\", \".\", 5));\n    }",
    "begin_line": 1978,
    "end_line": 2016,
    "comment": "",
    "child_ranges": [
      "(line 1980,col 9)-(line 1980,col 64)",
      "(line 1981,col 9)-(line 1981,col 74)",
      "(line 1982,col 9)-(line 1982,col 73)",
      "(line 1983,col 9)-(line 1983,col 73)",
      "(line 1984,col 9)-(line 1984,col 77)",
      "(line 1987,col 9)-(line 1991,col 83)",
      "(line 1994,col 9)-(line 1994,col 93)",
      "(line 1995,col 9)-(line 1997,col 66)",
      "(line 2000,col 9)-(line 2000,col 74)",
      "(line 2004,col 9)-(line 2004,col 73)",
      "(line 2005,col 9)-(line 2005,col 73)",
      "(line 2008,col 9)-(line 2008,col 69)",
      "(line 2011,col 9)-(line 2011,col 74)",
      "(line 2014,col 9)-(line 2014,col 78)",
      "(line 2015,col 9)-(line 2015,col 78)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testDifference_StringString()",
    "snippet": "@Test\n    public void testDifference_StringString() {\n        assertNull(StringUtils.difference(null, null));\n        assertEquals(\"\", StringUtils.difference(\"\", \"\"));\n        assertEquals(\"abc\", StringUtils.difference(\"\", \"abc\"));\n        assertEquals(\"\", StringUtils.difference(\"abc\", \"\"));\n        assertEquals(\"i am a robot\", StringUtils.difference(null, \"i am a robot\"));\n        assertEquals(\"i am a machine\", StringUtils.difference(\"i am a machine\", null));\n        assertEquals(\"robot\", StringUtils.difference(\"i am a machine\", \"i am a robot\"));\n        assertEquals(\"\", StringUtils.difference(\"abc\", \"abc\"));\n        assertEquals(\"you are a robot\", StringUtils.difference(\"i am a robot\", \"you are a robot\"));\n    }",
    "begin_line": 2020,
    "end_line": 2030,
    "comment": "",
    "child_ranges": [
      "(line 2021,col 9)-(line 2021,col 55)",
      "(line 2022,col 9)-(line 2022,col 57)",
      "(line 2023,col 9)-(line 2023,col 63)",
      "(line 2024,col 9)-(line 2024,col 60)",
      "(line 2025,col 9)-(line 2025,col 83)",
      "(line 2026,col 9)-(line 2026,col 87)",
      "(line 2027,col 9)-(line 2027,col 88)",
      "(line 2028,col 9)-(line 2028,col 63)",
      "(line 2029,col 9)-(line 2029,col 99)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testDifferenceAt_StringString()",
    "snippet": "@Test\n    public void testDifferenceAt_StringString() {\n        assertEquals(-1, StringUtils.indexOfDifference(null, null));\n        assertEquals(0, StringUtils.indexOfDifference(null, \"i am a robot\"));\n        assertEquals(-1, StringUtils.indexOfDifference(\"\", \"\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"\", \"abc\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"abc\", \"\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"i am a machine\", null));\n        assertEquals(7, StringUtils.indexOfDifference(\"i am a machine\", \"i am a robot\"));\n        assertEquals(-1, StringUtils.indexOfDifference(\"foo\", \"foo\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"i am a robot\", \"you are a robot\"));\n        //System.out.println(\"indexOfDiff: \" + StringUtils.indexOfDifference(\"i am a robot\", \"not machine\"));\n    }",
    "begin_line": 2033,
    "end_line": 2044,
    "comment": "",
    "child_ranges": [
      "(line 2034,col 9)-(line 2034,col 68)",
      "(line 2035,col 9)-(line 2035,col 77)",
      "(line 2036,col 9)-(line 2036,col 64)",
      "(line 2037,col 9)-(line 2037,col 66)",
      "(line 2038,col 9)-(line 2038,col 66)",
      "(line 2039,col 9)-(line 2039,col 79)",
      "(line 2040,col 9)-(line 2040,col 89)",
      "(line 2041,col 9)-(line 2041,col 70)",
      "(line 2042,col 9)-(line 2042,col 90)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testGetLevenshteinDistance_StringString()",
    "snippet": "@Test\n    public void testGetLevenshteinDistance_StringString() {\n        assertEquals(0, StringUtils.getLevenshteinDistance(\"\", \"\"));\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"\", \"a\"));\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\"));\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"frog\", \"fog\"));\n        assertEquals(3, StringUtils.getLevenshteinDistance(\"fly\", \"ant\"));\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\"));\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\"));\n        assertEquals(8, StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\"));\n        assertEquals(8, StringUtils.getLevenshteinDistance(\"zzzzzzzz\", \"hippo\"));\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"hello\", \"hallo\"));\n    }",
    "begin_line": 2048,
    "end_line": 2059,
    "comment": "",
    "child_ranges": [
      "(line 2049,col 9)-(line 2049,col 68)",
      "(line 2050,col 9)-(line 2050,col 69)",
      "(line 2051,col 9)-(line 2051,col 75)",
      "(line 2052,col 9)-(line 2052,col 75)",
      "(line 2053,col 9)-(line 2053,col 74)",
      "(line 2054,col 9)-(line 2054,col 81)",
      "(line 2055,col 9)-(line 2055,col 81)",
      "(line 2056,col 9)-(line 2056,col 81)",
      "(line 2057,col 9)-(line 2057,col 81)",
      "(line 2058,col 9)-(line 2058,col 78)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testGetLevenshteinDistance_NullString()",
    "snippet": "@Test(expected \u003d IllegalArgumentException.class)\n    public void testGetLevenshteinDistance_NullString() throws Exception {\n        StringUtils.getLevenshteinDistance(\"a\", null);\n    }",
    "begin_line": 2062,
    "end_line": 2064,
    "comment": "",
    "child_ranges": [
      "(line 2063,col 9)-(line 2063,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testGetLevenshteinDistance_StringNull()",
    "snippet": "@Test(expected \u003d IllegalArgumentException.class)\n    public void testGetLevenshteinDistance_StringNull() throws Exception {\n        StringUtils.getLevenshteinDistance(null, \"a\");\n    }",
    "begin_line": 2067,
    "end_line": 2069,
    "comment": "",
    "child_ranges": [
      "(line 2068,col 9)-(line 2068,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testGetLevenshteinDistance_StringStringInt()",
    "snippet": "@Test\n    public void testGetLevenshteinDistance_StringStringInt() {\n        // empty strings\n        assertEquals(0, StringUtils.getLevenshteinDistance(\"\", \"\", 0));\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\", 8));\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\", 7));\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\", 6));\n\n        // unequal strings, zero threshold\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"b\", \"a\", 0));\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"a\", \"b\", 0));\n\n        // equal strings\n        assertEquals(0, StringUtils.getLevenshteinDistance(\"aa\", \"aa\", 0));\n        assertEquals(0, StringUtils.getLevenshteinDistance(\"aa\", \"aa\", 2));\n\n        // same length\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"aaa\", \"bbb\", 2));\n        assertEquals(3, StringUtils.getLevenshteinDistance(\"aaa\", \"bbb\", 3));\n\n        // big stripe\n        assertEquals(6, StringUtils.getLevenshteinDistance(\"aaaaaa\", \"b\", 10));\n\n        // distance less than threshold\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"b\", 8));\n        assertEquals(3, StringUtils.getLevenshteinDistance(\"a\", \"bbb\", 4));\n\n        // distance equal to threshold\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"b\", 7));\n        assertEquals(3, StringUtils.getLevenshteinDistance(\"a\", \"bbb\", 3));\n\n        // distance greater than threshold\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"a\", \"bbb\", 2));\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"bbb\", \"a\", 2));\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"aaapppp\", \"b\", 6));\n\n        // stripe runs off array, strings not similar\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"a\", \"bbb\", 1));\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"bbb\", \"a\", 1));\n\n        // stripe runs off array, strings are similar\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"12345\", \"1234567\", 1));\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"1234567\", \"12345\", 1));\n\n        // old getLevenshteinDistance test cases\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"frog\", \"fog\", 1));\n        assertEquals(3, StringUtils.getLevenshteinDistance(\"fly\", \"ant\", 3));\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\", 7));\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\", 6));\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\", 7));\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\", 6));\n        assertEquals(8, StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\", 8));\n        assertEquals(8, StringUtils.getLevenshteinDistance(\"zzzzzzzz\", \"hippo\", 8));\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"hello\", \"hallo\", 1));\n\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"frog\", \"fog\", Integer.MAX_VALUE));\n        assertEquals(3, StringUtils.getLevenshteinDistance(\"fly\", \"ant\", Integer.MAX_VALUE));\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\", Integer.MAX_VALUE));\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\", Integer.MAX_VALUE));\n        assertEquals(8, StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\", Integer.MAX_VALUE));\n        assertEquals(8, StringUtils.getLevenshteinDistance(\"zzzzzzzz\", \"hippo\", Integer.MAX_VALUE));\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"hello\", \"hallo\", Integer.MAX_VALUE));\n    }",
    "begin_line": 2072,
    "end_line": 2133,
    "comment": "",
    "child_ranges": [
      "(line 2074,col 9)-(line 2074,col 71)",
      "(line 2075,col 9)-(line 2075,col 78)",
      "(line 2076,col 9)-(line 2076,col 78)",
      "(line 2077,col 9)-(line 2077,col 79)",
      "(line 2080,col 9)-(line 2080,col 74)",
      "(line 2081,col 9)-(line 2081,col 74)",
      "(line 2084,col 9)-(line 2084,col 75)",
      "(line 2085,col 9)-(line 2085,col 75)",
      "(line 2088,col 9)-(line 2088,col 78)",
      "(line 2089,col 9)-(line 2089,col 77)",
      "(line 2092,col 9)-(line 2092,col 79)",
      "(line 2095,col 9)-(line 2095,col 79)",
      "(line 2096,col 9)-(line 2096,col 75)",
      "(line 2099,col 9)-(line 2099,col 79)",
      "(line 2100,col 9)-(line 2100,col 75)",
      "(line 2103,col 9)-(line 2103,col 76)",
      "(line 2104,col 9)-(line 2104,col 76)",
      "(line 2105,col 9)-(line 2105,col 80)",
      "(line 2108,col 9)-(line 2108,col 76)",
      "(line 2109,col 9)-(line 2109,col 76)",
      "(line 2112,col 9)-(line 2112,col 84)",
      "(line 2113,col 9)-(line 2113,col 84)",
      "(line 2116,col 9)-(line 2116,col 78)",
      "(line 2117,col 9)-(line 2117,col 77)",
      "(line 2118,col 9)-(line 2118,col 84)",
      "(line 2119,col 9)-(line 2119,col 85)",
      "(line 2120,col 9)-(line 2120,col 84)",
      "(line 2121,col 9)-(line 2121,col 85)",
      "(line 2122,col 9)-(line 2122,col 84)",
      "(line 2123,col 9)-(line 2123,col 84)",
      "(line 2124,col 9)-(line 2124,col 81)",
      "(line 2126,col 9)-(line 2126,col 94)",
      "(line 2127,col 9)-(line 2127,col 93)",
      "(line 2128,col 9)-(line 2128,col 100)",
      "(line 2129,col 9)-(line 2129,col 100)",
      "(line 2130,col 9)-(line 2130,col 100)",
      "(line 2131,col 9)-(line 2131,col 100)",
      "(line 2132,col 9)-(line 2132,col 97)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testGetLevenshteinDistance_NullStringInt()",
    "snippet": "@Test(expected \u003d IllegalArgumentException.class)\n    public void testGetLevenshteinDistance_NullStringInt() throws Exception {\n        StringUtils.getLevenshteinDistance(null, \"a\", 0);\n    }",
    "begin_line": 2136,
    "end_line": 2138,
    "comment": "",
    "child_ranges": [
      "(line 2137,col 9)-(line 2137,col 57)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testGetLevenshteinDistance_StringNullInt()",
    "snippet": "@Test(expected \u003d IllegalArgumentException.class)\n    public void testGetLevenshteinDistance_StringNullInt() throws Exception {\n        StringUtils.getLevenshteinDistance(\"a\", null, 0);\n    }",
    "begin_line": 2141,
    "end_line": 2143,
    "comment": "",
    "child_ranges": [
      "(line 2142,col 9)-(line 2142,col 57)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testGetLevenshteinDistance_StringStringNegativeInt()",
    "snippet": "@Test(expected \u003d IllegalArgumentException.class)\n    public void testGetLevenshteinDistance_StringStringNegativeInt() throws Exception {\n        StringUtils.getLevenshteinDistance(\"a\", \"a\", -1);\n    }",
    "begin_line": 2146,
    "end_line": 2148,
    "comment": "",
    "child_ranges": [
      "(line 2147,col 9)-(line 2147,col 57)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testGetJaroWinklerDistance_StringString()",
    "snippet": "@Test\n    public void testGetJaroWinklerDistance_StringString() {\n        assertEquals(0.93d, StringUtils.getJaroWinklerDistance(\"frog\", \"fog\"), 0.0d);\n        assertEquals(0.0d, StringUtils.getJaroWinklerDistance(\"fly\", \"ant\"), 0.0d);\n        assertEquals(0.44d, StringUtils.getJaroWinklerDistance(\"elephant\", \"hippo\"), 0.0d);\n        assertEquals(0.91d, StringUtils.getJaroWinklerDistance(\"ABC Corporation\", \"ABC Corp\"), 0.0d);\n        assertEquals(0.93d, StringUtils.getJaroWinklerDistance(\"D N H Enterprises Inc\", \"D \u0026 H Enterprises, Inc.\"), 0.0d);\n        assertEquals(0.94d, StringUtils.getJaroWinklerDistance(\"My Gym Children\u0027s Fitness Center\", \"My Gym. Childrens Fitness\"), 0.0d);\n        assertEquals(0.9d, StringUtils.getJaroWinklerDistance(\"PENNSYLVANIA\", \"PENNCISYLVNIA\"), 0.0d);\n    }",
    "begin_line": 2151,
    "end_line": 2159,
    "comment": "",
    "child_ranges": [
      "(line 2152,col 9)-(line 2152,col 85)",
      "(line 2153,col 9)-(line 2153,col 83)",
      "(line 2154,col 9)-(line 2154,col 91)",
      "(line 2155,col 9)-(line 2155,col 101)",
      "(line 2156,col 9)-(line 2156,col 122)",
      "(line 2157,col 9)-(line 2157,col 135)",
      "(line 2158,col 9)-(line 2158,col 102)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testGetJaroWinklerDistance_NullNull()",
    "snippet": "@Test(expected \u003d IllegalArgumentException.class)\n    public void testGetJaroWinklerDistance_NullNull() throws Exception {\n        StringUtils.getJaroWinklerDistance(null, null);\n    }",
    "begin_line": 2162,
    "end_line": 2164,
    "comment": "",
    "child_ranges": [
      "(line 2163,col 9)-(line 2163,col 55)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testGetJaroWinklerDistance_StringNull()",
    "snippet": "@Test(expected \u003d IllegalArgumentException.class)\n    public void testGetJaroWinklerDistance_StringNull() throws Exception {\n        StringUtils.getJaroWinklerDistance(\" \", null);\n    }",
    "begin_line": 2167,
    "end_line": 2169,
    "comment": "",
    "child_ranges": [
      "(line 2168,col 9)-(line 2168,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testGetJaroWinklerDistance_NullString()",
    "snippet": "@Test(expected \u003d IllegalArgumentException.class)\n    public void testGetJaroWinklerDistance_NullString() throws Exception {\n        StringUtils.getJaroWinklerDistance(null, \"clear\");\n    }",
    "begin_line": 2172,
    "end_line": 2174,
    "comment": "",
    "child_ranges": [
      "(line 2173,col 9)-(line 2173,col 58)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testGetFuzzyDistance()",
    "snippet": "@Test\n    public void testGetFuzzyDistance() throws Exception {\n        assertEquals(0, StringUtils.getFuzzyDistance(\"\", \"\", Locale.ENGLISH));\n        assertEquals(0, StringUtils.getFuzzyDistance(\"Workshop\", \"b\", Locale.ENGLISH));\n        assertEquals(1, StringUtils.getFuzzyDistance(\"Room\", \"o\", Locale.ENGLISH));\n        assertEquals(1, StringUtils.getFuzzyDistance(\"Workshop\", \"w\", Locale.ENGLISH));\n        assertEquals(2, StringUtils.getFuzzyDistance(\"Workshop\", \"ws\", Locale.ENGLISH));\n        assertEquals(4, StringUtils.getFuzzyDistance(\"Workshop\", \"wo\", Locale.ENGLISH));\n        assertEquals(3, StringUtils.getFuzzyDistance(\"Apache Software Foundation\", \"asf\", Locale.ENGLISH));\n    }",
    "begin_line": 2177,
    "end_line": 2185,
    "comment": "",
    "child_ranges": [
      "(line 2178,col 9)-(line 2178,col 78)",
      "(line 2179,col 9)-(line 2179,col 87)",
      "(line 2180,col 9)-(line 2180,col 83)",
      "(line 2181,col 9)-(line 2181,col 87)",
      "(line 2182,col 9)-(line 2182,col 88)",
      "(line 2183,col 9)-(line 2183,col 88)",
      "(line 2184,col 9)-(line 2184,col 107)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testGetFuzzyDistance_NullNullNull()",
    "snippet": "@Test(expected \u003d IllegalArgumentException.class)\n    public void testGetFuzzyDistance_NullNullNull() throws Exception {\n        StringUtils.getFuzzyDistance(null, null, null);\n    }",
    "begin_line": 2188,
    "end_line": 2190,
    "comment": "",
    "child_ranges": [
      "(line 2189,col 9)-(line 2189,col 55)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testGetFuzzyDistance_StringNullLoclae()",
    "snippet": "@Test(expected \u003d IllegalArgumentException.class)\n    public void testGetFuzzyDistance_StringNullLoclae() throws Exception {\n        StringUtils.getFuzzyDistance(\" \", null, Locale.ENGLISH);\n    }",
    "begin_line": 2193,
    "end_line": 2195,
    "comment": "",
    "child_ranges": [
      "(line 2194,col 9)-(line 2194,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testGetFuzzyDistance_NullStringLocale()",
    "snippet": "@Test(expected \u003d IllegalArgumentException.class)\n    public void testGetFuzzyDistance_NullStringLocale() throws Exception {\n        StringUtils.getFuzzyDistance(null, \"clear\", Locale.ENGLISH);\n    }",
    "begin_line": 2198,
    "end_line": 2200,
    "comment": "",
    "child_ranges": [
      "(line 2199,col 9)-(line 2199,col 68)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testGetFuzzyDistance_StringStringNull()",
    "snippet": "@Test(expected \u003d IllegalArgumentException.class)\n    public void testGetFuzzyDistance_StringStringNull() throws Exception {\n        StringUtils.getFuzzyDistance(\" \", \"clear\", null);\n    }",
    "begin_line": 2203,
    "end_line": 2205,
    "comment": "",
    "child_ranges": [
      "(line 2204,col 9)-(line 2204,col 57)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testEMPTY()",
    "snippet": "@Test\n    public void testEMPTY() {\n        assertNotNull(StringUtils.EMPTY);\n        assertEquals(\"\", StringUtils.EMPTY);\n        assertEquals(0, StringUtils.EMPTY.length());\n    }",
    "begin_line": 2211,
    "end_line": 2215,
    "comment": "/** \n * A sanity check for  {@link StringUtils#EMPTY}.\n */\n",
    "child_ranges": [
      "(line 2212,col 9)-(line 2212,col 41)",
      "(line 2213,col 9)-(line 2213,col 44)",
      "(line 2214,col 9)-(line 2214,col 52)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testIsAllLowerCase()",
    "snippet": "@Test\n    public void testIsAllLowerCase() {\n        assertFalse(StringUtils.isAllLowerCase(null));\n        assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY));\n        assertFalse(StringUtils.isAllLowerCase(\"  \"));\n        assertTrue(StringUtils.isAllLowerCase(\"abc\"));\n        assertFalse(StringUtils.isAllLowerCase(\"abc \"));\n        assertFalse(StringUtils.isAllLowerCase(\"abc\\n\"));\n        assertFalse(StringUtils.isAllLowerCase(\"abC\"));\n        assertFalse(StringUtils.isAllLowerCase(\"ab c\"));\n        assertFalse(StringUtils.isAllLowerCase(\"ab1c\"));\n        assertFalse(StringUtils.isAllLowerCase(\"ab/c\"));\n    }",
    "begin_line": 2221,
    "end_line": 2232,
    "comment": "/** \n * Test for  {@link StringUtils#isAllLowerCase(CharSequence)}.\n */\n",
    "child_ranges": [
      "(line 2222,col 9)-(line 2222,col 54)",
      "(line 2223,col 9)-(line 2223,col 67)",
      "(line 2224,col 9)-(line 2224,col 54)",
      "(line 2225,col 9)-(line 2225,col 54)",
      "(line 2226,col 9)-(line 2226,col 56)",
      "(line 2227,col 9)-(line 2227,col 57)",
      "(line 2228,col 9)-(line 2228,col 55)",
      "(line 2229,col 9)-(line 2229,col 56)",
      "(line 2230,col 9)-(line 2230,col 56)",
      "(line 2231,col 9)-(line 2231,col 56)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testIsAllUpperCase()",
    "snippet": "@Test\n    public void testIsAllUpperCase() {\n        assertFalse(StringUtils.isAllUpperCase(null));\n        assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY));\n        assertFalse(StringUtils.isAllUpperCase(\"  \"));\n        assertTrue(StringUtils.isAllUpperCase(\"ABC\"));\n        assertFalse(StringUtils.isAllUpperCase(\"ABC \"));\n        assertFalse(StringUtils.isAllUpperCase(\"ABC\\n\"));\n        assertFalse(StringUtils.isAllUpperCase(\"aBC\"));\n        assertFalse(StringUtils.isAllUpperCase(\"A C\"));\n        assertFalse(StringUtils.isAllUpperCase(\"A1C\"));\n        assertFalse(StringUtils.isAllUpperCase(\"A/C\"));\n    }",
    "begin_line": 2238,
    "end_line": 2249,
    "comment": "/** \n * Test for  {@link StringUtils#isAllUpperCase(CharSequence)}.\n */\n",
    "child_ranges": [
      "(line 2239,col 9)-(line 2239,col 54)",
      "(line 2240,col 9)-(line 2240,col 67)",
      "(line 2241,col 9)-(line 2241,col 54)",
      "(line 2242,col 9)-(line 2242,col 54)",
      "(line 2243,col 9)-(line 2243,col 56)",
      "(line 2244,col 9)-(line 2244,col 57)",
      "(line 2245,col 9)-(line 2245,col 55)",
      "(line 2246,col 9)-(line 2246,col 55)",
      "(line 2247,col 9)-(line 2247,col 55)",
      "(line 2248,col 9)-(line 2248,col 55)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveStart()",
    "snippet": "@Test\n    public void testRemoveStart() {\n        // StringUtils.removeStart(\"\", *)        \u003d \"\"\n        assertNull(StringUtils.removeStart(null, null));\n        assertNull(StringUtils.removeStart(null, \"\"));\n        assertNull(StringUtils.removeStart(null, \"a\"));\n\n        // StringUtils.removeStart(*, null)      \u003d *\n        assertEquals(StringUtils.removeStart(\"\", null), \"\");\n        assertEquals(StringUtils.removeStart(\"\", \"\"), \"\");\n        assertEquals(StringUtils.removeStart(\"\", \"a\"), \"\");\n\n        // All others:\n        assertEquals(StringUtils.removeStart(\"www.domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(StringUtils.removeStart(\"domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(StringUtils.removeStart(\"domain.com\", \"\"), \"domain.com\");\n        assertEquals(StringUtils.removeStart(\"domain.com\", null), \"domain.com\");\n    }",
    "begin_line": 2252,
    "end_line": 2268,
    "comment": "",
    "child_ranges": [
      "(line 2254,col 9)-(line 2254,col 56)",
      "(line 2255,col 9)-(line 2255,col 54)",
      "(line 2256,col 9)-(line 2256,col 55)",
      "(line 2259,col 9)-(line 2259,col 60)",
      "(line 2260,col 9)-(line 2260,col 58)",
      "(line 2261,col 9)-(line 2261,col 59)",
      "(line 2264,col 9)-(line 2264,col 86)",
      "(line 2265,col 9)-(line 2265,col 82)",
      "(line 2266,col 9)-(line 2266,col 78)",
      "(line 2267,col 9)-(line 2267,col 80)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveStartIgnoreCase()",
    "snippet": "@Test\n    public void testRemoveStartIgnoreCase() {\n        // StringUtils.removeStart(\"\", *)        \u003d \"\"\n        assertNull(\"removeStartIgnoreCase(null, null)\", StringUtils.removeStartIgnoreCase(null, null));\n        assertNull(\"removeStartIgnoreCase(null, \\\"\\\")\", StringUtils.removeStartIgnoreCase(null, \"\"));\n        assertNull(\"removeStartIgnoreCase(null, \\\"a\\\")\", StringUtils.removeStartIgnoreCase(null, \"a\"));\n\n        // StringUtils.removeStart(*, null)      \u003d *\n        assertEquals(\"removeStartIgnoreCase(\\\"\\\", null)\", StringUtils.removeStartIgnoreCase(\"\", null), \"\");\n        assertEquals(\"removeStartIgnoreCase(\\\"\\\", \\\"\\\")\", StringUtils.removeStartIgnoreCase(\"\", \"\"), \"\");\n        assertEquals(\"removeStartIgnoreCase(\\\"\\\", \\\"a\\\")\", StringUtils.removeStartIgnoreCase(\"\", \"a\"), \"\");\n\n        // All others:\n        assertEquals(\"removeStartIgnoreCase(\\\"www.domain.com\\\", \\\"www.\\\")\", StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", \\\"www.\\\")\", StringUtils.removeStartIgnoreCase(\"domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", \\\"\\\")\", StringUtils.removeStartIgnoreCase(\"domain.com\", \"\"), \"domain.com\");\n        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", null)\", StringUtils.removeStartIgnoreCase(\"domain.com\", null), \"domain.com\");\n\n        // Case insensitive:\n        assertEquals(\"removeStartIgnoreCase(\\\"www.domain.com\\\", \\\"WWW.\\\")\", StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"WWW.\"), \"domain.com\");\n    }",
    "begin_line": 2271,
    "end_line": 2290,
    "comment": "",
    "child_ranges": [
      "(line 2273,col 9)-(line 2273,col 103)",
      "(line 2274,col 9)-(line 2274,col 101)",
      "(line 2275,col 9)-(line 2275,col 103)",
      "(line 2278,col 9)-(line 2278,col 107)",
      "(line 2279,col 9)-(line 2279,col 105)",
      "(line 2280,col 9)-(line 2280,col 107)",
      "(line 2283,col 9)-(line 2283,col 151)",
      "(line 2284,col 9)-(line 2284,col 143)",
      "(line 2285,col 9)-(line 2285,col 135)",
      "(line 2286,col 9)-(line 2286,col 137)",
      "(line 2289,col 9)-(line 2289,col 151)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveEnd()",
    "snippet": "@Test\n    public void testRemoveEnd() {\n        // StringUtils.removeEnd(\"\", *)        \u003d \"\"\n        assertNull(StringUtils.removeEnd(null, null));\n        assertNull(StringUtils.removeEnd(null, \"\"));\n        assertNull(StringUtils.removeEnd(null, \"a\"));\n\n        // StringUtils.removeEnd(*, null)      \u003d *\n        assertEquals(StringUtils.removeEnd(\"\", null), \"\");\n        assertEquals(StringUtils.removeEnd(\"\", \"\"), \"\");\n        assertEquals(StringUtils.removeEnd(\"\", \"a\"), \"\");\n\n        // All others:\n        assertEquals(StringUtils.removeEnd(\"www.domain.com.\", \".com\"), \"www.domain.com.\");\n        assertEquals(StringUtils.removeEnd(\"www.domain.com\", \".com\"), \"www.domain\");\n        assertEquals(StringUtils.removeEnd(\"www.domain\", \".com\"), \"www.domain\");\n        assertEquals(StringUtils.removeEnd(\"domain.com\", \"\"), \"domain.com\");\n        assertEquals(StringUtils.removeEnd(\"domain.com\", null), \"domain.com\");\n    }",
    "begin_line": 2293,
    "end_line": 2310,
    "comment": "",
    "child_ranges": [
      "(line 2295,col 9)-(line 2295,col 54)",
      "(line 2296,col 9)-(line 2296,col 52)",
      "(line 2297,col 9)-(line 2297,col 53)",
      "(line 2300,col 9)-(line 2300,col 58)",
      "(line 2301,col 9)-(line 2301,col 56)",
      "(line 2302,col 9)-(line 2302,col 57)",
      "(line 2305,col 9)-(line 2305,col 90)",
      "(line 2306,col 9)-(line 2306,col 84)",
      "(line 2307,col 9)-(line 2307,col 80)",
      "(line 2308,col 9)-(line 2308,col 76)",
      "(line 2309,col 9)-(line 2309,col 78)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveEndIgnoreCase()",
    "snippet": "@Test\n    public void testRemoveEndIgnoreCase() {\n        // StringUtils.removeEndIgnoreCase(\"\", *)        \u003d \"\"\n        assertNull(\"removeEndIgnoreCase(null, null)\", StringUtils.removeEndIgnoreCase(null, null));\n        assertNull(\"removeEndIgnoreCase(null, \\\"\\\")\", StringUtils.removeEndIgnoreCase(null, \"\"));\n        assertNull(\"removeEndIgnoreCase(null, \\\"a\\\")\", StringUtils.removeEndIgnoreCase(null, \"a\"));\n\n        // StringUtils.removeEnd(*, null)      \u003d *\n        assertEquals(\"removeEndIgnoreCase(\\\"\\\", null)\", StringUtils.removeEndIgnoreCase(\"\", null), \"\");\n        assertEquals(\"removeEndIgnoreCase(\\\"\\\", \\\"\\\")\", StringUtils.removeEndIgnoreCase(\"\", \"\"), \"\");\n        assertEquals(\"removeEndIgnoreCase(\\\"\\\", \\\"a\\\")\", StringUtils.removeEndIgnoreCase(\"\", \"a\"), \"\");\n\n        // All others:\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com.\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com.\", \".com\"), \"www.domain.com.\");\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".com\"), \"www.domain\");\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain\", \".com\"), \"www.domain\");\n        assertEquals(\"removeEndIgnoreCase(\\\"domain.com\\\", \\\"\\\")\", StringUtils.removeEndIgnoreCase(\"domain.com\", \"\"), \"domain.com\");\n        assertEquals(\"removeEndIgnoreCase(\\\"domain.com\\\", null)\", StringUtils.removeEndIgnoreCase(\"domain.com\", null), \"domain.com\");\n\n        // Case insensitive:\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com\\\", \\\".COM\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".COM\"), \"www.domain\");\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.COM\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.COM\", \".com\"), \"www.domain\");\n    }",
    "begin_line": 2313,
    "end_line": 2334,
    "comment": "",
    "child_ranges": [
      "(line 2315,col 9)-(line 2315,col 99)",
      "(line 2316,col 9)-(line 2316,col 97)",
      "(line 2317,col 9)-(line 2317,col 99)",
      "(line 2320,col 9)-(line 2320,col 103)",
      "(line 2321,col 9)-(line 2321,col 101)",
      "(line 2322,col 9)-(line 2322,col 103)",
      "(line 2325,col 9)-(line 2325,col 154)",
      "(line 2326,col 9)-(line 2326,col 147)",
      "(line 2327,col 9)-(line 2327,col 139)",
      "(line 2328,col 9)-(line 2328,col 131)",
      "(line 2329,col 9)-(line 2329,col 133)",
      "(line 2332,col 9)-(line 2332,col 147)",
      "(line 2333,col 9)-(line 2333,col 147)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testRemove_String()",
    "snippet": "@Test\n    public void testRemove_String() {\n        // StringUtils.remove(null, *)        \u003d null\n        assertNull(StringUtils.remove(null, null));\n        assertNull(StringUtils.remove(null, \"\"));\n        assertNull(StringUtils.remove(null, \"a\"));\n\n        // StringUtils.remove(\"\", *)          \u003d \"\"\n        assertEquals(\"\", StringUtils.remove(\"\", null));\n        assertEquals(\"\", StringUtils.remove(\"\", \"\"));\n        assertEquals(\"\", StringUtils.remove(\"\", \"a\"));\n\n        // StringUtils.remove(*, null)        \u003d *\n        assertNull(StringUtils.remove(null, null));\n        assertEquals(\"\", StringUtils.remove(\"\", null));\n        assertEquals(\"a\", StringUtils.remove(\"a\", null));\n\n        // StringUtils.remove(*, \"\")          \u003d *\n        assertNull(StringUtils.remove(null, \"\"));\n        assertEquals(\"\", StringUtils.remove(\"\", \"\"));\n        assertEquals(\"a\", StringUtils.remove(\"a\", \"\"));\n\n        // StringUtils.remove(\"queued\", \"ue\") \u003d \"qd\"\n        assertEquals(\"qd\", StringUtils.remove(\"queued\", \"ue\"));\n\n        // StringUtils.remove(\"queued\", \"zz\") \u003d \"queued\"\n        assertEquals(\"queued\", StringUtils.remove(\"queued\", \"zz\"));\n    }",
    "begin_line": 2337,
    "end_line": 2363,
    "comment": "",
    "child_ranges": [
      "(line 2339,col 9)-(line 2339,col 51)",
      "(line 2340,col 9)-(line 2340,col 49)",
      "(line 2341,col 9)-(line 2341,col 50)",
      "(line 2344,col 9)-(line 2344,col 55)",
      "(line 2345,col 9)-(line 2345,col 53)",
      "(line 2346,col 9)-(line 2346,col 54)",
      "(line 2349,col 9)-(line 2349,col 51)",
      "(line 2350,col 9)-(line 2350,col 55)",
      "(line 2351,col 9)-(line 2351,col 57)",
      "(line 2354,col 9)-(line 2354,col 49)",
      "(line 2355,col 9)-(line 2355,col 53)",
      "(line 2356,col 9)-(line 2356,col 55)",
      "(line 2359,col 9)-(line 2359,col 63)",
      "(line 2362,col 9)-(line 2362,col 67)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testRemove_char()",
    "snippet": "@Test\n    public void testRemove_char() {\n        // StringUtils.remove(null, *)       \u003d null\n        assertNull(StringUtils.remove(null, \u0027a\u0027));\n        assertNull(StringUtils.remove(null, \u0027a\u0027));\n        assertNull(StringUtils.remove(null, \u0027a\u0027));\n\n        // StringUtils.remove(\"\", *)          \u003d \"\"\n        assertEquals(\"\", StringUtils.remove(\"\", \u0027a\u0027));\n        assertEquals(\"\", StringUtils.remove(\"\", \u0027a\u0027));\n        assertEquals(\"\", StringUtils.remove(\"\", \u0027a\u0027));\n\n        // StringUtils.remove(\"queued\", \u0027u\u0027) \u003d \"qeed\"\n        assertEquals(\"qeed\", StringUtils.remove(\"queued\", \u0027u\u0027));\n\n        // StringUtils.remove(\"queued\", \u0027z\u0027) \u003d \"queued\"\n        assertEquals(\"queued\", StringUtils.remove(\"queued\", \u0027z\u0027));\n    }",
    "begin_line": 2366,
    "end_line": 2382,
    "comment": "",
    "child_ranges": [
      "(line 2368,col 9)-(line 2368,col 50)",
      "(line 2369,col 9)-(line 2369,col 50)",
      "(line 2370,col 9)-(line 2370,col 50)",
      "(line 2373,col 9)-(line 2373,col 54)",
      "(line 2374,col 9)-(line 2374,col 54)",
      "(line 2375,col 9)-(line 2375,col 54)",
      "(line 2378,col 9)-(line 2378,col 64)",
      "(line 2381,col 9)-(line 2381,col 66)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testDifferenceAt_StringArray()",
    "snippet": "@Test\n    public void testDifferenceAt_StringArray() {\n        assertEquals(-1, StringUtils.indexOfDifference((String[]) null));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[]{}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[]{\"abc\"}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[]{null, null}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[]{\"\", \"\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[]{\"\", null}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[]{\"abc\", null, null}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[]{null, null, \"abc\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[]{\"\", \"abc\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[]{\"abc\", \"\"}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[]{\"abc\", \"abc\"}));\n        assertEquals(1, StringUtils.indexOfDifference(new String[]{\"abc\", \"a\"}));\n        assertEquals(2, StringUtils.indexOfDifference(new String[]{\"ab\", \"abxyz\"}));\n        assertEquals(2, StringUtils.indexOfDifference(new String[]{\"abcde\", \"abxyz\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[]{\"abcde\", \"xyz\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[]{\"xyz\", \"abcde\"}));\n        assertEquals(7, StringUtils.indexOfDifference(new String[]{\"i am a machine\", \"i am a robot\"}));\n    }",
    "begin_line": 2385,
    "end_line": 2403,
    "comment": "",
    "child_ranges": [
      "(line 2386,col 9)-(line 2386,col 73)",
      "(line 2387,col 9)-(line 2387,col 72)",
      "(line 2388,col 9)-(line 2388,col 77)",
      "(line 2389,col 9)-(line 2389,col 82)",
      "(line 2390,col 9)-(line 2390,col 78)",
      "(line 2391,col 9)-(line 2391,col 79)",
      "(line 2392,col 9)-(line 2392,col 88)",
      "(line 2393,col 9)-(line 2393,col 88)",
      "(line 2394,col 9)-(line 2394,col 80)",
      "(line 2395,col 9)-(line 2395,col 80)",
      "(line 2396,col 9)-(line 2396,col 84)",
      "(line 2397,col 9)-(line 2397,col 81)",
      "(line 2398,col 9)-(line 2398,col 84)",
      "(line 2399,col 9)-(line 2399,col 87)",
      "(line 2400,col 9)-(line 2400,col 85)",
      "(line 2401,col 9)-(line 2401,col 85)",
      "(line 2402,col 9)-(line 2402,col 103)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testGetCommonPrefix_StringArray()",
    "snippet": "@Test\n    public void testGetCommonPrefix_StringArray() {\n        assertEquals(\"\", StringUtils.getCommonPrefix((String[]) null));\n        assertEquals(\"\", StringUtils.getCommonPrefix());\n        assertEquals(\"abc\", StringUtils.getCommonPrefix(\"abc\"));\n        assertEquals(\"\", StringUtils.getCommonPrefix(null, null));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"\", \"\"));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"\", null));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"abc\", null, null));\n        assertEquals(\"\", StringUtils.getCommonPrefix(null, null, \"abc\"));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"\", \"abc\"));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"abc\", \"\"));\n        assertEquals(\"abc\", StringUtils.getCommonPrefix(\"abc\", \"abc\"));\n        assertEquals(\"a\", StringUtils.getCommonPrefix(\"abc\", \"a\"));\n        assertEquals(\"ab\", StringUtils.getCommonPrefix(\"ab\", \"abxyz\"));\n        assertEquals(\"ab\", StringUtils.getCommonPrefix(\"abcde\", \"abxyz\"));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"abcde\", \"xyz\"));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"xyz\", \"abcde\"));\n        assertEquals(\"i am a \", StringUtils.getCommonPrefix(\"i am a machine\", \"i am a robot\"));\n    }",
    "begin_line": 2406,
    "end_line": 2424,
    "comment": "",
    "child_ranges": [
      "(line 2407,col 9)-(line 2407,col 71)",
      "(line 2408,col 9)-(line 2408,col 56)",
      "(line 2409,col 9)-(line 2409,col 64)",
      "(line 2410,col 9)-(line 2410,col 66)",
      "(line 2411,col 9)-(line 2411,col 62)",
      "(line 2412,col 9)-(line 2412,col 64)",
      "(line 2413,col 9)-(line 2413,col 73)",
      "(line 2414,col 9)-(line 2414,col 73)",
      "(line 2415,col 9)-(line 2415,col 65)",
      "(line 2416,col 9)-(line 2416,col 65)",
      "(line 2417,col 9)-(line 2417,col 71)",
      "(line 2418,col 9)-(line 2418,col 67)",
      "(line 2419,col 9)-(line 2419,col 71)",
      "(line 2420,col 9)-(line 2420,col 74)",
      "(line 2421,col 9)-(line 2421,col 70)",
      "(line 2422,col 9)-(line 2422,col 70)",
      "(line 2423,col 9)-(line 2423,col 95)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testNormalizeSpace()",
    "snippet": "@Test\n    public void testNormalizeSpace() {\n        assertNull(StringUtils.normalizeSpace(null));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\" \"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\t\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\n\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u0009\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u000B\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u000C\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u001C\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u001D\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u001E\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u001F\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\f\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\r\"));\n        assertEquals(\"a\", StringUtils.normalizeSpace(\"  a  \"));\n        assertEquals(\"a b c\", StringUtils.normalizeSpace(\"  a  b   c  \"));\n        assertEquals(\"a b c\", StringUtils.normalizeSpace(\"a\\t\\f\\r  b\\u000B   c\\n\"));\n        assertEquals(\"a   b c\", StringUtils.normalizeSpace(\"a\\t\\f\\r  \" + HARD_SPACE + HARD_SPACE + \"b\\u000B   c\\n\"));\n    }",
    "begin_line": 2427,
    "end_line": 2446,
    "comment": "",
    "child_ranges": [
      "(line 2428,col 9)-(line 2428,col 53)",
      "(line 2429,col 9)-(line 2429,col 57)",
      "(line 2430,col 9)-(line 2430,col 58)",
      "(line 2431,col 9)-(line 2431,col 59)",
      "(line 2432,col 9)-(line 2432,col 59)",
      "(line 2433,col 9)-(line 2433,col 63)",
      "(line 2434,col 9)-(line 2434,col 63)",
      "(line 2435,col 9)-(line 2435,col 63)",
      "(line 2436,col 9)-(line 2436,col 63)",
      "(line 2437,col 9)-(line 2437,col 63)",
      "(line 2438,col 9)-(line 2438,col 63)",
      "(line 2439,col 9)-(line 2439,col 63)",
      "(line 2440,col 9)-(line 2440,col 59)",
      "(line 2441,col 9)-(line 2441,col 59)",
      "(line 2442,col 9)-(line 2442,col 63)",
      "(line 2443,col 9)-(line 2443,col 74)",
      "(line 2444,col 9)-(line 2444,col 84)",
      "(line 2445,col 9)-(line 2445,col 117)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testLANG666()",
    "snippet": "@Test\n    public void testLANG666() {\n        assertEquals(\"12\", StringUtils.stripEnd(\"120.00\", \".0\"));\n        assertEquals(\"121\", StringUtils.stripEnd(\"121.00\", \".0\"));\n    }",
    "begin_line": 2449,
    "end_line": 2452,
    "comment": "",
    "child_ranges": [
      "(line 2450,col 9)-(line 2450,col 65)",
      "(line 2451,col 9)-(line 2451,col 66)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testStringUtilsCharSequenceContract()",
    "snippet": "@Test\n    public void testStringUtilsCharSequenceContract() {\n        final Class\u003cStringUtils\u003e c \u003d StringUtils.class;\n        // Methods that are expressly excluded from testStringUtilsCharSequenceContract()\n        final String[] excludeMethods \u003d {\n            \"public static int org.apache.commons.lang3.StringUtils.compare(java.lang.String,java.lang.String)\",\n            \"public static int org.apache.commons.lang3.StringUtils.compare(java.lang.String,java.lang.String,boolean)\",\n            \"public static int org.apache.commons.lang3.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)\",\n            \"public static int org.apache.commons.lang3.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String,boolean)\"\n        };\n        final Method[] methods \u003d c.getMethods();\n\n        for (final Method m : methods) {\n            String methodStr \u003d m.toString();\n            if (m.getReturnType() \u003d\u003d String.class || m.getReturnType() \u003d\u003d String[].class) {\n                // Assume this is mutable and ensure the first parameter is not CharSequence.\n                // It may be String or it may be something else (String[], Object, Object[]) so \n                // don\u0027t actively test for that.\n                final Class\u003c?\u003e[] params \u003d m.getParameterTypes();\n                if (params.length \u003e 0 \u0026\u0026 (params[0] \u003d\u003d CharSequence.class || params[0] \u003d\u003d CharSequence[].class)) {\n                    if (!ArrayUtils.contains(excludeMethods, methodStr)) {\n                        fail(\"The method \\\"\" + methodStr + \"\\\" appears to be mutable in spirit and therefore must not accept a CharSequence\");\n                    }\n                }\n            } else {\n                // Assume this is immutable in spirit and ensure the first parameter is not String.\n                // As above, it may be something other than CharSequence.\n                final Class\u003c?\u003e[] params \u003d m.getParameterTypes();\n                if (params.length \u003e 0 \u0026\u0026 (params[0] \u003d\u003d String.class || params[0] \u003d\u003d String[].class)) {\n                    if (!ArrayUtils.contains(excludeMethods, methodStr)) {\n                        fail(\"The method \\\"\" + methodStr + \"\\\" appears to be immutable in spirit and therefore must not accept a String\");\n                    }\n                }\n            }\n        }\n    }",
    "begin_line": 2459,
    "end_line": 2493,
    "comment": "",
    "child_ranges": [
      "(line 2460,col 9)-(line 2460,col 55)",
      "(line 2462,col 9)-(line 2467,col 10)",
      "(line 2468,col 9)-(line 2468,col 48)",
      "(line 2470,col 9)-(line 2492,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testToString()",
    "snippet": "@Test\n    public void testToString() throws UnsupportedEncodingException {\n        final String expectedString \u003d \"The quick brown fox jumped over the lazy dog.\";\n        byte[] expectedBytes \u003d expectedString.getBytes(Charset.defaultCharset());\n        // sanity check start\n        assertArrayEquals(expectedBytes, expectedString.getBytes());\n        // sanity check end\n        assertEquals(expectedString, StringUtils.toString(expectedBytes, null));\n        assertEquals(expectedString, StringUtils.toString(expectedBytes, SystemUtils.FILE_ENCODING));\n        String encoding \u003d \"UTF-16\";\n        expectedBytes \u003d expectedString.getBytes(Charset.forName(encoding));\n        assertEquals(expectedString, StringUtils.toString(expectedBytes, encoding));\n    }",
    "begin_line": 2502,
    "end_line": 2513,
    "comment": "/** \n * Tests  {@link StringUtils#toString(byte[],String)}\n * @throws java.io.UnsupportedEncodingException because the method under test max throw it\n * @see StringUtils#toString(byte[],String)\n */\n",
    "child_ranges": [
      "(line 2503,col 9)-(line 2503,col 86)",
      "(line 2504,col 9)-(line 2504,col 81)",
      "(line 2506,col 9)-(line 2506,col 68)",
      "(line 2508,col 9)-(line 2508,col 80)",
      "(line 2509,col 9)-(line 2509,col 101)",
      "(line 2510,col 9)-(line 2510,col 35)",
      "(line 2511,col 9)-(line 2511,col 75)",
      "(line 2512,col 9)-(line 2512,col 84)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testEscapeSurrogatePairs()",
    "snippet": "@Test\n    public void testEscapeSurrogatePairs() throws Exception {\n        assertEquals(\"\\uD83D\\uDE30\", StringEscapeUtils.escapeCsv(\"\\uD83D\\uDE30\"));\n        // Examples from https://en.wikipedia.org/wiki/UTF-16\n        assertEquals(\"\\uD800\\uDC00\", StringEscapeUtils.escapeCsv(\"\\uD800\\uDC00\"));\n        assertEquals(\"\\uD834\\uDD1E\", StringEscapeUtils.escapeCsv(\"\\uD834\\uDD1E\"));\n        assertEquals(\"\\uDBFF\\uDFFD\", StringEscapeUtils.escapeCsv(\"\\uDBFF\\uDFFD\"));\n        assertEquals(\"\\uDBFF\\uDFFD\", StringEscapeUtils.escapeHtml3(\"\\uDBFF\\uDFFD\"));\n        assertEquals(\"\\uDBFF\\uDFFD\", StringEscapeUtils.escapeHtml4(\"\\uDBFF\\uDFFD\"));\n        assertEquals(\"\\uDBFF\\uDFFD\", StringEscapeUtils.escapeXml(\"\\uDBFF\\uDFFD\"));\n    }",
    "begin_line": 2516,
    "end_line": 2525,
    "comment": "",
    "child_ranges": [
      "(line 2517,col 9)-(line 2517,col 82)",
      "(line 2519,col 9)-(line 2519,col 82)",
      "(line 2520,col 9)-(line 2520,col 82)",
      "(line 2521,col 9)-(line 2521,col 82)",
      "(line 2522,col 9)-(line 2522,col 84)",
      "(line 2523,col 9)-(line 2523,col 84)",
      "(line 2524,col 9)-(line 2524,col 82)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testEscapeSurrogatePairsLang858()",
    "snippet": "@Test\n    public void testEscapeSurrogatePairsLang858() {\n        assertEquals(\"\\\\uDBFF\\\\uDFFD\", StringEscapeUtils.escapeJava(\"\\uDBFF\\uDFFD\"));       //fail LANG-858\n        assertEquals(\"\\\\uDBFF\\\\uDFFD\", StringEscapeUtils.escapeEcmaScript(\"\\uDBFF\\uDFFD\")); //fail LANG-858\n    }",
    "begin_line": 2531,
    "end_line": 2534,
    "comment": "/** \n * Tests LANG-858.\n */\n",
    "child_ranges": [
      "(line 2532,col 9)-(line 2532,col 85)",
      "(line 2533,col 9)-(line 2533,col 91)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testUnescapeSurrogatePairs()",
    "snippet": "@Test\n    public void testUnescapeSurrogatePairs() throws Exception {\n        assertEquals(\"\\uD83D\\uDE30\", StringEscapeUtils.unescapeCsv(\"\\uD83D\\uDE30\"));\n        // Examples from https://en.wikipedia.org/wiki/UTF-16\n        assertEquals(\"\\uD800\\uDC00\", StringEscapeUtils.unescapeCsv(\"\\uD800\\uDC00\"));\n        assertEquals(\"\\uD834\\uDD1E\", StringEscapeUtils.unescapeCsv(\"\\uD834\\uDD1E\"));\n        assertEquals(\"\\uDBFF\\uDFFD\", StringEscapeUtils.unescapeCsv(\"\\uDBFF\\uDFFD\"));\n        assertEquals(\"\\uDBFF\\uDFFD\", StringEscapeUtils.unescapeHtml3(\"\\uDBFF\\uDFFD\"));\n        assertEquals(\"\\uDBFF\\uDFFD\", StringEscapeUtils.unescapeHtml4(\"\\uDBFF\\uDFFD\"));\n    }",
    "begin_line": 2537,
    "end_line": 2545,
    "comment": "",
    "child_ranges": [
      "(line 2538,col 9)-(line 2538,col 84)",
      "(line 2540,col 9)-(line 2540,col 84)",
      "(line 2541,col 9)-(line 2541,col 84)",
      "(line 2542,col 9)-(line 2542,col 84)",
      "(line 2543,col 9)-(line 2543,col 86)",
      "(line 2544,col 9)-(line 2544,col 86)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testAppendIfMissing()",
    "snippet": "@Test\n    public void testAppendIfMissing() {\n        assertEquals(\"appendIfMissing(null,null)\", null, StringUtils.appendIfMissing(null, null));\n        assertEquals(\"appendIfMissing(abc,null)\", \"abc\", StringUtils.appendIfMissing(\"abc\", null));\n        assertEquals(\"appendIfMissing(\\\"\\\",xyz)\", \"xyz\", StringUtils.appendIfMissing(\"\", \"xyz\"));\n        assertEquals(\"appendIfMissing(abc,xyz)\", \"abcxyz\", StringUtils.appendIfMissing(\"abc\", \"xyz\"));\n        assertEquals(\"appendIfMissing(abcxyz,xyz)\", \"abcxyz\", StringUtils.appendIfMissing(\"abcxyz\", \"xyz\"));\n        assertEquals(\"appendIfMissing(aXYZ,xyz)\", \"aXYZxyz\", StringUtils.appendIfMissing(\"aXYZ\", \"xyz\"));\n\n        assertEquals(\"appendIfMissing(null,null,null)\", null, StringUtils.appendIfMissing(null, null, (CharSequence[]) null));\n        assertEquals(\"appendIfMissing(abc,null,null)\", \"abc\", StringUtils.appendIfMissing(\"abc\", null, (CharSequence[]) null));\n        assertEquals(\"appendIfMissing(\\\"\\\",xyz,null))\", \"xyz\", StringUtils.appendIfMissing(\"\", \"xyz\", (CharSequence[]) null));\n        assertEquals(\"appendIfMissing(abc,xyz,{null})\", \"abcxyz\", StringUtils.appendIfMissing(\"abc\", \"xyz\", new CharSequence[]{null}));\n        assertEquals(\"appendIfMissing(abc,xyz,\\\"\\\")\", \"abc\", StringUtils.appendIfMissing(\"abc\", \"xyz\", \"\"));\n        assertEquals(\"appendIfMissing(abc,xyz,mno)\", \"abcxyz\", StringUtils.appendIfMissing(\"abc\", \"xyz\", \"mno\"));\n        assertEquals(\"appendIfMissing(abcxyz,xyz,mno)\", \"abcxyz\", StringUtils.appendIfMissing(\"abcxyz\", \"xyz\", \"mno\"));\n        assertEquals(\"appendIfMissing(abcmno,xyz,mno)\", \"abcmno\", StringUtils.appendIfMissing(\"abcmno\", \"xyz\", \"mno\"));\n        assertEquals(\"appendIfMissing(abcXYZ,xyz,mno)\", \"abcXYZxyz\", StringUtils.appendIfMissing(\"abcXYZ\", \"xyz\", \"mno\"));\n        assertEquals(\"appendIfMissing(abcMNO,xyz,mno)\", \"abcMNOxyz\", StringUtils.appendIfMissing(\"abcMNO\", \"xyz\", \"mno\"));\n    }",
    "begin_line": 2551,
    "end_line": 2569,
    "comment": "/** \n * Tests  {@code appendIfMissing}.\n */\n",
    "child_ranges": [
      "(line 2552,col 9)-(line 2552,col 98)",
      "(line 2553,col 9)-(line 2553,col 99)",
      "(line 2554,col 9)-(line 2554,col 97)",
      "(line 2555,col 9)-(line 2555,col 102)",
      "(line 2556,col 9)-(line 2556,col 108)",
      "(line 2557,col 9)-(line 2557,col 105)",
      "(line 2559,col 9)-(line 2559,col 126)",
      "(line 2560,col 9)-(line 2560,col 127)",
      "(line 2561,col 9)-(line 2561,col 126)",
      "(line 2562,col 9)-(line 2562,col 135)",
      "(line 2563,col 9)-(line 2563,col 108)",
      "(line 2564,col 9)-(line 2564,col 113)",
      "(line 2565,col 9)-(line 2565,col 119)",
      "(line 2566,col 9)-(line 2566,col 119)",
      "(line 2567,col 9)-(line 2567,col 122)",
      "(line 2568,col 9)-(line 2568,col 122)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testAppendIfMissingIgnoreCase()",
    "snippet": "@Test\n    public void testAppendIfMissingIgnoreCase() {\n        assertEquals(\"appendIfMissingIgnoreCase(null,null)\", null, StringUtils.appendIfMissingIgnoreCase(null, null));\n        assertEquals(\"appendIfMissingIgnoreCase(abc,null)\", \"abc\", StringUtils.appendIfMissingIgnoreCase(\"abc\", null));\n        assertEquals(\"appendIfMissingIgnoreCase(\\\"\\\",xyz)\", \"xyz\", StringUtils.appendIfMissingIgnoreCase(\"\", \"xyz\"));\n        assertEquals(\"appendIfMissingIgnoreCase(abc,xyz)\", \"abcxyz\", StringUtils.appendIfMissingIgnoreCase(\"abc\", \"xyz\"));\n        assertEquals(\"appendIfMissingIgnoreCase(abcxyz,xyz)\", \"abcxyz\", StringUtils.appendIfMissingIgnoreCase(\"abcxyz\", \"xyz\"));\n        assertEquals(\"appendIfMissingIgnoreCase(abcXYZ,xyz)\", \"abcXYZ\", StringUtils.appendIfMissingIgnoreCase(\"abcXYZ\", \"xyz\"));\n\n        assertEquals(\"appendIfMissingIgnoreCase(null,null,null)\", null, StringUtils.appendIfMissingIgnoreCase(null, null, (CharSequence[]) null));\n        assertEquals(\"appendIfMissingIgnoreCase(abc,null,null)\", \"abc\", StringUtils.appendIfMissingIgnoreCase(\"abc\", null, (CharSequence[]) null));\n        assertEquals(\"appendIfMissingIgnoreCase(\\\"\\\",xyz,null)\", \"xyz\", StringUtils.appendIfMissingIgnoreCase(\"\", \"xyz\", (CharSequence[]) null));\n        assertEquals(\"appendIfMissingIgnoreCase(abc,xyz,{null})\", \"abcxyz\", StringUtils.appendIfMissingIgnoreCase(\"abc\", \"xyz\", new CharSequence[]{null}));\n        assertEquals(\"appendIfMissingIgnoreCase(abc,xyz,\\\"\\\")\", \"abc\", StringUtils.appendIfMissingIgnoreCase(\"abc\", \"xyz\", \"\"));\n        assertEquals(\"appendIfMissingIgnoreCase(abc,xyz,mno)\", \"abcxyz\", StringUtils.appendIfMissingIgnoreCase(\"abc\", \"xyz\", \"mno\"));\n        assertEquals(\"appendIfMissingIgnoreCase(abcxyz,xyz,mno)\", \"abcxyz\", StringUtils.appendIfMissingIgnoreCase(\"abcxyz\", \"xyz\", \"mno\"));\n        assertEquals(\"appendIfMissingIgnoreCase(abcmno,xyz,mno)\", \"abcmno\", StringUtils.appendIfMissingIgnoreCase(\"abcmno\", \"xyz\", \"mno\"));\n        assertEquals(\"appendIfMissingIgnoreCase(abcXYZ,xyz,mno)\", \"abcXYZ\", StringUtils.appendIfMissingIgnoreCase(\"abcXYZ\", \"xyz\", \"mno\"));\n        assertEquals(\"appendIfMissingIgnoreCase(abcMNO,xyz,mno)\", \"abcMNO\", StringUtils.appendIfMissingIgnoreCase(\"abcMNO\", \"xyz\", \"mno\"));\n    }",
    "begin_line": 2575,
    "end_line": 2593,
    "comment": "/** \n * Tests  {@code appendIfMissingIgnoreCase}.\n */\n",
    "child_ranges": [
      "(line 2576,col 9)-(line 2576,col 118)",
      "(line 2577,col 9)-(line 2577,col 119)",
      "(line 2578,col 9)-(line 2578,col 117)",
      "(line 2579,col 9)-(line 2579,col 122)",
      "(line 2580,col 9)-(line 2580,col 128)",
      "(line 2581,col 9)-(line 2581,col 128)",
      "(line 2583,col 9)-(line 2583,col 146)",
      "(line 2584,col 9)-(line 2584,col 147)",
      "(line 2585,col 9)-(line 2585,col 145)",
      "(line 2586,col 9)-(line 2586,col 155)",
      "(line 2587,col 9)-(line 2587,col 128)",
      "(line 2588,col 9)-(line 2588,col 133)",
      "(line 2589,col 9)-(line 2589,col 139)",
      "(line 2590,col 9)-(line 2590,col 139)",
      "(line 2591,col 9)-(line 2591,col 139)",
      "(line 2592,col 9)-(line 2592,col 139)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testPrependIfMissing()",
    "snippet": "@Test\n    public void testPrependIfMissing() {\n        assertEquals(\"prependIfMissing(null,null)\", null, StringUtils.prependIfMissing(null, null));\n        assertEquals(\"prependIfMissing(abc,null)\", \"abc\", StringUtils.prependIfMissing(\"abc\", null));\n        assertEquals(\"prependIfMissing(\\\"\\\",xyz)\", \"xyz\", StringUtils.prependIfMissing(\"\", \"xyz\"));\n        assertEquals(\"prependIfMissing(abc,xyz)\", \"xyzabc\", StringUtils.prependIfMissing(\"abc\", \"xyz\"));\n        assertEquals(\"prependIfMissing(xyzabc,xyz)\", \"xyzabc\", StringUtils.prependIfMissing(\"xyzabc\", \"xyz\"));\n        assertEquals(\"prependIfMissing(XYZabc,xyz)\", \"xyzXYZabc\", StringUtils.prependIfMissing(\"XYZabc\", \"xyz\"));\n\n        assertEquals(\"prependIfMissing(null,null null)\", null, StringUtils.prependIfMissing(null, null, (CharSequence[]) null));\n        assertEquals(\"prependIfMissing(abc,null,null)\", \"abc\", StringUtils.prependIfMissing(\"abc\", null, (CharSequence[]) null));\n        assertEquals(\"prependIfMissing(\\\"\\\",xyz,null)\", \"xyz\", StringUtils.prependIfMissing(\"\", \"xyz\", (CharSequence[]) null));\n        assertEquals(\"prependIfMissing(abc,xyz,{null})\", \"xyzabc\", StringUtils.prependIfMissing(\"abc\", \"xyz\", new CharSequence[]{null}));\n        assertEquals(\"prependIfMissing(abc,xyz,\\\"\\\")\", \"abc\", StringUtils.prependIfMissing(\"abc\", \"xyz\", \"\"));\n        assertEquals(\"prependIfMissing(abc,xyz,mno)\", \"xyzabc\", StringUtils.prependIfMissing(\"abc\", \"xyz\", \"mno\"));\n        assertEquals(\"prependIfMissing(xyzabc,xyz,mno)\", \"xyzabc\", StringUtils.prependIfMissing(\"xyzabc\", \"xyz\", \"mno\"));\n        assertEquals(\"prependIfMissing(mnoabc,xyz,mno)\", \"mnoabc\", StringUtils.prependIfMissing(\"mnoabc\", \"xyz\", \"mno\"));\n        assertEquals(\"prependIfMissing(XYZabc,xyz,mno)\", \"xyzXYZabc\", StringUtils.prependIfMissing(\"XYZabc\", \"xyz\", \"mno\"));\n        assertEquals(\"prependIfMissing(MNOabc,xyz,mno)\", \"xyzMNOabc\", StringUtils.prependIfMissing(\"MNOabc\", \"xyz\", \"mno\"));\n    }",
    "begin_line": 2599,
    "end_line": 2617,
    "comment": "/** \n * Tests  {@code prependIfMissing}.\n */\n",
    "child_ranges": [
      "(line 2600,col 9)-(line 2600,col 100)",
      "(line 2601,col 9)-(line 2601,col 101)",
      "(line 2602,col 9)-(line 2602,col 99)",
      "(line 2603,col 9)-(line 2603,col 104)",
      "(line 2604,col 9)-(line 2604,col 110)",
      "(line 2605,col 9)-(line 2605,col 113)",
      "(line 2607,col 9)-(line 2607,col 128)",
      "(line 2608,col 9)-(line 2608,col 129)",
      "(line 2609,col 9)-(line 2609,col 127)",
      "(line 2610,col 9)-(line 2610,col 137)",
      "(line 2611,col 9)-(line 2611,col 110)",
      "(line 2612,col 9)-(line 2612,col 115)",
      "(line 2613,col 9)-(line 2613,col 121)",
      "(line 2614,col 9)-(line 2614,col 121)",
      "(line 2615,col 9)-(line 2615,col 124)",
      "(line 2616,col 9)-(line 2616,col 124)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testPrependIfMissingIgnoreCase()",
    "snippet": "@Test\n    public void testPrependIfMissingIgnoreCase() {\n        assertEquals(\"prependIfMissingIgnoreCase(null,null)\", null, StringUtils.prependIfMissingIgnoreCase(null, null));\n        assertEquals(\"prependIfMissingIgnoreCase(abc,null)\", \"abc\", StringUtils.prependIfMissingIgnoreCase(\"abc\", null));\n        assertEquals(\"prependIfMissingIgnoreCase(\\\"\\\",xyz)\", \"xyz\", StringUtils.prependIfMissingIgnoreCase(\"\", \"xyz\"));\n        assertEquals(\"prependIfMissingIgnoreCase(abc,xyz)\", \"xyzabc\", StringUtils.prependIfMissingIgnoreCase(\"abc\", \"xyz\"));\n        assertEquals(\"prependIfMissingIgnoreCase(xyzabc,xyz)\", \"xyzabc\", StringUtils.prependIfMissingIgnoreCase(\"xyzabc\", \"xyz\"));\n        assertEquals(\"prependIfMissingIgnoreCase(XYZabc,xyz)\", \"XYZabc\", StringUtils.prependIfMissingIgnoreCase(\"XYZabc\", \"xyz\"));\n\n        assertEquals(\"prependIfMissingIgnoreCase(null,null null)\", null, StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null));\n        assertEquals(\"prependIfMissingIgnoreCase(abc,null,null)\", \"abc\", StringUtils.prependIfMissingIgnoreCase(\"abc\", null, (CharSequence[]) null));\n        assertEquals(\"prependIfMissingIgnoreCase(\\\"\\\",xyz,null)\", \"xyz\", StringUtils.prependIfMissingIgnoreCase(\"\", \"xyz\", (CharSequence[]) null));\n        assertEquals(\"prependIfMissingIgnoreCase(abc,xyz,{null})\", \"xyzabc\", StringUtils.prependIfMissingIgnoreCase(\"abc\", \"xyz\", new CharSequence[]{null}));\n        assertEquals(\"prependIfMissingIgnoreCase(abc,xyz,\\\"\\\")\", \"abc\", StringUtils.prependIfMissingIgnoreCase(\"abc\", \"xyz\", \"\"));\n        assertEquals(\"prependIfMissingIgnoreCase(abc,xyz,mno)\", \"xyzabc\", StringUtils.prependIfMissingIgnoreCase(\"abc\", \"xyz\", \"mno\"));\n        assertEquals(\"prependIfMissingIgnoreCase(xyzabc,xyz,mno)\", \"xyzabc\", StringUtils.prependIfMissingIgnoreCase(\"xyzabc\", \"xyz\", \"mno\"));\n        assertEquals(\"prependIfMissingIgnoreCase(mnoabc,xyz,mno)\", \"mnoabc\", StringUtils.prependIfMissingIgnoreCase(\"mnoabc\", \"xyz\", \"mno\"));\n        assertEquals(\"prependIfMissingIgnoreCase(XYZabc,xyz,mno)\", \"XYZabc\", StringUtils.prependIfMissingIgnoreCase(\"XYZabc\", \"xyz\", \"mno\"));\n        assertEquals(\"prependIfMissingIgnoreCase(MNOabc,xyz,mno)\", \"MNOabc\", StringUtils.prependIfMissingIgnoreCase(\"MNOabc\", \"xyz\", \"mno\"));\n    }",
    "begin_line": 2623,
    "end_line": 2641,
    "comment": "/** \n * Tests  {@code prependIfMissingIgnoreCase}.\n */\n",
    "child_ranges": [
      "(line 2624,col 9)-(line 2624,col 120)",
      "(line 2625,col 9)-(line 2625,col 121)",
      "(line 2626,col 9)-(line 2626,col 119)",
      "(line 2627,col 9)-(line 2627,col 124)",
      "(line 2628,col 9)-(line 2628,col 130)",
      "(line 2629,col 9)-(line 2629,col 130)",
      "(line 2631,col 9)-(line 2631,col 148)",
      "(line 2632,col 9)-(line 2632,col 149)",
      "(line 2633,col 9)-(line 2633,col 147)",
      "(line 2634,col 9)-(line 2634,col 157)",
      "(line 2635,col 9)-(line 2635,col 130)",
      "(line 2636,col 9)-(line 2636,col 135)",
      "(line 2637,col 9)-(line 2637,col 141)",
      "(line 2638,col 9)-(line 2638,col 141)",
      "(line 2639,col 9)-(line 2639,col 141)",
      "(line 2640,col 9)-(line 2640,col 141)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testToEncodedString()",
    "snippet": "@Test\n    public void testToEncodedString() {\n        final String expectedString \u003d \"The quick brown fox jumped over the lazy dog.\";\n        String encoding \u003d SystemUtils.FILE_ENCODING;\n        byte[] expectedBytes \u003d expectedString.getBytes(Charset.defaultCharset());\n        // sanity check start\n        assertArrayEquals(expectedBytes, expectedString.getBytes());\n        // sanity check end\n        assertEquals(expectedString, StringUtils.toEncodedString(expectedBytes, Charset.defaultCharset()));\n        assertEquals(expectedString, StringUtils.toEncodedString(expectedBytes, Charset.forName(encoding)));\n        encoding \u003d \"UTF-16\";\n        expectedBytes \u003d expectedString.getBytes(Charset.forName(encoding));\n        assertEquals(expectedString, StringUtils.toEncodedString(expectedBytes, Charset.forName(encoding)));\n    }",
    "begin_line": 2649,
    "end_line": 2661,
    "comment": "/** \n * Tests  {@link StringUtils#toEncodedString(byte[],Charset)}\n * @see StringUtils#toEncodedString(byte[],Charset)\n */\n",
    "child_ranges": [
      "(line 2650,col 9)-(line 2650,col 86)",
      "(line 2651,col 9)-(line 2651,col 52)",
      "(line 2652,col 9)-(line 2652,col 81)",
      "(line 2654,col 9)-(line 2654,col 68)",
      "(line 2656,col 9)-(line 2656,col 107)",
      "(line 2657,col 9)-(line 2657,col 108)",
      "(line 2658,col 9)-(line 2658,col 28)",
      "(line 2659,col 9)-(line 2659,col 75)",
      "(line 2660,col 9)-(line 2660,col 108)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testWrap_StringChar()",
    "snippet": "@Test\n    public void testWrap_StringChar() {\n        assertNull(StringUtils.wrap(null, null));\n        assertNull(StringUtils.wrap(null, \u0027\\0\u0027));\n        assertNull(StringUtils.wrap(null, \u00271\u0027));\n\n        assertEquals(null, StringUtils.wrap(null, null));\n        assertEquals(\"\", StringUtils.wrap(\"\", \u0027\\0\u0027));\n        assertEquals(\"xabx\", StringUtils.wrap(\"ab\", \u0027x\u0027));\n        assertEquals(\"\\\"ab\\\"\", StringUtils.wrap(\"ab\", \u0027\\\"\u0027));\n        assertEquals(\"\\\"\\\"ab\\\"\\\"\", StringUtils.wrap(\"\\\"ab\\\"\", \u0027\\\"\u0027));\n        assertEquals(\"\u0027ab\u0027\", StringUtils.wrap(\"ab\", \u0027\\\u0027\u0027));\n        assertEquals(\"\u0027\u0027abcd\u0027\u0027\", StringUtils.wrap(\"\u0027abcd\u0027\", \u0027\\\u0027\u0027));\n        assertEquals(\"\u0027\\\"abcd\\\"\u0027\", StringUtils.wrap(\"\\\"abcd\\\"\", \u0027\\\u0027\u0027));\n        assertEquals(\"\\\"\u0027abcd\u0027\\\"\", StringUtils.wrap(\"\u0027abcd\u0027\", \u0027\\\"\u0027));\n    }",
    "begin_line": 2666,
    "end_line": 2680,
    "comment": "",
    "child_ranges": [
      "(line 2667,col 9)-(line 2667,col 49)",
      "(line 2668,col 9)-(line 2668,col 49)",
      "(line 2669,col 9)-(line 2669,col 48)",
      "(line 2671,col 9)-(line 2671,col 57)",
      "(line 2672,col 9)-(line 2672,col 53)",
      "(line 2673,col 9)-(line 2673,col 58)",
      "(line 2674,col 9)-(line 2674,col 61)",
      "(line 2675,col 9)-(line 2675,col 69)",
      "(line 2676,col 9)-(line 2676,col 59)",
      "(line 2677,col 9)-(line 2677,col 67)",
      "(line 2678,col 9)-(line 2678,col 71)",
      "(line 2679,col 9)-(line 2679,col 69)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.StringUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/StringUtilsTest.java",
    "signature": "org.apache.commons.lang3.StringUtilsTest.testWrap_StringString()",
    "snippet": "@Test\n    public void testWrap_StringString() {\n        assertNull(StringUtils.wrap(null, null));\n        assertNull(StringUtils.wrap(null, \"\"));\n        assertNull(StringUtils.wrap(null, \"1\"));\n\n        assertEquals(null, StringUtils.wrap(null, null));\n        assertEquals(\"\", StringUtils.wrap(\"\", \"\"));\n        assertEquals(\"ab\", StringUtils.wrap(\"ab\", null));\n        assertEquals(\"xabx\", StringUtils.wrap(\"ab\", \"x\"));\n        assertEquals(\"\\\"ab\\\"\", StringUtils.wrap(\"ab\", \"\\\"\"));\n        assertEquals(\"\\\"\\\"ab\\\"\\\"\", StringUtils.wrap(\"\\\"ab\\\"\", \"\\\"\"));\n        assertEquals(\"\u0027ab\u0027\", StringUtils.wrap(\"ab\", \"\u0027\"));\n        assertEquals(\"\u0027\u0027abcd\u0027\u0027\", StringUtils.wrap(\"\u0027abcd\u0027\", \"\u0027\"));\n        assertEquals(\"\u0027\\\"abcd\\\"\u0027\", StringUtils.wrap(\"\\\"abcd\\\"\", \"\u0027\"));\n        assertEquals(\"\\\"\u0027abcd\u0027\\\"\", StringUtils.wrap(\"\u0027abcd\u0027\", \"\\\"\"));\n    }",
    "begin_line": 2683,
    "end_line": 2698,
    "comment": "",
    "child_ranges": [
      "(line 2684,col 9)-(line 2684,col 49)",
      "(line 2685,col 9)-(line 2685,col 47)",
      "(line 2686,col 9)-(line 2686,col 48)",
      "(line 2688,col 9)-(line 2688,col 57)",
      "(line 2689,col 9)-(line 2689,col 51)",
      "(line 2690,col 9)-(line 2690,col 57)",
      "(line 2691,col 9)-(line 2691,col 58)",
      "(line 2692,col 9)-(line 2692,col 61)",
      "(line 2693,col 9)-(line 2693,col 69)",
      "(line 2694,col 9)-(line 2694,col 58)",
      "(line 2695,col 9)-(line 2695,col 66)",
      "(line 2696,col 9)-(line 2696,col 70)",
      "(line 2697,col 9)-(line 2697,col 69)"
    ]
  }
]