[
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.getElementsByTagName()",
    "snippet": "@Test public void getElementsByTagName() {\n        Document doc \u003d Jsoup.parse(reference);\n        List\u003cElement\u003e divs \u003d doc.getElementsByTag(\"div\");\n        assertEquals(2, divs.size());\n        assertEquals(\"div1\", divs.get(0).id());\n        assertEquals(\"div2\", divs.get(1).id());\n\n        List\u003cElement\u003e ps \u003d doc.getElementsByTag(\"p\");\n        assertEquals(2, ps.size());\n        assertEquals(\"Hello\", ((TextNode) ps.get(0).childNode(0)).getWholeText());\n        assertEquals(\"Another \", ((TextNode) ps.get(1).childNode(0)).getWholeText());\n        List\u003cElement\u003e ps2 \u003d doc.getElementsByTag(\"P\");\n        assertEquals(ps, ps2);\n\n        List\u003cElement\u003e imgs \u003d doc.getElementsByTag(\"img\");\n        assertEquals(\"foo.png\", imgs.get(0).attr(\"src\"));\n\n        List\u003cElement\u003e empty \u003d doc.getElementsByTag(\"wtf\");\n        assertEquals(0, empty.size());\n    }",
    "begin_line": 22,
    "end_line": 41,
    "comment": "",
    "child_ranges": [
      "(line 23,col 9)-(line 23,col 46)",
      "(line 24,col 9)-(line 24,col 57)",
      "(line 25,col 9)-(line 25,col 37)",
      "(line 26,col 9)-(line 26,col 47)",
      "(line 27,col 9)-(line 27,col 47)",
      "(line 29,col 9)-(line 29,col 53)",
      "(line 30,col 9)-(line 30,col 35)",
      "(line 31,col 9)-(line 31,col 82)",
      "(line 32,col 9)-(line 32,col 85)",
      "(line 33,col 9)-(line 33,col 54)",
      "(line 34,col 9)-(line 34,col 30)",
      "(line 36,col 9)-(line 36,col 57)",
      "(line 37,col 9)-(line 37,col 57)",
      "(line 39,col 9)-(line 39,col 58)",
      "(line 40,col 9)-(line 40,col 38)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.getNamespacedElementsByTag()",
    "snippet": "@Test public void getNamespacedElementsByTag() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cabc:def id\u003d1\u003eHello\u003c/abc:def\u003e\u003c/div\u003e\");\n        Elements els \u003d doc.getElementsByTag(\"abc:def\");\n        assertEquals(1, els.size());\n        assertEquals(\"1\", els.first().id());\n        assertEquals(\"abc:def\", els.first().tagName());\n    }",
    "begin_line": 43,
    "end_line": 49,
    "comment": "",
    "child_ranges": [
      "(line 44,col 9)-(line 44,col 79)",
      "(line 45,col 9)-(line 45,col 55)",
      "(line 46,col 9)-(line 46,col 36)",
      "(line 47,col 9)-(line 47,col 44)",
      "(line 48,col 9)-(line 48,col 55)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testGetElementById()",
    "snippet": "@Test public void testGetElementById() {\n        Document doc \u003d Jsoup.parse(reference);\n        Element div \u003d doc.getElementById(\"div1\");\n        assertEquals(\"div1\", div.id());\n        assertNull(doc.getElementById(\"none\"));\n\n        Document doc2 \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003e\u003cdiv id\u003d2\u003e\u003cp\u003eHello \u003cspan id\u003d2\u003eworld!\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\");\n        Element div2 \u003d doc2.getElementById(\"2\");\n        assertEquals(\"div\", div2.tagName()); // not the span\n        Element span \u003d div2.child(0).getElementById(\"2\"); // called from \u003cp\u003e context should be span\n        assertEquals(\"span\", span.tagName());\n    }",
    "begin_line": 51,
    "end_line": 62,
    "comment": "",
    "child_ranges": [
      "(line 52,col 9)-(line 52,col 46)",
      "(line 53,col 9)-(line 53,col 49)",
      "(line 54,col 9)-(line 54,col 39)",
      "(line 55,col 9)-(line 55,col 47)",
      "(line 57,col 9)-(line 57,col 109)",
      "(line 58,col 9)-(line 58,col 48)",
      "(line 59,col 9)-(line 59,col 44)",
      "(line 60,col 9)-(line 60,col 57)",
      "(line 61,col 9)-(line 61,col 45)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testGetText()",
    "snippet": "@Test public void testGetText() {\n        Document doc \u003d Jsoup.parse(reference);\n        assertEquals(\"Hello Another element\", doc.text());\n        assertEquals(\"Another element\", doc.getElementsByTag(\"p\").get(1).text());\n    }",
    "begin_line": 64,
    "end_line": 68,
    "comment": "",
    "child_ranges": [
      "(line 65,col 9)-(line 65,col 46)",
      "(line 66,col 9)-(line 66,col 58)",
      "(line 67,col 9)-(line 67,col 81)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testGetChildText()",
    "snippet": "@Test public void testGetChildText() {\n        Document doc \u003d Jsoup.parse(\"\u003cp\u003eHello \u003cb\u003ethere\u003c/b\u003e now\");\n        Element p \u003d doc.select(\"p\").first();\n        assertEquals(\"Hello there now\", p.text());\n        assertEquals(\"Hello now\", p.ownText());\n    }",
    "begin_line": 70,
    "end_line": 75,
    "comment": "",
    "child_ranges": [
      "(line 71,col 9)-(line 71,col 64)",
      "(line 72,col 9)-(line 72,col 44)",
      "(line 73,col 9)-(line 73,col 50)",
      "(line 74,col 9)-(line 74,col 47)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testNormalisesText()",
    "snippet": "@Test public void testNormalisesText() {\n        String h \u003d \"\u003cp\u003eHello\u003cp\u003eThere.\u003c/p\u003e \\n \u003cp\u003eHere \u003cb\u003eis\u003c/b\u003e \\n s\u003cb\u003eom\u003c/b\u003ee text.\";\n        Document doc \u003d Jsoup.parse(h);\n        String text \u003d doc.text();\n        assertEquals(\"Hello There. Here is some text.\", text);\n    }",
    "begin_line": 77,
    "end_line": 82,
    "comment": "",
    "child_ranges": [
      "(line 78,col 9)-(line 78,col 85)",
      "(line 79,col 9)-(line 79,col 38)",
      "(line 80,col 9)-(line 80,col 33)",
      "(line 81,col 9)-(line 81,col 62)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testKeepsPreText()",
    "snippet": "@Test public void testKeepsPreText() {\n        String h \u003d \"\u003cp\u003eHello \\n \\n there.\u003c/p\u003e \u003cdiv\u003e\u003cpre\u003e  What\u0027s \\n\\n  that?\u003c/pre\u003e\";\n        Document doc \u003d Jsoup.parse(h);\n        assertEquals(\"Hello there.   What\u0027s \\n\\n  that?\", doc.text());\n    }",
    "begin_line": 84,
    "end_line": 88,
    "comment": "",
    "child_ranges": [
      "(line 85,col 9)-(line 85,col 84)",
      "(line 86,col 9)-(line 86,col 38)",
      "(line 87,col 9)-(line 87,col 70)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testKeepsPreTextInCode()",
    "snippet": "@Test public void testKeepsPreTextInCode() {\n        String h \u003d \"\u003cpre\u003e\u003ccode\u003ecode\\n\\ncode\u003c/code\u003e\u003c/pre\u003e\";\n        Document doc \u003d Jsoup.parse(h);\n        assertEquals(\"code\\n\\ncode\", doc.text());\n        assertEquals(\"\u003cpre\u003e\u003ccode\u003ecode\\n\\ncode\u003c/code\u003e\u003c/pre\u003e\", doc.body().html());\n    }",
    "begin_line": 90,
    "end_line": 95,
    "comment": "",
    "child_ranges": [
      "(line 91,col 9)-(line 91,col 58)",
      "(line 92,col 9)-(line 92,col 38)",
      "(line 93,col 9)-(line 93,col 49)",
      "(line 94,col 9)-(line 94,col 80)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testGetSiblings()",
    "snippet": "@Test public void testGetSiblings() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eHello\u003cp id\u003d1\u003ethere\u003cp\u003ethis\u003cp\u003eis\u003cp\u003ean\u003cp id\u003dlast\u003eelement\u003c/div\u003e\");\n        Element p \u003d doc.getElementById(\"1\");\n        assertEquals(\"there\", p.text());\n        assertEquals(\"Hello\", p.previousElementSibling().text());\n        assertEquals(\"this\", p.nextElementSibling().text());\n        assertEquals(\"Hello\", p.firstElementSibling().text());\n        assertEquals(\"element\", p.lastElementSibling().text());\n    }",
    "begin_line": 97,
    "end_line": 105,
    "comment": "",
    "child_ranges": [
      "(line 98,col 9)-(line 98,col 106)",
      "(line 99,col 9)-(line 99,col 44)",
      "(line 100,col 9)-(line 100,col 40)",
      "(line 101,col 9)-(line 101,col 65)",
      "(line 102,col 9)-(line 102,col 60)",
      "(line 103,col 9)-(line 103,col 62)",
      "(line 104,col 9)-(line 104,col 63)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testGetParents()",
    "snippet": "@Test public void testGetParents() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eHello \u003cspan\u003ethere\u003c/span\u003e\u003c/div\u003e\");\n        Element span \u003d doc.select(\"span\").first();\n        Elements parents \u003d span.parents();\n\n        assertEquals(4, parents.size());\n        assertEquals(\"p\", parents.get(0).tagName());\n        assertEquals(\"div\", parents.get(1).tagName());\n        assertEquals(\"body\", parents.get(2).tagName());\n        assertEquals(\"html\", parents.get(3).tagName());\n    }",
    "begin_line": 107,
    "end_line": 117,
    "comment": "",
    "child_ranges": [
      "(line 108,col 9)-(line 108,col 77)",
      "(line 109,col 9)-(line 109,col 50)",
      "(line 110,col 9)-(line 110,col 42)",
      "(line 112,col 9)-(line 112,col 40)",
      "(line 113,col 9)-(line 113,col 52)",
      "(line 114,col 9)-(line 114,col 54)",
      "(line 115,col 9)-(line 115,col 55)",
      "(line 116,col 9)-(line 116,col 55)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testElementSiblingIndex()",
    "snippet": "@Test public void testElementSiblingIndex() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eOne\u003c/p\u003e...\u003cp\u003eTwo\u003c/p\u003e...\u003cp\u003eThree\u003c/p\u003e\");\n        Elements ps \u003d doc.select(\"p\");\n        assertTrue(0 \u003d\u003d ps.get(0).elementSiblingIndex());\n        assertTrue(1 \u003d\u003d ps.get(1).elementSiblingIndex());\n        assertTrue(2 \u003d\u003d ps.get(2).elementSiblingIndex());\n    }",
    "begin_line": 119,
    "end_line": 125,
    "comment": "",
    "child_ranges": [
      "(line 120,col 9)-(line 120,col 82)",
      "(line 121,col 9)-(line 121,col 38)",
      "(line 122,col 9)-(line 122,col 57)",
      "(line 123,col 9)-(line 123,col 57)",
      "(line 124,col 9)-(line 124,col 57)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testGetElementsWithClass()",
    "snippet": "@Test public void testGetElementsWithClass() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv class\u003d\u0027mellow yellow\u0027\u003e\u003cspan class\u003dmellow\u003eHello \u003cb class\u003d\u0027yellow\u0027\u003eYellow!\u003c/b\u003e\u003c/span\u003e\u003cp\u003eEmpty\u003c/p\u003e\u003c/div\u003e\");\n\n        List\u003cElement\u003e els \u003d doc.getElementsByClass(\"mellow\");\n        assertEquals(2, els.size());\n        assertEquals(\"div\", els.get(0).tagName());\n        assertEquals(\"span\", els.get(1).tagName());\n\n        List\u003cElement\u003e els2 \u003d doc.getElementsByClass(\"yellow\");\n        assertEquals(2, els2.size());\n        assertEquals(\"div\", els2.get(0).tagName());\n        assertEquals(\"b\", els2.get(1).tagName());\n\n        List\u003cElement\u003e none \u003d doc.getElementsByClass(\"solo\");\n        assertEquals(0, none.size());\n    }",
    "begin_line": 127,
    "end_line": 142,
    "comment": "",
    "child_ranges": [
      "(line 128,col 9)-(line 128,col 145)",
      "(line 130,col 9)-(line 130,col 61)",
      "(line 131,col 9)-(line 131,col 36)",
      "(line 132,col 9)-(line 132,col 50)",
      "(line 133,col 9)-(line 133,col 51)",
      "(line 135,col 9)-(line 135,col 62)",
      "(line 136,col 9)-(line 136,col 37)",
      "(line 137,col 9)-(line 137,col 51)",
      "(line 138,col 9)-(line 138,col 49)",
      "(line 140,col 9)-(line 140,col 60)",
      "(line 141,col 9)-(line 141,col 37)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testGetElementsWithAttribute()",
    "snippet": "@Test public void testGetElementsWithAttribute() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv style\u003d\u0027bold\u0027\u003e\u003cp title\u003dqux\u003e\u003cp\u003e\u003cb style\u003e\u003c/b\u003e\u003c/p\u003e\u003c/div\u003e\");\n        List\u003cElement\u003e els \u003d doc.getElementsByAttribute(\"style\");\n        assertEquals(2, els.size());\n        assertEquals(\"div\", els.get(0).tagName());\n        assertEquals(\"b\", els.get(1).tagName());\n\n        List\u003cElement\u003e none \u003d doc.getElementsByAttribute(\"class\");\n        assertEquals(0, none.size());\n    }",
    "begin_line": 144,
    "end_line": 153,
    "comment": "",
    "child_ranges": [
      "(line 145,col 9)-(line 145,col 96)",
      "(line 146,col 9)-(line 146,col 64)",
      "(line 147,col 9)-(line 147,col 36)",
      "(line 148,col 9)-(line 148,col 50)",
      "(line 149,col 9)-(line 149,col 48)",
      "(line 151,col 9)-(line 151,col 65)",
      "(line 152,col 9)-(line 152,col 37)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testGetElementsWithAttributeValue()",
    "snippet": "@Test public void testGetElementsWithAttributeValue() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv style\u003d\u0027bold\u0027\u003e\u003cp\u003e\u003cp\u003e\u003cb style\u003e\u003c/b\u003e\u003c/p\u003e\u003c/div\u003e\");\n        List\u003cElement\u003e els \u003d doc.getElementsByAttributeValue(\"style\", \"bold\");\n        assertEquals(1, els.size());\n        assertEquals(\"div\", els.get(0).tagName());\n\n        List\u003cElement\u003e none \u003d doc.getElementsByAttributeValue(\"style\", \"none\");\n        assertEquals(0, none.size());\n    }",
    "begin_line": 155,
    "end_line": 163,
    "comment": "",
    "child_ranges": [
      "(line 156,col 9)-(line 156,col 86)",
      "(line 157,col 9)-(line 157,col 77)",
      "(line 158,col 9)-(line 158,col 36)",
      "(line 159,col 9)-(line 159,col 50)",
      "(line 161,col 9)-(line 161,col 78)",
      "(line 162,col 9)-(line 162,col 37)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testClassDomMethods()",
    "snippet": "@Test public void testClassDomMethods() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cspan class\u003d\u0027mellow yellow\u0027\u003eHello \u003cb\u003eYellow\u003c/b\u003e\u003c/span\u003e\u003c/div\u003e\");\n        List\u003cElement\u003e els \u003d doc.getElementsByAttribute(\"class\");\n        Element span \u003d els.get(0);\n        assertEquals(\"mellow yellow\", span.className());\n        assertTrue(span.hasClass(\"mellow\"));\n        assertTrue(span.hasClass(\"yellow\"));\n        Set\u003cString\u003e classes \u003d span.classNames();\n        assertEquals(2, classes.size());\n        assertTrue(classes.contains(\"mellow\"));\n        assertTrue(classes.contains(\"yellow\"));\n\n        assertEquals(\"\", doc.className());\n        assertFalse(doc.hasClass(\"mellow\"));\n    }",
    "begin_line": 165,
    "end_line": 179,
    "comment": "",
    "child_ranges": [
      "(line 166,col 9)-(line 166,col 104)",
      "(line 167,col 9)-(line 167,col 64)",
      "(line 168,col 9)-(line 168,col 34)",
      "(line 169,col 9)-(line 169,col 56)",
      "(line 170,col 9)-(line 170,col 44)",
      "(line 171,col 9)-(line 171,col 44)",
      "(line 172,col 9)-(line 172,col 48)",
      "(line 173,col 9)-(line 173,col 40)",
      "(line 174,col 9)-(line 174,col 47)",
      "(line 175,col 9)-(line 175,col 47)",
      "(line 177,col 9)-(line 177,col 42)",
      "(line 178,col 9)-(line 178,col 44)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testClassUpdates()",
    "snippet": "@Test public void testClassUpdates() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv class\u003d\u0027mellow yellow\u0027\u003e\u003c/div\u003e\");\n        Element div \u003d doc.select(\"div\").first();\n\n        div.addClass(\"green\");\n        assertEquals(\"mellow yellow green\", div.className());\n        div.removeClass(\"red\"); // noop\n        div.removeClass(\"yellow\");\n        assertEquals(\"mellow green\", div.className());\n        div.toggleClass(\"green\").toggleClass(\"red\");\n        assertEquals(\"mellow red\", div.className());\n    }",
    "begin_line": 181,
    "end_line": 192,
    "comment": "",
    "child_ranges": [
      "(line 182,col 9)-(line 182,col 72)",
      "(line 183,col 9)-(line 183,col 48)",
      "(line 185,col 9)-(line 185,col 30)",
      "(line 186,col 9)-(line 186,col 61)",
      "(line 187,col 9)-(line 187,col 31)",
      "(line 188,col 9)-(line 188,col 34)",
      "(line 189,col 9)-(line 189,col 54)",
      "(line 190,col 9)-(line 190,col 52)",
      "(line 191,col 9)-(line 191,col 52)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testOuterHtml()",
    "snippet": "@Test public void testOuterHtml() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv title\u003d\u0027Tags \u0026amp;c.\u0027\u003e\u003cimg src\u003dfoo.png\u003e\u003cp\u003e\u003c!-- comment --\u003eHello\u003cp\u003ethere\");\n        assertEquals(\"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003cdiv title\u003d\\\"Tags \u0026amp;c.\\\"\u003e\u003cimg src\u003d\\\"foo.png\\\" /\u003e\u003cp\u003e\u003c!-- comment --\u003eHello\u003c/p\u003e\u003cp\u003ethere\u003c/p\u003e\u003c/div\u003e\u003c/body\u003e\u003c/html\u003e\",\n                TextUtil.stripNewlines(doc.outerHtml()));\n    }",
    "begin_line": 194,
    "end_line": 198,
    "comment": "",
    "child_ranges": [
      "(line 195,col 9)-(line 195,col 114)",
      "(line 196,col 9)-(line 197,col 57)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testInnerHtml()",
    "snippet": "@Test public void testInnerHtml() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\");\n        assertEquals(\"\u003cp\u003eHello\u003c/p\u003e\", doc.getElementsByTag(\"div\").get(0).html());\n    }",
    "begin_line": 200,
    "end_line": 203,
    "comment": "",
    "child_ranges": [
      "(line 201,col 9)-(line 201,col 62)",
      "(line 202,col 9)-(line 202,col 80)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testFormatHtml()",
    "snippet": "@Test public void testFormatHtml() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\");\n        assertEquals(\"\u003chtml\u003e\\n \u003chead\u003e\u003c/head\u003e\\n \u003cbody\u003e\\n  \u003cdiv\u003e\\n   \u003cp\u003eHello\u003c/p\u003e\\n  \u003c/div\u003e\\n \u003c/body\u003e\\n\u003c/html\u003e\", doc.html());\n    }",
    "begin_line": 205,
    "end_line": 208,
    "comment": "",
    "child_ranges": [
      "(line 206,col 9)-(line 206,col 62)",
      "(line 207,col 9)-(line 207,col 123)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testSetIndent()",
    "snippet": "@Test public void testSetIndent() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eHello\\nthere\u003c/p\u003e\u003c/div\u003e\");\n        doc.outputSettings().indentAmount(0);\n        assertEquals(\"\u003chtml\u003e\\n\u003chead\u003e\u003c/head\u003e\\n\u003cbody\u003e\\n\u003cdiv\u003e\\n\u003cp\u003eHello there\u003c/p\u003e\\n\u003c/div\u003e\\n\u003c/body\u003e\\n\u003c/html\u003e\", doc.html());\n    }",
    "begin_line": 210,
    "end_line": 214,
    "comment": "",
    "child_ranges": [
      "(line 211,col 9)-(line 211,col 69)",
      "(line 212,col 9)-(line 212,col 45)",
      "(line 213,col 9)-(line 213,col 119)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testNotPretty()",
    "snippet": "@Test public void testNotPretty() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e   \\n\u003cp\u003eHello\\n there\u003c/p\u003e\u003c/div\u003e\");\n        doc.outputSettings().prettyPrint(false);\n        assertEquals(\"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003cdiv\u003e   \\n\u003cp\u003eHello\\n there\u003c/p\u003e\u003c/div\u003e\u003c/body\u003e\u003c/html\u003e\", doc.html());\n    }",
    "begin_line": 216,
    "end_line": 220,
    "comment": "",
    "child_ranges": [
      "(line 217,col 9)-(line 217,col 75)",
      "(line 218,col 9)-(line 218,col 48)",
      "(line 219,col 9)-(line 219,col 112)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testEmptyElementFormatHtml()",
    "snippet": "@Test public void testEmptyElementFormatHtml() {\n        // don\u0027t put newlines into empty blocks\n        Document doc \u003d Jsoup.parse(\"\u003csection\u003e\u003cdiv\u003e\u003c/div\u003e\u003c/section\u003e\");\n        assertEquals(\"\\n\u003csection\u003e\\n \u003cdiv\u003e\u003c/div\u003e\\n\u003c/section\u003e\", doc.select(\"section\").first().outerHtml());\n    }",
    "begin_line": 222,
    "end_line": 226,
    "comment": "",
    "child_ranges": [
      "(line 224,col 9)-(line 224,col 69)",
      "(line 225,col 9)-(line 225,col 105)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testSetText()",
    "snippet": "@Test public void testSetText() {\n        String h \u003d \"\u003cdiv id\u003d1\u003eHello \u003cp\u003ethere \u003cb\u003enow\u003c/b\u003e\u003c/p\u003e\u003c/div\u003e\";\n        Document doc \u003d Jsoup.parse(h);\n        assertEquals(\"Hello there now\", doc.text()); // need to sort out node whitespace\n        assertEquals(\"there now\", doc.select(\"p\").get(0).text());\n\n        Element div \u003d doc.getElementById(\"1\").text(\"Gone\");\n        assertEquals(\"Gone\", div.text());\n        assertEquals(0, doc.select(\"p\").size());\n    }",
    "begin_line": 228,
    "end_line": 237,
    "comment": "",
    "child_ranges": [
      "(line 229,col 9)-(line 229,col 67)",
      "(line 230,col 9)-(line 230,col 38)",
      "(line 231,col 9)-(line 231,col 52)",
      "(line 232,col 9)-(line 232,col 65)",
      "(line 234,col 9)-(line 234,col 59)",
      "(line 235,col 9)-(line 235,col 41)",
      "(line 236,col 9)-(line 236,col 48)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testAddNewElement()",
    "snippet": "@Test public void testAddNewElement() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\");\n        Element div \u003d doc.getElementById(\"1\");\n        div.appendElement(\"p\").text(\"there\");\n        div.appendElement(\"P\").attr(\"class\", \"second\").text(\"now\");\n        assertEquals(\"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003cdiv id\u003d\\\"1\\\"\u003e\u003cp\u003eHello\u003c/p\u003e\u003cp\u003ethere\u003c/p\u003e\u003cp class\u003d\\\"second\\\"\u003enow\u003c/p\u003e\u003c/div\u003e\u003c/body\u003e\u003c/html\u003e\",\n                TextUtil.stripNewlines(doc.html()));\n\n        // check sibling index (with short circuit on reindexChildren):\n        Elements ps \u003d doc.select(\"p\");\n        for (int i \u003d 0; i \u003c ps.size(); i++) {\n            assertEquals(i, ps.get(i).siblingIndex);\n        }\n    }",
    "begin_line": 239,
    "end_line": 252,
    "comment": "",
    "child_ranges": [
      "(line 240,col 9)-(line 240,col 67)",
      "(line 241,col 9)-(line 241,col 46)",
      "(line 242,col 9)-(line 242,col 45)",
      "(line 243,col 9)-(line 243,col 67)",
      "(line 244,col 9)-(line 245,col 52)",
      "(line 248,col 9)-(line 248,col 38)",
      "(line 249,col 9)-(line 251,col 9)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testAppendRowToTable()",
    "snippet": "@Test public void testAppendRowToTable() {\n        Document doc \u003d Jsoup.parse(\"\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e1\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\");\n        Element table \u003d doc.select(\"table\").first();\n        table.append(\"\u003ctr\u003e\u003ctd\u003e2\u003c/td\u003e\u003c/tr\u003e\");\n\n        assertEquals(\"\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e1\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e2\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\", TextUtil.stripNewlines(doc.body().html()));\n    }",
    "begin_line": 254,
    "end_line": 260,
    "comment": "",
    "child_ranges": [
      "(line 255,col 9)-(line 255,col 73)",
      "(line 256,col 9)-(line 256,col 52)",
      "(line 257,col 9)-(line 257,col 44)",
      "(line 259,col 9)-(line 259,col 121)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testPrependRowToTable()",
    "snippet": "@Test public void testPrependRowToTable() {\n        Document doc \u003d Jsoup.parse(\"\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e1\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\");\n        Element table \u003d doc.select(\"table\").first();\n        table.prepend(\"\u003ctr\u003e\u003ctd\u003e2\u003c/td\u003e\u003c/tr\u003e\");\n\n        assertEquals(\"\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e2\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e1\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\", TextUtil.stripNewlines(doc.body().html()));\n\n        // check sibling index (reindexChildren):\n        Elements ps \u003d doc.select(\"tr\");\n        for (int i \u003d 0; i \u003c ps.size(); i++) {\n            assertEquals(i, ps.get(i).siblingIndex);\n        }\n    }",
    "begin_line": 262,
    "end_line": 274,
    "comment": "",
    "child_ranges": [
      "(line 263,col 9)-(line 263,col 73)",
      "(line 264,col 9)-(line 264,col 52)",
      "(line 265,col 9)-(line 265,col 45)",
      "(line 267,col 9)-(line 267,col 121)",
      "(line 270,col 9)-(line 270,col 39)",
      "(line 271,col 9)-(line 273,col 9)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testPrependElement()",
    "snippet": "@Test public void testPrependElement() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\");\n        Element div \u003d doc.getElementById(\"1\");\n        div.prependElement(\"p\").text(\"Before\");\n        assertEquals(\"Before\", div.child(0).text());\n        assertEquals(\"Hello\", div.child(1).text());\n    }",
    "begin_line": 276,
    "end_line": 282,
    "comment": "",
    "child_ranges": [
      "(line 277,col 9)-(line 277,col 67)",
      "(line 278,col 9)-(line 278,col 46)",
      "(line 279,col 9)-(line 279,col 47)",
      "(line 280,col 9)-(line 280,col 52)",
      "(line 281,col 9)-(line 281,col 51)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testAddNewText()",
    "snippet": "@Test public void testAddNewText() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\");\n        Element div \u003d doc.getElementById(\"1\");\n        div.appendText(\" there \u0026 now \u003e\");\n        assertEquals(\"\u003cp\u003eHello\u003c/p\u003e there \u0026amp; now \u0026gt;\", TextUtil.stripNewlines(div.html()));\n    }",
    "begin_line": 284,
    "end_line": 289,
    "comment": "",
    "child_ranges": [
      "(line 285,col 9)-(line 285,col 67)",
      "(line 286,col 9)-(line 286,col 46)",
      "(line 287,col 9)-(line 287,col 41)",
      "(line 288,col 9)-(line 288,col 94)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testPrependText()",
    "snippet": "@Test public void testPrependText() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\");\n        Element div \u003d doc.getElementById(\"1\");\n        div.prependText(\"there \u0026 now \u003e \");\n        assertEquals(\"there \u0026 now \u003e Hello\", div.text());\n        assertEquals(\"there \u0026amp; now \u0026gt; \u003cp\u003eHello\u003c/p\u003e\", TextUtil.stripNewlines(div.html()));\n    }",
    "begin_line": 291,
    "end_line": 297,
    "comment": "",
    "child_ranges": [
      "(line 292,col 9)-(line 292,col 67)",
      "(line 293,col 9)-(line 293,col 46)",
      "(line 294,col 9)-(line 294,col 42)",
      "(line 295,col 9)-(line 295,col 56)",
      "(line 296,col 9)-(line 296,col 94)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testAddNewHtml()",
    "snippet": "@Test public void testAddNewHtml() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\");\n        Element div \u003d doc.getElementById(\"1\");\n        div.append(\"\u003cp\u003ethere\u003c/p\u003e\u003cp\u003enow\u003c/p\u003e\");\n        assertEquals(\"\u003cp\u003eHello\u003c/p\u003e\u003cp\u003ethere\u003c/p\u003e\u003cp\u003enow\u003c/p\u003e\", TextUtil.stripNewlines(div.html()));\n\n        // check sibling index (no reindexChildren):\n        Elements ps \u003d doc.select(\"p\");\n        for (int i \u003d 0; i \u003c ps.size(); i++) {\n            assertEquals(i, ps.get(i).siblingIndex);\n        }\n    }",
    "begin_line": 299,
    "end_line": 310,
    "comment": "",
    "child_ranges": [
      "(line 300,col 9)-(line 300,col 67)",
      "(line 301,col 9)-(line 301,col 46)",
      "(line 302,col 9)-(line 302,col 45)",
      "(line 303,col 9)-(line 303,col 95)",
      "(line 306,col 9)-(line 306,col 38)",
      "(line 307,col 9)-(line 309,col 9)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testPrependNewHtml()",
    "snippet": "@Test public void testPrependNewHtml() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\");\n        Element div \u003d doc.getElementById(\"1\");\n        div.prepend(\"\u003cp\u003ethere\u003c/p\u003e\u003cp\u003enow\u003c/p\u003e\");\n        assertEquals(\"\u003cp\u003ethere\u003c/p\u003e\u003cp\u003enow\u003c/p\u003e\u003cp\u003eHello\u003c/p\u003e\", TextUtil.stripNewlines(div.html()));\n\n        // check sibling index (reindexChildren):\n        Elements ps \u003d doc.select(\"p\");\n        for (int i \u003d 0; i \u003c ps.size(); i++) {\n            assertEquals(i, ps.get(i).siblingIndex);\n        }\n    }",
    "begin_line": 312,
    "end_line": 323,
    "comment": "",
    "child_ranges": [
      "(line 313,col 9)-(line 313,col 67)",
      "(line 314,col 9)-(line 314,col 46)",
      "(line 315,col 9)-(line 315,col 46)",
      "(line 316,col 9)-(line 316,col 95)",
      "(line 319,col 9)-(line 319,col 38)",
      "(line 320,col 9)-(line 322,col 9)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testSetHtml()",
    "snippet": "@Test public void testSetHtml() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\");\n        Element div \u003d doc.getElementById(\"1\");\n        div.html(\"\u003cp\u003ethere\u003c/p\u003e\u003cp\u003enow\u003c/p\u003e\");\n        assertEquals(\"\u003cp\u003ethere\u003c/p\u003e\u003cp\u003enow\u003c/p\u003e\", TextUtil.stripNewlines(div.html()));\n    }",
    "begin_line": 325,
    "end_line": 330,
    "comment": "",
    "child_ranges": [
      "(line 326,col 9)-(line 326,col 67)",
      "(line 327,col 9)-(line 327,col 46)",
      "(line 328,col 9)-(line 328,col 43)",
      "(line 329,col 9)-(line 329,col 83)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testWrap()",
    "snippet": "@Test public void testWrap() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eHello\u003c/p\u003e\u003cp\u003eThere\u003c/p\u003e\u003c/div\u003e\");\n        Element p \u003d doc.select(\"p\").first();\n        p.wrap(\"\u003cdiv class\u003d\u0027head\u0027\u003e\u003c/div\u003e\");\n        assertEquals(\"\u003cdiv\u003e\u003cdiv class\u003d\\\"head\\\"\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\u003cp\u003eThere\u003c/p\u003e\u003c/div\u003e\", TextUtil.stripNewlines(doc.body().html()));\n\n        Element ret \u003d p.wrap(\"\u003cdiv\u003e\u003cdiv class\u003dfoo\u003e\u003c/div\u003e\u003cp\u003eWhat?\u003c/p\u003e\u003c/div\u003e\");\n        assertEquals(\"\u003cdiv\u003e\u003cdiv class\u003d\\\"head\\\"\u003e\u003cdiv\u003e\u003cdiv class\u003d\\\"foo\\\"\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\u003cp\u003eWhat?\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eThere\u003c/p\u003e\u003c/div\u003e\", \n                TextUtil.stripNewlines(doc.body().html()));\n\n        assertEquals(ret, p);\n    }",
    "begin_line": 332,
    "end_line": 343,
    "comment": "",
    "child_ranges": [
      "(line 333,col 9)-(line 333,col 74)",
      "(line 334,col 9)-(line 334,col 44)",
      "(line 335,col 9)-(line 335,col 43)",
      "(line 336,col 9)-(line 336,col 129)",
      "(line 338,col 9)-(line 338,col 77)",
      "(line 339,col 9)-(line 340,col 59)",
      "(line 342,col 9)-(line 342,col 29)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.before()",
    "snippet": "@Test public void before() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eHello\u003c/p\u003e\u003cp\u003eThere\u003c/p\u003e\u003c/div\u003e\");\n        Element p1 \u003d doc.select(\"p\").first();\n        p1.before(\"\u003cdiv\u003eone\u003c/div\u003e\u003cdiv\u003etwo\u003c/div\u003e\");\n        assertEquals(\"\u003cdiv\u003e\u003cdiv\u003eone\u003c/div\u003e\u003cdiv\u003etwo\u003c/div\u003e\u003cp\u003eHello\u003c/p\u003e\u003cp\u003eThere\u003c/p\u003e\u003c/div\u003e\", TextUtil.stripNewlines(doc.body().html()));\n        \n        doc.select(\"p\").last().before(\"\u003cp\u003eThree\u003c/p\u003e\u003c!-- four --\u003e\");\n        assertEquals(\"\u003cdiv\u003e\u003cdiv\u003eone\u003c/div\u003e\u003cdiv\u003etwo\u003c/div\u003e\u003cp\u003eHello\u003c/p\u003e\u003cp\u003eThree\u003c/p\u003e\u003c!-- four --\u003e\u003cp\u003eThere\u003c/p\u003e\u003c/div\u003e\", TextUtil.stripNewlines(doc.body().html()));\n    }",
    "begin_line": 345,
    "end_line": 353,
    "comment": "",
    "child_ranges": [
      "(line 346,col 9)-(line 346,col 74)",
      "(line 347,col 9)-(line 347,col 45)",
      "(line 348,col 9)-(line 348,col 50)",
      "(line 349,col 9)-(line 349,col 131)",
      "(line 351,col 9)-(line 351,col 67)",
      "(line 352,col 9)-(line 352,col 156)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.after()",
    "snippet": "@Test public void after() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eHello\u003c/p\u003e\u003cp\u003eThere\u003c/p\u003e\u003c/div\u003e\");\n        Element p1 \u003d doc.select(\"p\").first();\n        p1.after(\"\u003cdiv\u003eone\u003c/div\u003e\u003cdiv\u003etwo\u003c/div\u003e\");\n        assertEquals(\"\u003cdiv\u003e\u003cp\u003eHello\u003c/p\u003e\u003cdiv\u003eone\u003c/div\u003e\u003cdiv\u003etwo\u003c/div\u003e\u003cp\u003eThere\u003c/p\u003e\u003c/div\u003e\", TextUtil.stripNewlines(doc.body().html()));\n        \n        doc.select(\"p\").last().after(\"\u003cp\u003eThree\u003c/p\u003e\u003c!-- four --\u003e\");\n        assertEquals(\"\u003cdiv\u003e\u003cp\u003eHello\u003c/p\u003e\u003cdiv\u003eone\u003c/div\u003e\u003cdiv\u003etwo\u003c/div\u003e\u003cp\u003eThere\u003c/p\u003e\u003cp\u003eThree\u003c/p\u003e\u003c!-- four --\u003e\u003c/div\u003e\", TextUtil.stripNewlines(doc.body().html()));\n    }",
    "begin_line": 355,
    "end_line": 363,
    "comment": "",
    "child_ranges": [
      "(line 356,col 9)-(line 356,col 74)",
      "(line 357,col 9)-(line 357,col 45)",
      "(line 358,col 9)-(line 358,col 49)",
      "(line 359,col 9)-(line 359,col 131)",
      "(line 361,col 9)-(line 361,col 66)",
      "(line 362,col 9)-(line 362,col 156)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testWrapWithRemainder()",
    "snippet": "@Test public void testWrapWithRemainder() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\");\n        Element p \u003d doc.select(\"p\").first();\n        p.wrap(\"\u003cdiv class\u003d\u0027head\u0027\u003e\u003c/div\u003e\u003cp\u003eThere!\u003c/p\u003e\");\n        assertEquals(\"\u003cdiv\u003e\u003cdiv class\u003d\\\"head\\\"\u003e\u003cp\u003eHello\u003c/p\u003e\u003cp\u003eThere!\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\", TextUtil.stripNewlines(doc.body().html()));\n    }",
    "begin_line": 365,
    "end_line": 370,
    "comment": "",
    "child_ranges": [
      "(line 366,col 9)-(line 366,col 62)",
      "(line 367,col 9)-(line 367,col 44)",
      "(line 368,col 9)-(line 368,col 56)",
      "(line 369,col 9)-(line 369,col 130)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.testHasText()",
    "snippet": "@Test public void testHasText() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv\u003e\u003cp\u003eHello\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003c/div\u003e\");\n        Element div \u003d doc.select(\"div\").first();\n        Elements ps \u003d doc.select(\"p\");\n\n        assertTrue(div.hasText());\n        assertTrue(ps.first().hasText());\n        assertFalse(ps.last().hasText());\n    }",
    "begin_line": 372,
    "end_line": 380,
    "comment": "",
    "child_ranges": [
      "(line 373,col 9)-(line 373,col 69)",
      "(line 374,col 9)-(line 374,col 48)",
      "(line 375,col 9)-(line 375,col 38)",
      "(line 377,col 9)-(line 377,col 34)",
      "(line 378,col 9)-(line 378,col 41)",
      "(line 379,col 9)-(line 379,col 41)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.dataset()",
    "snippet": "@Test public void dataset() {\n        Document doc \u003d Jsoup.parse(\"\u003cdiv id\u003d1 data-name\u003djsoup class\u003dnew data-package\u003djar\u003eHello\u003c/div\u003e\u003cp id\u003d2\u003eHello\u003c/p\u003e\");\n        Element div \u003d doc.select(\"div\").first();\n        Map\u003cString, String\u003e dataset \u003d div.dataset();\n        Attributes attributes \u003d div.attributes();\n\n        // size, get, set, add, remove\n        assertEquals(2, dataset.size());\n        assertEquals(\"jsoup\", dataset.get(\"name\"));\n        assertEquals(\"jar\", dataset.get(\"package\"));\n\n        dataset.put(\"name\", \"jsoup updated\");\n        dataset.put(\"language\", \"java\");\n        dataset.remove(\"package\");\n\n        assertEquals(2, dataset.size());\n        assertEquals(4, attributes.size());\n        assertEquals(\"jsoup updated\", attributes.get(\"data-name\"));\n        assertEquals(\"jsoup updated\", dataset.get(\"name\"));\n        assertEquals(\"java\", attributes.get(\"data-language\"));\n        assertEquals(\"java\", dataset.get(\"language\"));\n\n        attributes.put(\"data-food\", \"bacon\");\n        assertEquals(3, dataset.size());\n        assertEquals(\"bacon\", dataset.get(\"food\"));\n\n        attributes.put(\"data-\", \"empty\");\n        assertEquals(null, dataset.get(\"\")); // data- is not a data attribute\n\n        Element p \u003d doc.select(\"p\").first();\n        assertEquals(0, p.dataset().size());\n\n    }",
    "begin_line": 382,
    "end_line": 414,
    "comment": "",
    "child_ranges": [
      "(line 383,col 9)-(line 383,col 120)",
      "(line 384,col 9)-(line 384,col 48)",
      "(line 385,col 9)-(line 385,col 52)",
      "(line 386,col 9)-(line 386,col 49)",
      "(line 389,col 9)-(line 389,col 40)",
      "(line 390,col 9)-(line 390,col 51)",
      "(line 391,col 9)-(line 391,col 52)",
      "(line 393,col 9)-(line 393,col 45)",
      "(line 394,col 9)-(line 394,col 40)",
      "(line 395,col 9)-(line 395,col 34)",
      "(line 397,col 9)-(line 397,col 40)",
      "(line 398,col 9)-(line 398,col 43)",
      "(line 399,col 9)-(line 399,col 67)",
      "(line 400,col 9)-(line 400,col 59)",
      "(line 401,col 9)-(line 401,col 62)",
      "(line 402,col 9)-(line 402,col 54)",
      "(line 404,col 9)-(line 404,col 45)",
      "(line 405,col 9)-(line 405,col 40)",
      "(line 406,col 9)-(line 406,col 51)",
      "(line 408,col 9)-(line 408,col 41)",
      "(line 409,col 9)-(line 409,col 44)",
      "(line 411,col 9)-(line 411,col 44)",
      "(line 412,col 9)-(line 412,col 44)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.ElementTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/ElementTest.java",
    "signature": "org.jsoup.nodes.ElementTest.parentlessToString()",
    "snippet": "@Test public void parentlessToString() {\n        Document doc \u003d Jsoup.parse(\"\u003cimg src\u003d\u0027foo\u0027\u003e\");\n        Element img \u003d doc.select(\"img\").first();\n        assertEquals(\"\\n\u003cimg src\u003d\\\"foo\\\" /\u003e\", img.toString());\n\n        img.remove(); // lost its parent\n        assertEquals(\"\u003cimg src\u003d\\\"foo\\\" /\u003e\", img.toString());\n    }",
    "begin_line": 416,
    "end_line": 423,
    "comment": "",
    "child_ranges": [
      "(line 417,col 9)-(line 417,col 54)",
      "(line 418,col 9)-(line 418,col 48)",
      "(line 419,col 9)-(line 419,col 62)",
      "(line 421,col 9)-(line 421,col 21)",
      "(line 422,col 9)-(line 422,col 60)"
    ]
  }
]