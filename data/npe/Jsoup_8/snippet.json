[
  {
    "name": "Jsoup.Jsoup#20",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.Jsoup()",
    "snippet": "private Jsoup() {}",
    "begin_line": 20,
    "end_line": 20,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#30",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.lang.String, java.lang.String)",
    "snippet": "public static Document parse(String html, String baseUri) {\n        return Parser.parse(html, baseUri);\n    }",
    "begin_line": 30,
    "end_line": 32,
    "comment": "/** \n * Parse HTML into a Document. The parser will make a sensible, balanced document tree out of any HTML.\n * @param html    HTML to parse\n * @param baseUri The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occurbefore the HTML declares a  {@code \u003cbase href\u003e} tag.\n * @return sane HTML\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#43",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.lang.String)",
    "snippet": "public static Document parse(String html) {\n        return Parser.parse(html, \"\");\n    }",
    "begin_line": 43,
    "end_line": 45,
    "comment": "/** \n * Parse HTML into a Document. As no base URI is specified, absolute URL detection relies on the HTML including a {@code \u003cbase href\u003e} tag.\n * @param html HTML to parse\n * @return sane HTML\n * @see #parse(String,String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.connect#58",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.connect(java.lang.String)",
    "snippet": "public static Connection connect(String url) {\n        return HttpConnection.connect(url);\n    }",
    "begin_line": 58,
    "end_line": 60,
    "comment": "/** \n * Creates a new  {@link Connection} to a URL. Use to fetch and parse a HTML page.\u003cp\u003e Use examples: \u003cul\u003e \u003cli\u003e\u003ccode\u003eDocument doc \u003d Jsoup.connect(\"http://example.com\").userAgent(\"Mozilla\").data(\"name\", \"jsoup\").get();\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003eDocument doc \u003d Jsoup.connect(\"http://example.com\").cookie(\"auth\", \"token\").post(); \u003c/ul\u003e\n * @param url URL to connect to. The protocol must be {@code http} or {@code https}.\n * @return the connection. You can add data, cookies, and headers; set the user-agent, referrer, method; and then execute.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#73",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.io.File, java.lang.String, java.lang.String)",
    "snippet": "public static Document parse(File in, String charsetName, String baseUri) throws IOException {\n        return DataUtil.load(in, charsetName, baseUri);\n    }",
    "begin_line": 73,
    "end_line": 75,
    "comment": "/** \n * Parse the contents of a file as HTML.\n * @param in          file to load HTML from\n * @param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, ifpresent, or fall back to  {@code UTF-8} (which is often safe to do).\n * @param baseUri     The URL where the HTML was retrieved from, to resolve relative links against.\n * @return sane HTML\n * @throws IOException if the file could not be found, or read, or if the charsetName is invalid.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#88",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.io.File, java.lang.String)",
    "snippet": "public static Document parse(File in, String charsetName) throws IOException {\n        return DataUtil.load(in, charsetName, in.getAbsolutePath());\n    }",
    "begin_line": 88,
    "end_line": 90,
    "comment": "/** \n * Parse the contents of a file as HTML. The location of the file is used as the base URI to qualify relative URLs.\n * @param in          file to load HTML from\n * @param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, ifpresent, or fall back to  {@code UTF-8} (which is often safe to do).\n * @return sane HTML\n * @throws IOException if the file could not be found, or read, or if the charsetName is invalid.\n * @see #parse(File,String,String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#103",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.io.InputStream, java.lang.String, java.lang.String)",
    "snippet": "public static Document parse(InputStream in, String charsetName, String baseUri) throws IOException {\n        return DataUtil.load(in, charsetName, baseUri);\n    }",
    "begin_line": 103,
    "end_line": 105,
    "comment": "/** \n * Read an input stream, and parse it to a Document.\n * @param in          input stream to read. Make sure to close it after parsing.\n * @param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, ifpresent, or fall back to  {@code UTF-8} (which is often safe to do).\n * @param baseUri     The URL where the HTML was retrieved from, to resolve relative links against.\n * @return sane HTML\n * @throws IOException if the file could not be found, or read, or if the charsetName is invalid.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parseBodyFragment#116",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parseBodyFragment(java.lang.String, java.lang.String)",
    "snippet": "public static Document parseBodyFragment(String bodyHtml, String baseUri) {\n        return Parser.parseBodyFragment(bodyHtml, baseUri);\n    }",
    "begin_line": 116,
    "end_line": 118,
    "comment": "/** \n * Parse a fragment of HTML, with the assumption that it forms the  {@code body} of the HTML.\n * @param bodyHtml body HTML fragment\n * @param baseUri  URL to resolve relative URLs against.\n * @return sane HTML document\n * @see Document#body()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parseBodyFragment#128",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parseBodyFragment(java.lang.String)",
    "snippet": "public static Document parseBodyFragment(String bodyHtml) {\n        return Parser.parseBodyFragment(bodyHtml, \"\");\n    }",
    "begin_line": 128,
    "end_line": 130,
    "comment": "/** \n * Parse a fragment of HTML, with the assumption that it forms the  {@code body} of the HTML.\n * @param bodyHtml body HTML fragment\n * @return sane HTML document\n * @see Document#body()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.parse#146",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.parse(java.net.URL, int)",
    "snippet": "public static Document parse(URL url, int timeoutMillis) throws IOException {\n        Connection con \u003d HttpConnection.connect(url);\n        con.timeout(timeoutMillis);\n        return con.get();\n    }",
    "begin_line": 146,
    "end_line": 150,
    "comment": "/** \n * Fetch a URL, and parse it as HTML. Provided for compatibility; in most cases use  {@link #connect(String)} instead.\u003cp\u003e The encoding character set is determined by the content-type header or http-equiv meta tag, or falls back to  {@code UTF-8}.\n * @param url           URL to fetch (with a GET). The protocol must be {@code http} or {@code https}.\n * @param timeoutMillis Connection and read timeout, in milliseconds. If exceeded, IOException is thrown.\n * @return The parsed HTML.\n * @throws IOException If the final server response !\u003d 200 OK (redirects are followed), or if there\u0027s an error readingthe response stream.\n * @see #connect(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.clean#163",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.clean(java.lang.String, java.lang.String, org.jsoup.safety.Whitelist)",
    "snippet": "public static String clean(String bodyHtml, String baseUri, Whitelist whitelist) {\n        Document dirty \u003d parseBodyFragment(bodyHtml, baseUri);\n        Cleaner cleaner \u003d new Cleaner(whitelist);\n        Document clean \u003d cleaner.clean(dirty);\n        return clean.body().html();\n    }",
    "begin_line": 163,
    "end_line": 168,
    "comment": "/** \n * Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes.\n * @param bodyHtml  input untrusted HMTL\n * @param baseUri   URL to resolve relative URLs against\n * @param whitelist white-list of permitted HTML elements\n * @return safe HTML\n * @see Cleaner#clean(Document)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.clean#180",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.clean(java.lang.String, org.jsoup.safety.Whitelist)",
    "snippet": "public static String clean(String bodyHtml, Whitelist whitelist) {\n        return clean(bodyHtml, \"\", whitelist);\n    }",
    "begin_line": 180,
    "end_line": 182,
    "comment": "/** \n * Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes.\n * @param bodyHtml  input untrusted HTML\n * @param whitelist white-list of permitted HTML elements\n * @return safe HTML\n * @see Cleaner#clean(Document)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Jsoup.isValid#192",
    "is_bug": true,
    "src_path": "org/jsoup/Jsoup.java",
    "class_name": "org.jsoup.Jsoup",
    "signature": "org.jsoup.Jsoup.isValid(java.lang.String, org.jsoup.safety.Whitelist)",
    "snippet": "public static boolean isValid(String bodyHtml, Whitelist whitelist) {\n        Document dirty \u003d parseBodyFragment(bodyHtml, \"\");\n        Cleaner cleaner \u003d new Cleaner(whitelist);\n        return cleaner.isValid(dirty);\n    }",
    "begin_line": 192,
    "end_line": 196,
    "comment": "/** \n * Test if the input HTML has only tags and attributes allowed by the Whitelist. Useful for form validation. The input HTML should still be run through the cleaner to set up enforced attributes, and to tidy the output.\n * @param bodyHtml HTML to test\n * @param whitelist whitelist to test against\n * @return true if no tags or attributes were removed; false otherwise\n * @see #clean(String,org.jsoup.safety.Whitelist) \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.join#19",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.join(java.util.Collection\u003cjava.lang.String\u003e, java.lang.String)",
    "snippet": "public static String join(Collection\u003cString\u003e strings, String sep) {\n        return join(strings.iterator(), sep);\n    }",
    "begin_line": 19,
    "end_line": 21,
    "comment": "/** \n * Join a collection of strings by a seperator\n * @param strings collection of string objects\n * @param sep string to place between strings\n * @return joined string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.join#29",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.join(java.util.Iterator\u003cjava.lang.String\u003e, java.lang.String)",
    "snippet": "public static String join(Iterator\u003cString\u003e strings, String sep) {\n        if (!strings.hasNext())\n            return \"\";\n\n        String start \u003d strings.next();\n        if (!strings.hasNext()) // only one, avoid builder\n            return start;\n\n        StringBuilder sb \u003d new StringBuilder(64).append(start);\n        while (strings.hasNext()) {\n            sb.append(sep);\n            sb.append(strings.next());\n        }\n        return sb.toString();\n    }",
    "begin_line": 29,
    "end_line": 43,
    "comment": "/** \n * Join a collection of strings by a seperator\n * @param strings iterator of string objects\n * @param sep string to place between strings\n * @return joined string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.padding#50",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.padding(int)",
    "snippet": "public static String padding(int width) {\n        if (width \u003c 0)\n            throw new IllegalArgumentException(\"width must be \u003e 0\");\n\n        if (width \u003c padding.length)\n            return padding[width];\n\n        char[] out \u003d new char[width];\n        for (int i \u003d 0; i \u003c width; i++)\n            out[i] \u003d \u0027 \u0027;\n        return String.valueOf(out);\n    }",
    "begin_line": 50,
    "end_line": 61,
    "comment": "/** \n * Returns space padding\n * @param width amount of padding desired\n * @return string of spaces * width\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.isBlank#68",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.isBlank(java.lang.String)",
    "snippet": "public static boolean isBlank(String string) {\n        if (string \u003d\u003d null || string.length() \u003d\u003d 0)\n            return true;\n\n        int l \u003d string.length();\n        for (int i \u003d 0; i \u003c l; i++) {\n            if (!Character.isWhitespace(string.codePointAt(i)))\n                return false;\n        }\n        return true;\n    }",
    "begin_line": 68,
    "end_line": 78,
    "comment": "/** \n * Tests if a string is blank: null, emtpy, or only whitespace (\" \", \\r\\n, \\t, etc)\n * @param string string to test\n * @return if string is blank\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.isNumeric#85",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.isNumeric(java.lang.String)",
    "snippet": "public static boolean isNumeric(String string) {\n        if (string \u003d\u003d null || string.length() \u003d\u003d 0)\n            return false;\n\n        int l \u003d string.length();\n        for (int i \u003d 0; i \u003c l; i++) {\n            if (!Character.isDigit(string.codePointAt(i)))\n                return false;\n        }\n        return true;\n    }",
    "begin_line": 85,
    "end_line": 95,
    "comment": "/** \n * Tests if a string is numeric, i.e. contains only digit characters\n * @param string string to test\n * @return true if only digit chars, false if empty or null or contains non-digit chrs\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringUtil.normaliseWhitespace#97",
    "is_bug": true,
    "src_path": "org/jsoup/helper/StringUtil.java",
    "class_name": "org.jsoup.helper.StringUtil",
    "signature": "org.jsoup.helper.StringUtil.normaliseWhitespace(java.lang.String)",
    "snippet": "public static String normaliseWhitespace(String string) {\n        StringBuilder sb \u003d new StringBuilder(string.length());\n\n        boolean lastWasWhite \u003d false;\n        boolean modified \u003d false;\n\n        int l \u003d string.length();\n        for (int i \u003d 0; i \u003c l; i++) {\n            int c \u003d string.codePointAt(i);\n            if (Character.isWhitespace(c)) {\n                if (lastWasWhite) {\n                    modified \u003d true;\n                    continue;\n                }\n                if (c !\u003d \u0027 \u0027)\n                    modified \u003d true;\n                sb.append(\u0027 \u0027);\n                lastWasWhite \u003d true;\n            }\n            else {\n                sb.appendCodePoint(c);\n                lastWasWhite \u003d false;\n            }\n        }\n        return modified ? sb.toString() : string;\n    }",
    "begin_line": 97,
    "end_line": 122,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.Validate#8",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.Validate()",
    "snippet": "private Validate() {}",
    "begin_line": 8,
    "end_line": 8,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.notNull#14",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.notNull(java.lang.Object)",
    "snippet": "public static void notNull(Object obj) {\n        if (obj \u003d\u003d null)\n            throw new IllegalArgumentException(\"Object must not be null\");\n    }",
    "begin_line": 14,
    "end_line": 17,
    "comment": "/** \n * Validates that the obect is not null\n * @param obj object to test\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.notNull#24",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.notNull(java.lang.Object, java.lang.String)",
    "snippet": "public static void notNull(Object obj, String msg) {\n        if (obj \u003d\u003d null)\n            throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 24,
    "end_line": 27,
    "comment": "/** \n * Validates that the object is not null\n * @param obj object to test\n * @param msg message to output if validation fails\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.isTrue#33",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.isTrue(boolean)",
    "snippet": "public static void isTrue(boolean val) {\n        if (!val)\n            throw new IllegalArgumentException(\"Must be true\");\n    }",
    "begin_line": 33,
    "end_line": 36,
    "comment": "/** \n * Validates that the value is true\n * @param val object to test\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.isTrue#43",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.isTrue(boolean, java.lang.String)",
    "snippet": "public static void isTrue(boolean val, String msg) {\n        if (!val)\n            throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 43,
    "end_line": 46,
    "comment": "/** \n * Validates that the value is true\n * @param val object to test\n * @param msg message to output if validation fails\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.noNullElements#52",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.noNullElements(java.lang.Object[])",
    "snippet": "public static void noNullElements(Object[] objects) {\n        noNullElements(objects, \"Array must not contain any null objects\");\n    }",
    "begin_line": 52,
    "end_line": 54,
    "comment": "/** \n * Validates that the array contains no null elements\n * @param objects the array to test\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.noNullElements#61",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.noNullElements(java.lang.Object[], java.lang.String)",
    "snippet": "public static void noNullElements(Object[] objects, String msg) {\n        for (Object obj : objects)\n            if (obj \u003d\u003d null)\n                throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 61,
    "end_line": 65,
    "comment": "/** \n * Validates that the array contains no null elements\n * @param objects the array to test\n * @param msg message to output if validation fails\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.notEmpty#71",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.notEmpty(java.lang.String)",
    "snippet": "public static void notEmpty(String string) {\n        if (string \u003d\u003d null || string.length() \u003d\u003d 0)\n            throw new IllegalArgumentException(\"String must not be empty\");\n    }",
    "begin_line": 71,
    "end_line": 74,
    "comment": "/** \n * Validates that the string is not empty\n * @param string the string to test\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Validate.notEmpty#81",
    "is_bug": true,
    "src_path": "org/jsoup/helper/Validate.java",
    "class_name": "org.jsoup.helper.Validate",
    "signature": "org.jsoup.helper.Validate.notEmpty(java.lang.String, java.lang.String)",
    "snippet": "public static void notEmpty(String string, String msg) {\n        if (string \u003d\u003d null || string.length() \u003d\u003d 0)\n            throw new IllegalArgumentException(msg);\n    }",
    "begin_line": 81,
    "end_line": 84,
    "comment": "/** \n * Validates that the string is not empty\n * @param string the string to test\n * @param msg message to output if validation fails\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.Attribute#21",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.Attribute(java.lang.String, java.lang.String)",
    "snippet": "public Attribute(String key, String value) {\n        Validate.notEmpty(key);\n        Validate.notNull(value);\n        this.key \u003d key.trim().toLowerCase();\n        this.value \u003d value;\n    }",
    "begin_line": 21,
    "end_line": 26,
    "comment": "/** \n * Create a new attribute from unencoded (raw) key and value.\n * @param key attribute key\n * @param value attribute value\n * @see #createFromEncoded\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.getKey#32",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.getKey()",
    "snippet": "public String getKey() {\n        return key;\n    }",
    "begin_line": 32,
    "end_line": 34,
    "comment": "/** \n * Get the attribute key.\n * @return the attribute key\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.setKey#40",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.setKey(java.lang.String)",
    "snippet": "public void setKey(String key) {\n        Validate.notEmpty(key);\n        this.key \u003d key.trim().toLowerCase();\n    }",
    "begin_line": 40,
    "end_line": 43,
    "comment": "/** \n * Set the attribute key. Gets normalised as per the constructor method.\n * @param key the new key; must not be null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.getValue#49",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.getValue()",
    "snippet": "public String getValue() {\n        return value;\n    }",
    "begin_line": 49,
    "end_line": 51,
    "comment": "/** \n * Get the attribute value.\n * @return the attribute value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.setValue#57",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.setValue(java.lang.String)",
    "snippet": "public String setValue(String value) {\n        Validate.notNull(value);\n        String old \u003d this.value;\n        this.value \u003d value;\n        return old;\n    }",
    "begin_line": 57,
    "end_line": 62,
    "comment": "/** \n * Set the attribute value.\n * @param value the new attribute value; must not be null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.html#68",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.html()",
    "snippet": "public String html() {\n        return key + \"\u003d\\\"\" + Entities.escape(value, (new Document(\"\")).outputSettings()) + \"\\\"\";\n    }",
    "begin_line": 68,
    "end_line": 70,
    "comment": "/** \n * Get the HTML representation of this attribute; e.g.  {@code href\u003d\"index.html\"}.\n * @return HTML\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.html#72",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.html(java.lang.StringBuilder, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "protected void html(StringBuilder accum, Document.OutputSettings out) {\n        accum\n            .append(key)\n            .append(\"\u003d\\\"\")\n            .append(Entities.escape(value, out))\n            .append(\"\\\"\");\n    }",
    "begin_line": 72,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.toString#84",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.toString()",
    "snippet": "public String toString() {\n        return html();\n    }",
    "begin_line": 84,
    "end_line": 86,
    "comment": "/** \n * Get the string representation of this attribute, implemented as  {@link #html()}.\n * @return string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.createFromEncoded#94",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.createFromEncoded(java.lang.String, java.lang.String)",
    "snippet": "public static Attribute createFromEncoded(String unencodedKey, String encodedValue) {\n        String value \u003d Entities.unescape(encodedValue);\n        return new Attribute(unencodedKey, value);\n    }",
    "begin_line": 94,
    "end_line": 97,
    "comment": "/** \n * Create a new Attribute from an unencoded key and a HMTL attribute encoded value.\n * @param unencodedKey assumes the key is not encoded, as can be only run of simple \\w chars.\n * @param encodedValue HTML attribute encoded value\n * @return attribute\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.isDataAttribute#99",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.isDataAttribute()",
    "snippet": "protected boolean isDataAttribute() {\n        return key.startsWith(Attributes.dataPrefix) \u0026\u0026 key.length() \u003e Attributes.dataPrefix.length();\n    }",
    "begin_line": 99,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.equals#104",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        if (this \u003d\u003d o) return true;\n        if (!(o instanceof Attribute)) return false;\n\n        Attribute attribute \u003d (Attribute) o;\n\n        if (key !\u003d null ? !key.equals(attribute.key) : attribute.key !\u003d null) return false;\n        if (value !\u003d null ? !value.equals(attribute.value) : attribute.value !\u003d null) return false;\n\n        return true;\n    }",
    "begin_line": 104,
    "end_line": 114,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.hashCode#117",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attribute.java",
    "class_name": "org.jsoup.nodes.Attribute",
    "signature": "org.jsoup.nodes.Attribute.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        int result \u003d key !\u003d null ? key.hashCode() : 0;\n        result \u003d 31 * result + (value !\u003d null ? value.hashCode() : 0);\n        return result;\n    }",
    "begin_line": 117,
    "end_line": 121,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.get#29",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.get(java.lang.String)",
    "snippet": "public String get(String key) {\n        Validate.notEmpty(key);\n        \n        Attribute attr \u003d attributes.get(key.toLowerCase());\n        return attr !\u003d null ? attr.getValue() : \"\";\n    }",
    "begin_line": 29,
    "end_line": 34,
    "comment": "/** \n * Get an attribute value by key.\n * @param key the attribute key\n * @return the attribute value if set; or empty string if not set.\n * @see #hasKey(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.put#41",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.put(java.lang.String, java.lang.String)",
    "snippet": "public void put(String key, String value) {\n        Attribute attr \u003d new Attribute(key, value);\n        put(attr);\n    }",
    "begin_line": 41,
    "end_line": 44,
    "comment": "/** \n * Set a new attribute, or replace an existing one by key.\n * @param key attribute key\n * @param value attribute value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.put#50",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.put(org.jsoup.nodes.Attribute)",
    "snippet": "public void put(Attribute attribute) {\n        Validate.notNull(attribute);\n        attributes.put(attribute.getKey(), attribute);\n    }",
    "begin_line": 50,
    "end_line": 53,
    "comment": "/** \n * Set a new attribute, or replace an existing one by key.\n * @param attribute attribute\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.remove#59",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.remove(java.lang.String)",
    "snippet": "public void remove(String key) {\n        Validate.notEmpty(key);\n        attributes.remove(key.toLowerCase());\n    }",
    "begin_line": 59,
    "end_line": 62,
    "comment": "/** \n * Remove an attribute by key.\n * @param key attribute key to remove\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.hasKey#69",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.hasKey(java.lang.String)",
    "snippet": "public boolean hasKey(String key) {\n        return attributes.containsKey(key.toLowerCase());\n    }",
    "begin_line": 69,
    "end_line": 71,
    "comment": "/** \n * Tests if these attributes contain an attribute with this key.\n * @param key key to check for\n * @return true if key exists, false otherwise\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.size#77",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.size()",
    "snippet": "public int size() {\n        return attributes.size();\n    }",
    "begin_line": 77,
    "end_line": 79,
    "comment": "/** \n * Get the number of attributes in this set.\n * @return size\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.addAll#85",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.addAll(org.jsoup.nodes.Attributes)",
    "snippet": "public void addAll(Attributes incoming) {\n        attributes.putAll(incoming.attributes);\n    }",
    "begin_line": 85,
    "end_line": 87,
    "comment": "/** \n * Add all the attributes from the incoming set to this set.\n * @param incoming attributes to add to these attributes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.iterator#89",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.iterator()",
    "snippet": "public Iterator\u003cAttribute\u003e iterator() {\n        return asList().iterator();\n    }",
    "begin_line": 89,
    "end_line": 91,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.asList#98",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.asList()",
    "snippet": "public List\u003cAttribute\u003e asList() {\n        List\u003cAttribute\u003e list \u003d new ArrayList\u003cAttribute\u003e(attributes.size());\n        for (Map.Entry\u003cString, Attribute\u003e entry : attributes.entrySet()) {\n            list.add(entry.getValue());\n        }\n        return Collections.unmodifiableList(list);\n    }",
    "begin_line": 98,
    "end_line": 104,
    "comment": "/** \n * Get the attributes as a List, for iteration. Do not modify the keys of the attributes via this view, as changes to keys will not be recognised in the containing set.\n * @return an view of the attributes as a List.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.dataset#111",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.dataset()",
    "snippet": "public Map\u003cString, String\u003e dataset() {\n        return new Dataset();\n    }",
    "begin_line": 111,
    "end_line": 113,
    "comment": "/** \n * Retrieves a filtered view of attributes that are HTML5 custom data attributes; that is, attributes with keys starting with  {@code data-}.\n * @return map of custom data attributes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.html#119",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.html()",
    "snippet": "public String html() {\n        StringBuilder accum \u003d new StringBuilder();\n        html(accum, (new Document(\"\")).outputSettings()); // output settings a bit funky, but this html() seldom used\n        return accum.toString();\n    }",
    "begin_line": 119,
    "end_line": 123,
    "comment": "/** \n * Get the HTML representation of these attributes.\n * @return HTML\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.html#125",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.html(java.lang.StringBuilder, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "void html(StringBuilder accum, Document.OutputSettings out) {\n        for (Map.Entry\u003cString, Attribute\u003e entry : attributes.entrySet()) {\n            Attribute attribute \u003d entry.getValue();\n            accum.append(\" \");\n            attribute.html(accum, out);\n        }\n    }",
    "begin_line": 125,
    "end_line": 131,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.toString#133",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.toString()",
    "snippet": "public String toString() {\n        return html();\n    }",
    "begin_line": 133,
    "end_line": 135,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.equals#138",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        if (this \u003d\u003d o) return true;\n        if (!(o instanceof Attributes)) return false;\n        \n        Attributes that \u003d (Attributes) o;\n        \n        if (attributes !\u003d null ? !attributes.equals(that.attributes) : that.attributes !\u003d null) return false;\n        \n        return true;\n    }",
    "begin_line": 138,
    "end_line": 147,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attributes.hashCode#150",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        return attributes !\u003d null ? attributes.hashCode() : 0;\n    }",
    "begin_line": 150,
    "end_line": 152,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Dataset.entrySet#156",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.entrySet()",
    "snippet": "public Set\u003cEntry\u003cString, String\u003e\u003e entrySet() {\n            return new EntrySet();\n        }",
    "begin_line": 156,
    "end_line": 158,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Dataset.put#161",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.put(java.lang.String, java.lang.String)",
    "snippet": "@Override\n        public String put(String key, String value) {\n            String dataKey \u003d dataKey(key);\n            String oldValue \u003d hasKey(dataKey) ? attributes.get(dataKey).getValue() : null;\n            Attribute attr \u003d new Attribute(dataKey, value);\n            attributes.put(dataKey, attr);\n            return oldValue;\n        }",
    "begin_line": 161,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EntrySet.iterator#170",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.iterator()",
    "snippet": "public Iterator\u003cMap.Entry\u003cString, String\u003e\u003e iterator() {\n                return new DatasetIterator();\n            }",
    "begin_line": 170,
    "end_line": 172,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EntrySet.size#174",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.size()",
    "snippet": "public int size() {\n                int count \u003d 0;\n                Iterator iter \u003d new DatasetIterator();\n                while (iter.hasNext())\n                    count++;\n                return count;\n            }",
    "begin_line": 174,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetIterator.hasNext#186",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.hasNext()",
    "snippet": "public boolean hasNext() {\n                while (attrIter.hasNext()) {\n                    attr \u003d attrIter.next();\n                    if (attr.isDataAttribute()) return true;\n                }\n                return false;\n            }",
    "begin_line": 186,
    "end_line": 192,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetIterator.next#194",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.next()",
    "snippet": "public Entry\u003cString, String\u003e next() {\n                return new Attribute(attr.getKey().substring(dataPrefix.length()), attr.getValue());\n            }",
    "begin_line": 194,
    "end_line": 196,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetIterator.remove#198",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.remove()",
    "snippet": "public void remove() {\n                attributes.remove(attr.getKey());\n            }",
    "begin_line": 198,
    "end_line": 200,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetIterator.dataKey#204",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Attributes.java",
    "class_name": "org.jsoup.nodes.Attributes",
    "signature": "org.jsoup.nodes.Attributes.dataKey(java.lang.String)",
    "snippet": "private static String dataKey(String key) {\n        return dataPrefix + key;\n    }",
    "begin_line": 204,
    "end_line": 206,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.Document#25",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.Document(java.lang.String)",
    "snippet": "public Document(String baseUri) {\n        super(Tag.valueOf(\"#root\"), baseUri);\n    }",
    "begin_line": 25,
    "end_line": 27,
    "comment": "/** \n * Create a new, empty Document.\n * @param baseUri base URI of document\n * @see org.jsoup.Jsoup#parse\n * @see #createShell\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.createShell#34",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.createShell(java.lang.String)",
    "snippet": "static public Document createShell(String baseUri) {\n        Validate.notNull(baseUri);\n\n        Document doc \u003d new Document(baseUri);\n        Element html \u003d doc.appendElement(\"html\");\n        html.appendElement(\"head\");\n        html.appendElement(\"body\");\n\n        return doc;\n    }",
    "begin_line": 34,
    "end_line": 43,
    "comment": "/** \n * Create a valid, empty shell of a document, suitable for adding more elements to.\n * @param baseUri baseUri of document\n * @return document with html, head, and body elements.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.head#49",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.head()",
    "snippet": "public Element head() {\n        return findFirstElementByTagName(\"head\", this);\n    }",
    "begin_line": 49,
    "end_line": 51,
    "comment": "/** \n * Accessor to the document\u0027s  {@code head} element.\n * @return {@code head}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.body#57",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.body()",
    "snippet": "public Element body() {\n        return findFirstElementByTagName(\"body\", this);\n    }",
    "begin_line": 57,
    "end_line": 59,
    "comment": "/** \n * Accessor to the document\u0027s  {@code body} element.\n * @return {@code body}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.title#65",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.title()",
    "snippet": "public String title() {\n        Element titleEl \u003d getElementsByTag(\"title\").first();\n        return titleEl !\u003d null ? titleEl.text().trim() : \"\";\n    }",
    "begin_line": 65,
    "end_line": 68,
    "comment": "/** \n * Get the string contents of the document\u0027s  {@code title} element.\n * @return Trimed title, or empty string if none set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.title#75",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.title(java.lang.String)",
    "snippet": "public void title(String title) {\n        Validate.notNull(title);\n        Element titleEl \u003d getElementsByTag(\"title\").first();\n        if (titleEl \u003d\u003d null) { // add to head\n            head().appendElement(\"title\").text(title);\n        } else {\n            titleEl.text(title);\n        }\n    }",
    "begin_line": 75,
    "end_line": 83,
    "comment": "/** \n * Set the document\u0027s  {@code title} element. Updates the existing element, or adds {@code title} to {@code head} ifnot present\n * @param title string to set as title\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.createElement#90",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.createElement(java.lang.String)",
    "snippet": "public Element createElement(String tagName) {\n        return new Element(Tag.valueOf(tagName), this.baseUri());\n    }",
    "begin_line": 90,
    "end_line": 92,
    "comment": "/** \n * Create a new Element, with this document\u0027s base uri. Does not make the new element a child of this document.\n * @param tagName element tag name (e.g. {@code a})\n * @return new element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.normalise#99",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.normalise()",
    "snippet": "public Document normalise() {\n        Element htmlEl \u003d findFirstElementByTagName(\"html\", this);\n        if (htmlEl \u003d\u003d null)\n            htmlEl \u003d appendElement(\"html\");\n        if (head() \u003d\u003d null)\n            htmlEl.prependElement(\"head\");\n        if (body() \u003d\u003d null)\n            htmlEl.appendElement(\"body\");\n\n        // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n        // of. do in inverse order to maintain text order.\n        normaliseTextNodes(head());\n        normaliseTextNodes(htmlEl);\n        normaliseTextNodes(this);\n\n        normaliseStructure(\"head\", htmlEl);\n        normaliseStructure(\"body\", htmlEl);\n        \n        return this;\n    }",
    "begin_line": 99,
    "end_line": 118,
    "comment": "/** \n * Normalise the document. This happens after the parse phase so generally does not need to be called. Moves any text content that is not in the body element into the body.\n * @return this document after normalisation\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.normaliseTextNodes#121",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.normaliseTextNodes(org.jsoup.nodes.Element)",
    "snippet": "private void normaliseTextNodes(Element element) {\n        List\u003cNode\u003e toMove \u003d new ArrayList\u003cNode\u003e();\n        for (Node node: element.childNodes) {\n            if (node instanceof TextNode) {\n                TextNode tn \u003d (TextNode) node;\n                if (!tn.isBlank())\n                    toMove.add(tn);\n            }\n        }\n\n        for (int i \u003d toMove.size()-1; i \u003e\u003d 0; i--) {\n            Node node \u003d toMove.get(i);\n            element.removeChild(node);\n            body().prependChild(new TextNode(\" \", \"\"));\n            body().prependChild(node);\n        }\n    }",
    "begin_line": 121,
    "end_line": 137,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.normaliseStructure#140",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.normaliseStructure(java.lang.String, org.jsoup.nodes.Element)",
    "snippet": "private void normaliseStructure(String tag, Element htmlEl) {\n        Elements elements \u003d this.getElementsByTag(tag);\n        Element master \u003d elements.first(); // will always be available as created above if not existent\n        if (elements.size() \u003e 1) { // dupes, move contents to master\n            List\u003cNode\u003e toMove \u003d new ArrayList\u003cNode\u003e();\n            for (int i \u003d 1; i \u003c elements.size(); i++) {\n                Node dupe \u003d elements.get(i);\n                for (Node node : dupe.childNodes)\n                    toMove.add(node);\n                dupe.remove();\n            }\n\n            for (Node dupe : toMove)\n                master.appendChild(dupe);\n        }\n        // ensure parented by \u003chtml\u003e\n        if (!master.parent().equals(htmlEl)) {\n            htmlEl.appendChild(master); // includes remove()            \n        }\n    }",
    "begin_line": 140,
    "end_line": 159,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.findFirstElementByTagName#162",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.findFirstElementByTagName(java.lang.String, org.jsoup.nodes.Node)",
    "snippet": "private Element findFirstElementByTagName(String tag, Node node) {\n        if (node.nodeName().equals(tag))\n            return (Element) node;\n        else {\n            for (Node child: node.childNodes) {\n                Element found \u003d findFirstElementByTagName(tag, child);\n                if (found !\u003d null)\n                    return found;\n            }\n        }\n        return null;\n    }",
    "begin_line": 162,
    "end_line": 173,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.outerHtml#176",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.outerHtml()",
    "snippet": "@Override\n    public String outerHtml() {\n        return super.html(); // no outer wrapper tag\n    }",
    "begin_line": 176,
    "end_line": 178,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.text#186",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.text(java.lang.String)",
    "snippet": "@Override\n    public Element text(String text) {\n        body().text(text); // overridden to not nuke doc structure\n        return this;\n    }",
    "begin_line": 186,
    "end_line": 189,
    "comment": "/** \n * Set the text of the  {@code body} of this document. Any existing nodes within the body will be cleared.\n * @param text unencoded text\n * @return this document\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Document.nodeName#192",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.nodeName()",
    "snippet": "@Override\n    public String nodeName() {\n        return \"#document\";\n    }",
    "begin_line": 192,
    "end_line": 194,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.OutputSettings#206",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.OutputSettings()",
    "snippet": "public OutputSettings() {}",
    "begin_line": 206,
    "end_line": 206,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.escapeMode#216",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.escapeMode()",
    "snippet": "public Entities.EscapeMode escapeMode() {\n            return escapeMode;\n        }",
    "begin_line": 216,
    "end_line": 218,
    "comment": "/** \n * Get the document\u0027s current HTML escape mode: \u003ccode\u003ebase\u003c/code\u003e, which provides a limited set of named HTML entities and escapes other characters as numbered entities for maximum compatibility; or \u003ccode\u003eextended\u003c/code\u003e, which uses the complete set of HTML named entities. \u003cp\u003e The default escape mode is \u003ccode\u003ebase\u003c/code\u003e.\n * @return the document\u0027s current escape mode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.escapeMode#225",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.escapeMode(org.jsoup.nodes.Entities.EscapeMode)",
    "snippet": "public OutputSettings escapeMode(Entities.EscapeMode escapeMode) {\n            this.escapeMode \u003d escapeMode;\n            return this;\n        }",
    "begin_line": 225,
    "end_line": 228,
    "comment": "/** \n * Set the document\u0027s escape mode\n * @param escapeMode the new escape mode to use\n * @return the document\u0027s output settings, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.charset#238",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.charset()",
    "snippet": "public Charset charset() {\n            return charset;\n        }",
    "begin_line": 238,
    "end_line": 240,
    "comment": "/** \n * Get the document\u0027s current output charset, which is used to control which characters are escaped when generating HTML (via the \u003ccode\u003ehtml()\u003c/code\u003e methods), and which are kept intact. \u003cp\u003e Where possible (when parsing from a URL or File), the document\u0027s output charset is automatically set to the input charset. Otherwise, it defaults to UTF-8.\n * @return the document\u0027s current charset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.charset#247",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.charset(java.nio.charset.Charset)",
    "snippet": "public OutputSettings charset(Charset charset) {\n            // todo: this should probably update the doc\u0027s meta charset\n            this.charset \u003d charset;\n            charsetEncoder \u003d charset.newEncoder();\n            return this;\n        }",
    "begin_line": 247,
    "end_line": 252,
    "comment": "/** \n * Update the document\u0027s output charset.\n * @param charset the new charset to use.\n * @return the document\u0027s output settings, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.charset#259",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.charset(java.lang.String)",
    "snippet": "public OutputSettings charset(String charset) {\n            charset(Charset.forName(charset));\n            return this;\n        }",
    "begin_line": 259,
    "end_line": 262,
    "comment": "/** \n * Update the document\u0027s output charset.\n * @param charset the new charset (by name) to use.\n * @return the document\u0027s output settings, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.encoder#264",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.encoder()",
    "snippet": "CharsetEncoder encoder() {\n            return charsetEncoder;\n        }",
    "begin_line": 264,
    "end_line": 266,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.prettyPrint#273",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.prettyPrint()",
    "snippet": "public boolean prettyPrint() {\n            return prettyPrint;\n        }",
    "begin_line": 273,
    "end_line": 275,
    "comment": "/** \n * Get if pretty printing is enabled. Default is true. If disabled, the HTML output methods will not re-format the output, and the output will generally look like the input.\n * @return if pretty printing is enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.prettyPrint#282",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.prettyPrint(boolean)",
    "snippet": "public OutputSettings prettyPrint(boolean pretty) {\n            prettyPrint \u003d pretty;\n            return this;\n        }",
    "begin_line": 282,
    "end_line": 285,
    "comment": "/** \n * Enable or disable pretty printing.\n * @param pretty new pretty print setting\n * @return this, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.indentAmount#291",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.indentAmount()",
    "snippet": "public int indentAmount() {\n            return indentAmount;\n        }",
    "begin_line": 291,
    "end_line": 293,
    "comment": "/** \n * Get the current tag indent amount, used when pretty printing.\n * @return the current indent amount\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.indentAmount#300",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.indentAmount(int)",
    "snippet": "public OutputSettings indentAmount(int indentAmount) {\n            Validate.isTrue(indentAmount \u003e\u003d 0);\n            this.indentAmount \u003d indentAmount;\n            return this;\n        }",
    "begin_line": 300,
    "end_line": 304,
    "comment": "/** \n * Set the indent amount for pretty printing\n * @param indentAmount number of spaces to use for indenting each level. Must be \u003e\u003d 0.\n * @return this, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputSettings.outputSettings#311",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Document.java",
    "class_name": "org.jsoup.nodes.Document",
    "signature": "org.jsoup.nodes.Document.outputSettings()",
    "snippet": "public OutputSettings outputSettings() {\n        return outputSettings;\n    }",
    "begin_line": 311,
    "end_line": 313,
    "comment": "/** \n * Get the document\u0027s current output settings.\n * @return the document\u0027s current output settings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.Element#36",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.Element(org.jsoup.parser.Tag, java.lang.String, org.jsoup.nodes.Attributes)",
    "snippet": "public Element(Tag tag, String baseUri, Attributes attributes) {\n        super(baseUri, attributes);\n        \n        Validate.notNull(tag);    \n        this.tag \u003d tag;\n    }",
    "begin_line": 36,
    "end_line": 41,
    "comment": "/** \n * Create a new, standalone Element. (Standalone in that is has no parent.)\n * @param tag tag of this element\n * @param baseUri the base URI\n * @param attributes initial attributes\n * @see #appendChild(Node)\n * @see #appendElement(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.Element#51",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.Element(org.jsoup.parser.Tag, java.lang.String)",
    "snippet": "public Element(Tag tag, String baseUri) {\n        this(tag, baseUri, new Attributes());\n    }",
    "begin_line": 51,
    "end_line": 53,
    "comment": "/** \n * Create a new Element from a tag and a base URI.\n * @param tag element tag\n * @param baseUri the base URI of this element. It is acceptable for the base URI to be an emptystring, but not null.\n * @see Tag#valueOf(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.nodeName#56",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.nodeName()",
    "snippet": "@Override\n    public String nodeName() {\n        return tag.getName();\n    }",
    "begin_line": 56,
    "end_line": 58,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.tagName#65",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.tagName()",
    "snippet": "public String tagName() {\n        return tag.getName();\n    }",
    "begin_line": 65,
    "end_line": 67,
    "comment": "/** \n * Get the name of the tag for this element. E.g.  {@code div}\n * @return the tag name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.tag#74",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.tag()",
    "snippet": "public Tag tag() {\n        return tag;\n    }",
    "begin_line": 74,
    "end_line": 76,
    "comment": "/** \n * Get the Tag for this element.\n * @return the tag object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.isBlock#84",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.isBlock()",
    "snippet": "public boolean isBlock() {\n        return tag.isBlock();\n    }",
    "begin_line": 84,
    "end_line": 86,
    "comment": "/** \n * Test if this element is a block-level element. (E.g.  {@code \u003cdiv\u003e \u003d\u003d true} or an inline element{@code \u003cp\u003e \u003d\u003d false}).\n * @return true if block, false if not (and thus inline)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.id#93",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.id()",
    "snippet": "public String id() {\n        String id \u003d attr(\"id\");\n        return id \u003d\u003d null ? \"\" : id;\n    }",
    "begin_line": 93,
    "end_line": 96,
    "comment": "/** \n * Get the  {@code id} attribute of this element.\n * @return The id attribute, if present, or an empty string if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.attr#104",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.attr(java.lang.String, java.lang.String)",
    "snippet": "public Element attr(String attributeKey, String attributeValue) {\n        super.attr(attributeKey, attributeValue);\n        return this;\n    }",
    "begin_line": 104,
    "end_line": 107,
    "comment": "/** \n * Set an attribute value on this element. If this element already has an attribute with the key, its value is updated; otherwise, a new attribute is added.\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.dataset#122",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.dataset()",
    "snippet": "public Map\u003cString, String\u003e dataset() {\n        return attributes.dataset();\n    }",
    "begin_line": 122,
    "end_line": 124,
    "comment": "/** \n * Get this element\u0027s HTML5 custom data attributes. Each attribute in the element that has a key starting with \"data-\" is included the dataset. \u003cp\u003e E.g., the element  {@code \u003cdiv data-package\u003d\"jsoup\" data-language\u003d\"Java\" class\u003d\"group\"\u003e...} has the dataset{@code package\u003djsoup, language\u003djava}. \u003cp\u003e This map is a filtered view of the element\u0027s attribute map. Changes to one map (add, remove, update) are reflected in the other map. \u003cp\u003e You can find elements that have data attributes using the  {@code [^data-]} attribute key prefix selector.\n * @return a map of {@code key\u003dvalue} custom data attributes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.parent#127",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.parent()",
    "snippet": "@Override\n    public final Element parent() {\n        return (Element) parentNode;\n    }",
    "begin_line": 127,
    "end_line": 129,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.parents#135",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.parents()",
    "snippet": "public Elements parents() {\n        Elements parents \u003d new Elements();\n        accumulateParents(this, parents);\n        return parents;\n    }",
    "begin_line": 135,
    "end_line": 139,
    "comment": "/** \n * Get this element\u0027s parent and ancestors, up to the document root.\n * @return this element\u0027s stack of parents, closest first.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.accumulateParents#141",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.accumulateParents(org.jsoup.nodes.Element, org.jsoup.select.Elements)",
    "snippet": "private static void accumulateParents(Element el, Elements parents) {\n        Element parent \u003d el.parent();\n        if (parent !\u003d null \u0026\u0026 !parent.tagName().equals(\"#root\")) {\n            parents.add(parent);\n            accumulateParents(parent, parents);\n        }\n    }",
    "begin_line": 141,
    "end_line": 147,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.child#159",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.child(int)",
    "snippet": "public Element child(int index) {\n        return children().get(index);\n    }",
    "begin_line": 159,
    "end_line": 161,
    "comment": "/** \n * Get a child element of this element, by its 0-based index number. \u003cp/\u003e Note that an element can have both mixed Nodes and Elements as children. This method inspects a filtered list of children that are elements, and the index is based on that filtered list.\n * @param index the index number of the element to retrieve\n * @return the child element, if it exists, or {@code null} if absent.\n * @see #childNode(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.children#171",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.children()",
    "snippet": "public Elements children() {\n        // create on the fly rather than maintaining two lists. if gets slow, memoize, and mark dirty on change\n        List\u003cElement\u003e elements \u003d new ArrayList\u003cElement\u003e();\n        for (Node node : childNodes) {\n            if (node instanceof Element)\n                elements.add((Element) node);\n        }\n        return new Elements(elements);\n    }",
    "begin_line": 171,
    "end_line": 179,
    "comment": "/** \n * Get this element\u0027s child elements. \u003cp/\u003e This is effectively a filter on  {@link #childNodes()} to get Element nodes.\n * @return child elements. If this element has no children, returns anempty list.\n * @see #childNodes()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.select#198",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.select(java.lang.String)",
    "snippet": "public Elements select(String query) {\n        return Selector.select(query, this);\n    }",
    "begin_line": 198,
    "end_line": 200,
    "comment": "/** \n * Find elements that match the selector query, with this element as the starting context. Matched elements may include this element, or any of its children. \u003cp/\u003e This method is generally more powerful to use than the DOM-type  {@code getElementBy*} methods, becausemultiple filters can be combined, e.g.: \u003cul\u003e \u003cli\u003e {@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\u003cli\u003e {@code el.select(\"a[href*\u003dexample.com]\")} - finds links pointing to example.com (loosely)\u003c/ul\u003e \u003cp/\u003e See the query syntax documentation in  {@link org.jsoup.select.Selector}.\n * @param query a {@link Selector} query\n * @return elements that match the query (empty if none match)\n * @see org.jsoup.select.Selector\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.appendChild#208",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.appendChild(org.jsoup.nodes.Node)",
    "snippet": "public Element appendChild(Node child) {\n        Validate.notNull(child);\n        \n        addChildren(child);\n        return this;\n    }",
    "begin_line": 208,
    "end_line": 213,
    "comment": "/** \n * Add a node to the last child of this element.\n * @param child node to add. Must not already have a parent.\n * @return this element, so that you can add more child nodes or elements.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.prependChild#221",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.prependChild(org.jsoup.nodes.Node)",
    "snippet": "public Element prependChild(Node child) {\n        Validate.notNull(child);\n        \n        addChildren(0, child);\n        return this;\n    }",
    "begin_line": 221,
    "end_line": 226,
    "comment": "/** \n * Add a node to the start of this element\u0027s children.\n * @param child node to add. Must not already have a parent.\n * @return this element, so that you can add more child nodes or elements.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.appendElement#235",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.appendElement(java.lang.String)",
    "snippet": "public Element appendElement(String tagName) {\n        Element child \u003d new Element(Tag.valueOf(tagName), baseUri());\n        appendChild(child);\n        return child;\n    }",
    "begin_line": 235,
    "end_line": 239,
    "comment": "/** \n * Create a new element by tag name, and add it as the last child.\n * @param tagName the name of the tag (e.g. {@code div}).\n * @return the new element, to allow you to add content to it, e.g.:{@code parent.appendElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.prependElement#248",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.prependElement(java.lang.String)",
    "snippet": "public Element prependElement(String tagName) {\n        Element child \u003d new Element(Tag.valueOf(tagName), baseUri());\n        prependChild(child);\n        return child;\n    }",
    "begin_line": 248,
    "end_line": 252,
    "comment": "/** \n * Create a new element by tag name, and add it as the first child.\n * @param tagName the name of the tag (e.g. {@code div}).\n * @return the new element, to allow you to add content to it, e.g.:{@code parent.prependElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.appendText#260",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.appendText(java.lang.String)",
    "snippet": "public Element appendText(String text) {\n        TextNode node \u003d new TextNode(text, baseUri());\n        appendChild(node);\n        return this;\n    }",
    "begin_line": 260,
    "end_line": 264,
    "comment": "/** \n * Create and append a new TextNode to this element.\n * @param text the unencoded text to add\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.prependText#272",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.prependText(java.lang.String)",
    "snippet": "public Element prependText(String text) {\n        TextNode node \u003d new TextNode(text, baseUri());\n        prependChild(node);\n        return this;\n    }",
    "begin_line": 272,
    "end_line": 276,
    "comment": "/** \n * Create and prepend a new TextNode to this element.\n * @param text the unencoded text to add\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.append#284",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.append(java.lang.String)",
    "snippet": "public Element append(String html) {\n        Validate.notNull(html);\n        \n        Element fragment \u003d Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        addChildren(fragment.childNodesAsArray());\n        return this;\n    }",
    "begin_line": 284,
    "end_line": 290,
    "comment": "/** \n * Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.\n * @param html HTML to add inside this element, after the existing HTML\n * @return this element\n * @see #html(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.prepend#298",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.prepend(java.lang.String)",
    "snippet": "public Element prepend(String html) {\n        Validate.notNull(html);\n        \n        Element fragment \u003d Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        addChildren(0, fragment.childNodesAsArray());\n        return this;\n    }",
    "begin_line": 298,
    "end_line": 304,
    "comment": "/** \n * Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element\u0027s children.\n * @param html HTML to add inside this element, before the existing HTML\n * @return this element\n * @see #html(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.before#312",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.before(java.lang.String)",
    "snippet": "public Element before(String html) {\n        addSiblingHtml(siblingIndex(), html);\n        return this;\n    }",
    "begin_line": 312,
    "end_line": 315,
    "comment": "/** \n * Insert the specified HTML into the DOM before this element (i.e. as a preceeding sibling).\n * @param html HTML to add before this element\n * @return this element, for chaining\n * @see #after(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.after#323",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.after(java.lang.String)",
    "snippet": "public Element after(String html) {\n        addSiblingHtml(siblingIndex()+1, html);\n        return this;\n    }",
    "begin_line": 323,
    "end_line": 326,
    "comment": "/** \n * Insert the specified HTML into the DOM after this element (i.e. as a following sibling).\n * @param html HTML to add after this element\n * @return this element, for chaining\n * @see #before(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.addSiblingHtml#328",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.addSiblingHtml(int, java.lang.String)",
    "snippet": "private void addSiblingHtml(int index, String html) {\n        Validate.notNull(html);\n        Validate.notNull(parentNode);\n        \n        Element fragment \u003d Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        parentNode.addChildren(index, fragment.childNodesAsArray());\n    }",
    "begin_line": 328,
    "end_line": 334,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.empty#340",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.empty()",
    "snippet": "public Element empty() {\n        childNodes.clear();\n        return this;\n    }",
    "begin_line": 340,
    "end_line": 343,
    "comment": "/** \n * Remove all of the element\u0027s child nodes. Any attributes are left as-is.\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.wrap#350",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.wrap(java.lang.String)",
    "snippet": "public Element wrap(String html) {\n        Validate.notEmpty(html);\n\n        Element wrapBody \u003d Parser.parseBodyFragmentRelaxed(html, baseUri).body();\n        Elements wrapChildren \u003d wrapBody.children();\n        Element wrap \u003d wrapChildren.first();\n        if (wrap \u003d\u003d null) // nothing to wrap with; noop\n            return null;\n\n        Element deepest \u003d getDeepChild(wrap);\n        parentNode.replaceChild(this, wrap);\n        deepest.addChildren(this);\n\n        // remainder (unbalananced wrap, like \u003cdiv\u003e\u003c/div\u003e\u003cp\u003e\u003c/p\u003e -- The \u003cp\u003e is remainder\n        if (wrapChildren.size() \u003e 1) {\n            for (int i \u003d 1; i \u003c wrapChildren.size(); i++) { // skip first\n                Element remainder \u003d wrapChildren.get(i);\n                remainder.parentNode.removeChild(remainder);\n                wrap.appendChild(remainder);\n            }\n        }\n        return this;\n    }",
    "begin_line": 350,
    "end_line": 372,
    "comment": "/** \n * Wrap the supplied HTML around this element.\n * @param html HTML to wrap around this element, e.g. {@code \u003cdiv class\u003d\"head\"\u003e\u003c/div\u003e}. Can be arbitralily deep.\n * @return this element, for chaining.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getDeepChild#374",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getDeepChild(org.jsoup.nodes.Element)",
    "snippet": "private Element getDeepChild(Element el) {\n        List\u003cElement\u003e children \u003d el.children();\n        if (children.size() \u003e 0)\n            return getDeepChild(children.get(0));\n        else\n            return el;\n    }",
    "begin_line": 374,
    "end_line": 380,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.siblingElements#386",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.siblingElements()",
    "snippet": "public Elements siblingElements() {\n        return parent().children();\n    }",
    "begin_line": 386,
    "end_line": 388,
    "comment": "/** \n * Get sibling elements.\n * @return sibling elements\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.nextElementSibling#398",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.nextElementSibling()",
    "snippet": "public Element nextElementSibling() {\n        List\u003cElement\u003e siblings \u003d parent().children();\n        Integer index \u003d indexInList(this, siblings);\n        Validate.notNull(index);\n        if (siblings.size() \u003e index+1)\n            return siblings.get(index+1);\n        else\n            return null;\n    }",
    "begin_line": 398,
    "end_line": 406,
    "comment": "/** \n * Gets the next sibling element of this element. E.g., if a  {@code div} contains two {@code p}s,  the  {@code nextElementSibling} of the first {@code p} is the second {@code p}. \u003cp/\u003e This is similar to  {@link #nextSibling()}, but specifically finds only Elements\n * @return the next element, or null if there is no next element\n * @see #previousElementSibling()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.previousElementSibling#413",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.previousElementSibling()",
    "snippet": "public Element previousElementSibling() {\n        List\u003cElement\u003e siblings \u003d parent().children();\n        Integer index \u003d indexInList(this, siblings);\n        Validate.notNull(index);\n        if (index \u003e 0)\n            return siblings.get(index-1);\n        else\n            return null;\n    }",
    "begin_line": 413,
    "end_line": 421,
    "comment": "/** \n * Gets the previous element sibling of this element.\n * @return the previous element, or null if there is no previous element\n * @see #nextElementSibling()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.firstElementSibling#427",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.firstElementSibling()",
    "snippet": "public Element firstElementSibling() {\n        // todo: should firstSibling() exclude this?\n        List\u003cElement\u003e siblings \u003d parent().children();\n        return siblings.size() \u003e 1 ? siblings.get(0) : null;\n    }",
    "begin_line": 427,
    "end_line": 431,
    "comment": "/** \n * Gets the first element sibling of this element.\n * @return the first sibling that is an element (aka the parent\u0027s first element child) \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.elementSiblingIndex#438",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.elementSiblingIndex()",
    "snippet": "public Integer elementSiblingIndex() {\n       if (parent() \u003d\u003d null) return 0;\n       return indexInList(this, parent().children()); \n    }",
    "begin_line": 438,
    "end_line": 441,
    "comment": "/** \n * Get the list index of this element in its element sibling list. I.e. if this is the first element sibling, returns 0.\n * @return position in element sibling list\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.lastElementSibling#447",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.lastElementSibling()",
    "snippet": "public Element lastElementSibling() {\n        List\u003cElement\u003e siblings \u003d parent().children();\n        return siblings.size() \u003e 1 ? siblings.get(siblings.size() - 1) : null;\n    }",
    "begin_line": 447,
    "end_line": 450,
    "comment": "/** \n * Gets the last element sibling of this element\n * @return the last sibling that is an element (aka the parent\u0027s last element child) \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.indexInList#452",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.indexInList(org.jsoup.nodes.Element, java.util.List\u003cE\u003e)",
    "snippet": "private static \u003cE extends Element\u003e Integer indexInList(Element search, List\u003cE\u003e elements) {\n        Validate.notNull(search);\n        Validate.notNull(elements);\n\n        for (int i \u003d 0; i \u003c elements.size(); i++) {\n            E element \u003d elements.get(i);\n            if (element.equals(search))\n                return i;\n        }\n        return null;\n    }",
    "begin_line": 452,
    "end_line": 462,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByTag#471",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByTag(java.lang.String)",
    "snippet": "public Elements getElementsByTag(String tagName) {\n        Validate.notEmpty(tagName);\n        tagName \u003d tagName.toLowerCase().trim();\n\n        return Collector.collect(new Evaluator.Tag(tagName), this);\n    }",
    "begin_line": 471,
    "end_line": 476,
    "comment": "/** \n * Finds elements, including and recursively under this element, with the specified tag name.\n * @param tagName The tag name to search for (case insensitively).\n * @return a matching unmodifiable list of elements. Will be empty if this element and none of its children match.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementById#487",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementById(java.lang.String)",
    "snippet": "public Element getElementById(String id) {\n        Validate.notEmpty(id);\n        \n        Elements elements \u003d Collector.collect(new Evaluator.Id(id), this);\n        if (elements.size() \u003e 0)\n            return elements.get(0);\n        else\n            return null;\n    }",
    "begin_line": 487,
    "end_line": 495,
    "comment": "/** \n * Find an element by ID, including or under this element. \u003cp\u003e Note that this finds the first matching ID, starting with this element. If you search down from a different starting point, it is possible to find a different element by ID. For unique element by ID within a Document, use  {@link Document#getElementById(String)}\n * @param id The ID to search for.\n * @return The first matching element by ID, starting with this element, or null if none found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByClass#508",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByClass(java.lang.String)",
    "snippet": "public Elements getElementsByClass(String className) {\n        Validate.notEmpty(className);\n\n        return Collector.collect(new Evaluator.Class(className), this);\n    }",
    "begin_line": 508,
    "end_line": 512,
    "comment": "/** \n * Find elements that have this class, including or under this element. Case insensitive. \u003cp\u003e Elements can have multiple classes (e.g.  {@code \u003cdiv class\u003d\"header round first\"\u003e}. This method checks each class, so you can find the above with  {@code el.getElementsByClass(\"header\");}.\n * @param className the name of the class to search for.\n * @return elements with the supplied class name, empty if none\n * @see #hasClass(String)\n * @see #classNames()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttribute#520",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttribute(java.lang.String)",
    "snippet": "public Elements getElementsByAttribute(String key) {\n        Validate.notEmpty(key);\n        key \u003d key.trim().toLowerCase();\n\n        return Collector.collect(new Evaluator.Attribute(key), this);\n    }",
    "begin_line": 520,
    "end_line": 525,
    "comment": "/** \n * Find elements that have a named attribute set. Case insensitive.\n * @param key name of the attribute, e.g. {@code href}\n * @return elements that have this attribute, empty if none\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeStarting#533",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeStarting(java.lang.String)",
    "snippet": "public Elements getElementsByAttributeStarting(String keyPrefix) {\n        Validate.notEmpty(keyPrefix);\n        keyPrefix \u003d keyPrefix.trim().toLowerCase();\n\n        return Collector.collect(new Evaluator.AttributeStarting(keyPrefix), this);\n    }",
    "begin_line": 533,
    "end_line": 538,
    "comment": "/** \n * Find elements that have an attribute name starting with the supplied prefix. Use  {@code data-} to find elementsthat have HTML5 datasets.\n * @param keyPrefix name prefix of the attribute e.g. {@code data-}\n * @return elements that have attribute names that start with with the prefix, empty if none.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValue#547",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValue(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValue(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);\n    }",
    "begin_line": 547,
    "end_line": 549,
    "comment": "/** \n * Find elements that have an attribute with the specific value. Case insensitive.\n * @param key name of the attribute\n * @param value value of the attribute\n * @return elements that have this attribute with this value, empty if none\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueNot#558",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueNot(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValueNot(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);\n    }",
    "begin_line": 558,
    "end_line": 560,
    "comment": "/** \n * Find elements that either do not have this attribute, or have it with a different value. Case insensitive.\n * @param key name of the attribute\n * @param value value of the attribute\n * @return elements that do not have a matching attribute\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueStarting#569",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueStarting(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) {\n        return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this);\n    }",
    "begin_line": 569,
    "end_line": 571,
    "comment": "/** \n * Find elements that have attributes that start with the value prefix. Case insensitive.\n * @param key name of the attribute\n * @param valuePrefix start of attribute value\n * @return elements that have attributes that start with the value prefix\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueEnding#580",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueEnding(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) {\n        return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this);\n    }",
    "begin_line": 580,
    "end_line": 582,
    "comment": "/** \n * Find elements that have attributes that end with the value suffix. Case insensitive.\n * @param key name of the attribute\n * @param valueSuffix end of the attribute value\n * @return elements that have attributes that end with the value suffix\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueContaining#591",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueContaining(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValueContaining(String key, String match) {\n        return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this);\n    }",
    "begin_line": 591,
    "end_line": 593,
    "comment": "/** \n * Find elements that have attributes whose value contains the match string. Case insensitive.\n * @param key name of the attribute\n * @param match substring of value to search for\n * @return elements that have attributes containing this text\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueMatching#601",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueMatching(java.lang.String, java.util.regex.Pattern)",
    "snippet": "public Elements getElementsByAttributeValueMatching(String key, Pattern pattern) {\n        return Collector.collect(new Evaluator.AttributeWithValueMatching(key, pattern), this);\n        \n    }",
    "begin_line": 601,
    "end_line": 604,
    "comment": "/** \n * Find elements that have attributes whose values match the supplied regular expression.\n * @param key name of the attribute\n * @param pattern compiled regular expression to match against attribute values\n * @return elements that have attributes matching this regular expression\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByAttributeValueMatching#612",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueMatching(java.lang.String, java.lang.String)",
    "snippet": "public Elements getElementsByAttributeValueMatching(String key, String regex) {\n        Pattern pattern;\n        try {\n            pattern \u003d Pattern.compile(regex);\n        } catch (PatternSyntaxException e) {\n            throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);\n        }\n        return getElementsByAttributeValueMatching(key, pattern);\n    }",
    "begin_line": 612,
    "end_line": 620,
    "comment": "/** \n * Find elements that have attributes whose values match the supplied regular expression.\n * @param key name of the attribute\n * @param regex regular expression to match agaisnt attribute values. You can use \u003ca href\u003d\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\"\u003eembedded flags\u003c/a\u003e (such as (?i) and (?m) to control regex options.\n * @return elements that have attributes matching this regular expression\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByIndexLessThan#627",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByIndexLessThan(int)",
    "snippet": "public Elements getElementsByIndexLessThan(int index) {\n        return Collector.collect(new Evaluator.IndexLessThan(index), this);\n    }",
    "begin_line": 627,
    "end_line": 629,
    "comment": "/** \n * Find elements whose sibling index is less than the supplied index.\n * @param index 0-based index\n * @return elements less than index\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByIndexGreaterThan#636",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByIndexGreaterThan(int)",
    "snippet": "public Elements getElementsByIndexGreaterThan(int index) {\n        return Collector.collect(new Evaluator.IndexGreaterThan(index), this);\n    }",
    "begin_line": 636,
    "end_line": 638,
    "comment": "/** \n * Find elements whose sibling index is greater than the supplied index.\n * @param index 0-based index\n * @return elements greater than index\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsByIndexEquals#645",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsByIndexEquals(int)",
    "snippet": "public Elements getElementsByIndexEquals(int index) {\n        return Collector.collect(new Evaluator.IndexEquals(index), this);\n    }",
    "begin_line": 645,
    "end_line": 647,
    "comment": "/** \n * Find elements whose sibling index is equal to the supplied index.\n * @param index 0-based index\n * @return elements equal to index\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsContainingText#656",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsContainingText(java.lang.String)",
    "snippet": "public Elements getElementsContainingText(String searchText) {\n        return Collector.collect(new Evaluator.ContainsText(searchText), this);\n    }",
    "begin_line": 656,
    "end_line": 658,
    "comment": "/** \n * Find elements that contain the specified string. The search is case insensitive. The text may appear directly in the element, or in any of its descendants.\n * @param searchText to look for in the element\u0027s text\n * @return elements that contain the string, case insensitive.\n * @see Element#text()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsContainingOwnText#667",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsContainingOwnText(java.lang.String)",
    "snippet": "public Elements getElementsContainingOwnText(String searchText) {\n        return Collector.collect(new Evaluator.ContainsOwnText(searchText), this);\n    }",
    "begin_line": 667,
    "end_line": 669,
    "comment": "/** \n * Find elements that directly contain the specified string. The search is case insensitive. The text must appear directly in the element, not in any of its descendants.\n * @param searchText to look for in the element\u0027s own text\n * @return elements that contain the string, case insensitive.\n * @see Element#ownText()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsMatchingText#677",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsMatchingText(java.util.regex.Pattern)",
    "snippet": "public Elements getElementsMatchingText(Pattern pattern) {\n        return Collector.collect(new Evaluator.Matches(pattern), this);\n    }",
    "begin_line": 677,
    "end_line": 679,
    "comment": "/** \n * Find elements whose text matches the supplied regular expression.\n * @param pattern regular expression to match text against\n * @return elements matching the supplied regular expression.\n * @see Element#text()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsMatchingText#687",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsMatchingText(java.lang.String)",
    "snippet": "public Elements getElementsMatchingText(String regex) {\n        Pattern pattern;\n        try {\n            pattern \u003d Pattern.compile(regex);\n        } catch (PatternSyntaxException e) {\n            throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);\n        }\n        return getElementsMatchingText(pattern);\n    }",
    "begin_line": 687,
    "end_line": 695,
    "comment": "/** \n * Find elements whose text matches the supplied regular expression.\n * @param regex regular expression to match text against. You can use \u003ca href\u003d\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\"\u003eembedded flags\u003c/a\u003e (such as (?i) and (?m) to control regex options.\n * @return elements matching the supplied regular expression.\n * @see Element#text()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsMatchingOwnText#703",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsMatchingOwnText(java.util.regex.Pattern)",
    "snippet": "public Elements getElementsMatchingOwnText(Pattern pattern) {\n        return Collector.collect(new Evaluator.MatchesOwn(pattern), this);\n    }",
    "begin_line": 703,
    "end_line": 705,
    "comment": "/** \n * Find elements whose own text matches the supplied regular expression.\n * @param pattern regular expression to match text against\n * @return elements matching the supplied regular expression.\n * @see Element#ownText()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getElementsMatchingOwnText#713",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getElementsMatchingOwnText(java.lang.String)",
    "snippet": "public Elements getElementsMatchingOwnText(String regex) {\n        Pattern pattern;\n        try {\n            pattern \u003d Pattern.compile(regex);\n        } catch (PatternSyntaxException e) {\n            throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);\n        }\n        return getElementsMatchingOwnText(pattern);\n    }",
    "begin_line": 713,
    "end_line": 721,
    "comment": "/** \n * Find elements whose text matches the supplied regular expression.\n * @param regex regular expression to match text against. You can use \u003ca href\u003d\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\"\u003eembedded flags\u003c/a\u003e (such as (?i) and (?m) to control regex options.\n * @return elements matching the supplied regular expression.\n * @see Element#ownText()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.getAllElements#728",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.getAllElements()",
    "snippet": "public Elements getAllElements() {\n        return Collector.collect(new Evaluator.AllElements(), this);\n    }",
    "begin_line": 728,
    "end_line": 730,
    "comment": "/** \n * Find all elements under this element (including self, and children of children).\n * @return all elements\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.text#740",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.text()",
    "snippet": "public String text() {\n        StringBuilder sb \u003d new StringBuilder();\n        text(sb);\n        return sb.toString().trim();\n    }",
    "begin_line": 740,
    "end_line": 744,
    "comment": "/** \n * Gets the combined text of this element and all its children. \u003cp\u003e For example, given HTML  {@code \u003cp\u003eHello \u003cb\u003ethere\u003c/b\u003e now!\u003c/p\u003e},  {@code p.text()} returns {@code \"Hello there now!\"}\n * @return unencoded text, or empty string if none.\n * @see #ownText()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.text#746",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.text(java.lang.StringBuilder)",
    "snippet": "private void text(StringBuilder accum) {\n        for (Node child : childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode \u003d (TextNode) child;\n                appendNormalisedText(accum, textNode);\n            } else if (child instanceof Element) {\n                Element element \u003d (Element) child;\n                if (accum.length() \u003e 0 \u0026\u0026 element.isBlock() \u0026\u0026 !TextNode.lastCharIsWhitespace(accum))\n                    accum.append(\" \");\n                element.text(accum);\n            }\n        }\n    }",
    "begin_line": 746,
    "end_line": 758,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.ownText#770",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.ownText()",
    "snippet": "public String ownText() {\n        StringBuilder sb \u003d new StringBuilder();\n        ownText(sb);\n        return sb.toString().trim();\n    }",
    "begin_line": 770,
    "end_line": 774,
    "comment": "/** \n * Gets the text owned by this element only; does not get the combined text of all children. \u003cp\u003e For example, given HTML  {@code \u003cp\u003eHello \u003cb\u003ethere\u003c/b\u003e now!\u003c/p\u003e},  {@code p.ownText()} returns {@code \"Hello now!\"}, whereas  {@code p.text()} returns {@code \"Hello there now!\"}. Note that the text within the  {@code b} element is not returned, as it is not a direct child of the {@code p} element.\n * @return unencoded text, or empty string if none.\n * @see #text()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.ownText#776",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.ownText(java.lang.StringBuilder)",
    "snippet": "private void ownText(StringBuilder accum) {\n        for (Node child : childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode \u003d (TextNode) child;\n                appendNormalisedText(accum, textNode);\n            }\n        }\n    }",
    "begin_line": 776,
    "end_line": 783,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.appendNormalisedText#785",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.appendNormalisedText(java.lang.StringBuilder, org.jsoup.nodes.TextNode)",
    "snippet": "private void appendNormalisedText(StringBuilder accum, TextNode textNode) {\n        String text \u003d textNode.getWholeText();\n\n        if (!preserveWhitespace()) {\n            text \u003d TextNode.normaliseWhitespace(text);\n            if (TextNode.lastCharIsWhitespace(accum))\n                text \u003d TextNode.stripLeadingWhitespace(text);\n        }\n        accum.append(text);\n    }",
    "begin_line": 785,
    "end_line": 794,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.preserveWhitespace#796",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.preserveWhitespace()",
    "snippet": "boolean preserveWhitespace() {\n        return tag.preserveWhitespace() || parent() !\u003d null \u0026\u0026 parent().preserveWhitespace();\n    }",
    "begin_line": 796,
    "end_line": 798,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.text#805",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.text(java.lang.String)",
    "snippet": "public Element text(String text) {\n        Validate.notNull(text);\n\n        empty();\n        TextNode textNode \u003d new TextNode(text, baseUri);\n        appendChild(textNode);\n\n        return this;\n    }",
    "begin_line": 805,
    "end_line": 813,
    "comment": "/** \n * Set the text of this element. Any existing contents (text or elements) will be cleared\n * @param text unencoded text\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.hasText#819",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.hasText()",
    "snippet": "public boolean hasText() {\n        for (Node child: childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode \u003d (TextNode) child;\n                if (!textNode.isBlank())\n                    return true;\n            } else if (child instanceof Element) {\n                Element el \u003d (Element) child;\n                if (el.hasText())\n                    return true;\n            }\n        }\n        return false;\n    }",
    "begin_line": 819,
    "end_line": 832,
    "comment": "/** \n * Test if this element has any text content (that is not just whitespace).\n * @return true if element has non-blank text content.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.data#838",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.data()",
    "snippet": "public String data() {\n        StringBuilder sb \u003d new StringBuilder();\n\n        for (Node childNode : childNodes) {\n            if (childNode instanceof DataNode) {\n                DataNode data \u003d (DataNode) childNode;\n                sb.append(data.getWholeData());\n            } else if (childNode instanceof Element) {\n                Element element \u003d (Element) childNode;\n                String elementData \u003d element.data();\n                sb.append(elementData);\n            }\n        }\n        return sb.toString();\n    }",
    "begin_line": 838,
    "end_line": 852,
    "comment": "/** \n * Get the combined data of this element. Data is e.g. the inside of a  {@code script} tag.\n * @return the data, or empty string if none\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.className#859",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.className()",
    "snippet": "public String className() {\n        return attributes.hasKey(\"class\") ? attributes.get(\"class\") : \"\";\n    }",
    "begin_line": 859,
    "end_line": 861,
    "comment": "/** \n * Gets the literal value of this element\u0027s \"class\" attribute, which may include multiple class names, space separated. (E.g. on \u003ccode\u003e\u0026lt;div class\u003d\"header gray\"\u003e\u003c/code\u003e returns, \"\u003ccode\u003eheader gray\u003c/code\u003e\")\n * @return The literal class attribute, or \u003cb\u003eempty string\u003c/b\u003e if no class attribute set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.classNames#869",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.classNames()",
    "snippet": "public Set\u003cString\u003e classNames() {\n        if (classNames \u003d\u003d null) {\n            String[] names \u003d className().split(\"\\\\s+\");\n            classNames \u003d new LinkedHashSet\u003cString\u003e(Arrays.asList(names));\n        }\n        return classNames;\n    }",
    "begin_line": 869,
    "end_line": 875,
    "comment": "/** \n * Get all of the element\u0027s class names. E.g. on element  {@code \u003cdiv class\u003d\"header gray\"}\u003e}, returns a set of two elements  {@code \"header\", \"gray\"}. Note that modifications to this set are not pushed to the backing  {@code class} attribute; use the {@link #classNames(java.util.Set)} method to persist them.\n * @return set of classnames, empty if no class attribute\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.classNames#882",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.classNames(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public Element classNames(Set\u003cString\u003e classNames) {\n        Validate.notNull(classNames);\n        attributes.put(\"class\", StringUtil.join(classNames, \" \"));\n        return this;\n    }",
    "begin_line": 882,
    "end_line": 886,
    "comment": "/** \n * Set the element\u0027s  {@code class} attribute to the supplied class names.\n * @param classNames set of classes\n * @return this element, for chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.hasClass#893",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.hasClass(java.lang.String)",
    "snippet": "public boolean hasClass(String className) {\n        return classNames().contains(className);\n    }",
    "begin_line": 893,
    "end_line": 895,
    "comment": "/** \n * Tests if this element has a class.\n * @param className name of class to check for\n * @return true if it does, false if not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.addClass#902",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.addClass(java.lang.String)",
    "snippet": "public Element addClass(String className) {\n        Validate.notNull(className);\n\n        Set\u003cString\u003e classes \u003d classNames();\n        classes.add(className);\n        classNames(classes);\n\n        return this;\n    }",
    "begin_line": 902,
    "end_line": 910,
    "comment": "/** \n * Add a class name to this element\u0027s  {@code class} attribute.\n * @param className class name to add\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.removeClass#917",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.removeClass(java.lang.String)",
    "snippet": "public Element removeClass(String className) {\n        Validate.notNull(className);\n\n        Set\u003cString\u003e classes \u003d classNames();\n        classes.remove(className);\n        classNames(classes);\n\n        return this;\n    }",
    "begin_line": 917,
    "end_line": 925,
    "comment": "/** \n * Remove a class name from this element\u0027s  {@code class} attribute.\n * @param className class name to remove\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.toggleClass#932",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.toggleClass(java.lang.String)",
    "snippet": "public Element toggleClass(String className) {\n        Validate.notNull(className);\n\n        Set\u003cString\u003e classes \u003d classNames();\n        if (classes.contains(className))\n            classes.remove(className);\n        else\n            classes.add(className);\n        classNames(classes);\n\n        return this;\n    }",
    "begin_line": 932,
    "end_line": 943,
    "comment": "/** \n * Toggle a class name on this element\u0027s  {@code class} attribute: if present, remove it; otherwise add it.\n * @param className class name to toggle\n * @return this element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.val#949",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.val()",
    "snippet": "public String val() {\n        if (tagName().equals(\"textarea\"))\n            return text();\n        else\n            return attr(\"value\");\n    }",
    "begin_line": 949,
    "end_line": 954,
    "comment": "/** \n * Get the value of a form element (input, textarea, etc).\n * @return the value of the form element, or empty string if not set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.val#961",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.val(java.lang.String)",
    "snippet": "public Element val(String value) {\n        if (tagName().equals(\"textarea\"))\n            text(value);\n        else\n            attr(\"value\", value);\n        return this;\n    }",
    "begin_line": 961,
    "end_line": 967,
    "comment": "/** \n * Set the value of a form element (input, textarea, etc).\n * @param value value to set\n * @return this element (for chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.outerHtmlHead#969",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.outerHtmlHead(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n        if (out.prettyPrint() \u0026\u0026 (isBlock() || (parent() !\u003d null \u0026\u0026 parent().tag().canContainBlock() \u0026\u0026 siblingIndex() \u003d\u003d 0)))\n            indent(accum, depth, out);\n        accum\n                .append(\"\u003c\")\n                .append(tagName());\n        attributes.html(accum, out);\n\n        if (childNodes.isEmpty() \u0026\u0026 tag.isSelfClosing())\n            accum.append(\" /\u003e\");\n        else\n            accum.append(\"\u003e\");\n    }",
    "begin_line": 969,
    "end_line": 981,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.outerHtmlTail#983",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.outerHtmlTail(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {\n        if (!(childNodes.isEmpty() \u0026\u0026 tag.isSelfClosing())) {\n            if (out.prettyPrint() \u0026\u0026 !childNodes.isEmpty() \u0026\u0026 tag.canContainBlock())\n                indent(accum, depth, out);\n            accum.append(\"\u003c/\").append(tagName()).append(\"\u003e\");\n        }\n    }",
    "begin_line": 983,
    "end_line": 989,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.html#998",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.html()",
    "snippet": "public String html() {\n        StringBuilder accum \u003d new StringBuilder();\n        html(accum); \n        return accum.toString().trim();\n    }",
    "begin_line": 998,
    "end_line": 1002,
    "comment": "/** \n * Retrieves the element\u0027s inner HTML. E.g. on a  {@code \u003cdiv\u003e} with one empty {@code \u003cp\u003e}, would return {@code \u003cp\u003e\u003c/p\u003e}. (Whereas  {@link #outerHtml()} would return {@code \u003cdiv\u003e\u003cp\u003e\u003c/p\u003e\u003c/div\u003e}.)\n * @return String of HTML.\n * @see #outerHtml()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.html#1004",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.html(java.lang.StringBuilder)",
    "snippet": "private void html(StringBuilder accum) {\n        for (Node node : childNodes)\n            node.outerHtml(accum);\n    }",
    "begin_line": 1004,
    "end_line": 1007,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.html#1015",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.html(java.lang.String)",
    "snippet": "public Element html(String html) {\n        empty();\n        append(html);\n        return this;\n    }",
    "begin_line": 1015,
    "end_line": 1019,
    "comment": "/** \n * Set this element\u0027s inner HTML. Clears the existing HTML first.\n * @param html HTML to parse and set into this element\n * @return this element\n * @see #append(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.toString#1021",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.toString()",
    "snippet": "public String toString() {\n        return outerHtml();\n    }",
    "begin_line": 1021,
    "end_line": 1023,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.equals#1026",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        if (this \u003d\u003d o) return true;\n        if (!(o instanceof Element)) return false;\n        if (!super.equals(o)) return false;\n\n        Element element \u003d (Element) o;\n\n        if (tag !\u003d null ? !tag.equals(element.tag) : element.tag !\u003d null) return false;\n\n        return true;\n    }",
    "begin_line": 1026,
    "end_line": 1036,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Element.hashCode#1039",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Element.java",
    "class_name": "org.jsoup.nodes.Element",
    "signature": "org.jsoup.nodes.Element.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        int result \u003d super.hashCode();\n        result \u003d 31 * result + (tag !\u003d null ? tag.hashCode() : 0);\n        return result;\n    }",
    "begin_line": 1039,
    "end_line": 1043,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.EscapeMode#25",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.EscapeMode(java.util.Map\u003cjava.lang.Character,java.lang.String\u003e)",
    "snippet": " EscapeMode(Map\u003cCharacter, String\u003e map) {\n            this.map \u003d map;\n        }",
    "begin_line": 25,
    "end_line": 27,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.getMap#29",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.getMap()",
    "snippet": "public Map\u003cCharacter, String\u003e getMap() {\n            return map;\n        }",
    "begin_line": 29,
    "end_line": 31,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.escape#40",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.escape(java.lang.String, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "static String escape(String string, Document.OutputSettings out) {\n        return escape(string, out.encoder(), out.escapeMode());\n    }",
    "begin_line": 40,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.escape#44",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.escape(java.lang.String, java.nio.charset.CharsetEncoder, org.jsoup.nodes.Entities.EscapeMode)",
    "snippet": "static String escape(String string, CharsetEncoder encoder, EscapeMode escapeMode) {\n        StringBuilder accum \u003d new StringBuilder(string.length() * 2);\n        Map\u003cCharacter, String\u003e map \u003d escapeMode.getMap();\n\n        for (int pos \u003d 0; pos \u003c string.length(); pos++) {\n            Character c \u003d string.charAt(pos);\n            if (map.containsKey(c))\n                accum.append(\u0027\u0026\u0027).append(map.get(c)).append(\u0027;\u0027);\n            else if (encoder.canEncode(c))\n                accum.append(c.charValue());\n            else\n                accum.append(\"\u0026#\").append((int) c).append(\u0027;\u0027);\n        }\n\n        return accum.toString();\n    }",
    "begin_line": 44,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Entities.unescape#61",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Entities.java",
    "class_name": "org.jsoup.nodes.Entities",
    "signature": "org.jsoup.nodes.Entities.unescape(java.lang.String)",
    "snippet": "static String unescape(String string) {\n        if (!string.contains(\"\u0026\"))\n            return string;\n\n        Matcher m \u003d unescapePattern.matcher(string); // \u0026(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\n        StringBuffer accum \u003d new StringBuffer(string.length()); // pity matcher can\u0027t use stringbuilder, avoid syncs\n        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required\n\n        while (m.find()) {\n            int charval \u003d -1;\n            String num \u003d m.group(3);\n            if (num !\u003d null) {\n                try {\n                    int base \u003d m.group(2) !\u003d null ? 16 : 10; // 2 is hex indicator\n                    charval \u003d Integer.valueOf(num, base);\n                } catch (NumberFormatException e) {\n                } // skip\n            } else {\n                String name \u003d m.group(1);\n                if (full.containsKey(name))\n                    charval \u003d full.get(name);\n            }\n\n            if (charval !\u003d -1 || charval \u003e 0xFFFF) { // out of range\n                String c \u003d Character.toString((char) charval);\n                m.appendReplacement(accum, Matcher.quoteReplacement(c));\n            } else {\n                m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0))); // replace with original string\n            }\n        }\n        m.appendTail(accum);\n        return accum.toString();\n    }",
    "begin_line": 61,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Evaluator.Evaluator#16",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.Evaluator()",
    "snippet": "private Evaluator() {}",
    "begin_line": 16,
    "end_line": 16,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Evaluator.matches#21",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
    "snippet": "public abstract boolean matches(Element element);",
    "begin_line": 21,
    "end_line": 21,
    "comment": "/** \n * Test if the element meets the evaluator\u0027s requirements.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.Tag#25",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.Tag(java.lang.String)",
    "snippet": " Tag (String tagName) {\n            this.tagName \u003d tagName;\n        }",
    "begin_line": 25,
    "end_line": 27,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.matches#29",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
    "snippet": "public boolean matches(Element element) {\n            return (element.tagName().equals(tagName));\n        }",
    "begin_line": 29,
    "end_line": 31,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Id.Id#36",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.Id(java.lang.String)",
    "snippet": " Id (String id) {\n            this.id \u003d id;\n        }",
    "begin_line": 36,
    "end_line": 38,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Id.matches#40",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
    "snippet": "public boolean matches(Element element) {\n            return (id.equals(element.id()));\n        }",
    "begin_line": 40,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Class.Class#47",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.Class(java.lang.String)",
    "snippet": " Class(String className) {\n            this.className \u003d className;\n        }",
    "begin_line": 47,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Class.matches#51",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
    "snippet": "public boolean matches(Element element) {\n            return (element.hasClass(className));\n        }",
    "begin_line": 51,
    "end_line": 53,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.Attribute#59",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.Attribute(java.lang.String)",
    "snippet": " Attribute (String key) {\n            this.key \u003d key;\n        }",
    "begin_line": 59,
    "end_line": 61,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Attribute.matches#63",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
    "snippet": "public boolean matches(Element element) {\n            return element.hasAttr(key);\n        }",
    "begin_line": 63,
    "end_line": 65,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AttributeStarting.AttributeStarting#71",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.AttributeStarting(java.lang.String)",
    "snippet": " AttributeStarting (String keyPrefix) {\n            this.keyPrefix \u003d keyPrefix;\n        }",
    "begin_line": 71,
    "end_line": 73,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AttributeStarting.matches#75",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
    "snippet": "public boolean matches(Element element) {\n            List\u003corg.jsoup.nodes.Attribute\u003e values \u003d element.attributes.asList();\n            for (org.jsoup.nodes.Attribute attribute : values) {\n                if (attribute.getKey().startsWith(keyPrefix))\n                    return true;\n            }\n            return false;\n        }",
    "begin_line": 75,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AttributeWithValue.AttributeWithValue#86",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.AttributeWithValue(java.lang.String, java.lang.String)",
    "snippet": " AttributeWithValue(String key, String value) {\n            super(key, value);\n        }",
    "begin_line": 86,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AttributeWithValue.matches#90",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
    "snippet": "public boolean matches(Element element) {\n            return element.hasAttr(key) \u0026\u0026 value.equalsIgnoreCase(element.attr(key));\n        }",
    "begin_line": 90,
    "end_line": 92,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AttributeWithValueNot.AttributeWithValueNot#96",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.AttributeWithValueNot(java.lang.String, java.lang.String)",
    "snippet": " AttributeWithValueNot(String key, String value) {\n            super(key, value);\n        }",
    "begin_line": 96,
    "end_line": 98,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AttributeWithValueNot.matches#100",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
    "snippet": "public boolean matches(Element element) {\n            return !value.equalsIgnoreCase(element.attr(key));\n        }",
    "begin_line": 100,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AttributeWithValueStarting.AttributeWithValueStarting#106",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.AttributeWithValueStarting(java.lang.String, java.lang.String)",
    "snippet": " AttributeWithValueStarting(String key, String value) {\n            super(key, value);\n        }",
    "begin_line": 106,
    "end_line": 108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AttributeWithValueStarting.matches#110",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
    "snippet": "public boolean matches(Element element) {\n            return element.hasAttr(key) \u0026\u0026 element.attr(key).toLowerCase().startsWith(value); // value is lower case already\n        }",
    "begin_line": 110,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AttributeWithValueEnding.AttributeWithValueEnding#116",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.AttributeWithValueEnding(java.lang.String, java.lang.String)",
    "snippet": " AttributeWithValueEnding(String key, String value) {\n            super(key, value);\n        }",
    "begin_line": 116,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AttributeWithValueEnding.matches#120",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
    "snippet": "public boolean matches(Element element) {\n            return element.hasAttr(key) \u0026\u0026 element.attr(key).toLowerCase().endsWith(value); // value is lower case\n        }",
    "begin_line": 120,
    "end_line": 122,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AttributeWithValueContaining.AttributeWithValueContaining#126",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.AttributeWithValueContaining(java.lang.String, java.lang.String)",
    "snippet": " AttributeWithValueContaining(String key, String value) {\n            super(key, value);\n        }",
    "begin_line": 126,
    "end_line": 128,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AttributeWithValueContaining.matches#130",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
    "snippet": "public boolean matches(Element element) {\n            return element.hasAttr(key) \u0026\u0026 element.attr(key).toLowerCase().contains(value); // value is lower case\n        }",
    "begin_line": 130,
    "end_line": 132,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AttributeWithValueMatching.AttributeWithValueMatching#139",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.AttributeWithValueMatching(java.lang.String, java.util.regex.Pattern)",
    "snippet": " AttributeWithValueMatching(String key, Pattern pattern) {\n            this.key \u003d key.trim().toLowerCase();\n            this.pattern \u003d pattern;\n        }",
    "begin_line": 139,
    "end_line": 142,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AttributeWithValueMatching.matches#144",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
    "snippet": "public boolean matches(Element element) {\n            return element.hasAttr(key) \u0026\u0026 pattern.matcher(element.attr(key)).find();\n        }",
    "begin_line": 144,
    "end_line": 146,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AttributeKeyPair.AttributeKeyPair#153",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.AttributeKeyPair(java.lang.String, java.lang.String)",
    "snippet": " AttributeKeyPair(String key, String value) {\n            Validate.notEmpty(key);\n            Validate.notEmpty(value);\n            \n            this.key \u003d key.trim().toLowerCase();\n            this.value \u003d value.trim().toLowerCase();\n        }",
    "begin_line": 153,
    "end_line": 159,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AllElements.matches#163",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
    "snippet": "public boolean matches(Element element) {\n            return true;\n        }",
    "begin_line": 163,
    "end_line": 165,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IndexLessThan.IndexLessThan#169",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.IndexLessThan(int)",
    "snippet": " IndexLessThan(int index) {\n            super(index);\n        }",
    "begin_line": 169,
    "end_line": 171,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IndexLessThan.matches#173",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
    "snippet": "public boolean matches(Element element) {\n            return element.elementSiblingIndex() \u003c index;\n        }",
    "begin_line": 173,
    "end_line": 175,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IndexGreaterThan.IndexGreaterThan#179",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.IndexGreaterThan(int)",
    "snippet": " IndexGreaterThan(int index) {\n            super(index);\n        }",
    "begin_line": 179,
    "end_line": 181,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IndexGreaterThan.matches#183",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
    "snippet": "public boolean matches(Element element) {\n            return element.elementSiblingIndex() \u003e index;\n        }",
    "begin_line": 183,
    "end_line": 185,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IndexEquals.IndexEquals#189",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.IndexEquals(int)",
    "snippet": " IndexEquals(int index) {\n            super(index);\n        }",
    "begin_line": 189,
    "end_line": 191,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IndexEquals.matches#193",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
    "snippet": "public boolean matches(Element element) {\n            return element.elementSiblingIndex() \u003d\u003d index;\n        }",
    "begin_line": 193,
    "end_line": 195,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IndexEvaluator.IndexEvaluator#201",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.IndexEvaluator(int)",
    "snippet": " IndexEvaluator(int index) {\n            this.index \u003d index;\n        }",
    "begin_line": 201,
    "end_line": 203,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContainsText.ContainsText#208",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.ContainsText(java.lang.String)",
    "snippet": " ContainsText(String searchText) {\n            this.searchText \u003d searchText.toLowerCase();\n        }",
    "begin_line": 208,
    "end_line": 210,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContainsText.matches#212",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
    "snippet": "public boolean matches(Element element) {\n            return (element.text().toLowerCase().contains(searchText));\n        }",
    "begin_line": 212,
    "end_line": 214,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContainsOwnText.ContainsOwnText#219",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.ContainsOwnText(java.lang.String)",
    "snippet": " ContainsOwnText(String searchText) {\n            this.searchText \u003d searchText.toLowerCase();\n        }",
    "begin_line": 219,
    "end_line": 221,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContainsOwnText.matches#223",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
    "snippet": "public boolean matches(Element element) {\n            return (element.ownText().toLowerCase().contains(searchText));\n        }",
    "begin_line": 223,
    "end_line": 225,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matches.Matches#230",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.Matches(java.util.regex.Pattern)",
    "snippet": " Matches(Pattern pattern) {\n            this.pattern \u003d pattern;\n        }",
    "begin_line": 230,
    "end_line": 232,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Matches.matches#234",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
    "snippet": "public boolean matches(Element element) {\n            Matcher m \u003d pattern.matcher(element.text());\n            return m.find();\n        }",
    "begin_line": 234,
    "end_line": 237,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MatchesOwn.MatchesOwn#242",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.MatchesOwn(java.util.regex.Pattern)",
    "snippet": " MatchesOwn(Pattern pattern) {\n            this.pattern \u003d pattern;\n        }",
    "begin_line": 242,
    "end_line": 244,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MatchesOwn.matches#246",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Evaluator.java",
    "class_name": "org.jsoup.nodes.Evaluator",
    "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
    "snippet": "public boolean matches(Element element) {\n            Matcher m \u003d pattern.matcher(element.ownText());\n            return m.find();\n        }",
    "begin_line": 246,
    "end_line": 249,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.Node#30",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.Node(java.lang.String, org.jsoup.nodes.Attributes)",
    "snippet": "protected Node(String baseUri, Attributes attributes) {\n        Validate.notNull(baseUri);\n        Validate.notNull(attributes);\n        \n        childNodes \u003d new ArrayList\u003cNode\u003e(4);\n        this.baseUri \u003d baseUri.trim();\n        this.attributes \u003d attributes;\n    }",
    "begin_line": 30,
    "end_line": 37,
    "comment": "/** \n * Create a new Node.\n * @param baseUri base URI\n * @param attributes attributes (not null, but may be empty)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.Node#39",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.Node(java.lang.String)",
    "snippet": "protected Node(String baseUri) {\n        this(baseUri, new Attributes());\n    }",
    "begin_line": 39,
    "end_line": 41,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.Node#46",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.Node()",
    "snippet": "protected Node() {\n        childNodes \u003d Collections.EMPTY_LIST;\n        attributes \u003d null;\n    }",
    "begin_line": 46,
    "end_line": 49,
    "comment": "/** \n * Default constructor. Doesn\u0027t setup base uri, children, or attributes; use with caution.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.nodeName#55",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.nodeName()",
    "snippet": "public abstract String nodeName();",
    "begin_line": 55,
    "end_line": 55,
    "comment": "/** \n * Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof).\n * @return node name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.attr#69",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.attr(java.lang.String)",
    "snippet": "public String attr(String attributeKey) {\n        Validate.notNull(attributeKey);\n\n        if (hasAttr(attributeKey))\n            return attributes.get(attributeKey);\n        else if (attributeKey.toLowerCase().startsWith(\"abs:\"))\n            return absUrl(attributeKey.substring(\"abs:\".length()));\n        else return \"\";\n    }",
    "begin_line": 69,
    "end_line": 77,
    "comment": "/** \n * Get an attribute\u0027s value by its key. \u003cp/\u003e To get an absolute URL from an attribute that may be a relative URL, prefix the key with \u003ccode\u003e\u003cb\u003eabs\u003c/b\u003e\u003c/code\u003e, which is a shortcut to the  {@link #absUrl} method.E.g.: \u003cblockquote\u003e\u003ccode\u003eString url \u003d a.attr(\"abs:href\");\u003c/code\u003e\u003c/blockquote\u003e\n * @param attributeKey The attribute key.\n * @return The attribute, or empty string if not present (to avoid nulls).\n * @see #attributes()\n * @see #hasAttr(String)\n * @see #absUrl(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.attributes#83",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.attributes()",
    "snippet": "public Attributes attributes() {\n        return attributes;\n    }",
    "begin_line": 83,
    "end_line": 85,
    "comment": "/** \n * Get all of the element\u0027s attributes.\n * @return attributes (which implements iterable, in same order as presented in original HTML).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.attr#93",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.attr(java.lang.String, java.lang.String)",
    "snippet": "public Node attr(String attributeKey, String attributeValue) {\n        attributes.put(attributeKey, attributeValue);\n        return this;\n    }",
    "begin_line": 93,
    "end_line": 96,
    "comment": "/** \n * Set an attribute (key\u003dvalue). If the attribute already exists, it is replaced.\n * @param attributeKey The attribute key.\n * @param attributeValue The attribute value.\n * @return this (for chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.hasAttr#103",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.hasAttr(java.lang.String)",
    "snippet": "public boolean hasAttr(String attributeKey) {\n        Validate.notNull(attributeKey);\n        return attributes.hasKey(attributeKey);\n    }",
    "begin_line": 103,
    "end_line": 106,
    "comment": "/** \n * Test if this element has an attribute.\n * @param attributeKey The attribute key to check.\n * @return true if the attribute exists, false if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.removeAttr#113",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.removeAttr(java.lang.String)",
    "snippet": "public Node removeAttr(String attributeKey) {\n        Validate.notNull(attributeKey);\n        attributes.remove(attributeKey);\n        return this;\n    }",
    "begin_line": 113,
    "end_line": 117,
    "comment": "/** \n * Remove an attribute from this element.\n * @param attributeKey The attribute to remove.\n * @return this (for chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.baseUri#123",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.baseUri()",
    "snippet": "public String baseUri() {\n        return baseUri;\n    }",
    "begin_line": 123,
    "end_line": 125,
    "comment": "/** \n * Get the base URI of this node.\n * @return base URI\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.setBaseUri#131",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.setBaseUri(java.lang.String)",
    "snippet": "public void setBaseUri(String baseUri) {\n        Validate.notNull(baseUri);\n        this.baseUri \u003d baseUri;\n    }",
    "begin_line": 131,
    "end_line": 134,
    "comment": "/** \n * Update the base URI of this node.\n * @param baseUri base URI to set\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.absUrl#156",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.absUrl(java.lang.String)",
    "snippet": "public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl \u003d attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            URL base;\n            try {\n                try {\n                    base \u003d new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                    URL abs \u003d new URL(relUrl);\n                    return abs.toExternalForm();\n                }\n                URL abs \u003d new URL(base, relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n    }",
    "begin_line": 156,
    "end_line": 178,
    "comment": "/** \n * Get an absolute URL from a URL attribute that may be relative (i.e. an \u003ccode\u003e\u0026lt;a href\u003e\u003c/code\u003e or \u003ccode\u003e\u0026lt;img src\u003e\u003c/code\u003e). \u003cp/\u003e E.g.: \u003ccode\u003eString absUrl \u003d linkEl.absUrl(\"href\");\u003c/code\u003e \u003cp/\u003e If the attribute value is already absolute (i.e. it starts with a protocol, like \u003ccode\u003ehttp://\u003c/code\u003e or \u003ccode\u003ehttps://\u003c/code\u003e etc), and it successfully parses as a URL, the attribute is returned directly. Otherwise, it is treated as a URL relative to the element\u0027s  {@link #baseUri}, and made absolute using that. \u003cp/\u003e As an alternate, you can use the  {@link #attr} method with the \u003ccode\u003eabs:\u003c/code\u003e prefix, e.g.:\u003ccode\u003eString absUrl \u003d linkEl.attr(\"abs:href\");\u003c/code\u003e\n * @param attributeKey The attribute key\n * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing orcould not be made successfully into a URL.\n * @see #attr\n * @see java.net.URL#URL(java.net.URL,String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.childNode#185",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.childNode(int)",
    "snippet": "public Node childNode(int index) {\n        return childNodes.get(index);\n    }",
    "begin_line": 185,
    "end_line": 187,
    "comment": "/** \n * Get a child node by index\n * @param index index of child node\n * @return the child node at this index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.childNodes#194",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.childNodes()",
    "snippet": "public List\u003cNode\u003e childNodes() {\n        return Collections.unmodifiableList(childNodes);\n    }",
    "begin_line": 194,
    "end_line": 196,
    "comment": "/** \n * Get this node\u0027s children. Presented as an unmodifiable list: new children can not be added, but the child nodes themselves can be manipulated.\n * @return list of children. If no children, returns an empty list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.childNodesAsArray#198",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.childNodesAsArray()",
    "snippet": "protected Node[] childNodesAsArray() {\n        return childNodes.toArray(new Node[childNodes().size()]);\n    }",
    "begin_line": 198,
    "end_line": 200,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.parent#206",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.parent()",
    "snippet": "public Node parent() {\n        return parentNode;\n    }",
    "begin_line": 206,
    "end_line": 208,
    "comment": "/** \n * Gets this node\u0027s parent node.\n * @return parent node; or null if no parent.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.ownerDocument#214",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.ownerDocument()",
    "snippet": "public Document ownerDocument() {\n        if (this instanceof Document)\n            return (Document) this;\n        else if (parentNode \u003d\u003d null)\n            return null;\n        else\n            return parentNode.ownerDocument();\n    }",
    "begin_line": 214,
    "end_line": 221,
    "comment": "/** \n * Gets the Document associated with this Node. \n * @return the Document associated with this Node, or null if there is no such Document.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.remove#226",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.remove()",
    "snippet": "public void remove() {\n        Validate.notNull(parentNode);\n        parentNode.removeChild(this);\n    }",
    "begin_line": 226,
    "end_line": 229,
    "comment": "/** \n * Remove (delete) this node from the DOM tree. If this node has children, they are also removed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.replaceWith#235",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.replaceWith(org.jsoup.nodes.Node)",
    "snippet": "public void replaceWith(Node in) {\n        Validate.notNull(in);\n        Validate.notNull(parentNode);\n        parentNode.replaceChild(this, in);\n    }",
    "begin_line": 235,
    "end_line": 239,
    "comment": "/** \n * Replace this node in the DOM with the supplied node.\n * @param in the node that will will replace the existing node.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.setParentNode#241",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.setParentNode(org.jsoup.nodes.Node)",
    "snippet": "protected void setParentNode(Node parentNode) {\n        if (this.parentNode !\u003d null)\n            this.parentNode.removeChild(this);\n        this.parentNode \u003d parentNode;\n    }",
    "begin_line": 241,
    "end_line": 245,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.replaceChild#247",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.replaceChild(org.jsoup.nodes.Node, org.jsoup.nodes.Node)",
    "snippet": "protected void replaceChild(Node out, Node in) {\n        Validate.isTrue(out.parentNode \u003d\u003d this);\n        Validate.notNull(in);\n        if (in.parentNode !\u003d null)\n            in.parentNode.removeChild(in);\n        \n        Integer index \u003d out.siblingIndex();\n        childNodes.set(index, in);\n        in.parentNode \u003d this;\n        in.setSiblingIndex(index);\n        out.parentNode \u003d null;\n    }",
    "begin_line": 247,
    "end_line": 258,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.removeChild#260",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.removeChild(org.jsoup.nodes.Node)",
    "snippet": "protected void removeChild(Node out) {\n        Validate.isTrue(out.parentNode \u003d\u003d this);\n        int index \u003d out.siblingIndex();\n        childNodes.remove(index);\n        reindexChildren();\n        out.parentNode \u003d null;\n    }",
    "begin_line": 260,
    "end_line": 266,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.addChildren#268",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.addChildren(org.jsoup.nodes.Node)",
    "snippet": "protected void addChildren(Node... children) {\n        //most used. short circuit addChildren(int), which hits reindex children and array copy\n        for (Node child: children) {\n            reparentChild(child);\n            childNodes.add(child);\n            child.setSiblingIndex(childNodes.size()-1);\n        }\n    }",
    "begin_line": 268,
    "end_line": 275,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.addChildren#277",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.addChildren(int, org.jsoup.nodes.Node)",
    "snippet": "protected void addChildren(int index, Node... children) {\n        Validate.noNullElements(children);\n        for (int i \u003d children.length - 1; i \u003e\u003d 0; i--) {\n            Node in \u003d children[i];\n            reparentChild(in);\n            childNodes.add(index, in);\n        }\n        reindexChildren();\n    }",
    "begin_line": 277,
    "end_line": 285,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.reparentChild#287",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.reparentChild(org.jsoup.nodes.Node)",
    "snippet": "private void reparentChild(Node child) {\n        if (child.parentNode !\u003d null)\n            child.parentNode.removeChild(child);\n        child.setParentNode(this);\n    }",
    "begin_line": 287,
    "end_line": 291,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.reindexChildren#293",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.reindexChildren()",
    "snippet": "private void reindexChildren() {\n        for (int i \u003d 0; i \u003c childNodes.size(); i++) {\n            childNodes.get(i).setSiblingIndex(i);\n        }\n    }",
    "begin_line": 293,
    "end_line": 297,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.siblingNodes#303",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.siblingNodes()",
    "snippet": "public List\u003cNode\u003e siblingNodes() {\n        return parent().childNodes(); // TODO: should this strip out this node? i.e. not a sibling of self?\n    }",
    "begin_line": 303,
    "end_line": 305,
    "comment": "/** \n * Retrieves this node\u0027s sibling nodes. Effectively,  {@link #childNodes()  node.parent.childNodes()}.\n * @return node siblings, including this node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.nextSibling#311",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.nextSibling()",
    "snippet": "public Node nextSibling() {\n        if (parentNode \u003d\u003d null)\n            return null; // root\n        \n        List\u003cNode\u003e siblings \u003d parentNode.childNodes;\n        Integer index \u003d siblingIndex();\n        Validate.notNull(index);\n        if (siblings.size() \u003e index+1)\n            return siblings.get(index+1);\n        else\n            return null;\n    }",
    "begin_line": 311,
    "end_line": 322,
    "comment": "/** \n * Get this node\u0027s next sibling.\n * @return next sibling, or null if this is the last sibling\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.previousSibling#328",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.previousSibling()",
    "snippet": "public Node previousSibling() {\n        List\u003cNode\u003e siblings \u003d parentNode.childNodes;\n        Integer index \u003d siblingIndex();\n        Validate.notNull(index);\n        if (index \u003e 0)\n            return siblings.get(index-1);\n        else\n            return null;\n    }",
    "begin_line": 328,
    "end_line": 336,
    "comment": "/** \n * Get this node\u0027s previous sibling.\n * @return the previous sibling, or null if this is the first sibling\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.siblingIndex#344",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.siblingIndex()",
    "snippet": "public Integer siblingIndex() {\n        return siblingIndex;\n    }",
    "begin_line": 344,
    "end_line": 346,
    "comment": "/** \n * Get the list index of this node in its node sibling list. I.e. if this is the first node sibling, returns 0.\n * @return position in node sibling list\n * @see org.jsoup.nodes.Element#elementSiblingIndex()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.setSiblingIndex#348",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.setSiblingIndex(int)",
    "snippet": "protected void setSiblingIndex(int siblingIndex) {\n        this.siblingIndex \u003d siblingIndex;\n    }",
    "begin_line": 348,
    "end_line": 350,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.outerHtml#356",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.outerHtml()",
    "snippet": "public String outerHtml() {\n        StringBuilder accum \u003d new StringBuilder(32*1024);\n        outerHtml(accum);\n        return accum.toString();\n    }",
    "begin_line": 356,
    "end_line": 360,
    "comment": "/** \n * Get the outer HTML of this node.\n * @return HTML\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.outerHtml#362",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.outerHtml(java.lang.StringBuilder)",
    "snippet": "protected void outerHtml(StringBuilder accum) {\n        new NodeTraversor(new OuterHtmlVisitor(accum, ownerDocument().outputSettings())).traverse(this);\n    }",
    "begin_line": 362,
    "end_line": 364,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.outerHtmlHead#372",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.outerHtmlHead(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "abstract void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out);",
    "begin_line": 372,
    "end_line": 372,
    "comment": "/** \n * Get the outer HTML of this node.\n * @param accum accumulator to place HTML into\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.outerHtmlTail#374",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.outerHtmlTail(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "abstract void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out);",
    "begin_line": 374,
    "end_line": 374,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.toString#376",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.toString()",
    "snippet": "public String toString() {\n        return outerHtml();\n    }",
    "begin_line": 376,
    "end_line": 378,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.indent#380",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.indent(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": "protected void indent(StringBuilder accum, int depth, Document.OutputSettings out) {\n        accum.append(\"\\n\").append(StringUtil.padding(depth * out.indentAmount()));\n    }",
    "begin_line": 380,
    "end_line": 382,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.equals#385",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        if (this \u003d\u003d o) return true;\n        // todo: have nodes hold a child index, compare against that and parent (not children)\n        return false;\n    }",
    "begin_line": 385,
    "end_line": 389,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Node.hashCode#392",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        int result \u003d parentNode !\u003d null ? parentNode.hashCode() : 0;\n        // not children, or will block stack as they go back up to parent)\n        result \u003d 31 * result + (attributes !\u003d null ? attributes.hashCode() : 0);\n        return result;\n    }",
    "begin_line": 392,
    "end_line": 397,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OuterHtmlVisitor.OuterHtmlVisitor#403",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.OuterHtmlVisitor(java.lang.StringBuilder, org.jsoup.nodes.Document.OutputSettings)",
    "snippet": " OuterHtmlVisitor(StringBuilder accum, Document.OutputSettings out) {\n            this.accum \u003d accum;\n            this.out \u003d out;\n        }",
    "begin_line": 403,
    "end_line": 406,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OuterHtmlVisitor.head#408",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.head(org.jsoup.nodes.Node, int)",
    "snippet": "public void head(Node node, int depth) {\n            node.outerHtmlHead(accum, depth, out);\n        }",
    "begin_line": 408,
    "end_line": 410,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OuterHtmlVisitor.tail#412",
    "is_bug": true,
    "src_path": "org/jsoup/nodes/Node.java",
    "class_name": "org.jsoup.nodes.Node",
    "signature": "org.jsoup.nodes.Node.tail(org.jsoup.nodes.Node, int)",
    "snippet": "public void tail(Node node, int depth) {\n            if (!node.nodeName().equals(\"#text\")) // saves a void hit.\n                node.outerHtmlTail(accum, depth, out);\n        }",
    "begin_line": 412,
    "end_line": 415,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.Parser#29",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.Parser(java.lang.String, java.lang.String, boolean)",
    "snippet": "private Parser(String html, String baseUri, boolean isBodyFragment) {\n        Validate.notNull(html);\n        Validate.notNull(baseUri);\n\n        stack \u003d new LinkedList\u003cElement\u003e();\n        tq \u003d new TokenQueue(html);\n        this.baseUri \u003d baseUri;\n\n        if (isBodyFragment) {\n            doc \u003d Document.createShell(baseUri);\n            stack.add(doc.body());\n        } else {\n            doc \u003d new Document(baseUri);\n            stack.add(doc);\n        }\n    }",
    "begin_line": 29,
    "end_line": 44,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parse#52",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parse(java.lang.String, java.lang.String)",
    "snippet": "public static Document parse(String html, String baseUri) {\n        Parser parser \u003d new Parser(html, baseUri, false);\n        return parser.parse();\n    }",
    "begin_line": 52,
    "end_line": 55,
    "comment": "/** \n * Parse HTML into a Document.\n * @param html HTML to parse\n * @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n * @return parsed Document\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parseBodyFragment#63",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parseBodyFragment(java.lang.String, java.lang.String)",
    "snippet": "public static Document parseBodyFragment(String bodyHtml, String baseUri) {\n        Parser parser \u003d new Parser(bodyHtml, baseUri, true);\n        return parser.parse();\n    }",
    "begin_line": 63,
    "end_line": 66,
    "comment": "/** \n * Parse a fragment of HTML into the  {@code body} of a Document.\n * @param bodyHtml fragment of HTML\n * @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n * @return Document, with empty head, and HTML parsed into body\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parseBodyFragmentRelaxed#75",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parseBodyFragmentRelaxed(java.lang.String, java.lang.String)",
    "snippet": "public static Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {\n        Parser parser \u003d new Parser(bodyHtml, baseUri, true);\n        parser.relaxed \u003d true;\n        return parser.parse();\n    }",
    "begin_line": 75,
    "end_line": 79,
    "comment": "/** \n * Parse a fragment of HTML into the  {@code body} of a Document, with relaxed parsing enabled. Relaxed, in thiscontext, means that implicit tags are not automatically created when missing.\n * @param bodyHtml fragment of HTML\n * @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n * @return Document, with empty head, and HTML parsed into body\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parse#81",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parse()",
    "snippet": "private Document parse() {\n        while (!tq.isEmpty()) {\n            if (tq.matchesStartTag()) {\n                parseStartTag();\n            } else if (tq.matchesCS(\"\u003c/\")) {\n                parseEndTag();\n            } else if (tq.matchesCS(\"\u003c!--\")) {\n                parseComment();\n            } else if (tq.matches(\"\u003c![CDATA[\")) {\n                parseCdata();\n            } else if (tq.matchesCS(\"\u003c?\") || tq.matchesCS(\"\u003c!\")) {\n                parseXmlDecl();\n            } else {\n                parseTextNode();\n            }\n        }\n        return doc.normalise();\n    }",
    "begin_line": 81,
    "end_line": 98,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parseComment#100",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parseComment()",
    "snippet": "private void parseComment() {\n        tq.consume(\"\u003c!--\");\n        String data \u003d tq.chompTo(\"-\u003e\");\n\n        if (data.endsWith(\"-\")) // i.e. was --\u003e\n            data \u003d data.substring(0, data.length()-1);\n        Comment comment \u003d new Comment(data, baseUri);\n        last().appendChild(comment);\n    }",
    "begin_line": 100,
    "end_line": 108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parseXmlDecl#110",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parseXmlDecl()",
    "snippet": "private void parseXmlDecl() {\n        tq.consume(\"\u003c\");\n        Character firstChar \u003d tq.consume(); // \u003c? or \u003c!, from initial match.\n        boolean procInstr \u003d firstChar.toString().equals(\"!\");\n        String data \u003d tq.chompTo(\"\u003e\");\n\n        XmlDeclaration decl \u003d new XmlDeclaration(data, baseUri, procInstr);\n        last().appendChild(decl);\n    }",
    "begin_line": 110,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parseEndTag#120",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parseEndTag()",
    "snippet": "private void parseEndTag() {\n        tq.consume(\"\u003c/\");\n        String tagName \u003d tq.consumeTagName();\n        tq.chompTo(\"\u003e\");\n\n        if (tagName.length() !\u003d 0) {\n            Tag tag \u003d Tag.valueOf(tagName);\n            if (!last().tag().isIgnorableEndTag(tag)) // skips \u003c/tr\u003e if in \u003ctable\u003e\n                popStackToClose(tag);\n        }\n    }",
    "begin_line": 120,
    "end_line": 130,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parseStartTag#132",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parseStartTag()",
    "snippet": "private void parseStartTag() {\n        tq.consume(\"\u003c\");\n        String tagName \u003d tq.consumeTagName();\n        Validate.notEmpty(tagName, \"Unexpectedly empty tagname. (This should not occur, please report!)\");\n        \n        tq.consumeWhitespace();\n        Attributes attributes \u003d new Attributes();\n        while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n            Attribute attribute \u003d parseAttribute();\n            if (attribute !\u003d null)\n                attributes.put(attribute);\n        }\n\n        Tag tag \u003d Tag.valueOf(tagName);\n        Element child \u003d new Element(tag, baseUri, attributes);\n\n        boolean isEmptyElement \u003d tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (\u003cdiv/\u003e\n        if (tq.matchChomp(\"/\u003e\")) { // close empty element or tag\n            isEmptyElement \u003d true;\n            if (!tag.isKnownTag()) // if unknown and a self closed, allow it to be self closed on output. this doesn\u0027t force all instances to be empty\n                tag.setSelfClosing();\n        } else {\n            tq.matchChomp(\"\u003e\");\n        }\n        addChildToParent(child, isEmptyElement);\n\n        // pc data only tags (textarea, script): chomp to end tag, add content as text node\n        if (tag.isData()) {\n            String data \u003d tq.chompToIgnoreCase(\"\u003c/\" + tagName);\n            tq.chompTo(\"\u003e\");\n            popStackToClose(tag);\n            \n            Node dataNode;\n            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)\n                dataNode \u003d TextNode.createFromEncoded(data, baseUri);\n            else\n                dataNode \u003d new DataNode(data, baseUri); // data not encoded but raw (for \" in script)\n            child.appendChild(dataNode);   \n        }\n\n        // \u003cbase href\u003e: update the base uri\n        if (child.tagName().equals(\"base\")) {\n            String href \u003d child.absUrl(\"href\");\n            if (href.length() !\u003d 0) { // ignore \u003cbase target\u003e etc\n                baseUri \u003d href;\n                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base\n            }\n        }\n    }",
    "begin_line": 132,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parseAttribute#182",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parseAttribute()",
    "snippet": "private Attribute parseAttribute() {\n        tq.consumeWhitespace();\n        String key \u003d tq.consumeAttributeKey();\n        String value \u003d \"\";\n        tq.consumeWhitespace();\n        if (tq.matchChomp(\"\u003d\")) {\n            tq.consumeWhitespace();\n\n            if (tq.matchChomp(SQ)) {\n                value \u003d tq.chompTo(SQ);\n            } else if (tq.matchChomp(DQ)) {\n                value \u003d tq.chompTo(DQ);\n            } else {\n                StringBuilder valueAccum \u003d new StringBuilder();\n                // no \u0027 or \" to look for, so scan to end tag or space (or end of stream)\n                while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.matchesWhitespace() \u0026\u0026 !tq.isEmpty()) {\n                    valueAccum.append(tq.consume());\n                }\n                value \u003d valueAccum.toString();\n            }\n            tq.consumeWhitespace();\n        }\n        if (key.length() !\u003d 0)\n            return Attribute.createFromEncoded(key, value);\n        else {\n            if (value.length() \u003d\u003d 0) // no key, no val; unknown char, keep popping so not get stuck\n                tq.advance();\n                \n            return null;\n        }\n    }",
    "begin_line": 182,
    "end_line": 212,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parseTextNode#214",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parseTextNode()",
    "snippet": "private void parseTextNode() {\n        TextNode textNode;\n        // special case: handle string like \"hello \u003c there\". first char will be \"\u003c\", because of matchStartTag\n        if (tq.peek().equals(\u0027\u003c\u0027)) {\n            tq.advance();\n            textNode \u003d new TextNode(\"\u003c\", baseUri);\n        } else {\n            String text \u003d tq.consumeTo(\"\u003c\");\n            textNode \u003d TextNode.createFromEncoded(text, baseUri);\n        }\n        last().appendChild(textNode);\n    }",
    "begin_line": 214,
    "end_line": 225,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parseCdata#227",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.parseCdata()",
    "snippet": "private void parseCdata() {\n        tq.consume(\"\u003c![CDATA[\");\n        String rawText \u003d tq.chompTo(\"]]\u003e\");\n        TextNode textNode \u003d new TextNode(rawText, baseUri); // constructor does not escape\n        last().appendChild(textNode);\n    }",
    "begin_line": 227,
    "end_line": 232,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.addChildToParent#234",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.addChildToParent(org.jsoup.nodes.Element, boolean)",
    "snippet": "private Element addChildToParent(Element child, boolean isEmptyElement) {\n        Element parent \u003d popStackToSuitableContainer(child.tag());\n        Tag childTag \u003d child.tag();\n        boolean validAncestor \u003d stackHasValidParent(childTag);\n\n        if (!validAncestor \u0026\u0026 !relaxed) {\n            // create implicit parent around this child\n            Tag parentTag \u003d childTag.getImplicitParent();\n            Element implicit \u003d new Element(parentTag, baseUri);\n            // special case: make sure there\u0027s a head before putting in body\n            if (child.tag().equals(bodyTag)) {\n                Element head \u003d new Element(headTag, baseUri);\n                implicit.appendChild(head);\n            }\n            implicit.appendChild(child);\n\n            // recurse to ensure somewhere to put parent\n            Element root \u003d addChildToParent(implicit, false);\n            if (!isEmptyElement)\n                stack.addLast(child);\n            return root;\n        }\n\n        parent.appendChild(child);\n\n        if (!isEmptyElement)\n            stack.addLast(child);\n        return parent;\n    }",
    "begin_line": 234,
    "end_line": 262,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.stackHasValidParent#264",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.stackHasValidParent(org.jsoup.parser.Tag)",
    "snippet": "private boolean stackHasValidParent(Tag childTag) {\n        if (stack.size() \u003d\u003d 1 \u0026\u0026 childTag.equals(htmlTag))\n            return true; // root is valid for html node\n\n        if (childTag.requiresSpecificParent())\n            return stack.getLast().tag().isValidParent(childTag);\n\n        // otherwise, look up the stack for valid ancestors\n        for (int i \u003d stack.size() -1; i \u003e\u003d 0; i--) {\n            Element el \u003d stack.get(i);\n            Tag parent2 \u003d el.tag();\n            if (parent2.isValidAncestor(childTag)) {\n                return true;\n            }\n        }\n        return false;\n    }",
    "begin_line": 264,
    "end_line": 280,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.popStackToSuitableContainer#282",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.popStackToSuitableContainer(org.jsoup.parser.Tag)",
    "snippet": "private Element popStackToSuitableContainer(Tag tag) {\n        while (!stack.isEmpty()) {\n            if (last().tag().canContain(tag))\n                return last();\n            else\n                stack.removeLast();\n        }\n        return null;\n    }",
    "begin_line": 282,
    "end_line": 290,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.popStackToClose#292",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.popStackToClose(org.jsoup.parser.Tag)",
    "snippet": "private Element popStackToClose(Tag tag) {\n        // first check to see if stack contains this tag; if so pop to there, otherwise ignore\n        int counter \u003d 0;\n        Element elToClose \u003d null;\n        for (int i \u003d stack.size() -1; i \u003e 0; i--) {\n            counter++;\n            Element el \u003d stack.get(i);\n            Tag elTag \u003d el.tag();\n            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don\u0027t close past body\n                break;\n            } else if (elTag.equals(tag)) {\n                elToClose \u003d el;\n                break;\n            }\n        }\n        if (elToClose !\u003d null) {\n            for (int i \u003d 0; i \u003c counter; i++) {\n                stack.removeLast();\n            }\n        }\n        return elToClose;\n    }",
    "begin_line": 292,
    "end_line": 313,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.last#315",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Parser.java",
    "class_name": "org.jsoup.parser.Parser",
    "signature": "org.jsoup.parser.Parser.last()",
    "snippet": "private Element last() {\n        return stack.getLast();\n    }",
    "begin_line": 315,
    "end_line": 317,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.Tag#35",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.Tag(java.lang.String)",
    "snippet": "private Tag(String tagName) {\n        this.tagName \u003d tagName.toLowerCase();\n    }",
    "begin_line": 35,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.getName#39",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.getName()",
    "snippet": "public String getName() {\n        return tagName;\n    }",
    "begin_line": 39,
    "end_line": 41,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.valueOf#50",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.valueOf(java.lang.String)",
    "snippet": "public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName \u003d tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag \u003d tags.get(tagName);\n            if (tag \u003d\u003d null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a \u003cp\u003e)\n                tag \u003d new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\n                tag.setExcludes();\n                tag.isBlock \u003d false;\n                tag.canContainBlock \u003d true;\n            }\n            return tag;\n        }\n    }",
    "begin_line": 50,
    "end_line": 67,
    "comment": "/** \n * Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything. \u003cp\u003e Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n * @param tagName Name of tag, e.g. \"p\". Case insensitive.\n * @return The tag, either defined or new generic.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.canContain#74",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.canContain(org.jsoup.parser.Tag)",
    "snippet": "boolean canContain(Tag child) {\n        Validate.notNull(child);\n\n        if (child.isBlock \u0026\u0026 !this.canContainBlock)\n            return false;\n\n        if (!child.isBlock \u0026\u0026 !this.canContainInline) // not block \u003d\u003d inline\n            return false;\n\n        if (this.optionalClosing \u0026\u0026 this.equals(child))\n            return false;\n\n        if (this.empty || this.isData())\n            return false;\n        \n        // don\u0027t allow children to contain their parent (directly)\n        if (this.requiresSpecificParent() \u0026\u0026 this.getImplicitParent().equals(child))\n            return false;\n\n        // confirm limited children\n        if (limitChildren) {\n            for (Tag childParent : child.ancestors) {\n                if (childParent.equals(this))\n                    return true;\n            }\n            return false;\n        }\n        \n        // exclude children\n        if (!excludes.isEmpty()) {\n            for (Tag excluded: excludes) {\n                if (child.equals(excluded))\n                    return false;\n            }\n        }\n        \n        return true;\n    }",
    "begin_line": 74,
    "end_line": 111,
    "comment": "/** \n * Test if this tag, the prospective parent, can accept the proposed child.\n * @param child potential child tag.\n * @return true if this can contain child.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isBlock#117",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isBlock()",
    "snippet": "public boolean isBlock() {\n        return isBlock;\n    }",
    "begin_line": 117,
    "end_line": 119,
    "comment": "/** \n * Gets if this is a block tag.\n * @return if block tag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.canContainBlock#125",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.canContainBlock()",
    "snippet": "public boolean canContainBlock() {\n        return canContainBlock;\n    }",
    "begin_line": 125,
    "end_line": 127,
    "comment": "/** \n * Gets if this tag can contain block tags.\n * @return if tag can contain block tags\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isInline#133",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isInline()",
    "snippet": "public boolean isInline() {\n        return !isBlock;\n    }",
    "begin_line": 133,
    "end_line": 135,
    "comment": "/** \n * Gets if this tag is an inline tag.\n * @return if this tag is an inline tag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isData#141",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isData()",
    "snippet": "public boolean isData() {\n        return !canContainInline \u0026\u0026 !isEmpty();\n    }",
    "begin_line": 141,
    "end_line": 143,
    "comment": "/** \n * Gets if this tag is a data only tag.\n * @return if this tag is a data only tag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isEmpty#149",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isEmpty()",
    "snippet": "public boolean isEmpty() {\n        return empty;\n    }",
    "begin_line": 149,
    "end_line": 151,
    "comment": "/** \n * Get if this is an empty tag\n * @return if this is an emtpy tag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isSelfClosing#157",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isSelfClosing()",
    "snippet": "public boolean isSelfClosing() {\n        return empty || selfClosing;\n    }",
    "begin_line": 157,
    "end_line": 159,
    "comment": "/** \n * Get if this tag is self closing.\n * @return if this tag should be output as self closing.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isKnownTag#165",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isKnownTag()",
    "snippet": "public boolean isKnownTag() {\n        return knownTag;\n    }",
    "begin_line": 165,
    "end_line": 167,
    "comment": "/** \n * Get if this is a pre-defined tag, or was auto created on parsing.\n * @return if a known tag\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.preserveWhitespace#173",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.preserveWhitespace()",
    "snippet": "public boolean preserveWhitespace() {\n        return preserveWhitespace;\n    }",
    "begin_line": 173,
    "end_line": 175,
    "comment": "/** \n * Get if this tag should preserve whitespace within child text nodes.\n * @return if preserve whitepace\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.getImplicitParent#177",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.getImplicitParent()",
    "snippet": "Tag getImplicitParent() {\n        return (!ancestors.isEmpty()) ? ancestors.get(0) : null;\n    }",
    "begin_line": 177,
    "end_line": 179,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.requiresSpecificParent#181",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.requiresSpecificParent()",
    "snippet": "boolean requiresSpecificParent() {\n        return directDescendant;\n    }",
    "begin_line": 181,
    "end_line": 183,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isValidParent#185",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isValidParent(org.jsoup.parser.Tag)",
    "snippet": "boolean isValidParent(Tag child) {\n        return isValidAncestor(child);\n    }",
    "begin_line": 185,
    "end_line": 187,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isValidAncestor#189",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isValidAncestor(org.jsoup.parser.Tag)",
    "snippet": "boolean isValidAncestor(Tag child) {\n        if (child.ancestors.isEmpty())\n            return true; // HTML tag\n\n        for (int i \u003d 0; i \u003c child.ancestors.size(); i++)\n            if (this.equals(child.ancestors.get(i)))\n                return true;\n        \n        return false;\n    }",
    "begin_line": 189,
    "end_line": 198,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.isIgnorableEndTag#200",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.isIgnorableEndTag(org.jsoup.parser.Tag)",
    "snippet": "boolean isIgnorableEndTag(Tag child) {\n        for (Tag endTag : ignoreEndTags) {\n            if (child.equals(endTag))\n                return true;\n        }\n        return false;        \n    }",
    "begin_line": 200,
    "end_line": 206,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.equals#209",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        if (this \u003d\u003d o) return true;\n        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;\n\n        Tag tag \u003d (Tag) o;\n\n        if (tagName !\u003d null ? !tagName.equals(tag.tagName) : tag.tagName !\u003d null) return false;\n\n        return true;\n    }",
    "begin_line": 209,
    "end_line": 218,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.hashCode#221",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.hashCode()",
    "snippet": "@Override\n    public int hashCode() {\n        int result \u003d tagName !\u003d null ? tagName.hashCode() : 0;\n        result \u003d 31 * result + (isBlock ? 1 : 0);\n        result \u003d 31 * result + (canContainBlock ? 1 : 0);\n        result \u003d 31 * result + (canContainInline ? 1 : 0);\n        result \u003d 31 * result + (optionalClosing ? 1 : 0);\n        result \u003d 31 * result + (empty ? 1 : 0);\n        return result;\n    }",
    "begin_line": 221,
    "end_line": 229,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.toString#231",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.toString()",
    "snippet": "public String toString() {\n        return tagName;\n    }",
    "begin_line": 231,
    "end_line": 233,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.createBlock#393",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.createBlock(java.lang.String)",
    "snippet": "private static Tag createBlock(String tagName) {\n        return register(new Tag(tagName));\n    }",
    "begin_line": 393,
    "end_line": 395,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.createInline#397",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.createInline(java.lang.String)",
    "snippet": "private static Tag createInline(String tagName) {\n        Tag inline \u003d new Tag(tagName);\n        inline.isBlock \u003d false;\n        inline.canContainBlock \u003d false;\n        return register(inline);\n    }",
    "begin_line": 397,
    "end_line": 402,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.register#404",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.register(org.jsoup.parser.Tag)",
    "snippet": "private static Tag register(Tag tag) {\n        tag.setAncestor(defaultAncestor.tagName);\n        tag.setKnownTag();\n        synchronized (tags) {\n            tags.put(tag.tagName, tag);\n        }\n        return tag;\n    }",
    "begin_line": 404,
    "end_line": 411,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.setCanContainBlock#413",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.setCanContainBlock()",
    "snippet": "private Tag setCanContainBlock() {\n        canContainBlock \u003d true;\n        return this;\n    }",
    "begin_line": 413,
    "end_line": 416,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.setContainInlineOnly#418",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.setContainInlineOnly()",
    "snippet": "private Tag setContainInlineOnly() {\n        canContainBlock \u003d false;\n        canContainInline \u003d true;\n        return this;\n    }",
    "begin_line": 418,
    "end_line": 422,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.setContainDataOnly#424",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.setContainDataOnly()",
    "snippet": "private Tag setContainDataOnly() {\n        canContainBlock \u003d false;\n        canContainInline \u003d false;\n        preserveWhitespace \u003d true;\n        return this;\n    }",
    "begin_line": 424,
    "end_line": 429,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.setEmpty#431",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.setEmpty()",
    "snippet": "private Tag setEmpty() {\n        canContainBlock \u003d false;\n        canContainInline \u003d false;\n        empty \u003d true;\n        return this;\n    }",
    "begin_line": 431,
    "end_line": 436,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.setOptionalClosing#438",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.setOptionalClosing()",
    "snippet": "private Tag setOptionalClosing() {\n        optionalClosing \u003d true;\n        return this;\n    }",
    "begin_line": 438,
    "end_line": 441,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.setPreserveWhitespace#443",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.setPreserveWhitespace()",
    "snippet": "private Tag setPreserveWhitespace() {\n        preserveWhitespace \u003d true;\n        return this;\n    }",
    "begin_line": 443,
    "end_line": 446,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.setAncestor#448",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.setAncestor(java.lang.String)",
    "snippet": "private Tag setAncestor(String... tagNames) {\n        if (tagNames \u003d\u003d null || tagNames.length \u003d\u003d 0) {\n            ancestors \u003d Collections.emptyList();\n        } else {\n            ancestors \u003d new ArrayList\u003cTag\u003e(tagNames.length);\n            for (String name : tagNames) {\n                ancestors.add(Tag.valueOf(name));\n            }\n        }\n        return this;\n    }",
    "begin_line": 448,
    "end_line": 458,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.setExcludes#460",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.setExcludes(java.lang.String)",
    "snippet": "private Tag setExcludes(String... tagNames) {\n        if (tagNames \u003d\u003d null || tagNames.length \u003d\u003d 0) {\n            excludes \u003d Collections.emptyList();\n        } else {\n            excludes \u003d new ArrayList\u003cTag\u003e(tagNames.length);\n            for (String name : tagNames) {\n                excludes.add(Tag.valueOf(name));\n            }\n        }\n        return this;\n    }",
    "begin_line": 460,
    "end_line": 470,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.setIgnoreEnd#472",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.setIgnoreEnd(java.lang.String)",
    "snippet": "private Tag setIgnoreEnd(String... tagNames) {\n        if (tagNames \u003d\u003d null || tagNames.length \u003d\u003d 0) {\n            ignoreEndTags \u003d Collections.emptyList();\n        } else {\n            ignoreEndTags \u003d new ArrayList\u003cTag\u003e(tagNames.length);\n            for (String name : tagNames) {\n                ignoreEndTags.add(Tag.valueOf(name));\n            }\n        }\n        return this;\n    }",
    "begin_line": 472,
    "end_line": 482,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.setParent#484",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.setParent(java.lang.String)",
    "snippet": "private Tag setParent(String... tagNames) {\n        directDescendant \u003d true;\n        setAncestor(tagNames);\n        return this;\n    }",
    "begin_line": 484,
    "end_line": 488,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.setLimitChildren#490",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.setLimitChildren()",
    "snippet": "private Tag setLimitChildren() {\n        limitChildren \u003d true;\n        return this;\n    }",
    "begin_line": 490,
    "end_line": 493,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.setSelfClosing#495",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.setSelfClosing()",
    "snippet": "Tag setSelfClosing() {\n        selfClosing \u003d true;\n        return this;\n    }",
    "begin_line": 495,
    "end_line": 498,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Tag.setKnownTag#500",
    "is_bug": true,
    "src_path": "org/jsoup/parser/Tag.java",
    "class_name": "org.jsoup.parser.Tag",
    "signature": "org.jsoup.parser.Tag.setKnownTag()",
    "snippet": "private Tag setKnownTag() {\n        knownTag \u003d true;\n        return this;\n    }",
    "begin_line": 500,
    "end_line": 503,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.TokenQueue#20",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.TokenQueue(java.lang.String)",
    "snippet": "public TokenQueue(String data) {\n        Validate.notNull(data);\n        queue \u003d data;\n    }",
    "begin_line": 20,
    "end_line": 23,
    "comment": "/** \n * Create a new TokenQueue.\n * @param data string of data to back queue.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.isEmpty#29",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.isEmpty()",
    "snippet": "public boolean isEmpty() {\n        return remainingLength() \u003d\u003d 0;\n    }",
    "begin_line": 29,
    "end_line": 31,
    "comment": "/** \n * Is the queue empty?\n * @return true if no data left in queue.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.remainingLength#33",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.remainingLength()",
    "snippet": "private int remainingLength() {\n        return queue.length() - pos;\n    }",
    "begin_line": 33,
    "end_line": 35,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.peek#41",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.peek()",
    "snippet": "public Character peek() {\n        return isEmpty() ? null : queue.charAt(pos);\n    }",
    "begin_line": 41,
    "end_line": 43,
    "comment": "/** \n * Retrieves but does not remove the first character from the queue.\n * @return First character, or null if empty.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.addFirst#49",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.addFirst(java.lang.Character)",
    "snippet": "public void addFirst(Character c) {\n        addFirst(c.toString());\n    }",
    "begin_line": 49,
    "end_line": 51,
    "comment": "/** \n * Add a character to the start of the queue (will be the next character retrieved).\n * @param c character to add\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.addFirst#57",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.addFirst(java.lang.String)",
    "snippet": "public void addFirst(String seq) {\n        // not very performant, but an edge case\n        queue \u003d seq + queue.substring(pos);\n        pos \u003d 0;\n    }",
    "begin_line": 57,
    "end_line": 61,
    "comment": "/** \n * Add a string to the start of the queue.\n * @param seq string to add.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.matches#68",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.matches(java.lang.String)",
    "snippet": "public boolean matches(String seq) {\n        int count \u003d seq.length();\n        if (count \u003e remainingLength())\n            return false;\n\n        while (--count \u003e\u003d 0) {\n            if (Character.toLowerCase(seq.charAt(count)) !\u003d Character.toLowerCase(queue.charAt(pos+count)))\n                return false;\n        }\n        return true;\n    }",
    "begin_line": 68,
    "end_line": 78,
    "comment": "/** \n * Tests if the next characters on the queue match the sequence. Case insensitive.\n * @param seq String to check queue for.\n * @return true if the next characters match.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.matchesCS#85",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.matchesCS(java.lang.String)",
    "snippet": "public boolean matchesCS(String seq) {\n        return queue.startsWith(seq, pos);\n    }",
    "begin_line": 85,
    "end_line": 87,
    "comment": "/** \n * Case sensitive match test.\n * @param seq\n * @return\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.matchesAny#95",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.matchesAny(java.lang.String)",
    "snippet": "public boolean matchesAny(String... seq) {\n        for (String s : seq) {\n            if (matches(s))\n                return true;\n        }\n        return false;\n    }",
    "begin_line": 95,
    "end_line": 101,
    "comment": "/** \n * Tests if the next characters match any of the sequences. Case insensitive.\n * @param seq\n * @return\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.matchesAny#103",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.matchesAny(char)",
    "snippet": "public boolean matchesAny(char... seq) {\n        if (isEmpty())\n            return false;\n\n        for (char c: seq) {\n            if (queue.charAt(pos) \u003d\u003d c)\n                return true;\n        }\n        return false;\n    }",
    "begin_line": 103,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.matchesStartTag#114",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.matchesStartTag()",
    "snippet": "public boolean matchesStartTag() {\n        // micro opt for matching \"\u003cx\"\n        return (remainingLength() \u003e\u003d 2 \u0026\u0026 queue.charAt(pos) \u003d\u003d \u0027\u003c\u0027 \u0026\u0026 Character.isLetterOrDigit(queue.charAt(pos+1)));\n    }",
    "begin_line": 114,
    "end_line": 117,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.matchChomp#125",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.matchChomp(java.lang.String)",
    "snippet": "public boolean matchChomp(String seq) {\n        if (matches(seq)) {\n            pos +\u003d seq.length();\n            return true;\n        } else {\n            return false;\n        }\n    }",
    "begin_line": 125,
    "end_line": 132,
    "comment": "/** \n * Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue.\n * @param seq String to search for, and if found, remove from queue.\n * @return true if found and removed, false if not found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.matchesWhitespace#138",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.matchesWhitespace()",
    "snippet": "public boolean matchesWhitespace() {\n        return !isEmpty() \u0026\u0026 Character.isWhitespace(queue.charAt(pos));\n    }",
    "begin_line": 138,
    "end_line": 140,
    "comment": "/** \n * Tests if queue starts with a whitespace character.\n * @return if starts with whitespace\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.matchesWord#146",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.matchesWord()",
    "snippet": "public boolean matchesWord() {\n        return !isEmpty() \u0026\u0026 Character.isLetterOrDigit(queue.charAt(pos));\n    }",
    "begin_line": 146,
    "end_line": 148,
    "comment": "/** \n * Test if the queue matches a word character (letter or digit).\n * @return if matches a word character\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.advance#153",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.advance()",
    "snippet": "public void advance() {\n        if (!isEmpty()) pos++;\n    }",
    "begin_line": 153,
    "end_line": 155,
    "comment": "/** \n * Drops the next character off the queue.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.consume#161",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.consume()",
    "snippet": "public Character consume() {\n        Character c \u003d queue.charAt(pos);\n        pos++;\n        return c;\n    }",
    "begin_line": 161,
    "end_line": 165,
    "comment": "/** \n * Consume one character off queue.\n * @return first character on queue.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.consume#174",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.consume(java.lang.String)",
    "snippet": "public void consume(String seq) {\n        if (!matches(seq))\n            throw new IllegalStateException(\"Queue did not match expected sequence\");\n        int len \u003d seq.length();\n        if (len \u003e remainingLength())\n            throw new IllegalStateException(\"Queue not long enough to consume sequence\");\n        \n        pos +\u003d len;\n    }",
    "begin_line": 174,
    "end_line": 182,
    "comment": "/** \n * Consumes the supplied sequence of the queue. If the queue does not start with the supplied sequence, will throw an illegal state exception -- but you should be running match() against that condition. \u003cp\u003e Case insensitive.\n * @param seq sequence to remove from head of queue.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.consumeTo#189",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.consumeTo(java.lang.String)",
    "snippet": "public String consumeTo(String seq) {\n        int offset \u003d queue.indexOf(seq, pos);\n        if (offset !\u003d -1) {\n            String consumed \u003d queue.substring(pos, offset);\n            pos +\u003d consumed.length();\n            return consumed;\n        } else {\n            return remainder();\n        }\n    }",
    "begin_line": 189,
    "end_line": 198,
    "comment": "/** \n * Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out.\n * @param seq String to end on (and not include in return, but leave on queue). \u003cb\u003eCase sensitive.\u003c/b\u003e\n * @return The matched data consumed from queue.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.consumeToIgnoreCase#200",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.consumeToIgnoreCase(java.lang.String)",
    "snippet": "public String consumeToIgnoreCase(String seq) {\n        int start \u003d pos;\n        String first \u003d seq.substring(0, 1);\n        boolean canScan \u003d first.toLowerCase().equals(first.toUpperCase()); // if first is not cased, use index of\n        while (!isEmpty() \u0026\u0026 !matches(seq)) {\n            if (canScan) {\n                int skip \u003d queue.indexOf(first, pos) - pos;\n                if (skip \u003c\u003d 0)\n                    pos++;\n                else if (skip \u003c 0) // no chance of finding, grab to end\n                    pos \u003d queue.length() - 1;\n                else\n                    pos +\u003d skip;\n            }\n            else\n                pos++;\n        }\n\n        String data \u003d queue.substring(start, pos); \n        return data; \n    }",
    "begin_line": 200,
    "end_line": 220,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.consumeToAny#229",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.consumeToAny(java.lang.String)",
    "snippet": " consumeToAny(String... seq) {\n        int start \u003d pos;\n        while (!isEmpty() \u0026\u0026 !matchesAny(seq)) {\n            pos++;\n        }\n\n        String data \u003d queue.substring(start, pos); \n        return data; \n    }",
    "begin_line": 229,
    "end_line": 237,
    "comment": "/** \n * Consumes to the first sequence provided, or to the end of the queue. Leaves the terminator on the queue.\n * @param seq any number of terminators to consume to. \u003cb\u003eCase insensitive.\u003c/b\u003e\n * @return consumed string   \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.chompTo#247",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.chompTo(java.lang.String)",
    "snippet": "public String chompTo(String seq) {\n        String data \u003d consumeTo(seq);\n        matchChomp(seq);\n        return data;\n    }",
    "begin_line": 247,
    "end_line": 251,
    "comment": "/** \n * Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it). \u003cp\u003e If the queue runs out of characters before finding the seq, will return as much as it can (and queue will go isEmpty() \u003d\u003d true).\n * @param seq String to match up to, and not include in return, and to pull off queue. \u003cb\u003eCase sensitive.\u003c/b\u003e\n * @return Data matched from queue.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.chompToIgnoreCase#253",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.chompToIgnoreCase(java.lang.String)",
    "snippet": "public String chompToIgnoreCase(String seq) {\n        String data \u003d consumeToIgnoreCase(seq); // case insensitive scan\n        matchChomp(seq);\n        return data;\n    }",
    "begin_line": 253,
    "end_line": 257,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.chompBalanced#268",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.chompBalanced(java.lang.Character, java.lang.Character)",
    "snippet": "public String chompBalanced(Character open, Character close) {\n        StringBuilder accum \u003d new StringBuilder();\n        int depth \u003d 0;\n        Character last \u003d null;\n\n        do {\n            if (isEmpty()) break;\n            Character c \u003d consume();\n            if (last \u003d\u003d null || !last.equals(ESC)) {\n                if (c.equals(open))\n                    depth++;\n                else if (c.equals(close))\n                    depth--;\n            }\n\n            if (depth \u003e 0 \u0026\u0026 last !\u003d null)\n                accum.append(c); // don\u0027t include the outer match pair in the return\n            last \u003d c;\n        } while (depth \u003e 0);\n        return accum.toString();\n    }",
    "begin_line": 268,
    "end_line": 288,
    "comment": "/** \n * Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\", and leave \" four\" on the queue. Unbalanced openers and closers can be escaped (with \\). Those escapes will be left in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for contains text strings; use unescape for that.\n * @param open opener\n * @param close closer\n * @return data matched from the queue\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.unescape#295",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.unescape(java.lang.String)",
    "snippet": "public static String unescape(String in) {\n        StringBuilder out \u003d new StringBuilder();\n        Character last \u003d null;\n        for (Character c : in.toCharArray()) {\n            if (c.equals(ESC)) {\n                if (last !\u003d null \u0026\u0026 last.equals(ESC))\n                    out.append(c);\n            }\n            else \n                out.append(c);\n            last \u003d c;\n        }\n        return out.toString();\n    }",
    "begin_line": 295,
    "end_line": 308,
    "comment": "/** \n * Unescaped a \\ escaped string.\n * @param in backslash escaped string\n * @return unescaped string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.consumeWhitespace#313",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.consumeWhitespace()",
    "snippet": "public boolean consumeWhitespace() {\n        boolean seen \u003d false;\n        while (matchesWhitespace()) {\n            pos++;\n            seen \u003d true;\n        }\n        return seen;\n    }",
    "begin_line": 313,
    "end_line": 320,
    "comment": "/** \n * Pulls the next run of whitespace characters of the queue.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.consumeWord#326",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.consumeWord()",
    "snippet": "public String consumeWord() {\n        int start \u003d pos;\n        while (matchesWord())\n            pos++;\n        return queue.substring(start, pos);\n    }",
    "begin_line": 326,
    "end_line": 331,
    "comment": "/** \n * Retrieves the next run of word type (letter or digit) off the queue.\n * @return String of word characters from queue, or empty string if none.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.consumeTagName#338",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.consumeTagName()",
    "snippet": "public String consumeTagName() {\n        int start \u003d pos;\n        while (!isEmpty() \u0026\u0026 (matchesWord() || matchesAny(\u0027:\u0027, \u0027_\u0027, \u0027-\u0027)))\n            pos++;\n        \n        return queue.substring(start, pos);\n    }",
    "begin_line": 338,
    "end_line": 344,
    "comment": "/** \n * Consume an tag name off the queue (word or :, _, -)\n * @return tag name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.consumeElementSelector#351",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.consumeElementSelector()",
    "snippet": "public String consumeElementSelector() {\n        int start \u003d pos;\n        while (!isEmpty() \u0026\u0026 (matchesWord() || matchesAny(\u0027|\u0027, \u0027_\u0027, \u0027-\u0027)))\n            pos++;\n        \n        return queue.substring(start, pos);\n    }",
    "begin_line": 351,
    "end_line": 357,
    "comment": "/** \n * Consume a CSS element selector (tag name, but | instead of : for namespaces, to not conflict with :pseudo selects).\n * @return tag name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.consumeCssIdentifier#364",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.consumeCssIdentifier()",
    "snippet": "public String consumeCssIdentifier() {\n        int start \u003d pos;\n        while (!isEmpty() \u0026\u0026 (matchesWord() || matchesAny(\u0027-\u0027, \u0027_\u0027)))\n            pos++;\n\n        return queue.substring(start, pos);\n    }",
    "begin_line": 364,
    "end_line": 370,
    "comment": "/** \n * Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier\n * @return identifier\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.consumeAttributeKey#376",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.consumeAttributeKey()",
    "snippet": "public String consumeAttributeKey() {\n        int start \u003d pos;\n        while (!isEmpty() \u0026\u0026 (matchesWord() || matchesAny(\u0027-\u0027, \u0027_\u0027, \u0027:\u0027)))\n            pos++;\n        \n        return queue.substring(start, pos);\n    }",
    "begin_line": 376,
    "end_line": 382,
    "comment": "/** \n * Consume an attribute key off the queue (letter, digit, -, _, :\")\n * @return attribute key\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.remainder#388",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.remainder()",
    "snippet": "public String remainder() {\n        StringBuilder accum \u003d new StringBuilder();\n        while (!isEmpty()) {\n            accum.append(consume());\n        }\n        return accum.toString();\n    }",
    "begin_line": 388,
    "end_line": 394,
    "comment": "/** \n * Consume and return whatever is left on the queue.\n * @return remained of queue.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TokenQueue.toString#396",
    "is_bug": true,
    "src_path": "org/jsoup/parser/TokenQueue.java",
    "class_name": "org.jsoup.parser.TokenQueue",
    "signature": "org.jsoup.parser.TokenQueue.toString()",
    "snippet": "public String toString() {\n        return queue.substring(pos);\n    }",
    "begin_line": 396,
    "end_line": 398,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Collector.Collector#14",
    "is_bug": true,
    "src_path": "org/jsoup/select/Collector.java",
    "class_name": "org.jsoup.select.Collector",
    "signature": "org.jsoup.select.Collector.Collector()",
    "snippet": "private Collector() {\n    }",
    "begin_line": 14,
    "end_line": 15,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Collector.collect#23",
    "is_bug": true,
    "src_path": "org/jsoup/select/Collector.java",
    "class_name": "org.jsoup.select.Collector",
    "signature": "org.jsoup.select.Collector.collect(org.jsoup.nodes.Evaluator, org.jsoup.nodes.Element)",
    "snippet": "public static Elements collect (Evaluator eval, Element root) {\n        Elements elements \u003d new Elements();\n        new NodeTraversor(new Accumulator(elements, eval)).traverse(root);\n        return elements;\n    }",
    "begin_line": 23,
    "end_line": 27,
    "comment": "/** \n * Build a list of elements, by visiting root and every descendant of root, and testing it against the evaluator.\n * @param eval Evaluator to test elements against\n * @param root root of tree to descend\n * @return list of matches; empty if none\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Accumulator.Accumulator#33",
    "is_bug": true,
    "src_path": "org/jsoup/select/Collector.java",
    "class_name": "org.jsoup.select.Collector",
    "signature": "org.jsoup.select.Collector.Accumulator(org.jsoup.select.Elements, org.jsoup.nodes.Evaluator)",
    "snippet": " Accumulator(Elements elements, Evaluator eval) {\n            this.elements \u003d elements;\n            this.eval \u003d eval;\n        }",
    "begin_line": 33,
    "end_line": 36,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Accumulator.head#38",
    "is_bug": true,
    "src_path": "org/jsoup/select/Collector.java",
    "class_name": "org.jsoup.select.Collector",
    "signature": "org.jsoup.select.Collector.head(org.jsoup.nodes.Node, int)",
    "snippet": "public void head(Node node, int depth) {\n            if (node instanceof Element) {\n                Element el \u003d (Element) node;\n                if (eval.matches(el))\n                    elements.add(el);\n            }\n        }",
    "begin_line": 38,
    "end_line": 44,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Accumulator.tail#46",
    "is_bug": true,
    "src_path": "org/jsoup/select/Collector.java",
    "class_name": "org.jsoup.select.Collector",
    "signature": "org.jsoup.select.Collector.tail(org.jsoup.nodes.Node, int)",
    "snippet": "public void tail(Node node, int depth) {\n            // void\n        }",
    "begin_line": 46,
    "end_line": 48,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.Elements#15",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.Elements()",
    "snippet": "public Elements() {\n        contents \u003d new ArrayList\u003cElement\u003e();\n    }",
    "begin_line": 15,
    "end_line": 17,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.Elements#19",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.Elements(java.util.Collection\u003corg.jsoup.nodes.Element\u003e)",
    "snippet": "public Elements(Collection\u003cElement\u003e elements) {\n        contents \u003d new ArrayList\u003cElement\u003e(elements);\n    }",
    "begin_line": 19,
    "end_line": 21,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.Elements#23",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.Elements(java.util.List\u003corg.jsoup.nodes.Element\u003e)",
    "snippet": "public Elements(List\u003cElement\u003e elements) {\n        contents \u003d elements;\n    }",
    "begin_line": 23,
    "end_line": 25,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.Elements#27",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.Elements(org.jsoup.nodes.Element)",
    "snippet": "public Elements(Element... elements) {\n        this(Arrays.asList(elements));\n    }",
    "begin_line": 27,
    "end_line": 29,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.attr#39",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.attr(java.lang.String)",
    "snippet": "public String attr(String attributeKey) {\n        for (Element element : contents) {\n            if (element.hasAttr(attributeKey))\n                return element.attr(attributeKey);\n        }\n        return \"\";\n    }",
    "begin_line": 39,
    "end_line": 45,
    "comment": "/** \n * Get an attribute value from the first matched element that has the attribute.\n * @param attributeKey The attribute key.\n * @return The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() \u003d\u003d true),or if the no elements have the attribute, returns empty string.\n * @see #hasAttr(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.hasAttr#52",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.hasAttr(java.lang.String)",
    "snippet": "public boolean hasAttr(String attributeKey) {\n        for (Element element : contents) {\n            if (element.hasAttr(attributeKey))\n                return true;\n        }\n        return false;\n    }",
    "begin_line": 52,
    "end_line": 58,
    "comment": "/** \n * Checks if any of the matched elements have this attribute set.\n * @param attributeKey attribute key\n * @return true if any of the elements have the attribute; false if none do.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.attr#66",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.attr(java.lang.String, java.lang.String)",
    "snippet": "public Elements attr(String attributeKey, String attributeValue) {\n        for (Element element : contents) {\n            element.attr(attributeKey, attributeValue);\n        }\n        return this;\n    }",
    "begin_line": 66,
    "end_line": 71,
    "comment": "/** \n * Set an attribute on all matched elements.\n * @param attributeKey attribute key\n * @param attributeValue attribute value\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.removeAttr#78",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.removeAttr(java.lang.String)",
    "snippet": "public Elements removeAttr(String attributeKey) {\n        for (Element element : contents) {\n            element.removeAttr(attributeKey);\n        }\n        return this;\n    }",
    "begin_line": 78,
    "end_line": 83,
    "comment": "/** \n * Remove an attribute from every matched element.\n * @param attributeKey The attribute to remove.\n * @return this (for chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.addClass#90",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.addClass(java.lang.String)",
    "snippet": "public Elements addClass(String className) {\n        for (Element element : contents) {\n            element.addClass(className);\n        }\n        return this;\n    }",
    "begin_line": 90,
    "end_line": 95,
    "comment": "/** \n * Add the class name to every matched element\u0027s  {@code class} attribute.\n * @param className class name to add\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.removeClass#102",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.removeClass(java.lang.String)",
    "snippet": "public Elements removeClass(String className) {\n        for (Element element : contents) {\n            element.removeClass(className);\n        }\n        return this;\n    }",
    "begin_line": 102,
    "end_line": 107,
    "comment": "/** \n * Remove the class name from every matched element\u0027s  {@code class} attribute, if present.\n * @param className class name to remove\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.toggleClass#114",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.toggleClass(java.lang.String)",
    "snippet": "public Elements toggleClass(String className) {\n        for (Element element : contents) {\n            element.toggleClass(className);\n        }\n        return this;\n    }",
    "begin_line": 114,
    "end_line": 119,
    "comment": "/** \n * Toggle the class name on every matched element\u0027s  {@code class} attribute.\n * @param className class name to add if missing, or remove if present, from every element.\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.hasClass#126",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.hasClass(java.lang.String)",
    "snippet": "public boolean hasClass(String className) {\n        for (Element element : contents) {\n            if (element.hasClass(className))\n                return true;\n        }\n        return false;\n    }",
    "begin_line": 126,
    "end_line": 132,
    "comment": "/** \n * Determine if any of the matched elements have this class name set in their  {@code class} attribute.\n * @param className class name to check for\n * @return true if any do, false if none do\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.val#139",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.val()",
    "snippet": "public String val() {\n        if (size() \u003e 0)\n            return first().val();\n        else\n            return \"\";\n    }",
    "begin_line": 139,
    "end_line": 144,
    "comment": "/** \n * Get the form element\u0027s value of the first matched element.\n * @return The form element\u0027s value, or empty if not set.\n * @see Element#val()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.val#151",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.val(java.lang.String)",
    "snippet": "public Elements val(String value) {\n        for (Element element : contents)\n            element.val(value);\n        return this;\n    }",
    "begin_line": 151,
    "end_line": 155,
    "comment": "/** \n * Set the form element\u0027s value in each of the matched elements.\n * @param value The value to set into each matched element\n * @return this (for chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.text#165",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.text()",
    "snippet": "public String text() {\n        StringBuilder sb \u003d new StringBuilder();\n        for (Element element : contents) {\n            if (sb.length() !\u003d 0)\n                sb.append(\" \");\n            sb.append(element.text());\n        }\n        return sb.toString();\n    }",
    "begin_line": 165,
    "end_line": 173,
    "comment": "/** \n * Get the combined text of all the matched elements. \u003cp\u003e Note that it is possible to get repeats if the matched elements contain both parent elements and their own children, as the Element.text() method returns the combined text of a parent and all its children.\n * @return string of all text: unescaped and no HTML.\n * @see Element#text()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.hasText#175",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.hasText()",
    "snippet": "public boolean hasText() {\n        for (Element element: contents) {\n            if (element.hasText())\n                return true;\n        }\n        return false;\n    }",
    "begin_line": 175,
    "end_line": 181,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.html#189",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.html()",
    "snippet": "public String html() {\n        StringBuilder sb \u003d new StringBuilder();\n        for (Element element : contents) {\n            if (sb.length() !\u003d 0)\n                sb.append(\"\\n\");\n            sb.append(element.html());\n        }\n        return sb.toString();\n    }",
    "begin_line": 189,
    "end_line": 197,
    "comment": "/** \n * Get the combined inner HTML of all matched elements.\n * @return string of all element\u0027s inner HTML.\n * @see #text()\n * @see #outerHtml()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.outerHtml#205",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.outerHtml()",
    "snippet": "public String outerHtml() {\n        StringBuilder sb \u003d new StringBuilder();\n        for (Element element : contents) {\n            if (sb.length() !\u003d 0)\n                sb.append(\"\\n\");\n            sb.append(element.outerHtml());\n        }\n        return sb.toString();\n    }",
    "begin_line": 205,
    "end_line": 213,
    "comment": "/** \n * Get the combined outer HTML of all matched elements.\n * @return string of all element\u0027s outer HTML.\n * @see #text()\n * @see #html()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.toString#221",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.toString()",
    "snippet": "public String toString() {\n        return outerHtml();\n    }",
    "begin_line": 221,
    "end_line": 223,
    "comment": "/** \n * Get the combined outer HTML of all matched elements. Alias of  {@link #outerHtml()}.\n * @return string of all element\u0027s outer HTML.\n * @see #text()\n * @see #html()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.html#231",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.html(java.lang.String)",
    "snippet": "public Elements html(String html) {\n        for (Element element : contents) {\n            element.html(html);\n        }\n        return this;\n    }",
    "begin_line": 231,
    "end_line": 236,
    "comment": "/** \n * Set the inner HTML of each matched element.\n * @param html HTML to parse and set into each matched element.\n * @return this, for chaining\n * @see Element#html(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.prepend#244",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.prepend(java.lang.String)",
    "snippet": "public Elements prepend(String html) {\n        for (Element element : contents) {\n            element.prepend(html);\n        }\n        return this;\n    }",
    "begin_line": 244,
    "end_line": 249,
    "comment": "/** \n * Add the supplied HTML to the start of each matched element\u0027s inner HTML.\n * @param html HTML to add inside each element, before the existing HTML\n * @return this, for chaining\n * @see Element#prepend(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.append#257",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.append(java.lang.String)",
    "snippet": "public Elements append(String html) {\n        for (Element element : contents) {\n            element.append(html);\n        }\n        return this;\n    }",
    "begin_line": 257,
    "end_line": 262,
    "comment": "/** \n * Add the supplied HTML to the end of each matched element\u0027s inner HTML.\n * @param html HTML to add inside each element, after the existing HTML\n * @return this, for chaining\n * @see Element#append(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.before#270",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.before(java.lang.String)",
    "snippet": "public Elements before(String html) {\n        for (Element element : contents) {\n            element.before(html);\n        }\n        return this;\n    }",
    "begin_line": 270,
    "end_line": 275,
    "comment": "/** \n * Insert the supplied HTML before each matched element\u0027s outer HTML.\n * @param html HTML to insert before each element\n * @return this, for chaining\n * @see Element#before(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.after#283",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.after(java.lang.String)",
    "snippet": "public Elements after(String html) {\n        for (Element element : contents) {\n            element.after(html);\n        }\n        return this;\n    }",
    "begin_line": 283,
    "end_line": 288,
    "comment": "/** \n * Insert the supplied HTML after each matched element\u0027s outer HTML.\n * @param html HTML to insert after each element\n * @return this, for chaining\n * @see Element#after(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.wrap#299",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.wrap(java.lang.String)",
    "snippet": "public Elements wrap(String html) {\n        Validate.notEmpty(html);\n        for (Element element : contents) {\n            element.wrap(html);\n        }\n        return this;\n    }",
    "begin_line": 299,
    "end_line": 305,
    "comment": "/** \n * Wrap the supplied HTML around each matched elements. For example, with HTML {@code \u003cp\u003e\u003cb\u003eThis\u003c/b\u003e is \u003cb\u003eJsoup\u003c/b\u003e\u003c/p\u003e}, \u003ccode\u003edoc.select(\"b\").wrap(\"\u0026lt;i\u0026gt;\u0026lt;/i\u0026gt;\");\u003c/code\u003e becomes  {@code \u003cp\u003e\u003ci\u003e\u003cb\u003eThis\u003c/b\u003e\u003c/i\u003e is \u003ci\u003e\u003cb\u003ejsoup\u003c/b\u003e\u003c/i\u003e\u003c/p\u003e}\n * @param html HTML to wrap around each element, e.g. {@code \u003cdiv class\u003d\"head\"\u003e\u003c/div\u003e}. Can be arbitrarily deep.\n * @return this (for chaining)\n * @see Element#wrap\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.empty#318",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.empty()",
    "snippet": "public Elements empty() {\n        for (Element element : contents) {\n            element.empty();\n        }\n        return this;\n    }",
    "begin_line": 318,
    "end_line": 323,
    "comment": "/** \n * Empty (remove all child nodes from) each matched element. This is similar to setting the inner HTML of each element to nothing. \u003cp\u003e E.g. HTML:  {@code \u003cdiv\u003e\u003cp\u003eHello \u003cb\u003ethere\u003c/b\u003e\u003c/p\u003e \u003cp\u003enow\u003c/p\u003e\u003c/div\u003e}\u003cbr\u003e \u003ccode\u003edoc.select(\"p\").empty();\u003c/code\u003e\u003cbr\u003e HTML \u003d  {@code \u003cdiv\u003e\u003cp\u003e\u003c/p\u003e \u003cp\u003e\u003c/p\u003e\u003c/div\u003e}\n * @return this, for chaining\n * @see Element#empty()\n * @see #remove()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.remove#337",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.remove()",
    "snippet": "public Elements remove() {\n        for (Element element : contents) {\n            element.remove();\n        }\n        return this;\n    }",
    "begin_line": 337,
    "end_line": 342,
    "comment": "/** \n * Remove each matched element from the DOM. This is similar to setting the outer HTML of each element to nothing. \u003cp\u003e E.g. HTML:  {@code \u003cdiv\u003e\u003cp\u003eHello\u003c/p\u003e \u003cp\u003ethere\u003c/p\u003e \u003cimg /\u003e\u003c/div\u003e}\u003cbr\u003e \u003ccode\u003edoc.select(\"p\").remove();\u003c/code\u003e\u003cbr\u003e HTML \u003d  {@code \u003cdiv\u003e \u003cimg /\u003e\u003c/div\u003e}\u003cp\u003e Note that this method should not be used to clean user-submitted HTML; rather, use  {@link org.jsoup.safety.Cleaner} to clean HTML.\n * @return this, for chaining\n * @see Element#empty()\n * @see #empty()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.select#351",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.select(java.lang.String)",
    "snippet": "public Elements select(String query) {\n        return Selector.select(query, this);\n    }",
    "begin_line": 351,
    "end_line": 353,
    "comment": "/** \n * Find matching elements within this element list.\n * @param query A selector query\n * @return the filtered list of elements, or an empty list if none match.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.eq#362",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.eq(int)",
    "snippet": "public Elements eq(int index) {\n        return contents.size() \u003e index ? new Elements(get(index)) : new Elements();\n    }",
    "begin_line": 362,
    "end_line": 364,
    "comment": "/** \n * Get the \u003ci\u003enth\u003c/i\u003e matched element as an Elements object. \u003cp\u003e See also  {@link #get(int)} to retrieve an Element.\n * @param index the (zero-based) index of the element in the list to retain\n * @return Elements containing only the specified element, or, if that element did not exist, an empty list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.is#371",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.is(java.lang.String)",
    "snippet": "public boolean is(String query) {\n        Elements children \u003d select(query);\n        return !children.isEmpty();\n    }",
    "begin_line": 371,
    "end_line": 374,
    "comment": "/** \n * Test if any of the matched elements match the supplied query.\n * @param query A selector\n * @return true if at least one element in the list matches the query.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.parents#380",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.parents()",
    "snippet": "public Elements parents() {\n        HashSet\u003cElement\u003e combo \u003d new LinkedHashSet\u003cElement\u003e();\n        for (Element e: contents) {\n            combo.addAll(e.parents());\n        }\n        return new Elements(combo);\n    }",
    "begin_line": 380,
    "end_line": 386,
    "comment": "/** \n * Get all of the parents and ancestor elements of the matched elements.\n * @return\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.first#393",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.first()",
    "snippet": "public Element first() {\n        return contents.isEmpty() ? null : contents.get(0);\n    }",
    "begin_line": 393,
    "end_line": 395,
    "comment": "/** \n * Get the first matched element.\n * @return The first matched element, or \u003ccode\u003enull\u003c/code\u003e if contents is empty;\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.last#401",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.last()",
    "snippet": "public Element last() {\n        return contents.isEmpty() ? null : contents.get(contents.size() - 1);\n    }",
    "begin_line": 401,
    "end_line": 403,
    "comment": "/** \n * Get the last matched element.\n * @return The last matched element, or \u003ccode\u003enull\u003c/code\u003e if contents is empty.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.size#406",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.size()",
    "snippet": "public int size() {return contents.size();}",
    "begin_line": 406,
    "end_line": 406,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.isEmpty#408",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.isEmpty()",
    "snippet": "public boolean isEmpty() {return contents.isEmpty();}",
    "begin_line": 408,
    "end_line": 408,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.contains#410",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.contains(java.lang.Object)",
    "snippet": "public boolean contains(Object o) {return contents.contains(o);}",
    "begin_line": 410,
    "end_line": 410,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.iterator#412",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.iterator()",
    "snippet": "public Iterator\u003cElement\u003e iterator() {return contents.iterator();}",
    "begin_line": 412,
    "end_line": 412,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.toArray#414",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.toArray()",
    "snippet": "public Object[] toArray() {return contents.toArray();}",
    "begin_line": 414,
    "end_line": 414,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.toArray#416",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.toArray(T[])",
    "snippet": "public \u003cT\u003e T[] toArray(T[] a) {return contents.toArray(a);}",
    "begin_line": 416,
    "end_line": 416,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.add#418",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.add(org.jsoup.nodes.Element)",
    "snippet": "public boolean add(Element element) {return contents.add(element);}",
    "begin_line": 418,
    "end_line": 418,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.remove#420",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.remove(java.lang.Object)",
    "snippet": "public boolean remove(Object o) {return contents.remove(o);}",
    "begin_line": 420,
    "end_line": 420,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.containsAll#422",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.containsAll(java.util.Collection\u003c?\u003e)",
    "snippet": "public boolean containsAll(Collection\u003c?\u003e c) {return contents.containsAll(c);}",
    "begin_line": 422,
    "end_line": 422,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.addAll#424",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.addAll(java.util.Collection\u003c? extends org.jsoup.nodes.Element\u003e)",
    "snippet": "public boolean addAll(Collection\u003c? extends Element\u003e c) {return contents.addAll(c);}",
    "begin_line": 424,
    "end_line": 424,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.addAll#426",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.addAll(int, java.util.Collection\u003c? extends org.jsoup.nodes.Element\u003e)",
    "snippet": "public boolean addAll(int index, Collection\u003c? extends Element\u003e c) {return contents.addAll(index, c);}",
    "begin_line": 426,
    "end_line": 426,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.removeAll#428",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.removeAll(java.util.Collection\u003c?\u003e)",
    "snippet": "public boolean removeAll(Collection\u003c?\u003e c) {return contents.removeAll(c);}",
    "begin_line": 428,
    "end_line": 428,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.retainAll#430",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.retainAll(java.util.Collection\u003c?\u003e)",
    "snippet": "public boolean retainAll(Collection\u003c?\u003e c) {return contents.retainAll(c);}",
    "begin_line": 430,
    "end_line": 430,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.clear#432",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.clear()",
    "snippet": "public void clear() {contents.clear();}",
    "begin_line": 432,
    "end_line": 432,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.equals#434",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object o) {return contents.equals(o);}",
    "begin_line": 434,
    "end_line": 434,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.hashCode#436",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.hashCode()",
    "snippet": "public int hashCode() {return contents.hashCode();}",
    "begin_line": 436,
    "end_line": 436,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.get#438",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.get(int)",
    "snippet": "public Element get(int index) {return contents.get(index);}",
    "begin_line": 438,
    "end_line": 438,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.set#440",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.set(int, org.jsoup.nodes.Element)",
    "snippet": "public Element set(int index, Element element) {return contents.set(index, element);}",
    "begin_line": 440,
    "end_line": 440,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.add#442",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.add(int, org.jsoup.nodes.Element)",
    "snippet": "public void add(int index, Element element) {contents.add(index, element);}",
    "begin_line": 442,
    "end_line": 442,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.remove#444",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.remove(int)",
    "snippet": "public Element remove(int index) {return contents.remove(index);}",
    "begin_line": 444,
    "end_line": 444,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.indexOf#446",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.indexOf(java.lang.Object)",
    "snippet": "public int indexOf(Object o) {return contents.indexOf(o);}",
    "begin_line": 446,
    "end_line": 446,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.lastIndexOf#448",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.lastIndexOf(java.lang.Object)",
    "snippet": "public int lastIndexOf(Object o) {return contents.lastIndexOf(o);}",
    "begin_line": 448,
    "end_line": 448,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.listIterator#450",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.listIterator()",
    "snippet": "public ListIterator\u003cElement\u003e listIterator() {return contents.listIterator();}",
    "begin_line": 450,
    "end_line": 450,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.listIterator#452",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.listIterator(int)",
    "snippet": "public ListIterator\u003cElement\u003e listIterator(int index) {return contents.listIterator(index);}",
    "begin_line": 452,
    "end_line": 452,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Elements.subList#454",
    "is_bug": true,
    "src_path": "org/jsoup/select/Elements.java",
    "class_name": "org.jsoup.select.Elements",
    "signature": "org.jsoup.select.Elements.subList(int, int)",
    "snippet": "public List\u003cElement\u003e subList(int fromIndex, int toIndex) {return contents.subList(fromIndex, toIndex);}",
    "begin_line": 454,
    "end_line": 454,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeTraversor.NodeTraversor#11",
    "is_bug": true,
    "src_path": "org/jsoup/select/NodeTraversor.java",
    "class_name": "org.jsoup.select.NodeTraversor",
    "signature": "org.jsoup.select.NodeTraversor.NodeTraversor(org.jsoup.select.NodeVisitor)",
    "snippet": "public NodeTraversor(NodeVisitor visitor) {\n        this.visitor \u003d visitor;\n    }",
    "begin_line": 11,
    "end_line": 13,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NodeTraversor.traverse#15",
    "is_bug": true,
    "src_path": "org/jsoup/select/NodeTraversor.java",
    "class_name": "org.jsoup.select.NodeTraversor",
    "signature": "org.jsoup.select.NodeTraversor.traverse(org.jsoup.nodes.Node)",
    "snippet": "public void traverse(Node root) {\n        Node node \u003d root;\n        int depth \u003d 0;\n        \n        while (node !\u003d null) {\n            visitor.head(node, depth);\n            if (node.childNodes().size() \u003e 0) {\n                node \u003d node.childNode(0);\n                depth++;\n            } else {\n                while (node.nextSibling() \u003d\u003d null \u0026\u0026 depth \u003e 0) {\n                    visitor.tail(node, depth);\n                    node \u003d node.parent();\n                    depth--;\n                }\n                visitor.tail(node, depth);\n                if (node \u003d\u003d root)\n                    break;\n                node \u003d node.nextSibling();\n            }\n        }\n    }",
    "begin_line": 15,
    "end_line": 36,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.Selector#64",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.Selector(java.lang.String, org.jsoup.nodes.Element)",
    "snippet": "private Selector(String query, Element root) {\n        Validate.notNull(query);\n        query \u003d query.trim();\n        Validate.notEmpty(query);\n        Validate.notNull(root);\n\n        this.elements \u003d new LinkedHashSet\u003cElement\u003e();\n        this.query \u003d query;\n        this.root \u003d root;\n        this.tq \u003d new TokenQueue(query);\n    }",
    "begin_line": 64,
    "end_line": 74,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.select#82",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.select(java.lang.String, org.jsoup.nodes.Element)",
    "snippet": "public static Elements select(String query, Element root) {\n        return new Selector(query, root).select();\n    }",
    "begin_line": 82,
    "end_line": 84,
    "comment": "/** \n * Find elements matching selector.\n * @param query CSS selector\n * @param root root element to descend into\n * @return matching elements, empty if not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.select#92",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.select(java.lang.String, java.lang.Iterable\u003corg.jsoup.nodes.Element\u003e)",
    "snippet": "public static Elements select(String query, Iterable\u003cElement\u003e roots) {\n        Validate.notEmpty(query);\n        Validate.notNull(roots);\n        LinkedHashSet\u003cElement\u003e elements \u003d new LinkedHashSet\u003cElement\u003e();\n\n        for (Element root : roots) {\n            elements.addAll(select(query, root));\n        }\n        return new Elements(elements);\n    }",
    "begin_line": 92,
    "end_line": 101,
    "comment": "/** \n * Find elements matching selector.\n * @param query CSS selector\n * @param roots root elements to descend into\n * @return matching elements, empty if not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.select#103",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.select()",
    "snippet": "private Elements select() {\n        tq.consumeWhitespace();\n        \n        if (tq.matchesAny(combinators)) { // if starts with a combinator, use root as elements\n            elements.add(root);\n            combinator(tq.consume().toString());\n        } else {\n            addElements(findElements()); // chomp first element matcher off queue \n        }            \n               \n        while (!tq.isEmpty()) {\n            // hierarchy and extras\n            boolean seenWhite \u003d tq.consumeWhitespace();\n            \n            if (tq.matchChomp(\",\")) { // group or\n                while (!tq.isEmpty()) {\n                    String subQuery \u003d tq.chompTo(\",\");\n                    elements.addAll(select(subQuery, root));\n                }\n            } else if (tq.matchesAny(combinators)) {\n                combinator(tq.consume().toString());\n            } else if (seenWhite) {\n                combinator(\" \");\n            } else { // E.class, E#id, E[attr] etc. AND\n                Elements candidates \u003d findElements(); // take next el, #. etc off queue\n                intersectElements(filterForSelf(elements, candidates));\n            }\n        }\n        return new Elements(elements);\n    }",
    "begin_line": 103,
    "end_line": 132,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.combinator#134",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.combinator(java.lang.String)",
    "snippet": "private void combinator(String combinator) {\n        tq.consumeWhitespace();\n        String subQuery \u003d tq.consumeToAny(combinators); // support multi \u003e childs\n        \n        Elements output;\n        if (combinator.equals(\"\u003e\"))\n            output \u003d filterForChildren(elements, select(subQuery, elements));\n        else if (combinator.equals(\" \"))\n            output \u003d filterForDescendants(elements, select(subQuery, elements));\n        else if (combinator.equals(\"+\"))\n            output \u003d filterForAdjacentSiblings(elements, select(subQuery, root));\n        else if (combinator.equals(\"~\"))\n            output \u003d filterForGeneralSiblings(elements, select(subQuery, root));\n        else\n            throw new IllegalStateException(\"Unknown combinator: \" + combinator);\n        \n        elements.clear(); elements.addAll(output);\n    }",
    "begin_line": 134,
    "end_line": 151,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.findElements#153",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.findElements()",
    "snippet": "private Elements findElements() {\n        if (tq.matchChomp(\"#\")) {\n            return byId();\n        } else if (tq.matchChomp(\".\")) {\n            return byClass();\n        } else if (tq.matchesWord()) {\n            return byTag();\n        } else if (tq.matches(\"[\")) {\n            return byAttribute();\n        } else if (tq.matchChomp(\"*\")) {\n            return allElements();\n        } else if (tq.matchChomp(\":lt(\")) {\n            return indexLessThan();\n        } else if (tq.matchChomp(\":gt(\")) {\n            return indexGreaterThan();\n        } else if (tq.matchChomp(\":eq(\")) {\n            return indexEquals();\n        } else if (tq.matches(\":has(\")) {\n            return has();\n        } else if (tq.matches(\":contains(\")) {\n            return contains(false);\n        } else if (tq.matches(\":containsOwn(\")) {\n            return contains(true);\n        } else if (tq.matches(\":matches(\")) {\n            return matches(false);\n        } else if (tq.matches(\":matchesOwn(\")) {\n            return matches(true);\n        } else { // unhandled\n            throw new SelectorParseException(\"Could not parse query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, tq.remainder());\n        }\n    }",
    "begin_line": 153,
    "end_line": 183,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.addElements#185",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.addElements(java.util.Collection\u003corg.jsoup.nodes.Element\u003e)",
    "snippet": "private void addElements(Collection\u003cElement\u003e add) {\n        elements.addAll(add);\n    }",
    "begin_line": 185,
    "end_line": 187,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.intersectElements#189",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.intersectElements(java.util.Collection\u003corg.jsoup.nodes.Element\u003e)",
    "snippet": "private void intersectElements(Collection\u003cElement\u003e intersect) {\n        elements.retainAll(intersect);\n    }",
    "begin_line": 189,
    "end_line": 191,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.byId#193",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.byId()",
    "snippet": "private Elements byId() {\n        String id \u003d tq.consumeCssIdentifier();\n        Validate.notEmpty(id);\n\n        Element found \u003d root.getElementById(id);\n        Elements byId \u003d new Elements();\n        if(found !\u003d null)\n            byId.add(found);\n        return byId;\n    }",
    "begin_line": 193,
    "end_line": 202,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.byClass#204",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.byClass()",
    "snippet": "private Elements byClass() {\n        String className \u003d tq.consumeCssIdentifier();\n        Validate.notEmpty(className);\n\n        return root.getElementsByClass(className);\n    }",
    "begin_line": 204,
    "end_line": 209,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.byTag#211",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.byTag()",
    "snippet": "private Elements byTag() {\n        String tagName \u003d tq.consumeElementSelector();\n        Validate.notEmpty(tagName);\n        \n        // namespaces: if element name is \"abc:def\", selector must be \"abc|def\", so flip:\n        if (tagName.contains(\"|\"))\n            tagName \u003d tagName.replace(\"|\", \":\");\n        return root.getElementsByTag(tagName);\n    }",
    "begin_line": 211,
    "end_line": 219,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.byAttribute#221",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.byAttribute()",
    "snippet": "private Elements byAttribute() {\n        TokenQueue cq \u003d new TokenQueue(tq.chompBalanced(\u0027[\u0027, \u0027]\u0027)); // content queue\n        String key \u003d cq.consumeToAny(\"\u003d\", \"!\u003d\", \"^\u003d\", \"$\u003d\", \"*\u003d\", \"~\u003d\"); // eq, not, start, end, contain, match, (no val)\n        Validate.notEmpty(key);\n        cq.consumeWhitespace();\n\n        if (cq.isEmpty()) {\n            return key.startsWith(\"^\") ? root.getElementsByAttributeStarting(key.substring(1)) : root.getElementsByAttribute(key);\n        } else {\n            if (cq.matchChomp(\"\u003d\"))\n                return root.getElementsByAttributeValue(key, cq.remainder());\n\n            else if (cq.matchChomp(\"!\u003d\"))\n                return root.getElementsByAttributeValueNot(key, cq.remainder());\n\n            else if (cq.matchChomp(\"^\u003d\"))\n                return root.getElementsByAttributeValueStarting(key, cq.remainder());\n\n            else if (cq.matchChomp(\"$\u003d\"))\n                return root.getElementsByAttributeValueEnding(key, cq.remainder());\n\n            else if (cq.matchChomp(\"*\u003d\"))\n                return root.getElementsByAttributeValueContaining(key, cq.remainder());\n            \n            else if (cq.matchChomp(\"~\u003d\"))\n                return root.getElementsByAttributeValueMatching(key, cq.remainder());\n            \n            else\n                throw new SelectorParseException(\"Could not parse attribute query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, cq.remainder());\n        }\n    }",
    "begin_line": 221,
    "end_line": 251,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.allElements#253",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.allElements()",
    "snippet": "private Elements allElements() {\n        return root.getAllElements();\n    }",
    "begin_line": 253,
    "end_line": 255,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.indexLessThan#258",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.indexLessThan()",
    "snippet": "private Elements indexLessThan() {\n        return root.getElementsByIndexLessThan(consumeIndex());\n    }",
    "begin_line": 258,
    "end_line": 260,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.indexGreaterThan#262",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.indexGreaterThan()",
    "snippet": "private Elements indexGreaterThan() {\n        return root.getElementsByIndexGreaterThan(consumeIndex());\n    }",
    "begin_line": 262,
    "end_line": 264,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.indexEquals#266",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.indexEquals()",
    "snippet": "private Elements indexEquals() {\n        return root.getElementsByIndexEquals(consumeIndex());\n    }",
    "begin_line": 266,
    "end_line": 268,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.consumeIndex#270",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.consumeIndex()",
    "snippet": "private int consumeIndex() {\n        String indexS \u003d tq.chompTo(\")\").trim();\n        Validate.isTrue(StringUtil.isNumeric(indexS), \"Index must be numeric\");\n        return Integer.parseInt(indexS);\n    }",
    "begin_line": 270,
    "end_line": 274,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.has#277",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.has()",
    "snippet": "private Elements has() {\n        tq.consume(\":has\");\n        String subQuery \u003d tq.chompBalanced(\u0027(\u0027,\u0027)\u0027);\n        Validate.notEmpty(subQuery, \":has(el) subselect must not be empty\");\n\n        return filterForParentsOfDescendants(elements, select(subQuery, elements));\n    }",
    "begin_line": 277,
    "end_line": 283,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.contains#286",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.contains(boolean)",
    "snippet": "private Elements contains(boolean own) {\n        tq.consume(own ? \":containsOwn\" : \":contains\");\n        String searchText \u003d TokenQueue.unescape(tq.chompBalanced(\u0027(\u0027,\u0027)\u0027));\n        Validate.notEmpty(searchText, \":contains(text) query must not be empty\");\n        \n        return own ? root.getElementsContainingOwnText(searchText) : root.getElementsContainingText(searchText);\n    }",
    "begin_line": 286,
    "end_line": 292,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.matches#295",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.matches(boolean)",
    "snippet": "private Elements matches(boolean own) {\n        tq.consume(own? \":matchesOwn\" : \":matches\");\n        String regex \u003d tq.chompBalanced(\u0027(\u0027, \u0027)\u0027); // don\u0027t unescape, as regex bits will be escaped\n        Validate.notEmpty(regex, \":matches(regex) query must not be empty\");\n        \n        return own ? root.getElementsMatchingOwnText(regex) : root.getElementsMatchingText(regex);\n    }",
    "begin_line": 295,
    "end_line": 301,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.filterForChildren#304",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.filterForChildren(java.util.Collection\u003corg.jsoup.nodes.Element\u003e, java.util.Collection\u003corg.jsoup.nodes.Element\u003e)",
    "snippet": "private static Elements filterForChildren(Collection\u003cElement\u003e parents, Collection\u003cElement\u003e candidates) {\n        Elements children \u003d new Elements();\n        CHILD: for (Element c : candidates) {\n            for (Element p : parents) {\n                if (c.parent() !\u003d null \u0026\u0026 c.parent().equals(p)) {\n                    children.add(c);\n                    continue CHILD;\n                }\n            }\n        }\n        return children;\n    }",
    "begin_line": 304,
    "end_line": 315,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.filterForDescendants#319",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.filterForDescendants(java.util.Collection\u003corg.jsoup.nodes.Element\u003e, java.util.Collection\u003corg.jsoup.nodes.Element\u003e)",
    "snippet": "private static Elements filterForDescendants(Collection\u003cElement\u003e parents, Collection\u003cElement\u003e candidates) {\n        Elements children \u003d new Elements();\n        CHILD: for (Element c : candidates) {\n            for (Element p : parents) {\n                if (c.equals(p)) {\n                    continue CHILD;\n                }\n            }\n            children.add(c);\n        }\n        return children;\n    }",
    "begin_line": 319,
    "end_line": 330,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.filterForParentsOfDescendants#333",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.filterForParentsOfDescendants(java.util.Collection\u003corg.jsoup.nodes.Element\u003e, java.util.Collection\u003corg.jsoup.nodes.Element\u003e)",
    "snippet": "private static Elements filterForParentsOfDescendants(Collection\u003cElement\u003e parents, Collection\u003cElement\u003e children) {\n        Elements filteredParents \u003d new Elements();\n        for (Element p : parents) {\n            for (Element c : children) {\n                if (c.parents().contains(p)) {\n                    filteredParents.add(p);\n                }\n            }\n        }\n        return filteredParents;\n    }",
    "begin_line": 333,
    "end_line": 343,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.filterForAdjacentSiblings#346",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.filterForAdjacentSiblings(java.util.Collection\u003corg.jsoup.nodes.Element\u003e, java.util.Collection\u003corg.jsoup.nodes.Element\u003e)",
    "snippet": "private static Elements filterForAdjacentSiblings(Collection\u003cElement\u003e elements, Collection\u003cElement\u003e candidates) {\n        Elements siblings \u003d new Elements();\n        SIBLING: for (Element c: candidates) {\n            for (Element e: elements) {\n                if (!e.parent().equals(c.parent()))\n                    continue;\n                Element previousSib \u003d c.previousElementSibling();\n                if (previousSib !\u003d null \u0026\u0026 previousSib.equals(e)) {\n                    siblings.add(c);\n                    continue SIBLING;\n                }\n            }\n        }\n        return siblings;\n    }",
    "begin_line": 346,
    "end_line": 360,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.filterForGeneralSiblings#363",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.filterForGeneralSiblings(java.util.Collection\u003corg.jsoup.nodes.Element\u003e, java.util.Collection\u003corg.jsoup.nodes.Element\u003e)",
    "snippet": "private static Elements filterForGeneralSiblings(Collection\u003cElement\u003e elements, Collection\u003cElement\u003e candidates) {\n        Elements output \u003d new Elements();\n        SIBLING: for (Element c: candidates) {\n            for (Element e: elements) {\n                if (!e.parent().equals(c.parent()))\n                    continue;\n                int ePos \u003d e.elementSiblingIndex();\n                int cPos \u003d c.elementSiblingIndex();\n                if (cPos \u003e ePos) {\n                    output.add(c);\n                    continue SIBLING;\n                }\n            }\n        }\n        return output;\n    }",
    "begin_line": 363,
    "end_line": 378,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Selector.filterForSelf#381",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.filterForSelf(java.util.Collection\u003corg.jsoup.nodes.Element\u003e, java.util.Collection\u003corg.jsoup.nodes.Element\u003e)",
    "snippet": "private static Elements filterForSelf(Collection\u003cElement\u003e parents, Collection\u003cElement\u003e candidates) {\n        Elements children \u003d new Elements();\n        CHILD: for (Element c : candidates) {\n            for (Element p : parents) {\n                if (c.equals(p)) {\n                    children.add(c);\n                    continue CHILD;\n                }\n            }   \n        }\n        return children;\n    }",
    "begin_line": 381,
    "end_line": 392,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SelectorParseException.SelectorParseException#395",
    "is_bug": true,
    "src_path": "org/jsoup/select/Selector.java",
    "class_name": "org.jsoup.select.Selector",
    "signature": "org.jsoup.select.Selector.SelectorParseException(java.lang.String, java.lang.Object)",
    "snippet": "public SelectorParseException(String msg, Object... params) {\n            super(String.format(msg, params));\n        }",
    "begin_line": 395,
    "end_line": 397,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]