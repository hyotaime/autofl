[
  {
    "class_name": "org.apache.commons.io.IOCaseTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTestCase.java",
    "signature": "org.apache.commons.io.IOCaseTestCase.test_forName()",
    "snippet": "@Test\n    public void test_forName() throws Exception {\n        assertEquals(IOCase.SENSITIVE, IOCase.forName(\"Sensitive\"));\n        assertEquals(IOCase.INSENSITIVE, IOCase.forName(\"Insensitive\"));\n        assertEquals(IOCase.SYSTEM, IOCase.forName(\"System\"));\n        try {\n            IOCase.forName(\"Blah\");\n            fail();\n        } catch (final IllegalArgumentException ignore) {}\n        try {\n            IOCase.forName(null);\n            fail();\n        } catch (final IllegalArgumentException ignore) {}\n    }",
    "begin_line": 43,
    "end_line": 55,
    "comment": "",
    "child_ranges": [
      "(line 44,col 9)-(line 44,col 68)",
      "(line 45,col 9)-(line 45,col 72)",
      "(line 46,col 9)-(line 46,col 62)",
      "(line 47,col 9)-(line 50,col 58)",
      "(line 51,col 9)-(line 54,col 58)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTestCase.java",
    "signature": "org.apache.commons.io.IOCaseTestCase.test_serialization()",
    "snippet": "@Test\n    public void test_serialization() throws Exception {\n        assertSame(IOCase.SENSITIVE, serialize(IOCase.SENSITIVE));\n        assertSame(IOCase.INSENSITIVE, serialize(IOCase.INSENSITIVE));\n        assertSame(IOCase.SYSTEM, serialize(IOCase.SYSTEM));\n    }",
    "begin_line": 58,
    "end_line": 62,
    "comment": "",
    "child_ranges": [
      "(line 59,col 9)-(line 59,col 66)",
      "(line 60,col 9)-(line 60,col 70)",
      "(line 61,col 9)-(line 61,col 60)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTestCase.java",
    "signature": "org.apache.commons.io.IOCaseTestCase.test_getName()",
    "snippet": "@Test\n    public void test_getName() throws Exception {\n        assertEquals(\"Sensitive\", IOCase.SENSITIVE.getName());\n        assertEquals(\"Insensitive\", IOCase.INSENSITIVE.getName());\n        assertEquals(\"System\", IOCase.SYSTEM.getName());\n    }",
    "begin_line": 65,
    "end_line": 69,
    "comment": "",
    "child_ranges": [
      "(line 66,col 9)-(line 66,col 62)",
      "(line 67,col 9)-(line 67,col 66)",
      "(line 68,col 9)-(line 68,col 56)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTestCase.java",
    "signature": "org.apache.commons.io.IOCaseTestCase.test_toString()",
    "snippet": "@Test\n    public void test_toString() throws Exception {\n        assertEquals(\"Sensitive\", IOCase.SENSITIVE.toString());\n        assertEquals(\"Insensitive\", IOCase.INSENSITIVE.toString());\n        assertEquals(\"System\", IOCase.SYSTEM.toString());\n    }",
    "begin_line": 72,
    "end_line": 76,
    "comment": "",
    "child_ranges": [
      "(line 73,col 9)-(line 73,col 63)",
      "(line 74,col 9)-(line 74,col 67)",
      "(line 75,col 9)-(line 75,col 57)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTestCase.java",
    "signature": "org.apache.commons.io.IOCaseTestCase.test_isCaseSensitive()",
    "snippet": "@Test\n    public void test_isCaseSensitive() throws Exception {\n        assertTrue(IOCase.SENSITIVE.isCaseSensitive());\n        assertFalse(IOCase.INSENSITIVE.isCaseSensitive());\n        assertEquals(!WINDOWS, IOCase.SYSTEM.isCaseSensitive());\n    }",
    "begin_line": 79,
    "end_line": 83,
    "comment": "",
    "child_ranges": [
      "(line 80,col 9)-(line 80,col 55)",
      "(line 81,col 9)-(line 81,col 58)",
      "(line 82,col 9)-(line 82,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTestCase.java",
    "signature": "org.apache.commons.io.IOCaseTestCase.test_checkCompare_functionality()",
    "snippet": "@Test\n    public void test_checkCompare_functionality() throws Exception {\n        assertTrue(IOCase.SENSITIVE.checkCompareTo(\"ABC\", \"\") \u003e 0);\n        assertTrue(IOCase.SENSITIVE.checkCompareTo(\"\", \"ABC\") \u003c 0);\n        assertTrue(IOCase.SENSITIVE.checkCompareTo(\"ABC\", \"DEF\") \u003c 0);\n        assertTrue(IOCase.SENSITIVE.checkCompareTo(\"DEF\", \"ABC\") \u003e 0);\n        assertEquals(0, IOCase.SENSITIVE.checkCompareTo(\"ABC\", \"ABC\"));\n        assertEquals(0, IOCase.SENSITIVE.checkCompareTo(\"\", \"\"));\n\n        try {\n            IOCase.SENSITIVE.checkCompareTo(\"ABC\", null);\n            fail();\n        } catch (final NullPointerException ignore) {}\n        try {\n            IOCase.SENSITIVE.checkCompareTo(null, \"ABC\");\n            fail();\n        } catch (final NullPointerException ignore) {}\n        try {\n            IOCase.SENSITIVE.checkCompareTo(null, null);\n            fail();\n        } catch (final NullPointerException ignore) {}\n    }",
    "begin_line": 86,
    "end_line": 106,
    "comment": "",
    "child_ranges": [
      "(line 87,col 9)-(line 87,col 67)",
      "(line 88,col 9)-(line 88,col 67)",
      "(line 89,col 9)-(line 89,col 70)",
      "(line 90,col 9)-(line 90,col 70)",
      "(line 91,col 9)-(line 91,col 71)",
      "(line 92,col 9)-(line 92,col 65)",
      "(line 94,col 9)-(line 97,col 54)",
      "(line 98,col 9)-(line 101,col 54)",
      "(line 102,col 9)-(line 105,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTestCase.java",
    "signature": "org.apache.commons.io.IOCaseTestCase.test_checkCompare_case()",
    "snippet": "@Test\n    public void test_checkCompare_case() throws Exception {\n        assertEquals(0, IOCase.SENSITIVE.checkCompareTo(\"ABC\", \"ABC\"));\n        assertTrue(IOCase.SENSITIVE.checkCompareTo(\"ABC\", \"abc\") \u003c 0);\n        assertTrue(IOCase.SENSITIVE.checkCompareTo(\"abc\", \"ABC\") \u003e 0);\n\n        assertEquals(0, IOCase.INSENSITIVE.checkCompareTo(\"ABC\", \"ABC\"));\n        assertEquals(0, IOCase.INSENSITIVE.checkCompareTo(\"ABC\", \"abc\"));\n        assertEquals(0, IOCase.INSENSITIVE.checkCompareTo(\"abc\", \"ABC\"));\n\n        assertEquals(0, IOCase.SYSTEM.checkCompareTo(\"ABC\", \"ABC\"));\n        assertEquals(WINDOWS, IOCase.SYSTEM.checkCompareTo(\"ABC\", \"abc\") \u003d\u003d 0);\n        assertEquals(WINDOWS, IOCase.SYSTEM.checkCompareTo(\"abc\", \"ABC\") \u003d\u003d 0);\n    }",
    "begin_line": 109,
    "end_line": 121,
    "comment": "",
    "child_ranges": [
      "(line 110,col 9)-(line 110,col 71)",
      "(line 111,col 9)-(line 111,col 70)",
      "(line 112,col 9)-(line 112,col 70)",
      "(line 114,col 9)-(line 114,col 73)",
      "(line 115,col 9)-(line 115,col 73)",
      "(line 116,col 9)-(line 116,col 73)",
      "(line 118,col 9)-(line 118,col 68)",
      "(line 119,col 9)-(line 119,col 79)",
      "(line 120,col 9)-(line 120,col 79)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTestCase.java",
    "signature": "org.apache.commons.io.IOCaseTestCase.test_checkEquals_functionality()",
    "snippet": "@Test\n    public void test_checkEquals_functionality() throws Exception {\n        assertFalse(IOCase.SENSITIVE.checkEquals(\"ABC\", \"\"));\n        assertFalse(IOCase.SENSITIVE.checkEquals(\"ABC\", \"A\"));\n        assertFalse(IOCase.SENSITIVE.checkEquals(\"ABC\", \"AB\"));\n        assertTrue(IOCase.SENSITIVE.checkEquals(\"ABC\", \"ABC\"));\n        assertFalse(IOCase.SENSITIVE.checkEquals(\"ABC\", \"BC\"));\n        assertFalse(IOCase.SENSITIVE.checkEquals(\"ABC\", \"C\"));\n        assertFalse(IOCase.SENSITIVE.checkEquals(\"ABC\", \"ABCD\"));\n        assertFalse(IOCase.SENSITIVE.checkEquals(\"\", \"ABC\"));\n        assertTrue(IOCase.SENSITIVE.checkEquals(\"\", \"\"));\n\n        try {\n            IOCase.SENSITIVE.checkEquals(\"ABC\", null);\n            fail();\n        } catch (final NullPointerException ignore) {}\n        try {\n            IOCase.SENSITIVE.checkEquals(null, \"ABC\");\n            fail();\n        } catch (final NullPointerException ignore) {}\n        try {\n            IOCase.SENSITIVE.checkEquals(null, null);\n            fail();\n        } catch (final NullPointerException ignore) {}\n    }",
    "begin_line": 126,
    "end_line": 149,
    "comment": "",
    "child_ranges": [
      "(line 127,col 9)-(line 127,col 61)",
      "(line 128,col 9)-(line 128,col 62)",
      "(line 129,col 9)-(line 129,col 63)",
      "(line 130,col 9)-(line 130,col 63)",
      "(line 131,col 9)-(line 131,col 63)",
      "(line 132,col 9)-(line 132,col 62)",
      "(line 133,col 9)-(line 133,col 65)",
      "(line 134,col 9)-(line 134,col 61)",
      "(line 135,col 9)-(line 135,col 57)",
      "(line 137,col 9)-(line 140,col 54)",
      "(line 141,col 9)-(line 144,col 54)",
      "(line 145,col 9)-(line 148,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTestCase.java",
    "signature": "org.apache.commons.io.IOCaseTestCase.test_checkEquals_case()",
    "snippet": "@Test\n    public void test_checkEquals_case() throws Exception {\n        assertTrue(IOCase.SENSITIVE.checkEquals(\"ABC\", \"ABC\"));\n        assertFalse(IOCase.SENSITIVE.checkEquals(\"ABC\", \"Abc\"));\n\n        assertTrue(IOCase.INSENSITIVE.checkEquals(\"ABC\", \"ABC\"));\n        assertTrue(IOCase.INSENSITIVE.checkEquals(\"ABC\", \"Abc\"));\n\n        assertTrue(IOCase.SYSTEM.checkEquals(\"ABC\", \"ABC\"));\n        assertEquals(WINDOWS, IOCase.SYSTEM.checkEquals(\"ABC\", \"Abc\"));\n    }",
    "begin_line": 152,
    "end_line": 161,
    "comment": "",
    "child_ranges": [
      "(line 153,col 9)-(line 153,col 63)",
      "(line 154,col 9)-(line 154,col 64)",
      "(line 156,col 9)-(line 156,col 65)",
      "(line 157,col 9)-(line 157,col 65)",
      "(line 159,col 9)-(line 159,col 60)",
      "(line 160,col 9)-(line 160,col 71)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTestCase.java",
    "signature": "org.apache.commons.io.IOCaseTestCase.test_checkStartsWith_functionality()",
    "snippet": "@Test\n    public void test_checkStartsWith_functionality() throws Exception {\n        assertTrue(IOCase.SENSITIVE.checkStartsWith(\"ABC\", \"\"));\n        assertTrue(IOCase.SENSITIVE.checkStartsWith(\"ABC\", \"A\"));\n        assertTrue(IOCase.SENSITIVE.checkStartsWith(\"ABC\", \"AB\"));\n        assertTrue(IOCase.SENSITIVE.checkStartsWith(\"ABC\", \"ABC\"));\n        assertFalse(IOCase.SENSITIVE.checkStartsWith(\"ABC\", \"BC\"));\n        assertFalse(IOCase.SENSITIVE.checkStartsWith(\"ABC\", \"C\"));\n        assertFalse(IOCase.SENSITIVE.checkStartsWith(\"ABC\", \"ABCD\"));\n        assertFalse(IOCase.SENSITIVE.checkStartsWith(\"\", \"ABC\"));\n        assertTrue(IOCase.SENSITIVE.checkStartsWith(\"\", \"\"));\n\n        assertFalse(IOCase.SENSITIVE.checkStartsWith(\"ABC\", null));\n        assertFalse(IOCase.SENSITIVE.checkStartsWith(null, \"ABC\"));\n        assertFalse(IOCase.SENSITIVE.checkStartsWith(null, null));\n    }",
    "begin_line": 165,
    "end_line": 179,
    "comment": "",
    "child_ranges": [
      "(line 166,col 9)-(line 166,col 64)",
      "(line 167,col 9)-(line 167,col 65)",
      "(line 168,col 9)-(line 168,col 66)",
      "(line 169,col 9)-(line 169,col 67)",
      "(line 170,col 9)-(line 170,col 67)",
      "(line 171,col 9)-(line 171,col 66)",
      "(line 172,col 9)-(line 172,col 69)",
      "(line 173,col 9)-(line 173,col 65)",
      "(line 174,col 9)-(line 174,col 61)",
      "(line 176,col 9)-(line 176,col 67)",
      "(line 177,col 9)-(line 177,col 67)",
      "(line 178,col 9)-(line 178,col 66)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTestCase.java",
    "signature": "org.apache.commons.io.IOCaseTestCase.test_checkStartsWith_case()",
    "snippet": "@Test\n    public void test_checkStartsWith_case() throws Exception {\n        assertTrue(IOCase.SENSITIVE.checkStartsWith(\"ABC\", \"AB\"));\n        assertFalse(IOCase.SENSITIVE.checkStartsWith(\"ABC\", \"Ab\"));\n\n        assertTrue(IOCase.INSENSITIVE.checkStartsWith(\"ABC\", \"AB\"));\n        assertTrue(IOCase.INSENSITIVE.checkStartsWith(\"ABC\", \"Ab\"));\n\n        assertTrue(IOCase.SYSTEM.checkStartsWith(\"ABC\", \"AB\"));\n        assertEquals(WINDOWS, IOCase.SYSTEM.checkStartsWith(\"ABC\", \"Ab\"));\n    }",
    "begin_line": 182,
    "end_line": 191,
    "comment": "",
    "child_ranges": [
      "(line 183,col 9)-(line 183,col 66)",
      "(line 184,col 9)-(line 184,col 67)",
      "(line 186,col 9)-(line 186,col 68)",
      "(line 187,col 9)-(line 187,col 68)",
      "(line 189,col 9)-(line 189,col 63)",
      "(line 190,col 9)-(line 190,col 74)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTestCase.java",
    "signature": "org.apache.commons.io.IOCaseTestCase.test_checkEndsWith_functionality()",
    "snippet": "@Test\n    public void test_checkEndsWith_functionality() throws Exception {\n        assertTrue(IOCase.SENSITIVE.checkEndsWith(\"ABC\", \"\"));\n        assertFalse(IOCase.SENSITIVE.checkEndsWith(\"ABC\", \"A\"));\n        assertFalse(IOCase.SENSITIVE.checkEndsWith(\"ABC\", \"AB\"));\n        assertTrue(IOCase.SENSITIVE.checkEndsWith(\"ABC\", \"ABC\"));\n        assertTrue(IOCase.SENSITIVE.checkEndsWith(\"ABC\", \"BC\"));\n        assertTrue(IOCase.SENSITIVE.checkEndsWith(\"ABC\", \"C\"));\n        assertFalse(IOCase.SENSITIVE.checkEndsWith(\"ABC\", \"ABCD\"));\n        assertFalse(IOCase.SENSITIVE.checkEndsWith(\"\", \"ABC\"));\n        assertTrue(IOCase.SENSITIVE.checkEndsWith(\"\", \"\"));\n\n        assertFalse(IOCase.SENSITIVE.checkEndsWith(\"ABC\", null));\n        assertFalse(IOCase.SENSITIVE.checkEndsWith(null, \"ABC\"));\n        assertFalse(IOCase.SENSITIVE.checkEndsWith(null, null));\n    }",
    "begin_line": 195,
    "end_line": 209,
    "comment": "",
    "child_ranges": [
      "(line 196,col 9)-(line 196,col 62)",
      "(line 197,col 9)-(line 197,col 64)",
      "(line 198,col 9)-(line 198,col 65)",
      "(line 199,col 9)-(line 199,col 65)",
      "(line 200,col 9)-(line 200,col 64)",
      "(line 201,col 9)-(line 201,col 63)",
      "(line 202,col 9)-(line 202,col 67)",
      "(line 203,col 9)-(line 203,col 63)",
      "(line 204,col 9)-(line 204,col 59)",
      "(line 206,col 9)-(line 206,col 65)",
      "(line 207,col 9)-(line 207,col 65)",
      "(line 208,col 9)-(line 208,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTestCase.java",
    "signature": "org.apache.commons.io.IOCaseTestCase.test_checkEndsWith_case()",
    "snippet": "@Test\n    public void test_checkEndsWith_case() throws Exception {\n        assertTrue(IOCase.SENSITIVE.checkEndsWith(\"ABC\", \"BC\"));\n        assertFalse(IOCase.SENSITIVE.checkEndsWith(\"ABC\", \"Bc\"));\n\n        assertTrue(IOCase.INSENSITIVE.checkEndsWith(\"ABC\", \"BC\"));\n        assertTrue(IOCase.INSENSITIVE.checkEndsWith(\"ABC\", \"Bc\"));\n\n        assertTrue(IOCase.SYSTEM.checkEndsWith(\"ABC\", \"BC\"));\n        assertEquals(WINDOWS, IOCase.SYSTEM.checkEndsWith(\"ABC\", \"Bc\"));\n    }",
    "begin_line": 212,
    "end_line": 221,
    "comment": "",
    "child_ranges": [
      "(line 213,col 9)-(line 213,col 64)",
      "(line 214,col 9)-(line 214,col 65)",
      "(line 216,col 9)-(line 216,col 66)",
      "(line 217,col 9)-(line 217,col 66)",
      "(line 219,col 9)-(line 219,col 61)",
      "(line 220,col 9)-(line 220,col 72)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTestCase.java",
    "signature": "org.apache.commons.io.IOCaseTestCase.test_checkIndexOf_functionality()",
    "snippet": "@Test\n    public void test_checkIndexOf_functionality() throws Exception {\n\n        // start\n        assertEquals(0,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 0, \"A\"));\n        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 1, \"A\"));\n        assertEquals(0,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 0, \"AB\"));\n        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 1, \"AB\"));\n        assertEquals(0,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 0, \"ABC\"));\n        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 1, \"ABC\"));\n\n        // middle\n        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 0, \"D\"));\n        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 3, \"D\"));\n        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 4, \"D\"));\n        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 0, \"DE\"));\n        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 3, \"DE\"));\n        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 4, \"DE\"));\n        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 0, \"DEF\"));\n        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 3, \"DEF\"));\n        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 4, \"DEF\"));\n\n        // end\n        assertEquals(9,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 0, \"J\"));\n        assertEquals(9,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 8, \"J\"));\n        assertEquals(9,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 9, \"J\"));\n        assertEquals(8,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 0, \"IJ\"));\n        assertEquals(8,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 8, \"IJ\"));\n        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 9, \"IJ\"));\n        assertEquals(7,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 6, \"HIJ\"));\n        assertEquals(7,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 7, \"HIJ\"));\n        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 8, \"HIJ\"));\n\n        // not found\n        assertEquals(-1,   IOCase.SENSITIVE.checkIndexOf(\"ABCDEFGHIJ\", 0, \"DED\"));\n\n        // too long\n        assertEquals(-1,   IOCase.SENSITIVE.checkIndexOf(\"DEF\", 0, \"ABCDEFGHIJ\"));\n\n        try {\n            IOCase.SENSITIVE.checkIndexOf(\"ABC\", 0, null);\n            fail();\n        } catch (final NullPointerException ignore) {}\n        try {\n            IOCase.SENSITIVE.checkIndexOf(null, 0, \"ABC\");\n            fail();\n        } catch (final NullPointerException ignore) {}\n        try {\n            IOCase.SENSITIVE.checkIndexOf(null, 0, null);\n            fail();\n        } catch (final NullPointerException ignore) {}\n    }",
    "begin_line": 225,
    "end_line": 275,
    "comment": "",
    "child_ranges": [
      "(line 228,col 9)-(line 228,col 79)",
      "(line 229,col 9)-(line 229,col 79)",
      "(line 230,col 9)-(line 230,col 80)",
      "(line 231,col 9)-(line 231,col 80)",
      "(line 232,col 9)-(line 232,col 81)",
      "(line 233,col 9)-(line 233,col 81)",
      "(line 236,col 9)-(line 236,col 79)",
      "(line 237,col 9)-(line 237,col 79)",
      "(line 238,col 9)-(line 238,col 79)",
      "(line 239,col 9)-(line 239,col 80)",
      "(line 240,col 9)-(line 240,col 80)",
      "(line 241,col 9)-(line 241,col 80)",
      "(line 242,col 9)-(line 242,col 81)",
      "(line 243,col 9)-(line 243,col 81)",
      "(line 244,col 9)-(line 244,col 81)",
      "(line 247,col 9)-(line 247,col 79)",
      "(line 248,col 9)-(line 248,col 79)",
      "(line 249,col 9)-(line 249,col 79)",
      "(line 250,col 9)-(line 250,col 80)",
      "(line 251,col 9)-(line 251,col 80)",
      "(line 252,col 9)-(line 252,col 80)",
      "(line 253,col 9)-(line 253,col 81)",
      "(line 254,col 9)-(line 254,col 81)",
      "(line 255,col 9)-(line 255,col 81)",
      "(line 258,col 9)-(line 258,col 82)",
      "(line 261,col 9)-(line 261,col 82)",
      "(line 263,col 9)-(line 266,col 54)",
      "(line 267,col 9)-(line 270,col 54)",
      "(line 271,col 9)-(line 274,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTestCase.java",
    "signature": "org.apache.commons.io.IOCaseTestCase.test_checkIndexOf_case()",
    "snippet": "@Test\n    public void test_checkIndexOf_case() throws Exception {\n        assertEquals(1,  IOCase.SENSITIVE.checkIndexOf(\"ABC\", 0, \"BC\"));\n        assertEquals(-1, IOCase.SENSITIVE.checkIndexOf(\"ABC\", 0, \"Bc\"));\n\n        assertEquals(1, IOCase.INSENSITIVE.checkIndexOf(\"ABC\", 0, \"BC\"));\n        assertEquals(1, IOCase.INSENSITIVE.checkIndexOf(\"ABC\", 0, \"Bc\"));\n\n        assertEquals(1, IOCase.SYSTEM.checkIndexOf(\"ABC\", 0, \"BC\"));\n        assertEquals(WINDOWS ? 1 : -1, IOCase.SYSTEM.checkIndexOf(\"ABC\", 0, \"Bc\"));\n    }",
    "begin_line": 278,
    "end_line": 287,
    "comment": "",
    "child_ranges": [
      "(line 279,col 9)-(line 279,col 72)",
      "(line 280,col 9)-(line 280,col 72)",
      "(line 282,col 9)-(line 282,col 73)",
      "(line 283,col 9)-(line 283,col 73)",
      "(line 285,col 9)-(line 285,col 68)",
      "(line 286,col 9)-(line 286,col 83)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTestCase.java",
    "signature": "org.apache.commons.io.IOCaseTestCase.test_checkRegionMatches_functionality()",
    "snippet": "@Test\n    public void test_checkRegionMatches_functionality() throws Exception {\n        assertTrue(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 0, \"\"));\n        assertTrue(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 0, \"A\"));\n        assertTrue(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 0, \"AB\"));\n        assertTrue(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 0, \"ABC\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 0, \"BC\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 0, \"C\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 0, \"ABCD\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"\", 0, \"ABC\"));\n        assertTrue(IOCase.SENSITIVE.checkRegionMatches(\"\", 0, \"\"));\n\n        assertTrue(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 1, \"\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 1, \"A\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 1, \"AB\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 1, \"ABC\"));\n        assertTrue(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 1, \"BC\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 1, \"C\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 1, \"ABCD\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"\", 1, \"ABC\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"\", 1, \"\"));\n\n        try {\n            IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 0, null);\n            fail();\n        } catch (final NullPointerException ignore) {}\n        try {\n            IOCase.SENSITIVE.checkRegionMatches(null, 0, \"ABC\");\n            fail();\n        } catch (final NullPointerException ignore) {}\n        try {\n            IOCase.SENSITIVE.checkRegionMatches(null, 0, null);\n            fail();\n        } catch (final NullPointerException ignore) {}\n        try {\n            IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 1, null);\n            fail();\n        } catch (final NullPointerException ignore) {}\n        try {\n            IOCase.SENSITIVE.checkRegionMatches(null, 1, \"ABC\");\n            fail();\n        } catch (final NullPointerException ignore) {}\n        try {\n            IOCase.SENSITIVE.checkRegionMatches(null, 1, null);\n            fail();\n        } catch (final NullPointerException ignore) {}\n    }",
    "begin_line": 291,
    "end_line": 336,
    "comment": "",
    "child_ranges": [
      "(line 292,col 9)-(line 292,col 70)",
      "(line 293,col 9)-(line 293,col 71)",
      "(line 294,col 9)-(line 294,col 72)",
      "(line 295,col 9)-(line 295,col 73)",
      "(line 296,col 9)-(line 296,col 73)",
      "(line 297,col 9)-(line 297,col 72)",
      "(line 298,col 9)-(line 298,col 75)",
      "(line 299,col 9)-(line 299,col 71)",
      "(line 300,col 9)-(line 300,col 67)",
      "(line 302,col 9)-(line 302,col 70)",
      "(line 303,col 9)-(line 303,col 72)",
      "(line 304,col 9)-(line 304,col 73)",
      "(line 305,col 9)-(line 305,col 74)",
      "(line 306,col 9)-(line 306,col 72)",
      "(line 307,col 9)-(line 307,col 72)",
      "(line 308,col 9)-(line 308,col 75)",
      "(line 309,col 9)-(line 309,col 71)",
      "(line 310,col 9)-(line 310,col 68)",
      "(line 312,col 9)-(line 315,col 54)",
      "(line 316,col 9)-(line 319,col 54)",
      "(line 320,col 9)-(line 323,col 54)",
      "(line 324,col 9)-(line 327,col 54)",
      "(line 328,col 9)-(line 331,col 54)",
      "(line 332,col 9)-(line 335,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTestCase.java",
    "signature": "org.apache.commons.io.IOCaseTestCase.test_checkRegionMatches_case()",
    "snippet": "@Test\n    public void test_checkRegionMatches_case() throws Exception {\n        assertTrue(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 0, \"AB\"));\n        assertFalse(IOCase.SENSITIVE.checkRegionMatches(\"ABC\", 0, \"Ab\"));\n\n        assertTrue(IOCase.INSENSITIVE.checkRegionMatches(\"ABC\", 0, \"AB\"));\n        assertTrue(IOCase.INSENSITIVE.checkRegionMatches(\"ABC\", 0, \"Ab\"));\n\n        assertTrue(IOCase.SYSTEM.checkRegionMatches(\"ABC\", 0, \"AB\"));\n        assertEquals(WINDOWS, IOCase.SYSTEM.checkRegionMatches(\"ABC\", 0, \"Ab\"));\n    }",
    "begin_line": 339,
    "end_line": 348,
    "comment": "",
    "child_ranges": [
      "(line 340,col 9)-(line 340,col 72)",
      "(line 341,col 9)-(line 341,col 73)",
      "(line 343,col 9)-(line 343,col 74)",
      "(line 344,col 9)-(line 344,col 74)",
      "(line 346,col 9)-(line 346,col 69)",
      "(line 347,col 9)-(line 347,col 80)"
    ]
  },
  {
    "class_name": "org.apache.commons.io.IOCaseTestCase",
    "child_classes": [],
    "src_path": "org/apache/commons/io/IOCaseTestCase.java",
    "signature": "org.apache.commons.io.IOCaseTestCase.serialize(IOCase)",
    "snippet": "private IOCase serialize(final IOCase value) throws Exception {\n        final ByteArrayOutputStream buf \u003d new ByteArrayOutputStream();\n        final ObjectOutputStream out \u003d new ObjectOutputStream(buf);\n        out.writeObject(value);\n        out.flush();\n        out.close();\n\n        final ByteArrayInputStream bufin \u003d new ByteArrayInputStream(buf.toByteArray());\n        final ObjectInputStream in \u003d new ObjectInputStream(bufin);\n        return (IOCase) in.readObject();\n    }",
    "begin_line": 351,
    "end_line": 361,
    "comment": "",
    "child_ranges": [
      "(line 352,col 9)-(line 352,col 70)",
      "(line 353,col 9)-(line 353,col 67)",
      "(line 354,col 9)-(line 354,col 31)",
      "(line 355,col 9)-(line 355,col 20)",
      "(line 356,col 9)-(line 356,col 20)",
      "(line 358,col 9)-(line 358,col 87)",
      "(line 359,col 9)-(line 359,col 66)",
      "(line 360,col 9)-(line 360,col 40)"
    ]
  }
]