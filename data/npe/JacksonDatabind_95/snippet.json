[
  {
    "name": "JavaType.JavaType#76",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.JavaType(java.lang.Class\u003c?\u003e, int, java.lang.Object, java.lang.Object, boolean)",
    "snippet": "protected JavaType(Class\u003c?\u003e raw, int additionalHash,\n            Object valueHandler, Object typeHandler, boolean asStatic)\n    {\n        _class \u003d raw;\n        _hash \u003d raw.getName().hashCode() + additionalHash;\n        _valueHandler \u003d valueHandler;\n        _typeHandler \u003d typeHandler;\n        _asStatic \u003d asStatic;\n    }",
    "begin_line": 76,
    "end_line": 84,
    "comment": "/** \n * @param raw \"Raw\" (type-erased) class for this type\n * @param additionalHash Additional hash code to use, in additionto hash code of the class name \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.JavaType#91",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.JavaType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JavaType(JavaType base) \n    {\n        _class \u003d base._class;\n        _hash \u003d base._hash;\n        _valueHandler \u003d base._valueHandler;\n        _typeHandler \u003d base._typeHandler;\n        _asStatic \u003d base._asStatic;\n    }",
    "begin_line": 91,
    "end_line": 98,
    "comment": "/** \n * Copy-constructor used when refining/upgrading type instances.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withTypeHandler#106",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withTypeHandler(java.lang.Object)",
    "snippet": "public abstract JavaType withTypeHandler(Object h);",
    "begin_line": 106,
    "end_line": 106,
    "comment": "/** \n * \"Copy method\" that will construct a new instance that is identical to this instance, except that it will have specified type handler assigned.\n * @return Newly created type instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withContentTypeHandler#115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withContentTypeHandler(java.lang.Object)",
    "snippet": "public abstract JavaType withContentTypeHandler(Object h);",
    "begin_line": 115,
    "end_line": 115,
    "comment": "/** \n * Mutant factory method that will construct a new instance that is identical to this instance, except that it will have specified content type (element type for arrays, value type for Maps and so forth) handler assigned.\n * @return Newly created type instance, with given \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withValueHandler#123",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withValueHandler(java.lang.Object)",
    "snippet": "public abstract JavaType withValueHandler(Object h);",
    "begin_line": 123,
    "end_line": 123,
    "comment": "/** \n * Mutant factory method that will construct a new instance that is identical to this instance, except that it will have specified value handler assigned.\n * @return Newly created type instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withContentValueHandler#131",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withContentValueHandler(java.lang.Object)",
    "snippet": "public abstract JavaType withContentValueHandler(Object h);",
    "begin_line": 131,
    "end_line": 131,
    "comment": "/** \n * Mutant factory method that will construct a new instance that is identical to this instance, except that it will have specified content value handler assigned.\n * @return Newly created type instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withHandlersFrom#140",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withHandlersFrom(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JavaType withHandlersFrom(JavaType src) {\n        JavaType type \u003d this;\n        Object h \u003d src.getTypeHandler();\n        if (h !\u003d _typeHandler) {\n            type \u003d type.withTypeHandler(h);\n        }\n        h \u003d src.getValueHandler();\n        if (h !\u003d _valueHandler) {\n            type \u003d type.withValueHandler(h);\n        }\n        return type;\n    }",
    "begin_line": 140,
    "end_line": 151,
    "comment": "/** \n * Mutant factory method that will try to copy handlers that the specified source type instance had, if any; this must be done recursively where necessary (as content types may be structured).\n * @since 2.8.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withContentType#168",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withContentType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public abstract JavaType withContentType(JavaType contentType);",
    "begin_line": 168,
    "end_line": 168,
    "comment": "/** \n * Mutant factory method that may be called on structured types that have a so-called content type (element of arrays, value type of Maps, referenced type of referential types), and will construct a new instance that is identical to this instance, except that it has specified content type, instead of current one. If content type is already set to given type, \u003ccode\u003ethis\u003c/code\u003e is returned. If type does not have a content type (which is the case with \u003ccode\u003eSimpleType\u003c/code\u003e),  {@link IllegalArgumentException}will be thrown.\n * @return Newly created type instance\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withStaticTyping#181",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withStaticTyping()",
    "snippet": "public abstract JavaType withStaticTyping();",
    "begin_line": 181,
    "end_line": 181,
    "comment": "/** \n * Method that can be called to get a type instance that indicates that values of the type should be handled using \"static typing\" for purposes of serialization (as opposed to \"dynamic\" aka runtime typing): meaning that no runtime information is needed for determining serializers to use. The main use case is to allow forcing of specific root value serialization type, and specifically in resolving serializers for contained types (element types for arrays, Collections and Maps).\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.refine#197",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.refine(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "public abstract JavaType refine(Class\u003c?\u003e rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces);",
    "begin_line": 197,
    "end_line": 198,
    "comment": "/** \n * Mutant factory method that will try to create and return a sub-type instance for known parameterized types; for other types will return `null` to indicate that no just refinement makes necessary sense, without trying to detect special status through implemented interfaces.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.forcedNarrowBy#209",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.forcedNarrowBy(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated\n    public JavaType forcedNarrowBy(Class\u003c?\u003e subclass)\n    {\n        if (subclass \u003d\u003d _class) { // can still optimize for simple case\n            return this;\n        }\n        JavaType result \u003d _narrow(subclass);\n        // TODO: these checks should NOT actually be needed; above should suffice:\n        if (_valueHandler !\u003d result.\u003cObject\u003egetValueHandler()) {\n            result \u003d result.withValueHandler(_valueHandler);\n        }\n        if (_typeHandler !\u003d result.\u003cObject\u003egetTypeHandler()) {\n            result \u003d result.withTypeHandler(_typeHandler);\n        }\n        return result;\n    }",
    "begin_line": 209,
    "end_line": 223,
    "comment": "/** \n * Legacy method used for forcing sub-typing of this type into type specified by specific type erasure. Deprecated as of 2.7 as such specializations really ought to go through  {@link TypeFactory}, not directly via  {@link JavaType}.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType._narrow#226",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType._narrow(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated _narrow(Class\u003c?\u003e subclass);",
    "begin_line": 226,
    "end_line": 226,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getRawClass#235",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getRawClass()",
    "snippet": "@Override\n    public final Class\u003c?\u003e getRawClass() { return _class; }",
    "begin_line": 235,
    "end_line": 235,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.hasRawClass#243",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.hasRawClass(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public final boolean hasRawClass(Class\u003c?\u003e clz) { return _class \u003d\u003d clz; }",
    "begin_line": 243,
    "end_line": 243,
    "comment": "/** \n * Method that can be used to check whether this type has specified Class as its type erasure. Put another way, returns true if instantiation of this Type is given (type-erased) Class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.hasContentType#252",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.hasContentType()",
    "snippet": "public boolean hasContentType() {\n        return true;\n    }",
    "begin_line": 252,
    "end_line": 254,
    "comment": "/** \n * Accessor that allows determining whether  {@link #getContentType()} shouldreturn a non-null value (that is, there is a \"content type\") or not. True if  {@link #isContainerType()} or {@link #isReferenceType()} return true.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isTypeOrSubTypeOf#259",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isTypeOrSubTypeOf(java.lang.Class\u003c?\u003e)",
    "snippet": "public final boolean isTypeOrSubTypeOf(Class\u003c?\u003e clz) {\n        return (_class \u003d\u003d clz) || (clz.isAssignableFrom(_class));\n    }",
    "begin_line": 259,
    "end_line": 261,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isAbstract#264",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isAbstract()",
    "snippet": "@Override\n    public boolean isAbstract() {\n        return Modifier.isAbstract(_class.getModifiers());\n    }",
    "begin_line": 264,
    "end_line": 266,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isConcrete#274",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isConcrete()",
    "snippet": "@Override\n    public boolean isConcrete() {\n        int mod \u003d _class.getModifiers();\n        if ((mod \u0026 (Modifier.INTERFACE | Modifier.ABSTRACT)) \u003d\u003d 0) {\n            return true;\n        }\n        /* 19-Feb-2010, tatus: Holy mackarel; primitive types\n         *    have \u0027abstract\u0027 flag set...\n         */\n        return _class.isPrimitive();\n    }",
    "begin_line": 274,
    "end_line": 283,
    "comment": "/** \n * Convenience method for checking whether underlying Java type is a concrete class or not: abstract classes and interfaces are not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isThrowable#286",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isThrowable()",
    "snippet": "@Override\n    public boolean isThrowable() { return Throwable.class.isAssignableFrom(_class); }",
    "begin_line": 286,
    "end_line": 286,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isArrayType#289",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isArrayType()",
    "snippet": "@Override\n    public boolean isArrayType() { return false; }",
    "begin_line": 289,
    "end_line": 289,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isEnumType#292",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isEnumType()",
    "snippet": "@Override\n    public final boolean isEnumType() { return _class.isEnum(); }",
    "begin_line": 292,
    "end_line": 292,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isInterface#295",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isInterface()",
    "snippet": "@Override\n    public final boolean isInterface() { return _class.isInterface(); }",
    "begin_line": 295,
    "end_line": 295,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isPrimitive#298",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isPrimitive()",
    "snippet": "@Override\n    public final boolean isPrimitive() { return _class.isPrimitive(); }",
    "begin_line": 298,
    "end_line": 298,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isFinal#301",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isFinal()",
    "snippet": "@Override\n    public final boolean isFinal() { return Modifier.isFinal(_class.getModifiers()); }",
    "begin_line": 301,
    "end_line": 301,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isContainerType#308",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isContainerType()",
    "snippet": "@Override\n    public abstract boolean isContainerType();",
    "begin_line": 308,
    "end_line": 308,
    "comment": "/** \n * @return True if type represented is a container type; this includesarray, Map and Collection types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isCollectionLikeType#316",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isCollectionLikeType()",
    "snippet": "@Override\n    public boolean isCollectionLikeType() { return false; }",
    "begin_line": 316,
    "end_line": 316,
    "comment": "/** \n * @return True if type is either true {@link java.util.Collection} type,or something similar (meaning it has at least one type parameter, which describes type of contents)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isMapLikeType#324",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isMapLikeType()",
    "snippet": "@Override\n    public boolean isMapLikeType() { return false; }",
    "begin_line": 324,
    "end_line": 324,
    "comment": "/** \n * @return True if type is either true {@link java.util.Map} type,or something similar (meaning it has at least two type parameter; first one describing key type, second value type)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isJavaLangObject#335",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isJavaLangObject()",
    "snippet": "public final boolean isJavaLangObject() { return _class \u003d\u003d Object.class; }",
    "begin_line": 335,
    "end_line": 335,
    "comment": "/** \n * Convenience method, short-hand for \u003ccode\u003e getRawClass() \u003d\u003d Object.class \u003c/code\u003e and used to figure if we basically have \"untyped\" type object.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.useStaticType#345",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.useStaticType()",
    "snippet": "public final boolean useStaticType() { return _asStatic; }",
    "begin_line": 345,
    "end_line": 345,
    "comment": "/** \n * Accessor for checking whether handlers for dealing with values of this type should use static typing (as opposed to dynamic typing). Note that while value of \u0027true\u0027 does mean that static typing is to be used, value of \u0027false\u0027 may still be overridden by other settings.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.hasGenericTypes#354",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.hasGenericTypes()",
    "snippet": "@Override\n    public boolean hasGenericTypes() { return containedTypeCount() \u003e 0; }",
    "begin_line": 354,
    "end_line": 354,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getKeyType#357",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getKeyType()",
    "snippet": "@Override\n    public JavaType getKeyType() { return null; }",
    "begin_line": 357,
    "end_line": 357,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getContentType#360",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getContentType()",
    "snippet": "@Override\n    public JavaType getContentType() { return null; }",
    "begin_line": 360,
    "end_line": 360,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getReferencedType#363",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getReferencedType()",
    "snippet": "@Override getReferencedType() { return null; }",
    "begin_line": 363,
    "end_line": 363,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.containedTypeCount#366",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.containedTypeCount()",
    "snippet": "@Override\n    public abstract int containedTypeCount();",
    "begin_line": 366,
    "end_line": 366,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.containedType#369",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.containedType(int)",
    "snippet": "@Override\n    public abstract JavaType containedType(int index);",
    "begin_line": 369,
    "end_line": 369,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.containedTypeName#373",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.containedTypeName(int)",
    "snippet": "@Deprecated containedTypeName(int index);",
    "begin_line": 373,
    "end_line": 373,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getParameterSource#377",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getParameterSource()",
    "snippet": "@Deprecated getParameterSource() {\n        return null;\n    }",
    "begin_line": 377,
    "end_line": 379,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.containedTypeOrUnknown#403",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.containedTypeOrUnknown(int)",
    "snippet": "public JavaType containedTypeOrUnknown(int index) {\n        JavaType t \u003d containedType(index);\n        return (t \u003d\u003d null)  ? TypeFactory.unknownType() : t;\n    }",
    "begin_line": 403,
    "end_line": 406,
    "comment": "/** \n * Convenience method that is functionally same as: \u003ccode\u003e JavaType t \u003d containedType(index); if (t \u003d\u003d null) { t \u003d TypeFactory.unknownType(); } \u003c/code\u003e and typically used to eliminate need for null checks for common case where we just want to check if containedType is available first; and if not, use \"unknown type\" (which translates to \u003ccode\u003ejava.lang.Object\u003c/code\u003e basically).\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getBindings#411",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getBindings()",
    "snippet": "public abstract TypeBindings getBindings();",
    "begin_line": 411,
    "end_line": 411,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.findSuperType#422",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.findSuperType(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JavaType findSuperType(Class\u003c?\u003e erasedTarget);",
    "begin_line": 422,
    "end_line": 422,
    "comment": "/** \n * Method that may be called to find representation of given type within type hierarchy of this type: either this type (if this type has given erased type), one of its supertypes that has the erased types, or null if target is neither this type or any of its supertypes.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getSuperClass#430",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getSuperClass()",
    "snippet": "public abstract JavaType getSuperClass();",
    "begin_line": 430,
    "end_line": 430,
    "comment": "/** \n * Accessor for finding fully resolved parent class of this type, if it has one; null if not.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getInterfaces#438",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getInterfaces()",
    "snippet": "public abstract List\u003cJavaType\u003e getInterfaces();",
    "begin_line": 438,
    "end_line": 438,
    "comment": "/** \n * Accessor for finding fully resolved interfaces this type implements, if any; empty array if none.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.findTypeParameters#446",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.findTypeParameters(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JavaType[] findTypeParameters(Class\u003c?\u003e expType);",
    "begin_line": 446,
    "end_line": 446,
    "comment": "/** \n * Method that may be used to find paramaterization this type has for given type-erased generic target type.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getValueHandler#458",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getValueHandler()",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T getValueHandler() { return (T) _valueHandler; }",
    "begin_line": 458,
    "end_line": 458,
    "comment": "/** \n * Method for accessing value handler associated with this type, if any\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getTypeHandler#464",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getTypeHandler()",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T getTypeHandler() { return (T) _typeHandler; }",
    "begin_line": 464,
    "end_line": 464,
    "comment": "/** \n * Method for accessing type handler associated with this type, if any\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getContentValueHandler#469",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getContentValueHandler()",
    "snippet": "public Object getContentValueHandler() { return null; }",
    "begin_line": 469,
    "end_line": 469,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getContentTypeHandler#474",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getContentTypeHandler()",
    "snippet": "public Object getContentTypeHandler() { return null; }",
    "begin_line": 474,
    "end_line": 474,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.hasValueHandler#479",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.hasValueHandler()",
    "snippet": "public boolean hasValueHandler() { return _valueHandler !\u003d null; }",
    "begin_line": 479,
    "end_line": 479,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.hasHandlers#489",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.hasHandlers()",
    "snippet": "public boolean hasHandlers() {\n        return (_typeHandler !\u003d null) || (_valueHandler !\u003d null);\n    }",
    "begin_line": 489,
    "end_line": 491,
    "comment": "/** \n * Helper method that checks whether this type, or its (optional) key or content type has  {@link #getValueHandler} or {@link #getTypeHandler()}; that is, are there any non-standard handlers associated with this type object.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getGenericSignature#509",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getGenericSignature()",
    "snippet": "public String getGenericSignature() {\n        StringBuilder sb \u003d new StringBuilder(40);\n        getGenericSignature(sb);\n        return sb.toString();        \n    }",
    "begin_line": 509,
    "end_line": 513,
    "comment": "/** \n * Method for accessing signature that contains generic type information, in form compatible with JVM 1.5 as per JLS. It is a superset of  {@link #getErasedSignature}, in that generic information can be automatically removed if necessary (just remove outermost angle brackets along with content inside)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getGenericSignature#522",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getGenericSignature(java.lang.StringBuilder)",
    "snippet": "public abstract StringBuilder getGenericSignature(StringBuilder sb);",
    "begin_line": 522,
    "end_line": 522,
    "comment": "/** \n * @param sb StringBuilder to append signature to\n * @return StringBuilder that was passed in; returned to allowcall chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getErasedSignature#530",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getErasedSignature()",
    "snippet": "public String getErasedSignature() {\n        StringBuilder sb \u003d new StringBuilder(40);\n        getErasedSignature(sb);\n        return sb.toString();\n    }",
    "begin_line": 530,
    "end_line": 534,
    "comment": "/** \n * Method for accessing signature without generic type information, in form compatible with all versions of JVM, and specifically used for type descriptions when generating byte code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getErasedSignature#547",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getErasedSignature(java.lang.StringBuilder)",
    "snippet": "public abstract StringBuilder getErasedSignature(StringBuilder sb);",
    "begin_line": 547,
    "end_line": 547,
    "comment": "/** \n * Method for accessing signature without generic type information, in form compatible with all versions of JVM, and specifically used for type descriptions when generating byte code.\n * @param sb StringBuilder to append signature to\n * @return StringBuilder that was passed in; returned to allowcall chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.toString#556",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.toString()",
    "snippet": "@Override\n    public abstract String toString();",
    "begin_line": 556,
    "end_line": 556,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.equals#559",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.equals(java.lang.Object)",
    "snippet": "@Override\n    public abstract boolean equals(Object o);",
    "begin_line": 559,
    "end_line": 559,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.hashCode#562",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.hashCode()",
    "snippet": "@Override\n    public final int hashCode() { return _hash; }",
    "begin_line": 562,
    "end_line": 562,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.ClassStack#20",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.ClassStack(java.lang.Class\u003c?\u003e)",
    "snippet": "public ClassStack(Class\u003c?\u003e rootType) {\n        this(null, rootType);\n    }",
    "begin_line": 20,
    "end_line": 22,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.ClassStack#24",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.ClassStack(com.fasterxml.jackson.databind.type.ClassStack, java.lang.Class\u003c?\u003e)",
    "snippet": "private ClassStack(ClassStack parent, Class\u003c?\u003e curr) {\n        _parent \u003d parent;\n        _current \u003d curr;\n    }",
    "begin_line": 24,
    "end_line": 27,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.child#32",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.child(java.lang.Class\u003c?\u003e)",
    "snippet": "public ClassStack child(Class\u003c?\u003e cls) {\n        return new ClassStack(this, cls);\n    }",
    "begin_line": 32,
    "end_line": 34,
    "comment": "/** \n * @return New stack frame, if addition is ok; null if not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.addSelfReference#40",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.addSelfReference(com.fasterxml.jackson.databind.type.ResolvedRecursiveType)",
    "snippet": "public void addSelfReference(ResolvedRecursiveType ref)\n    {\n        if (_selfRefs \u003d\u003d null) {\n            _selfRefs \u003d new ArrayList\u003cResolvedRecursiveType\u003e();\n        }\n        _selfRefs.add(ref);\n    }",
    "begin_line": 40,
    "end_line": 46,
    "comment": "/** \n * Method called to indicate that there is a self-reference from deeper down in stack pointing into type this stack frame represents.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.resolveSelfReferences#53",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.resolveSelfReferences(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public void resolveSelfReferences(JavaType resolved)\n    {\n        if (_selfRefs !\u003d null) {\n            for (ResolvedRecursiveType ref : _selfRefs) {\n                ref.setReference(resolved);\n            }\n        }\n    }",
    "begin_line": 53,
    "end_line": 60,
    "comment": "/** \n * Method called when type that this stack frame represents is fully resolved, allowing self-references to be completed (if there are any)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.find#62",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.find(java.lang.Class\u003c?\u003e)",
    "snippet": "public ClassStack find(Class\u003c?\u003e cls)\n    {\n        if (_current \u003d\u003d cls) return this;\n        for (ClassStack curr \u003d _parent; curr !\u003d null; curr \u003d curr._parent) {\n            if (curr._current \u003d\u003d cls) {\n                return curr;\n            }\n        }\n        return null;\n    }",
    "begin_line": 62,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.toString#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.toString()",
    "snippet": "@Override\n    public String toString() {\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(\"[ClassStack (self-refs: \")\n            .append((_selfRefs \u003d\u003d null) ? \"0\" : String.valueOf(_selfRefs.size()))\n            .append(\u0027)\u0027)\n                    ;\n        for (ClassStack curr \u003d this; curr !\u003d null; curr \u003d curr._parent) {\n            sb.append(\u0027 \u0027).append(curr._current.getName());\n        }\n        sb.append(\u0027]\u0027);\n        return sb.toString();\n    }",
    "begin_line": 74,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.CollectionLikeType#30",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.CollectionLikeType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], com.fasterxml.jackson.databind.JavaType, java.lang.Object, java.lang.Object, boolean)",
    "snippet": "protected CollectionLikeType(Class\u003c?\u003e collT, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInts, JavaType elemT,\n            Object valueHandler, Object typeHandler, boolean asStatic)\n    {\n        super(collT, bindings, superClass, superInts,\n                elemT.hashCode(), valueHandler, typeHandler, asStatic);\n        _elementType \u003d elemT;\n    }",
    "begin_line": 30,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.CollectionLikeType#42",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.CollectionLikeType(com.fasterxml.jackson.databind.type.TypeBase, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected CollectionLikeType(TypeBase base, JavaType elemT)\n    {\n        super(base);\n        _elementType \u003d elemT;\n    }",
    "begin_line": 42,
    "end_line": 46,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.construct#51",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.construct(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static CollectionLikeType construct(Class\u003c?\u003e rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInts, JavaType elemT) {\n        return new CollectionLikeType(rawType, bindings, superClass, superInts, elemT,\n                null, null, false);\n    }",
    "begin_line": 51,
    "end_line": 55,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.construct#62",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.construct(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated construct(Class\u003c?\u003e rawType, JavaType elemT) {\n        // First: may need to fabricate TypeBindings (needed for refining into\n        // concrete collection types, as per [databind#1102])\n        TypeVariable\u003c?\u003e[] vars \u003d rawType.getTypeParameters();\n        TypeBindings bindings;\n        if ((vars \u003d\u003d null) || (vars.length !\u003d 1)) {\n            bindings \u003d TypeBindings.emptyBindings();\n        } else {\n            bindings \u003d TypeBindings.create(rawType, elemT);\n        }\n        return new CollectionLikeType(rawType, bindings,\n                _bogusSuperClass(rawType), null,\n                elemT, null, null, false);\n    }",
    "begin_line": 62,
    "end_line": 75,
    "comment": "/** \n * @deprecated Since 2.7, use {@link #upgradeFrom} for constructing instances, givenpre-resolved  {@link SimpleType}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.upgradeFrom#83",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.upgradeFrom(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static CollectionLikeType upgradeFrom(JavaType baseType, JavaType elementType) {\n        // 19-Oct-2015, tatu: Not sure if and how other types could be used as base;\n        //    will cross that bridge if and when need be\n        if (baseType instanceof TypeBase) {\n            return new CollectionLikeType((TypeBase) baseType, elementType);\n        }\n        throw new IllegalArgumentException(\"Can not upgrade from an instance of \"+baseType.getClass());\n    }",
    "begin_line": 83,
    "end_line": 90,
    "comment": "/** \n * Factory method that can be used to \"upgrade\" a basic type into collection-like one; usually done via  {@link TypeModifier}\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType._narrow#94",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType._narrow(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    @Deprecated _narrow(Class\u003c?\u003e subclass) {\n        return new CollectionLikeType(subclass, _bindings,\n                _superClass, _superInterfaces, _elementType,\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 94,
    "end_line": 98,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.withContentType#101",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.withContentType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public JavaType withContentType(JavaType contentType) {\n        if (_elementType \u003d\u003d contentType) {\n            return this;\n        }\n        return new CollectionLikeType(_class, _bindings, _superClass, _superInterfaces,\n                contentType, _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 101,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.withTypeHandler#110",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.withTypeHandler(java.lang.Object)",
    "snippet": "@Override\n    public CollectionLikeType withTypeHandler(Object h) {\n        return new CollectionLikeType(_class, _bindings,\n                _superClass, _superInterfaces, _elementType, _valueHandler, h, _asStatic);\n    }",
    "begin_line": 110,
    "end_line": 113,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.withContentTypeHandler#116",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.withContentTypeHandler(java.lang.Object)",
    "snippet": "@Override\n    public CollectionLikeType withContentTypeHandler(Object h)\n    {\n        return new CollectionLikeType(_class, _bindings,\n                _superClass, _superInterfaces, _elementType.withTypeHandler(h),\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 116,
    "end_line": 121,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.withValueHandler#124",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.withValueHandler(java.lang.Object)",
    "snippet": "@Override\n    public CollectionLikeType withValueHandler(Object h) {\n        return new CollectionLikeType(_class, _bindings,\n                _superClass, _superInterfaces, _elementType, h, _typeHandler, _asStatic);\n    }",
    "begin_line": 124,
    "end_line": 127,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.withContentValueHandler#130",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.withContentValueHandler(java.lang.Object)",
    "snippet": "@Override\n    public CollectionLikeType withContentValueHandler(Object h) {\n        return new CollectionLikeType(_class, _bindings,\n                _superClass, _superInterfaces, _elementType.withValueHandler(h),\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 130,
    "end_line": 134,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.withHandlersFrom#137",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.withHandlersFrom(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public JavaType withHandlersFrom(JavaType src) {\n        JavaType type \u003d super.withHandlersFrom(src);\n        JavaType srcCt \u003d src.getContentType();\n        if (srcCt !\u003d null) {\n            JavaType ct \u003d _elementType.withHandlersFrom(srcCt);\n            if (ct !\u003d _elementType) {\n                type \u003d type.withContentType(ct);\n            }\n        }\n        return type;\n    }",
    "begin_line": 137,
    "end_line": 147,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.withStaticTyping#150",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.withStaticTyping()",
    "snippet": "@Override\n    public CollectionLikeType withStaticTyping() {\n        if (_asStatic) {\n            return this;\n        }\n        return new CollectionLikeType(_class, _bindings,\n                _superClass, _superInterfaces, _elementType.withStaticTyping(),\n                _valueHandler, _typeHandler, true);\n    }",
    "begin_line": 150,
    "end_line": 157,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.refine#160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.refine(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "@Override\n    public JavaType refine(Class\u003c?\u003e rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces) {\n        return new CollectionLikeType(rawType, bindings,\n                superClass, superInterfaces, _elementType,\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 160,
    "end_line": 165,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.isContainerType#174",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.isContainerType()",
    "snippet": "@Override\n    public boolean isContainerType() { return true; }",
    "begin_line": 174,
    "end_line": 174,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.isCollectionLikeType#177",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.isCollectionLikeType()",
    "snippet": "@Override\n    public boolean isCollectionLikeType() { return true; }",
    "begin_line": 177,
    "end_line": 177,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.getContentType#180",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.getContentType()",
    "snippet": "@Override\n    public JavaType getContentType() { return _elementType; }",
    "begin_line": 180,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.getContentValueHandler#183",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.getContentValueHandler()",
    "snippet": "@Override\n    public Object getContentValueHandler() {\n        return _elementType.getValueHandler();\n    }",
    "begin_line": 183,
    "end_line": 185,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.getContentTypeHandler#188",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.getContentTypeHandler()",
    "snippet": "@Override\n    public Object getContentTypeHandler() {\n        return _elementType.getTypeHandler();\n    }",
    "begin_line": 188,
    "end_line": 190,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.hasHandlers#193",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.hasHandlers()",
    "snippet": "@Override\n    public boolean hasHandlers() {\n        return super.hasHandlers() || _elementType.hasHandlers();\n    }",
    "begin_line": 193,
    "end_line": 195,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.getErasedSignature#198",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.getErasedSignature(java.lang.StringBuilder)",
    "snippet": "@Override\n    public StringBuilder getErasedSignature(StringBuilder sb) {\n        return _classSignature(_class, sb, true);\n    }",
    "begin_line": 198,
    "end_line": 200,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.getGenericSignature#203",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.getGenericSignature(java.lang.StringBuilder)",
    "snippet": "@Override\n    public StringBuilder getGenericSignature(StringBuilder sb) {\n        _classSignature(_class, sb, false);\n        sb.append(\u0027\u003c\u0027);\n        _elementType.getGenericSignature(sb);\n        sb.append(\"\u003e;\");\n        return sb;\n    }",
    "begin_line": 203,
    "end_line": 209,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.buildCanonicalName#212",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.buildCanonicalName()",
    "snippet": "@Override\n    protected String buildCanonicalName() {\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(_class.getName());\n        if (_elementType !\u003d null) {\n            sb.append(\u0027\u003c\u0027);\n            sb.append(_elementType.toCanonical());\n            sb.append(\u0027\u003e\u0027);\n        }\n        return sb.toString();\n    }",
    "begin_line": 212,
    "end_line": 221,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.isTrueCollectionType#235",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.isTrueCollectionType()",
    "snippet": "public boolean isTrueCollectionType() {\n        return Collection.class.isAssignableFrom(_class);\n    }",
    "begin_line": 235,
    "end_line": 237,
    "comment": "/** \n * Method that can be used for checking whether this type is a \"real\" Collection type; meaning whether it represents a parameterized subtype of  {@link java.util.Collection} or just something that actslike one.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.equals#246",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o)\n    {\n        if (o \u003d\u003d this) return true;\n        if (o \u003d\u003d null) return false;\n        if (o.getClass() !\u003d getClass()) return false;\n\n        CollectionLikeType other \u003d (CollectionLikeType) o;\n        return  (_class \u003d\u003d other._class) \u0026\u0026 _elementType.equals(other._elementType);\n    }",
    "begin_line": 246,
    "end_line": 254,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.toString#257",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.toString()",
    "snippet": "@Override\n    public String toString()\n    {\n        return \"[collection-like type; class \"+_class.getName()+\", contains \"+_elementType+\"]\";\n    }",
    "begin_line": 257,
    "end_line": 260,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.CollectionType#21",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.CollectionType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], com.fasterxml.jackson.databind.JavaType, java.lang.Object, java.lang.Object, boolean)",
    "snippet": "private CollectionType(Class\u003c?\u003e collT, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInts, JavaType elemT,\n            Object valueHandler, Object typeHandler, boolean asStatic)\n    {\n        super(collT, bindings, superClass, superInts, elemT, valueHandler, typeHandler, asStatic);\n    }",
    "begin_line": 21,
    "end_line": 26,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.CollectionType#31",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.CollectionType(com.fasterxml.jackson.databind.type.TypeBase, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected CollectionType(TypeBase base, JavaType elemT) {\n        super(base, elemT);\n    }",
    "begin_line": 31,
    "end_line": 33,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.construct#38",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.construct(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static CollectionType construct(Class\u003c?\u003e rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInts, JavaType elemT) {\n        return new CollectionType(rawType, bindings, superClass, superInts, elemT,\n                null, null, false);\n    }",
    "begin_line": 38,
    "end_line": 42,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.construct#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.construct(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated construct(Class\u003c?\u003e rawType, JavaType elemT) {\n        // First: may need to fabricate TypeBindings (needed for refining into\n        // concrete collection types, as per [databind#1102])\n        TypeVariable\u003c?\u003e[] vars \u003d rawType.getTypeParameters();\n        TypeBindings bindings;\n        if ((vars \u003d\u003d null) || (vars.length !\u003d 1)) {\n            bindings \u003d TypeBindings.emptyBindings();\n        } else {\n            bindings \u003d TypeBindings.create(rawType, elemT);\n        }\n        return new CollectionType(rawType, bindings,\n                // !!! TODO: Wrong, does have supertypes, but:\n                _bogusSuperClass(rawType), null, elemT,\n                null, null, false);\n    }",
    "begin_line": 48,
    "end_line": 62,
    "comment": "/** \n * @deprecated Since 2.7, remove from 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType._narrow#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType._narrow(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated _narrow(Class\u003c?\u003e subclass) {\n        return new CollectionType(subclass, _bindings,\n                _superClass, _superInterfaces, _elementType, null, null, _asStatic);\n    }",
    "begin_line": 66,
    "end_line": 69,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.withContentType#72",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.withContentType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public JavaType withContentType(JavaType contentType) {\n        if (_elementType \u003d\u003d contentType) {\n            return this;\n        }\n        return new CollectionType(_class, _bindings, _superClass, _superInterfaces,\n                contentType, _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 72,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.withTypeHandler#81",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.withTypeHandler(java.lang.Object)",
    "snippet": "@Override\n    public CollectionType withTypeHandler(Object h) {\n        return new CollectionType(_class, _bindings,\n                _superClass, _superInterfaces, _elementType, _valueHandler, h, _asStatic);\n    }",
    "begin_line": 81,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.withContentTypeHandler#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.withContentTypeHandler(java.lang.Object)",
    "snippet": "@Override\n    public CollectionType withContentTypeHandler(Object h)\n    {\n        return new CollectionType(_class, _bindings,\n                _superClass, _superInterfaces, _elementType.withTypeHandler(h),\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 87,
    "end_line": 92,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.withValueHandler#95",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.withValueHandler(java.lang.Object)",
    "snippet": "@Override\n    public CollectionType withValueHandler(Object h) {\n        return new CollectionType(_class, _bindings,\n                _superClass, _superInterfaces, _elementType, h, _typeHandler, _asStatic);\n    }",
    "begin_line": 95,
    "end_line": 98,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.withContentValueHandler#101",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.withContentValueHandler(java.lang.Object)",
    "snippet": "@Override\n    public  CollectionType withContentValueHandler(Object h) {\n        return new CollectionType(_class, _bindings,\n                _superClass, _superInterfaces, _elementType.withValueHandler(h),\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 101,
    "end_line": 105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.withStaticTyping#108",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.withStaticTyping()",
    "snippet": "@Override\n    public CollectionType withStaticTyping() {\n        if (_asStatic) {\n            return this;\n        }\n        return new CollectionType(_class, _bindings,\n                _superClass, _superInterfaces, _elementType.withStaticTyping(),\n                _valueHandler, _typeHandler, true);\n    }",
    "begin_line": 108,
    "end_line": 115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.refine#118",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.refine(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "@Override\n    public JavaType refine(Class\u003c?\u003e rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces) {\n        return new CollectionType(rawType, bindings,\n                superClass, superInterfaces, _elementType,\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 118,
    "end_line": 123,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.toString#132",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.toString()",
    "snippet": "@Override\n    public String toString()\n    {\n        return \"[collection type; class \"+_class.getName()+\", contains \"+_elementType+\"]\";\n    }",
    "begin_line": 132,
    "end_line": 135,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.MapLikeType#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.MapLikeType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType, java.lang.Object, java.lang.Object, boolean)",
    "snippet": "protected MapLikeType(Class\u003c?\u003e mapType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInts, JavaType keyT,\n            JavaType valueT, Object valueHandler, Object typeHandler,\n            boolean asStatic) {\n        super(mapType, bindings, superClass, superInts, keyT.hashCode()\n                ^ valueT.hashCode(), valueHandler, typeHandler, asStatic);\n        _keyType \u003d keyT;\n        _valueType \u003d valueT;\n    }",
    "begin_line": 35,
    "end_line": 43,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.MapLikeType#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.MapLikeType(com.fasterxml.jackson.databind.type.TypeBase, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected MapLikeType(TypeBase base, JavaType keyT, JavaType valueT) {\n        super(base);\n        _keyType \u003d keyT;\n        _valueType \u003d valueT;\n    }",
    "begin_line": 48,
    "end_line": 52,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.upgradeFrom#60",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.upgradeFrom(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static MapLikeType upgradeFrom(JavaType baseType, JavaType keyT,\n            JavaType valueT) {\n        // 19-Oct-2015, tatu: Not sure if and how other types could be used as\n        // base;\n        // will cross that bridge if and when need be\n        if (baseType instanceof TypeBase) {\n            return new MapLikeType((TypeBase) baseType, keyT, valueT);\n        }\n        throw new IllegalArgumentException(\n                \"Can not upgrade from an instance of \" + baseType.getClass());\n    }",
    "begin_line": 60,
    "end_line": 70,
    "comment": "/** \n * Factory method that can be used to \"upgrade\" a basic type into collection-like one; usually done via  {@link TypeModifier}\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.construct#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.construct(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated construct(Class\u003c?\u003e rawType, JavaType keyT,\n            JavaType valueT) {\n        // First: may need to fabricate TypeBindings (needed for refining into\n        // concrete collection types, as per [databind#1102])\n        TypeVariable\u003c?\u003e[] vars \u003d rawType.getTypeParameters();\n        TypeBindings bindings;\n        if ((vars \u003d\u003d null) || (vars.length !\u003d 2)) {\n            bindings \u003d TypeBindings.emptyBindings();\n        } else {\n            bindings \u003d TypeBindings.create(rawType, keyT, valueT);\n        }\n        return new MapLikeType(rawType, bindings, _bogusSuperClass(rawType),\n                null, keyT, valueT, null, null, false);\n    }",
    "begin_line": 74,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType._narrow#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType._narrow(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated _narrow(Class\u003c?\u003e subclass) {\n        return new MapLikeType(subclass, _bindings, _superClass,\n                _superInterfaces, _keyType, _valueType, _valueHandler,\n                _typeHandler, _asStatic);\n    }",
    "begin_line": 92,
    "end_line": 96,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.withKeyType#101",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withKeyType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public MapLikeType withKeyType(JavaType keyType) {\n        if (keyType \u003d\u003d _keyType) {\n            return this;\n        }\n        return new MapLikeType(_class, _bindings, _superClass,\n                _superInterfaces, keyType, _valueType, _valueHandler,\n                _typeHandler, _asStatic);\n    }",
    "begin_line": 101,
    "end_line": 108,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.withContentType#111",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withContentType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public JavaType withContentType(JavaType contentType) {\n        if (_valueType \u003d\u003d contentType) {\n            return this;\n        }\n        return new MapLikeType(_class, _bindings, _superClass,\n                _superInterfaces, _keyType, contentType, _valueHandler,\n                _typeHandler, _asStatic);\n    }",
    "begin_line": 111,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.withTypeHandler#121",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withTypeHandler(java.lang.Object)",
    "snippet": "@Override\n    public MapLikeType withTypeHandler(Object h) {\n        return new MapLikeType(_class, _bindings, _superClass,\n                _superInterfaces, _keyType, _valueType, _valueHandler, h,\n                _asStatic);\n    }",
    "begin_line": 121,
    "end_line": 125,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.withContentTypeHandler#128",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withContentTypeHandler(java.lang.Object)",
    "snippet": "@Override\n    public MapLikeType withContentTypeHandler(Object h) {\n        return new MapLikeType(_class, _bindings, _superClass,\n                _superInterfaces, _keyType, _valueType.withTypeHandler(h),\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 128,
    "end_line": 132,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.withValueHandler#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withValueHandler(java.lang.Object)",
    "snippet": "@Override\n    public MapLikeType withValueHandler(Object h) {\n        return new MapLikeType(_class, _bindings, _superClass,\n                _superInterfaces, _keyType, _valueType, h, _typeHandler,\n                _asStatic);\n    }",
    "begin_line": 135,
    "end_line": 139,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.withContentValueHandler#142",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withContentValueHandler(java.lang.Object)",
    "snippet": "@Override\n    public MapLikeType withContentValueHandler(Object h) {\n        return new MapLikeType(_class, _bindings, _superClass,\n                _superInterfaces, _keyType, _valueType.withValueHandler(h),\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 142,
    "end_line": 146,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.withHandlersFrom#149",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withHandlersFrom(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public JavaType withHandlersFrom(JavaType src) {\n        JavaType type \u003d super.withHandlersFrom(src);\n        JavaType srcKeyType \u003d src.getKeyType();\n        // \"withKeyType()\" not part of JavaType, hence must verify:\n        if (type instanceof MapLikeType) {\n            if (srcKeyType !\u003d null) {\n                JavaType ct \u003d _keyType.withHandlersFrom(srcKeyType);\n                if (ct !\u003d _keyType) {\n                    type \u003d ((MapLikeType) type).withKeyType(ct);\n                }\n            }\n        }\n        JavaType srcCt \u003d src.getContentType();\n        if (srcCt !\u003d null) {\n            JavaType ct \u003d _valueType.withHandlersFrom(srcCt);\n            if (ct !\u003d _valueType) {\n                type \u003d type.withContentType(ct);\n            }\n        }\n        return type;\n    }",
    "begin_line": 149,
    "end_line": 169,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.withStaticTyping#172",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withStaticTyping()",
    "snippet": "@Override\n    public MapLikeType withStaticTyping() {\n        if (_asStatic) {\n            return this;\n        }\n        return new MapLikeType(_class, _bindings, _superClass,\n                _superInterfaces, _keyType, _valueType.withStaticTyping(),\n                _valueHandler, _typeHandler, true);\n    }",
    "begin_line": 172,
    "end_line": 179,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.refine#182",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.refine(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "@Override\n    public JavaType refine(Class\u003c?\u003e rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces) {\n        return new MapLikeType(rawType, bindings, superClass, superInterfaces,\n                _keyType, _valueType, _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 182,
    "end_line": 186,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.buildCanonicalName#189",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.buildCanonicalName()",
    "snippet": "@Override\n    protected String buildCanonicalName() {\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(_class.getName());\n        if (_keyType !\u003d null) {\n            sb.append(\u0027\u003c\u0027);\n            sb.append(_keyType.toCanonical());\n            sb.append(\u0027,\u0027);\n            sb.append(_valueType.toCanonical());\n            sb.append(\u0027\u003e\u0027);\n        }\n        return sb.toString();\n    }",
    "begin_line": 189,
    "end_line": 200,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.isContainerType#209",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.isContainerType()",
    "snippet": "@Override\n    public boolean isContainerType() {\n        return true;\n    }",
    "begin_line": 209,
    "end_line": 211,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.isMapLikeType#214",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.isMapLikeType()",
    "snippet": "@Override\n    public boolean isMapLikeType() {\n        return true;\n    }",
    "begin_line": 214,
    "end_line": 216,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.getKeyType#219",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.getKeyType()",
    "snippet": "@Override\n    public JavaType getKeyType() {\n        return _keyType;\n    }",
    "begin_line": 219,
    "end_line": 221,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.getContentType#224",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.getContentType()",
    "snippet": "@Override\n    public JavaType getContentType() {\n        return _valueType;\n    }",
    "begin_line": 224,
    "end_line": 226,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.getContentValueHandler#229",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.getContentValueHandler()",
    "snippet": "@Override\n    public Object getContentValueHandler() {\n        return _valueType.getValueHandler();\n    }",
    "begin_line": 229,
    "end_line": 231,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.getContentTypeHandler#234",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.getContentTypeHandler()",
    "snippet": "@Override\n    public Object getContentTypeHandler() {\n        return _valueType.getTypeHandler();\n    }",
    "begin_line": 234,
    "end_line": 236,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.hasHandlers#239",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.hasHandlers()",
    "snippet": "@Override\n    public boolean hasHandlers() {\n        return super.hasHandlers() || _valueType.hasHandlers()\n                || _keyType.hasHandlers();\n    }",
    "begin_line": 239,
    "end_line": 242,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.getErasedSignature#245",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.getErasedSignature(java.lang.StringBuilder)",
    "snippet": "@Override\n    public StringBuilder getErasedSignature(StringBuilder sb) {\n        return _classSignature(_class, sb, true);\n    }",
    "begin_line": 245,
    "end_line": 247,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.getGenericSignature#250",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.getGenericSignature(java.lang.StringBuilder)",
    "snippet": "@Override\n    public StringBuilder getGenericSignature(StringBuilder sb) {\n        _classSignature(_class, sb, false);\n        sb.append(\u0027\u003c\u0027);\n        _keyType.getGenericSignature(sb);\n        _valueType.getGenericSignature(sb);\n        sb.append(\"\u003e;\");\n        return sb;\n    }",
    "begin_line": 250,
    "end_line": 257,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.withKeyTypeHandler#265",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withKeyTypeHandler(java.lang.Object)",
    "snippet": "public MapLikeType withKeyTypeHandler(Object h) {\n        return new MapLikeType(_class, _bindings, _superClass,\n                _superInterfaces, _keyType.withTypeHandler(h), _valueType,\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 265,
    "end_line": 269,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.withKeyValueHandler#271",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withKeyValueHandler(java.lang.Object)",
    "snippet": "public MapLikeType withKeyValueHandler(Object h) {\n        return new MapLikeType(_class, _bindings, _superClass,\n                _superInterfaces, _keyType.withValueHandler(h), _valueType,\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 271,
    "end_line": 275,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.isTrueMapType#282",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.isTrueMapType()",
    "snippet": "public boolean isTrueMapType() {\n        return Map.class.isAssignableFrom(_class);\n    }",
    "begin_line": 282,
    "end_line": 284,
    "comment": "/** \n * Method that can be used for checking whether this type is a \"real\" Collection type; meaning whether it represents a parameterized subtype of {@link java.util.Collection} or just something that acts like one.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.toString#293",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.toString()",
    "snippet": "@Override\n    public String toString() {\n        return String.format(\"[map-like type; class %s, %s -\u003e %s]\",\n                _class.getName(), _keyType, _valueType);\n    }",
    "begin_line": 293,
    "end_line": 296,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.equals#299",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o) {\n        if (o \u003d\u003d this) return true;\n        if (o \u003d\u003d null) return false;\n        if (o.getClass() !\u003d getClass()) return false;\n\n        MapLikeType other \u003d (MapLikeType) o;\n        return (_class \u003d\u003d other._class) \u0026\u0026 _keyType.equals(other._keyType)\n                \u0026\u0026 _valueType.equals(other._valueType);\n    }",
    "begin_line": 299,
    "end_line": 307,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.MapType#20",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.MapType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType, java.lang.Object, java.lang.Object, boolean)",
    "snippet": "private MapType(Class\u003c?\u003e mapType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInts, JavaType keyT, JavaType valueT,\n            Object valueHandler, Object typeHandler, boolean asStatic) {\n        super(mapType, bindings, superClass, superInts,\n                keyT, valueT, valueHandler, typeHandler, asStatic);\n    }",
    "begin_line": 20,
    "end_line": 25,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.MapType#30",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.MapType(com.fasterxml.jackson.databind.type.TypeBase, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected MapType(TypeBase base, JavaType keyT, JavaType valueT) {\n        super(base, keyT, valueT);\n    }",
    "begin_line": 30,
    "end_line": 32,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.construct#37",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.construct(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static MapType construct(Class\u003c?\u003e rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInts,\n            JavaType keyT, JavaType valueT) {\n        return new MapType(rawType, bindings, superClass, superInts, keyT, valueT, null, null, false);\n    }",
    "begin_line": 37,
    "end_line": 41,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.construct#44",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.construct(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated construct(Class\u003c?\u003e rawType, JavaType keyT, JavaType valueT)\n    {\n        // First: may need to fabricate TypeBindings (needed for refining into\n        // concrete collection types, as per [databind#1102])\n        TypeVariable\u003c?\u003e[] vars \u003d rawType.getTypeParameters();\n        TypeBindings bindings;\n        if ((vars \u003d\u003d null) || (vars.length !\u003d 2)) {\n            bindings \u003d TypeBindings.emptyBindings();\n        } else {\n            bindings \u003d TypeBindings.create(rawType, keyT, valueT);\n        }\n        // !!! TODO: Wrong, does have supertypes\n        return new MapType(rawType, bindings, _bogusSuperClass(rawType), null,\n                keyT, valueT, null, null, false);\n    }",
    "begin_line": 44,
    "end_line": 58,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType._narrow#62",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType._narrow(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated _narrow(Class\u003c?\u003e subclass) {\n        return new MapType(subclass, _bindings,\n                _superClass, _superInterfaces, _keyType, _valueType,\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 62,
    "end_line": 66,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.withTypeHandler#69",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.withTypeHandler(java.lang.Object)",
    "snippet": "@Override\n    public MapType withTypeHandler(Object h) {\n        return new MapType(_class, _bindings,\n                _superClass, _superInterfaces, _keyType, _valueType, _valueHandler, h, _asStatic);\n    }",
    "begin_line": 69,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.withContentTypeHandler#75",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.withContentTypeHandler(java.lang.Object)",
    "snippet": "@Override\n    public MapType withContentTypeHandler(Object h)\n    {\n        return new MapType(_class, _bindings,\n                _superClass, _superInterfaces, _keyType, _valueType.withTypeHandler(h),\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 75,
    "end_line": 80,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.withValueHandler#83",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.withValueHandler(java.lang.Object)",
    "snippet": "@Override\n    public MapType withValueHandler(Object h) {\n        return new MapType(_class, _bindings,\n                _superClass, _superInterfaces, _keyType, _valueType, h, _typeHandler, _asStatic);\n    }",
    "begin_line": 83,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.withContentValueHandler#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.withContentValueHandler(java.lang.Object)",
    "snippet": "@Override\n    public MapType withContentValueHandler(Object h) {\n        return new MapType(_class, _bindings,\n                _superClass, _superInterfaces, _keyType, _valueType.withValueHandler(h),\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 89,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.withStaticTyping#96",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.withStaticTyping()",
    "snippet": "@Override\n    public MapType withStaticTyping() {\n        if (_asStatic) {\n            return this;\n        }\n        return new MapType(_class, _bindings,\n                _superClass, _superInterfaces, _keyType.withStaticTyping(), _valueType.withStaticTyping(),\n                _valueHandler, _typeHandler, true);\n    }",
    "begin_line": 96,
    "end_line": 103,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.withContentType#106",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.withContentType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public JavaType withContentType(JavaType contentType) {\n        if (_valueType \u003d\u003d contentType) {\n            return this;\n        }\n        return new MapType(_class, _bindings, _superClass, _superInterfaces,\n                _keyType, contentType, _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 106,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.withKeyType#115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.withKeyType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public MapType withKeyType(JavaType keyType) {\n        if (keyType \u003d\u003d _keyType) {\n            return this;\n        }\n        return new MapType(_class, _bindings, _superClass, _superInterfaces,\n                keyType, _valueType, _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 115,
    "end_line": 121,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.refine#124",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.refine(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "@Override\n    public JavaType refine(Class\u003c?\u003e rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces) {\n        return new MapType(rawType, bindings,\n                superClass, superInterfaces, _keyType, _valueType,\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 124,
    "end_line": 129,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.withKeyTypeHandler#138",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.withKeyTypeHandler(java.lang.Object)",
    "snippet": "@Override\n    public MapType withKeyTypeHandler(Object h)\n    {\n        return new MapType(_class, _bindings,\n                _superClass, _superInterfaces, _keyType.withTypeHandler(h), _valueType,\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 138,
    "end_line": 143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.withKeyValueHandler#146",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.withKeyValueHandler(java.lang.Object)",
    "snippet": "@Override\n    public MapType withKeyValueHandler(Object h) {\n        return new MapType(_class, _bindings,\n                _superClass, _superInterfaces, _keyType.withValueHandler(h), _valueType,\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "begin_line": 146,
    "end_line": 150,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.toString#159",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.toString()",
    "snippet": "@Override\n    public String toString()\n    {\n        return \"[map type; class \"+_class.getName()+\", \"+_keyType+\" -\u003e \"+_valueType+\"]\";\n    }",
    "begin_line": 159,
    "end_line": 162,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.SimpleType#32",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.SimpleType(java.lang.Class\u003c?\u003e)",
    "snippet": "protected SimpleType(Class\u003c?\u003e cls) {\n        this(cls, TypeBindings.emptyBindings(), null, null);\n    }",
    "begin_line": 32,
    "end_line": 34,
    "comment": "/** \n * Constructor only used by core Jackson databind functionality; should never be called by application code. \u003cp\u003e As with other direct construction that by-passes  {@link TypeFactory}, no introspection occurs with respect to super-types; caller must be aware of consequences if using this method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.SimpleType#36",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.SimpleType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "protected SimpleType(Class\u003c?\u003e cls, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInts) {\n        this(cls, bindings, superClass, superInts, null, null, false);\n    }",
    "begin_line": 36,
    "end_line": 39,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.SimpleType#47",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.SimpleType(com.fasterxml.jackson.databind.type.TypeBase)",
    "snippet": "protected SimpleType(TypeBase base) {\n        super(base);\n    }",
    "begin_line": 47,
    "end_line": 49,
    "comment": "/** \n * Simple copy-constructor, usually used when upgrading/refining a simple type into more specialized type.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.SimpleType#51",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.SimpleType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], java.lang.Object, java.lang.Object, boolean)",
    "snippet": "protected SimpleType(Class\u003c?\u003e cls, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInts,\n            Object valueHandler, Object typeHandler, boolean asStatic)\n    {\n        super(cls, bindings, superClass, superInts,\n                0, valueHandler, typeHandler, asStatic);\n    }",
    "begin_line": 51,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.SimpleType#64",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.SimpleType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], int, java.lang.Object, java.lang.Object, boolean)",
    "snippet": "protected SimpleType(Class\u003c?\u003e cls, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInts, int extraHash,\n            Object valueHandler, Object typeHandler, boolean asStatic)\n    {\n        super(cls, bindings, superClass, superInts, \n                extraHash, valueHandler, typeHandler, asStatic);\n    }",
    "begin_line": 64,
    "end_line": 70,
    "comment": "/** \n * Pass-through constructor used by  {@link ReferenceType}.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.constructUnsafe#81",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.constructUnsafe(java.lang.Class\u003c?\u003e)",
    "snippet": "public static SimpleType constructUnsafe(Class\u003c?\u003e raw) {\n        return new SimpleType(raw, null,\n                // 18-Oct-2015, tatu: Should be ok to omit possible super-types, right?\n                null, null, null, null, false);\n    }",
    "begin_line": 81,
    "end_line": 85,
    "comment": "/** \n * Method used by core Jackson classes: NOT to be used by application code: it does NOT properly handle inspection of super-types, so neither parent Classes nor implemented Interfaces are accessible with resulting type instance. \u003cp\u003e NOTE: public only because it is called by \u003ccode\u003eObjectMapper\u003c/code\u003e which is not in same package\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.construct#101",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.construct(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated\n    public static SimpleType construct(Class\u003c?\u003e cls)\n    {\n        /* Let\u0027s add sanity checks, just to ensure no\n         * Map/Collection entries are constructed\n         */\n        if (Map.class.isAssignableFrom(cls)) {\n            throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \"+cls.getName()+\")\");\n        }\n        if (Collection.class.isAssignableFrom(cls)) {\n            throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \"+cls.getName()+\")\");\n        }\n        // ... and while we are at it, not array types either\n        if (cls.isArray()) {\n            throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \"+cls.getName()+\")\");\n        }\n        TypeBindings b \u003d TypeBindings.emptyBindings();\n        return new SimpleType(cls, b,\n                _buildSuperClass(cls.getSuperclass(), b), null, null, null, false);\n    }",
    "begin_line": 101,
    "end_line": 119,
    "comment": "/** \n * Method that should NOT to be used by application code: it does NOT properly handle inspection of super-types, so neither parent Classes nor implemented Interfaces are accessible with resulting type instance. Instead, please use  {@link TypeFactory}\u0027s \u003ccode\u003econstructType\u003c/code\u003e methods which handle introspection appropriately. \u003cp\u003e Note that prior to 2.7, method usage was not limited and would typically have worked acceptably: the problem comes from inability to resolve super-type information, for which  {@link TypeFactory} is needed.\n * @deprecated Since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType._narrow#123",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType._narrow(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    @Deprecated\n    protected JavaType _narrow(Class\u003c?\u003e subclass)\n    {\n        if (_class \u003d\u003d subclass) {\n            return this;\n        }\n        // Should we check that there is a sub-class relationship?\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.\n        // TODO: fix in 2.9\n        if (!_class.isAssignableFrom(subclass)) {\n            /*\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n                    */\n            return new SimpleType(subclass, _bindings, this, _superInterfaces,\n                    _valueHandler, _typeHandler, _asStatic);\n        }\n        // Otherwise, stitch together the hierarchy. First, super-class\n        Class\u003c?\u003e next \u003d subclass.getSuperclass();\n        if (next \u003d\u003d _class) { // straight up parent class? Great.\n            return new SimpleType(subclass, _bindings, this,\n                    _superInterfaces, _valueHandler, _typeHandler, _asStatic);\n        }\n        if ((next !\u003d null) \u0026\u0026 _class.isAssignableFrom(next)) {\n            JavaType superb \u003d _narrow(next);\n            return new SimpleType(subclass, _bindings, superb,\n                    null, _valueHandler, _typeHandler, _asStatic);\n        }\n        // if not found, try a super-interface\n        Class\u003c?\u003e[] nextI \u003d subclass.getInterfaces();\n        for (Class\u003c?\u003e iface : nextI) {\n            if (iface \u003d\u003d _class) { // directly implemented\n                return new SimpleType(subclass, _bindings, null,\n                        new JavaType[] { this }, _valueHandler, _typeHandler, _asStatic);\n            }\n            if (_class.isAssignableFrom(iface)) { // indirect, so recurse\n                JavaType superb \u003d _narrow(iface);\n                return new SimpleType(subclass, _bindings, null,\n                        new JavaType[] { superb }, _valueHandler, _typeHandler, _asStatic);\n            }\n        }\n        // should not get here but...\n        throw new IllegalArgumentException(\"Internal error: Can not resolve sub-type for Class \"+subclass.getName()+\" to \"\n                +_class.getName());\n    }",
    "begin_line": 123,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.withContentType#170",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.withContentType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override\n    public JavaType withContentType(JavaType contentType) {\n        throw new IllegalArgumentException(\"Simple types have no content types; can not call withContentType()\");\n    }",
    "begin_line": 170,
    "end_line": 172,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.withTypeHandler#175",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.withTypeHandler(java.lang.Object)",
    "snippet": "@Override\n    public SimpleType withTypeHandler(Object h) {\n        if (_typeHandler \u003d\u003d h) {\n            return this;\n        }\n        return new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic);\n    }",
    "begin_line": 175,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.withContentTypeHandler#183",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.withContentTypeHandler(java.lang.Object)",
    "snippet": "@Override\n    public JavaType withContentTypeHandler(Object h) {\n        // no content type, so:\n        throw new IllegalArgumentException(\"Simple types have no content types; can not call withContenTypeHandler()\");\n    }",
    "begin_line": 183,
    "end_line": 186,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.withValueHandler#189",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.withValueHandler(java.lang.Object)",
    "snippet": "@Override\n    public SimpleType withValueHandler(Object h) {\n        if (h \u003d\u003d _valueHandler) {\n            return this;\n        }\n        return new SimpleType(_class, _bindings, _superClass, _superInterfaces, h, _typeHandler, _asStatic);\n    }",
    "begin_line": 189,
    "end_line": 194,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.withContentValueHandler#197",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.withContentValueHandler(java.lang.Object)",
    "snippet": "@Override\n    public  SimpleType withContentValueHandler(Object h) {\n        // no content type, so:\n        throw new IllegalArgumentException(\"Simple types have no content types; can not call withContenValueHandler()\");\n    }",
    "begin_line": 197,
    "end_line": 200,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.withStaticTyping#203",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.withStaticTyping()",
    "snippet": "@Override\n    public SimpleType withStaticTyping() {\n        return _asStatic ? this : new SimpleType(_class, _bindings,\n                _superClass, _superInterfaces, _valueHandler, _typeHandler, true);\n    }",
    "begin_line": 203,
    "end_line": 206,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.refine#209",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.refine(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "@Override\n    public JavaType refine(Class\u003c?\u003e rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces) {\n        // SimpleType means something not-specialized, so:\n        return null;\n    }",
    "begin_line": 209,
    "end_line": 213,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.buildCanonicalName#216",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.buildCanonicalName()",
    "snippet": "@Override\n    protected String buildCanonicalName()\n    {\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(_class.getName());\n\n        final int count \u003d _bindings.size();\n        if (count \u003e 0) {\n            sb.append(\u0027\u003c\u0027);\n            for (int i \u003d 0; i \u003c count; ++i) {\n                JavaType t \u003d containedType(i);\n                if (i \u003e 0) {\n                    sb.append(\u0027,\u0027);\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append(\u0027\u003e\u0027);\n        }\n        return sb.toString();\n    }",
    "begin_line": 216,
    "end_line": 234,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.isContainerType#243",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.isContainerType()",
    "snippet": "@Override\n    public boolean isContainerType() { return false; }",
    "begin_line": 243,
    "end_line": 243,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.hasContentType#246",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.hasContentType()",
    "snippet": "@Override\n    public boolean hasContentType() { return false; }",
    "begin_line": 246,
    "end_line": 246,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.getErasedSignature#249",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.getErasedSignature(java.lang.StringBuilder)",
    "snippet": "@Override\n    public StringBuilder getErasedSignature(StringBuilder sb) {\n        return _classSignature(_class, sb, true);\n    }",
    "begin_line": 249,
    "end_line": 251,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.getGenericSignature#254",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.getGenericSignature(java.lang.StringBuilder)",
    "snippet": "@Override\n    public StringBuilder getGenericSignature(StringBuilder sb)\n    {\n        _classSignature(_class, sb, false);\n\n        final int count \u003d _bindings.size();\n        if (count \u003e 0) {\n            sb.append(\u0027\u003c\u0027);\n            for (int i \u003d 0; i \u003c count; ++i) {\n                sb \u003d containedType(i).getGenericSignature(sb);\n            }\n            sb.append(\u0027\u003e\u0027);\n        }\n        sb.append(\u0027;\u0027);\n        return sb;\n    }",
    "begin_line": 254,
    "end_line": 268,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType._buildSuperClass#282",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType._buildSuperClass(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "private static JavaType _buildSuperClass(Class\u003c?\u003e superClass, TypeBindings b)\n    {\n        if (superClass \u003d\u003d null) {\n            return null;\n        }\n        if (superClass \u003d\u003d Object.class) {\n            return TypeFactory.unknownType();\n        }\n        JavaType superSuper \u003d _buildSuperClass(superClass.getSuperclass(), b);\n        return new SimpleType(superClass, b,\n                superSuper, null, null, null, false);\n    }",
    "begin_line": 282,
    "end_line": 293,
    "comment": "/** \n * Helper method we need to recursively build skeletal representations of superclasses.\n * @since 2.7 -- remove when not needed (2.8?)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.toString#302",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.toString()",
    "snippet": "@Override\n    public String toString()\n    {\n        StringBuilder sb \u003d new StringBuilder(40);\n        sb.append(\"[simple type, class \").append(buildCanonicalName()).append(\u0027]\u0027);\n        return sb.toString();\n    }",
    "begin_line": 302,
    "end_line": 307,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.equals#310",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.equals(java.lang.Object)",
    "snippet": "@Override\n    public boolean equals(Object o)\n    {\n        if (o \u003d\u003d this) return true;\n        if (o \u003d\u003d null) return false;\n        if (o.getClass() !\u003d getClass()) return false;\n\n        SimpleType other \u003d (SimpleType) o;\n\n        // Classes must be identical... \n        if (other._class !\u003d this._class) return false;\n\n        // And finally, generic bindings, if any\n        TypeBindings b1 \u003d _bindings;\n        TypeBindings b2 \u003d other._bindings;\n        return b1.equals(b2);\n    }",
    "begin_line": 310,
    "end_line": 325,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.TypeBase#41",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.TypeBase(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], int, java.lang.Object, java.lang.Object, boolean)",
    "snippet": "protected TypeBase(Class\u003c?\u003e raw, TypeBindings bindings, JavaType superClass, JavaType[] superInts,\n            int hash,\n            Object valueHandler, Object typeHandler, boolean asStatic)\n    {\n        super(raw, hash, valueHandler, typeHandler, asStatic);\n        _bindings \u003d (bindings \u003d\u003d null) ? NO_BINDINGS : bindings;\n        _superClass \u003d superClass;\n        _superInterfaces \u003d superInts;\n    }",
    "begin_line": 41,
    "end_line": 49,
    "comment": "/** \n * Main constructor to use by extending classes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.TypeBase#56",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.TypeBase(com.fasterxml.jackson.databind.type.TypeBase)",
    "snippet": "protected TypeBase(TypeBase base) {\n        super(base);\n        _superClass \u003d base._superClass;\n        _superInterfaces \u003d base._superInterfaces;\n        _bindings \u003d base._bindings;\n    }",
    "begin_line": 56,
    "end_line": 61,
    "comment": "/** \n * Copy-constructor used when refining/upgrading type instances.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.toCanonical#64",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.toCanonical()",
    "snippet": "@Override\n    public String toCanonical()\n    {\n        String str \u003d _canonicalName;\n        if (str \u003d\u003d null) {\n            str \u003d buildCanonicalName();\n        }\n        return str;\n    }",
    "begin_line": 64,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.buildCanonicalName#73",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.buildCanonicalName()",
    "snippet": "protected String buildCanonicalName() {\n        return _class.getName();\n    }",
    "begin_line": 73,
    "end_line": 75,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.getGenericSignature#78",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.getGenericSignature(java.lang.StringBuilder)",
    "snippet": "@Override\n    public abstract StringBuilder getGenericSignature(StringBuilder sb);",
    "begin_line": 78,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.getErasedSignature#81",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.getErasedSignature(java.lang.StringBuilder)",
    "snippet": "@Override\n    public abstract StringBuilder getErasedSignature(StringBuilder sb);",
    "begin_line": 81,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.getBindings#84",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.getBindings()",
    "snippet": "@Override\n    public TypeBindings getBindings() {\n        return _bindings;\n    }",
    "begin_line": 84,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.containedTypeCount#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.containedTypeCount()",
    "snippet": "@Override\n    public int containedTypeCount() {\n        return _bindings.size();\n    }",
    "begin_line": 89,
    "end_line": 91,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.containedType#94",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.containedType(int)",
    "snippet": "@Override\n    public JavaType containedType(int index) {\n        return _bindings.getBoundType(index);\n    }",
    "begin_line": 94,
    "end_line": 96,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.containedTypeName#100",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.containedTypeName(int)",
    "snippet": "@Override\n    @Deprecated\n    public String containedTypeName(int index) {\n        return _bindings.getBoundName(index);\n    }",
    "begin_line": 100,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.getSuperClass#105",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.getSuperClass()",
    "snippet": "@Override\n    public JavaType getSuperClass() {\n        return _superClass;\n    }",
    "begin_line": 105,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.getInterfaces#110",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.getInterfaces()",
    "snippet": "@Override\n    public List\u003cJavaType\u003e getInterfaces() {\n        if (_superInterfaces \u003d\u003d null) {\n            return Collections.emptyList();\n        }\n        switch (_superInterfaces.length) {\n        case 0:\n            return Collections.emptyList();\n        case 1:\n            return Collections.singletonList(_superInterfaces[0]);\n        }\n        return Arrays.asList(_superInterfaces);\n    }",
    "begin_line": 110,
    "end_line": 121,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.findSuperType#124",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.findSuperType(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public final JavaType findSuperType(Class\u003c?\u003e rawTarget)\n    {\n        if (rawTarget \u003d\u003d _class) {\n            return this;\n        }\n        // Check super interfaces first:\n        if (rawTarget.isInterface() \u0026\u0026 (_superInterfaces !\u003d null)) {\n            for (int i \u003d 0, count \u003d _superInterfaces.length; i \u003c count; ++i) {\n                JavaType type \u003d _superInterfaces[i].findSuperType(rawTarget);\n                if (type !\u003d null) {\n                    return type;\n                }\n            }\n        }\n        // and if not found, super class and its supertypes\n        if (_superClass !\u003d null) {\n            JavaType type \u003d _superClass.findSuperType(rawTarget);\n            if (type !\u003d null) {\n                return type;\n            }\n        }\n        return null;\n    }",
    "begin_line": 124,
    "end_line": 146,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.findTypeParameters#149",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.findTypeParameters(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override\n    public JavaType[] findTypeParameters(Class\u003c?\u003e expType)\n    {\n        JavaType match \u003d findSuperType(expType);\n        if (match \u003d\u003d null) {\n            return NO_TYPES;\n        }\n        return match.getBindings().typeParameterArray();\n    }",
    "begin_line": 149,
    "end_line": 156,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.serializeWithType#165",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.serializeWithType(JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override\n    public void serializeWithType(JsonGenerator gen, SerializerProvider provider,\n            TypeSerializer typeSer)\n        throws IOException, JsonProcessingException\n    {\n        typeSer.writeTypePrefixForScalar(this, gen);\n        this.serialize(gen, provider);\n        typeSer.writeTypeSuffixForScalar(this, gen);\n    }",
    "begin_line": 165,
    "end_line": 172,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.serialize#175",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.serialize(JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override\n    public void serialize(JsonGenerator gen, SerializerProvider provider)\n            throws IOException, JsonProcessingException\n    {\n        gen.writeString(toCanonical());\n    }",
    "begin_line": 175,
    "end_line": 179,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase._classSignature#191",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase._classSignature(java.lang.Class\u003c?\u003e, java.lang.StringBuilder, boolean)",
    "snippet": "protected static StringBuilder _classSignature(Class\u003c?\u003e cls, StringBuilder sb,\n           boolean trailingSemicolon)\n    {\n        if (cls.isPrimitive()) {\n            if (cls \u003d\u003d Boolean.TYPE) {                \n                sb.append(\u0027Z\u0027);\n            } else if (cls \u003d\u003d Byte.TYPE) {\n                sb.append(\u0027B\u0027);\n            }\n            else if (cls \u003d\u003d Short.TYPE) {\n                sb.append(\u0027S\u0027);\n            }\n            else if (cls \u003d\u003d Character.TYPE) {\n                sb.append(\u0027C\u0027);\n            }\n            else if (cls \u003d\u003d Integer.TYPE) {\n                sb.append(\u0027I\u0027);\n            }\n            else if (cls \u003d\u003d Long.TYPE) {\n                sb.append(\u0027J\u0027);\n            }\n            else if (cls \u003d\u003d Float.TYPE) {\n                sb.append(\u0027F\u0027);\n            }\n            else if (cls \u003d\u003d Double.TYPE) {\n                sb.append(\u0027D\u0027);\n            }\n            else if (cls \u003d\u003d Void.TYPE) {\n                sb.append(\u0027V\u0027);\n            } else {\n                throw new IllegalStateException(\"Unrecognized primitive type: \"+cls.getName());\n            }\n        } else {\n            sb.append(\u0027L\u0027);\n            String name \u003d cls.getName();\n            for (int i \u003d 0, len \u003d name.length(); i \u003c len; ++i) {\n                char c \u003d name.charAt(i);\n                if (c \u003d\u003d \u0027.\u0027) c \u003d \u0027/\u0027;\n                sb.append(c);\n            }\n            if (trailingSemicolon) {\n                sb.append(\u0027;\u0027);\n            }\n        }\n        return sb;\n    }",
    "begin_line": 191,
    "end_line": 236,
    "comment": "/** \n * @param trailingSemicolon Whether to add trailing semicolon for non-primitive(reference) types or not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase._bogusSuperClass#247",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase._bogusSuperClass(java.lang.Class\u003c?\u003e)",
    "snippet": "protected static JavaType _bogusSuperClass(Class\u003c?\u003e cls) {\n        Class\u003c?\u003e parent \u003d cls.getSuperclass();\n        if (parent \u003d\u003d null) {\n            return null;\n        }\n        return TypeFactory.unknownType();\n    }",
    "begin_line": 247,
    "end_line": 253,
    "comment": "/** \n * Internal helper method used to figure out nominal super-class for deprecated factory methods / constructors, where we are not given properly resolved supertype hierarchy. Will basically give `JavaType` for `java.lang.Object` for classes other than `java.lafgn.Object`; null for others.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.TypeBindings#51",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.TypeBindings(java.lang.String[], com.fasterxml.jackson.databind.JavaType[], java.lang.String[])",
    "snippet": "private TypeBindings(String[] names, JavaType[] types, String[] uvars)\n    {\n        _names \u003d (names \u003d\u003d null) ? NO_STRINGS : names;\n        _types \u003d (types \u003d\u003d null) ? NO_TYPES : types;\n        if (_names.length !\u003d _types.length) {\n            throw new IllegalArgumentException(\"Mismatching names (\"+_names.length+\"), types (\"+_types.length+\")\");\n        }\n        int h \u003d 1;\n        for (int i \u003d 0, len \u003d _types.length; i \u003c len; ++i) {\n            h +\u003d _types[i].hashCode();\n        }\n        _unboundVariables \u003d uvars;\n        _hashCode \u003d h;\n    }",
    "begin_line": 51,
    "end_line": 64,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.emptyBindings#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings()",
    "snippet": "public static TypeBindings emptyBindings() {\n        return EMPTY;\n    }",
    "begin_line": 66,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.readResolve#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.readResolve()",
    "snippet": "protected Object readResolve() {\n        if ((_names \u003d\u003d null) || (_names.length \u003d\u003d 0)) {\n            return EMPTY;\n        }\n        return this;\n    }",
    "begin_line": 71,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.create#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.create(java.lang.Class\u003c?\u003e, java.util.List\u003ccom.fasterxml.jackson.databind.JavaType\u003e)",
    "snippet": "public static TypeBindings create(Class\u003c?\u003e erasedType, List\u003cJavaType\u003e typeList)\n    {\n        JavaType[] types \u003d (typeList \u003d\u003d null || typeList.isEmpty()) ?\n                NO_TYPES : typeList.toArray(new JavaType[typeList.size()]);\n        return create(erasedType, types);\n    }",
    "begin_line": 82,
    "end_line": 87,
    "comment": "/** \n * Factory method for constructing bindings for given class using specified type parameters.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.create#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.create(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "public static TypeBindings create(Class\u003c?\u003e erasedType, JavaType[] types)\n    {\n        if (types \u003d\u003d null) {\n            types \u003d NO_TYPES;\n        } else switch (types.length) {\n        case 1:\n            return create(erasedType, types[0]);\n        case 2:\n            return create(erasedType, types[0], types[1]);\n        }\n        TypeVariable\u003c?\u003e[] vars \u003d erasedType.getTypeParameters();\n        String[] names;\n        if (vars \u003d\u003d null || vars.length \u003d\u003d 0) {\n            names \u003d NO_STRINGS;\n        } else {\n            int len \u003d vars.length;\n            names \u003d new String[len];\n            for (int i \u003d 0; i \u003c len; ++i) {\n                names[i] \u003d vars[i].getName();\n            }\n        }\n        // Check here to give better error message\n        if (names.length !\u003d types.length) {\n            throw new IllegalArgumentException(\"Can not create TypeBindings for class \"+erasedType.getName()\n                   +\" with \"+types.length+\" type parameter\"\n                   +((types.length \u003d\u003d 1) ? \"\" : \"s\")+\": class expects \"+names.length);\n        }\n        return new TypeBindings(names, types, null);\n    }",
    "begin_line": 89,
    "end_line": 117,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.create#119",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.create(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static TypeBindings create(Class\u003c?\u003e erasedType, JavaType typeArg1)\n    {\n        // 30-Oct-2015, tatu: Minor optimization for relatively common cases\n        TypeVariable\u003c?\u003e[] vars \u003d TypeParamStash.paramsFor1(erasedType);\n        int varLen \u003d (vars \u003d\u003d null) ? 0 : vars.length;\n        if (varLen !\u003d 1) {\n            throw new IllegalArgumentException(\"Can not create TypeBindings for class \"+erasedType.getName()\n                    +\" with 1 type parameter: class expects \"+varLen);\n        }\n        return new TypeBindings(new String[] { vars[0].getName() },\n                new JavaType[] { typeArg1 }, null);\n    }",
    "begin_line": 119,
    "end_line": 130,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.create#132",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.create(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static TypeBindings create(Class\u003c?\u003e erasedType, JavaType typeArg1, JavaType typeArg2)\n    {\n        // 30-Oct-2015, tatu: Minor optimization for relatively common cases\n        TypeVariable\u003c?\u003e[] vars \u003d TypeParamStash.paramsFor2(erasedType);\n        int varLen \u003d (vars \u003d\u003d null) ? 0 : vars.length;\n        if (varLen !\u003d 2) {\n            throw new IllegalArgumentException(\"Can not create TypeBindings for class \"+erasedType.getName()\n                    +\" with 2 type parameters: class expects \"+varLen);\n        }\n        return new TypeBindings(new String[] { vars[0].getName(), vars[1].getName() },\n                new JavaType[] { typeArg1, typeArg2 }, null);\n    }",
    "begin_line": 132,
    "end_line": 143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.createIfNeeded#150",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.createIfNeeded(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static TypeBindings createIfNeeded(Class\u003c?\u003e erasedType, JavaType typeArg1)\n    {\n        TypeVariable\u003c?\u003e[] vars \u003d erasedType.getTypeParameters();\n        int varLen \u003d (vars \u003d\u003d null) ? 0 : vars.length;\n        if (varLen \u003d\u003d 0) {\n            return EMPTY;\n        }\n        if (varLen !\u003d 1) {\n            throw new IllegalArgumentException(\"Can not create TypeBindings for class \"+erasedType.getName()\n                    +\" with 1 type parameter: class expects \"+varLen);\n        }\n        return new TypeBindings(new String[] { vars[0].getName() },\n                new JavaType[] { typeArg1 }, null);\n    }",
    "begin_line": 150,
    "end_line": 163,
    "comment": "/** \n * Alternate factory method that may be called if it is possible that type does or does not require type parameters; this is mostly useful for collection- and map-like types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.createIfNeeded#170",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.createIfNeeded(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "public static TypeBindings createIfNeeded(Class\u003c?\u003e erasedType, JavaType[] types)\n    {\n        TypeVariable\u003c?\u003e[] vars \u003d erasedType.getTypeParameters();\n        if (vars \u003d\u003d null || vars.length \u003d\u003d 0) {\n            return EMPTY;\n        }\n        if (types \u003d\u003d null) {\n            types \u003d NO_TYPES;\n        }\n        int len \u003d vars.length;\n        String[] names \u003d new String[len];\n        for (int i \u003d 0; i \u003c len; ++i) {\n            names[i] \u003d vars[i].getName();\n        }\n        // Check here to give better error message\n        if (names.length !\u003d types.length) {\n            throw new IllegalArgumentException(\"Can not create TypeBindings for class \"+erasedType.getName()\n                   +\" with \"+types.length+\" type parameter\"\n                   +((types.length \u003d\u003d 1) ? \"\" : \"s\")+\": class expects \"+names.length);\n        }\n        return new TypeBindings(names, types, null);\n    }",
    "begin_line": 170,
    "end_line": 191,
    "comment": "/** \n * Alternate factory method that may be called if it is possible that type does or does not require type parameters; this is mostly useful for collection- and map-like types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.withUnboundVariable#198",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.withUnboundVariable(java.lang.String)",
    "snippet": "public TypeBindings withUnboundVariable(String name)\n    {\n        int len \u003d (_unboundVariables \u003d\u003d null) ? 0 : _unboundVariables.length;\n        String[] names \u003d  (len \u003d\u003d 0)\n                ? new String[1] : Arrays.copyOf(_unboundVariables, len+1);\n        names[len] \u003d name;\n        return new TypeBindings(_names, _types, names);\n    }",
    "begin_line": 198,
    "end_line": 205,
    "comment": "/** \n * Method for creating an instance that has same bindings as this object, plus an indicator for additional type variable that may be unbound within this context; this is needed to resolve recursive self-references.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.findBoundType#216",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.findBoundType(java.lang.String)",
    "snippet": "public JavaType findBoundType(String name)\n    {\n        for (int i \u003d 0, len \u003d _names.length; i \u003c len; ++i) {\n            if (name.equals(_names[i])) {\n                JavaType t \u003d _types[i];\n                if (t instanceof ResolvedRecursiveType) {\n                    ResolvedRecursiveType rrt \u003d (ResolvedRecursiveType) t;\n                    JavaType t2 \u003d rrt.getSelfReferencedType();\n                    if (t2 !\u003d null) {\n                        t \u003d t2;\n                    } else {\n                        /* 25-Feb-2016, tatu: Looks like a potential problem, but alas\n                         *   we have a test where this should NOT fail and things... seem\n                         *   to work. So be it.\n                         */\n/*\n                        throw new IllegalStateException(String.format\n(\"Unresolved ResolvedRecursiveType for parameter \u0027%s\u0027 (index #%d; erased type %s)\",\nname, i, t.getRawClass()));\n*/\n                    }\n                }\n                return t;\n            }\n        }\n        return null;\n    }",
    "begin_line": 216,
    "end_line": 242,
    "comment": "/** \n * Find type bound to specified name, if there is one; returns bound type if so, null if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.isEmpty#244",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.isEmpty()",
    "snippet": "public boolean isEmpty() {\n        return (_types.length \u003d\u003d 0);\n    }",
    "begin_line": 244,
    "end_line": 246,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.size#251",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.size()",
    "snippet": "public int size() { \n        return _types.length;\n    }",
    "begin_line": 251,
    "end_line": 253,
    "comment": "/** \n * Returns number of bindings contained\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.getBoundName#255",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.getBoundName(int)",
    "snippet": "public String getBoundName(int index)\n    {\n        if (index \u003c 0 || index \u003e\u003d _names.length) {\n            return null;\n        }\n        return _names[index];\n    }",
    "begin_line": 255,
    "end_line": 261,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.getBoundType#263",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.getBoundType(int)",
    "snippet": "public JavaType getBoundType(int index)\n    {\n        if (index \u003c 0 || index \u003e\u003d _types.length) {\n            return null;\n        }\n        return _types[index];\n    }",
    "begin_line": 263,
    "end_line": 269,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.getTypeParameters#274",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.getTypeParameters()",
    "snippet": "public List\u003cJavaType\u003e getTypeParameters()\n    {\n        if (_types.length \u003d\u003d 0) {\n            return Collections.emptyList();\n        }\n        return Arrays.asList(_types);\n    }",
    "begin_line": 274,
    "end_line": 280,
    "comment": "/** \n * Accessor for getting bound types in declaration order\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.hasUnbound#285",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.hasUnbound(java.lang.String)",
    "snippet": "public boolean hasUnbound(String name) {\n        if (_unboundVariables !\u003d null) {\n            for (int i \u003d _unboundVariables.length; --i \u003e\u003d 0; ) {\n                if (name.equals(_unboundVariables[i])) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }",
    "begin_line": 285,
    "end_line": 294,
    "comment": "/** \n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.asKey#302",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.asKey(java.lang.Class\u003c?\u003e)",
    "snippet": "public Object asKey(Class\u003c?\u003e rawBase) {\n        // safe to pass _types array without copy since it is not exposed via\n        // any access, nor modified by this class\n        return new AsKey(rawBase, _types, _hashCode);\n    }",
    "begin_line": 302,
    "end_line": 306,
    "comment": "/** \n * Factory method that will create an object that can be used as a key for caching purposes by  {@link TypeFactory}\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.toString#314",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.toString()",
    "snippet": "@Override public String toString()\n    {\n        if (_types.length \u003d\u003d 0) {\n            return \"\u003c\u003e\";\n        }\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(\u0027\u003c\u0027);\n        for (int i \u003d 0, len \u003d _types.length; i \u003c len; ++i) {\n            if (i \u003e 0) {\n                sb.append(\u0027,\u0027);\n            }\n//            sb \u003d _types[i].appendBriefDescription(sb);\n            String sig \u003d _types[i].getGenericSignature();\n            sb.append(sig);\n        }\n        sb.append(\u0027\u003e\u0027);\n        return sb.toString();\n    }",
    "begin_line": 314,
    "end_line": 331,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.hashCode#333",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.hashCode()",
    "snippet": "@Override public int hashCode() { return _hashCode; }",
    "begin_line": 333,
    "end_line": 333,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.equals#335",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object o)\n    {\n        if (o \u003d\u003d this) return true;\n        if (o \u003d\u003d null || o.getClass() !\u003d getClass()) return false;\n        TypeBindings other \u003d (TypeBindings) o;\n        int len \u003d _types.length;\n        if (len !\u003d other.size()) {\n            return false;\n        }\n        JavaType[] otherTypes \u003d other._types;\n        for (int i \u003d 0; i \u003c len; ++i) {\n            if (!otherTypes[i].equals(_types[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 335,
    "end_line": 351,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.typeParameterArray#359",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.typeParameterArray()",
    "snippet": "protected JavaType[] typeParameterArray() {\n        return _types;\n    }",
    "begin_line": 359,
    "end_line": 361,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParamStash.paramsFor1#391",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.paramsFor1(java.lang.Class\u003c?\u003e)",
    "snippet": "public static TypeVariable\u003c?\u003e[] paramsFor1(Class\u003c?\u003e erasedType)\n        {\n            if (erasedType \u003d\u003d Collection.class) {\n                return VARS_COLLECTION;\n            }\n            if (erasedType \u003d\u003d List.class) {\n                return VARS_LIST;\n            }\n            if (erasedType \u003d\u003d ArrayList.class) {\n                return VARS_ARRAY_LIST;\n            }\n            if (erasedType \u003d\u003d AbstractList.class) {\n                return VARS_ABSTRACT_LIST;\n            }\n            if (erasedType \u003d\u003d Iterable.class) {\n                return VARS_ITERABLE;\n            }\n            return erasedType.getTypeParameters();\n        }",
    "begin_line": 391,
    "end_line": 409,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParamStash.paramsFor2#411",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.paramsFor2(java.lang.Class\u003c?\u003e)",
    "snippet": "public static TypeVariable\u003c?\u003e[] paramsFor2(Class\u003c?\u003e erasedType)\n        {\n            if (erasedType \u003d\u003d Map.class) {\n                return VARS_MAP;\n            }\n            if (erasedType \u003d\u003d HashMap.class) {\n                return VARS_HASH_MAP;\n            }\n            if (erasedType \u003d\u003d LinkedHashMap.class) {\n                return VARS_LINKED_HASH_MAP;\n            }\n            return erasedType.getTypeParameters();\n        }",
    "begin_line": 411,
    "end_line": 423,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsKey.AsKey#436",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.AsKey(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType[], int)",
    "snippet": "public AsKey(Class\u003c?\u003e raw, JavaType[] params, int hash) {\n            _raw \u003d raw ;\n            _params \u003d params;\n            _hash \u003d hash;\n        }",
    "begin_line": 436,
    "end_line": 440,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsKey.hashCode#443",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.hashCode()",
    "snippet": "@Override\n        public int hashCode() { return _hash; }",
    "begin_line": 443,
    "end_line": 443,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsKey.equals#446",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.equals(java.lang.Object)",
    "snippet": "@Override\n        public boolean equals(Object o) {\n            if (o \u003d\u003d this) return true;\n            if (o \u003d\u003d null) return false;\n            if (o.getClass() !\u003d getClass()) return false;\n            AsKey other \u003d (AsKey) o;\n\n            if ((_hash \u003d\u003d other._hash) \u0026\u0026 (_raw \u003d\u003d other._raw)) {\n                final JavaType[] otherParams \u003d other._params;\n                final int len \u003d _params.length;\n\n                if (len \u003d\u003d otherParams.length) {\n                    for (int i \u003d 0; i \u003c len; ++i) {\n                        if (!_params[i].equals(otherParams[i])) {\n                            return false;\n                        }\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }",
    "begin_line": 446,
    "end_line": 466,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsKey.toString#469",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.toString()",
    "snippet": "@Override\n        public String toString() {\n            return _raw.getName()+\"\u003c\u003e\";\n        }",
    "begin_line": 469,
    "end_line": 471,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.TypeFactory#144",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory()",
    "snippet": "private TypeFactory() {\n        this(null);\n    }",
    "begin_line": 144,
    "end_line": 146,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.TypeFactory#151",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory(com.fasterxml.jackson.databind.util.LRUMap\u003cjava.lang.Object,com.fasterxml.jackson.databind.JavaType\u003e)",
    "snippet": "protected TypeFactory(LRUMap\u003cObject,JavaType\u003e typeCache) {\n        if (typeCache \u003d\u003d null) {\n            typeCache \u003d new LRUMap\u003cObject,JavaType\u003e(16, 200);\n        }\n        _typeCache \u003d typeCache;\n        _parser \u003d new TypeParser(this);\n        _modifiers \u003d null;\n        _classLoader \u003d null;\n    }",
    "begin_line": 151,
    "end_line": 159,
    "comment": "/** \n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.TypeFactory#161",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory(com.fasterxml.jackson.databind.util.LRUMap\u003cjava.lang.Object,com.fasterxml.jackson.databind.JavaType\u003e, com.fasterxml.jackson.databind.type.TypeParser, com.fasterxml.jackson.databind.type.TypeModifier[], java.lang.ClassLoader)",
    "snippet": "protected TypeFactory(LRUMap\u003cObject,JavaType\u003e typeCache, TypeParser p,\n            TypeModifier[] mods, ClassLoader classLoader)\n    {\n        if (typeCache \u003d\u003d null) {\n            typeCache \u003d new LRUMap\u003cObject,JavaType\u003e(16, 200);\n        }\n        _typeCache \u003d typeCache;\n        // As per [databind#894] must ensure we have back-linkage from TypeFactory:\n        _parser \u003d p.withFactory(this);\n        _modifiers \u003d mods;\n        _classLoader \u003d classLoader;\n    }",
    "begin_line": 161,
    "end_line": 172,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.withModifier#174",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.withModifier(com.fasterxml.jackson.databind.type.TypeModifier)",
    "snippet": "public TypeFactory withModifier(TypeModifier mod) \n    {\n        LRUMap\u003cObject,JavaType\u003e typeCache \u003d _typeCache;\n        TypeModifier[] mods;\n        if (mod \u003d\u003d null) { // mostly for unit tests\n            mods \u003d null;\n            // 30-Jun-2016, tatu: for some reason expected semantics are to clear cache\n            //    in this case; can\u0027t recall why, but keeping the same\n            typeCache \u003d null;\n        } else if (_modifiers \u003d\u003d null) {\n            mods \u003d new TypeModifier[] { mod };\n        } else {\n            mods \u003d ArrayBuilders.insertInListNoDup(_modifiers, mod);\n        }\n        return new TypeFactory(typeCache, _parser, mods, _classLoader);\n    }",
    "begin_line": 174,
    "end_line": 189,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.withClassLoader#191",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.withClassLoader(java.lang.ClassLoader)",
    "snippet": "public TypeFactory withClassLoader(ClassLoader classLoader) {\n        return new TypeFactory(_typeCache, _parser, _modifiers, classLoader);\n    }",
    "begin_line": 191,
    "end_line": 193,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.withCache#202",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.withCache(com.fasterxml.jackson.databind.util.LRUMap\u003cjava.lang.Object,com.fasterxml.jackson.databind.JavaType\u003e)",
    "snippet": "public TypeFactory withCache(LRUMap\u003cObject,JavaType\u003e cache)  {\n        return new TypeFactory(cache, _parser, _modifiers, _classLoader);\n    }",
    "begin_line": 202,
    "end_line": 204,
    "comment": "/** \n * Mutant factory method that will construct new  {@link TypeFactory} withidentical settings except for different cache; most likely one with bigger maximum size.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.defaultInstance#211",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance()",
    "snippet": "public static TypeFactory defaultInstance() { return instance; }",
    "begin_line": 211,
    "end_line": 211,
    "comment": "/** \n * Method used to access the globally shared instance, which has no custom configuration. Used by \u003ccode\u003eObjectMapper\u003c/code\u003e to get the default factory when constructed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.clearCache#223",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.clearCache()",
    "snippet": "public void clearCache() {\n        _typeCache.clear();\n    }",
    "begin_line": 223,
    "end_line": 225,
    "comment": "/** \n * Method that will clear up any cached type definitions that may be cached by this  {@link TypeFactory} instance.This method should not be commonly used, that is, only use it if you know there is a problem with retention of type definitions; the most likely (and currently only known) problem is retention of  {@link Class} instances via {@link JavaType} reference.\n * @since 2.4.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.getClassLoader#227",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.getClassLoader()",
    "snippet": "public ClassLoader getClassLoader() {\n        return _classLoader;\n    }",
    "begin_line": 227,
    "end_line": 229,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.unknownType#242",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknownType()",
    "snippet": "public static JavaType unknownType() {\n        return defaultInstance()._unknownType();\n    }",
    "begin_line": 242,
    "end_line": 244,
    "comment": "/** \n * Method for constructing a marker type that indicates missing generic type information, which is handled same as simple type for \u003ccode\u003ejava.lang.Object\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.rawClass#252",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.rawClass(java.lang.reflect.Type)",
    "snippet": "public static Class\u003c?\u003e rawClass(Type t) {\n        if (t instanceof Class\u003c?\u003e) {\n            return (Class\u003c?\u003e) t;\n        }\n        // Should be able to optimize bit more in future...\n        return defaultInstance().constructType(t).getRawClass();\n    }",
    "begin_line": 252,
    "end_line": 258,
    "comment": "/** \n * Static helper method that can be called to figure out type-erased call for given JDK type. It can be called statically since type resolution process can never change actual type-erased class; thereby static default instance is used for determination.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.findClass#272",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.findClass(java.lang.String)",
    "snippet": "public Class\u003c?\u003e findClass(String className) throws ClassNotFoundException\n    {\n        if (className.indexOf(\u0027.\u0027) \u003c 0) {\n            Class\u003c?\u003e prim \u003d _findPrimitive(className);\n            if (prim !\u003d null) {\n                return prim;\n            }\n        }\n        // Two-phase lookup: first using context ClassLoader; then default\n        Throwable prob \u003d null;\n        ClassLoader loader \u003d this.getClassLoader();\n        if (loader \u003d\u003d null) {\n            loader \u003d \tThread.currentThread().getContextClassLoader();\n        }\n        if (loader !\u003d null) {\n            try {\n                return classForName(className, true, loader);\n            } catch (Exception e) {\n                prob \u003d ClassUtil.getRootCause(e);\n            }\n        }\n        try {\n            return classForName(className);\n        } catch (Exception e) {\n            if (prob \u003d\u003d null) {\n                prob \u003d ClassUtil.getRootCause(e);\n            }\n        }\n        if (prob instanceof RuntimeException) {\n            throw (RuntimeException) prob;\n        }\n        throw new ClassNotFoundException(prob.getMessage(), prob);\n    }",
    "begin_line": 272,
    "end_line": 304,
    "comment": "/** \n * Low-level lookup method moved from  {@link com.fasterxml.jackson.databind.util.ClassUtil}, to allow for overriding of lookup functionality in environments like OSGi.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.classForName#306",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.classForName(java.lang.String, boolean, java.lang.ClassLoader)",
    "snippet": "protected Class\u003c?\u003e classForName(String name, boolean initialize,\n                                   ClassLoader loader) throws ClassNotFoundException {\n    \treturn Class.forName(name, true, loader);\n    }",
    "begin_line": 306,
    "end_line": 309,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.classForName#311",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.classForName(java.lang.String)",
    "snippet": "protected Class\u003c?\u003e classForName(String name) throws ClassNotFoundException {\n        return Class.forName(name);\n    }",
    "begin_line": 311,
    "end_line": 313,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._findPrimitive#315",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._findPrimitive(java.lang.String)",
    "snippet": "protected Class\u003c?\u003e _findPrimitive(String className)\n    {\n        if (\"int\".equals(className)) return Integer.TYPE;\n        if (\"long\".equals(className)) return Long.TYPE;\n        if (\"float\".equals(className)) return Float.TYPE;\n        if (\"double\".equals(className)) return Double.TYPE;\n        if (\"boolean\".equals(className)) return Boolean.TYPE;\n        if (\"byte\".equals(className)) return Byte.TYPE;\n        if (\"char\".equals(className)) return Character.TYPE;\n        if (\"short\".equals(className)) return Short.TYPE;\n        if (\"void\".equals(className)) return Void.TYPE;\n        return null;\n    }",
    "begin_line": 315,
    "end_line": 327,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructSpecializedType#342",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e)",
    "snippet": "public JavaType constructSpecializedType(JavaType baseType, Class\u003c?\u003e subclass)\n    {\n        // simple optimization to avoid costly introspection if type-erased type does NOT differ\n        final Class\u003c?\u003e rawBase \u003d baseType.getRawClass();\n        if (rawBase \u003d\u003d subclass) {\n            return baseType;\n        }\n\n        JavaType newType;\n\n        // also: if we start from untyped, not much to save\n        do { // bogus loop to be able to break\n            if (rawBase \u003d\u003d Object.class) {\n                newType \u003d _fromClass(null, subclass, TypeBindings.emptyBindings());\n                break;\n            }\n            if (!rawBase.isAssignableFrom(subclass)) {\n                throw new IllegalArgumentException(String.format(\n                        \"Class %s not subtype of %s\", subclass.getName(), baseType));\n            }\n            // A few special cases where we can simplify handling:\n\n            // (1) Original target type has no generics -- just resolve subtype\n            if (baseType.getBindings().isEmpty()) {\n                newType \u003d _fromClass(null, subclass, TypeBindings.emptyBindings());     \n                break;\n            }\n            // (2) A small set of \"well-known\" List/Map subtypes where can take a short-cut\n            if (baseType.isContainerType()) {\n                if (baseType.isMapLikeType()) {\n                    if ((subclass \u003d\u003d HashMap.class)\n                            || (subclass \u003d\u003d LinkedHashMap.class)\n                            || (subclass \u003d\u003d EnumMap.class)\n                            || (subclass \u003d\u003d TreeMap.class)) {\n                        newType \u003d _fromClass(null, subclass,\n                                TypeBindings.create(subclass, baseType.getKeyType(), baseType.getContentType()));\n                        break;\n                    }\n                } else if (baseType.isCollectionLikeType()) {\n                    if ((subclass \u003d\u003d ArrayList.class)\n                            || (subclass \u003d\u003d LinkedList.class)\n                            || (subclass \u003d\u003d HashSet.class)\n                            || (subclass \u003d\u003d TreeSet.class)) {\n                        newType \u003d _fromClass(null, subclass,\n                                TypeBindings.create(subclass, baseType.getContentType()));\n                        break;\n                    }\n                    // 29-Oct-2015, tatu: One further shortcut: there are variants of `EnumSet`,\n                    //    but they are impl details and we basically do not care...\n                    if (rawBase \u003d\u003d EnumSet.class) {\n                        return baseType;\n                    }\n                }\n            }\n            // (3) Sub-class does not take type parameters -- just resolve subtype\n            int typeParamCount \u003d subclass.getTypeParameters().length;\n            if (typeParamCount \u003d\u003d 0) {\n                newType \u003d _fromClass(null, subclass, TypeBindings.emptyBindings());     \n                break;\n            }\n            // (4) If all else fails, do the full traversal using placeholders\n            TypeBindings tb \u003d _bindingsForSubtype(baseType, typeParamCount, subclass);\n            newType \u003d _fromClass(null, subclass, tb);\n\n        } while (false);\n\n        // 25-Sep-2016, tatu: As per [databind#1384] also need to ensure handlers get\n        //   copied as well\n        newType \u003d newType.withHandlersFrom(baseType);\n        return newType;\n    }",
    "begin_line": 342,
    "end_line": 412,
    "comment": "/** \n * Factory method for creating a subtype of given base type, as defined by specified subclass; but retaining generic type information if any. Can be used, for example, to get equivalent of \"HashMap\u0026lt;String,Integer\u0026gt;\" from \"Map\u0026lt;String,Integer\u0026gt;\" by giving \u003ccode\u003eHashMap.class\u003c/code\u003e as subclass.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._bindingsForSubtype#414",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._bindingsForSubtype(com.fasterxml.jackson.databind.JavaType, int, java.lang.Class\u003c?\u003e)",
    "snippet": "private TypeBindings _bindingsForSubtype(JavaType baseType, int typeParamCount, Class\u003c?\u003e subclass)\n    {\n        PlaceholderForType[] placeholders \u003d new PlaceholderForType[typeParamCount];\n        for (int i \u003d 0; i \u003c typeParamCount; ++i) {\n            placeholders[i] \u003d new PlaceholderForType(i);\n        }\n        TypeBindings b \u003d TypeBindings.create(subclass, placeholders);\n        // First: pseudo-resolve to get placeholders in place:\n        JavaType tmpSub \u003d _fromClass(null, subclass, b);\n        // Then find super-type\n        JavaType baseWithPlaceholders \u003d tmpSub.findSuperType(baseType.getRawClass());\n        if (baseWithPlaceholders \u003d\u003d null) { // should be found but...\n            throw new IllegalArgumentException(String.format(\n                    \"Internal error: unable to locate supertype (%s) from resolved subtype %s\", baseType.getRawClass().getName(),\n                    subclass.getName()));\n        }\n        // and traverse type hierarchies to both verify and to resolve placeholders\n        String error \u003d _resolveTypePlaceholders(baseType, baseWithPlaceholders);\n        if (error !\u003d null) {\n            throw new IllegalArgumentException(\"Failed to specialize base type \"+baseType.toCanonical()+\" as \"\n                    +subclass.getName()+\", problem: \"+error);\n        }\n\n        final JavaType[] typeParams \u003d new JavaType[typeParamCount];\n        for (int i \u003d 0; i \u003c typeParamCount; ++i) {\n            JavaType t \u003d placeholders[i].actualType();\n            // 18-Oct-2017, tatu: Looks like sometimes we have incomplete bindings (even if not\n            //     common, it is possible if subtype is type-erased class with added type\n            //     variable -- see test(s) with \"bogus\" type(s)).\n            if (t \u003d\u003d null) {\n                t \u003d unknownType();\n            }\n            typeParams[i] \u003d t;\n        }\n        return TypeBindings.create(subclass, typeParams);\n    }",
    "begin_line": 414,
    "end_line": 449,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._resolveTypePlaceholders#451",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._resolveTypePlaceholders(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "private String _resolveTypePlaceholders(JavaType sourceType, JavaType actualType)\n        throws IllegalArgumentException\n    {\n        List\u003cJavaType\u003e expectedTypes \u003d sourceType.getBindings().getTypeParameters();\n        List\u003cJavaType\u003e actualTypes \u003d actualType.getBindings().getTypeParameters();\n        for (int i \u003d 0, len \u003d expectedTypes.size(); i \u003c len; ++i) {\n            JavaType exp \u003d expectedTypes.get(i);\n            JavaType act \u003d actualTypes.get(i);\n            if (!_verifyAndResolvePlaceholders(exp, act)) {\n                return String.format(\"Type parameter #%d/%d differs; can not specialize %s with %s\",\n                        (i+1), len, exp.toCanonical(), act.toCanonical());\n            }\n        }\n        return null;\n    }",
    "begin_line": 451,
    "end_line": 465,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._verifyAndResolvePlaceholders#467",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._verifyAndResolvePlaceholders(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "private boolean _verifyAndResolvePlaceholders(JavaType exp, JavaType act)\n    {\n        // See if we have an actual type placeholder to resolve; if yes, replace\n        if (act instanceof PlaceholderForType) {\n            ((PlaceholderForType) act).actualType(exp);\n            return true;\n        }\n        // if not, try to verify compatibility. But note that we can not\n        // use simple equality as we need to resolve recursively\n        if (exp.getRawClass() !\u003d act.getRawClass()) {\n            return false;\n        }\n        // But we can check type parameters \"blindly\"\n        List\u003cJavaType\u003e expectedTypes \u003d exp.getBindings().getTypeParameters();\n        List\u003cJavaType\u003e actualTypes \u003d act.getBindings().getTypeParameters();\n        for (int i \u003d 0, len \u003d expectedTypes.size(); i \u003c len; ++i) {\n            JavaType exp2 \u003d expectedTypes.get(i);\n            JavaType act2 \u003d actualTypes.get(i);\n            if (!_verifyAndResolvePlaceholders(exp2, act2)) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 467,
    "end_line": 490,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructGeneralizedType#502",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructGeneralizedType(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e)",
    "snippet": "public JavaType constructGeneralizedType(JavaType baseType, Class\u003c?\u003e superClass)\n    {\n        // simple optimization to avoid costly introspection if type-erased type does NOT differ\n        final Class\u003c?\u003e rawBase \u003d baseType.getRawClass();\n        if (rawBase \u003d\u003d superClass) {\n            return baseType;\n        }\n        JavaType superType \u003d baseType.findSuperType(superClass);\n        if (superType \u003d\u003d null) {\n            // Most likely, caller did not verify sub/super-type relationship\n            if (!superClass.isAssignableFrom(rawBase)) {\n                throw new IllegalArgumentException(String.format(\n                        \"Class %s not a super-type of %s\", superClass.getName(), baseType));\n            }\n            // 01-Nov-2015, tatu: Should never happen, but ch\n            throw new IllegalArgumentException(String.format(\n                    \"Internal error: class %s not included as super-type for %s\",\n                    superClass.getName(), baseType));\n        }\n        return superType;\n    }",
    "begin_line": 502,
    "end_line": 522,
    "comment": "/** \n * Method similar to  {@link #constructSpecializedType}, but that creates a less-specific type of given type. Usually this is as simple as simply finding super-type with type erasure of \u003ccode\u003esuperClass\u003c/code\u003e, but there may be need for some additional work-arounds.\n * @param superClass\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructFromCanonical#534",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructFromCanonical(java.lang.String)",
    "snippet": "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException\n    {\n        return _parser.parse(canonical);\n    }",
    "begin_line": 534,
    "end_line": 537,
    "comment": "/** \n * Factory method for constructing a  {@link JavaType} out of its canonicalrepresentation (see  {@link JavaType#toCanonical()}).\n * @param canonical Canonical string representation of a type\n * @throws IllegalArgumentException If canonical representation is malformed,or class that type represents (including its generic parameters) is not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.findTypeParameters#548",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e)",
    "snippet": "public JavaType[] findTypeParameters(JavaType type, Class\u003c?\u003e expType)\n    {\n        JavaType match \u003d type.findSuperType(expType);\n        if (match \u003d\u003d null) {\n            return NO_TYPES;\n        }\n        return match.getBindings().typeParameterArray();\n    }",
    "begin_line": 548,
    "end_line": 555,
    "comment": "/** \n * Method that is to figure out actual type parameters that given class binds to generic types defined by given (generic) interface or class. This could mean, for example, trying to figure out key and value types for Map implementations.\n * @param type Sub-type (leaf type) that implements \u003ccode\u003eexpType\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.findTypeParameters#561",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "@Deprecated findTypeParameters(Class\u003c?\u003e clz, Class\u003c?\u003e expType, TypeBindings bindings) {\n        return findTypeParameters(constructType(clz, bindings), expType);\n    }",
    "begin_line": 561,
    "end_line": 563,
    "comment": "/** \n * @deprecated Since 2.7 resolve raw type first, then find type parameters\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.findTypeParameters#569",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated findTypeParameters(Class\u003c?\u003e clz, Class\u003c?\u003e expType) {\n        return findTypeParameters(constructType(clz), expType);\n    }",
    "begin_line": 569,
    "end_line": 571,
    "comment": "/** \n * @deprecated Since 2.7 resolve raw type first, then find type parameters\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.moreSpecificType#583",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.moreSpecificType(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JavaType moreSpecificType(JavaType type1, JavaType type2)\n    {\n        if (type1 \u003d\u003d null) {\n            return type2;\n        }\n        if (type2 \u003d\u003d null) {\n            return type1;\n        }\n        Class\u003c?\u003e raw1 \u003d type1.getRawClass();\n        Class\u003c?\u003e raw2 \u003d type2.getRawClass();\n        if (raw1 \u003d\u003d raw2) {\n            return type1;\n        }\n        // TODO: maybe try sub-classing, to retain generic types?\n        if (raw1.isAssignableFrom(raw2)) {\n            return type2;\n        }\n        return type1;\n    }",
    "begin_line": 583,
    "end_line": 601,
    "comment": "/** \n * Method that can be called to figure out more specific of two types (if they are related; that is, one implements or extends the other); or if not related, return the primary type.\n * @param type1 Primary type to consider\n * @param type2 Secondary type to consider\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructType#609",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type)",
    "snippet": "public JavaType constructType(Type type) {\n        return _fromAny(null, type, EMPTY_BINDINGS);\n    }",
    "begin_line": 609,
    "end_line": 611,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructType#613",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "public JavaType constructType(Type type, TypeBindings bindings) {\n        return _fromAny(null, type, bindings);\n    }",
    "begin_line": 613,
    "end_line": 615,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructType#617",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructType(TypeReference\u003c?\u003e)",
    "snippet": "public JavaType constructType(TypeReference\u003c?\u003e typeRef)\n    {\n        // 19-Oct-2015, tatu: Simpler variant like so should work\n        return _fromAny(null, typeRef.getType(), EMPTY_BINDINGS);\n\n        // but if not, due to funky sub-classing, type variables, what follows\n        // is a more complete processing a la Java ClassMate.\n\n        /*\n        final Class\u003c?\u003e refdRawType \u003d typeRef.getClass();\n        JavaType type \u003d _fromClass(null, refdRawType, EMPTY_BINDINGS);\n        JavaType genType \u003d type.findSuperType(TypeReference.class);\n        if (genType \u003d\u003d null) { // sanity check; shouldn\u0027t occur\n            throw new IllegalArgumentException(\"Unparameterized GenericType instance (\"+refdRawType.getName()+\")\");\n        }\n        TypeBindings b \u003d genType.getBindings();\n        JavaType[] params \u003d b.typeParameterArray();\n        if (params.length \u003d\u003d 0) {\n            throw new IllegalArgumentException(\"Unparameterized GenericType instance (\"+refdRawType.getName()+\")\");\n        }\n        return params[0];\n        */\n    }",
    "begin_line": 617,
    "end_line": 639,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructType#645",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type, java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated\n    public JavaType constructType(Type type, Class\u003c?\u003e contextClass) {\n        JavaType contextType \u003d (contextClass \u003d\u003d null) ? null : constructType(contextClass);\n        return constructType(type, contextType);\n    }",
    "begin_line": 645,
    "end_line": 648,
    "comment": "/** \n * @deprecated Since 2.7 (accidentally removed in 2.7.0; added back in 2.7.1)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructType#654",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated\n    public JavaType constructType(Type type, JavaType contextType) {\n        TypeBindings bindings;\n        if (contextType \u003d\u003d null) {\n            bindings \u003d TypeBindings.emptyBindings();\n        } else {\n            bindings \u003d contextType.getBindings();\n            // 16-Nov-2016, tatu: Unfortunately as per [databind#1456] this can\u0027t\n            //   be made to work for some cases used to work (even if accidentally);\n            //   however, we can try a simple heuristic to increase chances of\n            //   compatibility from 2.6 code\n            if (type.getClass() !\u003d Class.class) {\n                // Ok: so, ideally we would test super-interfaces if necessary;\n                // but let\u0027s assume most if not all cases are for classes.\n                while (bindings.isEmpty()) {\n                    contextType \u003d contextType.getSuperClass();\n                    if (contextType \u003d\u003d null) {\n                        break;\n                    }\n                    bindings \u003d contextType.getBindings();\n                }\n            }\n        }\n        return _fromAny(null, type, bindings);\n    }",
    "begin_line": 654,
    "end_line": 677,
    "comment": "/** \n * @deprecated Since 2.7 (accidentally removed in 2.7.0; added back in 2.7.1)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructArrayType#691",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructArrayType(java.lang.Class\u003c?\u003e)",
    "snippet": "public ArrayType constructArrayType(Class\u003c?\u003e elementType) {\n        return ArrayType.construct(_fromAny(null, elementType, null), null);\n    }",
    "begin_line": 691,
    "end_line": 693,
    "comment": "/** \n * Method for constructing an  {@link ArrayType}. \u003cp\u003e NOTE: type modifiers are NOT called on array type itself; but are called for element type (and other contained types)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructArrayType#701",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructArrayType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public ArrayType constructArrayType(JavaType elementType) {\n        return ArrayType.construct(elementType, null);\n    }",
    "begin_line": 701,
    "end_line": 703,
    "comment": "/** \n * Method for constructing an  {@link ArrayType}. \u003cp\u003e NOTE: type modifiers are NOT called on array type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructCollectionType#711",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionType(java.lang.Class\u003c? extends java.util.Collection\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public CollectionType constructCollectionType(Class\u003c? extends Collection\u003e collectionClass,\n            Class\u003c?\u003e elementClass) {\n        return constructCollectionType(collectionClass,\n                _fromClass(null, elementClass, EMPTY_BINDINGS));\n    }",
    "begin_line": 711,
    "end_line": 715,
    "comment": "/** \n * Method for constructing a  {@link CollectionType}. \u003cp\u003e NOTE: type modifiers are NOT called on Collection type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructCollectionType#723",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionType(java.lang.Class\u003c? extends java.util.Collection\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public CollectionType constructCollectionType(Class\u003c? extends Collection\u003e collectionClass,\n            JavaType elementType) {\n        // 19-Oct-2015, tatu: Allow case of no-type-variables, since it seems likely to be\n        //    a valid use case here\n        return (CollectionType) _fromClass(null, collectionClass,\n                TypeBindings.create(collectionClass, elementType));\n    }",
    "begin_line": 723,
    "end_line": 729,
    "comment": "/** \n * Method for constructing a  {@link CollectionType}. \u003cp\u003e NOTE: type modifiers are NOT called on Collection type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructCollectionLikeType#737",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionLikeType(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public CollectionLikeType constructCollectionLikeType(Class\u003c?\u003e collectionClass, Class\u003c?\u003e elementClass) {\n        return constructCollectionLikeType(collectionClass,\n                _fromClass(null, elementClass, EMPTY_BINDINGS));\n    }",
    "begin_line": 737,
    "end_line": 740,
    "comment": "/** \n * Method for constructing a  {@link CollectionLikeType}. \u003cp\u003e NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructCollectionLikeType#748",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionLikeType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public CollectionLikeType constructCollectionLikeType(Class\u003c?\u003e collectionClass, JavaType elementType) {\n        JavaType type \u003d _fromClass(null, collectionClass,\n                TypeBindings.createIfNeeded(collectionClass, elementType));\n        if (type instanceof CollectionLikeType) {\n            return (CollectionLikeType) type;\n        }\n        return CollectionLikeType.upgradeFrom(type, elementType);\n    }",
    "begin_line": 748,
    "end_line": 755,
    "comment": "/** \n * Method for constructing a  {@link CollectionLikeType}. \u003cp\u003e NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructMapType#763",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructMapType(java.lang.Class\u003c? extends java.util.Map\u003e, java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public MapType constructMapType(Class\u003c? extends Map\u003e mapClass,\n            Class\u003c?\u003e keyClass, Class\u003c?\u003e valueClass) {\n        JavaType kt, vt;\n        if (mapClass \u003d\u003d Properties.class) {\n            kt \u003d vt \u003d CORE_TYPE_STRING;\n        } else {\n            kt \u003d _fromClass(null, keyClass, EMPTY_BINDINGS);\n            vt \u003d _fromClass(null, valueClass, EMPTY_BINDINGS);\n        }\n        return constructMapType(mapClass, kt, vt);\n    }",
    "begin_line": 763,
    "end_line": 773,
    "comment": "/** \n * Method for constructing a  {@link MapType} instance\u003cp\u003e NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructMapType#781",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructMapType(java.lang.Class\u003c? extends java.util.Map\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public MapType constructMapType(Class\u003c? extends Map\u003e mapClass, JavaType keyType, JavaType valueType) {\n        return (MapType) _fromClass(null, mapClass,\n                TypeBindings.create(mapClass, keyType, valueType));\n    }",
    "begin_line": 781,
    "end_line": 784,
    "comment": "/** \n * Method for constructing a  {@link MapType} instance\u003cp\u003e NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructMapLikeType#792",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructMapLikeType(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public MapLikeType constructMapLikeType(Class\u003c?\u003e mapClass, Class\u003c?\u003e keyClass, Class\u003c?\u003e valueClass) {\n        return constructMapLikeType(mapClass,\n                _fromClass(null, keyClass, EMPTY_BINDINGS),\n                _fromClass(null, valueClass, EMPTY_BINDINGS));\n    }",
    "begin_line": 792,
    "end_line": 796,
    "comment": "/** \n * Method for constructing a  {@link MapLikeType} instance\u003cp\u003e NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructMapLikeType#804",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructMapLikeType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public MapLikeType constructMapLikeType(Class\u003c?\u003e mapClass, JavaType keyType, JavaType valueType) {\n        // 19-Oct-2015, tatu: Allow case of no-type-variables, since it seems likely to be\n        //    a valid use case here\n        JavaType type \u003d _fromClass(null, mapClass,\n                TypeBindings.createIfNeeded(mapClass, new JavaType[] { keyType, valueType }));\n        if (type instanceof MapLikeType) {\n            return (MapLikeType) type;\n        }\n        return MapLikeType.upgradeFrom(type, keyType, valueType);\n    }",
    "begin_line": 804,
    "end_line": 813,
    "comment": "/** \n * Method for constructing a  {@link MapLikeType} instance\u003cp\u003e NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructSimpleType#820",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructSimpleType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "public JavaType constructSimpleType(Class\u003c?\u003e rawType, JavaType[] parameterTypes) {\n        return _fromClass(null, rawType, TypeBindings.create(rawType, parameterTypes));\n    }",
    "begin_line": 820,
    "end_line": 822,
    "comment": "/** \n * Method for constructing a type instance with specified parameterization. \u003cp\u003e NOTE: was briefly deprecated for 2.6.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructSimpleType#832",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructSimpleType(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "@Deprecated\n    public JavaType constructSimpleType(Class\u003c?\u003e rawType, Class\u003c?\u003e parameterTarget,\n            JavaType[] parameterTypes)\n    {\n        return constructSimpleType(rawType, parameterTypes);\n    }",
    "begin_line": 832,
    "end_line": 836,
    "comment": "/** \n * Method for constructing a type instance with specified parameterization.\n * @since 2.6\n * @deprecated Since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructReferenceType#841",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructReferenceType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JavaType constructReferenceType(Class\u003c?\u003e rawType, JavaType referredType)\n    {\n        return ReferenceType.construct(rawType, null, // no bindings\n                null, null, // or super-class, interfaces?\n                referredType);\n    }",
    "begin_line": 841,
    "end_line": 846,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.uncheckedSimpleType#860",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.uncheckedSimpleType(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated uncheckedSimpleType(Class\u003c?\u003e cls) {\n        // 18-Oct-2015, tatu: Not sure how much problem missing super-type info is here\n        return _constructSimple(cls, EMPTY_BINDINGS, null, null);\n    }",
    "begin_line": 860,
    "end_line": 863,
    "comment": "/** \n * Method that use by core Databind functionality, and that should NOT be called by application code outside databind package. \u003cp\u003e  Unchecked here not only means that no checks are made as to whether given class might be non-simple type (like  {@link CollectionType}) but also that most of supertype information is not gathered. This means that unless called on primitive types or {@link java.lang.String}, results are probably not what you want to use.\n * @deprecated Since 2.8, to indicate users should never call this method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructParametricType#892",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructParametricType(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public JavaType constructParametricType(Class\u003c?\u003e parametrized, Class\u003c?\u003e... parameterClasses) {\n        int len \u003d parameterClasses.length;\n        JavaType[] pt \u003d new JavaType[len];\n        for (int i \u003d 0; i \u003c len; ++i) {\n            pt[i] \u003d _fromClass(null, parameterClasses[i], null);\n        }\n        return constructParametricType(parametrized, pt);\n    }",
    "begin_line": 892,
    "end_line": 899,
    "comment": "/** \n * Factory method for constructing  {@link JavaType} thatrepresents a parameterized type. For example, to represent type \u003ccode\u003eList\u0026lt;Set\u0026lt;Integer\u003e\u003e\u003c/code\u003e, you could call \u003cpre\u003e JavaType inner \u003d TypeFactory.constructParametrizedType(Set.class, Set.class, Integer.class); return TypeFactory.constructParametrizedType(ArrayList.class, List.class, inner); \u003c/pre\u003e \u003cp\u003e The reason for first two arguments to be separate is that parameterization may apply to a super-type. For example, if generic type was instead to be constructed for \u003ccode\u003eArrayList\u0026lt;Integer\u003e\u003c/code\u003e, the usual call would be: \u003cpre\u003e TypeFactory.constructParametrizedType(ArrayList.class, List.class, Integer.class); \u003c/pre\u003e since parameterization is applied to  {@link java.util.List}. In most cases distinction does not matter, but there are types where it does; one such example is parameterization of types that implement  {@link java.util.Iterator}. \u003cp\u003e NOTE: type modifiers are NOT called on constructed type.\n * @param parametrized Actual full type\n * @param parameterClasses Type parameters to apply\n * @since 2.5 NOTE: was briefly deprecated for 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructParametricType#928",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructParametricType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JavaType constructParametricType(Class\u003c?\u003e rawType, JavaType... parameterTypes)\n    {\n        return _fromClass(null, rawType, TypeBindings.create(rawType, parameterTypes));\n    }",
    "begin_line": 928,
    "end_line": 931,
    "comment": "/** \n * Factory method for constructing  {@link JavaType} thatrepresents a parameterized type. For example, to represent type \u003ccode\u003eList\u0026lt;Set\u0026lt;Integer\u003e\u003e\u003c/code\u003e, you could call \u003cpre\u003e JavaType inner \u003d TypeFactory.constructParametrizedType(Set.class, Set.class, Integer.class); return TypeFactory.constructParametrizedType(ArrayList.class, List.class, inner); \u003c/pre\u003e \u003cp\u003e The reason for first two arguments to be separate is that parameterization may apply to a super-type. For example, if generic type was instead to be constructed for \u003ccode\u003eArrayList\u0026lt;Integer\u003e\u003c/code\u003e, the usual call would be: \u003cpre\u003e TypeFactory.constructParametrizedType(ArrayList.class, List.class, Integer.class); \u003c/pre\u003e since parameterization is applied to  {@link java.util.List}. In most cases distinction does not matter, but there are types where it does; one such example is parameterization of types that implement  {@link java.util.Iterator}. \u003cp\u003e NOTE: type modifiers are NOT called on constructed type.\n * @param rawType Actual type-erased type\n * @param parameterTypes Type parameters to apply\n * @since 2.5 NOTE: was briefly deprecated for 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructParametrizedType#936",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructParametrizedType(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JavaType constructParametrizedType(Class\u003c?\u003e parametrized, Class\u003c?\u003e parametersFor,\n            JavaType... parameterTypes)\n    {\n        return constructParametricType(parametrized, parameterTypes);\n    }",
    "begin_line": 936,
    "end_line": 940,
    "comment": "/** \n * @since 2.5 -- but will probably deprecated in 2.7 or 2.8 (not needed with 2.7)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructParametrizedType#945",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructParametrizedType(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public JavaType constructParametrizedType(Class\u003c?\u003e parametrized, Class\u003c?\u003e parametersFor,\n            Class\u003c?\u003e... parameterClasses)\n    {\n        return constructParametricType(parametrized, parameterClasses);\n    }",
    "begin_line": 945,
    "end_line": 949,
    "comment": "/** \n * @since 2.5 -- but will probably deprecated in 2.7 or 2.8 (not needed with 2.7)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructRawCollectionType#969",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionType(java.lang.Class\u003c? extends java.util.Collection\u003e)",
    "snippet": "public CollectionType constructRawCollectionType(Class\u003c? extends Collection\u003e collectionClass) {\n        return constructCollectionType(collectionClass, unknownType());\n    }",
    "begin_line": 969,
    "end_line": 971,
    "comment": "/** \n * Method that can be used to construct \"raw\" Collection type; meaning that its parameterization is unknown. This is similar to using \u003ccode\u003eObject.class\u003c/code\u003e parameterization, and is equivalent to calling: \u003cpre\u003e typeFactory.constructCollectionType(collectionClass, typeFactory.unknownType()); \u003c/pre\u003e \u003cp\u003e This method should only be used if parameterization is completely unavailable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructRawCollectionLikeType#984",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionLikeType(java.lang.Class\u003c?\u003e)",
    "snippet": "public CollectionLikeType constructRawCollectionLikeType(Class\u003c?\u003e collectionClass) {\n        return constructCollectionLikeType(collectionClass, unknownType());\n    }",
    "begin_line": 984,
    "end_line": 986,
    "comment": "/** \n * Method that can be used to construct \"raw\" Collection-like type; meaning that its parameterization is unknown. This is similar to using \u003ccode\u003eObject.class\u003c/code\u003e parameterization, and is equivalent to calling: \u003cpre\u003e typeFactory.constructCollectionLikeType(collectionClass, typeFactory.unknownType()); \u003c/pre\u003e \u003cp\u003e This method should only be used if parameterization is completely unavailable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructRawMapType#999",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapType(java.lang.Class\u003c? extends java.util.Map\u003e)",
    "snippet": "public MapType constructRawMapType(Class\u003c? extends Map\u003e mapClass) {\n        return constructMapType(mapClass, unknownType(), unknownType());\n    }",
    "begin_line": 999,
    "end_line": 1001,
    "comment": "/** \n * Method that can be used to construct \"raw\" Map type; meaning that its parameterization is unknown. This is similar to using \u003ccode\u003eObject.class\u003c/code\u003e parameterization, and is equivalent to calling: \u003cpre\u003e typeFactory.constructMapType(collectionClass, typeFactory.unknownType(), typeFactory.unknownType()); \u003c/pre\u003e \u003cp\u003e This method should only be used if parameterization is completely unavailable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructRawMapLikeType#1014",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapLikeType(java.lang.Class\u003c?\u003e)",
    "snippet": "public MapLikeType constructRawMapLikeType(Class\u003c?\u003e mapClass) {\n        return constructMapLikeType(mapClass, unknownType(), unknownType());\n    }",
    "begin_line": 1014,
    "end_line": 1016,
    "comment": "/** \n * Method that can be used to construct \"raw\" Map-like type; meaning that its parameterization is unknown. This is similar to using \u003ccode\u003eObject.class\u003c/code\u003e parameterization, and is equivalent to calling: \u003cpre\u003e typeFactory.constructMapLikeType(collectionClass, typeFactory.unknownType(), typeFactory.unknownType()); \u003c/pre\u003e \u003cp\u003e This method should only be used if parameterization is completely unavailable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._mapType#1024",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._mapType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "private JavaType _mapType(Class\u003c?\u003e rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)\n    {\n        JavaType kt, vt;\n\n        // 28-May-2015, tatu: Properties are special, as per [databind#810]; fake \"correct\" parameter sig\n        if (rawClass \u003d\u003d Properties.class) {\n            kt \u003d vt \u003d CORE_TYPE_STRING;\n        } else {\n            List\u003cJavaType\u003e typeParams \u003d bindings.getTypeParameters();\n            // ok to have no types (\"raw\")\n            switch (typeParams.size()) {\n            case 0: // acceptable?\n                kt \u003d vt \u003d _unknownType();\n                break;\n            case 2:\n                kt \u003d typeParams.get(0);\n                vt \u003d typeParams.get(1);\n                break;\n            default:\n                throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");\n            }\n        }\n        return MapType.construct(rawClass, bindings, superClass, superInterfaces, kt, vt);\n    }",
    "begin_line": 1024,
    "end_line": 1048,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._collectionType#1050",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._collectionType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "private JavaType _collectionType(Class\u003c?\u003e rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)\n    {\n        List\u003cJavaType\u003e typeParams \u003d bindings.getTypeParameters();\n        // ok to have no types (\"raw\")\n        JavaType ct;\n        if (typeParams.isEmpty()) {\n            ct \u003d _unknownType();\n        } else if (typeParams.size() \u003d\u003d 1) {\n            ct \u003d typeParams.get(0);\n        } else {\n            throw new IllegalArgumentException(\"Strange Collection type \"+rawClass.getName()+\": can not determine type parameters\");\n        }\n        return CollectionType.construct(rawClass, bindings, superClass, superInterfaces, ct);\n    }",
    "begin_line": 1050,
    "end_line": 1064,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._referenceType#1066",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._referenceType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "private JavaType _referenceType(Class\u003c?\u003e rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)\n    {\n        List\u003cJavaType\u003e typeParams \u003d bindings.getTypeParameters();\n        // ok to have no types (\"raw\")\n        JavaType ct;\n        if (typeParams.isEmpty()) {\n            ct \u003d _unknownType();\n        } else if (typeParams.size() \u003d\u003d 1) {\n            ct \u003d typeParams.get(0);\n        } else {\n            throw new IllegalArgumentException(\"Strange Reference type \"+rawClass.getName()+\": can not determine type parameters\");\n        }\n        return ReferenceType.construct(rawClass, bindings, superClass, superInterfaces, ct);\n    }",
    "begin_line": 1066,
    "end_line": 1080,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._constructSimple#1090",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._constructSimple(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "protected JavaType _constructSimple(Class\u003c?\u003e raw, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)\n    {\n        if (bindings.isEmpty()) {\n            JavaType result \u003d _findWellKnownSimple(raw);\n            if (result !\u003d null) {\n                return result;\n            }\n        }\n        return _newSimpleType(raw, bindings, superClass, superInterfaces);\n    }",
    "begin_line": 1090,
    "end_line": 1100,
    "comment": "/** \n * Factory method to call when no special  {@link JavaType} is needed,no generic parameters are passed. Default implementation may check pre-constructed values for \"well-known\" types, but if none found will simply call  {@link #_newSimpleType}\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._newSimpleType#1109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._newSimpleType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "protected JavaType _newSimpleType(Class\u003c?\u003e raw, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)\n    {\n        return new SimpleType(raw, bindings, superClass, superInterfaces);\n    }",
    "begin_line": 1109,
    "end_line": 1113,
    "comment": "/** \n * Factory method that is to create a new  {@link SimpleType} with nochecks whatsoever. Default implementation calls the single argument constructor of  {@link SimpleType}.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._unknownType#1115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._unknownType()",
    "snippet": "protected JavaType _unknownType() {\n        /* 15-Sep-2015, tatu: Prior to 2.7, we constructed new instance for each call.\n         *    This may have been due to potential mutability of the instance; but that\n         *    should not be issue any more, and creation is somewhat wasteful. So let\u0027s\n         *    try reusing singleton/flyweight instance.\n         */\n        return CORE_TYPE_OBJECT;\n    }",
    "begin_line": 1115,
    "end_line": 1122,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._findWellKnownSimple#1131",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._findWellKnownSimple(java.lang.Class\u003c?\u003e)",
    "snippet": "protected JavaType _findWellKnownSimple(Class\u003c?\u003e clz) {\n        if (clz.isPrimitive()) {\n            if (clz \u003d\u003d CLS_BOOL) return CORE_TYPE_BOOL;\n            if (clz \u003d\u003d CLS_INT) return CORE_TYPE_INT;\n            if (clz \u003d\u003d CLS_LONG) return CORE_TYPE_LONG;\n        } else {\n            if (clz \u003d\u003d CLS_STRING) return CORE_TYPE_STRING;\n            if (clz \u003d\u003d CLS_OBJECT) return CORE_TYPE_OBJECT; // since 2.7\n        }\n        return null;\n    }",
    "begin_line": 1131,
    "end_line": 1141,
    "comment": "/** \n * Helper method called to see if requested, non-generic-parameterized type is one of common, \"well-known\" types, instances of which are pre-constructed and do not need dynamic caching.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromAny#1154",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromAny(com.fasterxml.jackson.databind.type.ClassStack, java.lang.reflect.Type, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _fromAny(ClassStack context, Type type, TypeBindings bindings)\n    {\n        JavaType resultType;\n\n        // simple class?\n        if (type instanceof Class\u003c?\u003e) {\n            // Important: remove possible bindings since this is type-erased thingy\n            resultType \u003d _fromClass(context, (Class\u003c?\u003e) type, EMPTY_BINDINGS);\n        }\n        // But if not, need to start resolving.\n        else if (type instanceof ParameterizedType) {\n            resultType \u003d _fromParamType(context, (ParameterizedType) type, bindings);\n        }\n        else if (type instanceof JavaType) { // [databind#116]\n            // no need to modify further if we already had JavaType\n            return (JavaType) type;\n        }\n        else if (type instanceof GenericArrayType) {\n            resultType \u003d _fromArrayType(context, (GenericArrayType) type, bindings);\n        }\n        else if (type instanceof TypeVariable\u003c?\u003e) {\n            resultType \u003d _fromVariable(context, (TypeVariable\u003c?\u003e) type, bindings);\n        }\n        else if (type instanceof WildcardType) {\n            resultType \u003d _fromWildcard(context, (WildcardType) type, bindings);\n        } else {\n            // sanity check\n            throw new IllegalArgumentException(\"Unrecognized Type: \"+((type \u003d\u003d null) ? \"[null]\" : type.toString()));\n        }\n        /* 21-Feb-2016, nateB/tatu: as per [databind#1129] (applied for 2.7.2),\n         *   we do need to let all kinds of types to be refined, esp. for Scala module.\n         */\n        if (_modifiers !\u003d null) {\n            TypeBindings b \u003d resultType.getBindings();\n            if (b \u003d\u003d null) {\n                b \u003d EMPTY_BINDINGS;\n            }\n            for (TypeModifier mod : _modifiers) {\n                JavaType t \u003d mod.modifyType(resultType, type, b, this);\n                if (t \u003d\u003d null) {\n                    throw new IllegalStateException(String.format(\n                            \"TypeModifier %s (of type %s) return null for type %s\",\n                            mod, mod.getClass().getName(), resultType));\n                }\n                resultType \u003d t;\n            }\n        }\n        return resultType;\n    }",
    "begin_line": 1154,
    "end_line": 1202,
    "comment": "/** \n * Factory method that can be used if type information is passed as Java typing returned from \u003ccode\u003egetGenericXxx\u003c/code\u003e methods (usually for a return or argument type).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromClass#1208",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromClass(com.fasterxml.jackson.databind.type.ClassStack, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _fromClass(ClassStack context, Class\u003c?\u003e rawType, TypeBindings bindings)\n    {\n        // Very first thing: small set of core types we know well:\n        JavaType result \u003d _findWellKnownSimple(rawType);\n        if (result !\u003d null) {\n            return result;\n        }\n        // Barring that, we may have recently constructed an instance\n        final Object key;\n        if ((bindings \u003d\u003d null) || bindings.isEmpty()) {\n            key \u003d rawType;\n        } else {\n            key \u003d bindings.asKey(rawType);\n        }\n        result \u003d _typeCache.get(key); // ok, cache object is synced\n        if (result !\u003d null) {\n            return result;\n        }\n\n        // 15-Oct-2015, tatu: recursive reference?\n        if (context \u003d\u003d null) {\n            context \u003d new ClassStack(rawType);\n        } else {\n            ClassStack prev \u003d context.find(rawType);\n            if (prev !\u003d null) {\n                // Self-reference: needs special handling, then...\n                ResolvedRecursiveType selfRef \u003d new ResolvedRecursiveType(rawType, EMPTY_BINDINGS);\n                prev.addSelfReference(selfRef);\n                return selfRef;\n            }\n            // no, but need to update context to allow for proper cycle resolution\n            context \u003d context.child(rawType);\n        }\n\n        // First: do we have an array type?\n        if (rawType.isArray()) {\n            result \u003d ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings),\n                    bindings);\n        } else {\n            // If not, need to proceed by first resolving parent type hierarchy\n            \n            JavaType superClass;\n            JavaType[] superInterfaces;\n\n            if (rawType.isInterface()) {\n                superClass \u003d null;\n                superInterfaces \u003d _resolveSuperInterfaces(context, rawType, bindings);\n            } else {\n                // Note: even Enums can implement interfaces, so can not drop those\n                superClass \u003d _resolveSuperClass(context, rawType, bindings);\n                superInterfaces \u003d _resolveSuperInterfaces(context, rawType, bindings);\n            }\n\n            // 19-Oct-2015, tatu: Bit messy, but we need to \u0027fix\u0027 java.util.Properties here...\n            if (rawType \u003d\u003d Properties.class) {\n                result \u003d MapType.construct(rawType, bindings, superClass, superInterfaces,\n                        CORE_TYPE_STRING, CORE_TYPE_STRING);\n            }\n            // And then check what flavor of type we got. Start by asking resolved\n            // super-type if refinement is all that is needed?\n            else if (superClass !\u003d null) {\n                result \u003d superClass.refine(rawType, bindings, superClass, superInterfaces);\n            }\n            // if not, perhaps we are now resolving a well-known class or interface?\n            if (result \u003d\u003d null) {\n                result \u003d _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces); \n                if (result \u003d\u003d null) {\n                    result \u003d _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);\n                    if (result \u003d\u003d null) {\n                        // but if nothing else, \"simple\" class for now:\n                        result \u003d _newSimpleType(rawType, bindings, superClass, superInterfaces);\n                    }\n                }\n            }\n        }\n        context.resolveSelfReferences(result);\n        // 16-Jul-2016, tatu: [databind#1302] is solved different way, but ideally we shouldn\u0027t\n        //     cache anything with partially resolved `ResolvedRecursiveType`... so maybe improve\n        if (!result.hasHandlers()) {\n            _typeCache.putIfAbsent(key, result); // cache object syncs\n        }\n        return result;\n    }",
    "begin_line": 1208,
    "end_line": 1290,
    "comment": "/** \n * @param bindings Mapping of formal parameter declarations (for generictypes) into actual types\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._resolveSuperClass#1292",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperClass(com.fasterxml.jackson.databind.type.ClassStack, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _resolveSuperClass(ClassStack context, Class\u003c?\u003e rawType, TypeBindings parentBindings)\n    {\n        Type parent \u003d ClassUtil.getGenericSuperclass(rawType);\n        if (parent \u003d\u003d null) {\n            return null;\n        }\n        return _fromAny(context, parent, parentBindings);\n    }",
    "begin_line": 1292,
    "end_line": 1299,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._resolveSuperInterfaces#1301",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperInterfaces(com.fasterxml.jackson.databind.type.ClassStack, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType[] _resolveSuperInterfaces(ClassStack context, Class\u003c?\u003e rawType, TypeBindings parentBindings)\n    {\n        Type[] types \u003d ClassUtil.getGenericInterfaces(rawType);\n        if (types \u003d\u003d null || types.length \u003d\u003d 0) {\n            return NO_TYPES;\n        }\n        int len \u003d types.length;\n        JavaType[] resolved \u003d new JavaType[len];\n        for (int i \u003d 0; i \u003c len; ++i) {\n            Type type \u003d types[i];\n            resolved[i] \u003d _fromAny(context, type, parentBindings);\n        }\n        return resolved;\n    }",
    "begin_line": 1301,
    "end_line": 1314,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromWellKnownClass#1321",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromWellKnownClass(com.fasterxml.jackson.databind.type.ClassStack, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "protected JavaType _fromWellKnownClass(ClassStack context, Class\u003c?\u003e rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)\n    {\n        if (bindings \u003d\u003d null) {\n            bindings \u003d TypeBindings.emptyBindings();\n        }\n        \n        // Quite simple when we resolving exact class/interface; start with that\n        if (rawType \u003d\u003d Map.class) {\n            return _mapType(rawType, bindings, superClass, superInterfaces);\n        }\n        if (rawType \u003d\u003d Collection.class) {\n            return _collectionType(rawType, bindings, superClass, superInterfaces);\n        }\n        // and since 2.6 one referential type\n        if (rawType \u003d\u003d AtomicReference.class) {\n            return _referenceType(rawType, bindings, superClass, superInterfaces);\n        }\n        // 01-Nov-2015, tatu: As of 2.7, couple of potential `CollectionLikeType`s (like\n        //    `Iterable`, `Iterator`), and `MapLikeType`s (`Map.Entry`) are not automatically\n        //    detected, related to difficulties in propagating type upwards (Iterable, for\n        //    example, is a weak, tag-on type). They may be detectable in future.\n        return null;\n    }",
    "begin_line": 1321,
    "end_line": 1344,
    "comment": "/** \n * Helper class used to check whether exact class for which type is being constructed is one of well-known base interfaces or classes that indicates alternate {@link JavaType} implementation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromWellKnownInterface#1346",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromWellKnownInterface(com.fasterxml.jackson.databind.type.ClassStack, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "protected JavaType _fromWellKnownInterface(ClassStack context, Class\u003c?\u003e rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)\n    {\n        // But that\u0027s not all: may be possible current type actually implements an\n        // interface type. So...\n        final int intCount \u003d superInterfaces.length;\n\n        for (int i \u003d 0; i \u003c intCount; ++i) {\n            JavaType result \u003d superInterfaces[i].refine(rawType, bindings, superClass, superInterfaces);\n            if (result !\u003d null) {\n                return result;\n            }\n        }\n        return null;\n    }",
    "begin_line": 1346,
    "end_line": 1360,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromParamType#1366",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromParamType(com.fasterxml.jackson.databind.type.ClassStack, java.lang.reflect.ParameterizedType, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _fromParamType(ClassStack context, ParameterizedType ptype,\n            TypeBindings parentBindings)\n    {\n        // Assumption here is we\u0027ll always get Class, not one of other Types\n        Class\u003c?\u003e rawType \u003d (Class\u003c?\u003e) ptype.getRawType();\n\n        // 29-Oct-2015, tatu: For performance reasons, let\u0027s streamline handling of\n        //   couple of not-so-useful parametric types\n        if (rawType \u003d\u003d CLS_ENUM) {\n            return CORE_TYPE_ENUM;\n        }\n        if (rawType \u003d\u003d CLS_COMPARABLE) {\n            return CORE_TYPE_COMPARABLE;\n        }\n        if (rawType \u003d\u003d CLS_CLASS) {\n            return CORE_TYPE_CLASS;\n        }\n\n        // First: what is the actual base type? One odd thing is that \u0027getRawType\u0027\n        // returns Type, not Class\u003c?\u003e as one might expect. But let\u0027s assume it is\n        // always of type Class: if not, need to add more code to resolve it to Class.        \n        Type[] args \u003d ptype.getActualTypeArguments();\n        int paramCount \u003d (args \u003d\u003d null) ? 0 : args.length;\n        TypeBindings newBindings;        \n\n        if (paramCount \u003d\u003d 0) {\n            newBindings \u003d EMPTY_BINDINGS;\n        } else {\n            JavaType[] pt \u003d new JavaType[paramCount];\n            for (int i \u003d 0; i \u003c paramCount; ++i) {\n                pt[i] \u003d _fromAny(context, args[i], parentBindings);\n            }\n            newBindings \u003d TypeBindings.create(rawType, pt);\n        }\n        return _fromClass(context, rawType, newBindings);\n    }",
    "begin_line": 1366,
    "end_line": 1401,
    "comment": "/** \n * This method deals with parameterized types, that is, first class generic classes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromArrayType#1403",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromArrayType(com.fasterxml.jackson.databind.type.ClassStack, java.lang.reflect.GenericArrayType, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _fromArrayType(ClassStack context, GenericArrayType type, TypeBindings bindings)\n    {\n        JavaType elementType \u003d _fromAny(context, type.getGenericComponentType(), bindings);\n        return ArrayType.construct(elementType, bindings);\n    }",
    "begin_line": 1403,
    "end_line": 1407,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromVariable#1409",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromVariable(com.fasterxml.jackson.databind.type.ClassStack, java.lang.reflect.TypeVariable\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _fromVariable(ClassStack context, TypeVariable\u003c?\u003e var, TypeBindings bindings)\n    {\n        // ideally should find it via bindings:\n        final String name \u003d var.getName();\n        JavaType type \u003d bindings.findBoundType(name);\n        if (type !\u003d null) {\n            return type;\n        }\n        // but if not, use bounds... note that approach here is simplistic; not taking\n        // into account possible multiple bounds, nor consider upper bounds.\n        if (bindings.hasUnbound(name)) {\n            return CORE_TYPE_OBJECT;\n        }\n        bindings \u003d bindings.withUnboundVariable(name);\n\n        Type[] bounds \u003d var.getBounds();\n        return _fromAny(context, bounds[0], bindings);\n    }",
    "begin_line": 1409,
    "end_line": 1426,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromWildcard#1428",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromWildcard(com.fasterxml.jackson.databind.type.ClassStack, java.lang.reflect.WildcardType, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _fromWildcard(ClassStack context, WildcardType type, TypeBindings bindings)\n    {\n        /* Similar to challenges with TypeVariable, we may have multiple upper bounds.\n         * But it is also possible that if upper bound defaults to Object, we might\n         * want to consider lower bounds instead.\n         * For now, we won\u0027t try anything more advanced; above is just for future reference.\n         */\n        return _fromAny(context, type.getUpperBounds()[0], bindings);\n    }",
    "begin_line": 1428,
    "end_line": 1436,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser.TypeParser#18",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.TypeParser(com.fasterxml.jackson.databind.type.TypeFactory)",
    "snippet": "public TypeParser(TypeFactory f) {\n        _factory \u003d f;\n    }",
    "begin_line": 18,
    "end_line": 20,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser.withFactory#25",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.withFactory(com.fasterxml.jackson.databind.type.TypeFactory)",
    "snippet": "public TypeParser withFactory(TypeFactory f) {\n        return (f \u003d\u003d _factory) ? this : new TypeParser(f);\n    }",
    "begin_line": 25,
    "end_line": 27,
    "comment": "/** \n * @since 2.6.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser.parse#29",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.parse(java.lang.String)",
    "snippet": "public JavaType parse(String canonical) throws IllegalArgumentException\n    {\n        MyTokenizer tokens \u003d new MyTokenizer(canonical.trim());\n        JavaType type \u003d parseType(tokens);\n        // must be end, now\n        if (tokens.hasMoreTokens()) {\n            throw _problem(tokens, \"Unexpected tokens after complete type\");\n        }\n        return type;\n    }",
    "begin_line": 29,
    "end_line": 38,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser.parseType#40",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.parseType(com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer)",
    "snippet": "protected JavaType parseType(MyTokenizer tokens)\n        throws IllegalArgumentException\n    {\n        if (!tokens.hasMoreTokens()) {\n            throw _problem(tokens, \"Unexpected end-of-string\");\n        }\n        Class\u003c?\u003e base \u003d findClass(tokens.nextToken(), tokens);\n\n        // either end (ok, non generic type), or generics\n        if (tokens.hasMoreTokens()) {\n            String token \u003d tokens.nextToken();\n            if (\"\u003c\".equals(token)) {\n                List\u003cJavaType\u003e parameterTypes \u003d parseTypes(tokens);\n                TypeBindings b \u003d TypeBindings.create(base, parameterTypes);\n                return _factory._fromClass(null, base, b);\n            }\n            // can be comma that separates types, or closing \u0027\u003e\u0027\n            tokens.pushBack(token);\n        }\n        return _factory._fromClass(null, base, null);\n    }",
    "begin_line": 40,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser.parseTypes#62",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.parseTypes(com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer)",
    "snippet": "protected List\u003cJavaType\u003e parseTypes(MyTokenizer tokens)\n        throws IllegalArgumentException\n    {\n        ArrayList\u003cJavaType\u003e types \u003d new ArrayList\u003cJavaType\u003e();\n        while (tokens.hasMoreTokens()) {\n            types.add(parseType(tokens));\n            if (!tokens.hasMoreTokens()) break;\n            String token \u003d tokens.nextToken();\n            if (\"\u003e\".equals(token)) return types;\n            if (!\",\".equals(token)) {\n                throw _problem(tokens, \"Unexpected token \u0027\"+token+\"\u0027, expected \u0027,\u0027 or \u0027\u003e\u0027)\");\n            }\n        }\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }",
    "begin_line": 62,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser.findClass#78",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.findClass(java.lang.String, com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer)",
    "snippet": "protected Class\u003c?\u003e findClass(String className, MyTokenizer tokens)\n    {\n        try {\n            return _factory.findClass(className);\n        } catch (Exception e) {\n            if (e instanceof RuntimeException) {\n                throw (RuntimeException) e;\n            }\n            throw _problem(tokens, \"Can not locate class \u0027\"+className+\"\u0027, problem: \"+e.getMessage());\n        }\n    }",
    "begin_line": 78,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser._problem#90",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser._problem(com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer, java.lang.String)",
    "snippet": "protected IllegalArgumentException _problem(MyTokenizer tokens, String msg)\n    {\n        return new IllegalArgumentException(String.format(\"Failed to parse type \u0027%s\u0027 (remaining: \u0027%s\u0027): %s\",\n                tokens.getAllInput(), tokens.getRemainingInput(), msg));\n    }",
    "begin_line": 90,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MyTokenizer.MyTokenizer#104",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer(java.lang.String)",
    "snippet": "public MyTokenizer(String str) {            \n            super(str, \"\u003c,\u003e\", true);\n            _input \u003d str;\n        }",
    "begin_line": 104,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MyTokenizer.hasMoreTokens#110",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.hasMoreTokens()",
    "snippet": "@Override\n        public boolean hasMoreTokens() {\n            return (_pushbackToken !\u003d null) || super.hasMoreTokens();\n        }",
    "begin_line": 110,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MyTokenizer.nextToken#115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.nextToken()",
    "snippet": "@Override\n        public String nextToken() {\n            String token;\n            if (_pushbackToken !\u003d null) {\n                token \u003d _pushbackToken;\n                _pushbackToken \u003d null;\n            } else {\n                token \u003d super.nextToken();\n                _index +\u003d token.length();\n                token \u003d token.trim();\n            }\n            return token;\n        }",
    "begin_line": 115,
    "end_line": 126,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MyTokenizer.pushBack#128",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.pushBack(java.lang.String)",
    "snippet": "public void pushBack(String token) {\n            _pushbackToken \u003d token;\n            // let\u0027s NOT change index for now, since token may have been trim()ed\n        }",
    "begin_line": 128,
    "end_line": 131,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MyTokenizer.getAllInput#133",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.getAllInput()",
    "snippet": "public String getAllInput() { return _input; }",
    "begin_line": 133,
    "end_line": 133,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MyTokenizer.getRemainingInput#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.getRemainingInput()",
    "snippet": "public String getRemainingInput() { return _input.substring(_index); }",
    "begin_line": 135,
    "end_line": 135,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.hasNext#31",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.hasNext()",
    "snippet": "@Override public boolean hasNext() { return false; }",
    "begin_line": 31,
    "end_line": 31,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.next#32",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.next()",
    "snippet": "@Override public T next() { throw new NoSuchElementException(); }",
    "begin_line": 32,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.remove#33",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.remove()",
    "snippet": "@Override public void remove() { throw new UnsupportedOperationException(); }",
    "begin_line": 33,
    "end_line": 33,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.emptyIterator#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.emptyIterator()",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public static \u003cT\u003e Iterator\u003cT\u003e emptyIterator() {\n// 21-Feb-2016, tatu: As per above, use a locally defined empty iterator\n//        return Collections.emptyIterator();\n        return (Iterator\u003cT\u003e) EMPTY_ITERATOR;\n    }",
    "begin_line": 48,
    "end_line": 52,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.findSuperTypes#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findSuperTypes(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e, boolean)",
    "snippet": "public static List\u003cJavaType\u003e findSuperTypes(JavaType type, Class\u003c?\u003e endBefore,\n            boolean addClassItself) {\n        if ((type \u003d\u003d null) || type.hasRawClass(endBefore) || type.hasRawClass(Object.class)) {\n            return Collections.emptyList();\n        }\n        List\u003cJavaType\u003e result \u003d new ArrayList\u003cJavaType\u003e(8);\n        _addSuperTypes(type, endBefore, result, addClassItself);\n        return result;\n    }",
    "begin_line": 74,
    "end_line": 82,
    "comment": "/** \n * Method that will find all sub-classes and implemented interfaces of a given class or interface. Classes are listed in order of precedence, starting with the immediate super-class, followed by interfaces class directly declares to implemented, and then recursively followed by parent of super-class and so forth. Note that \u003ccode\u003eObject.class\u003c/code\u003e is not included in the list regardless of whether \u003ccode\u003eendBefore\u003c/code\u003e argument is defined or not.\n * @param endBefore Super-type to NOT include in results, if any; whenencountered, will be ignored (and no super types are checked).\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.findRawSuperTypes#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findRawSuperTypes(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, boolean)",
    "snippet": "public static List\u003cClass\u003c?\u003e\u003e findRawSuperTypes(Class\u003c?\u003e cls, Class\u003c?\u003e endBefore, boolean addClassItself) {\n        if ((cls \u003d\u003d null) || (cls \u003d\u003d endBefore) || (cls \u003d\u003d Object.class)) {\n            return Collections.emptyList();\n        }\n        List\u003cClass\u003c?\u003e\u003e result \u003d new ArrayList\u003cClass\u003c?\u003e\u003e(8);\n        _addRawSuperTypes(cls, endBefore, result, addClassItself);\n        return result;\n    }",
    "begin_line": 87,
    "end_line": 94,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.findSuperClasses#103",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findSuperClasses(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, boolean)",
    "snippet": "public static List\u003cClass\u003c?\u003e\u003e findSuperClasses(Class\u003c?\u003e cls, Class\u003c?\u003e endBefore,\n            boolean addClassItself) {\n        List\u003cClass\u003c?\u003e\u003e result \u003d new LinkedList\u003cClass\u003c?\u003e\u003e();\n        if ((cls !\u003d null) \u0026\u0026 (cls !\u003d endBefore))  {\n            if (addClassItself) {\n                result.add(cls);\n            }\n            while ((cls \u003d cls.getSuperclass()) !\u003d null) {\n                if (cls \u003d\u003d endBefore) {\n                    break;\n                }\n                result.add(cls);\n            }\n        }\n        return result;\n    }",
    "begin_line": 103,
    "end_line": 118,
    "comment": "/** \n * Method for finding all super classes (but not super interfaces) of given class, starting with the immediate super class and ending in the most distant one. Class itself is included if \u003ccode\u003eaddClassItself\u003c/code\u003e is true.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.findSuperTypes#121",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findSuperTypes(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated findSuperTypes(Class\u003c?\u003e cls, Class\u003c?\u003e endBefore) {\n        return findSuperTypes(cls, endBefore, new ArrayList\u003cClass\u003c?\u003e\u003e(8));\n    }",
    "begin_line": 121,
    "end_line": 123,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.findSuperTypes#126",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findSuperTypes(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, java.util.List\u003cjava.lang.Class\u003c?\u003e\u003e)",
    "snippet": "@Deprecated findSuperTypes(Class\u003c?\u003e cls, Class\u003c?\u003e endBefore, List\u003cClass\u003c?\u003e\u003e result) {\n        _addRawSuperTypes(cls, endBefore, result, false);\n        return result;\n    }",
    "begin_line": 126,
    "end_line": 129,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator._addSuperTypes#131",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil._addSuperTypes(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e, java.util.Collection\u003ccom.fasterxml.jackson.databind.JavaType\u003e, boolean)",
    "snippet": "private static void _addSuperTypes(JavaType type, Class\u003c?\u003e endBefore, Collection\u003cJavaType\u003e result,\n            boolean addClassItself)\n    {\n        if (type \u003d\u003d null) {\n            return;\n        }\n        final Class\u003c?\u003e cls \u003d type.getRawClass();\n        if (cls \u003d\u003d endBefore || cls \u003d\u003d Object.class) { return; }\n        if (addClassItself) {\n            if (result.contains(type)) { // already added, no need to check supers\n                return;\n            }\n            result.add(type);\n        }\n        for (JavaType intCls : type.getInterfaces()) {\n            _addSuperTypes(intCls, endBefore, result, true);\n        }\n        _addSuperTypes(type.getSuperClass(), endBefore, result, true);\n    }",
    "begin_line": 131,
    "end_line": 149,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator._addRawSuperTypes#151",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil._addRawSuperTypes(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, java.util.Collection\u003cjava.lang.Class\u003c?\u003e\u003e, boolean)",
    "snippet": "private static void _addRawSuperTypes(Class\u003c?\u003e cls, Class\u003c?\u003e endBefore, Collection\u003cClass\u003c?\u003e\u003e result, boolean addClassItself) {\n        if (cls \u003d\u003d endBefore || cls \u003d\u003d null || cls \u003d\u003d Object.class) { return; }\n        if (addClassItself) {\n            if (result.contains(cls)) { // already added, no need to check supers\n                return;\n            }\n            result.add(cls);\n        }\n        for (Class\u003c?\u003e intCls : _interfaces(cls)) {\n            _addRawSuperTypes(intCls, endBefore, result, true);\n        }\n        _addRawSuperTypes(cls.getSuperclass(), endBefore, result, true);\n    }",
    "begin_line": 151,
    "end_line": 163,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.canBeABeanType#175",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.canBeABeanType(java.lang.Class\u003c?\u003e)",
    "snippet": "public static String canBeABeanType(Class\u003c?\u003e type)\n    {\n        // First: language constructs that ain\u0027t beans:\n        if (type.isAnnotation()) {\n            return \"annotation\";\n        }\n        if (type.isArray()) {\n            return \"array\";\n        }\n        if (type.isEnum()) {\n            return \"enum\";\n        }\n        if (type.isPrimitive()) {\n            return \"primitive\";\n        }\n\n        // Anything else? Seems valid, then\n        return null;\n    }",
    "begin_line": 175,
    "end_line": 193,
    "comment": "/** \n * @return Null if class might be a bean; type String (that identifieswhy it\u0027s not a bean) if not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.isLocalType#195",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isLocalType(java.lang.Class\u003c?\u003e, boolean)",
    "snippet": "public static String isLocalType(Class\u003c?\u003e type, boolean allowNonStatic)\n    {\n        /* As per [JACKSON-187], GAE seems to throw SecurityExceptions\n         * here and there... and GAE itself has a bug, too\n         * (see []). Bah. So we need to catch some wayward exceptions on GAE\n         */\n        try {\n            // one more: method locals, anonymous, are not good:\n            if (hasEnclosingMethod(type)) {\n                return \"local/anonymous\";\n            }\n            \n            /* But how about non-static inner classes? Can\u0027t construct\n             * easily (theoretically, we could try to check if parent\n             * happens to be enclosing... but that gets convoluted)\n             */\n            if (!allowNonStatic) {\n                if (!Modifier.isStatic(type.getModifiers())) {\n                    if (getEnclosingClass(type) !\u003d null) {\n                        return \"non-static member class\";\n                    }\n                }\n            }\n        }\n        catch (SecurityException e) { }\n        catch (NullPointerException e) { }\n        return null;\n    }",
    "begin_line": 195,
    "end_line": 222,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.getOuterClass#227",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getOuterClass(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e getOuterClass(Class\u003c?\u003e type)\n    {\n        // as above, GAE has some issues...\n        try {\n            // one more: method locals, anonymous, are not good:\n            if (hasEnclosingMethod(type)) {\n                return null;\n            }\n            if (!Modifier.isStatic(type.getModifiers())) {\n                return getEnclosingClass(type);\n            }\n        } catch (SecurityException e) { }\n        return null;\n    }",
    "begin_line": 227,
    "end_line": 240,
    "comment": "/** \n * Method for finding enclosing class for non-static inner classes\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.isProxyType#248",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isProxyType(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isProxyType(Class\u003c?\u003e type)\n    {\n        // As per [databind#57], should NOT disqualify JDK proxy:\n        /*\n        // Then: well-known proxy (etc) classes\n        if (Proxy.isProxyClass(type)) {\n            return true;\n        }\n        */\n        String name \u003d type.getName();\n        // Hibernate uses proxies heavily as well:\n        if (name.startsWith(\"net.sf.cglib.proxy.\")\n            || name.startsWith(\"org.hibernate.proxy.\")) {\n            return true;\n        }\n        // Not one of known proxies, nope:\n        return false;\n    }",
    "begin_line": 248,
    "end_line": 265,
    "comment": "/** \n * Helper method used to weed out dynamic Proxy types; types that do not expose concrete method API that we could use to figure out automatic Bean (property) based serialization.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.isConcrete#271",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isConcrete(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isConcrete(Class\u003c?\u003e type)\n    {\n        int mod \u003d type.getModifiers();\n        return (mod \u0026 (Modifier.INTERFACE | Modifier.ABSTRACT)) \u003d\u003d 0;\n    }",
    "begin_line": 271,
    "end_line": 275,
    "comment": "/** \n * Helper method that checks if given class is a concrete one; that is, not an interface or abstract class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.isConcrete#277",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isConcrete(java.lang.reflect.Member)",
    "snippet": "public static boolean isConcrete(Member member)\n    {\n        int mod \u003d member.getModifiers();\n        return (mod \u0026 (Modifier.INTERFACE | Modifier.ABSTRACT)) \u003d\u003d 0;\n    }",
    "begin_line": 277,
    "end_line": 281,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.isCollectionMapOrArray#283",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isCollectionMapOrArray(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isCollectionMapOrArray(Class\u003c?\u003e type)\n    {\n        if (type.isArray()) return true;\n        if (Collection.class.isAssignableFrom(type)) return true;\n        if (Map.class.isAssignableFrom(type)) return true;\n        return false;\n    }",
    "begin_line": 283,
    "end_line": 289,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.getClassDescription#302",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getClassDescription(java.lang.Object)",
    "snippet": "public static String getClassDescription(Object classOrInstance)\n    {\n        if (classOrInstance \u003d\u003d null) {\n            return \"unknown\";\n        }\n        Class\u003c?\u003e cls \u003d (classOrInstance instanceof Class\u003c?\u003e) ?\n            (Class\u003c?\u003e) classOrInstance : classOrInstance.getClass();\n        return cls.getName();\n    }",
    "begin_line": 302,
    "end_line": 310,
    "comment": "/** \n * Helper method used to construct appropriate description when passed either type (Class) or an instance; in latter case, class of instance is to be used.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.findClass#322",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findClass(java.lang.String)",
    "snippet": "@Deprecated\n    public static Class\u003c?\u003e findClass(String className) throws ClassNotFoundException\n    {\n        // [JACKSON-597]: support primitive types (and void)\n        if (className.indexOf(\u0027.\u0027) \u003c 0) {\n            if (\"int\".equals(className)) return Integer.TYPE;\n            if (\"long\".equals(className)) return Long.TYPE;\n            if (\"float\".equals(className)) return Float.TYPE;\n            if (\"double\".equals(className)) return Double.TYPE;\n            if (\"boolean\".equals(className)) return Boolean.TYPE;\n            if (\"byte\".equals(className)) return Byte.TYPE;\n            if (\"char\".equals(className)) return Character.TYPE;\n            if (\"short\".equals(className)) return Short.TYPE;\n            if (\"void\".equals(className)) return Void.TYPE;\n        }\n        // Two-phase lookup: first using context ClassLoader; then default\n        Throwable prob \u003d null;\n        ClassLoader loader \u003d Thread.currentThread().getContextClassLoader();\n        \n        if (loader !\u003d null) {\n            try {\n                return Class.forName(className, true, loader);\n            } catch (Exception e) {\n                prob \u003d getRootCause(e);\n            }\n        }\n        try {\n            return Class.forName(className);\n        } catch (Exception e) {\n            if (prob \u003d\u003d null) {\n                prob \u003d getRootCause(e);\n            }\n        }\n        if (prob instanceof RuntimeException) {\n            throw (RuntimeException) prob;\n        }\n        throw new ClassNotFoundException(prob.getMessage(), prob);\n    }",
    "begin_line": 322,
    "end_line": 358,
    "comment": "/** \n * @deprecated Since 2.6, use method in {@link com.fasterxml.jackson.databind.type.TypeFactory}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.hasGetterSignature#370",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.hasGetterSignature(java.lang.reflect.Method)",
    "snippet": "@Deprecated hasGetterSignature(Method m)\n    {\n        // First: static methods can\u0027t be getters\n        if (Modifier.isStatic(m.getModifiers())) {\n            return false;\n        }\n        // Must take no args\n        Class\u003c?\u003e[] pts \u003d m.getParameterTypes();\n        if (pts !\u003d null \u0026\u0026 pts.length !\u003d 0) {\n            return false;\n        }\n        // Can\u0027t be a void method\n        if (Void.TYPE \u003d\u003d m.getReturnType()) {\n            return false;\n        }\n        // Otherwise looks ok:\n        return true;\n    }",
    "begin_line": 370,
    "end_line": 387,
    "comment": "/** \n * @deprecated Since 2.6 not used; may be removed before 3.x\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.getRootCause#399",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getRootCause(java.lang.Throwable)",
    "snippet": "public static Throwable getRootCause(Throwable t)\n    {\n        while (t.getCause() !\u003d null) {\n            t \u003d t.getCause();\n        }\n        return t;\n    }",
    "begin_line": 399,
    "end_line": 405,
    "comment": "/** \n * Method that can be used to find the \"root cause\", innermost of chained (wrapped) exceptions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.throwRootCause#413",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.throwRootCause(java.lang.Throwable)",
    "snippet": "public static void throwRootCause(Throwable t) throws Exception\n    {\n        t \u003d getRootCause(t);\n        if (t instanceof Exception) {\n            throw (Exception) t;\n        }\n        throw (Error) t;\n    }",
    "begin_line": 413,
    "end_line": 420,
    "comment": "/** \n * Method that will unwrap root causes of given Throwable, and throw the innermost  {@link Exception} or {@link Error} as is.This is useful in cases where mandatory wrapping is added, which is often done by Reflection API.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.throwRootCauseIfIOE#428",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.throwRootCauseIfIOE(java.lang.Throwable)",
    "snippet": "public static Throwable throwRootCauseIfIOE(Throwable t) throws IOException\n    {\n        t \u003d getRootCause(t);\n        if (t instanceof IOException) {\n            throw (IOException) t;\n        }\n        return t;\n    }",
    "begin_line": 428,
    "end_line": 435,
    "comment": "/** \n * Method that works like  {@link #throwRootCause} if (and only if)root cause is an  {@link IOException}; otherwise returns root cause\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.throwAsIAE#441",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.throwAsIAE(java.lang.Throwable)",
    "snippet": "public static void throwAsIAE(Throwable t)\n    {\n        throwAsIAE(t, t.getMessage());\n    }",
    "begin_line": 441,
    "end_line": 444,
    "comment": "/** \n * Method that will wrap \u0027t\u0027 as an  {@link IllegalArgumentException} if itis a checked exception; otherwise (runtime exception or error) throw as is\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.throwAsIAE#451",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.throwAsIAE(java.lang.Throwable, java.lang.String)",
    "snippet": "public static void throwAsIAE(Throwable t, String msg)\n    {\n        if (t instanceof RuntimeException) {\n            throw (RuntimeException) t;\n        }\n        if (t instanceof Error) {\n            throw (Error) t;\n        }\n        throw new IllegalArgumentException(msg, t);\n    }",
    "begin_line": 451,
    "end_line": 460,
    "comment": "/** \n * Method that will wrap \u0027t\u0027 as an  {@link IllegalArgumentException} (and withspecified message) if it is a checked exception; otherwise (runtime exception or error) throw as is\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.unwrapAndThrowAsIAE#467",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.unwrapAndThrowAsIAE(java.lang.Throwable)",
    "snippet": "public static void unwrapAndThrowAsIAE(Throwable t)\n    {\n        throwAsIAE(getRootCause(t));\n    }",
    "begin_line": 467,
    "end_line": 470,
    "comment": "/** \n * Method that will locate the innermost exception for given Throwable; and then wrap it as an  {@link IllegalArgumentException} if itis a checked exception; otherwise (runtime exception or error) throw as is\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.unwrapAndThrowAsIAE#477",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.unwrapAndThrowAsIAE(java.lang.Throwable, java.lang.String)",
    "snippet": "public static void unwrapAndThrowAsIAE(Throwable t, String msg)\n    {\n        throwAsIAE(getRootCause(t), msg);\n    }",
    "begin_line": 477,
    "end_line": 480,
    "comment": "/** \n * Method that will locate the innermost exception for given Throwable; and then wrap it as an  {@link IllegalArgumentException} if itis a checked exception; otherwise (runtime exception or error) throw as is\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.closeOnFailAndThrowAsIAE#491",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.closeOnFailAndThrowAsIAE(JsonGenerator, java.lang.Exception)",
    "snippet": "public static void closeOnFailAndThrowAsIAE(JsonGenerator g, Exception fail)\n            throws IOException\n    {\n        /* 04-Mar-2014, tatu: Let\u0027s try to prevent auto-closing of\n         *    structures, which typically causes more damage.\n         */\n        g.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);\n        try {\n            g.close();\n        } catch (Exception e) {\n            fail.addSuppressed(e);\n        }\n        if (fail instanceof IOException) {\n            throw (IOException) fail;\n        }\n        if (fail instanceof RuntimeException) {\n            throw (RuntimeException) fail;\n        }\n        throw new RuntimeException(fail);\n    }",
    "begin_line": 491,
    "end_line": 510,
    "comment": "/** \n * Helper method that encapsulate logic in trying to close output generator in case of failure; useful mostly in forcing flush()ing as otherwise error conditions tend to be hard to diagnose. However, it is often the case that output state may be corrupt so we need to be prepared for secondary exception without masking original one.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.closeOnFailAndThrowAsIAE#521",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.closeOnFailAndThrowAsIAE(JsonGenerator, java.io.Closeable, java.lang.Exception)",
    "snippet": "public static void closeOnFailAndThrowAsIAE(JsonGenerator g,\n            Closeable toClose, Exception fail)\n        throws IOException\n    {\n        if (g !\u003d null) {\n            g.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);\n            try {\n                g.close();\n            } catch (Exception e) {\n                fail.addSuppressed(e);\n            }\n        }\n        if (toClose !\u003d null) {\n            try {\n                toClose.close();\n            } catch (Exception e) {\n                fail.addSuppressed(e);\n            }\n        }\n        if (fail instanceof IOException) {\n            throw (IOException) fail;\n        }\n        if (fail instanceof RuntimeException) {\n            throw (RuntimeException) fail;\n        }\n        throw new RuntimeException(fail);\n    }",
    "begin_line": 521,
    "end_line": 547,
    "comment": "/** \n * Helper method that encapsulate logic in trying to close given  {@link Closeable}in case of failure; useful mostly in forcing flush()ing as otherwise error conditions tend to be hard to diagnose. However, it is often the case that output state may be corrupt so we need to be prepared for secondary exception without masking original one.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.createInstance#568",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.createInstance(java.lang.Class\u003cT\u003e, boolean)",
    "snippet": "public static \u003cT\u003e T createInstance(Class\u003cT\u003e cls, boolean canFixAccess)\n        throws IllegalArgumentException\n    {\n        Constructor\u003cT\u003e ctor \u003d findConstructor(cls, canFixAccess);\n        if (ctor \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Class \"+cls.getName()+\" has no default (no arg) constructor\");\n        }\n        try {\n            return ctor.newInstance();\n        } catch (Exception e) {\n            ClassUtil.unwrapAndThrowAsIAE(e, \"Failed to instantiate class \"+cls.getName()+\", problem: \"+e.getMessage());\n            return null;\n        }\n    }",
    "begin_line": 568,
    "end_line": 581,
    "comment": "/** \n * Method that can be called to try to create an instantiate of specified type. Instantiation is done using default no-argument constructor.\n * @param canFixAccess Whether it is possible to try to change accessrights of the default constructor (in case it is not publicly accessible) or not.\n * @throws IllegalArgumentException If instantiation fails for any reason;except for cases where constructor throws an unchecked exception (which will be passed as is)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.findConstructor#583",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findConstructor(java.lang.Class\u003cT\u003e, boolean)",
    "snippet": "public static \u003cT\u003e Constructor\u003cT\u003e findConstructor(Class\u003cT\u003e cls, boolean canFixAccess)\n        throws IllegalArgumentException\n    {\n        try {\n            Constructor\u003cT\u003e ctor \u003d cls.getDeclaredConstructor();\n            if (canFixAccess) {\n                checkAndFixAccess(ctor);\n            } else {\n                // Has to be public...\n                if (!Modifier.isPublic(ctor.getModifiers())) {\n                    throw new IllegalArgumentException(\"Default constructor for \"+cls.getName()+\" is not accessible (non-public?): not allowed to try modify access via Reflection: can not instantiate type\");\n                }\n            }\n            return ctor;\n        } catch (NoSuchMethodException e) {\n            ;\n        } catch (Exception e) {\n            ClassUtil.unwrapAndThrowAsIAE(e, \"Failed to find default constructor of class \"+cls.getName()+\", problem: \"+e.getMessage());\n        }\n        return null;\n    }",
    "begin_line": 583,
    "end_line": 603,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.defaultValue#615",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.defaultValue(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Object defaultValue(Class\u003c?\u003e cls)\n    {\n        if (cls \u003d\u003d Integer.TYPE) {\n            return Integer.valueOf(0);\n        }\n        if (cls \u003d\u003d Long.TYPE) {\n            return Long.valueOf(0L);\n        }\n        if (cls \u003d\u003d Boolean.TYPE) {\n            return Boolean.FALSE;\n        }\n        if (cls \u003d\u003d Double.TYPE) {\n            return Double.valueOf(0.0);\n        }\n        if (cls \u003d\u003d Float.TYPE) {\n            return Float.valueOf(0.0f);\n        }\n        if (cls \u003d\u003d Byte.TYPE) {\n            return Byte.valueOf((byte) 0);\n        }\n        if (cls \u003d\u003d Short.TYPE) {\n            return Short.valueOf((short) 0);\n        }\n        if (cls \u003d\u003d Character.TYPE) {\n            return \u0027\\0\u0027;\n        }\n        throw new IllegalArgumentException(\"Class \"+cls.getName()+\" is not a primitive type\");\n    }",
    "begin_line": 615,
    "end_line": 642,
    "comment": "/** \n * Helper method used to get default value for wrappers used for primitive types (0 for Integer etc)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.wrapperType#648",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.wrapperType(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e wrapperType(Class\u003c?\u003e primitiveType)\n    {\n        if (primitiveType \u003d\u003d Integer.TYPE) {\n            return Integer.class;\n        }\n        if (primitiveType \u003d\u003d Long.TYPE) {\n            return Long.class;\n        }\n        if (primitiveType \u003d\u003d Boolean.TYPE) {\n            return Boolean.class;\n        }\n        if (primitiveType \u003d\u003d Double.TYPE) {\n            return Double.class;\n        }\n        if (primitiveType \u003d\u003d Float.TYPE) {\n            return Float.class;\n        }\n        if (primitiveType \u003d\u003d Byte.TYPE) {\n            return Byte.class;\n        }\n        if (primitiveType \u003d\u003d Short.TYPE) {\n            return Short.class;\n        }\n        if (primitiveType \u003d\u003d Character.TYPE) {\n            return Character.class;\n        }\n        throw new IllegalArgumentException(\"Class \"+primitiveType.getName()+\" is not a primitive type\");\n    }",
    "begin_line": 648,
    "end_line": 675,
    "comment": "/** \n * Helper method for finding wrapper type for given primitive type (why isn\u0027t there one in JDK?)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.primitiveType#683",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.primitiveType(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e primitiveType(Class\u003c?\u003e type)\n    {\n        if (type.isPrimitive()) {\n            return type;\n        }\n        \n        if (type \u003d\u003d Integer.class) {\n            return Integer.TYPE;\n        }\n        if (type \u003d\u003d Long.class) {\n            return Long.TYPE;\n        }\n        if (type \u003d\u003d Boolean.class) {\n            return Boolean.TYPE;\n        }\n        if (type \u003d\u003d Double.class) {\n            return Double.TYPE;\n        }\n        if (type \u003d\u003d Float.class) {\n            return Float.TYPE;\n        }\n        if (type \u003d\u003d Byte.class) {\n            return Byte.TYPE;\n        }\n        if (type \u003d\u003d Short.class) {\n            return Short.TYPE;\n        }\n        if (type \u003d\u003d Character.class) {\n            return Character.TYPE;\n        }\n        return null;\n    }",
    "begin_line": 683,
    "end_line": 714,
    "comment": "/** \n * Method that can be used to find primitive type for given class if (but only if) it is either wrapper type or primitive type; returns `null` if type is neither.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.checkAndFixAccess#731",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.checkAndFixAccess(java.lang.reflect.Member)",
    "snippet": "@Deprecated\n    public static void checkAndFixAccess(Member member) {\n        checkAndFixAccess(member, false);\n    }",
    "begin_line": 731,
    "end_line": 733,
    "comment": "/** \n * Equivalent to call: \u003cpre\u003e checkAndFixAccess(member, false); \u003c/pre\u003e\n * @deprecated Since 2.7 call variant that takes boolean flag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.checkAndFixAccess#746",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.checkAndFixAccess(java.lang.reflect.Member, boolean)",
    "snippet": "public static void checkAndFixAccess(Member member, boolean force)\n    {\n        // We know all members are also accessible objects...\n        AccessibleObject ao \u003d (AccessibleObject) member;\n\n        /* 14-Jan-2009, tatu: It seems safe and potentially beneficial to\n         *   always to make it accessible (latter because it will force\n         *   skipping checks we have no use for...), so let\u0027s always call it.\n         */\n        try {\n            if (force || \n                    (!Modifier.isPublic(member.getModifiers())\n                            || !Modifier.isPublic(member.getDeclaringClass().getModifiers()))) {\n                ao.setAccessible(true);\n            }\n        } catch (SecurityException se) {\n            // 17-Apr-2009, tatu: Related to [JACKSON-101]: this can fail on platforms like\n            // Google App Engine); so let\u0027s only fail if we really needed it...\n            if (!ao.isAccessible()) {\n                Class\u003c?\u003e declClass \u003d member.getDeclaringClass();\n                throw new IllegalArgumentException(\"Can not access \"+member+\" (from class \"+declClass.getName()+\"; failed to set access: \"+se.getMessage());\n            }\n        }\n    }",
    "begin_line": 746,
    "end_line": 769,
    "comment": "/** \n * Method that is called if a  {@link Member} may need forced access,to force a field, method or constructor to be accessible: this is done by calling  {@link AccessibleObject#setAccessible(boolean)}.\n * @param member Accessor to call \u003ccode\u003esetAccessible()\u003c/code\u003e on.\n * @param force Whether to always try to make accessor accessible (true),or only if needed as per access rights (false)\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.findEnumType#783",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findEnumType(java.util.EnumSet\u003c?\u003e)",
    "snippet": "public static Class\u003c? extends Enum\u003c?\u003e\u003e findEnumType(EnumSet\u003c?\u003e s)\n    {\n        // First things first: if not empty, easy to determine\n        if (!s.isEmpty()) {\n            return findEnumType(s.iterator().next());\n        }\n        // Otherwise need to locate using an internal field\n        return EnumTypeLocator.instance.enumTypeFor(s);\n    }",
    "begin_line": 783,
    "end_line": 791,
    "comment": "/** \n * Helper method that can be used to dynamically figure out enumeration type of given  {@link EnumSet}, without having access to its declaration. Code is needed to work around design flaw in JDK.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.findEnumType#799",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findEnumType(java.util.EnumMap\u003c?,?\u003e)",
    "snippet": "public static Class\u003c? extends Enum\u003c?\u003e\u003e findEnumType(EnumMap\u003c?,?\u003e m)\n    {\n        if (!m.isEmpty()) {\n            return findEnumType(m.keySet().iterator().next());\n        }\n        // Otherwise need to locate using an internal field\n        return EnumTypeLocator.instance.enumTypeFor(m);\n    }",
    "begin_line": 799,
    "end_line": 806,
    "comment": "/** \n * Helper method that can be used to dynamically figure out enumeration type of given  {@link EnumSet}, without having access to its declaration. Code is needed to work around design flaw in JDK.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.findEnumType#815",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findEnumType(java.lang.Enum\u003c?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public static Class\u003c? extends Enum\u003c?\u003e\u003e findEnumType(Enum\u003c?\u003e en)\n    {\n        // enums with \"body\" are sub-classes of the formal type\n    \tClass\u003c?\u003e ec \u003d en.getClass();\n    \tif (ec.getSuperclass() !\u003d Enum.class) {\n    \t    ec \u003d ec.getSuperclass();\n    \t}\n    \treturn (Class\u003c? extends Enum\u003c?\u003e\u003e) ec;\n    }",
    "begin_line": 815,
    "end_line": 823,
    "comment": "/** \n * Helper method that can be used to dynamically figure out formal enumeration type (class) for given enumeration. This is either class of enum instance (for \"simple\" enumerations), or its superclass (for enums with instance fields or methods)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.findEnumType#832",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findEnumType(java.lang.Class\u003c?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    public static Class\u003c? extends Enum\u003c?\u003e\u003e findEnumType(Class\u003c?\u003e cls)\n    {\n        // enums with \"body\" are sub-classes of the formal type\n        if (cls.getSuperclass() !\u003d Enum.class) {\n            cls \u003d cls.getSuperclass();\n        }\n        return (Class\u003c? extends Enum\u003c?\u003e\u003e) cls;\n    }",
    "begin_line": 832,
    "end_line": 839,
    "comment": "/** \n * Helper method that can be used to dynamically figure out formal enumeration type (class) for given class of an enumeration value. This is either class of enum instance (for \"simple\" enumerations), or its superclass (for enums with instance fields or methods)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.findFirstAnnotatedEnumValue#852",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findFirstAnnotatedEnumValue(java.lang.Class\u003cjava.lang.Enum\u003c?\u003e\u003e, java.lang.Class\u003cT\u003e)",
    "snippet": "public static \u003cT extends Annotation\u003e Enum\u003c?\u003e findFirstAnnotatedEnumValue(Class\u003cEnum\u003c?\u003e\u003e enumClass, Class\u003cT\u003e annotationClass)\n    {\n        Field[] fields \u003d getDeclaredFields(enumClass);\n        for (Field field : fields) {\n            if (field.isEnumConstant()) {\n                Annotation defaultValueAnnotation \u003d field.getAnnotation(annotationClass);\n                if (defaultValueAnnotation !\u003d null) {\n                    final String name \u003d field.getName();\n                    for (Enum\u003c?\u003e enumValue : enumClass.getEnumConstants()) {\n                        if (name.equals(enumValue.name())) {\n                            return enumValue;\n                        }\n                    }\n                }\n            }\n        }\n        return null;\n    }",
    "begin_line": 852,
    "end_line": 869,
    "comment": "/** \n * A method that will look for the first Enum value annotated with the given Annotation. \u003cp\u003e If there\u0027s more than one value annotated, the first one found will be returned. Which one exactly is used is undetermined.\n * @param enumClass The Enum class to scan for a value with the given annotation\n * @param annotationClass The annotation to look for.\n * @return the Enum value annotated with the given Annotation or {@code null} if none is found.\n * @throws IllegalArgumentException if there\u0027s a reflection issue accessing the Enum\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.isJacksonStdImpl#884",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(java.lang.Object)",
    "snippet": "public static boolean isJacksonStdImpl(Object impl) {\n        return (impl !\u003d null) \u0026\u0026 isJacksonStdImpl(impl.getClass());\n    }",
    "begin_line": 884,
    "end_line": 886,
    "comment": "/** \n * Method that can be called to determine if given Object is the default implementation Jackson uses; as opposed to a custom serializer installed by a module or calling application. Determination is done using {@link JacksonStdImpl} annotation on handler (serializer, deserializer etc)class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.isJacksonStdImpl#888",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isJacksonStdImpl(Class\u003c?\u003e implClass) {\n        return (implClass.getAnnotation(JacksonStdImpl.class) !\u003d null);\n    }",
    "begin_line": 888,
    "end_line": 890,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.isBogusClass#892",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isBogusClass(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isBogusClass(Class\u003c?\u003e cls) {\n        return (cls \u003d\u003d Void.class || cls \u003d\u003d Void.TYPE\n                || cls \u003d\u003d com.fasterxml.jackson.databind.annotation.NoClass.class);\n    }",
    "begin_line": 892,
    "end_line": 895,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.isNonStaticInnerClass#897",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isNonStaticInnerClass(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isNonStaticInnerClass(Class\u003c?\u003e cls) {\n        return !Modifier.isStatic(cls.getModifiers())\n                \u0026\u0026 (getEnclosingClass(cls) !\u003d null);\n    }",
    "begin_line": 897,
    "end_line": 900,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.isObjectOrPrimitive#905",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isObjectOrPrimitive(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isObjectOrPrimitive(Class\u003c?\u003e cls) {\n        return (cls \u003d\u003d CLS_OBJECT) || cls.isPrimitive();\n    }",
    "begin_line": 905,
    "end_line": 907,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.getPackageName#921",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getPackageName(java.lang.Class\u003c?\u003e)",
    "snippet": "public static String getPackageName(Class\u003c?\u003e cls) {\n        Package pkg \u003d cls.getPackage();\n        return (pkg \u003d\u003d null) ? null : pkg.getName();\n    }",
    "begin_line": 921,
    "end_line": 924,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.hasEnclosingMethod#929",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.hasEnclosingMethod(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean hasEnclosingMethod(Class\u003c?\u003e cls) {\n        return !isObjectOrPrimitive(cls) \u0026\u0026 (cls.getEnclosingMethod() !\u003d null);\n    }",
    "begin_line": 929,
    "end_line": 931,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.getDeclaredFields#936",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getDeclaredFields(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Field[] getDeclaredFields(Class\u003c?\u003e cls) {\n        return cls.getDeclaredFields();\n    }",
    "begin_line": 936,
    "end_line": 938,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.getDeclaredMethods#943",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getDeclaredMethods(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Method[] getDeclaredMethods(Class\u003c?\u003e cls) {\n        return cls.getDeclaredMethods();\n    }",
    "begin_line": 943,
    "end_line": 945,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.findClassAnnotations#950",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findClassAnnotations(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Annotation[] findClassAnnotations(Class\u003c?\u003e cls) {\n        if (isObjectOrPrimitive(cls)) {\n            return NO_ANNOTATIONS;\n        }\n        return cls.getDeclaredAnnotations();\n    }",
    "begin_line": 950,
    "end_line": 955,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.getConstructors#960",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getConstructors(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Ctor[] getConstructors(Class\u003c?\u003e cls) {\n        // Note: can NOT skip abstract classes as they may be used with mix-ins\n        // and for regular use shouldn\u0027t really matter.\n        if (cls.isInterface() || isObjectOrPrimitive(cls)) {\n            return NO_CTORS;\n        }\n        Constructor\u003c?\u003e[] rawCtors \u003d cls.getDeclaredConstructors();\n        final int len \u003d rawCtors.length;\n        Ctor[] result \u003d new Ctor[len];\n        for (int i \u003d 0; i \u003c len; ++i) {\n            result[i] \u003d new Ctor(rawCtors[i]);\n        }\n        return result;\n    }",
    "begin_line": 960,
    "end_line": 973,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.getDeclaringClass#981",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getDeclaringClass(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e getDeclaringClass(Class\u003c?\u003e cls) {\n        return isObjectOrPrimitive(cls) ? null : cls.getDeclaringClass();\n    }",
    "begin_line": 981,
    "end_line": 983,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.getGenericSuperclass#988",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getGenericSuperclass(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Type getGenericSuperclass(Class\u003c?\u003e cls) {\n        return cls.getGenericSuperclass();\n    }",
    "begin_line": 988,
    "end_line": 990,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.getGenericInterfaces#995",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getGenericInterfaces(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Type[] getGenericInterfaces(Class\u003c?\u003e cls) {\n        return cls.getGenericInterfaces();\n    }",
    "begin_line": 995,
    "end_line": 997,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator.getEnclosingClass#1002",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getEnclosingClass(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e getEnclosingClass(Class\u003c?\u003e cls) {\n        // Caching does not seem worthwhile, as per profiling\n        return isObjectOrPrimitive(cls) ? null : cls.getEnclosingClass();\n    }",
    "begin_line": 1002,
    "end_line": 1005,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyIterator._interfaces#1007",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil._interfaces(java.lang.Class\u003c?\u003e)",
    "snippet": "private static Class\u003c?\u003e[] _interfaces(Class\u003c?\u003e cls) {\n        return cls.getInterfaces();\n    }",
    "begin_line": 1007,
    "end_line": 1009,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EnumTypeLocator.EnumTypeLocator#1028",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.EnumTypeLocator()",
    "snippet": "private EnumTypeLocator() {\n            //JDK uses following fields to store information about actual Enumeration\n            // type for EnumSets, EnumMaps...\n    \t        enumSetTypeField \u003d locateField(EnumSet.class, \"elementType\", Class.class);\n    \t        enumMapTypeField \u003d locateField(EnumMap.class, \"elementType\", Class.class);\n        }",
    "begin_line": 1028,
    "end_line": 1033,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EnumTypeLocator.enumTypeFor#1036",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.enumTypeFor(java.util.EnumSet\u003c?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n        public Class\u003c? extends Enum\u003c?\u003e\u003e enumTypeFor(EnumSet\u003c?\u003e set)\n        {\n            if (enumSetTypeField !\u003d null) {\n                return (Class\u003c? extends Enum\u003c?\u003e\u003e) get(set, enumSetTypeField);\n            }\n            throw new IllegalStateException(\"Can not figure out type for EnumSet (odd JDK platform?)\");\n        }",
    "begin_line": 1036,
    "end_line": 1042,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EnumTypeLocator.enumTypeFor#1045",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.enumTypeFor(java.util.EnumMap\u003c?,?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\")\n        public Class\u003c? extends Enum\u003c?\u003e\u003e enumTypeFor(EnumMap\u003c?,?\u003e set)\n        {\n            if (enumMapTypeField !\u003d null) {\n                return (Class\u003c? extends Enum\u003c?\u003e\u003e) get(set, enumMapTypeField);\n            }\n            throw new IllegalStateException(\"Can not figure out type for EnumMap (odd JDK platform?)\");\n        }",
    "begin_line": 1045,
    "end_line": 1051,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EnumTypeLocator.get#1053",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.get(java.lang.Object, java.lang.reflect.Field)",
    "snippet": "private Object get(Object bean, Field field)\n        {\n            try {\n                return field.get(bean);\n            } catch (Exception e) {\n                throw new IllegalArgumentException(e);\n            }\n        }",
    "begin_line": 1053,
    "end_line": 1060,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EnumTypeLocator.locateField#1062",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.locateField(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Class\u003c?\u003e)",
    "snippet": "private static Field locateField(Class\u003c?\u003e fromClass, String expectedName, Class\u003c?\u003e type)\n        {\n            Field found \u003d null;\n    \t        // First: let\u0027s see if we can find exact match:\n            Field[] fields \u003d getDeclaredFields(fromClass);\n    \t        for (Field f : fields) {\n    \t            if (expectedName.equals(f.getName()) \u0026\u0026 f.getType() \u003d\u003d type) {\n    \t                found \u003d f;\n    \t                break;\n    \t            }\n    \t        }\n    \t        // And if not, if there is just one field with the type, that field\n    \t        if (found \u003d\u003d null) {\n    \t            for (Field f : fields) {\n    \t                if (f.getType() \u003d\u003d type) {\n    \t                    // If more than one, can\u0027t choose\n    \t                    if (found !\u003d null) return null;\n    \t                    found \u003d f;\n    \t                }\n    \t            }\n    \t        }\n    \t        if (found !\u003d null) { // it\u0027s non-public, need to force accessible\n    \t            try {\n    \t                found.setAccessible(true);\n    \t            } catch (Throwable t) { }\n    \t        }\n    \t        return found;\n        }",
    "begin_line": 1062,
    "end_line": 1089,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Ctor.Ctor#1114",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.Ctor(java.lang.reflect.Constructor\u003c?\u003e)",
    "snippet": "public Ctor(Constructor\u003c?\u003e ctor) {\n            _ctor \u003d ctor;\n        }",
    "begin_line": 1114,
    "end_line": 1116,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Ctor.getConstructor#1118",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getConstructor()",
    "snippet": "public Constructor\u003c?\u003e getConstructor() {\n            return _ctor;\n        }",
    "begin_line": 1118,
    "end_line": 1120,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Ctor.getParamCount#1122",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getParamCount()",
    "snippet": "public int getParamCount() {\n            int c \u003d _paramCount;\n            if (c \u003c 0) {\n                c \u003d _ctor.getParameterTypes().length;\n                _paramCount \u003d c;\n            }\n            return c;\n        }",
    "begin_line": 1122,
    "end_line": 1129,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Ctor.getDeclaringClass#1131",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getDeclaringClass()",
    "snippet": "public Class\u003c?\u003e getDeclaringClass() {\n            return _ctor.getDeclaringClass();\n        }",
    "begin_line": 1131,
    "end_line": 1133,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Ctor.getDeclaredAnnotations#1136",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getDeclaredAnnotations()",
    "snippet": "public Annotation[] getDeclaredAnnotations() {\n            Annotation[] result \u003d _annotations;\n            if (result \u003d\u003d null) {\n                result \u003d _ctor.getDeclaredAnnotations();\n                _annotations \u003d result;\n            }\n            return result;\n        }",
    "begin_line": 1136,
    "end_line": 1143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Ctor.getParameterAnnotations#1146",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getParameterAnnotations()",
    "snippet": "public  Annotation[][] getParameterAnnotations() {\n            Annotation[][] result \u003d _paramAnnotations;\n            if (result \u003d\u003d null) {\n                result \u003d _ctor.getParameterAnnotations();\n                _paramAnnotations \u003d result;\n            }\n            return result;\n        }",
    "begin_line": 1146,
    "end_line": 1153,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.LRUMap#32",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.LRUMap(int, int)",
    "snippet": "public LRUMap(int initialEntries, int maxEntries)\n    {\n        // We\u0027ll use concurrency level of 4, seems reasonable\n        _map \u003d new ConcurrentHashMap\u003cK,V\u003e(initialEntries, 0.8f, 4);\n        _maxEntries \u003d maxEntries;\n    }",
    "begin_line": 32,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.put#39",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.put(K, V)",
    "snippet": "public V put(K key, V value) {\n        if (_map.size() \u003e\u003d _maxEntries) {\n            // double-locking, yes, but safe here; trying to avoid \"clear storms\"\n            synchronized (this) {\n                if (_map.size() \u003e\u003d _maxEntries) {\n                    clear();\n                }\n            }\n        }\n        return _map.put(key, value);\n    }",
    "begin_line": 39,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.putIfAbsent#54",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.putIfAbsent(K, V)",
    "snippet": "public V putIfAbsent(K key, V value) {\n        // not 100% optimal semantically, but better from correctness (never exceeds\n        // defined maximum) and close enough all in all:\n        if (_map.size() \u003e\u003d _maxEntries) {\n            synchronized (this) {\n                if (_map.size() \u003e\u003d _maxEntries) {\n                    clear();\n                }\n            }\n        }\n        return _map.putIfAbsent(key, value);\n    }",
    "begin_line": 54,
    "end_line": 65,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.get#68",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.get(java.lang.Object)",
    "snippet": "public V get(Object key) {  return _map.get(key); }",
    "begin_line": 68,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.clear#70",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.clear()",
    "snippet": "public void clear() { _map.clear(); }",
    "begin_line": 70,
    "end_line": 70,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.size#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.size()",
    "snippet": "public int size() { return _map.size(); }",
    "begin_line": 71,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.readObject#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream in) throws IOException {\n        _jdkSerializeMaxEntries \u003d in.readInt();\n    }",
    "begin_line": 87,
    "end_line": 89,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.writeObject#91",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream out) throws IOException {\n        out.writeInt(_jdkSerializeMaxEntries);\n    }",
    "begin_line": 91,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.readResolve#95",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.readResolve()",
    "snippet": "protected Object readResolve() {\n        return new LRUMap\u003cObject,Object\u003e(_jdkSerializeMaxEntries, _jdkSerializeMaxEntries);\n    }",
    "begin_line": 95,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]