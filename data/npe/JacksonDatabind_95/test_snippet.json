[
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.getFoobar()",
    "snippet": "public \u003cT extends Comparable\u003cT\u003e\u003e T getFoobar() { return null; }",
    "begin_line": 57,
    "end_line": 57,
    "comment": "",
    "child_ranges": [
      "(line 57,col 58)-(line 57,col 69)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testSimpleTypes()",
    "snippet": "public void testSimpleTypes()\n    {\n        Class\u003c?\u003e[] classes \u003d new Class\u003c?\u003e[] {\n            boolean.class, byte.class, char.class,\n                short.class, int.class, long.class,\n                float.class, double.class,\n\n            Boolean.class, Byte.class, Character.class,\n                Short.class, Integer.class, Long.class,\n                Float.class, Double.class,\n\n                String.class,\n                Object.class,\n\n                Calendar.class,\n                Date.class,\n        };\n\n        TypeFactory tf \u003d TypeFactory.defaultInstance();\n        for (Class\u003c?\u003e clz : classes) {\n            assertSame(clz, tf.constructType(clz).getRawClass());\n            assertSame(clz, tf.constructType(clz).getRawClass());\n        }\n    }",
    "begin_line": 84,
    "end_line": 107,
    "comment": "",
    "child_ranges": [
      "(line 86,col 9)-(line 100,col 10)",
      "(line 102,col 9)-(line 102,col 55)",
      "(line 103,col 9)-(line 106,col 9)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testArrays()",
    "snippet": "public void testArrays()\n    {\n        Class\u003c?\u003e[] classes \u003d new Class\u003c?\u003e[] {\n            boolean[].class, byte[].class, char[].class,\n                short[].class, int[].class, long[].class,\n                float[].class, double[].class,\n\n                String[].class, Object[].class,\n                Calendar[].class,\n        };\n\n        TypeFactory tf \u003d TypeFactory.defaultInstance();\n        for (Class\u003c?\u003e clz : classes) {\n            assertSame(clz, tf.constructType(clz).getRawClass());\n            Class\u003c?\u003e elemType \u003d clz.getComponentType();\n            assertSame(clz, tf.constructArrayType(elemType).getRawClass());\n        }\n    }",
    "begin_line": 109,
    "end_line": 126,
    "comment": "",
    "child_ranges": [
      "(line 111,col 9)-(line 118,col 10)",
      "(line 120,col 9)-(line 120,col 55)",
      "(line 121,col 9)-(line 125,col 9)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testProperties()",
    "snippet": "public void testProperties()\n    {\n        TypeFactory tf \u003d TypeFactory.defaultInstance();\n        JavaType t \u003d tf.constructType(Properties.class);\n        assertEquals(MapType.class, t.getClass());\n        assertSame(Properties.class, t.getRawClass());\n\n        MapType mt \u003d (MapType) t;\n\n        // so far so good. But how about parameterization?\n        assertSame(String.class, mt.getKeyType().getRawClass());\n        assertSame(String.class, mt.getContentType().getRawClass());\n    }",
    "begin_line": 129,
    "end_line": 141,
    "comment": "",
    "child_ranges": [
      "(line 131,col 9)-(line 131,col 55)",
      "(line 132,col 9)-(line 132,col 56)",
      "(line 133,col 9)-(line 133,col 50)",
      "(line 134,col 9)-(line 134,col 54)",
      "(line 136,col 9)-(line 136,col 33)",
      "(line 139,col 9)-(line 139,col 64)",
      "(line 140,col 9)-(line 140,col 68)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testIterator()",
    "snippet": "public void testIterator()\n    {\n        TypeFactory tf \u003d TypeFactory.defaultInstance();\n        JavaType t \u003d tf.constructType(new TypeReference\u003cIterator\u003cString\u003e\u003e() { });\n        assertEquals(SimpleType.class, t.getClass());\n        assertSame(Iterator.class, t.getRawClass());\n        assertEquals(1, t.containedTypeCount());\n        assertEquals(tf.constructType(String.class), t.containedType(0));\n        assertNull(t.containedType(1));\n    }",
    "begin_line": 143,
    "end_line": 152,
    "comment": "",
    "child_ranges": [
      "(line 145,col 9)-(line 145,col 55)",
      "(line 146,col 9)-(line 146,col 81)",
      "(line 147,col 9)-(line 147,col 53)",
      "(line 148,col 9)-(line 148,col 52)",
      "(line 149,col 9)-(line 149,col 48)",
      "(line 150,col 9)-(line 150,col 73)",
      "(line 151,col 9)-(line 151,col 39)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testParametricTypes()",
    "snippet": "@SuppressWarnings(\"deprecation\")\n    public void testParametricTypes()\n    {\n        TypeFactory tf \u003d TypeFactory.defaultInstance();\n        // first, simple class based\n        JavaType t \u003d tf.constructParametrizedType(ArrayList.class, Collection.class, String.class); // ArrayList\u003cString\u003e\n        assertEquals(CollectionType.class, t.getClass());\n        JavaType strC \u003d tf.constructType(String.class);\n        assertEquals(1, t.containedTypeCount());\n        assertEquals(strC, t.containedType(0));\n        assertNull(t.containedType(1));\n\n        // Then using JavaType\n        JavaType t2 \u003d tf.constructParametrizedType(Map.class, Map.class, strC, t); // Map\u003cString,ArrayList\u003cString\u003e\u003e\n        // should actually produce a MapType\n        assertEquals(MapType.class, t2.getClass());\n        assertEquals(2, t2.containedTypeCount());\n        assertEquals(strC, t2.containedType(0));\n        assertEquals(t, t2.containedType(1));\n        assertNull(t2.containedType(2));\n\n        // and then custom generic type as well\n        JavaType custom \u003d tf.constructParametrizedType(SingleArgGeneric.class, SingleArgGeneric.class,\n                String.class);\n        assertEquals(SimpleType.class, custom.getClass());\n        assertEquals(1, custom.containedTypeCount());\n        assertEquals(strC, custom.containedType(0));\n        assertNull(custom.containedType(1));\n\n        // should also be able to access variable name:\n        assertEquals(\"X\", custom.containedTypeName(0));\n\n        // And finally, ensure that we can\u0027t create invalid combinations\n        try {\n            // Maps must take 2 type parameters, not just one\n            tf.constructParametrizedType(Map.class, Map.class, strC);\n        } catch (IllegalArgumentException e) {\n            verifyException(e, \"Can not create TypeBindings for class java.util.Map\");\n        }\n\n        try {\n            // Type only accepts one type param\n            tf.constructParametrizedType(SingleArgGeneric.class, SingleArgGeneric.class, strC, strC);\n        } catch (IllegalArgumentException e) {\n            verifyException(e, \"Can not create TypeBindings for class \");\n        }\n    }",
    "begin_line": 159,
    "end_line": 204,
    "comment": "/** \n * Test for verifying that parametric types can be constructed programmatically\n */\n",
    "child_ranges": [
      "(line 161,col 9)-(line 161,col 55)",
      "(line 163,col 9)-(line 163,col 99)",
      "(line 164,col 9)-(line 164,col 57)",
      "(line 165,col 9)-(line 165,col 55)",
      "(line 166,col 9)-(line 166,col 48)",
      "(line 167,col 9)-(line 167,col 47)",
      "(line 168,col 9)-(line 168,col 39)",
      "(line 171,col 9)-(line 171,col 82)",
      "(line 173,col 9)-(line 173,col 51)",
      "(line 174,col 9)-(line 174,col 49)",
      "(line 175,col 9)-(line 175,col 48)",
      "(line 176,col 9)-(line 176,col 45)",
      "(line 177,col 9)-(line 177,col 40)",
      "(line 180,col 9)-(line 181,col 30)",
      "(line 182,col 9)-(line 182,col 58)",
      "(line 183,col 9)-(line 183,col 53)",
      "(line 184,col 9)-(line 184,col 52)",
      "(line 185,col 9)-(line 185,col 44)",
      "(line 188,col 9)-(line 188,col 55)",
      "(line 191,col 9)-(line 196,col 9)",
      "(line 198,col 9)-(line 203,col 9)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testCanonicalNames()",
    "snippet": "public void testCanonicalNames()\n    {\n        TypeFactory tf \u003d TypeFactory.defaultInstance();\n        JavaType t \u003d tf.constructType(java.util.Calendar.class);\n        String can \u003d t.toCanonical();\n        assertEquals(\"java.util.Calendar\", can);\n        assertEquals(t, tf.constructFromCanonical(can));\n\n        // Generic maps and collections will default to Object.class if type-erased\n        t \u003d tf.constructType(java.util.ArrayList.class);\n        can \u003d t.toCanonical();\n        assertEquals(\"java.util.ArrayList\u003cjava.lang.Object\u003e\", can);\n        assertEquals(t, tf.constructFromCanonical(can));\n\n        t \u003d tf.constructType(java.util.TreeMap.class);\n        can \u003d t.toCanonical();\n        assertEquals(\"java.util.TreeMap\u003cjava.lang.Object,java.lang.Object\u003e\", can);\n        assertEquals(t, tf.constructFromCanonical(can));\n\n        // And then EnumMap (actual use case for us)\n        t \u003d tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class);\n        can \u003d t.toCanonical();\n        assertEquals(\"java.util.EnumMap\u003ccom.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String\u003e\",\n                can);\n        assertEquals(t, tf.constructFromCanonical(can));\n\n        // [databind#1941]: allow \"raw\" types too\n\n        t \u003d tf.constructFromCanonical(\"java.util.List\");\n        assertEquals(List.class, t.getRawClass());\n        assertEquals(CollectionType.class, t.getClass());\n        // 01-Mar-2018, tatu: not 100% should we expect type parameters here...\n        //    But currently we do NOT get any\n        /*\n        assertEquals(1, t.containedTypeCount());\n        assertEquals(Object.class, t.containedType(0).getRawClass());\n        */\n        assertEquals(Object.class, t.getContentType().getRawClass());\n        can \u003d t.toCanonical();\n        assertEquals(\"java.util.List\u003cjava.lang.Object\u003e\", can);\n        assertEquals(t, tf.constructFromCanonical(can));\n    }",
    "begin_line": 209,
    "end_line": 250,
    "comment": "/** \n * Test for checking that canonical name handling works ok\n */\n",
    "child_ranges": [
      "(line 211,col 9)-(line 211,col 55)",
      "(line 212,col 9)-(line 212,col 64)",
      "(line 213,col 9)-(line 213,col 37)",
      "(line 214,col 9)-(line 214,col 48)",
      "(line 215,col 9)-(line 215,col 56)",
      "(line 218,col 9)-(line 218,col 56)",
      "(line 219,col 9)-(line 219,col 30)",
      "(line 220,col 9)-(line 220,col 67)",
      "(line 221,col 9)-(line 221,col 56)",
      "(line 223,col 9)-(line 223,col 54)",
      "(line 224,col 9)-(line 224,col 30)",
      "(line 225,col 9)-(line 225,col 82)",
      "(line 226,col 9)-(line 226,col 56)",
      "(line 229,col 9)-(line 229,col 85)",
      "(line 230,col 9)-(line 230,col 30)",
      "(line 231,col 9)-(line 232,col 21)",
      "(line 233,col 9)-(line 233,col 56)",
      "(line 237,col 9)-(line 237,col 56)",
      "(line 238,col 9)-(line 238,col 50)",
      "(line 239,col 9)-(line 239,col 57)",
      "(line 246,col 9)-(line 246,col 69)",
      "(line 247,col 9)-(line 247,col 30)",
      "(line 248,col 9)-(line 248,col 62)",
      "(line 249,col 9)-(line 249,col 56)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testCanonicalWithSpaces()",
    "snippet": "@SuppressWarnings(\"serial\")\n    public void testCanonicalWithSpaces()\n    {\n        TypeFactory tf \u003d TypeFactory.defaultInstance();\n        Object objects \u003d new TreeMap\u003cObject, Object\u003e() { }; // to get subtype\n        String reflectTypeName \u003d objects.getClass().getGenericSuperclass().toString();\n        JavaType t1 \u003d tf.constructType(objects.getClass().getGenericSuperclass());\n        // This will throw an Exception if you don\u0027t remove all white spaces from the String.\n        JavaType t2 \u003d tf.constructFromCanonical(reflectTypeName);\n        assertNotNull(t2);\n        assertEquals(t2, t1);\n    }",
    "begin_line": 254,
    "end_line": 264,
    "comment": "",
    "child_ranges": [
      "(line 256,col 9)-(line 256,col 55)",
      "(line 257,col 9)-(line 257,col 59)",
      "(line 258,col 9)-(line 258,col 86)",
      "(line 259,col 9)-(line 259,col 82)",
      "(line 261,col 9)-(line 261,col 65)",
      "(line 262,col 9)-(line 262,col 26)",
      "(line 263,col 9)-(line 263,col 29)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testCollections()",
    "snippet": "public void testCollections()\n    {\n        // Ok, first: let\u0027s test what happens when we pass \u0027raw\u0027 Collection:\n        TypeFactory tf \u003d TypeFactory.defaultInstance();\n        JavaType t \u003d tf.constructType(ArrayList.class);\n        assertEquals(CollectionType.class, t.getClass());\n        assertSame(ArrayList.class, t.getRawClass());\n\n        // And then the proper way\n        t \u003d tf.constructType(new TypeReference\u003cArrayList\u003cString\u003e\u003e() { });\n        assertEquals(CollectionType.class, t.getClass());\n        assertSame(ArrayList.class, t.getRawClass());\n\n        JavaType elemType \u003d ((CollectionType) t).getContentType();\n        assertNotNull(elemType);\n        assertSame(SimpleType.class, elemType.getClass());\n        assertSame(String.class, elemType.getRawClass());\n\n        // And alternate method too\n        t \u003d tf.constructCollectionType(ArrayList.class, String.class);\n        assertEquals(CollectionType.class, t.getClass());\n        assertSame(String.class, ((CollectionType) t).getContentType().getRawClass());\n    }",
    "begin_line": 272,
    "end_line": 294,
    "comment": "",
    "child_ranges": [
      "(line 275,col 9)-(line 275,col 55)",
      "(line 276,col 9)-(line 276,col 55)",
      "(line 277,col 9)-(line 277,col 57)",
      "(line 278,col 9)-(line 278,col 53)",
      "(line 281,col 9)-(line 281,col 73)",
      "(line 282,col 9)-(line 282,col 57)",
      "(line 283,col 9)-(line 283,col 53)",
      "(line 285,col 9)-(line 285,col 66)",
      "(line 286,col 9)-(line 286,col 32)",
      "(line 287,col 9)-(line 287,col 58)",
      "(line 288,col 9)-(line 288,col 57)",
      "(line 291,col 9)-(line 291,col 70)",
      "(line 292,col 9)-(line 292,col 57)",
      "(line 293,col 9)-(line 293,col 86)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testCollectionTypesRefined()",
    "snippet": "public void testCollectionTypesRefined()\n    {\n        TypeFactory tf \u003d newTypeFactory();\n        JavaType type \u003d tf.constructType(new TypeReference\u003cList\u003cLong\u003e\u003e() { });\n        assertEquals(List.class, type.getRawClass());\n        assertEquals(Long.class, type.getContentType().getRawClass());\n        // No super-class, since it\u0027s an interface:\n        assertNull(type.getSuperClass());\n\n        // But then refine to reflect sub-classing\n        JavaType subtype \u003d tf.constructSpecializedType(type, ArrayList.class);\n        assertEquals(ArrayList.class, subtype.getRawClass());\n        assertEquals(Long.class, subtype.getContentType().getRawClass());\n\n        // but with refinement, should have non-null super class\n        JavaType superType \u003d subtype.getSuperClass();\n        assertNotNull(superType);\n        assertEquals(AbstractList.class, superType.getRawClass());\n    }",
    "begin_line": 297,
    "end_line": 315,
    "comment": "",
    "child_ranges": [
      "(line 299,col 9)-(line 299,col 42)",
      "(line 300,col 9)-(line 300,col 78)",
      "(line 301,col 9)-(line 301,col 53)",
      "(line 302,col 9)-(line 302,col 70)",
      "(line 304,col 9)-(line 304,col 41)",
      "(line 307,col 9)-(line 307,col 78)",
      "(line 308,col 9)-(line 308,col 61)",
      "(line 309,col 9)-(line 309,col 73)",
      "(line 312,col 9)-(line 312,col 53)",
      "(line 313,col 9)-(line 313,col 33)",
      "(line 314,col 9)-(line 314,col 66)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testMaps()",
    "snippet": "public void testMaps()\n    {\n        TypeFactory tf \u003d newTypeFactory();\n\n        // Ok, first: let\u0027s test what happens when we pass \u0027raw\u0027 Map:\n        JavaType t \u003d tf.constructType(HashMap.class);\n        assertEquals(MapType.class, t.getClass());\n        assertSame(HashMap.class, t.getRawClass());\n\n        // Then explicit construction\n        t \u003d tf.constructMapType(TreeMap.class, String.class, Integer.class);\n        assertEquals(MapType.class, t.getClass());\n        assertSame(String.class, ((MapType) t).getKeyType().getRawClass());\n        assertSame(Integer.class, ((MapType) t).getContentType().getRawClass());\n\n        // And then with TypeReference\n        t \u003d tf.constructType(new TypeReference\u003cHashMap\u003cString,Integer\u003e\u003e() { });\n        assertEquals(MapType.class, t.getClass());\n        assertSame(HashMap.class, t.getRawClass());\n        MapType mt \u003d (MapType) t;\n        assertEquals(tf.constructType(String.class), mt.getKeyType());\n        assertEquals(tf.constructType(Integer.class), mt.getContentType());\n\n        t \u003d tf.constructType(new TypeReference\u003cLongValuedMap\u003cBoolean\u003e\u003e() { });\n        assertEquals(MapType.class, t.getClass());\n        assertSame(LongValuedMap.class, t.getRawClass());\n        mt \u003d (MapType) t;\n        assertEquals(tf.constructType(Boolean.class), mt.getKeyType());\n        assertEquals(tf.constructType(Long.class), mt.getContentType());\n\n        JavaType type \u003d tf.constructType(new TypeReference\u003cMap\u003cString,Boolean\u003e\u003e() { });\n        MapType mapType \u003d (MapType) type;\n        assertEquals(tf.constructType(String.class), mapType.getKeyType());\n        assertEquals(tf.constructType(Boolean.class), mapType.getContentType());\n    }",
    "begin_line": 323,
    "end_line": 357,
    "comment": "",
    "child_ranges": [
      "(line 325,col 9)-(line 325,col 42)",
      "(line 328,col 9)-(line 328,col 53)",
      "(line 329,col 9)-(line 329,col 50)",
      "(line 330,col 9)-(line 330,col 51)",
      "(line 333,col 9)-(line 333,col 76)",
      "(line 334,col 9)-(line 334,col 50)",
      "(line 335,col 9)-(line 335,col 75)",
      "(line 336,col 9)-(line 336,col 80)",
      "(line 339,col 9)-(line 339,col 79)",
      "(line 340,col 9)-(line 340,col 50)",
      "(line 341,col 9)-(line 341,col 51)",
      "(line 342,col 9)-(line 342,col 33)",
      "(line 343,col 9)-(line 343,col 70)",
      "(line 344,col 9)-(line 344,col 75)",
      "(line 346,col 9)-(line 346,col 78)",
      "(line 347,col 9)-(line 347,col 50)",
      "(line 348,col 9)-(line 348,col 57)",
      "(line 349,col 9)-(line 349,col 25)",
      "(line 350,col 9)-(line 350,col 71)",
      "(line 351,col 9)-(line 351,col 72)",
      "(line 353,col 9)-(line 353,col 87)",
      "(line 354,col 9)-(line 354,col 41)",
      "(line 355,col 9)-(line 355,col 75)",
      "(line 356,col 9)-(line 356,col 80)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testMapTypesRefined()",
    "snippet": "public void testMapTypesRefined()\n    {\n        TypeFactory tf \u003d newTypeFactory();\n        JavaType type \u003d tf.constructType(new TypeReference\u003cMap\u003cString,List\u003cInteger\u003e\u003e\u003e() { });\n        MapType mapType \u003d (MapType) type;\n        assertEquals(Map.class, mapType.getRawClass());\n        assertEquals(String.class, mapType.getKeyType().getRawClass());\n        assertEquals(List.class, mapType.getContentType().getRawClass());\n        assertEquals(Integer.class, mapType.getContentType().getContentType().getRawClass());\n        // No super-class, since it\u0027s an interface:\n        assertNull(type.getSuperClass());\n        \n        // But then refine to reflect sub-classing\n        JavaType subtype \u003d tf.constructSpecializedType(type, LinkedHashMap.class);\n        assertEquals(LinkedHashMap.class, subtype.getRawClass());\n        assertEquals(String.class, subtype.getKeyType().getRawClass());\n        assertEquals(List.class, subtype.getContentType().getRawClass());\n        assertEquals(Integer.class, subtype.getContentType().getContentType().getRawClass());\n\n        // but with refinement, should have non-null super class\n        // 20-Oct-2015, tatu: For now refinement does not faithfully replicate the\n        //    structure, it only retains most important information. Here it means\n        //    that actually existing super-classes are skipped, and only original\n        //    type is linked as expected\n\n        JavaType superType \u003d subtype.getSuperClass();\n        assertNotNull(superType);\n        assertEquals(HashMap.class, superType.getRawClass());\n        // which also should have proper typing\n        assertEquals(String.class, superType.getKeyType().getRawClass());\n        assertEquals(List.class, superType.getContentType().getRawClass());\n        assertEquals(Integer.class, superType.getContentType().getContentType().getRawClass());\n    }",
    "begin_line": 360,
    "end_line": 392,
    "comment": "",
    "child_ranges": [
      "(line 362,col 9)-(line 362,col 42)",
      "(line 363,col 9)-(line 363,col 93)",
      "(line 364,col 9)-(line 364,col 41)",
      "(line 365,col 9)-(line 365,col 55)",
      "(line 366,col 9)-(line 366,col 71)",
      "(line 367,col 9)-(line 367,col 73)",
      "(line 368,col 9)-(line 368,col 93)",
      "(line 370,col 9)-(line 370,col 41)",
      "(line 373,col 9)-(line 373,col 82)",
      "(line 374,col 9)-(line 374,col 65)",
      "(line 375,col 9)-(line 375,col 71)",
      "(line 376,col 9)-(line 376,col 73)",
      "(line 377,col 9)-(line 377,col 93)",
      "(line 385,col 9)-(line 385,col 53)",
      "(line 386,col 9)-(line 386,col 33)",
      "(line 387,col 9)-(line 387,col 61)",
      "(line 389,col 9)-(line 389,col 73)",
      "(line 390,col 9)-(line 390,col 75)",
      "(line 391,col 9)-(line 391,col 95)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testMapTypesRaw()",
    "snippet": "public void testMapTypesRaw()\n    {\n        TypeFactory tf \u003d TypeFactory.defaultInstance();\n        JavaType type \u003d tf.constructType(HashMap.class);\n        MapType mapType \u003d (MapType) type;\n        assertEquals(tf.constructType(Object.class), mapType.getKeyType());\n        assertEquals(tf.constructType(Object.class), mapType.getContentType());        \n    }",
    "begin_line": 394,
    "end_line": 401,
    "comment": "",
    "child_ranges": [
      "(line 396,col 9)-(line 396,col 55)",
      "(line 397,col 9)-(line 397,col 56)",
      "(line 398,col 9)-(line 398,col 41)",
      "(line 399,col 9)-(line 399,col 75)",
      "(line 400,col 9)-(line 400,col 79)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testMapTypesAdvanced()",
    "snippet": "public void testMapTypesAdvanced()\n    {\n        TypeFactory tf \u003d TypeFactory.defaultInstance();\n        JavaType type \u003d tf.constructType(MyMap.class);\n        MapType mapType \u003d (MapType) type;\n        assertEquals(tf.constructType(String.class), mapType.getKeyType());\n        assertEquals(tf.constructType(Long.class), mapType.getContentType());\n        \n        type \u003d tf.constructType(MapInterface.class);\n        mapType \u003d (MapType) type;\n\n        assertEquals(tf.constructType(String.class), mapType.getKeyType());\n        assertEquals(tf.constructType(Integer.class), mapType.getContentType());\n\n        type \u003d tf.constructType(MyStringIntMap.class);\n        mapType \u003d (MapType) type;\n        assertEquals(tf.constructType(String.class), mapType.getKeyType());\n        assertEquals(tf.constructType(Integer.class), mapType.getContentType());\n    }",
    "begin_line": 403,
    "end_line": 421,
    "comment": "",
    "child_ranges": [
      "(line 405,col 9)-(line 405,col 55)",
      "(line 406,col 9)-(line 406,col 54)",
      "(line 407,col 9)-(line 407,col 41)",
      "(line 408,col 9)-(line 408,col 75)",
      "(line 409,col 9)-(line 409,col 77)",
      "(line 411,col 9)-(line 411,col 52)",
      "(line 412,col 9)-(line 412,col 33)",
      "(line 414,col 9)-(line 414,col 75)",
      "(line 415,col 9)-(line 415,col 80)",
      "(line 417,col 9)-(line 417,col 54)",
      "(line 418,col 9)-(line 418,col 33)",
      "(line 419,col 9)-(line 419,col 75)",
      "(line 420,col 9)-(line 420,col 80)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testMapTypesSneaky()",
    "snippet": "public void testMapTypesSneaky()\n    {\n        TypeFactory tf \u003d TypeFactory.defaultInstance();\n        JavaType type \u003d tf.constructType(IntLongMap.class);\n        MapType mapType \u003d (MapType) type;\n        assertEquals(tf.constructType(Integer.class), mapType.getKeyType());\n        assertEquals(tf.constructType(Long.class), mapType.getContentType());\n    }",
    "begin_line": 427,
    "end_line": 434,
    "comment": "/** \n * Specific test to verify that complicate name mangling schemes do not fool type resolver\n */\n",
    "child_ranges": [
      "(line 429,col 9)-(line 429,col 55)",
      "(line 430,col 9)-(line 430,col 59)",
      "(line 431,col 9)-(line 431,col 41)",
      "(line 432,col 9)-(line 432,col 76)",
      "(line 433,col 9)-(line 433,col 77)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testSneakyFieldTypes()",
    "snippet": "public void testSneakyFieldTypes() throws Exception\n    {\n        TypeFactory tf \u003d TypeFactory.defaultInstance();\n        Field field \u003d SneakyBean.class.getDeclaredField(\"intMap\");\n        JavaType type \u003d tf.constructType(field.getGenericType());\n        assertTrue(type instanceof MapType);\n        MapType mapType \u003d (MapType) type;\n        assertEquals(tf.constructType(Integer.class), mapType.getKeyType());\n        assertEquals(tf.constructType(Long.class), mapType.getContentType());\n\n        field \u003d SneakyBean.class.getDeclaredField(\"longList\");\n        type \u003d tf.constructType(field.getGenericType());\n        assertTrue(type instanceof CollectionType);\n        CollectionType collectionType \u003d (CollectionType) type;\n        assertEquals(tf.constructType(Long.class), collectionType.getContentType());\n    }",
    "begin_line": 439,
    "end_line": 454,
    "comment": "/** \n * Plus sneaky types may be found via introspection as well.\n */\n",
    "child_ranges": [
      "(line 441,col 9)-(line 441,col 55)",
      "(line 442,col 9)-(line 442,col 66)",
      "(line 443,col 9)-(line 443,col 65)",
      "(line 444,col 9)-(line 444,col 44)",
      "(line 445,col 9)-(line 445,col 41)",
      "(line 446,col 9)-(line 446,col 76)",
      "(line 447,col 9)-(line 447,col 77)",
      "(line 449,col 9)-(line 449,col 62)",
      "(line 450,col 9)-(line 450,col 56)",
      "(line 451,col 9)-(line 451,col 51)",
      "(line 452,col 9)-(line 452,col 62)",
      "(line 453,col 9)-(line 453,col 84)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testSneakyBeanProperties()",
    "snippet": "public void testSneakyBeanProperties() throws Exception\n    {\n        ObjectMapper mapper \u003d new ObjectMapper();\n        StringLongMapBean bean \u003d mapper.readValue(\"{\\\"value\\\":{\\\"a\\\":123}}\", StringLongMapBean.class);\n        assertNotNull(bean);\n        Map\u003cString,Long\u003e map \u003d bean.value;\n        assertEquals(1, map.size());\n        assertEquals(Long.valueOf(123), map.get(\"a\"));\n\n        StringListBean bean2 \u003d mapper.readValue(\"{\\\"value\\\":[\\\"...\\\"]}\", StringListBean.class);\n        assertNotNull(bean2);\n        List\u003cString\u003e list \u003d bean2.value;\n        assertSame(GenericList.class, list.getClass());\n        assertEquals(1, list.size());\n        assertEquals(\"...\", list.get(0));\n    }",
    "begin_line": 459,
    "end_line": 474,
    "comment": "/** \n * Looks like type handling actually differs for properties, too.\n */\n",
    "child_ranges": [
      "(line 461,col 9)-(line 461,col 49)",
      "(line 462,col 9)-(line 462,col 102)",
      "(line 463,col 9)-(line 463,col 28)",
      "(line 464,col 9)-(line 464,col 42)",
      "(line 465,col 9)-(line 465,col 36)",
      "(line 466,col 9)-(line 466,col 54)",
      "(line 468,col 9)-(line 468,col 95)",
      "(line 469,col 9)-(line 469,col 29)",
      "(line 470,col 9)-(line 470,col 40)",
      "(line 471,col 9)-(line 471,col 55)",
      "(line 472,col 9)-(line 472,col 37)",
      "(line 473,col 9)-(line 473,col 41)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testSneakySelfRefs()",
    "snippet": "public void testSneakySelfRefs() throws Exception\n    {\n        ObjectMapper mapper \u003d new ObjectMapper();\n        String json \u003d mapper.writeValueAsString(new SneakyBean2());\n        assertEquals(\"{\\\"foobar\\\":null}\", json);\n    }",
    "begin_line": 476,
    "end_line": 481,
    "comment": "",
    "child_ranges": [
      "(line 478,col 9)-(line 478,col 49)",
      "(line 479,col 9)-(line 479,col 67)",
      "(line 480,col 9)-(line 480,col 48)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testAtomicArrayRefParameters()",
    "snippet": "public void testAtomicArrayRefParameters()\n    {\n        TypeFactory tf \u003d TypeFactory.defaultInstance();\n        JavaType type \u003d tf.constructType(new TypeReference\u003cAtomicReference\u003clong[]\u003e\u003e() { });\n        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n        assertNotNull(params);\n        assertEquals(1, params.length);\n        assertEquals(tf.constructType(long[].class), params[0]);\n    }",
    "begin_line": 489,
    "end_line": 497,
    "comment": "",
    "child_ranges": [
      "(line 491,col 9)-(line 491,col 55)",
      "(line 492,col 9)-(line 492,col 91)",
      "(line 493,col 9)-(line 493,col 79)",
      "(line 494,col 9)-(line 494,col 30)",
      "(line 495,col 9)-(line 495,col 39)",
      "(line 496,col 9)-(line 496,col 64)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testMapEntryResolution()",
    "snippet": "public void testMapEntryResolution()\n    {\n        TypeFactory tf \u003d TypeFactory.defaultInstance();\n        JavaType t \u003d tf.constructType(StringIntMapEntry.class);\n        JavaType mapEntryType \u003d t.findSuperType(Map.Entry.class);\n        assertNotNull(mapEntryType);\n        assertTrue(mapEntryType.hasGenericTypes());\n        assertEquals(2, mapEntryType.containedTypeCount());\n        assertEquals(String.class, mapEntryType.containedType(0).getRawClass());\n        assertEquals(Integer.class, mapEntryType.containedType(1).getRawClass());\n    }",
    "begin_line": 501,
    "end_line": 511,
    "comment": "",
    "child_ranges": [
      "(line 503,col 9)-(line 503,col 55)",
      "(line 504,col 9)-(line 504,col 63)",
      "(line 505,col 9)-(line 505,col 65)",
      "(line 506,col 9)-(line 506,col 36)",
      "(line 507,col 9)-(line 507,col 51)",
      "(line 508,col 9)-(line 508,col 59)",
      "(line 509,col 9)-(line 509,col 80)",
      "(line 510,col 9)-(line 510,col 81)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testRawCollections()",
    "snippet": "public void testRawCollections()\n    {\n        TypeFactory tf \u003d TypeFactory.defaultInstance();\n        JavaType type \u003d tf.constructRawCollectionType(ArrayList.class);\n        assertTrue(type.isContainerType());\n        assertEquals(TypeFactory.unknownType(), type.getContentType());\n        type \u003d tf.constructRawCollectionLikeType(CollectionLike.class); // must have type vars\n        assertTrue(type.isCollectionLikeType());\n        assertEquals(TypeFactory.unknownType(), type.getContentType());\n\n        // actually, should also allow \"no type vars\" case\n        type \u003d tf.constructRawCollectionLikeType(String.class);\n        assertTrue(type.isCollectionLikeType());\n        assertEquals(TypeFactory.unknownType(), type.getContentType());\n    }",
    "begin_line": 519,
    "end_line": 533,
    "comment": "",
    "child_ranges": [
      "(line 521,col 9)-(line 521,col 55)",
      "(line 522,col 9)-(line 522,col 71)",
      "(line 523,col 9)-(line 523,col 43)",
      "(line 524,col 9)-(line 524,col 71)",
      "(line 525,col 9)-(line 525,col 71)",
      "(line 526,col 9)-(line 526,col 48)",
      "(line 527,col 9)-(line 527,col 71)",
      "(line 530,col 9)-(line 530,col 63)",
      "(line 531,col 9)-(line 531,col 48)",
      "(line 532,col 9)-(line 532,col 71)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testRawMaps()",
    "snippet": "public void testRawMaps()\n    {\n        TypeFactory tf \u003d TypeFactory.defaultInstance();\n        JavaType type \u003d tf.constructRawMapType(HashMap.class);\n        assertTrue(type.isContainerType());\n        assertEquals(TypeFactory.unknownType(), type.getKeyType());\n        assertEquals(TypeFactory.unknownType(), type.getContentType());\n\n        type \u003d tf.constructRawMapLikeType(MapLike.class); // must have type vars\n        assertTrue(type.isMapLikeType());\n        assertEquals(TypeFactory.unknownType(), type.getKeyType());\n        assertEquals(TypeFactory.unknownType(), type.getContentType());\n\n        // actually, should also allow \"no type vars\" case\n        type \u003d tf.constructRawMapLikeType(String.class);\n        assertTrue(type.isMapLikeType());\n        assertEquals(TypeFactory.unknownType(), type.getKeyType());\n        assertEquals(TypeFactory.unknownType(), type.getContentType());\n    }",
    "begin_line": 535,
    "end_line": 553,
    "comment": "",
    "child_ranges": [
      "(line 537,col 9)-(line 537,col 55)",
      "(line 538,col 9)-(line 538,col 62)",
      "(line 539,col 9)-(line 539,col 43)",
      "(line 540,col 9)-(line 540,col 67)",
      "(line 541,col 9)-(line 541,col 71)",
      "(line 543,col 9)-(line 543,col 57)",
      "(line 544,col 9)-(line 544,col 41)",
      "(line 545,col 9)-(line 545,col 67)",
      "(line 546,col 9)-(line 546,col 71)",
      "(line 549,col 9)-(line 549,col 56)",
      "(line 550,col 9)-(line 550,col 41)",
      "(line 551,col 9)-(line 551,col 67)",
      "(line 552,col 9)-(line 552,col 71)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testMoreSpecificType()",
    "snippet": "public void testMoreSpecificType()\n    {\n        TypeFactory tf \u003d TypeFactory.defaultInstance();\n\n        JavaType t1 \u003d tf.constructCollectionType(Collection.class, Object.class);\n        JavaType t2 \u003d tf.constructCollectionType(List.class, Object.class);\n        assertSame(t2, tf.moreSpecificType(t1, t2));\n        assertSame(t2, tf.moreSpecificType(t2, t1));\n\n        t1 \u003d tf.constructType(Double.class);\n        t2 \u003d tf.constructType(Number.class);\n        assertSame(t1, tf.moreSpecificType(t1, t2));\n        assertSame(t1, tf.moreSpecificType(t2, t1));\n\n        // and then unrelated, return first\n        t1 \u003d tf.constructType(Double.class);\n        t2 \u003d tf.constructType(String.class);\n        assertSame(t1, tf.moreSpecificType(t1, t2));\n        assertSame(t2, tf.moreSpecificType(t2, t1));\n    }",
    "begin_line": 561,
    "end_line": 580,
    "comment": "",
    "child_ranges": [
      "(line 563,col 9)-(line 563,col 55)",
      "(line 565,col 9)-(line 565,col 81)",
      "(line 566,col 9)-(line 566,col 75)",
      "(line 567,col 9)-(line 567,col 52)",
      "(line 568,col 9)-(line 568,col 52)",
      "(line 570,col 9)-(line 570,col 44)",
      "(line 571,col 9)-(line 571,col 44)",
      "(line 572,col 9)-(line 572,col 52)",
      "(line 573,col 9)-(line 573,col 52)",
      "(line 576,col 9)-(line 576,col 44)",
      "(line 577,col 9)-(line 577,col 44)",
      "(line 578,col 9)-(line 578,col 52)",
      "(line 579,col 9)-(line 579,col 52)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testCacheClearing()",
    "snippet": "public void testCacheClearing()\n    {\n        TypeFactory tf \u003d TypeFactory.defaultInstance().withModifier(null);\n        assertEquals(0, tf._typeCache.size());\n        tf.constructType(getClass());\n        // 19-Oct-2015, tatu: This is pretty fragile but\n        assertEquals(6, tf._typeCache.size());\n        tf.clearCache();\n        assertEquals(0, tf._typeCache.size());\n    }",
    "begin_line": 583,
    "end_line": 592,
    "comment": "",
    "child_ranges": [
      "(line 585,col 9)-(line 585,col 74)",
      "(line 586,col 9)-(line 586,col 46)",
      "(line 587,col 9)-(line 587,col 37)",
      "(line 589,col 9)-(line 589,col 46)",
      "(line 590,col 9)-(line 590,col 24)",
      "(line 591,col 9)-(line 591,col 46)"
    ]
  },
  {
    "class_name": "com.fasterxml.jackson.databind.type.TestTypeFactory",
    "child_classes": [],
    "src_path": "com/fasterxml/jackson/databind/type/TestTypeFactory.java",
    "signature": "com.fasterxml.jackson.databind.type.TestTypeFactory.testRawMapType()",
    "snippet": "public void testRawMapType()\n    {\n        TypeFactory tf \u003d TypeFactory.defaultInstance().withModifier(null); // to get a new copy\n\n        JavaType type \u003d tf.constructParametricType(Wrapper1297.class, Map.class);\n        assertNotNull(type);\n        assertEquals(Wrapper1297.class, type.getRawClass());\n    }",
    "begin_line": 595,
    "end_line": 602,
    "comment": "",
    "child_ranges": [
      "(line 597,col 9)-(line 597,col 74)",
      "(line 599,col 9)-(line 599,col 81)",
      "(line 600,col 9)-(line 600,col 28)",
      "(line 601,col 9)-(line 601,col 60)"
    ]
  }
]