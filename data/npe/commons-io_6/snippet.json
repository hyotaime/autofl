[
  {
    "name": "ByteArrayOrigin.ByteArrayOrigin#69",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.ByteArrayOrigin(byte[])",
    "snippet": "public ByteArrayOrigin(final byte[] origin) {\n            super(origin);\n        }",
    "begin_line": 69,
    "end_line": 71,
    "comment": "/** \n * Constructs a new instance for the given origin.\n * @param origin The origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ByteArrayOrigin.getByteArray#74",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getByteArray()",
    "snippet": "@Override\n        public byte[] getByteArray() {\n            // No conversion\n            return get();\n        }",
    "begin_line": 74,
    "end_line": 77,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ByteArrayOrigin.getInputStream#80",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getInputStream(java.nio.file.OpenOption)",
    "snippet": "@Override\n        public InputStream getInputStream(final OpenOption... options) throws IOException {\n            return new ByteArrayInputStream(origin);\n        }",
    "begin_line": 80,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ByteArrayOrigin.getReader#85",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getReader(java.nio.charset.Charset)",
    "snippet": "@Override\n        public Reader getReader(final Charset charset) throws IOException {\n            return new InputStreamReader(getInputStream(), charset);\n        }",
    "begin_line": 85,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ByteArrayOrigin.size#90",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.size()",
    "snippet": "@Override\n        public long size() throws IOException {\n            return origin.length;\n        }",
    "begin_line": 90,
    "end_line": 92,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharSequenceOrigin.CharSequenceOrigin#106",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.CharSequenceOrigin(java.lang.CharSequence)",
    "snippet": "public CharSequenceOrigin(final CharSequence origin) {\n            super(origin);\n        }",
    "begin_line": 106,
    "end_line": 108,
    "comment": "/** \n * Constructs a new instance for the given origin.\n * @param origin The origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharSequenceOrigin.getByteArray#111",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getByteArray()",
    "snippet": "@Override\n        public byte[] getByteArray() {\n            // TODO Pass in a Charset? Consider if call sites actually need this.\n            return origin.toString().getBytes(Charset.defaultCharset());\n        }",
    "begin_line": 111,
    "end_line": 114,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharSequenceOrigin.getCharSequence#117",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getCharSequence(java.nio.charset.Charset)",
    "snippet": "@Override\n        public CharSequence getCharSequence(final Charset charset) {\n            // No conversion\n            return get();\n        }",
    "begin_line": 117,
    "end_line": 120,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharSequenceOrigin.getInputStream#123",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getInputStream(java.nio.file.OpenOption)",
    "snippet": "@Override\n        public InputStream getInputStream(final OpenOption... options) throws IOException {\n            // TODO Pass in a Charset? Consider if call sites actually need this.\n            return new ByteArrayInputStream(origin.toString().getBytes(Charset.defaultCharset()));\n            // Needs [IO-795] CharSequenceInputStream.reset() only works once.\n            // return CharSequenceInputStream.builder().setCharSequence(getCharSequence(Charset.defaultCharset())).get();\n        }",
    "begin_line": 123,
    "end_line": 128,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharSequenceOrigin.getReader#131",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getReader(java.nio.charset.Charset)",
    "snippet": "@Override\n        public Reader getReader(final Charset charset) throws IOException {\n            return new InputStreamReader(getInputStream(), charset);\n        }",
    "begin_line": 131,
    "end_line": 133,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharSequenceOrigin.size#136",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.size()",
    "snippet": "@Override\n        public long size() throws IOException {\n            return origin.length();\n        }",
    "begin_line": 136,
    "end_line": 138,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileOrigin.FileOrigin#155",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.FileOrigin(java.io.File)",
    "snippet": "public FileOrigin(final File origin) {\n            super(origin);\n        }",
    "begin_line": 155,
    "end_line": 157,
    "comment": "/** \n * Constructs a new instance for the given origin.\n * @param origin The origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileOrigin.getByteArray#160",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getByteArray(long, int)",
    "snippet": "@Override\n        public byte[] getByteArray(final long position, final int length) throws IOException {\n            try (RandomAccessFile raf \u003d RandomAccessFileMode.READ_ONLY.create(origin)) {\n                return RandomAccessFiles.read(raf, position, length);\n            }\n        }",
    "begin_line": 160,
    "end_line": 164,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileOrigin.getFile#167",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getFile()",
    "snippet": "@Override\n        public File getFile() {\n            // No conversion\n            return get();\n        }",
    "begin_line": 167,
    "end_line": 170,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FileOrigin.getPath#173",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getPath()",
    "snippet": "@Override\n        public Path getPath() {\n            return get().toPath();\n        }",
    "begin_line": 173,
    "end_line": 175,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InputStreamOrigin.InputStreamOrigin#192",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.InputStreamOrigin(java.io.InputStream)",
    "snippet": "public InputStreamOrigin(final InputStream origin) {\n            super(origin);\n        }",
    "begin_line": 192,
    "end_line": 194,
    "comment": "/** \n * Constructs a new instance for the given origin.\n * @param origin The origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InputStreamOrigin.getByteArray#197",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getByteArray()",
    "snippet": "@Override\n        public byte[] getByteArray() throws IOException {\n            return IOUtils.toByteArray(origin);\n        }",
    "begin_line": 197,
    "end_line": 199,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InputStreamOrigin.getInputStream#202",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getInputStream(java.nio.file.OpenOption)",
    "snippet": "@Override\n        public InputStream getInputStream(final OpenOption... options) {\n            // No conversion\n            return get();\n        }",
    "begin_line": 202,
    "end_line": 205,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "InputStreamOrigin.getReader#208",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getReader(java.nio.charset.Charset)",
    "snippet": "@Override\n        public Reader getReader(final Charset charset) throws IOException {\n            return new InputStreamReader(getInputStream(), charset);\n        }",
    "begin_line": 208,
    "end_line": 210,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputStreamOrigin.OutputStreamOrigin#227",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.OutputStreamOrigin(java.io.OutputStream)",
    "snippet": "public OutputStreamOrigin(final OutputStream origin) {\n            super(origin);\n        }",
    "begin_line": 227,
    "end_line": 229,
    "comment": "/** \n * Constructs a new instance for the given origin.\n * @param origin The origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputStreamOrigin.getOutputStream#232",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getOutputStream(java.nio.file.OpenOption)",
    "snippet": "@Override\n        public OutputStream getOutputStream(final OpenOption... options) {\n            // No conversion\n            return get();\n        }",
    "begin_line": 232,
    "end_line": 235,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OutputStreamOrigin.getWriter#238",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getWriter(java.nio.charset.Charset, java.nio.file.OpenOption)",
    "snippet": "@Override\n        public Writer getWriter(final Charset charset, final OpenOption... options) throws IOException {\n            return new OutputStreamWriter(origin, charset);\n        }",
    "begin_line": 238,
    "end_line": 240,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PathOrigin.PathOrigin#256",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.PathOrigin(java.nio.file.Path)",
    "snippet": "public PathOrigin(final Path origin) {\n            super(origin);\n        }",
    "begin_line": 256,
    "end_line": 258,
    "comment": "/** \n * Constructs a new instance for the given origin.\n * @param origin The origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PathOrigin.getByteArray#261",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getByteArray(long, int)",
    "snippet": "@Override\n        public byte[] getByteArray(final long position, final int length) throws IOException {\n            try (RandomAccessFile raf \u003d RandomAccessFileMode.READ_ONLY.create(origin)) {\n                return RandomAccessFiles.read(raf, position, length);\n            }\n        }",
    "begin_line": 261,
    "end_line": 265,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PathOrigin.getFile#268",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getFile()",
    "snippet": "@Override\n        public File getFile() {\n            return get().toFile();\n        }",
    "begin_line": 268,
    "end_line": 270,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PathOrigin.getPath#273",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getPath()",
    "snippet": "@Override\n        public Path getPath() {\n            // No conversion\n            return get();\n        }",
    "begin_line": 273,
    "end_line": 276,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReaderOrigin.ReaderOrigin#293",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.ReaderOrigin(java.io.Reader)",
    "snippet": "public ReaderOrigin(final Reader origin) {\n            super(origin);\n        }",
    "begin_line": 293,
    "end_line": 295,
    "comment": "/** \n * Constructs a new instance for the given origin.\n * @param origin The origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReaderOrigin.getByteArray#298",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getByteArray()",
    "snippet": "@Override\n        public byte[] getByteArray() throws IOException {\n            // TODO Pass in a Charset? Consider if call sites actually need this.\n            return IOUtils.toByteArray(origin, Charset.defaultCharset());\n        }",
    "begin_line": 298,
    "end_line": 301,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReaderOrigin.getCharSequence#304",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getCharSequence(java.nio.charset.Charset)",
    "snippet": "@Override\n        public CharSequence getCharSequence(final Charset charset) throws IOException {\n            return IOUtils.toString(origin);\n        }",
    "begin_line": 304,
    "end_line": 306,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReaderOrigin.getInputStream#309",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getInputStream(java.nio.file.OpenOption)",
    "snippet": "@Override\n        public InputStream getInputStream(final OpenOption... options) throws IOException {\n            // TODO Pass in a Charset? Consider if call sites actually need this.\n            return ReaderInputStream.builder().setReader(origin).setCharset(Charset.defaultCharset()).get();\n        }",
    "begin_line": 309,
    "end_line": 312,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReaderOrigin.getReader#315",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getReader(java.nio.charset.Charset)",
    "snippet": "@Override\n        public Reader getReader(final Charset charset) throws IOException {\n            // No conversion\n            return get();\n        }",
    "begin_line": 315,
    "end_line": 318,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "URIOrigin.URIOrigin#331",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.URIOrigin(java.net.URI)",
    "snippet": "public URIOrigin(final URI origin) {\n            super(origin);\n        }",
    "begin_line": 331,
    "end_line": 333,
    "comment": "/** \n * Constructs a new instance for the given origin.\n * @param origin The origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "URIOrigin.getFile#336",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getFile()",
    "snippet": "@Override\n        public File getFile() {\n            return getPath().toFile();\n        }",
    "begin_line": 336,
    "end_line": 338,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "URIOrigin.getPath#341",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getPath()",
    "snippet": "@Override\n        public Path getPath() {\n            return Paths.get(get());\n        }",
    "begin_line": 341,
    "end_line": 343,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WriterOrigin.WriterOrigin#360",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.WriterOrigin(java.io.Writer)",
    "snippet": "public WriterOrigin(final Writer origin) {\n            super(origin);\n        }",
    "begin_line": 360,
    "end_line": 362,
    "comment": "/** \n * Constructs a new instance for the given origin.\n * @param origin The origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WriterOrigin.getOutputStream#365",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getOutputStream(java.nio.file.OpenOption)",
    "snippet": "@Override\n        public OutputStream getOutputStream(final OpenOption... options) throws IOException {\n            // TODO Pass in a Charset? Consider if call sites actually need this.\n            return WriterOutputStream.builder().setWriter(origin).setCharset(Charset.defaultCharset()).get();\n        }",
    "begin_line": 365,
    "end_line": 368,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WriterOrigin.getWriter#371",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getWriter(java.nio.charset.Charset, java.nio.file.OpenOption)",
    "snippet": "@Override\n        public Writer getWriter(final Charset charset, final OpenOption... options) throws IOException {\n            // No conversion\n            return get();\n        }",
    "begin_line": 371,
    "end_line": 374,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WriterOrigin.AbstractOrigin#387",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.AbstractOrigin(T)",
    "snippet": "protected AbstractOrigin(final T origin) {\n        this.origin \u003d Objects.requireNonNull(origin, \"origin\");\n    }",
    "begin_line": 387,
    "end_line": 389,
    "comment": "/** \n * Constructs a new instance for a subclass.\n * @param origin The origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WriterOrigin.get#397",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.get()",
    "snippet": "@Override\n    public T get() {\n        return origin;\n    }",
    "begin_line": 397,
    "end_line": 399,
    "comment": "/** \n * Gets the origin.\n * @return the origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WriterOrigin.getByteArray#408",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getByteArray()",
    "snippet": "public byte[] getByteArray() throws IOException {\n        return Files.readAllBytes(getPath());\n    }",
    "begin_line": 408,
    "end_line": 410,
    "comment": "/** \n * Gets this origin as a byte array, if possible.\n * @return this origin as a byte array, if possible.\n * @throws IOException                   if an I/O error occurs.\n * @throws UnsupportedOperationException if the origin cannot be converted to a Path.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WriterOrigin.getByteArray#423",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getByteArray(long, int)",
    "snippet": "public byte[] getByteArray(final long position, final int length) throws IOException {\n        final byte[] bytes \u003d getByteArray();\n        // Checks for int overflow.\n        final int start \u003d Math.toIntExact(position);\n        if (start \u003c 0 || length \u003c 0 || start + length \u003c 0 || start + length \u003e bytes.length) {\n            throw new IllegalArgumentException(\"Couldn\u0027t read array (start: \" + start + \", length: \" + length + \", data length: \" + bytes.length + \").\");\n        }\n        return Arrays.copyOfRange(bytes, start, start + length);\n    }",
    "begin_line": 423,
    "end_line": 431,
    "comment": "/** \n * Gets this origin as a byte array, if possible.\n * @param position the initial index of the range to be copied, inclusive.\n * @param length   How many bytes to copy.\n * @return this origin as a byte array, if possible.\n * @throws UnsupportedOperationException if the origin cannot be converted to a Path.\n * @throws ArithmeticException           if the {@code position} overflows an int\n * @throws IOException                   if an I/O error occurs.\n * @since 2.13.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WriterOrigin.getCharSequence#441",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getCharSequence(java.nio.charset.Charset)",
    "snippet": "public CharSequence getCharSequence(final Charset charset) throws IOException {\n        return new String(getByteArray(), charset);\n    }",
    "begin_line": 441,
    "end_line": 443,
    "comment": "/** \n * Gets this origin as a byte array, if possible.\n * @param charset The charset to use if conversion from bytes is needed.\n * @return this origin as a byte array, if possible.\n * @throws IOException                   if an I/O error occurs.\n * @throws UnsupportedOperationException if the origin cannot be converted to a Path.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WriterOrigin.getFile#451",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getFile()",
    "snippet": "public File getFile() {\n        throw new UnsupportedOperationException(\n                String.format(\"%s#getFile() for %s origin %s\", getClass().getSimpleName(), origin.getClass().getSimpleName(), origin));\n    }",
    "begin_line": 451,
    "end_line": 454,
    "comment": "/** \n * Gets this origin as a Path, if possible.\n * @return this origin as a Path, if possible.\n * @throws UnsupportedOperationException if this method is not implemented in a concrete subclass.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WriterOrigin.getInputStream#464",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getInputStream(java.nio.file.OpenOption)",
    "snippet": "public InputStream getInputStream(final OpenOption... options) throws IOException {\n        return Files.newInputStream(getPath(), options);\n    }",
    "begin_line": 464,
    "end_line": 466,
    "comment": "/** \n * Gets this origin as an InputStream, if possible.\n * @param options options specifying how the file is opened\n * @return this origin as an InputStream, if possible.\n * @throws IOException                   if an I/O error occurs.\n * @throws UnsupportedOperationException if the origin cannot be converted to a Path.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WriterOrigin.getOutputStream#476",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getOutputStream(java.nio.file.OpenOption)",
    "snippet": "public OutputStream getOutputStream(final OpenOption... options) throws IOException {\n        return Files.newOutputStream(getPath(), options);\n    }",
    "begin_line": 476,
    "end_line": 478,
    "comment": "/** \n * Gets this origin as an OutputStream, if possible.\n * @param options options specifying how the file is opened\n * @return this origin as an OutputStream, if possible.\n * @throws IOException                   if an I/O error occurs.\n * @throws UnsupportedOperationException if the origin cannot be converted to a Path.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WriterOrigin.getPath#486",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getPath()",
    "snippet": "public Path getPath() {\n        throw new UnsupportedOperationException(\n                String.format(\"%s#getPath() for %s origin %s\", getClass().getSimpleName(), origin.getClass().getSimpleName(), origin));\n    }",
    "begin_line": 486,
    "end_line": 489,
    "comment": "/** \n * Gets this origin as a Path, if possible.\n * @return this origin as a Path, if possible.\n * @throws UnsupportedOperationException if this method is not implemented in a concrete subclass.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WriterOrigin.getReader#498",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getReader(java.nio.charset.Charset)",
    "snippet": "public Reader getReader(final Charset charset) throws IOException {\n        return Files.newBufferedReader(getPath(), charset);\n    }",
    "begin_line": 498,
    "end_line": 500,
    "comment": "/** \n * Gets a new Reader on the origin, buffered by default.\n * @param charset the charset to use for decoding\n * @return a new Reader on the origin.\n * @throws IOException if an I/O error occurs opening the file.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WriterOrigin.getWriter#511",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.getWriter(java.nio.charset.Charset, java.nio.file.OpenOption)",
    "snippet": "public Writer getWriter(final Charset charset, final OpenOption... options) throws IOException {\n        return Files.newBufferedWriter(getPath(), charset, options);\n    }",
    "begin_line": 511,
    "end_line": 513,
    "comment": "/** \n * Gets a new Writer on the origin, buffered by default.\n * @param charset the charset to use for encoding\n * @param options options specifying how the file is opened\n * @return a new Writer on the origin.\n * @throws IOException                   if an I/O error occurs opening or creating the file.\n * @throws UnsupportedOperationException if the origin cannot be converted to a Path.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WriterOrigin.size#522",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.size()",
    "snippet": "public long size() throws IOException {\n        return Files.size(getPath());\n    }",
    "begin_line": 522,
    "end_line": 524,
    "comment": "/** \n * Gets the size of the origin, if possible.\n * @return the size of the origin in bytes or characters.\n * @throws IOException if an I/O error occurs.\n * @since 2.13.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WriterOrigin.toString#527",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOrigin.java",
    "class_name": "org.apache.commons.io.build.AbstractOrigin",
    "signature": "org.apache.commons.io.build.AbstractOrigin.toString()",
    "snippet": "@Override\n    public String toString() {\n        return getClass().getSimpleName() + \"[\" + origin.toString() + \"]\";\n    }",
    "begin_line": 527,
    "end_line": 529,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.newByteArrayOrigin#54",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.newByteArrayOrigin(byte[])",
    "snippet": "protected static ByteArrayOrigin newByteArrayOrigin(final byte[] origin) {\n        return new ByteArrayOrigin(origin);\n    }",
    "begin_line": 54,
    "end_line": 56,
    "comment": "/** \n * Creates a new byte array origin for a byte array.\n * @param origin the byte array.\n * @return a new byte array origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.newCharSequenceOrigin#65",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.newCharSequenceOrigin(java.lang.CharSequence)",
    "snippet": "protected static CharSequenceOrigin newCharSequenceOrigin(final CharSequence origin) {\n        return new CharSequenceOrigin(origin);\n    }",
    "begin_line": 65,
    "end_line": 67,
    "comment": "/** \n * Creates a new CharSequence origin for a CharSequence.\n * @param origin the CharSequence.\n * @return a new file origin.\n * @since 2.13.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.newFileOrigin#75",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.newFileOrigin(java.io.File)",
    "snippet": "protected static FileOrigin newFileOrigin(final File origin) {\n        return new FileOrigin(origin);\n    }",
    "begin_line": 75,
    "end_line": 77,
    "comment": "/** \n * Creates a new file origin for a file.\n * @param origin the file.\n * @return a new file origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.newFileOrigin#85",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.newFileOrigin(java.lang.String)",
    "snippet": "protected static FileOrigin newFileOrigin(final String origin) {\n        return new FileOrigin(new File(origin));\n    }",
    "begin_line": 85,
    "end_line": 87,
    "comment": "/** \n * Creates a new file origin for a file path.\n * @param origin the file path.\n * @return a new file origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.newInputStreamOrigin#95",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.newInputStreamOrigin(java.io.InputStream)",
    "snippet": "protected static InputStreamOrigin newInputStreamOrigin(final InputStream origin) {\n        return new InputStreamOrigin(origin);\n    }",
    "begin_line": 95,
    "end_line": 97,
    "comment": "/** \n * Creates a new input stream origin for a file.\n * @param origin the input stream.\n * @return a new input stream origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.newOutputStreamOrigin#105",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.newOutputStreamOrigin(java.io.OutputStream)",
    "snippet": "protected static OutputStreamOrigin newOutputStreamOrigin(final OutputStream origin) {\n        return new OutputStreamOrigin(origin);\n    }",
    "begin_line": 105,
    "end_line": 107,
    "comment": "/** \n * Creates a new output stream origin for a file.\n * @param origin the output stream.\n * @return a new output stream origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.newPathOrigin#115",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.newPathOrigin(java.nio.file.Path)",
    "snippet": "protected static PathOrigin newPathOrigin(final Path origin) {\n        return new PathOrigin(origin);\n    }",
    "begin_line": 115,
    "end_line": 117,
    "comment": "/** \n * Creates a new path origin for a file.\n * @param origin the path.\n * @return a new path origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.newPathOrigin#125",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.newPathOrigin(java.lang.String)",
    "snippet": "protected static PathOrigin newPathOrigin(final String origin) {\n        return new PathOrigin(Paths.get(origin));\n    }",
    "begin_line": 125,
    "end_line": 127,
    "comment": "/** \n * Creates a new path name origin for a path name.\n * @param origin the path name.\n * @return a new path name origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.newReaderOrigin#135",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.newReaderOrigin(java.io.Reader)",
    "snippet": "protected static ReaderOrigin newReaderOrigin(final Reader origin) {\n        return new ReaderOrigin(origin);\n    }",
    "begin_line": 135,
    "end_line": 137,
    "comment": "/** \n * Creates a new reader origin for a reader.\n * @param origin the reader.\n * @return a new reader origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.newURIOrigin#145",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.newURIOrigin(java.net.URI)",
    "snippet": "protected static URIOrigin newURIOrigin(final URI origin) {\n        return new URIOrigin(origin);\n    }",
    "begin_line": 145,
    "end_line": 147,
    "comment": "/** \n * Creates a new reader origin for a URI.\n * @param origin the URI.\n * @return a new URI origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.newWriterOrigin#155",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.newWriterOrigin(java.io.Writer)",
    "snippet": "protected static WriterOrigin newWriterOrigin(final Writer origin) {\n        return new WriterOrigin(origin);\n    }",
    "begin_line": 155,
    "end_line": 157,
    "comment": "/** \n * Creates a new writer origin for a file.\n * @param origin the writer.\n * @return a new writer .\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.checkOrigin#170",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.checkOrigin()",
    "snippet": "protected AbstractOrigin\u003c?, ?\u003e checkOrigin() {\n        if (origin \u003d\u003d null) {\n            throw new IllegalStateException(\"origin \u003d\u003d null\");\n        }\n        return origin;\n    }",
    "begin_line": 170,
    "end_line": 175,
    "comment": "/** \n * Checks whether the origin is null.\n * @return the origin.\n * @throws IllegalStateException if the {@code origin} is {@code null}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.getOrigin#182",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.getOrigin()",
    "snippet": "protected AbstractOrigin\u003c?, ?\u003e getOrigin() {\n        return origin;\n    }",
    "begin_line": 182,
    "end_line": 184,
    "comment": "/** \n * Gets the origin.\n * @return the origin.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.hasOrigin#191",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.hasOrigin()",
    "snippet": "protected boolean hasOrigin() {\n        return origin !\u003d null;\n    }",
    "begin_line": 191,
    "end_line": 193,
    "comment": "/** \n * Tests whether the origin is null.\n * @return whether the origin is null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.setByteArray#201",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.setByteArray(byte[])",
    "snippet": "public B setByteArray(final byte[] origin) {\n        return setOrigin(newByteArrayOrigin(origin));\n    }",
    "begin_line": 201,
    "end_line": 203,
    "comment": "/** \n * Sets a new origin.\n * @param origin the new origin.\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.setCharSequence#212",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.setCharSequence(java.lang.CharSequence)",
    "snippet": "public B setCharSequence(final CharSequence origin) {\n        return setOrigin(newCharSequenceOrigin(origin));\n    }",
    "begin_line": 212,
    "end_line": 214,
    "comment": "/** \n * Sets a new origin.\n * @param origin the new origin.\n * @return this\n * @since 2.13.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.setFile#222",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.setFile(java.io.File)",
    "snippet": "public B setFile(final File origin) {\n        return setOrigin(newFileOrigin(origin));\n    }",
    "begin_line": 222,
    "end_line": 224,
    "comment": "/** \n * Sets a new origin.\n * @param origin the new origin.\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.setFile#232",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.setFile(java.lang.String)",
    "snippet": "public B setFile(final String origin) {\n        return setOrigin(newFileOrigin(origin));\n    }",
    "begin_line": 232,
    "end_line": 234,
    "comment": "/** \n * Sets a new origin.\n * @param origin the new origin.\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.setInputStream#242",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.setInputStream(java.io.InputStream)",
    "snippet": "public B setInputStream(final InputStream origin) {\n        return setOrigin(newInputStreamOrigin(origin));\n    }",
    "begin_line": 242,
    "end_line": 244,
    "comment": "/** \n * Sets a new origin.\n * @param origin the new origin.\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.setOrigin#252",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.setOrigin(org.apache.commons.io.build.AbstractOrigin\u003c?,?\u003e)",
    "snippet": "protected B setOrigin(final AbstractOrigin\u003c?, ?\u003e origin) {\n        this.origin \u003d origin;\n        return asThis();\n    }",
    "begin_line": 252,
    "end_line": 255,
    "comment": "/** \n * Sets a new origin.\n * @param origin the new origin.\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.setOutputStream#263",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.setOutputStream(java.io.OutputStream)",
    "snippet": "public B setOutputStream(final OutputStream origin) {\n        return setOrigin(newOutputStreamOrigin(origin));\n    }",
    "begin_line": 263,
    "end_line": 265,
    "comment": "/** \n * Sets a new origin.\n * @param origin the new origin.\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.setPath#273",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.setPath(java.nio.file.Path)",
    "snippet": "public B setPath(final Path origin) {\n        return setOrigin(newPathOrigin(origin));\n    }",
    "begin_line": 273,
    "end_line": 275,
    "comment": "/** \n * Sets a new origin.\n * @param origin the new origin.\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.setPath#283",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.setPath(java.lang.String)",
    "snippet": "public B setPath(final String origin) {\n        return setOrigin(newPathOrigin(origin));\n    }",
    "begin_line": 283,
    "end_line": 285,
    "comment": "/** \n * Sets a new origin.\n * @param origin the new origin.\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.setReader#293",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.setReader(java.io.Reader)",
    "snippet": "public B setReader(final Reader origin) {\n        return setOrigin(newReaderOrigin(origin));\n    }",
    "begin_line": 293,
    "end_line": 295,
    "comment": "/** \n * Sets a new origin.\n * @param origin the new origin.\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.setURI#303",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.setURI(java.net.URI)",
    "snippet": "public B setURI(final URI origin) {\n        return setOrigin(newURIOrigin(origin));\n    }",
    "begin_line": 303,
    "end_line": 305,
    "comment": "/** \n * Sets a new origin.\n * @param origin the new origin.\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractOriginSupplier.setWriter#313",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractOriginSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractOriginSupplier",
    "signature": "org.apache.commons.io.build.AbstractOriginSupplier.setWriter(java.io.Writer)",
    "snippet": "public B setWriter(final Writer origin) {\n        return setOrigin(newWriterOrigin(origin));\n    }",
    "begin_line": 313,
    "end_line": 315,
    "comment": "/** \n * Sets a new origin.\n * @param origin the new origin.\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractStreamBuilder.getBufferSize#70",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractStreamBuilder.java",
    "class_name": "org.apache.commons.io.build.AbstractStreamBuilder",
    "signature": "org.apache.commons.io.build.AbstractStreamBuilder.getBufferSize()",
    "snippet": "protected int getBufferSize() {\n        return bufferSize;\n    }",
    "begin_line": 70,
    "end_line": 72,
    "comment": "/** \n * Gets the buffer size, defaults to  {@link IOUtils#DEFAULT_BUFFER_SIZE} ({@value IOUtils#DEFAULT_BUFFER_SIZE}).\n * @return the buffer size, defaults to {@link IOUtils#DEFAULT_BUFFER_SIZE} ({@value IOUtils#DEFAULT_BUFFER_SIZE}).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractStreamBuilder.getBufferSizeDefault#79",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractStreamBuilder.java",
    "class_name": "org.apache.commons.io.build.AbstractStreamBuilder",
    "signature": "org.apache.commons.io.build.AbstractStreamBuilder.getBufferSizeDefault()",
    "snippet": "protected int getBufferSizeDefault() {\n        return bufferSizeDefault;\n    }",
    "begin_line": 79,
    "end_line": 81,
    "comment": "/** \n * Gets the buffer size default, defaults to  {@link IOUtils#DEFAULT_BUFFER_SIZE} ({@value IOUtils#DEFAULT_BUFFER_SIZE}).\n * @return the buffer size default, defaults to {@link IOUtils#DEFAULT_BUFFER_SIZE} ({@value IOUtils#DEFAULT_BUFFER_SIZE}).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractStreamBuilder.getCharSequence#93",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractStreamBuilder.java",
    "class_name": "org.apache.commons.io.build.AbstractStreamBuilder",
    "signature": "org.apache.commons.io.build.AbstractStreamBuilder.getCharSequence()",
    "snippet": "protected CharSequence getCharSequence() throws IOException {\n        return checkOrigin().getCharSequence(getCharset());\n    }",
    "begin_line": 93,
    "end_line": 95,
    "comment": "/** \n * Gets a CharSequence from the origin with a Charset.\n * @return An input stream\n * @throws IOException                   if an I/O error occurs.\n * @throws UnsupportedOperationException if the origin cannot be converted to a CharSequence.\n * @throws IllegalStateException if the {@code origin} is {@code null}.\n * @see AbstractOrigin#getCharSequence(Charset)\n * @since 2.13.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractStreamBuilder.getCharset#102",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractStreamBuilder.java",
    "class_name": "org.apache.commons.io.build.AbstractStreamBuilder",
    "signature": "org.apache.commons.io.build.AbstractStreamBuilder.getCharset()",
    "snippet": "protected Charset getCharset() {\n        return charset;\n    }",
    "begin_line": 102,
    "end_line": 104,
    "comment": "/** \n * Gets the Charset, defaults to  {@link Charset#defaultCharset()}.\n * @return the Charset, defaults to {@link Charset#defaultCharset()}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractStreamBuilder.getCharsetDefault#111",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractStreamBuilder.java",
    "class_name": "org.apache.commons.io.build.AbstractStreamBuilder",
    "signature": "org.apache.commons.io.build.AbstractStreamBuilder.getCharsetDefault()",
    "snippet": "protected Charset getCharsetDefault() {\n        return charsetDefault;\n    }",
    "begin_line": 111,
    "end_line": 113,
    "comment": "/** \n * Gets the Charset default, defaults to  {@link Charset#defaultCharset()}.\n * @return the Charset default, defaults to {@link Charset#defaultCharset()}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractStreamBuilder.getInputStream#125",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractStreamBuilder.java",
    "class_name": "org.apache.commons.io.build.AbstractStreamBuilder",
    "signature": "org.apache.commons.io.build.AbstractStreamBuilder.getInputStream()",
    "snippet": "protected InputStream getInputStream() throws IOException {\n        return checkOrigin().getInputStream(getOpenOptions());\n    }",
    "begin_line": 125,
    "end_line": 127,
    "comment": "/** \n * Gets an input stream from the origin with open options.\n * @return An input stream\n * @throws IOException                   if an I/O error occurs.\n * @throws UnsupportedOperationException if the origin cannot be converted to an InputStream.\n * @see AbstractOrigin#getInputStream(OpenOption...)\n * @throws IllegalStateException if the {@code origin} is {@code null}.\n * @since 2.13.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractStreamBuilder.getOpenOptions#129",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractStreamBuilder.java",
    "class_name": "org.apache.commons.io.build.AbstractStreamBuilder",
    "signature": "org.apache.commons.io.build.AbstractStreamBuilder.getOpenOptions()",
    "snippet": "protected OpenOption[] getOpenOptions() {\n        return openOptions;\n    }",
    "begin_line": 129,
    "end_line": 131,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractStreamBuilder.getOutputStream#143",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractStreamBuilder.java",
    "class_name": "org.apache.commons.io.build.AbstractStreamBuilder",
    "signature": "org.apache.commons.io.build.AbstractStreamBuilder.getOutputStream()",
    "snippet": "protected OutputStream getOutputStream() throws IOException {\n        return checkOrigin().getOutputStream(getOpenOptions());\n    }",
    "begin_line": 143,
    "end_line": 145,
    "comment": "/** \n * Gets an OutputStream from the origin with open options.\n * @return An OutputStream\n * @throws IOException                   if an I/O error occurs.\n * @throws UnsupportedOperationException if the origin cannot be converted to an OututStream.\n * @throws IllegalStateException if the {@code origin} is {@code null}.\n * @see AbstractOrigin#getOutputStream(OpenOption...)\n * @since 2.13.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractStreamBuilder.getPath#156",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractStreamBuilder.java",
    "class_name": "org.apache.commons.io.build.AbstractStreamBuilder",
    "signature": "org.apache.commons.io.build.AbstractStreamBuilder.getPath()",
    "snippet": "protected Path getPath() {\n        return checkOrigin().getPath();\n    }",
    "begin_line": 156,
    "end_line": 158,
    "comment": "/** \n * Gets a Path from the origin.\n * @return A Path\n * @throws UnsupportedOperationException if the origin cannot be converted to a Path.\n * @throws IllegalStateException if the {@code origin} is {@code null}.\n * @see AbstractOrigin#getPath()\n * @since 2.13.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractStreamBuilder.getWriter#170",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractStreamBuilder.java",
    "class_name": "org.apache.commons.io.build.AbstractStreamBuilder",
    "signature": "org.apache.commons.io.build.AbstractStreamBuilder.getWriter()",
    "snippet": "protected Writer getWriter() throws IOException {\n        return checkOrigin().getWriter(getCharset(), getOpenOptions());\n    }",
    "begin_line": 170,
    "end_line": 172,
    "comment": "/** \n * Gets an writer from the origin with open options.\n * @return An writer.\n * @throws IOException                   if an I/O error occurs.\n * @throws UnsupportedOperationException if the origin cannot be converted to a Writer.\n * @throws IllegalStateException if the {@code origin} is {@code null}.\n * @see AbstractOrigin#getOutputStream(OpenOption...)\n * @since 2.13.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractStreamBuilder.setBufferSize#183",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractStreamBuilder.java",
    "class_name": "org.apache.commons.io.build.AbstractStreamBuilder",
    "signature": "org.apache.commons.io.build.AbstractStreamBuilder.setBufferSize(int)",
    "snippet": "public B setBufferSize(final int bufferSize) {\n        this.bufferSize \u003d bufferSize \u003e 0 ? bufferSize : bufferSizeDefault;\n        return asThis();\n    }",
    "begin_line": 183,
    "end_line": 186,
    "comment": "/** \n * Sets the buffer size. Invalid input (bufferSize \u0026lt;\u003d 0) resets the value to its default. \u003cp\u003e Subclasses may ignore this setting. \u003c/p\u003e\n * @param bufferSize the buffer size.\n * @return this.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractStreamBuilder.setBufferSize#197",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractStreamBuilder.java",
    "class_name": "org.apache.commons.io.build.AbstractStreamBuilder",
    "signature": "org.apache.commons.io.build.AbstractStreamBuilder.setBufferSize(java.lang.Integer)",
    "snippet": "public B setBufferSize(final Integer bufferSize) {\n        setBufferSize(bufferSize !\u003d null ? bufferSize : bufferSizeDefault);\n        return asThis();\n    }",
    "begin_line": 197,
    "end_line": 200,
    "comment": "/** \n * Sets the buffer size. \u003cp\u003e Subclasses may ignore this setting. \u003c/p\u003e\n * @param bufferSize the buffer size, null resets to the default.\n * @return this.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractStreamBuilder.setBufferSizeDefault#211",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractStreamBuilder.java",
    "class_name": "org.apache.commons.io.build.AbstractStreamBuilder",
    "signature": "org.apache.commons.io.build.AbstractStreamBuilder.setBufferSizeDefault(int)",
    "snippet": "protected B setBufferSizeDefault(final int bufferSizeDefault) {\n        this.bufferSizeDefault \u003d bufferSizeDefault;\n        return asThis();\n    }",
    "begin_line": 211,
    "end_line": 214,
    "comment": "/** \n * Sets the buffer size for subclasses to initialize. \u003cp\u003e Subclasses may ignore this setting. \u003c/p\u003e\n * @param bufferSizeDefault the buffer size, null resets to the default.\n * @return this.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractStreamBuilder.setCharset#225",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractStreamBuilder.java",
    "class_name": "org.apache.commons.io.build.AbstractStreamBuilder",
    "signature": "org.apache.commons.io.build.AbstractStreamBuilder.setCharset(java.nio.charset.Charset)",
    "snippet": "public B setCharset(final Charset charset) {\n        this.charset \u003d Charsets.toCharset(charset, charsetDefault);\n        return asThis();\n    }",
    "begin_line": 225,
    "end_line": 228,
    "comment": "/** \n * Sets the Charset. \u003cp\u003e Subclasses may ignore this setting. \u003c/p\u003e\n * @param charset the Charset, null resets to the default.\n * @return this.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractStreamBuilder.setCharset#239",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractStreamBuilder.java",
    "class_name": "org.apache.commons.io.build.AbstractStreamBuilder",
    "signature": "org.apache.commons.io.build.AbstractStreamBuilder.setCharset(java.lang.String)",
    "snippet": "public B setCharset(final String charset) {\n        return setCharset(Charsets.toCharset(charset, charsetDefault));\n    }",
    "begin_line": 239,
    "end_line": 241,
    "comment": "/** \n * Sets the Charset. \u003cp\u003e Subclasses may ignore this setting. \u003c/p\u003e\n * @param charset the Charset name, null resets to the default.\n * @return this.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractStreamBuilder.setCharsetDefault#252",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractStreamBuilder.java",
    "class_name": "org.apache.commons.io.build.AbstractStreamBuilder",
    "signature": "org.apache.commons.io.build.AbstractStreamBuilder.setCharsetDefault(java.nio.charset.Charset)",
    "snippet": "protected B setCharsetDefault(final Charset defaultCharset) {\n        this.charsetDefault \u003d defaultCharset;\n        return asThis();\n    }",
    "begin_line": 252,
    "end_line": 255,
    "comment": "/** \n * Sets the Charset default for subclasses to initialize. \u003cp\u003e Subclasses may ignore this setting. \u003c/p\u003e\n * @param defaultCharset the Charset name, null resets to the default.\n * @return this.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractStreamBuilder.setOpenOptions#273",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractStreamBuilder.java",
    "class_name": "org.apache.commons.io.build.AbstractStreamBuilder",
    "signature": "org.apache.commons.io.build.AbstractStreamBuilder.setOpenOptions(java.nio.file.OpenOption)",
    "snippet": "public B setOpenOptions(final OpenOption... openOptions) {\n        this.openOptions \u003d openOptions !\u003d null ? openOptions : DEFAULT_OPEN_OPTIONS;\n        return asThis();\n    }",
    "begin_line": 273,
    "end_line": 276,
    "comment": "/** \n * Sets the OpenOption[]. \u003cp\u003e Normally used with InputStream, OutputStream, and Writer. \u003c/p\u003e \u003cp\u003e Subclasses may ignore this setting. \u003c/p\u003e\n * @param openOptions the OpenOption[] name, null resets to the default.\n * @return this.\n * @since 2.13.0\n * @see #setInputStream(InputStream)\n * @see #setOutputStream(OutputStream)\n * @see #setWriter(Writer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractSupplier.asThis#37",
    "is_bug": true,
    "src_path": "org/apache/commons/io/build/AbstractSupplier.java",
    "class_name": "org.apache.commons.io.build.AbstractSupplier",
    "signature": "org.apache.commons.io.build.AbstractSupplier.asThis()",
    "snippet": "@SuppressWarnings(\"unchecked\")\n    protected B asThis() {\n        return (B) this;\n    }",
    "begin_line": 37,
    "end_line": 39,
    "comment": "/** \n * Returns this instance typed as the proper subclass type.\n * @return this instance typed as the proper subclass type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.RelativeSortedPaths#111",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.RelativeSortedPaths(java.nio.file.Path, java.nio.file.Path, int, java.nio.file.LinkOption[], java.nio.file.FileVisitOption[])",
    "snippet": "private RelativeSortedPaths(final Path dir1, final Path dir2, final int maxDepth, final LinkOption[] linkOptions,\n            final FileVisitOption[] fileVisitOptions) throws IOException {\n            final List\u003cPath\u003e tmpRelativeDirList1;\n            final List\u003cPath\u003e tmpRelativeDirList2;\n            List\u003cPath\u003e tmpRelativeFileList1 \u003d null;\n            List\u003cPath\u003e tmpRelativeFileList2 \u003d null;\n            if (dir1 \u003d\u003d null \u0026\u0026 dir2 \u003d\u003d null) {\n                equals \u003d true;\n            } else if (dir1 \u003d\u003d null ^ dir2 \u003d\u003d null) {\n                equals \u003d false;\n            } else {\n                final boolean parentDirNotExists1 \u003d Files.notExists(dir1, linkOptions);\n                final boolean parentDirNotExists2 \u003d Files.notExists(dir2, linkOptions);\n                if (parentDirNotExists1 || parentDirNotExists2) {\n                    equals \u003d parentDirNotExists1 \u0026\u0026 parentDirNotExists2;\n                } else {\n                    final AccumulatorPathVisitor visitor1 \u003d accumulate(dir1, maxDepth, fileVisitOptions);\n                    final AccumulatorPathVisitor visitor2 \u003d accumulate(dir2, maxDepth, fileVisitOptions);\n                    if (visitor1.getDirList().size() !\u003d visitor2.getDirList().size() || visitor1.getFileList().size() !\u003d visitor2.getFileList().size()) {\n                        equals \u003d false;\n                    } else {\n                        tmpRelativeDirList1 \u003d visitor1.relativizeDirectories(dir1, true, null);\n                        tmpRelativeDirList2 \u003d visitor2.relativizeDirectories(dir2, true, null);\n                        if (!tmpRelativeDirList1.equals(tmpRelativeDirList2)) {\n                            equals \u003d false;\n                        } else {\n                            tmpRelativeFileList1 \u003d visitor1.relativizeFiles(dir1, true, null);\n                            tmpRelativeFileList2 \u003d visitor2.relativizeFiles(dir2, true, null);\n                            equals \u003d tmpRelativeFileList1.equals(tmpRelativeFileList2);\n                        }\n                    }\n                }\n            }\n            // relativeDirList1 \u003d tmpRelativeDirList1;\n            // relativeDirList2 \u003d tmpRelativeDirList2;\n            relativeFileList1 \u003d tmpRelativeFileList1;\n            relativeFileList2 \u003d tmpRelativeFileList2;\n        }",
    "begin_line": 111,
    "end_line": 148,
    "comment": "/** \n * Constructs and initializes a new instance by accumulating directory and file info.\n * @param dir1 First directory to compare.\n * @param dir2 Seconds directory to compare.\n * @param maxDepth See {@link Files#walkFileTree(Path,Set,int,FileVisitor)}.\n * @param linkOptions Options indicating how symbolic links are handled.\n * @param fileVisitOptions See {@link Files#walkFileTree(Path,Set,int,FileVisitor)}.\n * @throws IOException if an I/O error is thrown by a visitor method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.accumulate#223",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.accumulate(java.nio.file.Path, int, java.nio.file.FileVisitOption[])",
    "snippet": "private static AccumulatorPathVisitor accumulate(final Path directory, final int maxDepth, final FileVisitOption[] fileVisitOptions) throws IOException {\n        return visitFileTree(AccumulatorPathVisitor.withLongCounters(), directory, toFileVisitOptionSet(fileVisitOptions), maxDepth);\n    }",
    "begin_line": 223,
    "end_line": 225,
    "comment": "/** \n * Accumulates file tree information in a  {@link AccumulatorPathVisitor}.\n * @param directory The directory to accumulate information.\n * @param maxDepth See {@link Files#walkFileTree(Path,Set,int,FileVisitor)}.\n * @param fileVisitOptions See {@link Files#walkFileTree(Path,Set,int,FileVisitor)}.\n * @throws IOException if an I/O error is thrown by a visitor method.\n * @return file tree information.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.cleanDirectory#234",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.cleanDirectory(java.nio.file.Path)",
    "snippet": "public static PathCounters cleanDirectory(final Path directory) throws IOException {\n        return cleanDirectory(directory, EMPTY_DELETE_OPTION_ARRAY);\n    }",
    "begin_line": 234,
    "end_line": 236,
    "comment": "/** \n * Cleans a directory including subdirectories without deleting directories.\n * @param directory directory to clean.\n * @return The visitation path counters.\n * @throws IOException if an I/O error is thrown by a visitor method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.cleanDirectory#247",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.cleanDirectory(java.nio.file.Path, org.apache.commons.io.file.DeleteOption)",
    "snippet": "public static PathCounters cleanDirectory(final Path directory, final DeleteOption... deleteOptions) throws IOException {\n        return visitFileTree(new CleaningPathVisitor(Counters.longPathCounters(), deleteOptions), directory).getPathCounters();\n    }",
    "begin_line": 247,
    "end_line": 249,
    "comment": "/** \n * Cleans a directory including subdirectories without deleting directories.\n * @param directory directory to clean.\n * @param deleteOptions How to handle deletion.\n * @return The visitation path counters.\n * @throws IOException if an I/O error is thrown by a visitor method.\n * @since 2.8.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.compareLastModifiedTimeTo#261",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.compareLastModifiedTimeTo(java.nio.file.Path, java.nio.file.attribute.FileTime, java.nio.file.LinkOption)",
    "snippet": "private static int compareLastModifiedTimeTo(final Path file, final FileTime fileTime, final LinkOption... options) throws IOException {\n        return getLastModifiedTime(file, options).compareTo(fileTime);\n    }",
    "begin_line": 261,
    "end_line": 263,
    "comment": "/** \n * Compares the given  {@link Path}\u0027s last modified time to the given file time.\n * @param file the {@link Path} to test.\n * @param fileTime the time reference.\n * @param options options indicating how to handle symbolic links.\n * @return See {@link FileTime#compareTo(FileTime)}\n * @throws IOException if an I/O error occurs.\n * @throws NullPointerException if the file is {@code null}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.copy#275",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.copy(org.apache.commons.io.function.IOSupplier\u003cjava.io.InputStream\u003e, java.nio.file.Path, java.nio.file.CopyOption)",
    "snippet": "public static long copy(final IOSupplier\u003cInputStream\u003e in, final Path target, final CopyOption... copyOptions) throws IOException {\n        try (InputStream inputStream \u003d in.get()) {\n            return Files.copy(inputStream, target, copyOptions);\n        }\n    }",
    "begin_line": 275,
    "end_line": 279,
    "comment": "/** \n * Copies the InputStream from the supplier with  {@link Files#copy(InputStream,Path,CopyOption...)}.\n * @param in Supplies the InputStream.\n * @param target See {@link Files#copy(InputStream,Path,CopyOption...)}.\n * @param copyOptions See {@link Files#copy(InputStream,Path,CopyOption...)}.\n * @return See {@link Files#copy(InputStream,Path,CopyOption...)}\n * @throws IOException See {@link Files#copy(InputStream,Path,CopyOption...)}\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.copyDirectory#290",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.copyDirectory(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption)",
    "snippet": "public static PathCounters copyDirectory(final Path sourceDirectory, final Path targetDirectory, final CopyOption... copyOptions) throws IOException {\n        final Path absoluteSource \u003d sourceDirectory.toAbsolutePath();\n        return visitFileTree(new CopyDirectoryVisitor(Counters.longPathCounters(), absoluteSource, targetDirectory, copyOptions), absoluteSource)\n            .getPathCounters();\n    }",
    "begin_line": 290,
    "end_line": 294,
    "comment": "/** \n * Copies a directory to another directory.\n * @param sourceDirectory The source directory.\n * @param targetDirectory The target directory.\n * @param copyOptions Specifies how the copying should be done.\n * @return The visitation path counters.\n * @throws IOException if an I/O error is thrown by a visitor method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.copyFile#306",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.copyFile(java.net.URL, java.nio.file.Path, java.nio.file.CopyOption)",
    "snippet": "public static Path copyFile(final URL sourceFile, final Path targetFile, final CopyOption... copyOptions) throws IOException {\n        copy(sourceFile::openStream, targetFile, copyOptions);\n        return targetFile;\n    }",
    "begin_line": 306,
    "end_line": 309,
    "comment": "/** \n * Copies a URL to a directory.\n * @param sourceFile The source URL.\n * @param targetFile The target file.\n * @param copyOptions Specifies how the copying should be done.\n * @return The target file\n * @throws IOException if an I/O error occurs.\n * @see Files#copy(InputStream,Path,CopyOption...)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.copyFileToDirectory#321",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.copyFileToDirectory(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption)",
    "snippet": "public static Path copyFileToDirectory(final Path sourceFile, final Path targetDirectory, final CopyOption... copyOptions) throws IOException {\n        return Files.copy(sourceFile, targetDirectory.resolve(sourceFile.getFileName()), copyOptions);\n    }",
    "begin_line": 321,
    "end_line": 323,
    "comment": "/** \n * Copies a file to a directory.\n * @param sourceFile The source file.\n * @param targetDirectory The target directory.\n * @param copyOptions Specifies how the copying should be done.\n * @return The target file\n * @throws IOException if an I/O error occurs.\n * @see Files#copy(Path,Path,CopyOption...)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.copyFileToDirectory#335",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.copyFileToDirectory(java.net.URL, java.nio.file.Path, java.nio.file.CopyOption)",
    "snippet": "public static Path copyFileToDirectory(final URL sourceFile, final Path targetDirectory, final CopyOption... copyOptions) throws IOException {\n        final Path resolve \u003d targetDirectory.resolve(FilenameUtils.getName(sourceFile.getFile()));\n        copy(sourceFile::openStream, resolve, copyOptions);\n        return resolve;\n    }",
    "begin_line": 335,
    "end_line": 339,
    "comment": "/** \n * Copies a URL to a directory.\n * @param sourceFile The source URL.\n * @param targetDirectory The target directory.\n * @param copyOptions Specifies how the copying should be done.\n * @return The target file\n * @throws IOException if an I/O error occurs.\n * @see Files#copy(InputStream,Path,CopyOption...)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.countDirectory#348",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.countDirectory(java.nio.file.Path)",
    "snippet": "public static PathCounters countDirectory(final Path directory) throws IOException {\n        return visitFileTree(CountingPathVisitor.withLongCounters(), directory).getPathCounters();\n    }",
    "begin_line": 348,
    "end_line": 350,
    "comment": "/** \n * Counts aspects of a directory including subdirectories.\n * @param directory directory to delete.\n * @return The visitor used to count the given directory.\n * @throws IOException if an I/O error is thrown by a visitor method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.countDirectoryAsBigInteger#360",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.countDirectoryAsBigInteger(java.nio.file.Path)",
    "snippet": "public static PathCounters countDirectoryAsBigInteger(final Path directory) throws IOException {\n        return visitFileTree(CountingPathVisitor.withBigIntegerCounters(), directory).getPathCounters();\n    }",
    "begin_line": 360,
    "end_line": 362,
    "comment": "/** \n * Counts aspects of a directory including subdirectories.\n * @param directory directory to count.\n * @return The visitor used to count the given directory.\n * @throws IOException if an I/O error occurs.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.createParentDirectories#376",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.createParentDirectories(java.nio.file.Path, java.nio.file.attribute.FileAttribute\u003c?\u003e)",
    "snippet": "public static Path createParentDirectories(final Path path, final FileAttribute\u003c?\u003e... attrs) throws IOException {\n        return createParentDirectories(path, LinkOption.NOFOLLOW_LINKS, attrs);\n    }",
    "begin_line": 376,
    "end_line": 378,
    "comment": "/** \n * Creates the parent directories for the given  {@code path}. \u003cp\u003e If the parent directory already exists, then return it. \u003cp\u003e\n * @param path The path to a file (or directory).\n * @param attrs An optional list of file attributes to set atomically when creating the directories.\n * @return The Path for the {@code path}\u0027s parent directory or null if the given path has no parent.\n * @throws IOException if an I/O error occurs.\n * @since 2.9.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.createParentDirectories#393",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.createParentDirectories(java.nio.file.Path, java.nio.file.LinkOption, java.nio.file.attribute.FileAttribute\u003c?\u003e)",
    "snippet": "public static Path createParentDirectories(final Path path, final LinkOption linkOption,\n            final FileAttribute\u003c?\u003e... attrs) throws IOException {\n        Path parent \u003d getParent(path);\n        parent \u003d linkOption \u003d\u003d LinkOption.NOFOLLOW_LINKS ? parent : readIfSymbolicLink(parent);\n        if (parent \u003d\u003d null) {\n            return null;\n        }\n        final boolean exists \u003d linkOption \u003d\u003d null ? Files.exists(parent) : Files.exists(parent, linkOption);\n        return exists ? parent : Files.createDirectories(parent, attrs);\n    }",
    "begin_line": 393,
    "end_line": 402,
    "comment": "/** \n * Creates the parent directories for the given  {@code path}. \u003cp\u003e If the parent directory already exists, then return it. \u003cp\u003e\n * @param path The path to a file (or directory).\n * @param linkOption A {@link LinkOption} or null.\n * @param attrs An optional list of file attributes to set atomically when creating the directories.\n * @return The Path for the {@code path}\u0027s parent directory or null if the given path has no parent.\n * @throws IOException if an I/O error occurs.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.current#411",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.current()",
    "snippet": "public static Path current() {\n        return Paths.get(\".\");\n    }",
    "begin_line": 411,
    "end_line": 413,
    "comment": "/** \n * Gets the current directory.\n * @return the current directory.\n * @since 2.9.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.delete#430",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.delete(java.nio.file.Path)",
    "snippet": "public static PathCounters delete(final Path path) throws IOException {\n        return delete(path, EMPTY_DELETE_OPTION_ARRAY);\n    }",
    "begin_line": 430,
    "end_line": 432,
    "comment": "/** \n * Deletes a file or directory. If the path is a directory, delete it and all subdirectories. \u003cp\u003e The difference between File.delete() and this method are: \u003c/p\u003e \u003cul\u003e \u003cli\u003eA directory to delete does not have to be empty.\u003c/li\u003e \u003cli\u003eYou get exceptions when a file or directory cannot be deleted;  {@link java.io.File#delete()} returns a boolean.\u003c/ul\u003e\n * @param path file or directory to delete, must not be {@code null}\n * @return The visitor used to delete the given directory.\n * @throws NullPointerException if the directory is {@code null}\n * @throws IOException if an I/O error is thrown by a visitor method or if an I/O error occurs.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.delete#451",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.delete(java.nio.file.Path, org.apache.commons.io.file.DeleteOption)",
    "snippet": "public static PathCounters delete(final Path path, final DeleteOption... deleteOptions) throws IOException {\n        // File deletion through Files deletes links, not targets, so use LinkOption.NOFOLLOW_LINKS.\n        return Files.isDirectory(path, LinkOption.NOFOLLOW_LINKS) ? deleteDirectory(path, deleteOptions) : deleteFile(path, deleteOptions);\n    }",
    "begin_line": 451,
    "end_line": 454,
    "comment": "/** \n * Deletes a file or directory. If the path is a directory, delete it and all subdirectories. \u003cp\u003e The difference between File.delete() and this method are: \u003c/p\u003e \u003cul\u003e \u003cli\u003eA directory to delete does not have to be empty.\u003c/li\u003e \u003cli\u003eYou get exceptions when a file or directory cannot be deleted;  {@link java.io.File#delete()} returns a boolean.\u003c/ul\u003e\n * @param path file or directory to delete, must not be {@code null}\n * @param deleteOptions How to handle deletion.\n * @return The visitor used to delete the given directory.\n * @throws NullPointerException if the directory is {@code null}\n * @throws IOException if an I/O error is thrown by a visitor method or if an I/O error occurs.\n * @since 2.8.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.delete#474",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.delete(java.nio.file.Path, java.nio.file.LinkOption[], org.apache.commons.io.file.DeleteOption)",
    "snippet": "public static PathCounters delete(final Path path, final LinkOption[] linkOptions, final DeleteOption... deleteOptions) throws IOException {\n        // File deletion through Files deletes links, not targets, so use LinkOption.NOFOLLOW_LINKS.\n        return Files.isDirectory(path, linkOptions) ? deleteDirectory(path, linkOptions, deleteOptions) : deleteFile(path, linkOptions, deleteOptions);\n    }",
    "begin_line": 474,
    "end_line": 477,
    "comment": "/** \n * Deletes a file or directory. If the path is a directory, delete it and all subdirectories. \u003cp\u003e The difference between File.delete() and this method are: \u003c/p\u003e \u003cul\u003e \u003cli\u003eA directory to delete does not have to be empty.\u003c/li\u003e \u003cli\u003eYou get exceptions when a file or directory cannot be deleted;  {@link java.io.File#delete()} returns a boolean.\u003c/ul\u003e\n * @param path file or directory to delete, must not be {@code null}\n * @param linkOptions How to handle symbolic links.\n * @param deleteOptions How to handle deletion.\n * @return The visitor used to delete the given directory.\n * @throws NullPointerException if the directory is {@code null}\n * @throws IOException if an I/O error is thrown by a visitor method or if an I/O error occurs.\n * @since 2.9.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.deleteDirectory#486",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.deleteDirectory(java.nio.file.Path)",
    "snippet": "public static PathCounters deleteDirectory(final Path directory) throws IOException {\n        return deleteDirectory(directory, EMPTY_DELETE_OPTION_ARRAY);\n    }",
    "begin_line": 486,
    "end_line": 488,
    "comment": "/** \n * Deletes a directory including subdirectories.\n * @param directory directory to delete.\n * @return The visitor used to delete the given directory.\n * @throws IOException if an I/O error is thrown by a visitor method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.deleteDirectory#499",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.deleteDirectory(java.nio.file.Path, org.apache.commons.io.file.DeleteOption)",
    "snippet": "public static PathCounters deleteDirectory(final Path directory, final DeleteOption... deleteOptions) throws IOException {\n        final LinkOption[] linkOptions \u003d PathUtils.noFollowLinkOptionArray();\n        // POSIX ops will noop on non-POSIX.\n        return withPosixFileAttributes(getParent(directory), linkOptions, overrideReadOnly(deleteOptions),\n            pfa -\u003e visitFileTree(new DeletingPathVisitor(Counters.longPathCounters(), linkOptions, deleteOptions), directory).getPathCounters());\n    }",
    "begin_line": 499,
    "end_line": 504,
    "comment": "/** \n * Deletes a directory including subdirectories.\n * @param directory directory to delete.\n * @param deleteOptions How to handle deletion.\n * @return The visitor used to delete the given directory.\n * @throws IOException if an I/O error is thrown by a visitor method.\n * @since 2.8.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.deleteDirectory#516",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.deleteDirectory(java.nio.file.Path, java.nio.file.LinkOption[], org.apache.commons.io.file.DeleteOption)",
    "snippet": "public static PathCounters deleteDirectory(final Path directory, final LinkOption[] linkOptions, final DeleteOption... deleteOptions) throws IOException {\n        return visitFileTree(new DeletingPathVisitor(Counters.longPathCounters(), linkOptions, deleteOptions), directory).getPathCounters();\n    }",
    "begin_line": 516,
    "end_line": 518,
    "comment": "/** \n * Deletes a directory including subdirectories.\n * @param directory directory to delete.\n * @param linkOptions How to handle symbolic links.\n * @param deleteOptions How to handle deletion.\n * @return The visitor used to delete the given directory.\n * @throws IOException if an I/O error is thrown by a visitor method.\n * @since 2.9.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.deleteFile#528",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.deleteFile(java.nio.file.Path)",
    "snippet": "public static PathCounters deleteFile(final Path file) throws IOException {\n        return deleteFile(file, EMPTY_DELETE_OPTION_ARRAY);\n    }",
    "begin_line": 528,
    "end_line": 530,
    "comment": "/** \n * Deletes the given file.\n * @param file The file to delete.\n * @return A visitor with path counts set to 1 file, 0 directories, and the size of the deleted file.\n * @throws IOException if an I/O error occurs.\n * @throws NoSuchFileException if the file is a directory.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.deleteFile#542",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.deleteFile(java.nio.file.Path, org.apache.commons.io.file.DeleteOption)",
    "snippet": "public static PathCounters deleteFile(final Path file, final DeleteOption... deleteOptions) throws IOException {\n        // Files.deleteIfExists() never follows links, so use LinkOption.NOFOLLOW_LINKS in other calls to Files.\n        return deleteFile(file, noFollowLinkOptionArray(), deleteOptions);\n    }",
    "begin_line": 542,
    "end_line": 545,
    "comment": "/** \n * Deletes the given file.\n * @param file The file to delete.\n * @param deleteOptions How to handle deletion.\n * @return A visitor with path counts set to 1 file, 0 directories, and the size of the deleted file.\n * @throws IOException if an I/O error occurs.\n * @throws NoSuchFileException if the file is a directory.\n * @since 2.8.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.deleteFile#558",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.deleteFile(java.nio.file.Path, java.nio.file.LinkOption[], org.apache.commons.io.file.DeleteOption)",
    "snippet": "public static PathCounters deleteFile(final Path file, final LinkOption[] linkOptions, final DeleteOption... deleteOptions)\n        throws NoSuchFileException, IOException {\n        //\n        // TODO Needs clean up\n        //\n        if (Files.isDirectory(file, linkOptions)) {\n            throw new NoSuchFileException(file.toString());\n        }\n        final PathCounters pathCounts \u003d Counters.longPathCounters();\n        boolean exists \u003d exists(file, linkOptions);\n        long size \u003d exists \u0026\u0026 !Files.isSymbolicLink(file) ? Files.size(file) : 0;\n        try {\n            if (Files.deleteIfExists(file)) {\n                pathCounts.getFileCounter().increment();\n                pathCounts.getByteCounter().add(size);\n                return pathCounts;\n            }\n        } catch (final AccessDeniedException ignored) {\n            // Ignore and try again below.\n        }\n        final Path parent \u003d getParent(file);\n        PosixFileAttributes posixFileAttributes \u003d null;\n        try {\n            if (overrideReadOnly(deleteOptions)) {\n                posixFileAttributes \u003d readPosixFileAttributes(parent, linkOptions);\n                setReadOnly(file, false, linkOptions);\n            }\n            // Read size _after_ having read/execute access on POSIX.\n            exists \u003d exists(file, linkOptions);\n            size \u003d exists \u0026\u0026 !Files.isSymbolicLink(file) ? Files.size(file) : 0;\n            if (Files.deleteIfExists(file)) {\n                pathCounts.getFileCounter().increment();\n                pathCounts.getByteCounter().add(size);\n            }\n        } finally {\n            if (posixFileAttributes !\u003d null) {\n                Files.setPosixFilePermissions(parent, posixFileAttributes.permissions());\n            }\n        }\n        return pathCounts;\n    }",
    "begin_line": 558,
    "end_line": 598,
    "comment": "/** \n * Deletes the given file.\n * @param file The file to delete.\n * @param linkOptions How to handle symbolic links.\n * @param deleteOptions How to handle deletion.\n * @return A visitor with path counts set to 1 file, 0 directories, and the size of the deleted file.\n * @throws IOException if an I/O error occurs.\n * @throws NoSuchFileException if the file is a directory.\n * @since 2.9.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.deleteOnExit#606",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.deleteOnExit(java.nio.file.Path)",
    "snippet": "public static void deleteOnExit(final Path path) {\n        Objects.requireNonNull(path.toFile()).deleteOnExit();\n    }",
    "begin_line": 606,
    "end_line": 608,
    "comment": "/** \n * Delegates to  {@link File#deleteOnExit()}.\n * @param path the path to delete.\n * @since 3.13.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.directoryAndFileContentEquals#619",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.directoryAndFileContentEquals(java.nio.file.Path, java.nio.file.Path)",
    "snippet": "public static boolean directoryAndFileContentEquals(final Path path1, final Path path2) throws IOException {\n        return directoryAndFileContentEquals(path1, path2, EMPTY_LINK_OPTION_ARRAY, EMPTY_OPEN_OPTION_ARRAY, EMPTY_FILE_VISIT_OPTION_ARRAY);\n    }",
    "begin_line": 619,
    "end_line": 621,
    "comment": "/** \n * Compares the file sets of two Paths to determine if they are equal or not while considering file contents. The comparison includes all files in all subdirectories.\n * @param path1 The first directory.\n * @param path2 The second directory.\n * @return Whether the two directories contain the same files while considering file contents.\n * @throws IOException if an I/O error is thrown by a visitor method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.directoryAndFileContentEquals#635",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.directoryAndFileContentEquals(java.nio.file.Path, java.nio.file.Path, java.nio.file.LinkOption[], java.nio.file.OpenOption[], java.nio.file.FileVisitOption[])",
    "snippet": "public static boolean directoryAndFileContentEquals(final Path path1, final Path path2, final LinkOption[] linkOptions, final OpenOption[] openOptions,\n        final FileVisitOption[] fileVisitOption) throws IOException {\n        // First walk both file trees and gather normalized paths.\n        if (path1 \u003d\u003d null \u0026\u0026 path2 \u003d\u003d null) {\n            return true;\n        }\n        if (path1 \u003d\u003d null || path2 \u003d\u003d null) {\n            return false;\n        }\n        if (notExists(path1) \u0026\u0026 notExists(path2)) {\n            return true;\n        }\n        final RelativeSortedPaths relativeSortedPaths \u003d new RelativeSortedPaths(path1, path2, Integer.MAX_VALUE, linkOptions, fileVisitOption);\n        // If the normalized path names and counts are not the same, no need to compare contents.\n        if (!relativeSortedPaths.equals) {\n            return false;\n        }\n        // Both visitors contain the same normalized paths, we can compare file contents.\n        final List\u003cPath\u003e fileList1 \u003d relativeSortedPaths.relativeFileList1;\n        final List\u003cPath\u003e fileList2 \u003d relativeSortedPaths.relativeFileList2;\n        for (final Path path : fileList1) {\n            final int binarySearch \u003d Collections.binarySearch(fileList2, path);\n            if (binarySearch \u003c\u003d -1) {\n                throw new IllegalStateException(\"Unexpected mismatch.\");\n            }\n            if (!fileContentEquals(path1.resolve(path), path2.resolve(path), linkOptions, openOptions)) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 635,
    "end_line": 665,
    "comment": "/** \n * Compares the file sets of two Paths to determine if they are equal or not while considering file contents. The comparison includes all files in all subdirectories.\n * @param path1 The first directory.\n * @param path2 The second directory.\n * @param linkOptions options to follow links.\n * @param openOptions options to open files.\n * @param fileVisitOption options to configure traversal.\n * @return Whether the two directories contain the same files while considering file contents.\n * @throws IOException if an I/O error is thrown by a visitor method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.directoryContentEquals#676",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.directoryContentEquals(java.nio.file.Path, java.nio.file.Path)",
    "snippet": "public static boolean directoryContentEquals(final Path path1, final Path path2) throws IOException {\n        return directoryContentEquals(path1, path2, Integer.MAX_VALUE, EMPTY_LINK_OPTION_ARRAY, EMPTY_FILE_VISIT_OPTION_ARRAY);\n    }",
    "begin_line": 676,
    "end_line": 678,
    "comment": "/** \n * Compares the file sets of two Paths to determine if they are equal or not without considering file contents. The comparison includes all files in all subdirectories.\n * @param path1 The first directory.\n * @param path2 The second directory.\n * @return Whether the two directories contain the same files without considering file contents.\n * @throws IOException if an I/O error is thrown by a visitor method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.directoryContentEquals#692",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.directoryContentEquals(java.nio.file.Path, java.nio.file.Path, int, java.nio.file.LinkOption[], java.nio.file.FileVisitOption[])",
    "snippet": "public static boolean directoryContentEquals(final Path path1, final Path path2, final int maxDepth, final LinkOption[] linkOptions,\n        final FileVisitOption[] fileVisitOptions) throws IOException {\n        return new RelativeSortedPaths(path1, path2, maxDepth, linkOptions, fileVisitOptions).equals;\n    }",
    "begin_line": 692,
    "end_line": 695,
    "comment": "/** \n * Compares the file sets of two Paths to determine if they are equal or not without considering file contents. The comparison includes all files in all subdirectories.\n * @param path1 The first directory.\n * @param path2 The second directory.\n * @param maxDepth See {@link Files#walkFileTree(Path,Set,int,FileVisitor)}.\n * @param linkOptions options to follow links.\n * @param fileVisitOptions options to configure the traversal\n * @return Whether the two directories contain the same files without considering file contents.\n * @throws IOException if an I/O error is thrown by a visitor method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.exists#697",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.exists(java.nio.file.Path, java.nio.file.LinkOption)",
    "snippet": "private static boolean exists(final Path path, final LinkOption... options) {\n        Objects.requireNonNull(path, \"path\");\n        return options !\u003d null ? Files.exists(path, options) : Files.exists(path);\n    }",
    "begin_line": 697,
    "end_line": 700,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.fileContentEquals#715",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.fileContentEquals(java.nio.file.Path, java.nio.file.Path)",
    "snippet": "public static boolean fileContentEquals(final Path path1, final Path path2) throws IOException {\n        return fileContentEquals(path1, path2, EMPTY_LINK_OPTION_ARRAY, EMPTY_OPEN_OPTION_ARRAY);\n    }",
    "begin_line": 715,
    "end_line": 717,
    "comment": "/** \n * Compares the file contents of two Paths to determine if they are equal or not. \u003cp\u003e File content is accessed through  {@link Files#newInputStream(Path,OpenOption...)}. \u003c/p\u003e\n * @param path1 the first stream.\n * @param path2 the second stream.\n * @return true if the content of the streams are equal or they both don\u0027t exist, false otherwise.\n * @throws NullPointerException if either input is null.\n * @throws IOException if an I/O error occurs.\n * @see org.apache.commons.io.FileUtils#contentEquals(java.io.File,java.io.File)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.fileContentEquals#734",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.fileContentEquals(java.nio.file.Path, java.nio.file.Path, java.nio.file.LinkOption[], java.nio.file.OpenOption[])",
    "snippet": "public static boolean fileContentEquals(final Path path1, final Path path2, final LinkOption[] linkOptions, final OpenOption[] openOptions)\n        throws IOException {\n        if (path1 \u003d\u003d null \u0026\u0026 path2 \u003d\u003d null) {\n            return true;\n        }\n        if (path1 \u003d\u003d null || path2 \u003d\u003d null) {\n            return false;\n        }\n        final Path nPath1 \u003d path1.normalize();\n        final Path nPath2 \u003d path2.normalize();\n        final boolean path1Exists \u003d exists(nPath1, linkOptions);\n        if (path1Exists !\u003d exists(nPath2, linkOptions)) {\n            return false;\n        }\n        if (!path1Exists) {\n            // Two not existing files are equal?\n            // Same as FileUtils\n            return true;\n        }\n        if (Files.isDirectory(nPath1, linkOptions)) {\n            // don\u0027t compare directory contents.\n            throw new IOException(\"Can\u0027t compare directories, only files: \" + nPath1);\n        }\n        if (Files.isDirectory(nPath2, linkOptions)) {\n            // don\u0027t compare directory contents.\n            throw new IOException(\"Can\u0027t compare directories, only files: \" + nPath2);\n        }\n        if (Files.size(nPath1) !\u003d Files.size(nPath2)) {\n            // lengths differ, cannot be equal\n            return false;\n        }\n        if (path1.equals(path2)) {\n            // same file\n            return true;\n        }\n        try (InputStream inputStream1 \u003d Files.newInputStream(nPath1, openOptions);\n            InputStream inputStream2 \u003d Files.newInputStream(nPath2, openOptions)) {\n            return IOUtils.contentEquals(inputStream1, inputStream2);\n        }\n    }",
    "begin_line": 734,
    "end_line": 773,
    "comment": "/** \n * Compares the file contents of two Paths to determine if they are equal or not. \u003cp\u003e File content is accessed through  {@link Files#newInputStream(Path,OpenOption...)}. \u003c/p\u003e\n * @param path1 the first stream.\n * @param path2 the second stream.\n * @param linkOptions options specifying how files are followed.\n * @param openOptions options specifying how files are opened.\n * @return true if the content of the streams are equal or they both don\u0027t exist, false otherwise.\n * @throws NullPointerException if openOptions is null.\n * @throws IOException if an I/O error occurs.\n * @see org.apache.commons.io.FileUtils#contentEquals(java.io.File,java.io.File)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.filter#800",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.filter(org.apache.commons.io.file.PathFilter, java.nio.file.Path)",
    "snippet": "public static Path[] filter(final PathFilter filter, final Path... paths) {\n        Objects.requireNonNull(filter, \"filter\");\n        if (paths \u003d\u003d null) {\n            return EMPTY_PATH_ARRAY;\n        }\n        return filterPaths(filter, Stream.of(paths), Collectors.toList()).toArray(EMPTY_PATH_ARRAY);\n    }",
    "begin_line": 800,
    "end_line": 806,
    "comment": "/** \n * \u003cp\u003e Applies an  {@link IOFileFilter} to the provided {@link File} objects. The resulting array is a subset of the originalfile list that matches the provided filter. \u003c/p\u003e \u003cp\u003e The  {@link Set} returned by this method is not guaranteed to be thread safe.\u003c/p\u003e \u003cpre\u003e Set\u0026lt;File\u0026gt; allFiles \u003d ... Set\u0026lt;File\u0026gt; javaFiles \u003d FileFilterUtils.filterSet(allFiles, FileFilterUtils.suffixFileFilter(\".java\")); \u003c/pre\u003e\n * @param filter the filter to apply to the set of files.\n * @param paths the array of files to apply the filter to.\n * @return a subset of {@code files} that is accepted by the file filter.\n * @throws NullPointerException if the filter is {@code null}\n * @throws IllegalArgumentException if {@code files} contains a {@code null} value.\n * @since 2.9.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.filterPaths#808",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.filterPaths(org.apache.commons.io.file.PathFilter, java.util.stream.Stream\u003cjava.nio.file.Path\u003e, java.util.stream.Collector\u003c? super java.nio.file.Path,A,R\u003e)",
    "snippet": "private static \u003cR, A\u003e R filterPaths(final PathFilter filter, final Stream\u003cPath\u003e stream, final Collector\u003c? super Path, A, R\u003e collector) {\n        Objects.requireNonNull(filter, \"filter\");\n        Objects.requireNonNull(collector, \"collector\");\n        if (stream \u003d\u003d null) {\n            return Stream.\u003cPath\u003eempty().collect(collector);\n        }\n        return stream.filter(p -\u003e {\n            try {\n                return p !\u003d null \u0026\u0026 filter.accept(p, readBasicFileAttributes(p)) \u003d\u003d FileVisitResult.CONTINUE;\n            } catch (final IOException e) {\n                return false;\n            }\n        }).collect(collector);\n    }",
    "begin_line": 808,
    "end_line": 821,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.getAclEntryList#831",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.getAclEntryList(java.nio.file.Path)",
    "snippet": "public static List\u003cAclEntry\u003e getAclEntryList(final Path sourcePath) throws IOException {\n        final AclFileAttributeView fileAttributeView \u003d getAclFileAttributeView(sourcePath);\n        return fileAttributeView \u003d\u003d null ? null : fileAttributeView.getAcl();\n    }",
    "begin_line": 831,
    "end_line": 834,
    "comment": "/** \n * Reads the access control list from a file attribute view.\n * @param sourcePath the path to the file.\n * @return a file attribute view of the given type, or null if the attribute view type is not available.\n * @throws IOException if an I/O error occurs.\n * @since 2.8.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.getAclFileAttributeView#844",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.getAclFileAttributeView(java.nio.file.Path, java.nio.file.LinkOption)",
    "snippet": "public static AclFileAttributeView getAclFileAttributeView(final Path path, final LinkOption... options) {\n        return Files.getFileAttributeView(path, AclFileAttributeView.class, options);\n    }",
    "begin_line": 844,
    "end_line": 846,
    "comment": "/** \n * Shorthand for  {@code Files.getFileAttributeView(path, AclFileAttributeView.class)}.\n * @param path the path to the file.\n * @param options how to handle symbolic links.\n * @return a AclFileAttributeView, or {@code null} if the attribute view type is not available.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.getDosFileAttributeView#856",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.getDosFileAttributeView(java.nio.file.Path, java.nio.file.LinkOption)",
    "snippet": "public static DosFileAttributeView getDosFileAttributeView(final Path path, final LinkOption... options) {\n        return Files.getFileAttributeView(path, DosFileAttributeView.class, options);\n    }",
    "begin_line": 856,
    "end_line": 858,
    "comment": "/** \n * Shorthand for  {@code Files.getFileAttributeView(path, DosFileAttributeView.class)}.\n * @param path the path to the file.\n * @param options how to handle symbolic links.\n * @return a DosFileAttributeView, or {@code null} if the attribute view type is not available.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.getLastModifiedFileTime#873",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.getLastModifiedFileTime(java.io.File)",
    "snippet": "public static FileTime getLastModifiedFileTime(final File file) throws IOException {\n        return getLastModifiedFileTime(file.toPath(), null, EMPTY_LINK_OPTION_ARRAY);\n    }",
    "begin_line": 873,
    "end_line": 875,
    "comment": "/** \n * Gets the file\u0027s last modified time or null if the file does not exist. \u003cp\u003e The method provides a workaround for bug \u003ca href\u003d\"https://bugs.openjdk.java.net/browse/JDK-8177809\"\u003eJDK-8177809\u003c/a\u003e where  {@link File#lastModified()} looses milliseconds and always ends in 000. This bug is in OpenJDK 8 and 9, andfixed in 11. \u003c/p\u003e\n * @param file the file to query.\n * @return the file\u0027s last modified time.\n * @throws IOException Thrown if an I/O error occurs.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.getLastModifiedFileTime#887",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.getLastModifiedFileTime(java.nio.file.Path, java.nio.file.attribute.FileTime, java.nio.file.LinkOption)",
    "snippet": "public static FileTime getLastModifiedFileTime(final Path path, final FileTime defaultIfAbsent, final LinkOption... options) throws IOException {\n        return Files.exists(path) ? getLastModifiedTime(path, options) : defaultIfAbsent;\n    }",
    "begin_line": 887,
    "end_line": 889,
    "comment": "/** \n * Gets the file\u0027s last modified time or null if the file does not exist.\n * @param path the file to query.\n * @param defaultIfAbsent Returns this file time of the file does not exist, may be null.\n * @param options options indicating how symbolic links are handled.\n * @return the file\u0027s last modified time.\n * @throws IOException Thrown if an I/O error occurs.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.getLastModifiedFileTime#900",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.getLastModifiedFileTime(java.nio.file.Path, java.nio.file.LinkOption)",
    "snippet": "public static FileTime getLastModifiedFileTime(final Path path, final LinkOption... options) throws IOException {\n        return getLastModifiedFileTime(path, null, options);\n    }",
    "begin_line": 900,
    "end_line": 902,
    "comment": "/** \n * Gets the file\u0027s last modified time or null if the file does not exist.\n * @param path the file to query.\n * @param options options indicating how symbolic links are handled.\n * @return the file\u0027s last modified time.\n * @throws IOException Thrown if an I/O error occurs.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.getLastModifiedFileTime#912",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.getLastModifiedFileTime(java.net.URI)",
    "snippet": "public static FileTime getLastModifiedFileTime(final URI uri) throws IOException {\n        return getLastModifiedFileTime(Paths.get(uri), null, EMPTY_LINK_OPTION_ARRAY);\n    }",
    "begin_line": 912,
    "end_line": 914,
    "comment": "/** \n * Gets the file\u0027s last modified time or null if the file does not exist.\n * @param uri the file to query.\n * @return the file\u0027s last modified time.\n * @throws IOException Thrown if an I/O error occurs.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.getLastModifiedFileTime#926",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.getLastModifiedFileTime(java.net.URL)",
    "snippet": "public static FileTime getLastModifiedFileTime(final URL url) throws IOException, URISyntaxException {\n        return getLastModifiedFileTime(url.toURI());\n    }",
    "begin_line": 926,
    "end_line": 928,
    "comment": "/** \n * Gets the file\u0027s last modified time or null if the file does not exist.\n * @param url the file to query.\n * @return the file\u0027s last modified time.\n * @throws IOException Thrown if an I/O error occurs.\n * @throws URISyntaxException if the URL is not formatted strictly according to RFC2396 and cannot be converted to aURI.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.getLastModifiedTime#930",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.getLastModifiedTime(java.nio.file.Path, java.nio.file.LinkOption)",
    "snippet": "private static FileTime getLastModifiedTime(final Path path, final LinkOption... options) throws IOException {\n        return Files.getLastModifiedTime(Objects.requireNonNull(path, \"path\"), options);\n    }",
    "begin_line": 930,
    "end_line": 932,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.getParent#934",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.getParent(java.nio.file.Path)",
    "snippet": "private static Path getParent(final Path path) {\n        return path \u003d\u003d null ? null : path.getParent();\n    }",
    "begin_line": 934,
    "end_line": 936,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.getPosixFileAttributeView#946",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.getPosixFileAttributeView(java.nio.file.Path, java.nio.file.LinkOption)",
    "snippet": "public static PosixFileAttributeView getPosixFileAttributeView(final Path path, final LinkOption... options) {\n        return Files.getFileAttributeView(path, PosixFileAttributeView.class, options);\n    }",
    "begin_line": 946,
    "end_line": 948,
    "comment": "/** \n * Shorthand for  {@code Files.getFileAttributeView(path, PosixFileAttributeView.class)}.\n * @param path the path to the file.\n * @param options how to handle symbolic links.\n * @return a PosixFileAttributeView, or {@code null} if the attribute view type is not available.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.getTempDirectory#956",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.getTempDirectory()",
    "snippet": "public static Path getTempDirectory() {\n        return Paths.get(FileUtils.getTempDirectoryPath());\n    }",
    "begin_line": 956,
    "end_line": 958,
    "comment": "/** \n * Gets a  {@link Path} representing the system temporary directory.\n * @return the system temporary directory.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.isDirectory#972",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.isDirectory(java.nio.file.Path, java.nio.file.LinkOption)",
    "snippet": "public static boolean isDirectory(final Path path, final LinkOption... options) {\n        return path !\u003d null \u0026\u0026 Files.isDirectory(path, options);\n    }",
    "begin_line": 972,
    "end_line": 974,
    "comment": "/** \n * Tests whether the given  {@link Path} is a directory or not. Implemented as a null-safe delegate to{@code Files.isDirectory(Path path, LinkOption... options)}.\n * @param path the path to the file.\n * @param options options indicating how to handle symbolic links\n * @return {@code true} if the file is a directory; {@code false} if the path is null, the file does not exist, is not adirectory, or it cannot be determined if the file is a directory or not.\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the{@link SecurityManager#checkRead(String) checkRead} method is invoked to check read access to the directory.\n * @since 2.9.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.isEmpty#983",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.isEmpty(java.nio.file.Path)",
    "snippet": "public static boolean isEmpty(final Path path) throws IOException {\n        return Files.isDirectory(path) ? isEmptyDirectory(path) : isEmptyFile(path);\n    }",
    "begin_line": 983,
    "end_line": 985,
    "comment": "/** \n * Tests whether the given file or directory is empty.\n * @param path the file or directory to query.\n * @return whether the file or directory is empty.\n * @throws IOException if an I/O error occurs.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.isEmptyDirectory#998",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.isEmptyDirectory(java.nio.file.Path)",
    "snippet": "public static boolean isEmptyDirectory(final Path directory) throws IOException {\n        try (DirectoryStream\u003cPath\u003e directoryStream \u003d Files.newDirectoryStream(directory)) {\n            return !directoryStream.iterator().hasNext();\n        }\n    }",
    "begin_line": 998,
    "end_line": 1002,
    "comment": "/** \n * Tests whether the directory is empty.\n * @param directory the directory to query.\n * @return whether the directory is empty.\n * @throws NotDirectoryException if the file could not otherwise be opened because it is not a directory \u003ci\u003e(optionalspecific exception)\u003c/i\u003e.\n * @throws IOException if an I/O error occurs.\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the{@link SecurityManager#checkRead(String) checkRead} method is invoked to check read access to the directory.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.isEmptyFile#1013",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.isEmptyFile(java.nio.file.Path)",
    "snippet": "public static boolean isEmptyFile(final Path file) throws IOException {\n        return Files.size(file) \u003c\u003d 0;\n    }",
    "begin_line": 1013,
    "end_line": 1015,
    "comment": "/** \n * Tests whether the given file is empty.\n * @param file the file to query.\n * @return whether the file is empty.\n * @throws IOException if an I/O error occurs.\n * @throws SecurityException In the case of the default provider, and a security manager is installed, its{@link SecurityManager#checkRead(String) checkRead} method denies read access to the file.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.isNewer#1028",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.isNewer(java.nio.file.Path, java.time.chrono.ChronoZonedDateTime\u003c?\u003e, java.nio.file.LinkOption)",
    "snippet": "public static boolean isNewer(final Path file, final ChronoZonedDateTime\u003c?\u003e czdt, final LinkOption... options) throws IOException {\n        Objects.requireNonNull(czdt, \"czdt\");\n        return isNewer(file, czdt.toInstant(), options);\n    }",
    "begin_line": 1028,
    "end_line": 1031,
    "comment": "/** \n * Tests if the given  {@link Path} is newer than the given time reference.\n * @param file the {@link Path} to test.\n * @param czdt the time reference.\n * @param options options indicating how to handle symbolic links.\n * @return true if the {@link Path} exists and has been modified after the given time reference.\n * @throws IOException if an I/O error occurs.\n * @throws NullPointerException if the file is {@code null}.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.isNewer#1044",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.isNewer(java.nio.file.Path, java.nio.file.attribute.FileTime, java.nio.file.LinkOption)",
    "snippet": "public static boolean isNewer(final Path file, final FileTime fileTime, final LinkOption... options) throws IOException {\n        if (notExists(file)) {\n            return false;\n        }\n        return compareLastModifiedTimeTo(file, fileTime, options) \u003e 0;\n    }",
    "begin_line": 1044,
    "end_line": 1049,
    "comment": "/** \n * Tests if the given  {@link Path} is newer than the given time reference.\n * @param file the {@link Path} to test.\n * @param fileTime the time reference.\n * @param options options indicating how to handle symbolic links.\n * @return true if the {@link Path} exists and has been modified after the given time reference.\n * @throws IOException if an I/O error occurs.\n * @throws NullPointerException if the file is {@code null}.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.isNewer#1062",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.isNewer(java.nio.file.Path, java.time.Instant, java.nio.file.LinkOption)",
    "snippet": "public static boolean isNewer(final Path file, final Instant instant, final LinkOption... options) throws IOException {\n        return isNewer(file, FileTime.from(instant), options);\n    }",
    "begin_line": 1062,
    "end_line": 1064,
    "comment": "/** \n * Tests if the given  {@link Path} is newer than the given time reference.\n * @param file the {@link Path} to test.\n * @param instant the time reference.\n * @param options options indicating how to handle symbolic links.\n * @return true if the {@link Path} exists and has been modified after the given time reference.\n * @throws IOException if an I/O error occurs.\n * @throws NullPointerException if the file is {@code null}.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.isNewer#1077",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.isNewer(java.nio.file.Path, long, java.nio.file.LinkOption)",
    "snippet": "public static boolean isNewer(final Path file, final long timeMillis, final LinkOption... options) throws IOException {\n        return isNewer(file, FileTime.fromMillis(timeMillis), options);\n    }",
    "begin_line": 1077,
    "end_line": 1079,
    "comment": "/** \n * Tests if the given  {@link Path} is newer than the given time reference.\n * @param file the {@link Path} to test.\n * @param timeMillis the time reference measured in milliseconds since the epoch (00:00:00 GMT, January 1, 1970)\n * @param options options indicating how to handle symbolic links.\n * @return true if the {@link Path} exists and has been modified after the given time reference.\n * @throws IOException if an I/O error occurs.\n * @throws NullPointerException if the file is {@code null}.\n * @since 2.9.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.isNewer#1090",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.isNewer(java.nio.file.Path, java.nio.file.Path)",
    "snippet": "public static boolean isNewer(final Path file, final Path reference) throws IOException {\n        return isNewer(file, getLastModifiedTime(reference));\n    }",
    "begin_line": 1090,
    "end_line": 1092,
    "comment": "/** \n * Tests if the given  {@link Path} is newer than the reference {@link Path}.\n * @param file the {@link File} to test.\n * @param reference the {@link File} of which the modification date is used.\n * @return true if the {@link File} exists and has been modified more recently than the reference {@link File}.\n * @throws IOException if an I/O error occurs.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.isOlder#1105",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.isOlder(java.nio.file.Path, java.nio.file.attribute.FileTime, java.nio.file.LinkOption)",
    "snippet": "public static boolean isOlder(final Path file, final FileTime fileTime, final LinkOption... options) throws IOException {\n        if (notExists(file)) {\n            return false;\n        }\n        return compareLastModifiedTimeTo(file, fileTime, options) \u003c 0;\n    }",
    "begin_line": 1105,
    "end_line": 1110,
    "comment": "/** \n * Tests if the given  {@link Path} is older than the given time reference.\n * @param file the {@link Path} to test.\n * @param fileTime the time reference.\n * @param options options indicating how to handle symbolic links.\n * @return true if the {@link Path} exists and has been modified before the given time reference.\n * @throws IOException if an I/O error occurs.\n * @throws NullPointerException if the file is {@code null}.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.isOlder#1123",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.isOlder(java.nio.file.Path, java.time.Instant, java.nio.file.LinkOption)",
    "snippet": "public static boolean isOlder(final Path file, final Instant instant, final LinkOption... options) throws IOException {\n        return isOlder(file, FileTime.from(instant), options);\n    }",
    "begin_line": 1123,
    "end_line": 1125,
    "comment": "/** \n * Tests if the given  {@link Path} is older than the given time reference.\n * @param file the {@link Path} to test.\n * @param instant the time reference.\n * @param options options indicating how to handle symbolic links.\n * @return true if the {@link Path} exists and has been modified before the given time reference.\n * @throws IOException if an I/O error occurs.\n * @throws NullPointerException if the file is {@code null}.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.isOlder#1138",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.isOlder(java.nio.file.Path, long, java.nio.file.LinkOption)",
    "snippet": "public static boolean isOlder(final Path file, final long timeMillis, final LinkOption... options) throws IOException {\n        return isOlder(file, FileTime.fromMillis(timeMillis), options);\n    }",
    "begin_line": 1138,
    "end_line": 1140,
    "comment": "/** \n * Tests if the given  {@link Path} is older than the given time reference.\n * @param file the {@link Path} to test.\n * @param timeMillis the time reference measured in milliseconds since the epoch (00:00:00 GMT, January 1, 1970)\n * @param options options indicating how to handle symbolic links.\n * @return true if the {@link Path} exists and has been modified before the given time reference.\n * @throws IOException if an I/O error occurs.\n * @throws NullPointerException if the file is {@code null}.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.isOlder#1151",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.isOlder(java.nio.file.Path, java.nio.file.Path)",
    "snippet": "public static boolean isOlder(final Path file, final Path reference) throws IOException {\n        return isOlder(file, getLastModifiedTime(reference));\n    }",
    "begin_line": 1151,
    "end_line": 1153,
    "comment": "/** \n * Tests if the given  {@link Path} is older than the reference {@link Path}.\n * @param file the {@link File} to test.\n * @param reference the {@link File} of which the modification date is used.\n * @return true if the {@link File} exists and has been modified before than the reference {@link File}.\n * @throws IOException if an I/O error occurs.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.isPosix#1163",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.isPosix(java.nio.file.Path, java.nio.file.LinkOption)",
    "snippet": "public static boolean isPosix(final Path test, final LinkOption... options) {\n        return exists(test, options) \u0026\u0026 readPosixFileAttributes(test, options) !\u003d null;\n    }",
    "begin_line": 1163,
    "end_line": 1165,
    "comment": "/** \n * Tests whether the given path is on a POSIX file system.\n * @param test The Path to test.\n * @param options options indicating how to handle symbolic links.\n * @return true if test is on a POSIX file system.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.isRegularFile#1179",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.isRegularFile(java.nio.file.Path, java.nio.file.LinkOption)",
    "snippet": "public static boolean isRegularFile(final Path path, final LinkOption... options) {\n        return path !\u003d null \u0026\u0026 Files.isRegularFile(path, options);\n    }",
    "begin_line": 1179,
    "end_line": 1181,
    "comment": "/** \n * Tests whether the given  {@link Path} is a regular file or not. Implemented as a null-safe delegate to{@code Files.isRegularFile(Path path, LinkOption... options)}.\n * @param path the path to the file.\n * @param options options indicating how to handle symbolic links.\n * @return {@code true} if the file is a regular file; {@code false} if the path is null, the file does not exist, isnot a directory, or it cannot be determined if the file is a regular file or not.\n * @throws SecurityException In the case of the default provider, and a security manager is installed, the{@link SecurityManager#checkRead(String) checkRead} method is invoked to check read access to the directory.\n * @since 2.9.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.newDirectoryStream#1191",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.newDirectoryStream(java.nio.file.Path, org.apache.commons.io.file.PathFilter)",
    "snippet": "public static DirectoryStream\u003cPath\u003e newDirectoryStream(final Path dir, final PathFilter pathFilter) throws IOException {\n        return Files.newDirectoryStream(dir, new DirectoryStreamFilter(pathFilter));\n    }",
    "begin_line": 1191,
    "end_line": 1193,
    "comment": "/** \n * Creates a new DirectoryStream for Paths rooted at the given directory.\n * @param dir the path to the directory to stream.\n * @param pathFilter the directory stream filter.\n * @return a new instance.\n * @throws IOException if an I/O error occurs.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.newOutputStream#1206",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.newOutputStream(java.nio.file.Path, boolean)",
    "snippet": "public static OutputStream newOutputStream(final Path path, final boolean append) throws IOException {\n        return newOutputStream(path, EMPTY_LINK_OPTION_ARRAY, append ? OPEN_OPTIONS_APPEND : OPEN_OPTIONS_TRUNCATE);\n    }",
    "begin_line": 1206,
    "end_line": 1208,
    "comment": "/** \n * Creates a new OutputStream by opening or creating a file, returning an output stream that may be used to write bytes to the file.\n * @param path the Path.\n * @param append Whether or not to append.\n * @return a new OutputStream.\n * @throws IOException if an I/O error occurs.\n * @see Files#newOutputStream(Path,OpenOption...)\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.newOutputStream#1210",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.newOutputStream(java.nio.file.Path, java.nio.file.LinkOption[], java.nio.file.OpenOption)",
    "snippet": "static OutputStream newOutputStream(final Path path, final LinkOption[] linkOptions, final OpenOption... openOptions) throws IOException {\n        if (!exists(path, linkOptions)) {\n            createParentDirectories(path, linkOptions !\u003d null \u0026\u0026 linkOptions.length \u003e 0 ? linkOptions[0] : NULL_LINK_OPTION);\n        }\n        final List\u003cOpenOption\u003e list \u003d new ArrayList\u003c\u003e(Arrays.asList(openOptions !\u003d null ? openOptions : EMPTY_OPEN_OPTION_ARRAY));\n        list.addAll(Arrays.asList(linkOptions !\u003d null ? linkOptions : EMPTY_LINK_OPTION_ARRAY));\n        return Files.newOutputStream(path, list.toArray(EMPTY_OPEN_OPTION_ARRAY));\n    }",
    "begin_line": 1210,
    "end_line": 1217,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.noFollowLinkOptionArray#1224",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.noFollowLinkOptionArray()",
    "snippet": "public static LinkOption[] noFollowLinkOptionArray() {\n        return NOFOLLOW_LINK_OPTION_ARRAY.clone();\n    }",
    "begin_line": 1224,
    "end_line": 1226,
    "comment": "/** \n * Copy of the  {@link LinkOption} array for {@link LinkOption#NOFOLLOW_LINKS}.\n * @return Copy of the {@link LinkOption} array for {@link LinkOption#NOFOLLOW_LINKS}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.notExists#1228",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.notExists(java.nio.file.Path, java.nio.file.LinkOption)",
    "snippet": "private static boolean notExists(final Path path, final LinkOption... options) {\n        return Files.notExists(Objects.requireNonNull(path, \"path\"), options);\n    }",
    "begin_line": 1228,
    "end_line": 1230,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.overrideReadOnly#1238",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.overrideReadOnly(org.apache.commons.io.file.DeleteOption)",
    "snippet": "private static boolean overrideReadOnly(final DeleteOption... deleteOptions) {\n        if (deleteOptions \u003d\u003d null) {\n            return false;\n        }\n        return Stream.of(deleteOptions).anyMatch(e -\u003e e \u003d\u003d StandardDeleteOption.OVERRIDE_READ_ONLY);\n    }",
    "begin_line": 1238,
    "end_line": 1243,
    "comment": "/** \n * Returns true if the given options contain  {@link StandardDeleteOption#OVERRIDE_READ_ONLY}.\n * @param deleteOptions the array to test\n * @return true if the given options contain {@link StandardDeleteOption#OVERRIDE_READ_ONLY}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.readAttributes#1257",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.readAttributes(java.nio.file.Path, java.lang.Class\u003cA\u003e, java.nio.file.LinkOption)",
    "snippet": "public static \u003cA extends BasicFileAttributes\u003e A readAttributes(final Path path, final Class\u003cA\u003e type, final LinkOption... options) {\n        try {\n            return path \u003d\u003d null ? null : Uncheck.apply(Files::readAttributes, path, type, options);\n        } catch (final UnsupportedOperationException e) {\n            // For example, on Windows.\n            return null;\n        }\n    }",
    "begin_line": 1257,
    "end_line": 1264,
    "comment": "/** \n * Reads the BasicFileAttributes from the given path. Returns null instead of throwing {@link UnsupportedOperationException}. Throws  {@link Uncheck} instead of {@link IOException}.\n * @param \u003c A \u003e The {@link BasicFileAttributes} type\n * @param path The Path to test.\n * @param type the {@link Class} of the file attributes required to read.\n * @param options options indicating how to handle symbolic links.\n * @return the file attributes.\n * @see Files#readAttributes(Path,Class,LinkOption...)\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.readBasicFileAttributes#1276",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.readBasicFileAttributes(java.nio.file.Path)",
    "snippet": "@Deprecated\n    public static BasicFileAttributes readBasicFileAttributes(final Path path) throws IOException {\n        return Files.readAttributes(path, BasicFileAttributes.class);\n    }",
    "begin_line": 1276,
    "end_line": 1278,
    "comment": "/** \n * Reads the BasicFileAttributes from the given path.\n * @param path the path to read.\n * @return the path attributes.\n * @throws IOException if an I/O error occurs.\n * @since 2.9.0\n * @deprecated Will be removed in 3.0.0 in favor of {@link #readBasicFileAttributes(Path,LinkOption...)}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.readBasicFileAttributes#1289",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.readBasicFileAttributes(java.nio.file.Path, java.nio.file.LinkOption)",
    "snippet": "public static BasicFileAttributes readBasicFileAttributes(final Path path, final LinkOption... options) {\n        return readAttributes(path, BasicFileAttributes.class, options);\n    }",
    "begin_line": 1289,
    "end_line": 1291,
    "comment": "/** \n * Reads the BasicFileAttributes from the given path. Returns null instead of throwing {@link UnsupportedOperationException}.\n * @param path the path to read.\n * @param options options indicating how to handle symbolic links.\n * @return the path attributes.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.readBasicFileAttributesUnchecked#1304",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.readBasicFileAttributesUnchecked(java.nio.file.Path)",
    "snippet": "@Deprecated\n    public static BasicFileAttributes readBasicFileAttributesUnchecked(final Path path) {\n        return readBasicFileAttributes(path, EMPTY_LINK_OPTION_ARRAY);\n    }",
    "begin_line": 1304,
    "end_line": 1306,
    "comment": "/** \n * Reads the BasicFileAttributes from the given path. Returns null instead of throwing {@link UnsupportedOperationException}.\n * @param path the path to read.\n * @return the path attributes.\n * @throws UncheckedIOException if an I/O error occurs\n * @since 2.9.0\n * @deprecated Use {@link #readBasicFileAttributes(Path,LinkOption...)}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.readDosFileAttributes#1317",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.readDosFileAttributes(java.nio.file.Path, java.nio.file.LinkOption)",
    "snippet": "public static DosFileAttributes readDosFileAttributes(final Path path, final LinkOption... options) {\n        return readAttributes(path, DosFileAttributes.class, options);\n    }",
    "begin_line": 1317,
    "end_line": 1319,
    "comment": "/** \n * Reads the DosFileAttributes from the given path. Returns null instead of throwing {@link UnsupportedOperationException}.\n * @param path the path to read.\n * @param options options indicating how to handle symbolic links.\n * @return the path attributes.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.readIfSymbolicLink#1321",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.readIfSymbolicLink(java.nio.file.Path)",
    "snippet": "private static Path readIfSymbolicLink(final Path path) throws IOException {\n        return path !\u003d null ? Files.isSymbolicLink(path) ? Files.readSymbolicLink(path) : path : null;\n    }",
    "begin_line": 1321,
    "end_line": 1323,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.readOsFileAttributes#1334",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.readOsFileAttributes(java.nio.file.Path, java.nio.file.LinkOption)",
    "snippet": "public static BasicFileAttributes readOsFileAttributes(final Path path, final LinkOption... options) {\n        final PosixFileAttributes fileAttributes \u003d readPosixFileAttributes(path, options);\n        return fileAttributes !\u003d null ? fileAttributes : readDosFileAttributes(path, options);\n    }",
    "begin_line": 1334,
    "end_line": 1337,
    "comment": "/** \n * Reads the PosixFileAttributes or DosFileAttributes from the given path. Returns null instead of throwing {@link UnsupportedOperationException}.\n * @param path The Path to read.\n * @param options options indicating how to handle symbolic links.\n * @return the file attributes.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.readPosixFileAttributes#1348",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.readPosixFileAttributes(java.nio.file.Path, java.nio.file.LinkOption)",
    "snippet": "public static PosixFileAttributes readPosixFileAttributes(final Path path, final LinkOption... options) {\n        return readAttributes(path, PosixFileAttributes.class, options);\n    }",
    "begin_line": 1348,
    "end_line": 1350,
    "comment": "/** \n * Reads the PosixFileAttributes from the given path. Returns null instead of throwing {@link UnsupportedOperationException}.\n * @param path The Path to read.\n * @param options options indicating how to handle symbolic links.\n * @return the file attributes.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.readString#1362",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.readString(java.nio.file.Path, java.nio.charset.Charset)",
    "snippet": "public static String readString(final Path path, final Charset charset) throws IOException {\n        return new String(Files.readAllBytes(path), Charsets.toCharset(charset));\n    }",
    "begin_line": 1362,
    "end_line": 1364,
    "comment": "/** \n * Reads the given path as a String.\n * @param path The source path.\n * @param charset How to convert bytes to a String, null uses the default Charset.\n * @return a new String.\n * @throws IOException if an I/O error occurs reading from the stream.\n * @see Files#readAllBytes(Path)\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.relativize#1375",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.relativize(java.util.Collection\u003cjava.nio.file.Path\u003e, java.nio.file.Path, boolean, java.util.Comparator\u003c? super java.nio.file.Path\u003e)",
    "snippet": "static List\u003cPath\u003e relativize(final Collection\u003cPath\u003e collection, final Path parent, final boolean sort, final Comparator\u003c? super Path\u003e comparator) {\n        Stream\u003cPath\u003e stream \u003d collection.stream().map(parent::relativize);\n        if (sort) {\n            stream \u003d comparator \u003d\u003d null ? stream.sorted() : stream.sorted(comparator);\n        }\n        return stream.collect(Collectors.toList());\n    }",
    "begin_line": 1375,
    "end_line": 1381,
    "comment": "/** \n * Relativizes all files in the given  {@code collection} against a {@code parent}.\n * @param collection The collection of paths to relativize.\n * @param parent relativizes against this parent path.\n * @param sort Whether to sort the result.\n * @param comparator How to sort.\n * @return A collection of relativized paths, optionally sorted.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.requireExists#1393",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.requireExists(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption)",
    "snippet": "private static Path requireExists(final Path file, final String fileParamName, final LinkOption... options) {\n        Objects.requireNonNull(file, fileParamName);\n        if (!exists(file, options)) {\n            throw new IllegalArgumentException(\"File system element for parameter \u0027\" + fileParamName + \"\u0027 does not exist: \u0027\" + file + \"\u0027\");\n        }\n        return file;\n    }",
    "begin_line": 1393,
    "end_line": 1399,
    "comment": "/** \n * Requires that the given  {@link File} exists and throws an {@link IllegalArgumentException} if it doesn\u0027t.\n * @param file The {@link File} to check.\n * @param fileParamName The parameter name to use in the exception message in case of {@code null} input.\n * @param options options indicating how to handle symbolic links.\n * @return the given file.\n * @throws NullPointerException if the given {@link File} is {@code null}.\n * @throws IllegalArgumentException if the given {@link File} does not exist.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.setDosReadOnly#1401",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.setDosReadOnly(java.nio.file.Path, boolean, java.nio.file.LinkOption)",
    "snippet": "private static boolean setDosReadOnly(final Path path, final boolean readOnly, final LinkOption... linkOptions) throws IOException {\n        final DosFileAttributeView dosFileAttributeView \u003d getDosFileAttributeView(path, linkOptions);\n        if (dosFileAttributeView !\u003d null) {\n            dosFileAttributeView.setReadOnly(readOnly);\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 1401,
    "end_line": 1408,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.setLastModifiedTime#1420",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.setLastModifiedTime(java.nio.file.Path, java.nio.file.Path)",
    "snippet": "public static void setLastModifiedTime(final Path sourceFile, final Path targetFile) throws IOException {\n        Objects.requireNonNull(sourceFile, \"sourceFile\");\n        Files.setLastModifiedTime(targetFile, getLastModifiedTime(sourceFile));\n    }",
    "begin_line": 1420,
    "end_line": 1423,
    "comment": "/** \n * Sets the given  {@code targetFile}\u0027s last modified time to the value from  {@code sourceFile}.\n * @param sourceFile The source path to query.\n * @param targetFile The target path to set.\n * @throws NullPointerException if sourceFile is {@code null}.\n * @throws NullPointerException if targetFile is {@code null}.\n * @throws IOException if setting the last-modified time failed.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.setPosixDeletePermissions#1434",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.setPosixDeletePermissions(java.nio.file.Path, boolean, java.nio.file.LinkOption)",
    "snippet": "private static boolean setPosixDeletePermissions(final Path parent, final boolean enableDeleteChildren, final LinkOption... linkOptions)\n        throws IOException {\n        // To delete a file in POSIX, you need write and execute permissions on its parent directory.\n        // @formatter:off\n        return setPosixPermissions(parent, enableDeleteChildren, Arrays.asList(\n            PosixFilePermission.OWNER_WRITE,\n            //PosixFilePermission.GROUP_WRITE,\n            //PosixFilePermission.OTHERS_WRITE,\n            PosixFilePermission.OWNER_EXECUTE\n            //PosixFilePermission.GROUP_EXECUTE,\n            //PosixFilePermission.OTHERS_EXECUTE\n            ), linkOptions);\n        // @formatter:on\n    }",
    "begin_line": 1434,
    "end_line": 1447,
    "comment": "/** \n * To delete a file in POSIX, you need Write and Execute permissions on its parent directory.\n * @param parent The parent path for a file element to delete which needs RW permissions.\n * @param enableDeleteChildren true to set permissions to delete.\n * @param linkOptions options indicating how handle symbolic links.\n * @return true if the operation was attempted and succeeded, false if parent is null.\n * @throws IOException if an I/O error occurs.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.setPosixPermissions#1459",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.setPosixPermissions(java.nio.file.Path, boolean, java.util.List\u003cjava.nio.file.attribute.PosixFilePermission\u003e, java.nio.file.LinkOption)",
    "snippet": "private static boolean setPosixPermissions(final Path path, final boolean addPermissions, final List\u003cPosixFilePermission\u003e updatePermissions,\n        final LinkOption... linkOptions) throws IOException {\n        if (path !\u003d null) {\n            final Set\u003cPosixFilePermission\u003e permissions \u003d Files.getPosixFilePermissions(path, linkOptions);\n            if (addPermissions) {\n                permissions.addAll(updatePermissions);\n            } else {\n                permissions.removeAll(updatePermissions);\n            }\n            Files.setPosixFilePermissions(path, permissions);\n            return true;\n        }\n        return false;\n    }",
    "begin_line": 1459,
    "end_line": 1472,
    "comment": "/** \n * Low-level POSIX permission operation to set permissions.\n * @param path Set this path\u0027s permissions.\n * @param addPermissions true to add, false to remove.\n * @param updatePermissions the List of PosixFilePermission to add or remove.\n * @param linkOptions options indicating how handle symbolic links.\n * @return true if the operation was attempted and succeeded, false if parent is null.\n * @throws IOException if an I/O error occurs.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.setPosixReadOnlyFile#1474",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.setPosixReadOnlyFile(java.nio.file.Path, boolean, java.nio.file.LinkOption)",
    "snippet": "private static void setPosixReadOnlyFile(final Path path, final boolean readOnly, final LinkOption... linkOptions) throws IOException {\n        // Not Windows 10\n        final Set\u003cPosixFilePermission\u003e permissions \u003d Files.getPosixFilePermissions(path, linkOptions);\n        // @formatter:off\n        final List\u003cPosixFilePermission\u003e readPermissions \u003d Arrays.asList(\n                PosixFilePermission.OWNER_READ\n                //PosixFilePermission.GROUP_READ,\n                //PosixFilePermission.OTHERS_READ\n            );\n        final List\u003cPosixFilePermission\u003e writePermissions \u003d Arrays.asList(\n                PosixFilePermission.OWNER_WRITE\n                //PosixFilePermission.GROUP_WRITE,\n                //PosixFilePermission.OTHERS_WRITE\n            );\n        // @formatter:on\n        if (readOnly) {\n            // RO: We can read, we cannot write.\n            permissions.addAll(readPermissions);\n            permissions.removeAll(writePermissions);\n        } else {\n            // Not RO: We can read, we can write.\n            permissions.addAll(readPermissions);\n            permissions.addAll(writePermissions);\n        }\n        Files.setPosixFilePermissions(path, permissions);\n    }",
    "begin_line": 1474,
    "end_line": 1499,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.setReadOnly#1514",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.setReadOnly(java.nio.file.Path, boolean, java.nio.file.LinkOption)",
    "snippet": "public static Path setReadOnly(final Path path, final boolean readOnly, final LinkOption... linkOptions) throws IOException {\n        try {\n            // Windows is simplest\n            if (setDosReadOnly(path, readOnly, linkOptions)) {\n                return path;\n            }\n        } catch (final IOException ignored) {\n            // Retry with POSIX below.\n        }\n        final Path parent \u003d getParent(path);\n        if (!isPosix(parent, linkOptions)) { // Test parent because we may not the permissions to test the file.\n            throw new IOException(String.format(\"DOS or POSIX file operations not available for \u0027%s\u0027 %s\", path, Arrays.toString(linkOptions)));\n        }\n        // POSIX\n        if (readOnly) {\n            // RO\n            // File, then parent dir (if any).\n            setPosixReadOnlyFile(path, readOnly, linkOptions);\n            setPosixDeletePermissions(parent, false, linkOptions);\n        } else {\n            // RE\n            // Parent dir (if any), then file.\n            setPosixDeletePermissions(parent, true, linkOptions);\n        }\n        return path;\n    }",
    "begin_line": 1514,
    "end_line": 1539,
    "comment": "/** \n * Sets the given Path to the  {@code readOnly} value.\u003cp\u003e This behavior is OS dependent. \u003c/p\u003e\n * @param path The path to set.\n * @param readOnly true for read-only, false for not read-only.\n * @param linkOptions options indicating how to handle symbolic links.\n * @return The given path.\n * @throws IOException if an I/O error occurs.\n * @since 2.8.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.sizeOf#1556",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.sizeOf(java.nio.file.Path)",
    "snippet": "public static long sizeOf(final Path path) throws IOException {\n        requireExists(path, \"path\");\n        return Files.isDirectory(path) ? sizeOfDirectory(path) : Files.size(path);\n    }",
    "begin_line": 1556,
    "end_line": 1559,
    "comment": "/** \n * Returns the size of the given file or directory. If the provided  {@link Path} is a regular file, then the file\u0027s sizeis returned. If the argument is a directory, then the size of the directory is calculated recursively. \u003cp\u003e Note that overflow is not detected, and the return value may be negative if overflow occurs. See {@link #sizeOfAsBigInteger(Path)} for an alternative method that does not overflow.\u003c/p\u003e\n * @param path the regular file or directory to return the size of, must not be {@code null}.\n * @return the length of the file, or recursive size of the directory, in bytes.\n * @throws NullPointerException if the file is {@code null}.\n * @throws IllegalArgumentException if the file does not exist.\n * @throws IOException if an I/O error occurs.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.sizeOfAsBigInteger#1572",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.sizeOfAsBigInteger(java.nio.file.Path)",
    "snippet": "public static BigInteger sizeOfAsBigInteger(final Path path) throws IOException {\n        requireExists(path, \"path\");\n        return Files.isDirectory(path) ? sizeOfDirectoryAsBigInteger(path) : BigInteger.valueOf(Files.size(path));\n    }",
    "begin_line": 1572,
    "end_line": 1575,
    "comment": "/** \n * Returns the size of the given file or directory. If the provided  {@link Path} is a regular file, then the file\u0027s sizeis returned. If the argument is a directory, then the size of the directory is calculated recursively.\n * @param path the regular file or directory to return the size of (must not be {@code null}).\n * @return the length of the file, or recursive size of the directory, provided (in bytes).\n * @throws NullPointerException if the file is {@code null}.\n * @throws IllegalArgumentException if the file does not exist.\n * @throws IOException if an I/O error occurs.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.sizeOfDirectory#1591",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.sizeOfDirectory(java.nio.file.Path)",
    "snippet": "public static long sizeOfDirectory(final Path directory) throws IOException {\n        return countDirectory(directory).getByteCounter().getLong();\n    }",
    "begin_line": 1591,
    "end_line": 1593,
    "comment": "/** \n * Counts the size of a directory recursively (sum of the size of all files). \u003cp\u003e Note that overflow is not detected, and the return value may be negative if overflow occurs. See {@link #sizeOfDirectoryAsBigInteger(Path)} for an alternative method that does not overflow.\u003c/p\u003e\n * @param directory directory to inspect, must not be {@code null}.\n * @return size of directory in bytes, 0 if directory is security restricted, a negative number when the real total isgreater than  {@link Long#MAX_VALUE}.\n * @throws NullPointerException if the directory is {@code null}.\n * @throws IOException if an I/O error occurs.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.sizeOfDirectoryAsBigInteger#1604",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.sizeOfDirectoryAsBigInteger(java.nio.file.Path)",
    "snippet": "public static BigInteger sizeOfDirectoryAsBigInteger(final Path directory) throws IOException {\n        return countDirectoryAsBigInteger(directory).getByteCounter().getBigInteger();\n    }",
    "begin_line": 1604,
    "end_line": 1606,
    "comment": "/** \n * Counts the size of a directory recursively (sum of the size of all files).\n * @param directory directory to inspect, must not be {@code null}.\n * @return size of directory in bytes, 0 if directory is security restricted.\n * @throws NullPointerException if the directory is {@code null}.\n * @throws IOException if an I/O error occurs.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.toFileVisitOptionSet#1614",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.toFileVisitOptionSet(java.nio.file.FileVisitOption)",
    "snippet": "static Set\u003cFileVisitOption\u003e toFileVisitOptionSet(final FileVisitOption... fileVisitOptions) {\n        return fileVisitOptions \u003d\u003d null ? EnumSet.noneOf(FileVisitOption.class) : Stream.of(fileVisitOptions).collect(Collectors.toSet());\n    }",
    "begin_line": 1614,
    "end_line": 1616,
    "comment": "/** \n * Converts an array of  {@link FileVisitOption} to a {@link Set}.\n * @param fileVisitOptions input array.\n * @return a new Set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.touch#1628",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.touch(java.nio.file.Path)",
    "snippet": "public static Path touch(final Path file) throws IOException {\n        Objects.requireNonNull(file, \"file\");\n        if (!Files.exists(file)) {\n            createParentDirectories(file);\n            Files.createFile(file);\n        } else {\n            FileTimes.setLastModifiedTime(file);\n        }\n        return file;\n    }",
    "begin_line": 1628,
    "end_line": 1637,
    "comment": "/** \n * Implements behavior similar to the Unix \"touch\" utility. Creates a new file with size 0, or, if the file exists, just updates the file\u0027s modified time. this method creates parent directories if they do not exist.\n * @param file the file to touch.\n * @return The given file.\n * @throws NullPointerException if the parameter is {@code null}.\n * @throws IOException if setting the last-modified time failed or an I/O problem occurs.\\\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.visitFileTree#1652",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.visitFileTree(T, java.nio.file.Path)",
    "snippet": "public static \u003cT extends FileVisitor\u003c? super Path\u003e\u003e T visitFileTree(final T visitor, final Path directory) throws IOException {\n        requireExists(directory, \"directory\");\n        Files.walkFileTree(directory, visitor);\n        return visitor;\n    }",
    "begin_line": 1652,
    "end_line": 1656,
    "comment": "/** \n * Performs  {@link Files#walkFileTree(Path,FileVisitor)} and returns the given visitor.Note that  {@link Files#walkFileTree(Path,FileVisitor)} returns the given path.\n * @param visitor See {@link Files#walkFileTree(Path,FileVisitor)}.\n * @param directory See {@link Files#walkFileTree(Path,FileVisitor)}.\n * @param \u003c T \u003e See {@link Files#walkFileTree(Path,FileVisitor)}.\n * @return the given visitor.\n * @throws IOException if an I/O error is thrown by a visitor method.\n * @throws NullPointerException if the directory is {@code null}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.visitFileTree#1672",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.visitFileTree(T, java.nio.file.Path, java.util.Set\u003cjava.nio.file.FileVisitOption\u003e, int)",
    "snippet": "public static \u003cT extends FileVisitor\u003c? super Path\u003e\u003e T visitFileTree(final T visitor, final Path start, final Set\u003cFileVisitOption\u003e options,\n        final int maxDepth) throws IOException {\n        Files.walkFileTree(start, options, maxDepth, visitor);\n        return visitor;\n    }",
    "begin_line": 1672,
    "end_line": 1676,
    "comment": "/** \n * Performs  {@link Files#walkFileTree(Path,FileVisitor)} and returns the given visitor.Note that  {@link Files#walkFileTree(Path,FileVisitor)} returns the given path.\n * @param start See {@link Files#walkFileTree(Path,Set,int,FileVisitor)}.\n * @param options See {@link Files#walkFileTree(Path,Set,int,FileVisitor)}.\n * @param maxDepth See {@link Files#walkFileTree(Path,Set,int,FileVisitor)}.\n * @param visitor See {@link Files#walkFileTree(Path,Set,int,FileVisitor)}.\n * @param \u003c T \u003e See {@link Files#walkFileTree(Path,Set,int,FileVisitor)}.\n * @return the given visitor.\n * @throws IOException if an I/O error is thrown by a visitor method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.visitFileTree#1691",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.visitFileTree(T, java.lang.String, java.lang.String)",
    "snippet": "public static \u003cT extends FileVisitor\u003c? super Path\u003e\u003e T visitFileTree(final T visitor, final String first, final String... more) throws IOException {\n        return visitFileTree(visitor, Paths.get(first, more));\n    }",
    "begin_line": 1691,
    "end_line": 1693,
    "comment": "/** \n * Performs  {@link Files#walkFileTree(Path,FileVisitor)} and returns the given visitor.Note that  {@link Files#walkFileTree(Path,FileVisitor)} returns the given path.\n * @param visitor See {@link Files#walkFileTree(Path,FileVisitor)}.\n * @param first See {@link Paths#get(String,String[])}.\n * @param more See {@link Paths#get(String,String[])}.\n * @param \u003c T \u003e See {@link Files#walkFileTree(Path,FileVisitor)}.\n * @return the given visitor.\n * @throws IOException if an I/O error is thrown by a visitor method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.visitFileTree#1707",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.visitFileTree(T, java.net.URI)",
    "snippet": "public static \u003cT extends FileVisitor\u003c? super Path\u003e\u003e T visitFileTree(final T visitor, final URI uri) throws IOException {\n        return visitFileTree(visitor, Paths.get(uri));\n    }",
    "begin_line": 1707,
    "end_line": 1709,
    "comment": "/** \n * Performs  {@link Files#walkFileTree(Path,FileVisitor)} and returns the given visitor.Note that  {@link Files#walkFileTree(Path,FileVisitor)} returns the given path.\n * @param visitor See {@link Files#walkFileTree(Path,FileVisitor)}.\n * @param uri See {@link Paths#get(URI)}.\n * @param \u003c T \u003e See {@link Files#walkFileTree(Path,FileVisitor)}.\n * @return the given visitor.\n * @throws IOException if an I/O error is thrown by a visitor method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.waitFor#1725",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.waitFor(java.nio.file.Path, java.time.Duration, java.nio.file.LinkOption)",
    "snippet": "public static boolean waitFor(final Path file, final Duration timeout, final LinkOption... options) {\n        Objects.requireNonNull(file, \"file\");\n        final Instant finishInstant \u003d Instant.now().plus(timeout);\n        boolean interrupted \u003d false;\n        final long minSleepMillis \u003d 100;\n        try {\n            while (!exists(file, options)) {\n                final Instant now \u003d Instant.now();\n                if (now.isAfter(finishInstant)) {\n                    return false;\n                }\n                try {\n                    ThreadUtils.sleep(Duration.ofMillis(Math.min(minSleepMillis, finishInstant.minusMillis(now.toEpochMilli()).toEpochMilli())));\n                } catch (final InterruptedException ignore) {\n                    interrupted \u003d true;\n                } catch (final Exception ex) {\n                    break;\n                }\n            }\n        } finally {\n            if (interrupted) {\n                Thread.currentThread().interrupt();\n            }\n        }\n        return exists(file, options);\n    }",
    "begin_line": 1725,
    "end_line": 1750,
    "comment": "/** \n * Waits for the file system to propagate a file creation, with a timeout. \u003cp\u003e This method repeatedly tests  {@link Files#exists(Path,LinkOption...)} until it returns true up to the maximum timegiven. \u003c/p\u003e\n * @param file the file to check, must not be {@code null}.\n * @param timeout the maximum time to wait.\n * @param options options indicating how to handle symbolic links.\n * @return true if file exists.\n * @throws NullPointerException if the file is {@code null}.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.walk#1764",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.walk(java.nio.file.Path, org.apache.commons.io.file.PathFilter, int, boolean, java.nio.file.FileVisitOption)",
    "snippet": "public static Stream\u003cPath\u003e walk(final Path start, final PathFilter pathFilter, final int maxDepth, final boolean readAttributes,\n        final FileVisitOption... options) throws IOException {\n        return Files.walk(start, maxDepth, options)\n            .filter(path -\u003e pathFilter.accept(path, readAttributes ? readBasicFileAttributesUnchecked(path) : null) \u003d\u003d FileVisitResult.CONTINUE);\n    }",
    "begin_line": 1764,
    "end_line": 1768,
    "comment": "/** \n * Returns a stream of filtered paths.\n * @param start the start path\n * @param pathFilter the path filter\n * @param maxDepth the maximum depth of directories to walk.\n * @param readAttributes whether to call the filters with file attributes (false passes null).\n * @param options the options to configure the walk.\n * @return a filtered stream of paths.\n * @throws IOException if an I/O error is thrown when accessing the starting file.\n * @since 2.9.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.withPosixFileAttributes#1770",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.withPosixFileAttributes(java.nio.file.Path, java.nio.file.LinkOption[], boolean, org.apache.commons.io.function.IOFunction\u003cjava.nio.file.attribute.PosixFileAttributes,R\u003e)",
    "snippet": "private static \u003cR\u003e R withPosixFileAttributes(final Path path, final LinkOption[] linkOptions, final boolean overrideReadOnly,\n        final IOFunction\u003cPosixFileAttributes, R\u003e function) throws IOException {\n        final PosixFileAttributes posixFileAttributes \u003d overrideReadOnly ? readPosixFileAttributes(path, linkOptions) : null;\n        try {\n            return function.apply(posixFileAttributes);\n        } finally {\n            if (posixFileAttributes !\u003d null \u0026\u0026 path !\u003d null \u0026\u0026 Files.exists(path, linkOptions)) {\n                Files.setPosixFilePermissions(path, posixFileAttributes.permissions());\n            }\n        }\n    }",
    "begin_line": 1770,
    "end_line": 1780,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.writeString#1794",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.writeString(java.nio.file.Path, java.lang.CharSequence, java.nio.charset.Charset, java.nio.file.OpenOption)",
    "snippet": "public static Path writeString(final Path path, final CharSequence charSequence, final Charset charset, final OpenOption... openOptions)\n        throws IOException {\n        // Check the text is not null before opening file.\n        Objects.requireNonNull(path, \"path\");\n        Objects.requireNonNull(charSequence, \"charSequence\");\n        Files.write(path, String.valueOf(charSequence).getBytes(Charsets.toCharset(charset)), openOptions);\n        return path;\n    }",
    "begin_line": 1794,
    "end_line": 1801,
    "comment": "/** \n * Writes the given character sequence to a file at the given path.\n * @param path The target file.\n * @param charSequence The character sequence text.\n * @param charset The Charset to encode the text.\n * @param openOptions options How to open the file.\n * @return The given path.\n * @throws IOException if an I/O error occurs writing to or creating the file.\n * @throws NullPointerException if either {@code path} or {@code charSequence} is {@code null}.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RelativeSortedPaths.PathUtils#1806",
    "is_bug": true,
    "src_path": "org/apache/commons/io/file/PathUtils.java",
    "class_name": "org.apache.commons.io.file.PathUtils",
    "signature": "org.apache.commons.io.file.PathUtils.PathUtils()",
    "snippet": "private PathUtils() {\n        // do not instantiate.\n    }",
    "begin_line": 1806,
    "end_line": 1808,
    "comment": "/** \n * Does allow to instantiate.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.get#122",
    "is_bug": true,
    "src_path": "org/apache/commons/io/input/ReaderInputStream.java",
    "class_name": "org.apache.commons.io.input.ReaderInputStream",
    "signature": "org.apache.commons.io.input.ReaderInputStream.get()",
    "snippet": "@SuppressWarnings(\"resource\")\n        @Override\n        public ReaderInputStream get() throws IOException {\n            return new ReaderInputStream(checkOrigin().getReader(getCharset()), charsetEncoder, getBufferSize());\n        }",
    "begin_line": 122,
    "end_line": 124,
    "comment": "/** \n * Constructs a new instance. \u003cp\u003e This builder use the aspects Reader, Charset, CharsetEncoder, buffer size. \u003c/p\u003e \u003cp\u003e You must provide an origin that can be converted to a Reader by this builder, otherwise, this call will throw an {@link UnsupportedOperationException}. \u003c/p\u003e\n * @return a new instance.\n * @throws UnsupportedOperationException if the origin cannot provide a Reader.\n * @throws IllegalStateException if the {@code origin} is {@code null}.\n * @see AbstractOrigin#getReader(Charset)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.getCharsetEncoder#126",
    "is_bug": true,
    "src_path": "org/apache/commons/io/input/ReaderInputStream.java",
    "class_name": "org.apache.commons.io.input.ReaderInputStream",
    "signature": "org.apache.commons.io.input.ReaderInputStream.getCharsetEncoder()",
    "snippet": "CharsetEncoder getCharsetEncoder() {\n            return charsetEncoder;\n        }",
    "begin_line": 126,
    "end_line": 128,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.setCharset#131",
    "is_bug": true,
    "src_path": "org/apache/commons/io/input/ReaderInputStream.java",
    "class_name": "org.apache.commons.io.input.ReaderInputStream",
    "signature": "org.apache.commons.io.input.ReaderInputStream.setCharset(java.nio.charset.Charset)",
    "snippet": "@Override\n        public Builder setCharset(final Charset charset) {\n            charsetEncoder \u003d charset.newEncoder();\n            return super.setCharset(charset);\n        }",
    "begin_line": 131,
    "end_line": 134,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.setCharsetEncoder#142",
    "is_bug": true,
    "src_path": "org/apache/commons/io/input/ReaderInputStream.java",
    "class_name": "org.apache.commons.io.input.ReaderInputStream",
    "signature": "org.apache.commons.io.input.ReaderInputStream.setCharsetEncoder(java.nio.charset.CharsetEncoder)",
    "snippet": "public Builder setCharsetEncoder(final CharsetEncoder charsetEncoder) {\n            this.charsetEncoder \u003d CharsetEncoders.toCharsetEncoder(charsetEncoder);\n            super.setCharset(this.charsetEncoder.charset());\n            return this;\n        }",
    "begin_line": 142,
    "end_line": 146,
    "comment": "/** \n * Sets the charset encoder.\n * @param charsetEncoder the charset encoder, null resets to a default encoder.\n * @return this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.builder#156",
    "is_bug": true,
    "src_path": "org/apache/commons/io/input/ReaderInputStream.java",
    "class_name": "org.apache.commons.io.input.ReaderInputStream",
    "signature": "org.apache.commons.io.input.ReaderInputStream.builder()",
    "snippet": "public static Builder builder() {\n        return new Builder();\n    }",
    "begin_line": 156,
    "end_line": 158,
    "comment": "/** \n * Constructs a new  {@link Builder}.\n * @return a new {@link Builder}.\n * @since 2.12.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.checkMinBufferSize#160",
    "is_bug": true,
    "src_path": "org/apache/commons/io/input/ReaderInputStream.java",
    "class_name": "org.apache.commons.io.input.ReaderInputStream",
    "signature": "org.apache.commons.io.input.ReaderInputStream.checkMinBufferSize(java.nio.charset.CharsetEncoder, int)",
    "snippet": "static int checkMinBufferSize(final CharsetEncoder charsetEncoder, final int bufferSize) {\n        final float minRequired \u003d minBufferSize(charsetEncoder);\n        if (bufferSize \u003c minRequired) {\n            throw new IllegalArgumentException(String.format(\"Buffer size %,d must be at least %s for a CharsetEncoder %s.\", bufferSize, minRequired,\n                    charsetEncoder.charset().displayName()));\n        }\n        return bufferSize;\n    }",
    "begin_line": 160,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.minBufferSize#169",
    "is_bug": true,
    "src_path": "org/apache/commons/io/input/ReaderInputStream.java",
    "class_name": "org.apache.commons.io.input.ReaderInputStream",
    "signature": "org.apache.commons.io.input.ReaderInputStream.minBufferSize(java.nio.charset.CharsetEncoder)",
    "snippet": "static float minBufferSize(final CharsetEncoder charsetEncoder) {\n        return charsetEncoder.maxBytesPerChar() * 2;\n    }",
    "begin_line": 169,
    "end_line": 171,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.ReaderInputStream#199",
    "is_bug": true,
    "src_path": "org/apache/commons/io/input/ReaderInputStream.java",
    "class_name": "org.apache.commons.io.input.ReaderInputStream",
    "signature": "org.apache.commons.io.input.ReaderInputStream.ReaderInputStream(java.io.Reader)",
    "snippet": "@Deprecated\n    public ReaderInputStream(final Reader reader) {\n        this(reader, Charset.defaultCharset());\n    }",
    "begin_line": 199,
    "end_line": 201,
    "comment": "/** \n * Constructs a new  {@link ReaderInputStream} that uses the default character encoding with a default input buffer size of{@value IOUtils#DEFAULT_BUFFER_SIZE} characters.\n * @param reader the target {@link Reader}\n * @deprecated Use {@link ReaderInputStream#builder()} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.ReaderInputStream#215",
    "is_bug": true,
    "src_path": "org/apache/commons/io/input/ReaderInputStream.java",
    "class_name": "org.apache.commons.io.input.ReaderInputStream",
    "signature": "org.apache.commons.io.input.ReaderInputStream.ReaderInputStream(java.io.Reader, java.nio.charset.Charset)",
    "snippet": "@Deprecated\n    public ReaderInputStream(final Reader reader, final Charset charset) {\n        this(reader, charset, IOUtils.DEFAULT_BUFFER_SIZE);\n    }",
    "begin_line": 215,
    "end_line": 217,
    "comment": "/** \n * Constructs a new  {@link ReaderInputStream} with a default input buffer size of {@value IOUtils#DEFAULT_BUFFER_SIZE} characters.\u003cp\u003e The encoder created for the specified charset will use  {@link CodingErrorAction#REPLACE} for malformed input and unmappable characters.\u003c/p\u003e\n * @param reader  the target {@link Reader}\n * @param charset the charset encoding\n * @deprecated Use {@link ReaderInputStream#builder()} instead, will be protected for subclasses.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.ReaderInputStream#232",
    "is_bug": true,
    "src_path": "org/apache/commons/io/input/ReaderInputStream.java",
    "class_name": "org.apache.commons.io.input.ReaderInputStream",
    "signature": "org.apache.commons.io.input.ReaderInputStream.ReaderInputStream(java.io.Reader, java.nio.charset.Charset, int)",
    "snippet": "@Deprecated\n    public ReaderInputStream(final Reader reader, final Charset charset, final int bufferSize) {\n        // @formatter:off\n        this(reader,\n            Charsets.toCharset(charset).newEncoder()\n                    .onMalformedInput(CodingErrorAction.REPLACE)\n                    .onUnmappableCharacter(CodingErrorAction.REPLACE),\n             bufferSize);\n        // @formatter:on\n    }",
    "begin_line": 232,
    "end_line": 240,
    "comment": "/** \n * Constructs a new  {@link ReaderInputStream}. \u003cp\u003e The encoder created for the specified charset will use  {@link CodingErrorAction#REPLACE} for malformed input and unmappable characters.\u003c/p\u003e\n * @param reader     the target {@link Reader}.\n * @param charset    the charset encoding.\n * @param bufferSize the size of the input buffer in number of characters.\n * @deprecated Use {@link ReaderInputStream#builder()} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.ReaderInputStream#256",
    "is_bug": true,
    "src_path": "org/apache/commons/io/input/ReaderInputStream.java",
    "class_name": "org.apache.commons.io.input.ReaderInputStream",
    "signature": "org.apache.commons.io.input.ReaderInputStream.ReaderInputStream(java.io.Reader, java.nio.charset.CharsetEncoder)",
    "snippet": "@Deprecated\n    public ReaderInputStream(final Reader reader, final CharsetEncoder charsetEncoder) {\n        this(reader, charsetEncoder, IOUtils.DEFAULT_BUFFER_SIZE);\n    }",
    "begin_line": 256,
    "end_line": 258,
    "comment": "/** \n * Constructs a new  {@link ReaderInputStream}. \u003cp\u003e This constructor does not call  {@link CharsetEncoder#reset() reset} on the provided encoder. The caller of this constructor should do this when providingan encoder which had already been in use. \u003c/p\u003e\n * @param reader         the target {@link Reader}\n * @param charsetEncoder the charset encoder\n * @since 2.1\n * @deprecated Use {@link ReaderInputStream#builder()} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.ReaderInputStream#275",
    "is_bug": true,
    "src_path": "org/apache/commons/io/input/ReaderInputStream.java",
    "class_name": "org.apache.commons.io.input.ReaderInputStream",
    "signature": "org.apache.commons.io.input.ReaderInputStream.ReaderInputStream(java.io.Reader, java.nio.charset.CharsetEncoder, int)",
    "snippet": "@Deprecated\n    public ReaderInputStream(final Reader reader, final CharsetEncoder charsetEncoder, final int bufferSize) {\n        this.reader \u003d reader;\n        this.charsetEncoder \u003d CharsetEncoders.toCharsetEncoder(charsetEncoder);\n        this.encoderIn \u003d CharBuffer.allocate(checkMinBufferSize(this.charsetEncoder, bufferSize));\n        this.encoderIn.flip();\n        this.encoderOut \u003d ByteBuffer.allocate(128);\n        this.encoderOut.flip();\n    }",
    "begin_line": 275,
    "end_line": 282,
    "comment": "/** \n * Constructs a new  {@link ReaderInputStream}. \u003cp\u003e This constructor does not call  {@link CharsetEncoder#reset() reset} on the provided encoder. The caller of this constructor should do this when providingan encoder which had already been in use. \u003c/p\u003e\n * @param reader         the target {@link Reader}\n * @param charsetEncoder the charset encoder, null defaults to the default Charset encoder.\n * @param bufferSize     the size of the input buffer in number of characters\n * @since 2.1\n * @deprecated Use {@link ReaderInputStream#builder()} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.ReaderInputStream#296",
    "is_bug": true,
    "src_path": "org/apache/commons/io/input/ReaderInputStream.java",
    "class_name": "org.apache.commons.io.input.ReaderInputStream",
    "signature": "org.apache.commons.io.input.ReaderInputStream.ReaderInputStream(java.io.Reader, java.lang.String)",
    "snippet": "@Deprecated\n    public ReaderInputStream(final Reader reader, final String charsetName) {\n        this(reader, charsetName, IOUtils.DEFAULT_BUFFER_SIZE);\n    }",
    "begin_line": 296,
    "end_line": 298,
    "comment": "/** \n * Constructs a new  {@link ReaderInputStream} with a default input buffer size of {@value IOUtils#DEFAULT_BUFFER_SIZE} characters.\u003cp\u003e The encoder created for the specified charset will use  {@link CodingErrorAction#REPLACE} for malformed input and unmappable characters.\u003c/p\u003e\n * @param reader      the target {@link Reader}\n * @param charsetName the name of the charset encoding\n * @deprecated Use {@link ReaderInputStream#builder()} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.ReaderInputStream#313",
    "is_bug": true,
    "src_path": "org/apache/commons/io/input/ReaderInputStream.java",
    "class_name": "org.apache.commons.io.input.ReaderInputStream",
    "signature": "org.apache.commons.io.input.ReaderInputStream.ReaderInputStream(java.io.Reader, java.lang.String, int)",
    "snippet": "@Deprecated\n    public ReaderInputStream(final Reader reader, final String charsetName, final int bufferSize) {\n        this(reader, Charsets.toCharset(charsetName), bufferSize);\n    }",
    "begin_line": 313,
    "end_line": 315,
    "comment": "/** \n * Constructs a new  {@link ReaderInputStream}. \u003cp\u003e The encoder created for the specified charset will use  {@link CodingErrorAction#REPLACE} for malformed input and unmappable characters.\u003c/p\u003e\n * @param reader      the target {@link Reader}\n * @param charsetName the name of the charset encoding, null maps to the default Charset.\n * @param bufferSize  the size of the input buffer in number of characters\n * @deprecated Use {@link ReaderInputStream#builder()} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.close#323",
    "is_bug": true,
    "src_path": "org/apache/commons/io/input/ReaderInputStream.java",
    "class_name": "org.apache.commons.io.input.ReaderInputStream",
    "signature": "org.apache.commons.io.input.ReaderInputStream.close()",
    "snippet": "@Override\n    public void close() throws IOException {\n        reader.close();\n    }",
    "begin_line": 323,
    "end_line": 325,
    "comment": "/** \n * Closes the stream. This method will cause the underlying  {@link Reader} to be closed.\n * @throws IOException if an I/O error occurs.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.fillBuffer#332",
    "is_bug": true,
    "src_path": "org/apache/commons/io/input/ReaderInputStream.java",
    "class_name": "org.apache.commons.io.input.ReaderInputStream",
    "signature": "org.apache.commons.io.input.ReaderInputStream.fillBuffer()",
    "snippet": "private void fillBuffer() throws IOException {\n        if (!endOfInput \u0026\u0026 (lastCoderResult \u003d\u003d null || lastCoderResult.isUnderflow())) {\n            encoderIn.compact();\n            final int position \u003d encoderIn.position();\n            // We don\u0027t use Reader#read(CharBuffer) here because it is more efficient\n            // to write directly to the underlying char array (the default implementation\n            // copies data to a temporary char array).\n            final int c \u003d reader.read(encoderIn.array(), position, encoderIn.remaining());\n            if (c \u003d\u003d EOF) {\n                endOfInput \u003d true;\n            } else {\n                encoderIn.position(position + c);\n            }\n            encoderIn.flip();\n        }\n        encoderOut.compact();\n        lastCoderResult \u003d charsetEncoder.encode(encoderIn, encoderOut, endOfInput);\n        if (endOfInput) {\n            lastCoderResult \u003d charsetEncoder.flush(encoderOut);\n        }\n        if (lastCoderResult.isError()) {\n            lastCoderResult.throwException();\n        }\n        encoderOut.flip();\n    }",
    "begin_line": 332,
    "end_line": 356,
    "comment": "/** \n * Fills the internal char buffer from the reader.\n * @throws IOException If an I/O error occurs\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.getCharsetEncoder#363",
    "is_bug": true,
    "src_path": "org/apache/commons/io/input/ReaderInputStream.java",
    "class_name": "org.apache.commons.io.input.ReaderInputStream",
    "signature": "org.apache.commons.io.input.ReaderInputStream.getCharsetEncoder()",
    "snippet": "CharsetEncoder getCharsetEncoder() {\n        return charsetEncoder;\n    }",
    "begin_line": 363,
    "end_line": 365,
    "comment": "/** \n * Gets the CharsetEncoder.\n * @return the CharsetEncoder.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.read#374",
    "is_bug": true,
    "src_path": "org/apache/commons/io/input/ReaderInputStream.java",
    "class_name": "org.apache.commons.io.input.ReaderInputStream",
    "signature": "org.apache.commons.io.input.ReaderInputStream.read()",
    "snippet": "@Override\n    public int read() throws IOException {\n        for (;;) {\n            if (encoderOut.hasRemaining()) {\n                return encoderOut.get() \u0026 0xFF;\n            }\n            fillBuffer();\n            if (endOfInput \u0026\u0026 !encoderOut.hasRemaining()) {\n                return EOF;\n            }\n        }\n    }",
    "begin_line": 374,
    "end_line": 384,
    "comment": "/** \n * Reads a single byte.\n * @return either the byte read or {@code -1} if the end of the stream has been reached\n * @throws IOException if an I/O error occurs.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.read#394",
    "is_bug": true,
    "src_path": "org/apache/commons/io/input/ReaderInputStream.java",
    "class_name": "org.apache.commons.io.input.ReaderInputStream",
    "signature": "org.apache.commons.io.input.ReaderInputStream.read(byte[])",
    "snippet": "@Override\n    public int read(final byte[] b) throws IOException {\n        return read(b, 0, b.length);\n    }",
    "begin_line": 394,
    "end_line": 396,
    "comment": "/** \n * Reads the specified number of bytes into an array.\n * @param b the byte array to read into\n * @return the number of bytes read or {@code -1} if the end of the stream has been reached\n * @throws IOException if an I/O error occurs.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Builder.read#408",
    "is_bug": true,
    "src_path": "org/apache/commons/io/input/ReaderInputStream.java",
    "class_name": "org.apache.commons.io.input.ReaderInputStream",
    "signature": "org.apache.commons.io.input.ReaderInputStream.read(byte[], int, int)",
    "snippet": "@Override\n    public int read(final byte[] array, int off, int len) throws IOException {\n        Objects.requireNonNull(array, \"array\");\n        if (len \u003c 0 || off \u003c 0 || off + len \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Array size\u003d\" + array.length + \", offset\u003d\" + off + \", length\u003d\" + len);\n        }\n        int read \u003d 0;\n        if (len \u003d\u003d 0) {\n            return 0; // Always return 0 if len \u003d\u003d 0\n        }\n        while (len \u003e 0) {\n            if (encoderOut.hasRemaining()) { // Data from the last read not fully copied\n                final int c \u003d Math.min(encoderOut.remaining(), len);\n                encoderOut.get(array, off, c);\n                off +\u003d c;\n                len -\u003d c;\n                read +\u003d c;\n            } else if (endOfInput) { // Already reach EOF in the last read\n                break;\n            } else { // Read again\n                fillBuffer();\n            }\n        }\n        return read \u003d\u003d 0 \u0026\u0026 endOfInput ? EOF : read;\n    }",
    "begin_line": 408,
    "end_line": 431,
    "comment": "/** \n * Reads the specified number of bytes into an array.\n * @param array the byte array to read into\n * @param off   the offset to start reading bytes into\n * @param len   the number of bytes to read\n * @return the number of bytes read or {@code -1} if the end of the stream has been reached\n * @throws IOException if an I/O error occurs.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]