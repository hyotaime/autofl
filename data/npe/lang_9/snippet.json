[
  {
    "name": "ArrayUtils.add#202",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(boolean[], boolean)",
    "snippet": "public static boolean[] add(final boolean[] array, final boolean element) {\n        final boolean[] newArray \u003d (boolean[]) copyArrayGrow1(array, Boolean.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 202,
    "end_line": 206,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array. \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, true)          \u003d [true] ArrayUtils.add([true], false)       \u003d [true, false] ArrayUtils.add([true, false], true) \u003d [true, false, true] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#238",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(boolean[], int, boolean)",
    "snippet": "@Deprecated\n    public static boolean[] add(final boolean[] array, final int index, final boolean element) {\n        return (boolean[]) add(array, index, Boolean.valueOf(element), Boolean.TYPE);\n    }",
    "begin_line": 238,
    "end_line": 240,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, 0, true)          \u003d [true] ArrayUtils.add([true], 0, false)       \u003d [false, true] ArrayUtils.add([false], 1, true)       \u003d [false, true] ArrayUtils.add([true, false], 1, true) \u003d [true, true, false] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range (index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,boolean[],boolean...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#263",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(byte[], byte)",
    "snippet": "public static byte[] add(final byte[] array, final byte element) {\n        final byte[] newArray \u003d (byte[]) copyArrayGrow1(array, Byte.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 263,
    "end_line": 267,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array. \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#300",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(byte[], int, byte)",
    "snippet": "@Deprecated\n    public static byte[] add(final byte[] array, final int index, final byte element) {\n        return (byte[]) add(array, index, Byte.valueOf(element), Byte.TYPE);\n    }",
    "begin_line": 300,
    "end_line": 302,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add([1], 0, 2)         \u003d [2, 1] ArrayUtils.add([2, 6], 2, 3)      \u003d [2, 6, 3] ArrayUtils.add([2, 6], 0, 1)      \u003d [1, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   \u003d [2, 6, 1, 3] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,byte[],byte...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#325",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(char[], char)",
    "snippet": "public static char[] add(final char[] array, final char element) {\n        final char[] newArray \u003d (char[]) copyArrayGrow1(array, Character.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 325,
    "end_line": 329,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array. \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, \u00270\u0027)       \u003d [\u00270\u0027] ArrayUtils.add([\u00271\u0027], \u00270\u0027)      \u003d [\u00271\u0027, \u00270\u0027] ArrayUtils.add([\u00271\u0027, \u00270\u0027], \u00271\u0027) \u003d [\u00271\u0027, \u00270\u0027, \u00271\u0027] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#363",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(char[], int, char)",
    "snippet": "@Deprecated\n    public static char[] add(final char[] array, final int index, final char element) {\n        return (char[]) add(array, index, Character.valueOf(element), Character.TYPE);\n    }",
    "begin_line": 363,
    "end_line": 365,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, 0, \u0027a\u0027)            \u003d [\u0027a\u0027] ArrayUtils.add([\u0027a\u0027], 0, \u0027b\u0027)           \u003d [\u0027b\u0027, \u0027a\u0027] ArrayUtils.add([\u0027a\u0027, \u0027b\u0027], 0, \u0027c\u0027)      \u003d [\u0027c\u0027, \u0027a\u0027, \u0027b\u0027] ArrayUtils.add([\u0027a\u0027, \u0027b\u0027], 1, \u0027k\u0027)      \u003d [\u0027a\u0027, \u0027k\u0027, \u0027b\u0027] ArrayUtils.add([\u0027a\u0027, \u0027b\u0027, \u0027c\u0027], 1, \u0027t\u0027) \u003d [\u0027a\u0027, \u0027t\u0027, \u0027b\u0027, \u0027c\u0027] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,char[],char...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#388",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(double[], double)",
    "snippet": "public static double[] add(final double[] array, final double element) {\n        final double[] newArray \u003d (double[]) copyArrayGrow1(array, Double.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 388,
    "end_line": 392,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array. \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#425",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(double[], int, double)",
    "snippet": "@Deprecated\n    public static double[] add(final double[] array, final int index, final double element) {\n        return (double[]) add(array, index, Double.valueOf(element), Double.TYPE);\n    }",
    "begin_line": 425,
    "end_line": 427,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add([1.1], 0, 2.2)              \u003d [2.2, 1.1] ArrayUtils.add([2.3, 6.4], 2, 10.5)        \u003d [2.3, 6.4, 10.5] ArrayUtils.add([2.6, 6.7], 0, -4.8)        \u003d [-4.8, 2.6, 6.7] ArrayUtils.add([2.9, 6.0, 0.3], 2, 1.0)    \u003d [2.9, 6.0, 1.0, 0.3] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,double[],double...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#450",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(float[], float)",
    "snippet": "public static float[] add(final float[] array, final float element) {\n        final float[] newArray \u003d (float[]) copyArrayGrow1(array, Float.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 450,
    "end_line": 454,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array. \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#487",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(float[], int, float)",
    "snippet": "@Deprecated\n    public static float[] add(final float[] array, final int index, final float element) {\n        return (float[]) add(array, index, Float.valueOf(element), Float.TYPE);\n    }",
    "begin_line": 487,
    "end_line": 489,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add([1.1f], 0, 2.2f)               \u003d [2.2f, 1.1f] ArrayUtils.add([2.3f, 6.4f], 2, 10.5f)        \u003d [2.3f, 6.4f, 10.5f] ArrayUtils.add([2.6f, 6.7f], 0, -4.8f)        \u003d [-4.8f, 2.6f, 6.7f] ArrayUtils.add([2.9f, 6.0f, 0.3f], 2, 1.0f)   \u003d [2.9f, 6.0f, 1.0f, 0.3f] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,float[],float...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#512",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(int[], int)",
    "snippet": "public static int[] add(final int[] array, final int element) {\n        final int[] newArray \u003d (int[]) copyArrayGrow1(array, Integer.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 512,
    "end_line": 516,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array. \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#549",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(int[], int, int)",
    "snippet": "@Deprecated\n    public static int[] add(final int[] array, final int index, final int element) {\n        return (int[]) add(array, index, Integer.valueOf(element), Integer.TYPE);\n    }",
    "begin_line": 549,
    "end_line": 551,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add([1], 0, 2)         \u003d [2, 1] ArrayUtils.add([2, 6], 2, 10)     \u003d [2, 6, 10] ArrayUtils.add([2, 6], 0, -4)     \u003d [-4, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   \u003d [2, 6, 1, 3] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,int[],int...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#584",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(long[], int, long)",
    "snippet": "@Deprecated\n    public static long[] add(final long[] array, final int index, final long element) {\n        return (long[]) add(array, index, Long.valueOf(element), Long.TYPE);\n    }",
    "begin_line": 584,
    "end_line": 586,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add([1L], 0, 2L)           \u003d [2L, 1L] ArrayUtils.add([2L, 6L], 2, 10L)      \u003d [2L, 6L, 10L] ArrayUtils.add([2L, 6L], 0, -4L)      \u003d [-4L, 2L, 6L] ArrayUtils.add([2L, 6L, 3L], 2, 1L)   \u003d [2L, 6L, 1L, 3L] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,long[],long...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#609",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(long[], long)",
    "snippet": "public static long[] add(final long[] array, final long element) {\n        final long[] newArray \u003d (long[]) copyArrayGrow1(array, Long.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 609,
    "end_line": 613,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array. \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#626",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(java.lang.Object, int, java.lang.Object, java.lang.Class\u003c?\u003e)",
    "snippet": "private static Object add(final Object array, final int index, final Object element, final Class\u003c?\u003e clss) {\n        if (array \u003d\u003d null) {\n            if (index !\u003d 0) {\n                throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: 0\");\n            }\n            final Object joinedArray \u003d Array.newInstance(clss, 1);\n            Array.set(joinedArray, 0, element);\n            return joinedArray;\n        }\n        final int length \u003d Array.getLength(array);\n        if (index \u003e length || index \u003c 0) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + length);\n        }\n        final Object result \u003d Array.newInstance(clss, length + 1);\n        System.arraycopy(array, 0, result, 0, index);\n        Array.set(result, index, element);\n        if (index \u003c length) {\n            System.arraycopy(array, index, result, index + 1, length - index);\n        }\n        return result;\n    }",
    "begin_line": 626,
    "end_line": 646,
    "comment": "/** \n * Underlying implementation of add(array, index, element) methods. The last parameter is the class, which may not equal element.getClass for primitives.\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @param clss the type of the element being added\n * @return A new array containing the existing elements and the new element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#679",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(short[], int, short)",
    "snippet": "@Deprecated\n    public static short[] add(final short[] array, final int index, final short element) {\n        return (short[]) add(array, index, Short.valueOf(element), Short.TYPE);\n    }",
    "begin_line": 679,
    "end_line": 681,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add([1], 0, 2)         \u003d [2, 1] ArrayUtils.add([2, 6], 2, 10)     \u003d [2, 6, 10] ArrayUtils.add([2, 6], 0, -4)     \u003d [-4, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   \u003d [2, 6, 1, 3] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,short[],short...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#704",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(short[], short)",
    "snippet": "public static short[] add(final short[] array, final short element) {\n        final short[] newArray \u003d (short[]) copyArrayGrow1(array, Short.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 704,
    "end_line": 708,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array. \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#744",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(T[], int, T)",
    "snippet": "@Deprecated\n    public static \u003cT\u003e T[] add(final T[] array, final int index, final T element) {\n        Class\u003c?\u003e clss \u003d null;\n        if (array !\u003d null) {\n            clss \u003d array.getClass().getComponentType();\n        } else if (element !\u003d null) {\n            clss \u003d element.getClass();\n        } else {\n            throw new IllegalArgumentException(\"Array and element cannot both be null\");\n        }\n        @SuppressWarnings(\"unchecked\") // the add method creates an array of type clss, which is type T\n        final T[] newArray \u003d (T[]) add(array, index, element, clss);\n        return newArray;\n    }",
    "begin_line": 744,
    "end_line": 756,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, 0, null)      \u003d IllegalArgumentException ArrayUtils.add(null, 0, \"a\")       \u003d [\"a\"] ArrayUtils.add([\"a\"], 1, null)     \u003d [\"a\", null] ArrayUtils.add([\"a\"], 1, \"b\")      \u003d [\"a\", \"b\"] ArrayUtils.add([\"a\", \"b\"], 3, \"c\") \u003d [\"a\", \"b\", \"c\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range (index \u0026lt; 0 || index \u0026gt; array.length).\n * @throws IllegalArgumentException if both array and element are null\n * @deprecated this method has been superseded by {@link #insert(int,Object[],Object...) insert(int, T[], T...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#787",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(T[], T)",
    "snippet": "public static \u003cT\u003e T[] add(final T[] array, final T element) {\n        Class\u003c?\u003e type;\n        if (array !\u003d null) {\n            type \u003d array.getClass().getComponentType();\n        } else if (element !\u003d null) {\n            type \u003d element.getClass();\n        } else {\n            throw new IllegalArgumentException(\"Arguments cannot both be null\");\n        }\n        @SuppressWarnings(\"unchecked\") // type must be T\n        final\n        T[] newArray \u003d (T[]) copyArrayGrow1(array, type);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 787,
    "end_line": 801,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array. \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element, unless the element itself is null, in which case the return type is Object[] \u003cpre\u003e ArrayUtils.add(null, null)      \u003d IllegalArgumentException ArrayUtils.add(null, \"a\")       \u003d [\"a\"] ArrayUtils.add([\"a\"], null)     \u003d [\"a\", null] ArrayUtils.add([\"a\"], \"b\")      \u003d [\"a\", \"b\"] ArrayUtils.add([\"a\", \"b\"], \"c\") \u003d [\"a\", \"b\", \"c\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to \"add\" the element to, may be {@code null}\n * @param element  the object to add, may be {@code null}\n * @return A new array containing the existing elements plus the new elementThe returned array type will be that of the input array (unless null), in which case it will have the same type as the element. If both are null, an IllegalArgumentException is thrown\n * @since 2.1\n * @throws IllegalArgumentException if both arguments are null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#820",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(boolean[], boolean)",
    "snippet": "public static boolean[] addAll(final boolean[] array1, final boolean... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final boolean[] joinedArray \u003d new boolean[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 820,
    "end_line": 830,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array. \u003cp\u003eThe new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new boolean[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#849",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(byte[], byte)",
    "snippet": "public static byte[] addAll(final byte[] array1, final byte... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final byte[] joinedArray \u003d new byte[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 849,
    "end_line": 859,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array. \u003cp\u003eThe new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new byte[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#878",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(char[], char)",
    "snippet": "public static char[] addAll(final char[] array1, final char... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final char[] joinedArray \u003d new char[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 878,
    "end_line": 888,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array. \u003cp\u003eThe new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new char[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#907",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(double[], double)",
    "snippet": "public static double[] addAll(final double[] array1, final double... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final double[] joinedArray \u003d new double[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 907,
    "end_line": 917,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array. \u003cp\u003eThe new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new double[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#936",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(float[], float)",
    "snippet": "public static float[] addAll(final float[] array1, final float... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final float[] joinedArray \u003d new float[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 936,
    "end_line": 946,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array. \u003cp\u003eThe new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new float[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#965",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(int[], int)",
    "snippet": "public static int[] addAll(final int[] array1, final int... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final int[] joinedArray \u003d new int[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 965,
    "end_line": 975,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array. \u003cp\u003eThe new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new int[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#994",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(long[], long)",
    "snippet": "public static long[] addAll(final long[] array1, final long... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final long[] joinedArray \u003d new long[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 994,
    "end_line": 1004,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array. \u003cp\u003eThe new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new long[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#1023",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(short[], short)",
    "snippet": "public static short[] addAll(final short[] array1, final short... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final short[] joinedArray \u003d new short[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 1023,
    "end_line": 1033,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array. \u003cp\u003eThe new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new short[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#1059",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(T[], T)",
    "snippet": "public static \u003cT\u003e T[] addAll(final T[] array1, @SuppressWarnings(\"unchecked\") final T... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final Class\u003c?\u003e type1 \u003d array1.getClass().getComponentType();\n        @SuppressWarnings(\"unchecked\") // OK, because array is of type T\n        final T[] joinedArray \u003d (T[]) Array.newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        try {\n            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        } catch (final ArrayStoreException ase) {\n            // Check if problem was due to incompatible types\n            /*\n             * We do this here, rather than before the copy because:\n             * - it would be a wasted check most of the time\n             * - safer, in case check turns out to be too strict\n             */\n            final Class\u003c?\u003e type2 \u003d array2.getClass().getComponentType();\n            if (!type1.isAssignableFrom(type2)) {\n                throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \"\n                        + type1.getName(), ase);\n            }\n            throw ase; // No, so rethrow original\n        }\n        return joinedArray;\n    }",
    "begin_line": 1059,
    "end_line": 1086,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array. \u003cp\u003eThe new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003cpre\u003e ArrayUtils.addAll(null, null)     \u003d null ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] ArrayUtils.addAll([null], [null]) \u003d [null, null] ArrayUtils.addAll([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]) \u003d [\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array1  the first array whose elements are added to the new array, may be {@code null}\n * @param array2  the second array whose elements are added to the new array, may be {@code null}\n * @return The new array, {@code null} if both arrays are {@code null}. The type of the new array is the type of the first array, unless the first array is null, in which case the type is the same as the second array.\n * @since 2.1\n * @throws IllegalArgumentException if the array types are incompatible\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1113",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(boolean[], boolean)",
    "snippet": "public static boolean[] addFirst(final boolean[] array, final boolean element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1113,
    "end_line": 1115,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, true)          \u003d [true] ArrayUtils.add([true], false)       \u003d [false, true] ArrayUtils.add([true, false], true) \u003d [true, true, false] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1142",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(byte[], byte)",
    "snippet": "public static byte[] addFirst(final byte[] array, final byte element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1142,
    "end_line": 1144,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 1)   \u003d [1] ArrayUtils.add([1], 0)    \u003d [0, 1] ArrayUtils.add([1, 0], 1) \u003d [1, 1, 0] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1171",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(char[], char)",
    "snippet": "public static char[] addFirst(final char[] array, final char element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1171,
    "end_line": 1173,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, \u00271\u0027)       \u003d [\u00271\u0027] ArrayUtils.add([\u00271\u0027], \u00270\u0027)      \u003d [\u00270\u0027, \u00271\u0027] ArrayUtils.add([\u00271\u0027, \u00270\u0027], \u00271\u0027) \u003d [\u00271\u0027, \u00271\u0027, \u00270\u0027] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1200",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(double[], double)",
    "snippet": "public static double[] addFirst(final double[] array, final double element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1200,
    "end_line": 1202,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 1)   \u003d [1] ArrayUtils.add([1], 0)    \u003d [0, 1] ArrayUtils.add([1, 0], 1) \u003d [1, 1, 0] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1229",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(float[], float)",
    "snippet": "public static float[] addFirst(final float[] array, final float element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1229,
    "end_line": 1231,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 1)   \u003d [1] ArrayUtils.add([1], 0)    \u003d [0, 1] ArrayUtils.add([1, 0], 1) \u003d [1, 1, 0] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1258",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(int[], int)",
    "snippet": "public static int[] addFirst(final int[] array, final int element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1258,
    "end_line": 1260,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 1)   \u003d [1] ArrayUtils.add([1], 0)    \u003d [0, 1] ArrayUtils.add([1, 0], 1) \u003d [1, 1, 0] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1287",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(long[], long)",
    "snippet": "public static long[] addFirst(final long[] array, final long element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1287,
    "end_line": 1289,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 1)   \u003d [1] ArrayUtils.add([1], 0)    \u003d [0, 1] ArrayUtils.add([1, 0], 1) \u003d [1, 1, 0] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1316",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(short[], short)",
    "snippet": "public static short[] addFirst(final short[] array, final short element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1316,
    "end_line": 1318,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 1)   \u003d [1] ArrayUtils.add([1], 0)    \u003d [0, 1] ArrayUtils.add([1, 0], 1) \u003d [1, 1, 0] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1350",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(T[], T)",
    "snippet": "public static \u003cT\u003e T[] addFirst(final T[] array, final T element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1350,
    "end_line": 1352,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first positioaddFirstaddFirstaddFirstn. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element, unless the element itself is null, in which case the return type is Object[] \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, null)      \u003d IllegalArgumentException ArrayUtils.add(null, \"a\")       \u003d [\"a\"] ArrayUtils.add([\"a\"], null)     \u003d [null, \"a\"] ArrayUtils.add([\"a\"], \"b\")      \u003d [\"b\", \"a\"] ArrayUtils.add([\"a\", \"b\"], \"c\") \u003d [\"c\", \"a\", \"b\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array the array to \"add\" the element to, may be {@code null}\n * @param element the object to add, may be {@code null}\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element. If both are null, an IllegalArgumentException is thrown\n * @since 3.10\n * @throws IllegalArgumentException if both arguments are null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1363",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(boolean[])",
    "snippet": "public static boolean[] clone(final boolean[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 1363,
    "end_line": 1368,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1379",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(byte[])",
    "snippet": "public static byte[] clone(final byte[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 1379,
    "end_line": 1384,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1395",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(char[])",
    "snippet": "public static char[] clone(final char[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 1395,
    "end_line": 1400,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1411",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(double[])",
    "snippet": "public static double[] clone(final double[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 1411,
    "end_line": 1416,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1427",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(float[])",
    "snippet": "public static float[] clone(final float[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 1427,
    "end_line": 1432,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1443",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(int[])",
    "snippet": "public static int[] clone(final int[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 1443,
    "end_line": 1448,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1459",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(long[])",
    "snippet": "public static long[] clone(final long[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 1459,
    "end_line": 1464,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1475",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(short[])",
    "snippet": "public static short[] clone(final short[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 1475,
    "end_line": 1480,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1497",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(T[])",
    "snippet": "public static \u003cT\u003e T[] clone(final T[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 1497,
    "end_line": 1502,
    "comment": "/** \n * \u003cp\u003eShallow clones an array returning a typecast result and handling {@code null}. \u003cp\u003eThe objects in the array are not cloned, thus there is no special handling for multi-dimensional arrays. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to shallow clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1513",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(boolean[], boolean)",
    "snippet": "public static boolean contains(final boolean[] array, final boolean valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1513,
    "end_line": 1515,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array. \u003cp\u003eThe method returns  {@code false} if a {@code null} array is passed in.\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1526",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(byte[], byte)",
    "snippet": "public static boolean contains(final byte[] array, final byte valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1526,
    "end_line": 1528,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array. \u003cp\u003eThe method returns  {@code false} if a {@code null} array is passed in.\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1540",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(char[], char)",
    "snippet": "public static boolean contains(final char[] array, final char valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1540,
    "end_line": 1542,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array. \u003cp\u003eThe method returns  {@code false} if a {@code null} array is passed in.\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1553",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(double[], double)",
    "snippet": "public static boolean contains(final double[] array, final double valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1553,
    "end_line": 1555,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array. \u003cp\u003eThe method returns  {@code false} if a {@code null} array is passed in.\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1570",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(double[], double, double)",
    "snippet": "public static boolean contains(final double[] array, final double valueToFind, final double tolerance) {\n        return indexOf(array, valueToFind, 0, tolerance) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1570,
    "end_line": 1572,
    "comment": "/** \n * \u003cp\u003eChecks if a value falling within the given tolerance is in the given array.  If the array contains a value within the inclusive range defined by (value - tolerance) to (value + tolerance). \u003cp\u003eThe method returns  {@code false} if a {@code null} arrayis passed in.\n * @param array  the array to search\n * @param valueToFind  the value to find\n * @param tolerance  the array contains the tolerance of the search\n * @return true if value falling within tolerance is in array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1583",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(float[], float)",
    "snippet": "public static boolean contains(final float[] array, final float valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1583,
    "end_line": 1585,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array. \u003cp\u003eThe method returns  {@code false} if a {@code null} array is passed in.\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1596",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(int[], int)",
    "snippet": "public static boolean contains(final int[] array, final int valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1596,
    "end_line": 1598,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array. \u003cp\u003eThe method returns  {@code false} if a {@code null} array is passed in.\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1609",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(long[], long)",
    "snippet": "public static boolean contains(final long[] array, final long valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1609,
    "end_line": 1611,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array. \u003cp\u003eThe method returns  {@code false} if a {@code null} array is passed in.\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1622",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(java.lang.Object[], java.lang.Object)",
    "snippet": "public static boolean contains(final Object[] array, final Object objectToFind) {\n        return indexOf(array, objectToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1622,
    "end_line": 1624,
    "comment": "/** \n * \u003cp\u003eChecks if the object is in the given array. \u003cp\u003eThe method returns  {@code false} if a {@code null} array is passed in.\n * @param array  the array to search through\n * @param objectToFind  the object to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1635",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(short[], short)",
    "snippet": "public static boolean contains(final short[] array, final short valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1635,
    "end_line": 1637,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array. \u003cp\u003eThe method returns  {@code false} if a {@code null} array is passed in.\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.copyArrayGrow1#1648",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.copyArrayGrow1(java.lang.Object, java.lang.Class\u003c?\u003e)",
    "snippet": "private static Object copyArrayGrow1(final Object array, final Class\u003c?\u003e newArrayComponentType) {\n        if (array !\u003d null) {\n            final int arrayLength \u003d Array.getLength(array);\n            final Object newArray \u003d Array.newInstance(array.getClass().getComponentType(), arrayLength + 1);\n            System.arraycopy(array, 0, newArray, 0, arrayLength);\n            return newArray;\n        }\n        return Array.newInstance(newArrayComponentType, 1);\n    }",
    "begin_line": 1648,
    "end_line": 1656,
    "comment": "/** \n * Returns a copy of the given array of size 1 greater than the argument. The last value of the array is left to the default value.\n * @param array The array to copy, must not be {@code null}.\n * @param newArrayComponentType If {@code array} is {@code null}, create a size 1 array of this type.\n * @return A new copy of the array of size 1 greater than the input.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.getLength#1679",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.getLength(java.lang.Object)",
    "snippet": "public static int getLength(final Object array) {\n        if (array \u003d\u003d null) {\n            return 0;\n        }\n        return Array.getLength(array);\n    }",
    "begin_line": 1679,
    "end_line": 1684,
    "comment": "/** \n * \u003cp\u003eReturns the length of the specified array. This method can deal with  {@code Object} arrays and with primitive arrays.\u003cp\u003eIf the input array is  {@code null},  {@code 0} is returned.\u003cpre\u003e ArrayUtils.getLength(null)            \u003d 0 ArrayUtils.getLength([])              \u003d 0 ArrayUtils.getLength([null])          \u003d 1 ArrayUtils.getLength([true, false])   \u003d 2 ArrayUtils.getLength([1, 2, 3])       \u003d 3 ArrayUtils.getLength([\"a\", \"b\", \"c\"]) \u003d 3 \u003c/pre\u003e\n * @param array  the array to retrieve the length from, may be null\n * @return The length of the array, or {@code 0} if the array is {@code null}\n * @throws IllegalArgumentException if the object argument is not an array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.hashCode#1694",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.hashCode(java.lang.Object)",
    "snippet": "public static int hashCode(final Object array) {\n        return new HashCodeBuilder().append(array).toHashCode();\n    }",
    "begin_line": 1694,
    "end_line": 1696,
    "comment": "/** \n * \u003cp\u003eGet a hash code for an array handling multi-dimensional arrays correctly. \u003cp\u003eMulti-dimensional primitive arrays are also handled correctly by this method.\n * @param array  the array to get a hash code for, {@code null} returns zero\n * @return a hash code for the array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1709",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(boolean[], boolean)",
    "snippet": "public static BitSet indexesOf(final boolean[] array, final boolean valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 1709,
    "end_line": 1711,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1729",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(boolean[], boolean, int)",
    "snippet": "public static BitSet indexesOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 1729,
    "end_line": 1748,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet ( {@code -1}).\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null}array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1761",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(byte[], byte)",
    "snippet": "public static BitSet indexesOf(final byte[] array, final byte valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 1761,
    "end_line": 1763,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1780",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(byte[], byte, int)",
    "snippet": "public static BitSet indexesOf(final byte[] array, final byte valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 1780,
    "end_line": 1799,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1812",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(char[], char)",
    "snippet": "public static BitSet indexesOf(final char[] array, final char valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 1812,
    "end_line": 1814,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1831",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(char[], char, int)",
    "snippet": "public static BitSet indexesOf(final char[] array, final char valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 1831,
    "end_line": 1850,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1863",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(double[], double)",
    "snippet": "public static BitSet indexesOf(final double[] array, final double valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 1863,
    "end_line": 1865,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1884",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(double[], double, double)",
    "snippet": "public static BitSet indexesOf(final double[] array, final double valueToFind, final double tolerance) {\n        return indexesOf(array, valueToFind, 0, tolerance);\n    }",
    "begin_line": 1884,
    "end_line": 1886,
    "comment": "/** \n * Finds the indices of the given value within a given tolerance in the array. \u003cp\u003e This method will return all the indices of the value which fall between the region defined by valueToFind - tolerance and valueToFind + tolerance, each time between the nearest integers. \u003c/p\u003e \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param tolerance tolerance of the search\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1903",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(double[], double, int)",
    "snippet": "public static BitSet indexesOf(final double[] array, final double valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 1903,
    "end_line": 1922,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1945",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(double[], double, int, double)",
    "snippet": "public static BitSet indexesOf(final double[] array, final double valueToFind, int startIndex, final double tolerance) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex, tolerance);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 1945,
    "end_line": 1964,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003e This method will return the indices of the values which fall between the region defined by valueToFind - tolerance and valueToFind + tolerance, between the nearest integers. \u003c/p\u003e \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @param tolerance tolerance of the search\n * @return a BitSet of the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1977",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(float[], float)",
    "snippet": "public static BitSet indexesOf(final float[] array, final float valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 1977,
    "end_line": 1979,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1996",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(float[], float, int)",
    "snippet": "public static BitSet indexesOf(final float[] array, final float valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 1996,
    "end_line": 2015,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2028",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(int[], int)",
    "snippet": "public static BitSet indexesOf(final int[] array, final int valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 2028,
    "end_line": 2030,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2047",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(int[], int, int)",
    "snippet": "public static BitSet indexesOf(final int[] array, final int valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 2047,
    "end_line": 2066,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2079",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(long[], long)",
    "snippet": "public static BitSet indexesOf(final long[] array, final long valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 2079,
    "end_line": 2081,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2098",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(long[], long, int)",
    "snippet": "public static BitSet indexesOf(final long[] array, final long valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 2098,
    "end_line": 2117,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2130",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(java.lang.Object[], java.lang.Object)",
    "snippet": "public static BitSet indexesOf(final Object[] array, final Object objectToFind) {\n        return indexesOf(array, objectToFind, 0);\n    }",
    "begin_line": 2130,
    "end_line": 2132,
    "comment": "/** \n * Finds the indices of the given object in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param objectToFind  the object to find, may be {@code null}\n * @return a BitSet of all the indices of the object within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2149",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(java.lang.Object[], java.lang.Object, int)",
    "snippet": "public static BitSet indexesOf(final Object[] array, final Object objectToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, objectToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 2149,
    "end_line": 2168,
    "comment": "/** \n * Finds the indices of the given object in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param objectToFind  the object to find, may be {@code null}\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the object within the array starting at the index,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2181",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(short[], short)",
    "snippet": "public static BitSet indexesOf(final short[] array, final short valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 2181,
    "end_line": 2183,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2200",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(short[], short, int)",
    "snippet": "public static BitSet indexesOf(final short[] array, final short valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 2200,
    "end_line": 2219,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2233",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(boolean[], boolean)",
    "snippet": "public static int indexOf(final boolean[] array, final boolean valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2233,
    "end_line": 2235,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2252",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(boolean[], boolean, int)",
    "snippet": "public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n        if (isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2252,
    "end_line": 2265,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null}array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2279",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(byte[], byte)",
    "snippet": "public static int indexOf(final byte[] array, final byte valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2279,
    "end_line": 2281,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2297",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(byte[], byte, int)",
    "snippet": "public static int indexOf(final byte[] array, final byte valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2297,
    "end_line": 2310,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2325",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(char[], char)",
    "snippet": "public static int indexOf(final char[] array, final char valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2325,
    "end_line": 2327,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2344",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(char[], char, int)",
    "snippet": "public static int indexOf(final char[] array, final char valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2344,
    "end_line": 2357,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2371",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(double[], double)",
    "snippet": "public static int indexOf(final double[] array, final double valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2371,
    "end_line": 2373,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2388",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(double[], double, double)",
    "snippet": "public static int indexOf(final double[] array, final double valueToFind, final double tolerance) {\n        return indexOf(array, valueToFind, 0, tolerance);\n    }",
    "begin_line": 2388,
    "end_line": 2390,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value within a given tolerance in the array. This method will return the index of the first value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param tolerance tolerance of the search\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2406",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(double[], double, int)",
    "snippet": "public static int indexOf(final double[] array, final double valueToFind, int startIndex) {\n        if (isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2406,
    "end_line": 2419,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2438",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(double[], double, int, double)",
    "snippet": "public static int indexOf(final double[] array, final double valueToFind, int startIndex, final double tolerance) {\n        if (isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        final double min \u003d valueToFind - tolerance;\n        final double max \u003d valueToFind + tolerance;\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (array[i] \u003e\u003d min \u0026\u0026 array[i] \u003c\u003d max) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2438,
    "end_line": 2453,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index. This method will return the index of the first value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @param tolerance tolerance of the search\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2467",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(float[], float)",
    "snippet": "public static int indexOf(final float[] array, final float valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2467,
    "end_line": 2469,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2485",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(float[], float, int)",
    "snippet": "public static int indexOf(final float[] array, final float valueToFind, int startIndex) {\n        if (isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2485,
    "end_line": 2498,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2512",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(int[], int)",
    "snippet": "public static int indexOf(final int[] array, final int valueToFind) {\n    return indexOf(array, valueToFind, 0);\n}",
    "begin_line": 2512,
    "end_line": 2514,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2530",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(int[], int, int)",
    "snippet": "public static int indexOf(final int[] array, final int valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2530,
    "end_line": 2543,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2557",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(long[], long)",
    "snippet": "public static int indexOf(final long[] array, final long valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2557,
    "end_line": 2559,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2575",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(long[], long, int)",
    "snippet": "public static int indexOf(final long[] array, final long valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2575,
    "end_line": 2588,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2602",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object)",
    "snippet": "public static int indexOf(final Object[] array, final Object objectToFind) {\n        return indexOf(array, objectToFind, 0);\n    }",
    "begin_line": 2602,
    "end_line": 2604,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given object in the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param objectToFind  the object to find, may be {@code null}\n * @return the index of the object within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2620",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object, int)",
    "snippet": "public static int indexOf(final Object[] array, final Object objectToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        if (objectToFind \u003d\u003d null) {\n            for (int i \u003d startIndex; i \u003c array.length; i++) {\n                if (array[i] \u003d\u003d null) {\n                    return i;\n                }\n            }\n        } else {\n            for (int i \u003d startIndex; i \u003c array.length; i++) {\n                if (objectToFind.equals(array[i])) {\n                    return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2620,
    "end_line": 2641,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given object in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).\n * @param array  the array to search through for the object, may be {@code null}\n * @param objectToFind  the object to find, may be {@code null}\n * @param startIndex  the index to start searching at\n * @return the index of the object within the array starting at the index,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2655",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(short[], short)",
    "snippet": "public static int indexOf(final short[] array, final short valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2655,
    "end_line": 2657,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2673",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(short[], short, int)",
    "snippet": "public static int indexOf(final short[] array, final short valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2673,
    "end_line": 2686,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#2707",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, boolean[], boolean)",
    "snippet": "public static boolean[] insert(final int index, final boolean[] array, final boolean... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final boolean[] result \u003d new boolean[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 2707,
    "end_line": 2728,
    "comment": "/** \n * \u003cp\u003eInserts elements into an array at the given index (starting from zero).\u003c/p\u003e \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#2749",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, byte[], byte)",
    "snippet": "public static byte[] insert(final int index, final byte[] array, final byte... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final byte[] result \u003d new byte[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 2749,
    "end_line": 2770,
    "comment": "/** \n * \u003cp\u003eInserts elements into an array at the given index (starting from zero).\u003c/p\u003e \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#2791",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, char[], char)",
    "snippet": "public static char[] insert(final int index, final char[] array, final char... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final char[] result \u003d new char[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 2791,
    "end_line": 2812,
    "comment": "/** \n * \u003cp\u003eInserts elements into an array at the given index (starting from zero).\u003c/p\u003e \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#2833",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, double[], double)",
    "snippet": "public static double[] insert(final int index, final double[] array, final double... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final double[] result \u003d new double[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 2833,
    "end_line": 2854,
    "comment": "/** \n * \u003cp\u003eInserts elements into an array at the given index (starting from zero).\u003c/p\u003e \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#2875",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, float[], float)",
    "snippet": "public static float[] insert(final int index, final float[] array, final float... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final float[] result \u003d new float[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 2875,
    "end_line": 2896,
    "comment": "/** \n * \u003cp\u003eInserts elements into an array at the given index (starting from zero).\u003c/p\u003e \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#2917",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, int[], int)",
    "snippet": "public static int[] insert(final int index, final int[] array, final int... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final int[] result \u003d new int[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 2917,
    "end_line": 2938,
    "comment": "/** \n * \u003cp\u003eInserts elements into an array at the given index (starting from zero).\u003c/p\u003e \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#2959",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, long[], long)",
    "snippet": "public static long[] insert(final int index, final long[] array, final long... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final long[] result \u003d new long[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 2959,
    "end_line": 2980,
    "comment": "/** \n * \u003cp\u003eInserts elements into an array at the given index (starting from zero).\u003c/p\u003e \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#3001",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, short[], short)",
    "snippet": "public static short[] insert(final int index, final short[] array, final short... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final short[] result \u003d new short[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 3001,
    "end_line": 3022,
    "comment": "/** \n * \u003cp\u003eInserts elements into an array at the given index (starting from zero).\u003c/p\u003e \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#3045",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, T[], T)",
    "snippet": "@SafeVarargs\n    public static \u003cT\u003e T[] insert(final int index, final T[] array, final T... values) {\n        /*\n         * Note on use of @SafeVarargs:\n         *\n         * By returning null when \u0027array\u0027 is null, we avoid returning the vararg\n         * array to the caller. We also avoid relying on the type of the vararg\n         * array, by inspecting the component type of \u0027array\u0027.\n         */\n\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final Class\u003c?\u003e type \u003d array.getClass().getComponentType();\n        @SuppressWarnings(\"unchecked\") // OK, because array and values are of type T\n        final\n        T[] result \u003d (T[]) Array.newInstance(type, array.length + values.length);\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 3045,
    "end_line": 3077,
    "comment": "/** \n * \u003cp\u003eInserts elements into an array at the given index (starting from zero).\u003c/p\u003e \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param \u003c T \u003e The type of elements in {@code array} and {@code values}\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isArrayIndexValid#3087",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isArrayIndexValid(T[], int)",
    "snippet": "public static \u003cT\u003e boolean isArrayIndexValid(final T[] array, final int index) {\n        if (getLength(array) \u003d\u003d 0 || array.length \u003c\u003d index) {\n            return false;\n        }\n\n        return index \u003e\u003d 0;\n    }",
    "begin_line": 3087,
    "end_line": 3093,
    "comment": "/** \n * Returns whether a given array can safely be accessed at the given index.\n * @param \u003c T \u003e the component type of the array\n * @param array the array to inspect, may be null\n * @param index the index of the array to be inspected\n * @return Whether the given index is safely-accessible in the given array\n * @since 3.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3102",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(boolean[])",
    "snippet": "public static boolean isEmpty(final boolean[] array) {\n        return getLength(array) \u003d\u003d 0;\n    }",
    "begin_line": 3102,
    "end_line": 3104,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive booleans is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3116",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(byte[])",
    "snippet": "public static boolean isEmpty(final byte[] array) {\n        return getLength(array) \u003d\u003d 0;\n    }",
    "begin_line": 3116,
    "end_line": 3118,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive bytes is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3127",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(char[])",
    "snippet": "public static boolean isEmpty(final char[] array) {\n        return getLength(array) \u003d\u003d 0;\n    }",
    "begin_line": 3127,
    "end_line": 3129,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive chars is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3138",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(double[])",
    "snippet": "public static boolean isEmpty(final double[] array) {\n        return getLength(array) \u003d\u003d 0;\n    }",
    "begin_line": 3138,
    "end_line": 3140,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive doubles is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3149",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(float[])",
    "snippet": "public static boolean isEmpty(final float[] array) {\n        return getLength(array) \u003d\u003d 0;\n    }",
    "begin_line": 3149,
    "end_line": 3151,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive floats is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3162",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(int[])",
    "snippet": "public static boolean isEmpty(final int[] array) {\n        return getLength(array) \u003d\u003d 0;\n    }",
    "begin_line": 3162,
    "end_line": 3164,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive ints is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3173",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(long[])",
    "snippet": "public static boolean isEmpty(final long[] array) {\n        return getLength(array) \u003d\u003d 0;\n    }",
    "begin_line": 3173,
    "end_line": 3175,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive longs is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3185",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(java.lang.Object[])",
    "snippet": "public static boolean isEmpty(final Object[] array) {\n        return getLength(array) \u003d\u003d 0;\n    }",
    "begin_line": 3185,
    "end_line": 3187,
    "comment": "/** \n * \u003cp\u003eChecks if an array of Objects is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3196",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(short[])",
    "snippet": "public static boolean isEmpty(final short[] array) {\n        return getLength(array) \u003d\u003d 0;\n    }",
    "begin_line": 3196,
    "end_line": 3198,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive shorts is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEquals#3213",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEquals(java.lang.Object, java.lang.Object)",
    "snippet": "@Deprecated\n    public static boolean isEquals(final Object array1, final Object array2) {\n        return new EqualsBuilder().append(array1, array2).isEquals();\n    }",
    "begin_line": 3213,
    "end_line": 3215,
    "comment": "/** \n * \u003cp\u003eCompares two arrays, using equals(), handling multi-dimensional arrays correctly. \u003cp\u003eMulti-dimensional primitive arrays are also handled correctly by this method.\n * @param array1  the left hand array to compare, may be {@code null}\n * @param array2  the right hand array to compare, may be {@code null}\n * @return {@code true} if the arrays are equal\n * @deprecated this method has been replaced by {@code java.util.Objects.deepEquals(Object, Object)} and will beremoved from future releases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3224",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(boolean[])",
    "snippet": "public static boolean isNotEmpty(final boolean[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3224,
    "end_line": 3226,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive booleans is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3235",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(byte[])",
    "snippet": "public static boolean isNotEmpty(final byte[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3235,
    "end_line": 3237,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive bytes is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3246",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(char[])",
    "snippet": "public static boolean isNotEmpty(final char[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3246,
    "end_line": 3248,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive chars is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3257",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(double[])",
    "snippet": "public static boolean isNotEmpty(final double[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3257,
    "end_line": 3259,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive doubles is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3268",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(float[])",
    "snippet": "public static boolean isNotEmpty(final float[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3268,
    "end_line": 3270,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive floats is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3279",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(int[])",
    "snippet": "public static boolean isNotEmpty(final int[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3279,
    "end_line": 3281,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive ints is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3290",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(long[])",
    "snippet": "public static boolean isNotEmpty(final long[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3290,
    "end_line": 3292,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive longs is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3301",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(short[])",
    "snippet": "public static boolean isNotEmpty(final short[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3301,
    "end_line": 3303,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive shorts is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3314",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(T[])",
    "snippet": "public static \u003cT\u003e boolean isNotEmpty(final T[] array) {\n         return !isEmpty(array);\n     }",
    "begin_line": 3314,
    "end_line": 3316,
    "comment": "/** \n * \u003cp\u003eChecks if an array of Objects is not empty and not  {@code null}.\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3327",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(boolean[], boolean[])",
    "snippet": "public static boolean isSameLength(final boolean[] array1, final boolean[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3327,
    "end_line": 3329,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3340",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(byte[], byte[])",
    "snippet": "public static boolean isSameLength(final byte[] array1, final byte[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3340,
    "end_line": 3342,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3353",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(char[], char[])",
    "snippet": "public static boolean isSameLength(final char[] array1, final char[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3353,
    "end_line": 3355,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3366",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(double[], double[])",
    "snippet": "public static boolean isSameLength(final double[] array1, final double[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3366,
    "end_line": 3368,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3379",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(float[], float[])",
    "snippet": "public static boolean isSameLength(final float[] array1, final float[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3379,
    "end_line": 3381,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3392",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(int[], int[])",
    "snippet": "public static boolean isSameLength(final int[] array1, final int[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3392,
    "end_line": 3394,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3405",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(long[], long[])",
    "snippet": "public static boolean isSameLength(final long[] array1, final long[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3405,
    "end_line": 3407,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3422",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(java.lang.Object[], java.lang.Object[])",
    "snippet": "public static boolean isSameLength(final Object[] array1, final Object[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3422,
    "end_line": 3424,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}. \u003cp\u003eAny multi-dimensional aspects of the arrays are ignored.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3435",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(short[], short[])",
    "snippet": "public static boolean isSameLength(final short[] array1, final short[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3435,
    "end_line": 3437,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameType#3448",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameType(java.lang.Object, java.lang.Object)",
    "snippet": "public static boolean isSameType(final Object array1, final Object array2) {\n        if (array1 \u003d\u003d null || array2 \u003d\u003d null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        }\n        return array1.getClass().getName().equals(array2.getClass().getName());\n    }",
    "begin_line": 3448,
    "end_line": 3453,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same type taking into account multi-dimensional arrays.\n * @param array1 the first array, must not be {@code null}\n * @param array2 the second array, must not be {@code null}\n * @return {@code true} if type of arrays matches\n * @throws IllegalArgumentException if either array is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3463",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(boolean[])",
    "snippet": "public static boolean isSorted(final boolean[] array) {\n        if (array \u003d\u003d null || array.length \u003c 2) {\n            return true;\n        }\n\n        boolean previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final boolean current \u003d array[i];\n            if (BooleanUtils.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3463,
    "end_line": 3479,
    "comment": "/** \n * \u003cp\u003eThis method checks whether the provided array is sorted according to natural ordering ( {@code false} before {@code true}).\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3488",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(byte[])",
    "snippet": "public static boolean isSorted(final byte[] array) {\n        if (array \u003d\u003d null || array.length \u003c 2) {\n            return true;\n        }\n\n        byte previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final byte current \u003d array[i];\n            if (NumberUtils.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3488,
    "end_line": 3504,
    "comment": "/** \n * \u003cp\u003eThis method checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3513",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(char[])",
    "snippet": "public static boolean isSorted(final char[] array) {\n        if (array \u003d\u003d null || array.length \u003c 2) {\n            return true;\n        }\n\n        char previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final char current \u003d array[i];\n            if (CharUtils.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3513,
    "end_line": 3529,
    "comment": "/** \n * \u003cp\u003eThis method checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3538",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(double[])",
    "snippet": "public static boolean isSorted(final double[] array) {\n        if (array \u003d\u003d null || array.length \u003c 2) {\n            return true;\n        }\n\n        double previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final double current \u003d array[i];\n            if (Double.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3538,
    "end_line": 3554,
    "comment": "/** \n * \u003cp\u003eThis method checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3563",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(float[])",
    "snippet": "public static boolean isSorted(final float[] array) {\n        if (array \u003d\u003d null || array.length \u003c 2) {\n            return true;\n        }\n\n        float previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final float current \u003d array[i];\n            if (Float.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3563,
    "end_line": 3579,
    "comment": "/** \n * \u003cp\u003eThis method checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3588",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(int[])",
    "snippet": "public static boolean isSorted(final int[] array) {\n        if (array \u003d\u003d null || array.length \u003c 2) {\n            return true;\n        }\n\n        int previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final int current \u003d array[i];\n            if (NumberUtils.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3588,
    "end_line": 3604,
    "comment": "/** \n * \u003cp\u003eThis method checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3613",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(long[])",
    "snippet": "public static boolean isSorted(final long[] array) {\n        if (array \u003d\u003d null || array.length \u003c 2) {\n            return true;\n        }\n\n        long previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final long current \u003d array[i];\n            if (NumberUtils.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3613,
    "end_line": 3629,
    "comment": "/** \n * \u003cp\u003eThis method checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3638",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(short[])",
    "snippet": "public static boolean isSorted(final short[] array) {\n        if (array \u003d\u003d null || array.length \u003c 2) {\n            return true;\n        }\n\n        short previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final short current \u003d array[i];\n            if (NumberUtils.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3638,
    "end_line": 3654,
    "comment": "/** \n * \u003cp\u003eThis method checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3665",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(T[])",
    "snippet": "public static \u003cT extends Comparable\u003c? super T\u003e\u003e boolean isSorted(final T[] array) {\n        return isSorted(array, (o1, o2) -\u003e o1.compareTo(o2));\n    }",
    "begin_line": 3665,
    "end_line": 3667,
    "comment": "/** \n * \u003cp\u003eThis method checks whether the provided array is sorted according to the class\u0027s {@code compareTo} method.\n * @param array the array to check\n * @param \u003c T \u003e the datatype of the array to check, it must implement {@code Comparable}\n * @return whether the array is sorted\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3678",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(T[], java.util.Comparator\u003cT\u003e)",
    "snippet": "public static \u003cT\u003e boolean isSorted(final T[] array, final Comparator\u003cT\u003e comparator) {\n        if (comparator \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Comparator should not be null.\");\n        }\n\n        if (array \u003d\u003d null || array.length \u003c 2) {\n            return true;\n        }\n\n        T previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final T current \u003d array[i];\n            if (comparator.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3678,
    "end_line": 3698,
    "comment": "/** \n * \u003cp\u003eThis method checks whether the provided array is sorted according to the provided  {@code Comparator}.\n * @param array the array to check\n * @param comparator the {@code Comparator} to compare over\n * @param \u003c T \u003e the datatype of the array\n * @return whether the array is sorted\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3711",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(boolean[], boolean)",
    "snippet": "public static int lastIndexOf(final boolean[] array, final boolean valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 3711,
    "end_line": 3713,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) if {@code null} array input.\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3729",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(boolean[], boolean, int)",
    "snippet": "public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n        if (isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 3729,
    "end_line": 3744,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3756",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(byte[], byte)",
    "snippet": "public static int lastIndexOf(final byte[] array, final byte valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 3756,
    "end_line": 3758,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3774",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(byte[], byte, int)",
    "snippet": "public static int lastIndexOf(final byte[] array, final byte valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 3774,
    "end_line": 3789,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3802",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(char[], char)",
    "snippet": "public static int lastIndexOf(final char[] array, final char valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 3802,
    "end_line": 3804,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3821",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(char[], char, int)",
    "snippet": "public static int lastIndexOf(final char[] array, final char valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 3821,
    "end_line": 3836,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3848",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(double[], double)",
    "snippet": "public static int lastIndexOf(final double[] array, final double valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 3848,
    "end_line": 3850,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3865",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(double[], double, double)",
    "snippet": "public static int lastIndexOf(final double[] array, final double valueToFind, final double tolerance) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance);\n    }",
    "begin_line": 3865,
    "end_line": 3867,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within a given tolerance in the array. This method will return the index of the last value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param tolerance tolerance of the search\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3883",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(double[], double, int)",
    "snippet": "public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex) {\n        if (isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 3883,
    "end_line": 3898,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3917",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(double[], double, int, double)",
    "snippet": "public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex, final double tolerance) {\n        if (isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        final double min \u003d valueToFind - tolerance;\n        final double max \u003d valueToFind + tolerance;\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (array[i] \u003e\u003d min \u0026\u0026 array[i] \u003c\u003d max) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 3917,
    "end_line": 3934,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index. This method will return the index of the last value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @param tolerance  search for value within plus/minus this amount\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3947",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(float[], float)",
    "snippet": "public static int lastIndexOf(final float[] array, final float valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 3947,
    "end_line": 3949,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3965",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(float[], float, int)",
    "snippet": "public static int lastIndexOf(final float[] array, final float valueToFind, int startIndex) {\n        if (isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 3965,
    "end_line": 3980,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3992",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(int[], int)",
    "snippet": "public static int lastIndexOf(final int[] array, final int valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 3992,
    "end_line": 3994,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4010",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(int[], int, int)",
    "snippet": "public static int lastIndexOf(final int[] array, final int valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 4010,
    "end_line": 4025,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4037",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(long[], long)",
    "snippet": "public static int lastIndexOf(final long[] array, final long valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 4037,
    "end_line": 4039,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4055",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(long[], long, int)",
    "snippet": "public static int lastIndexOf(final long[] array, final long valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 4055,
    "end_line": 4070,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4082",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(java.lang.Object[], java.lang.Object)",
    "snippet": "public static int lastIndexOf(final Object[] array, final Object objectToFind) {\n        return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 4082,
    "end_line": 4084,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given object within the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param objectToFind  the object to find, may be {@code null}\n * @return the last index of the object within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4100",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(java.lang.Object[], java.lang.Object, int)",
    "snippet": "public static int lastIndexOf(final Object[] array, final Object objectToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        if (objectToFind \u003d\u003d null) {\n            for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n                if (array[i] \u003d\u003d null) {\n                    return i;\n                }\n            }\n        } else if (array.getClass().getComponentType().isInstance(objectToFind)) {\n            for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n                if (objectToFind.equals(array[i])) {\n                    return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 4100,
    "end_line": 4123,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given object in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param objectToFind  the object to find, may be {@code null}\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the object within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4135",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(short[], short)",
    "snippet": "public static int lastIndexOf(final short[] array, final short valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 4135,
    "end_line": 4137,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4153",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(short[], short, int)",
    "snippet": "public static int lastIndexOf(final short[] array, final short valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 4153,
    "end_line": 4168,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4183",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(boolean[])",
    "snippet": "public static boolean[] nullToEmpty(final boolean[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_BOOLEAN_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4183,
    "end_line": 4188,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4203",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Boolean[])",
    "snippet": "public static Boolean[] nullToEmpty(final Boolean[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_BOOLEAN_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4203,
    "end_line": 4208,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4223",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(byte[])",
    "snippet": "public static byte[] nullToEmpty(final byte[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4223,
    "end_line": 4228,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4243",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Byte[])",
    "snippet": "public static Byte[] nullToEmpty(final Byte[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_BYTE_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4243,
    "end_line": 4248,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4263",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(char[])",
    "snippet": "public static char[] nullToEmpty(final char[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4263,
    "end_line": 4268,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4283",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Character[])",
    "snippet": "public static Character[] nullToEmpty(final Character[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_CHARACTER_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4283,
    "end_line": 4288,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4303",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Class\u003c?\u003e[])",
    "snippet": "public static Class\u003c?\u003e[] nullToEmpty(final Class\u003c?\u003e[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_CLASS_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4303,
    "end_line": 4308,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4323",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(double[])",
    "snippet": "public static double[] nullToEmpty(final double[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_DOUBLE_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4323,
    "end_line": 4328,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4343",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Double[])",
    "snippet": "public static Double[] nullToEmpty(final Double[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_DOUBLE_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4343,
    "end_line": 4348,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4363",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(float[])",
    "snippet": "public static float[] nullToEmpty(final float[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_FLOAT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4363,
    "end_line": 4368,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4383",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Float[])",
    "snippet": "public static Float[] nullToEmpty(final Float[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_FLOAT_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4383,
    "end_line": 4388,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4403",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(int[])",
    "snippet": "public static int[] nullToEmpty(final int[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_INT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4403,
    "end_line": 4408,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4426",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Integer[])",
    "snippet": "public static Integer[] nullToEmpty(final Integer[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_INTEGER_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4426,
    "end_line": 4431,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4446",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(long[])",
    "snippet": "public static long[] nullToEmpty(final long[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_LONG_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4446,
    "end_line": 4451,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4466",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Long[])",
    "snippet": "public static Long[] nullToEmpty(final Long[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_LONG_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4466,
    "end_line": 4471,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4486",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Object[])",
    "snippet": "public static Object[] nullToEmpty(final Object[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4486,
    "end_line": 4491,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4506",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(short[])",
    "snippet": "public static short[] nullToEmpty(final short[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_SHORT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4506,
    "end_line": 4511,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4526",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Short[])",
    "snippet": "public static Short[] nullToEmpty(final Short[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_SHORT_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4526,
    "end_line": 4531,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4546",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.String[])",
    "snippet": "public static String[] nullToEmpty(final String[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_STRING_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4546,
    "end_line": 4551,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4568",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(T[], java.lang.Class\u003cT[]\u003e)",
    "snippet": "public static \u003cT\u003e T[] nullToEmpty(final T[] array, final Class\u003cT[]\u003e type) {\n        if (type \u003d\u003d null) {\n            throw new IllegalArgumentException(\"The type must not be null\");\n        }\n\n        if (array \u003d\u003d null) {\n            return type.cast(Array.newInstance(type.getComponentType(), 0));\n        }\n        return array;\n    }",
    "begin_line": 4568,
    "end_line": 4577,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\n * @param array  the array to check for {@code null} or empty\n * @param type   the class representation of the desired array\n * @param \u003c T \u003e  the class type\n * @return the same array, {@code public static} empty array if {@code null}\n * @throws IllegalArgumentException if the type argument is null\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4607",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(boolean[], int)",
    "snippet": "public static boolean[] remove(final boolean[] array, final int index) {\n        return (boolean[]) remove((Object) array, index);\n    }",
    "begin_line": 4607,
    "end_line": 4609,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.remove([true], 0)              \u003d [] ArrayUtils.remove([true, false], 0)       \u003d [false] ArrayUtils.remove([true, false], 1)       \u003d [true] ArrayUtils.remove([true, true, false], 1) \u003d [true, false] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4639",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(byte[], int)",
    "snippet": "public static byte[] remove(final byte[] array, final int index) {\n        return (byte[]) remove((Object) array, index);\n    }",
    "begin_line": 4639,
    "end_line": 4641,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.remove([1], 0)          \u003d [] ArrayUtils.remove([1, 0], 0)       \u003d [0] ArrayUtils.remove([1, 0], 1)       \u003d [1] ArrayUtils.remove([1, 0, 1], 1)    \u003d [1, 1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4671",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(char[], int)",
    "snippet": "public static char[] remove(final char[] array, final int index) {\n        return (char[]) remove((Object) array, index);\n    }",
    "begin_line": 4671,
    "end_line": 4673,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.remove([\u0027a\u0027], 0)           \u003d [] ArrayUtils.remove([\u0027a\u0027, \u0027b\u0027], 0)      \u003d [\u0027b\u0027] ArrayUtils.remove([\u0027a\u0027, \u0027b\u0027], 1)      \u003d [\u0027a\u0027] ArrayUtils.remove([\u0027a\u0027, \u0027b\u0027, \u0027c\u0027], 1) \u003d [\u0027a\u0027, \u0027c\u0027] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4703",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(double[], int)",
    "snippet": "public static double[] remove(final double[] array, final int index) {\n        return (double[]) remove((Object) array, index);\n    }",
    "begin_line": 4703,
    "end_line": 4705,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.remove([1.1], 0)           \u003d [] ArrayUtils.remove([2.5, 6.0], 0)      \u003d [6.0] ArrayUtils.remove([2.5, 6.0], 1)      \u003d [2.5] ArrayUtils.remove([2.5, 6.0, 3.8], 1) \u003d [2.5, 3.8] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4735",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(float[], int)",
    "snippet": "public static float[] remove(final float[] array, final int index) {\n        return (float[]) remove((Object) array, index);\n    }",
    "begin_line": 4735,
    "end_line": 4737,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.remove([1.1], 0)           \u003d [] ArrayUtils.remove([2.5, 6.0], 0)      \u003d [6.0] ArrayUtils.remove([2.5, 6.0], 1)      \u003d [2.5] ArrayUtils.remove([2.5, 6.0, 3.8], 1) \u003d [2.5, 3.8] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4767",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(int[], int)",
    "snippet": "public static int[] remove(final int[] array, final int index) {\n        return (int[]) remove((Object) array, index);\n    }",
    "begin_line": 4767,
    "end_line": 4769,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.remove([1], 0)         \u003d [] ArrayUtils.remove([2, 6], 0)      \u003d [6] ArrayUtils.remove([2, 6], 1)      \u003d [2] ArrayUtils.remove([2, 6, 3], 1)   \u003d [2, 3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4799",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(long[], int)",
    "snippet": "public static long[] remove(final long[] array, final int index) {\n        return (long[]) remove((Object) array, index);\n    }",
    "begin_line": 4799,
    "end_line": 4801,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.remove([1], 0)         \u003d [] ArrayUtils.remove([2, 6], 0)      \u003d [6] ArrayUtils.remove([2, 6], 1)      \u003d [2] ArrayUtils.remove([2, 6, 3], 1)   \u003d [2, 3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4824",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(java.lang.Object, int)",
    "snippet": "private static Object remove(final Object array, final int index) {\n        final int length \u003d getLength(array);\n        if (index \u003c 0 || index \u003e\u003d length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + length);\n        }\n\n        final Object result \u003d Array.newInstance(array.getClass().getComponentType(), length - 1);\n        System.arraycopy(array, 0, result, 0, index);\n        if (index \u003c length - 1) {\n            System.arraycopy(array, index + 1, result, index, length - index - 1);\n        }\n\n        return result;\n    }",
    "begin_line": 4824,
    "end_line": 4837,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4867",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(short[], int)",
    "snippet": "public static short[] remove(final short[] array, final int index) {\n        return (short[]) remove((Object) array, index);\n    }",
    "begin_line": 4867,
    "end_line": 4869,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.remove([1], 0)         \u003d [] ArrayUtils.remove([2, 6], 0)      \u003d [6] ArrayUtils.remove([2, 6], 1)      \u003d [2] ArrayUtils.remove([2, 6, 3], 1)   \u003d [2, 3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4901",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(T[], int)",
    "snippet": "@SuppressWarnings(\"unchecked\") remove(final T[] array, final int index) {\n        return (T[]) remove((Object) array, index);\n    }",
    "begin_line": 4901,
    "end_line": 4903,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.remove([\"a\"], 0)           \u003d [] ArrayUtils.remove([\"a\", \"b\"], 0)      \u003d [\"b\"] ArrayUtils.remove([\"a\", \"b\"], 1)      \u003d [\"a\"] ArrayUtils.remove([\"a\", \"b\", \"c\"], 1) \u003d [\"a\", \"c\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#4930",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(boolean[], int)",
    "snippet": "public static boolean[] removeAll(final boolean[] array, final int... indices) {\n        return (boolean[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 4930,
    "end_line": 4932,
    "comment": "/** \n * \u003cp\u003eRemoves the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003eThis method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.removeAll([true, false, true], 0, 2) \u003d [false] ArrayUtils.removeAll([true, false, true], 1, 2) \u003d [true] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#4963",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(byte[], int)",
    "snippet": "public static byte[] removeAll(final byte[] array, final int... indices) {\n        return (byte[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 4963,
    "end_line": 4965,
    "comment": "/** \n * \u003cp\u003eRemoves the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003eThis method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#4996",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(char[], int)",
    "snippet": "public static char[] removeAll(final char[] array, final int... indices) {\n        return (char[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 4996,
    "end_line": 4998,
    "comment": "/** \n * \u003cp\u003eRemoves the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003eThis method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5029",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(double[], int)",
    "snippet": "public static double[] removeAll(final double[] array, final int... indices) {\n        return (double[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5029,
    "end_line": 5031,
    "comment": "/** \n * \u003cp\u003eRemoves the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003eThis method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5062",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(float[], int)",
    "snippet": "public static float[] removeAll(final float[] array, final int... indices) {\n        return (float[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5062,
    "end_line": 5064,
    "comment": "/** \n * \u003cp\u003eRemoves the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003eThis method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5095",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(int[], int)",
    "snippet": "public static int[] removeAll(final int[] array, final int... indices) {\n        return (int[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5095,
    "end_line": 5097,
    "comment": "/** \n * \u003cp\u003eRemoves the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003eThis method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5128",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(long[], int)",
    "snippet": "public static long[] removeAll(final long[] array, final int... indices) {\n        return (long[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5128,
    "end_line": 5130,
    "comment": "/** \n * \u003cp\u003eRemoves the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003eThis method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5141",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(java.lang.Object, java.util.BitSet)",
    "snippet": " removeAll(final Object array, final BitSet indices) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n\n        final int srcLength \u003d getLength(array);\n        // No need to check maxIndex here, because method only currently called from removeElements()\n        // which guarantee to generate on;y valid bit entries.\n//        final int maxIndex \u003d indices.length();\n//        if (maxIndex \u003e srcLength) {\n//            throw new IndexOutOfBoundsException(\"Index: \" + (maxIndex-1) + \", Length: \" + srcLength);\n//        }\n        final int removals \u003d indices.cardinality(); // true bits are items to remove\n        final Object result \u003d Array.newInstance(array.getClass().getComponentType(), srcLength - removals);\n        int srcIndex \u003d 0;\n        int destIndex \u003d 0;\n        int count;\n        int set;\n        while ((set \u003d indices.nextSetBit(srcIndex)) !\u003d -1) {\n            count \u003d set - srcIndex;\n            if (count \u003e 0) {\n                System.arraycopy(array, srcIndex, result, destIndex, count);\n                destIndex +\u003d count;\n            }\n            srcIndex \u003d indices.nextClearBit(set);\n        }\n        count \u003d srcLength - srcIndex;\n        if (count \u003e 0) {\n            System.arraycopy(array, srcIndex, result, destIndex, count);\n        }\n        return result;\n    }",
    "begin_line": 5141,
    "end_line": 5172,
    "comment": "/** \n * Removes multiple array elements specified by indices.\n * @param array source\n * @param indices to remove\n * @return new array of same type minus elements specified by the set bits in {@code indices}\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5182",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(java.lang.Object, int)",
    "snippet": " removeAll(final Object array, final int... indices) {\n        final int length \u003d getLength(array);\n        int diff \u003d 0; // number of distinct indexes, i.e. number of entries that will be removed\n        final int[] clonedIndices \u003d clone(indices);\n        Arrays.sort(clonedIndices);\n\n        // identify length of result array\n        if (isNotEmpty(clonedIndices)) {\n            int i \u003d clonedIndices.length;\n            int prevIndex \u003d length;\n            while (--i \u003e\u003d 0) {\n                final int index \u003d clonedIndices[i];\n                if (index \u003c 0 || index \u003e\u003d length) {\n                    throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + length);\n                }\n                if (index \u003e\u003d prevIndex) {\n                    continue;\n                }\n                diff++;\n                prevIndex \u003d index;\n            }\n        }\n\n        // create result array\n        final Object result \u003d Array.newInstance(array.getClass().getComponentType(), length - diff);\n        if (diff \u003c length) {\n            int end \u003d length; // index just after last copy\n            int dest \u003d length - diff; // number of entries so far not copied\n            for (int i \u003d clonedIndices.length - 1; i \u003e\u003d 0; i--) {\n                final int index \u003d clonedIndices[i];\n                if (end - index \u003e 1) { // same as (cp \u003e 0)\n                    final int cp \u003d end - index - 1;\n                    dest -\u003d cp;\n                    System.arraycopy(array, index + 1, result, dest, cp);\n                    // Afer this copy, we still have room for dest items.\n                }\n                end \u003d index;\n            }\n            if (end \u003e 0) {\n                System.arraycopy(array, 0, result, 0, end);\n            }\n        }\n        return result;\n    }",
    "begin_line": 5182,
    "end_line": 5225,
    "comment": "/** \n * Removes multiple array elements specified by index.\n * @param array source\n * @param indices to remove\n * @return new array of same type minus elements specified by unique values of {@code indices}\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5256",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(short[], int)",
    "snippet": "public static short[] removeAll(final short[] array, final int... indices) {\n        return (short[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5256,
    "end_line": 5258,
    "comment": "/** \n * \u003cp\u003eRemoves the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003eThis method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5287",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(T[], int)",
    "snippet": "@SuppressWarnings(\"unchecked\") removeAll(final T[] array, final int... indices) {\n        return (T[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5287,
    "end_line": 5289,
    "comment": "/** \n * \u003cp\u003eRemoves the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003eThis method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.removeAll([\"a\", \"b\", \"c\"], 0, 2) \u003d [\"b\"] ArrayUtils.removeAll([\"a\", \"b\", \"c\"], 1, 2) \u003d [\"a\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5306",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(boolean[], boolean)",
    "snippet": "public static boolean[] removeAllOccurences(final boolean[] array, final boolean element) {\n        return (boolean[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5306,
    "end_line": 5308,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified boolean array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5325",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(byte[], byte)",
    "snippet": "public static byte[] removeAllOccurences(final byte[] array, final byte element) {\n        return (byte[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5325,
    "end_line": 5327,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified byte array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5344",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(char[], char)",
    "snippet": "public static char[] removeAllOccurences(final char[] array, final char element) {\n        return (char[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5344,
    "end_line": 5346,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified char array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5363",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(double[], double)",
    "snippet": "public static double[] removeAllOccurences(final double[] array, final double element) {\n        return (double[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5363,
    "end_line": 5365,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified double array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5382",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(float[], float)",
    "snippet": "public static float[] removeAllOccurences(final float[] array, final float element) {\n        return (float[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5382,
    "end_line": 5384,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified float array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5401",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(int[], int)",
    "snippet": "public static int[] removeAllOccurences(final int[] array, final int element) {\n        return (int[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5401,
    "end_line": 5403,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified int array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5420",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(long[], long)",
    "snippet": "public static long[] removeAllOccurences(final long[] array, final long element) {\n        return (long[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5420,
    "end_line": 5422,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified long array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5439",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(short[], short)",
    "snippet": "public static short[] removeAllOccurences(final short[] array, final short element) {\n        return (short[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5439,
    "end_line": 5441,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified short array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5459",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(T[], T)",
    "snippet": "public static \u003cT\u003e T[] removeAllOccurences(final T[] array, final T element) {\n        return (T[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5459,
    "end_line": 5461,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param \u003c T \u003e the type of object in the array\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5488",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(boolean[], boolean)",
    "snippet": "public static boolean[] removeElement(final boolean[] array, final boolean element) {\n        final int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 5488,
    "end_line": 5494,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElement(null, true)                \u003d null ArrayUtils.removeElement([], true)                  \u003d [] ArrayUtils.removeElement([true], false)             \u003d [true] ArrayUtils.removeElement([true, false], false)      \u003d [true] ArrayUtils.removeElement([true, false, true], true) \u003d [false, true] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5521",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(byte[], byte)",
    "snippet": "public static byte[] removeElement(final byte[] array, final byte element) {\n        final int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 5521,
    "end_line": 5527,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElement(null, 1)        \u003d null ArrayUtils.removeElement([], 1)          \u003d [] ArrayUtils.removeElement([1], 0)         \u003d [1] ArrayUtils.removeElement([1, 0], 0)      \u003d [1] ArrayUtils.removeElement([1, 0, 1], 1)   \u003d [0, 1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5554",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(char[], char)",
    "snippet": "public static char[] removeElement(final char[] array, final char element) {\n        final int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 5554,
    "end_line": 5560,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElement(null, \u0027a\u0027)            \u003d null ArrayUtils.removeElement([], \u0027a\u0027)              \u003d [] ArrayUtils.removeElement([\u0027a\u0027], \u0027b\u0027)           \u003d [\u0027a\u0027] ArrayUtils.removeElement([\u0027a\u0027, \u0027b\u0027], \u0027a\u0027)      \u003d [\u0027b\u0027] ArrayUtils.removeElement([\u0027a\u0027, \u0027b\u0027, \u0027a\u0027], \u0027a\u0027) \u003d [\u0027b\u0027, \u0027a\u0027] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5587",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(double[], double)",
    "snippet": "public static double[] removeElement(final double[] array, final double element) {\n        final int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 5587,
    "end_line": 5593,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElement(null, 1.1)            \u003d null ArrayUtils.removeElement([], 1.1)              \u003d [] ArrayUtils.removeElement([1.1], 1.2)           \u003d [1.1] ArrayUtils.removeElement([1.1, 2.3], 1.1)      \u003d [2.3] ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) \u003d [2.3, 1.1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5620",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(float[], float)",
    "snippet": "public static float[] removeElement(final float[] array, final float element) {\n        final int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 5620,
    "end_line": 5626,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElement(null, 1.1)            \u003d null ArrayUtils.removeElement([], 1.1)              \u003d [] ArrayUtils.removeElement([1.1], 1.2)           \u003d [1.1] ArrayUtils.removeElement([1.1, 2.3], 1.1)      \u003d [2.3] ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) \u003d [2.3, 1.1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5653",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(int[], int)",
    "snippet": "public static int[] removeElement(final int[] array, final int element) {\n        final int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 5653,
    "end_line": 5659,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElement(null, 1)      \u003d null ArrayUtils.removeElement([], 1)        \u003d [] ArrayUtils.removeElement([1], 2)       \u003d [1] ArrayUtils.removeElement([1, 3], 1)    \u003d [3] ArrayUtils.removeElement([1, 3, 1], 1) \u003d [3, 1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5686",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(long[], long)",
    "snippet": "public static long[] removeElement(final long[] array, final long element) {\n        final int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 5686,
    "end_line": 5692,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElement(null, 1)      \u003d null ArrayUtils.removeElement([], 1)        \u003d [] ArrayUtils.removeElement([1], 2)       \u003d [1] ArrayUtils.removeElement([1, 3], 1)    \u003d [3] ArrayUtils.removeElement([1, 3, 1], 1) \u003d [3, 1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5719",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(short[], short)",
    "snippet": "public static short[] removeElement(final short[] array, final short element) {\n        final int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 5719,
    "end_line": 5725,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElement(null, 1)      \u003d null ArrayUtils.removeElement([], 1)        \u003d [] ArrayUtils.removeElement([1], 2)       \u003d [1] ArrayUtils.removeElement([1, 3], 1)    \u003d [3] ArrayUtils.removeElement([1, 3, 1], 1) \u003d [3, 1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5753",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(T[], java.lang.Object)",
    "snippet": "public static \u003cT\u003e T[] removeElement(final T[] array, final Object element) {\n        final int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 5753,
    "end_line": 5759,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElement(null, \"a\")            \u003d null ArrayUtils.removeElement([], \"a\")              \u003d [] ArrayUtils.removeElement([\"a\"], \"b\")           \u003d [\"a\"] ArrayUtils.removeElement([\"a\", \"b\"], \"a\")      \u003d [\"b\"] ArrayUtils.removeElement([\"a\", \"b\", \"a\"], \"a\") \u003d [\"b\", \"a\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#5788",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(boolean[], boolean)",
    "snippet": "public static boolean[] removeElements(final boolean[] array, final boolean... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cBoolean, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(2); // only two possible values here\n        for (final boolean v : values) {\n            final Boolean boxed \u003d Boolean.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final boolean key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (boolean[]) removeAll(array, toRemove);\n    }",
    "begin_line": 5788,
    "end_line": 5814,
    "comment": "/** \n * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003eThis method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElements(null, true, false)               \u003d null ArrayUtils.removeElements([], true, false)                 \u003d [] ArrayUtils.removeElements([true], false, false)            \u003d [true] ArrayUtils.removeElements([true, false], true, true)       \u003d [false] ArrayUtils.removeElements([true, false, true], true)       \u003d [false, true] ArrayUtils.removeElements([true, false, true], true, true) \u003d [false] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#5843",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(byte[], byte)",
    "snippet": "public static byte[] removeElements(final byte[] array, final byte... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final Map\u003cByte, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final byte v : values) {\n            final Byte boxed \u003d Byte.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final byte key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (byte[]) removeAll(array, toRemove);\n    }",
    "begin_line": 5843,
    "end_line": 5869,
    "comment": "/** \n * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003eThis method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#5898",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(char[], char)",
    "snippet": "public static char[] removeElements(final char[] array, final char... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cCharacter, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final char v : values) {\n            final Character boxed \u003d Character.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final char key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (char[]) removeAll(array, toRemove);\n    }",
    "begin_line": 5898,
    "end_line": 5924,
    "comment": "/** \n * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003eThis method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#5953",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(double[], double)",
    "snippet": "public static double[] removeElements(final double[] array, final double... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cDouble, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final double v : values) {\n            final Double boxed \u003d Double.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final double key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (double[]) removeAll(array, toRemove);\n    }",
    "begin_line": 5953,
    "end_line": 5979,
    "comment": "/** \n * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003eThis method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6008",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(float[], float)",
    "snippet": "public static float[] removeElements(final float[] array, final float... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cFloat, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final float v : values) {\n            final Float boxed \u003d Float.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final float key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (float[]) removeAll(array, toRemove);\n    }",
    "begin_line": 6008,
    "end_line": 6034,
    "comment": "/** \n * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003eThis method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6063",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(int[], int)",
    "snippet": "public static int[] removeElements(final int[] array, final int... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cInteger, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final int v : values) {\n            final Integer boxed \u003d Integer.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final int key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (int[]) removeAll(array, toRemove);\n    }",
    "begin_line": 6063,
    "end_line": 6089,
    "comment": "/** \n * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003eThis method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6118",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(long[], long)",
    "snippet": "public static long[] removeElements(final long[] array, final long... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cLong, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final long v : values) {\n            final Long boxed \u003d Long.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final long key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (long[]) removeAll(array, toRemove);\n    }",
    "begin_line": 6118,
    "end_line": 6144,
    "comment": "/** \n * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003eThis method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6173",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(short[], short)",
    "snippet": "public static short[] removeElements(final short[] array, final short... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cShort, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final short v : values) {\n            final Short boxed \u003d Short.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final short key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (short[]) removeAll(array, toRemove);\n    }",
    "begin_line": 6173,
    "end_line": 6199,
    "comment": "/** \n * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003eThis method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6230",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(T[], T)",
    "snippet": "@SafeVarargs\n    public static \u003cT\u003e T[] removeElements(final T[] array, final T... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cT, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final T v : values) {\n            final MutableInt count \u003d occurrences.get(v);\n            if (count \u003d\u003d null) {\n                occurrences.put(v, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final T key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        @SuppressWarnings(\"unchecked\") // removeAll() always creates an array of the same type as its input\n        final T[] result \u003d (T[]) removeAll(array, toRemove);\n        return result;\n    }",
    "begin_line": 6230,
    "end_line": 6257,
    "comment": "/** \n * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003eThis method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElements(null, \"a\", \"b\")            \u003d null ArrayUtils.removeElements([], \"a\", \"b\")              \u003d [] ArrayUtils.removeElements([\"a\"], \"b\", \"c\")           \u003d [\"a\"] ArrayUtils.removeElements([\"a\", \"b\"], \"a\", \"c\")      \u003d [\"b\"] ArrayUtils.removeElements([\"a\", \"b\", \"a\"], \"a\")      \u003d [\"b\", \"a\"] ArrayUtils.removeElements([\"a\", \"b\", \"a\"], \"a\", \"a\") \u003d [\"b\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6266",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(boolean[])",
    "snippet": "public static void reverse(final boolean[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        reverse(array, 0, array.length);\n    }",
    "begin_line": 6266,
    "end_line": 6271,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array. \u003cp\u003eThis method does nothing for a  {@code null} input array.\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6290",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(boolean[], int, int)",
    "snippet": "public static void reverse(final boolean[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d startIndexInclusive \u003c 0 ? 0 : startIndexInclusive;\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        boolean tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6290,
    "end_line": 6304,
    "comment": "/** \n * \u003cp\u003e Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6313",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(byte[])",
    "snippet": "public static void reverse(final byte[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        reverse(array, 0, array.length);\n    }",
    "begin_line": 6313,
    "end_line": 6318,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array. \u003cp\u003eThis method does nothing for a  {@code null} input array.\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6337",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(byte[], int, int)",
    "snippet": "public static void reverse(final byte[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d startIndexInclusive \u003c 0 ? 0 : startIndexInclusive;\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        byte tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6337,
    "end_line": 6351,
    "comment": "/** \n * \u003cp\u003e Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6360",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(char[])",
    "snippet": "public static void reverse(final char[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        reverse(array, 0, array.length);\n    }",
    "begin_line": 6360,
    "end_line": 6365,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array. \u003cp\u003eThis method does nothing for a  {@code null} input array.\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6384",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(char[], int, int)",
    "snippet": "public static void reverse(final char[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d startIndexInclusive \u003c 0 ? 0 : startIndexInclusive;\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        char tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6384,
    "end_line": 6398,
    "comment": "/** \n * \u003cp\u003e Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6407",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(double[])",
    "snippet": "public static void reverse(final double[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        reverse(array, 0, array.length);\n    }",
    "begin_line": 6407,
    "end_line": 6412,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array. \u003cp\u003eThis method does nothing for a  {@code null} input array.\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6431",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(double[], int, int)",
    "snippet": "public static void reverse(final double[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d startIndexInclusive \u003c 0 ? 0 : startIndexInclusive;\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        double tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6431,
    "end_line": 6445,
    "comment": "/** \n * \u003cp\u003e Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6454",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(float[])",
    "snippet": "public static void reverse(final float[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        reverse(array, 0, array.length);\n    }",
    "begin_line": 6454,
    "end_line": 6459,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array. \u003cp\u003eThis method does nothing for a  {@code null} input array.\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6478",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(float[], int, int)",
    "snippet": "public static void reverse(final float[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d startIndexInclusive \u003c 0 ? 0 : startIndexInclusive;\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        float tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6478,
    "end_line": 6492,
    "comment": "/** \n * \u003cp\u003e Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6501",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(int[])",
    "snippet": "public static void reverse(final int[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        reverse(array, 0, array.length);\n    }",
    "begin_line": 6501,
    "end_line": 6506,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array. \u003cp\u003eThis method does nothing for a  {@code null} input array.\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6525",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(int[], int, int)",
    "snippet": "public static void reverse(final int[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d startIndexInclusive \u003c 0 ? 0 : startIndexInclusive;\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        int tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6525,
    "end_line": 6539,
    "comment": "/** \n * \u003cp\u003e Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6548",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(long[])",
    "snippet": "public static void reverse(final long[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        reverse(array, 0, array.length);\n    }",
    "begin_line": 6548,
    "end_line": 6553,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array. \u003cp\u003eThis method does nothing for a  {@code null} input array.\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6572",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(long[], int, int)",
    "snippet": "public static void reverse(final long[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d startIndexInclusive \u003c 0 ? 0 : startIndexInclusive;\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        long tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6572,
    "end_line": 6586,
    "comment": "/** \n * \u003cp\u003e Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6599",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(java.lang.Object[])",
    "snippet": "public static void reverse(final Object[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        reverse(array, 0, array.length);\n    }",
    "begin_line": 6599,
    "end_line": 6604,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. \u003cp\u003eThis method does nothing for a  {@code null} input array.\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6623",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(java.lang.Object[], int, int)",
    "snippet": "public static void reverse(final Object[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d startIndexInclusive \u003c 0 ? 0 : startIndexInclusive;\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        Object tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6623,
    "end_line": 6637,
    "comment": "/** \n * \u003cp\u003e Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Under value (\u0026lt;0) is promoted to 0, over value (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Under value (\u0026lt; start index) results in no change. Over value (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6646",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(short[])",
    "snippet": "public static void reverse(final short[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        reverse(array, 0, array.length);\n    }",
    "begin_line": 6646,
    "end_line": 6651,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array. \u003cp\u003eThis method does nothing for a  {@code null} input array.\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6670",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(short[], int, int)",
    "snippet": "public static void reverse(final short[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d startIndexInclusive \u003c 0 ? 0 : startIndexInclusive;\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        short tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6670,
    "end_line": 6684,
    "comment": "/** \n * \u003cp\u003e Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#6698",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(boolean[], int)",
    "snippet": "public static void shift(final boolean[] array, final int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        shift(array, 0, array.length, offset);\n    }",
    "begin_line": 6698,
    "end_line": 6703,
    "comment": "/** \n * Shifts the order of the given boolean array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#6724",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(boolean[], int, int, int)",
    "snippet": "public static void shift(final boolean[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        if (startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int n_offset \u003d n - offset;\n\n            if (offset \u003e n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - n_offset,  n_offset);\n                n \u003d offset;\n                offset -\u003d n_offset;\n            } else if (offset \u003c n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d n_offset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 6724,
    "end_line": 6763,
    "comment": "/** \n * Shifts the order of a series of elements in the given boolean array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#6777",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(byte[], int)",
    "snippet": "public static void shift(final byte[] array, final int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        shift(array, 0, array.length, offset);\n    }",
    "begin_line": 6777,
    "end_line": 6782,
    "comment": "/** \n * Shifts the order of the given byte array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#6803",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(byte[], int, int, int)",
    "snippet": "public static void shift(final byte[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        if (startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int n_offset \u003d n - offset;\n\n            if (offset \u003e n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - n_offset,  n_offset);\n                n \u003d offset;\n                offset -\u003d n_offset;\n            } else if (offset \u003c n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d n_offset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 6803,
    "end_line": 6842,
    "comment": "/** \n * Shifts the order of a series of elements in the given byte array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#6856",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(char[], int)",
    "snippet": "public static void shift(final char[] array, final int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        shift(array, 0, array.length, offset);\n    }",
    "begin_line": 6856,
    "end_line": 6861,
    "comment": "/** \n * Shifts the order of the given char array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#6882",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(char[], int, int, int)",
    "snippet": "public static void shift(final char[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        if (startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int n_offset \u003d n - offset;\n\n            if (offset \u003e n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - n_offset,  n_offset);\n                n \u003d offset;\n                offset -\u003d n_offset;\n            } else if (offset \u003c n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d n_offset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 6882,
    "end_line": 6921,
    "comment": "/** \n * Shifts the order of a series of elements in the given char array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#6935",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(double[], int)",
    "snippet": "public static void shift(final double[] array, final int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        shift(array, 0, array.length, offset);\n    }",
    "begin_line": 6935,
    "end_line": 6940,
    "comment": "/** \n * Shifts the order of the given double array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#6961",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(double[], int, int, int)",
    "snippet": "public static void shift(final double[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        if (startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int n_offset \u003d n - offset;\n\n            if (offset \u003e n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - n_offset,  n_offset);\n                n \u003d offset;\n                offset -\u003d n_offset;\n            } else if (offset \u003c n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d n_offset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 6961,
    "end_line": 7000,
    "comment": "/** \n * Shifts the order of a series of elements in the given double array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7014",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(float[], int)",
    "snippet": "public static void shift(final float[] array, final int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        shift(array, 0, array.length, offset);\n    }",
    "begin_line": 7014,
    "end_line": 7019,
    "comment": "/** \n * Shifts the order of the given float array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7040",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(float[], int, int, int)",
    "snippet": "public static void shift(final float[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        if (startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int n_offset \u003d n - offset;\n\n            if (offset \u003e n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - n_offset,  n_offset);\n                n \u003d offset;\n                offset -\u003d n_offset;\n            } else if (offset \u003c n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d n_offset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7040,
    "end_line": 7079,
    "comment": "/** \n * Shifts the order of a series of elements in the given float array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7093",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(int[], int)",
    "snippet": "public static void shift(final int[] array, final int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        shift(array, 0, array.length, offset);\n    }",
    "begin_line": 7093,
    "end_line": 7098,
    "comment": "/** \n * Shifts the order of the given int array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7119",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(int[], int, int, int)",
    "snippet": "public static void shift(final int[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        if (startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int n_offset \u003d n - offset;\n\n            if (offset \u003e n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - n_offset,  n_offset);\n                n \u003d offset;\n                offset -\u003d n_offset;\n            } else if (offset \u003c n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d n_offset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7119,
    "end_line": 7158,
    "comment": "/** \n * Shifts the order of a series of elements in the given int array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7172",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(long[], int)",
    "snippet": "public static void shift(final long[] array, final int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        shift(array, 0, array.length, offset);\n    }",
    "begin_line": 7172,
    "end_line": 7177,
    "comment": "/** \n * Shifts the order of the given long array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7198",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(long[], int, int, int)",
    "snippet": "public static void shift(final long[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        if (startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int n_offset \u003d n - offset;\n\n            if (offset \u003e n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - n_offset,  n_offset);\n                n \u003d offset;\n                offset -\u003d n_offset;\n            } else if (offset \u003c n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d n_offset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7198,
    "end_line": 7237,
    "comment": "/** \n * Shifts the order of a series of elements in the given long array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7253",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(java.lang.Object[], int)",
    "snippet": "public static void shift(final Object[] array, final int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        shift(array, 0, array.length, offset);\n    }",
    "begin_line": 7253,
    "end_line": 7258,
    "comment": "/** \n * Shifts the order of the given array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7279",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(java.lang.Object[], int, int, int)",
    "snippet": "public static void shift(final Object[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        if (startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int n_offset \u003d n - offset;\n\n            if (offset \u003e n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - n_offset,  n_offset);\n                n \u003d offset;\n                offset -\u003d n_offset;\n            } else if (offset \u003c n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d n_offset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7279,
    "end_line": 7318,
    "comment": "/** \n * Shifts the order of a series of elements in the given array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7332",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(short[], int)",
    "snippet": "public static void shift(final short[] array, final int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        shift(array, 0, array.length, offset);\n    }",
    "begin_line": 7332,
    "end_line": 7337,
    "comment": "/** \n * Shifts the order of the given short array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7358",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(short[], int, int, int)",
    "snippet": "public static void shift(final short[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        if (startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int n_offset \u003d n - offset;\n\n            if (offset \u003e n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - n_offset,  n_offset);\n                n \u003d offset;\n                offset -\u003d n_offset;\n            } else if (offset \u003c n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d n_offset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7358,
    "end_line": 7397,
    "comment": "/** \n * Shifts the order of a series of elements in the given short array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7406",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(boolean[])",
    "snippet": "public static void shuffle(final boolean[] array) {\n        shuffle(array, new Random());\n    }",
    "begin_line": 7406,
    "end_line": 7408,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7418",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(boolean[], java.util.Random)",
    "snippet": "public static void shuffle(final boolean[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7418,
    "end_line": 7422,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7431",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(byte[])",
    "snippet": "public static void shuffle(final byte[] array) {\n        shuffle(array, new Random());\n    }",
    "begin_line": 7431,
    "end_line": 7433,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7443",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(byte[], java.util.Random)",
    "snippet": "public static void shuffle(final byte[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7443,
    "end_line": 7447,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7456",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(char[])",
    "snippet": "public static void shuffle(final char[] array) {\n        shuffle(array, new Random());\n    }",
    "begin_line": 7456,
    "end_line": 7458,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7468",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(char[], java.util.Random)",
    "snippet": "public static void shuffle(final char[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7468,
    "end_line": 7472,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7481",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(double[])",
    "snippet": "public static void shuffle(final double[] array) {\n        shuffle(array, new Random());\n    }",
    "begin_line": 7481,
    "end_line": 7483,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7493",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(double[], java.util.Random)",
    "snippet": "public static void shuffle(final double[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7493,
    "end_line": 7497,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7506",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(float[])",
    "snippet": "public static void shuffle(final float[] array) {\n        shuffle(array, new Random());\n    }",
    "begin_line": 7506,
    "end_line": 7508,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7518",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(float[], java.util.Random)",
    "snippet": "public static void shuffle(final float[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7518,
    "end_line": 7522,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7531",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(int[])",
    "snippet": "public static void shuffle(final int[] array) {\n        shuffle(array, new Random());\n    }",
    "begin_line": 7531,
    "end_line": 7533,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7543",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(int[], java.util.Random)",
    "snippet": "public static void shuffle(final int[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7543,
    "end_line": 7547,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7556",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(long[])",
    "snippet": "public static void shuffle(final long[] array) {\n        shuffle(array, new Random());\n    }",
    "begin_line": 7556,
    "end_line": 7558,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7568",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(long[], java.util.Random)",
    "snippet": "public static void shuffle(final long[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7568,
    "end_line": 7572,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7581",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(java.lang.Object[])",
    "snippet": "public static void shuffle(final Object[] array) {\n        shuffle(array, new Random());\n    }",
    "begin_line": 7581,
    "end_line": 7583,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7593",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(java.lang.Object[], java.util.Random)",
    "snippet": "public static void shuffle(final Object[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7593,
    "end_line": 7597,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7606",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(short[])",
    "snippet": "public static void shuffle(final short[] array) {\n        shuffle(array, new Random());\n    }",
    "begin_line": 7606,
    "end_line": 7608,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7618",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(short[], java.util.Random)",
    "snippet": "public static void shuffle(final short[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7618,
    "end_line": 7622,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#7644",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(boolean[], int, int)",
    "snippet": "public static boolean[] subarray(final boolean[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_BOOLEAN_ARRAY;\n        }\n\n        final boolean[] subarray \u003d new boolean[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 7644,
    "end_line": 7662,
    "comment": "/** \n * \u003cp\u003eProduces a new  {@code boolean} array containing the elementsbetween the start and end indices. \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(boolean[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#7684",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(byte[], int, int)",
    "snippet": "public static byte[] subarray(final byte[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n\n        final byte[] subarray \u003d new byte[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 7684,
    "end_line": 7702,
    "comment": "/** \n * \u003cp\u003eProduces a new  {@code byte} array containing the elementsbetween the start and end indices. \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(byte[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#7724",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(char[], int, int)",
    "snippet": "public static char[] subarray(final char[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n\n        final char[] subarray \u003d new char[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 7724,
    "end_line": 7742,
    "comment": "/** \n * \u003cp\u003eProduces a new  {@code char} array containing the elementsbetween the start and end indices. \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(char[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#7764",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(double[], int, int)",
    "snippet": "public static double[] subarray(final double[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_DOUBLE_ARRAY;\n        }\n\n        final double[] subarray \u003d new double[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 7764,
    "end_line": 7782,
    "comment": "/** \n * \u003cp\u003eProduces a new  {@code double} array containing the elementsbetween the start and end indices. \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(double[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#7804",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(float[], int, int)",
    "snippet": "public static float[] subarray(final float[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_FLOAT_ARRAY;\n        }\n\n        final float[] subarray \u003d new float[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 7804,
    "end_line": 7822,
    "comment": "/** \n * \u003cp\u003eProduces a new  {@code float} array containing the elementsbetween the start and end indices. \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(float[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#7844",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(int[], int, int)",
    "snippet": "public static int[] subarray(final int[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_INT_ARRAY;\n        }\n\n        final int[] subarray \u003d new int[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 7844,
    "end_line": 7862,
    "comment": "/** \n * \u003cp\u003eProduces a new  {@code int} array containing the elementsbetween the start and end indices. \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(int[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#7884",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(long[], int, int)",
    "snippet": "public static long[] subarray(final long[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_LONG_ARRAY;\n        }\n\n        final long[] subarray \u003d new long[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 7884,
    "end_line": 7902,
    "comment": "/** \n * \u003cp\u003eProduces a new  {@code long} array containing the elementsbetween the start and end indices. \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(long[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#7924",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(short[], int, int)",
    "snippet": "public static short[] subarray(final short[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_SHORT_ARRAY;\n        }\n\n        final short[] subarray \u003d new short[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 7924,
    "end_line": 7942,
    "comment": "/** \n * \u003cp\u003eProduces a new  {@code short} array containing the elementsbetween the start and end indices. \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(short[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#7975",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(T[], int, int)",
    "snippet": "public static \u003cT\u003e T[] subarray(final T[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        final Class\u003c?\u003e type \u003d array.getClass().getComponentType();\n        if (newSize \u003c\u003d 0) {\n            @SuppressWarnings(\"unchecked\") // OK, because array is of type T\n            final T[] emptyArray \u003d (T[]) Array.newInstance(type, 0);\n            return emptyArray;\n        }\n        @SuppressWarnings(\"unchecked\") // OK, because array is of type T\n        final\n        T[] subarray \u003d (T[]) Array.newInstance(type, newSize);\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 7975,
    "end_line": 7997,
    "comment": "/** \n * \u003cp\u003eProduces a new array containing the elements between the start and end indices. \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output. \u003cp\u003eThe component type of the subarray is always the same as that of the input array. Thus, if the input is an array of type {@code Date}, the following usage is envisaged: \u003cpre\u003e Date[] someDates \u003d (Date[]) ArrayUtils.subarray(allDates, 2, 5); \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(Object[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8020",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(boolean[], int, int)",
    "snippet": "public static void swap(final boolean[] array, final int offset1, final int offset2) {\n        if (isEmpty(array)) {\n            return;\n        }\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8020,
    "end_line": 8025,
    "comment": "/** \n * Swaps two elements in the given boolean array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8051",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(boolean[], int, int, int)",
    "snippet": "public static void swap(final boolean[] array, int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final boolean aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8051,
    "end_line": 8067,
    "comment": "/** \n * Swaps a series of elements in the given boolean array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([true, false, true, false], 0, 2, 1) -\u0026gt; [true, false, true, false]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true, false], 0, 0, 1) -\u0026gt; [true, false, true, false]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true, false], 0, 2, 2) -\u0026gt; [true, false, true, false]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true, false], -3, 2, 2) -\u0026gt; [true, false, true, false]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true, false], 0, 3, 3) -\u0026gt; [false, false, true, true]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8091",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(byte[], int, int)",
    "snippet": "public static void swap(final byte[] array, final int offset1, final int offset2) {\n        if (isEmpty(array)) {\n            return;\n        }\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8091,
    "end_line": 8096,
    "comment": "/** \n * Swaps two elements in the given byte array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8122",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(byte[], int, int, int)",
    "snippet": "public static void swap(final byte[] array, int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final byte aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8122,
    "end_line": 8138,
    "comment": "/** \n * Swaps a series of elements in the given byte array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8161",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(char[], int, int)",
    "snippet": "public static void swap(final char[] array, final int offset1, final int offset2) {\n        if (isEmpty(array)) {\n            return;\n        }\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8161,
    "end_line": 8166,
    "comment": "/** \n * Swaps two elements in the given char array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8192",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(char[], int, int, int)",
    "snippet": "public static void swap(final char[] array, int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final char aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8192,
    "end_line": 8208,
    "comment": "/** \n * Swaps a series of elements in the given char array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8231",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(double[], int, int)",
    "snippet": "public static void swap(final double[] array, final int offset1, final int offset2) {\n        if (isEmpty(array)) {\n            return;\n        }\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8231,
    "end_line": 8236,
    "comment": "/** \n * Swaps two elements in the given double array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8262",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(double[], int, int, int)",
    "snippet": "public static void swap(final double[] array,  int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final double aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8262,
    "end_line": 8278,
    "comment": "/** \n * Swaps a series of elements in the given double array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8301",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(float[], int, int)",
    "snippet": "public static void swap(final float[] array, final int offset1, final int offset2) {\n        if (isEmpty(array)) {\n            return;\n        }\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8301,
    "end_line": 8306,
    "comment": "/** \n * Swaps two elements in the given float array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8332",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(float[], int, int, int)",
    "snippet": "public static void swap(final float[] array, int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final float aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n\n    }",
    "begin_line": 8332,
    "end_line": 8349,
    "comment": "/** \n * Swaps a series of elements in the given float array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8372",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(int[], int, int)",
    "snippet": "public static void swap(final int[] array, final int offset1, final int offset2) {\n        if (isEmpty(array)) {\n            return;\n        }\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8372,
    "end_line": 8377,
    "comment": "/** \n * Swaps two elements in the given int array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8403",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(int[], int, int, int)",
    "snippet": "public static void swap(final int[] array,  int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final int aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8403,
    "end_line": 8419,
    "comment": "/** \n * Swaps a series of elements in the given int array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8443",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(long[], int, int)",
    "snippet": "public static void swap(final long[] array, final int offset1, final int offset2) {\n        if (isEmpty(array)) {\n            return;\n        }\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8443,
    "end_line": 8448,
    "comment": "/** \n * Swaps two elements in the given long array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([true, false, true], 0, 2) -\u0026gt; [true, false, true]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true], 0, 0) -\u0026gt; [true, false, true]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true], 1, 0) -\u0026gt; [false, true, true]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true], 0, 5) -\u0026gt; [true, false, true]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true], -1, 1) -\u0026gt; [false, true, true]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8474",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(long[], int, int, int)",
    "snippet": "public static void swap(final long[] array,  int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final long aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8474,
    "end_line": 8490,
    "comment": "/** \n * Swaps a series of elements in the given long array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8515",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(java.lang.Object[], int, int)",
    "snippet": "public static void swap(final Object[] array, final int offset1, final int offset2) {\n        if (isEmpty(array)) {\n            return;\n        }\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8515,
    "end_line": 8520,
    "comment": "/** \n * Swaps two elements in the given array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\"], 0, 2) -\u0026gt; [\"3\", \"2\", \"1\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\"], 0, 0) -\u0026gt; [\"1\", \"2\", \"3\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\"], 1, 0) -\u0026gt; [\"2\", \"1\", \"3\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\"], 0, 5) -\u0026gt; [\"1\", \"2\", \"3\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\"], -1, 1) -\u0026gt; [\"2\", \"1\", \"3\"]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8546",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(java.lang.Object[], int, int, int)",
    "snippet": "public static void swap(final Object[] array,  int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final Object aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8546,
    "end_line": 8562,
    "comment": "/** \n * Swaps a series of elements in the given array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\", \"4\"], 0, 2, 1) -\u0026gt; [\"3\", \"2\", \"1\", \"4\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\", \"4\"], 0, 0, 1) -\u0026gt; [\"1\", \"2\", \"3\", \"4\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\", \"4\"], 2, 0, 2) -\u0026gt; [\"3\", \"4\", \"1\", \"2\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\", \"4\"], -3, 2, 2) -\u0026gt; [\"3\", \"4\", \"1\", \"2\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\", \"4\"], 0, 3, 3) -\u0026gt; [\"4\", \"2\", \"3\", \"1\"]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8585",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(short[], int, int)",
    "snippet": "public static void swap(final short[] array, final int offset1, final int offset2) {\n        if (isEmpty(array)) {\n            return;\n        }\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8585,
    "end_line": 8590,
    "comment": "/** \n * Swaps two elements in the given short array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8616",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(short[], int, int, int)",
    "snippet": "public static void swap(final short[] array,  int offset1, int offset2, int len) {\n            if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n                return;\n            }\n            if (offset1 \u003c 0) {\n                offset1 \u003d 0;\n            }\n            if (offset2 \u003c 0) {\n                offset2 \u003d 0;\n            }\n            if (offset1 \u003d\u003d offset2) {\n                return;\n            }\n            len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n            for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n                final short aux \u003d array[offset1];\n                array[offset1] \u003d array[offset2];\n                array[offset2] \u003d aux;\n            }\n        }",
    "begin_line": 8616,
    "end_line": 8635,
    "comment": "/** \n * Swaps a series of elements in the given short array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toArray#8676",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toArray(T)",
    "snippet": "public static \u003cT\u003e T[] toArray(@SuppressWarnings(\"unchecked\") final T... items) {\n        return items;\n    }",
    "begin_line": 8676,
    "end_line": 8678,
    "comment": "/** \n * \u003cp\u003eCreate a type-safe generic array. \u003cp\u003eThe Java language does not allow an array to be created from a generic type: \u003cpre\u003e public static \u0026lt;T\u0026gt; T[] createAnArray(int size) { return new T[size]; // compiler error here } public static \u0026lt;T\u0026gt; T[] createAnArray(int size) { return (T[]) new Object[size]; // ClassCastException at runtime } \u003c/pre\u003e \u003cp\u003eTherefore new arrays of generic types can be created with this method. For example, an array of Strings can be created: \u003cpre\u003e String[] array \u003d ArrayUtils.toArray(\"1\", \"2\"); String[] emptyArray \u003d ArrayUtils.\u0026lt;String\u0026gt;toArray(); \u003c/pre\u003e \u003cp\u003eThe method is typically used in scenarios, where the caller itself uses generic types that have to be combined into an array. \u003cp\u003eNote, this method makes only sense to provide arguments of the same type so that the compiler can deduce the type of the array itself. While it is possible to select the type explicitly like in {@code Number[] array \u003d ArrayUtils.\u0026lt;Number\u0026gt;toArray(Integer.valueOf(42), Double.valueOf(Math.PI))}, there is no real advantage when compared to {@code} new Number[] {Integer.valueOf(42), Double.valueOf(Math.PI)}}.\n * @param \u003c T \u003e   the array\u0027s element type\n * @param items  the varargs array items, null allowed\n * @return the array, not null unless a null array is passed in\n * @since  3.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toMap#8707",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toMap(java.lang.Object[])",
    "snippet": "public static Map\u003cObject, Object\u003e toMap(final Object[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        final Map\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e((int) (array.length * 1.5));\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Object object \u003d array[i];\n            if (object instanceof Map.Entry\u003c?, ?\u003e) {\n                final Map.Entry\u003c?, ?\u003e entry \u003d (Map.Entry\u003c?, ?\u003e) object;\n                map.put(entry.getKey(), entry.getValue());\n            } else if (object instanceof Object[]) {\n                final Object[] entry \u003d (Object[]) object;\n                if (entry.length \u003c 2) {\n                    throw new IllegalArgumentException(\"Array element \" + i + \", \u0027\"\n                        + object\n                        + \"\u0027, has a length less than 2\");\n                }\n                map.put(entry[0], entry[1]);\n            } else {\n                throw new IllegalArgumentException(\"Array element \" + i + \", \u0027\"\n                        + object\n                        + \"\u0027, is neither of type Map.Entry nor an Array\");\n            }\n        }\n        return map;\n    }",
    "begin_line": 8707,
    "end_line": 8732,
    "comment": "/** \n * \u003cp\u003eConverts the given array into a  {@link java.util.Map}. Each element of the array must be either a  {@link java.util.Map.Entry} or an Array, containing at least twoelements, where the first element is used as key and the second as value. \u003cp\u003eThis method can be used to initialize: \u003cpre\u003e // Create a Map mapping colors. Map colorMap \u003d ArrayUtils.toMap(new String[][] { {\"RED\", \"#FF0000\"}, {\"GREEN\", \"#00FF00\"}, {\"BLUE\", \"#0000FF\"}}); \u003c/pre\u003e \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  an array whose elements are either a {@link java.util.Map.Entry} oran Array containing at least two elements, may be  {@code null}\n * @return a {@code Map} that was created from the array\n * @throws IllegalArgumentException  if one element of this Array isitself an Array containing less then two elements\n * @throws IllegalArgumentException  if the array contains elements otherthan  {@link java.util.Map.Entry} and an Array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#8742",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(boolean[])",
    "snippet": "public static Boolean[] toObject(final boolean[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BOOLEAN_OBJECT_ARRAY;\n        }\n        final Boolean[] result \u003d new Boolean[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d (array[i] ? Boolean.TRUE : Boolean.FALSE);\n        }\n        return result;\n    }",
    "begin_line": 8742,
    "end_line": 8753,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive booleans to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code boolean} array\n * @return a {@code Boolean} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#8763",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(byte[])",
    "snippet": "public static Byte[] toObject(final byte[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BYTE_OBJECT_ARRAY;\n        }\n        final Byte[] result \u003d new Byte[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Byte.valueOf(array[i]);\n        }\n        return result;\n    }",
    "begin_line": 8763,
    "end_line": 8774,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive bytes to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code byte} array\n * @return a {@code Byte} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#8784",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(char[])",
    "snippet": "public static Character[] toObject(final char[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_CHARACTER_OBJECT_ARRAY;\n        }\n        final Character[] result \u003d new Character[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Character.valueOf(array[i]);\n        }\n        return result;\n     }",
    "begin_line": 8784,
    "end_line": 8795,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive chars to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array a {@code char} array\n * @return a {@code Character} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#8805",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(double[])",
    "snippet": "public static Double[] toObject(final double[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_DOUBLE_OBJECT_ARRAY;\n        }\n        final Double[] result \u003d new Double[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Double.valueOf(array[i]);\n        }\n        return result;\n    }",
    "begin_line": 8805,
    "end_line": 8816,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive doubles to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code double} array\n * @return a {@code Double} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#8826",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(float[])",
    "snippet": "public static Float[] toObject(final float[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_FLOAT_OBJECT_ARRAY;\n        }\n        final Float[] result \u003d new Float[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Float.valueOf(array[i]);\n        }\n        return result;\n    }",
    "begin_line": 8826,
    "end_line": 8837,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive floats to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code float} array\n * @return a {@code Float} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#8847",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(int[])",
    "snippet": "public static Integer[] toObject(final int[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_INTEGER_OBJECT_ARRAY;\n        }\n        final Integer[] result \u003d new Integer[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Integer.valueOf(array[i]);\n        }\n        return result;\n    }",
    "begin_line": 8847,
    "end_line": 8858,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive ints to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  an {@code int} array\n * @return an {@code Integer} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#8868",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(long[])",
    "snippet": "public static Long[] toObject(final long[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_LONG_OBJECT_ARRAY;\n        }\n        final Long[] result \u003d new Long[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Long.valueOf(array[i]);\n        }\n        return result;\n    }",
    "begin_line": 8868,
    "end_line": 8879,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive longs to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code long} array\n * @return a {@code Long} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#8889",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(short[])",
    "snippet": "public static Short[] toObject(final short[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_SHORT_OBJECT_ARRAY;\n        }\n        final Short[] result \u003d new Short[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Short.valueOf(array[i]);\n        }\n        return result;\n    }",
    "begin_line": 8889,
    "end_line": 8900,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive shorts to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code short} array\n * @return a {@code Short} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#8913",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Boolean[])",
    "snippet": "public static boolean[] toPrimitive(final Boolean[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BOOLEAN_ARRAY;\n        }\n        final boolean[] result \u003d new boolean[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].booleanValue();\n        }\n        return result;\n    }",
    "begin_line": 8913,
    "end_line": 8924,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Booleans to primitives. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Boolean} array, may be {@code null}\n * @return a {@code boolean} array, {@code null} if null array input\n * @throws NullPointerException if array content is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#8935",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Boolean[], boolean)",
    "snippet": "public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BOOLEAN_ARRAY;\n        }\n        final boolean[] result \u003d new boolean[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Boolean b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.booleanValue());\n        }\n        return result;\n    }",
    "begin_line": 8935,
    "end_line": 8947,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Booleans to primitives handling  {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Boolean} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code boolean} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#8960",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Byte[])",
    "snippet": "public static byte[] toPrimitive(final Byte[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        final byte[] result \u003d new byte[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].byteValue();\n        }\n        return result;\n    }",
    "begin_line": 8960,
    "end_line": 8971,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Bytes to primitives. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Byte} array, may be {@code null}\n * @return a {@code byte} array, {@code null} if null array input\n * @throws NullPointerException if array content is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#8982",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Byte[], byte)",
    "snippet": "public static byte[] toPrimitive(final Byte[] array, final byte valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        final byte[] result \u003d new byte[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Byte b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.byteValue());\n        }\n        return result;\n    }",
    "begin_line": 8982,
    "end_line": 8994,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Bytes to primitives handling  {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Byte} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code byte} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9007",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Character[])",
    "snippet": "public static char[] toPrimitive(final Character[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        final char[] result \u003d new char[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].charValue();\n        }\n        return result;\n    }",
    "begin_line": 9007,
    "end_line": 9018,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Characters to primitives. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Character} array, may be {@code null}\n * @return a {@code char} array, {@code null} if null array input\n * @throws NullPointerException if array content is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9029",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Character[], char)",
    "snippet": "public static char[] toPrimitive(final Character[] array, final char valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        final char[] result \u003d new char[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Character b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.charValue());\n        }\n        return result;\n    }",
    "begin_line": 9029,
    "end_line": 9041,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Character to primitives handling  {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Character} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code char} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9054",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Double[])",
    "snippet": "public static double[] toPrimitive(final Double[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_DOUBLE_ARRAY;\n        }\n        final double[] result \u003d new double[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].doubleValue();\n        }\n        return result;\n    }",
    "begin_line": 9054,
    "end_line": 9065,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Doubles to primitives. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Double} array, may be {@code null}\n * @return a {@code double} array, {@code null} if null array input\n * @throws NullPointerException if array content is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9076",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Double[], double)",
    "snippet": "public static double[] toPrimitive(final Double[] array, final double valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_DOUBLE_ARRAY;\n        }\n        final double[] result \u003d new double[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Double b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.doubleValue());\n        }\n        return result;\n    }",
    "begin_line": 9076,
    "end_line": 9088,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Doubles to primitives handling  {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Double} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code double} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9101",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Float[])",
    "snippet": "public static float[] toPrimitive(final Float[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_FLOAT_ARRAY;\n        }\n        final float[] result \u003d new float[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].floatValue();\n        }\n        return result;\n    }",
    "begin_line": 9101,
    "end_line": 9112,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Floats to primitives. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Float} array, may be {@code null}\n * @return a {@code float} array, {@code null} if null array input\n * @throws NullPointerException if array content is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9123",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Float[], float)",
    "snippet": "public static float[] toPrimitive(final Float[] array, final float valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_FLOAT_ARRAY;\n        }\n        final float[] result \u003d new float[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Float b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.floatValue());\n        }\n        return result;\n    }",
    "begin_line": 9123,
    "end_line": 9135,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Floats to primitives handling  {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Float} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code float} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9148",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Integer[])",
    "snippet": "public static int[] toPrimitive(final Integer[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_INT_ARRAY;\n        }\n        final int[] result \u003d new int[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].intValue();\n        }\n        return result;\n    }",
    "begin_line": 9148,
    "end_line": 9159,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Integers to primitives. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Integer} array, may be {@code null}\n * @return an {@code int} array, {@code null} if null array input\n * @throws NullPointerException if array content is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9170",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Integer[], int)",
    "snippet": "public static int[] toPrimitive(final Integer[] array, final int valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_INT_ARRAY;\n        }\n        final int[] result \u003d new int[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Integer b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.intValue());\n        }\n        return result;\n    }",
    "begin_line": 9170,
    "end_line": 9182,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Integer to primitives handling  {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Integer} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return an {@code int} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9195",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Long[])",
    "snippet": "public static long[] toPrimitive(final Long[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_LONG_ARRAY;\n        }\n        final long[] result \u003d new long[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].longValue();\n        }\n        return result;\n    }",
    "begin_line": 9195,
    "end_line": 9206,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Longs to primitives. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Long} array, may be {@code null}\n * @return a {@code long} array, {@code null} if null array input\n * @throws NullPointerException if array content is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9217",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Long[], long)",
    "snippet": "public static long[] toPrimitive(final Long[] array, final long valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_LONG_ARRAY;\n        }\n        final long[] result \u003d new long[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Long b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.longValue());\n        }\n        return result;\n    }",
    "begin_line": 9217,
    "end_line": 9229,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Long to primitives handling  {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Long} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code long} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9240",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Object)",
    "snippet": "public static Object toPrimitive(final Object array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        final Class\u003c?\u003e ct \u003d array.getClass().getComponentType();\n        final Class\u003c?\u003e pt \u003d ClassUtils.wrapperToPrimitive(ct);\n        if (Integer.TYPE.equals(pt)) {\n            return toPrimitive((Integer[]) array);\n        }\n        if (Long.TYPE.equals(pt)) {\n            return toPrimitive((Long[]) array);\n        }\n        if (Short.TYPE.equals(pt)) {\n            return toPrimitive((Short[]) array);\n        }\n        if (Double.TYPE.equals(pt)) {\n            return toPrimitive((Double[]) array);\n        }\n        if (Float.TYPE.equals(pt)) {\n            return toPrimitive((Float[]) array);\n        }\n        return array;\n    }",
    "begin_line": 9240,
    "end_line": 9262,
    "comment": "/** \n * \u003cp\u003eCreate an array of primitive type from an array of wrapper types. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  an array of wrapper object\n * @return an array of the corresponding primitive type, or the original array\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9275",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Short[])",
    "snippet": "public static short[] toPrimitive(final Short[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_SHORT_ARRAY;\n        }\n        final short[] result \u003d new short[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].shortValue();\n        }\n        return result;\n    }",
    "begin_line": 9275,
    "end_line": 9286,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Shorts to primitives. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Short} array, may be {@code null}\n * @return a {@code byte} array, {@code null} if null array input\n * @throws NullPointerException if array content is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9297",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Short[], short)",
    "snippet": "public static short[] toPrimitive(final Short[] array, final short valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_SHORT_ARRAY;\n        }\n        final short[] result \u003d new short[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Short b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.shortValue());\n        }\n        return result;\n    }",
    "begin_line": 9297,
    "end_line": 9309,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Short to primitives handling  {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Short} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code byte} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toString#9324",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toString(java.lang.Object)",
    "snippet": "public static String toString(final Object array) {\n        return toString(array, \"{}\");\n    }",
    "begin_line": 9324,
    "end_line": 9326,
    "comment": "/** \n * \u003cp\u003eOutputs an array as a String, treating  {@code null} as an empty array.\u003cp\u003eMulti-dimensional arrays are handled correctly, including multi-dimensional primitive arrays. \u003cp\u003eThe format is that of Java source code, for example  {@code} {a,b}}.\n * @param array  the array to get a toString for, may be {@code null}\n * @return a String representation of the array, \u0027{}\u0027 if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toString#9340",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toString(java.lang.Object, java.lang.String)",
    "snippet": "public static String toString(final Object array, final String stringIfNull) {\n        if (array \u003d\u003d null) {\n            return stringIfNull;\n        }\n        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n    }",
    "begin_line": 9340,
    "end_line": 9345,
    "comment": "/** \n * \u003cp\u003eOutputs an array as a String handling  {@code null}s. \u003cp\u003eMulti-dimensional arrays are handled correctly, including multi-dimensional primitive arrays. \u003cp\u003eThe format is that of Java source code, for example  {@code} {a,b}}.\n * @param array  the array to get a toString for, may be {@code null}\n * @param stringIfNull  the String to return if the array is {@code null}\n * @return a String representation of the array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toStringArray#9358",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toStringArray(java.lang.Object[])",
    "snippet": "public static String[] toStringArray(final Object[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_STRING_ARRAY;\n        }\n\n        final String[] result \u003d new String[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].toString();\n        }\n\n        return result;\n    }",
    "begin_line": 9358,
    "end_line": 9371,
    "comment": "/** \n * \u003cp\u003eReturns an array containing the string representation of each element in the argument array.\u003c/p\u003e \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array the {@code Object[]} to be processed, may be null\n * @return {@code String[]} of the same size as the source with its element\u0027s string representation,{@code null} if null array input\n * @throws NullPointerException if array contains {@code null}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toStringArray#9384",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toStringArray(java.lang.Object[], java.lang.String)",
    "snippet": "public static String[] toStringArray(final Object[] array, final String valueForNullElements) {\n        if (null \u003d\u003d array) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_STRING_ARRAY;\n        }\n\n        final String[] result \u003d new String[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Object object \u003d array[i];\n            result[i] \u003d (object \u003d\u003d null ? valueForNullElements : object.toString());\n        }\n\n        return result;\n    }",
    "begin_line": 9384,
    "end_line": 9398,
    "comment": "/** \n * \u003cp\u003eReturns an array containing the string representation of each element in the argument array handling  {@code null} elements.\u003c/p\u003e\u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array the Object[] to be processed, may be null\n * @param valueForNullElements the value to insert if {@code null} is found\n * @return a {@code String} array, {@code null} if null array input\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.ArrayUtils#9407",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.ArrayUtils()",
    "snippet": "public ArrayUtils() {\n      super();\n    }",
    "begin_line": 9407,
    "end_line": 9409,
    "comment": "/** \n * \u003cp\u003eArrayUtils instances should NOT be constructed in standard programming. Instead, the class should be used as  {@code} ArrayUtils.clone(new int[] {2})}.\u003cp\u003eThis constructor is public to permit tools that require a JavaBean instance to operate.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.ClassUtils#163",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.ClassUtils()",
    "snippet": "public ClassUtils() {\n      super();\n    }",
    "begin_line": 163,
    "end_line": 165,
    "comment": "/** \n * \u003cp\u003eClassUtils instances should NOT be constructed in standard programming. Instead, the class should be used as {@code ClassUtils.getShortClassName(cls)}.\u003c/p\u003e \u003cp\u003eThis constructor is public to permit tools that require a JavaBean instance to operate.\u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getShortClassName#180",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getShortClassName(java.lang.Object, java.lang.String)",
    "snippet": "public static String getShortClassName(final Object object, final String valueIfNull) {\n        if (object \u003d\u003d null) {\n            return valueIfNull;\n        }\n        return getShortClassName(object.getClass());\n    }",
    "begin_line": 180,
    "end_line": 185,
    "comment": "/** \n * \u003cp\u003eGets the class name of the  {@code object} without the package name or names.\u003c/p\u003e\u003cp\u003eThe method looks up the class of the object and then converts the name of the class invoking {@link #getShortClassName(Class)} (see relevant notes there).\u003c/p\u003e\n * @param object  the class to get the short name for, may be {@code null}\n * @param valueIfNull  the value to return if the object is {@code null}\n * @return the class name of the object without the package name, or {@code valueIfNull}if the argument  {@code object} is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getShortClassName#198",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getShortClassName(java.lang.Class\u003c?\u003e)",
    "snippet": "public static String getShortClassName(final Class\u003c?\u003e cls) {\n        if (cls \u003d\u003d null) {\n            return StringUtils.EMPTY;\n        }\n        return getShortClassName(cls.getName());\n    }",
    "begin_line": 198,
    "end_line": 203,
    "comment": "/** \n * \u003cp\u003eGets the class name minus the package name from a  {@code Class}.\u003c/p\u003e \u003cp\u003eThis method simply gets the name using  {@code Class.getName()} and then calls{@link #getShortClassName(Class)}. See relevant notes there.\u003c/p\u003e\n * @param cls  the class to get the short name for.\n * @return the class name without the package name or an empty string. If the classis an inner class then the returned value will contain the outer class or classes separated with  {@code .} (dot) character.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getShortClassName#230",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getShortClassName(java.lang.String)",
    "snippet": "public static String getShortClassName(String className) {\n        if (StringUtils.isEmpty(className)) {\n            return StringUtils.EMPTY;\n        }\n\n        final StringBuilder arrayPrefix \u003d new StringBuilder();\n\n        // Handle array encoding\n        if (className.startsWith(\"[\")) {\n            while (className.charAt(0) \u003d\u003d \u0027[\u0027) {\n                className \u003d className.substring(1);\n                arrayPrefix.append(\"[]\");\n            }\n            // Strip Object type encoding\n            if (className.charAt(0) \u003d\u003d \u0027L\u0027 \u0026\u0026 className.charAt(className.length() - 1) \u003d\u003d \u0027;\u0027) {\n                className \u003d className.substring(1, className.length() - 1);\n            }\n\n            if (reverseAbbreviationMap.containsKey(className)) {\n                className \u003d reverseAbbreviationMap.get(className);\n            }\n        }\n\n        final int lastDotIdx \u003d className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n        final int innerIdx \u003d className.indexOf(\n                INNER_CLASS_SEPARATOR_CHAR, lastDotIdx \u003d\u003d -1 ? 0 : lastDotIdx + 1);\n        String out \u003d className.substring(lastDotIdx + 1);\n        if (innerIdx !\u003d -1) {\n            out \u003d out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);\n        }\n        return out + arrayPrefix;\n    }",
    "begin_line": 230,
    "end_line": 261,
    "comment": "/** \n * \u003cp\u003eGets the class name minus the package name from a String.\u003c/p\u003e \u003cp\u003eThe string passed in is assumed to be a class name - it is not checked. The string has to be formatted the way as the JDK method  {@code Class.getName()} returns it, and not the usual way as we write it, for example in importstatements, or as it is formatted by  {@code Class.getCanonicalName()}.\u003c/p\u003e \u003cp\u003eThe difference is is significant only in case of classes that are inner classes of some other classes. In this case the separator between the outer and inner class (possibly on multiple hierarchy level) has to be  {@code $} (dollar sign) and not {@code .} (dot), as it is returned by {@code Class.getName()}\u003c/p\u003e \u003cp\u003eNote that this method is called from the  {@link #getShortClassName(Class)} method using the stringreturned by  {@code Class.getName()}.\u003c/p\u003e \u003cp\u003eNote that this method differs from  {@link #getSimpleName(Class)} in that this willreturn, for example  {@code \"Map.Entry\"} whilst the {@code java.lang.Class} variant will simplyreturn  {@code \"Entry\"}. In this example the argument  {@code className} is the string{@code java.util.Map$Entry} (note the {@code $} sign.\u003c/p\u003e\n * @param className  the className to get the short name for. It has to be formatted as returned by{@code Class.getName()} and not {@code Class.getCanonicalName()}\n * @return the class name of the class without the package name or an empty string. If the class isan inner class then value contains the outer class or classes and the separator is replaced to be  {@code .} (dot) character.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getSimpleName#271",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getSimpleName(java.lang.Class\u003c?\u003e)",
    "snippet": "public static String getSimpleName(final Class\u003c?\u003e cls) {\n        return getSimpleName(cls, StringUtils.EMPTY);\n    }",
    "begin_line": 271,
    "end_line": 273,
    "comment": "/** \n * \u003cp\u003eNull-safe version of  {@code cls.getSimpleName()}\u003c/p\u003e\n * @param cls the class for which to get the simple name; may be null\n * @return the simple class name or the empty string in case the argument is {@code null}\n * @since 3.0\n * @see Class#getSimpleName()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getSimpleName#285",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getSimpleName(java.lang.Class\u003c?\u003e, java.lang.String)",
    "snippet": "public static String getSimpleName(final Class\u003c?\u003e cls, final String valueIfNull) {\n        return cls \u003d\u003d null ? valueIfNull : cls.getSimpleName();\n    }",
    "begin_line": 285,
    "end_line": 287,
    "comment": "/** \n * \u003cp\u003eNull-safe version of  {@code cls.getSimpleName()}\u003c/p\u003e\n * @param cls the class for which to get the simple name; may be null\n * @param valueIfNull  the value to return if null\n * @return the simple class name or {@code valueIfNull} if theargument  {@code cls} is {@code null}\n * @since 3.0\n * @see Class#getSimpleName()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getSimpleName#303",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getSimpleName(java.lang.Object)",
    "snippet": "public static String getSimpleName(final Object object) {\n        return getSimpleName(object, StringUtils.EMPTY);\n    }",
    "begin_line": 303,
    "end_line": 305,
    "comment": "/** \n * \u003cp\u003eNull-safe version of  {@code object.getClass().getSimpleName()}\u003c/p\u003e \u003cp\u003eIt is to note that this method is overloaded and in case the argument  {@code object} is a{@code Class} object then the {@link #getSimpleName(Class)} will be invoked. If this isa significant possibility then the caller should check this case and call  {@code getSimpleName(Class.class)} or just simply use the string literal {@code \"Class\"}, which is the result of the method in that case.\u003c/p\u003e\n * @param object the object for which to get the simple class name; may be null\n * @return the simple class name or the empty string in case the argument is {@code null}\n * @since 3.7\n * @see Class#getSimpleName()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getSimpleName#317",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getSimpleName(java.lang.Object, java.lang.String)",
    "snippet": "public static String getSimpleName(final Object object, final String valueIfNull) {\n        return object \u003d\u003d null ? valueIfNull : object.getClass().getSimpleName();\n    }",
    "begin_line": 317,
    "end_line": 319,
    "comment": "/** \n * \u003cp\u003eNull-safe version of  {@code object.getClass().getSimpleName()}\u003c/p\u003e\n * @param object the object for which to get the simple class name; may be null\n * @param valueIfNull the value to return if {@code object} is {@code null}\n * @return the simple class name or {@code valueIfNull} if theargument  {@code object} is {@code null}\n * @since 3.0\n * @see Class#getSimpleName()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getName#329",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getName(java.lang.Class\u003c?\u003e)",
    "snippet": "public static String getName(final Class\u003c?\u003e cls) {\n        return getName(cls, StringUtils.EMPTY);\n    }",
    "begin_line": 329,
    "end_line": 331,
    "comment": "/** \n * \u003cp\u003eNull-safe version of  {@code cls.getName()}\u003c/p\u003e\n * @param cls the class for which to get the class name; may be null\n * @return the class name or the empty string in case the argument is {@code null}\n * @since 3.7\n * @see Class#getSimpleName()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getName#342",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getName(java.lang.Class\u003c?\u003e, java.lang.String)",
    "snippet": "public static String getName(final Class\u003c?\u003e cls, final String valueIfNull) {\n        return cls \u003d\u003d null ? valueIfNull : cls.getName();\n    }",
    "begin_line": 342,
    "end_line": 344,
    "comment": "/** \n * \u003cp\u003eNull-safe version of  {@code cls.getName()}\u003c/p\u003e\n * @param cls the class for which to get the class name; may be null\n * @param valueIfNull the return value if the argument {@code cls} is {@code null}\n * @return the class name or {@code valueIfNull}\n * @since 3.7\n * @see Class#getName()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getName#354",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getName(java.lang.Object)",
    "snippet": "public static String getName(final Object object) {\n        return getName(object, StringUtils.EMPTY);\n    }",
    "begin_line": 354,
    "end_line": 356,
    "comment": "/** \n * \u003cp\u003eNull-safe version of  {@code object.getClass().getName()}\u003c/p\u003e\n * @param object the object for which to get the class name; may be null\n * @return the class name or the empty String\n * @since 3.7\n * @see Class#getSimpleName()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getName#367",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getName(java.lang.Object, java.lang.String)",
    "snippet": "public static String getName(final Object object, final String valueIfNull) {\n        return object \u003d\u003d null ? valueIfNull : object.getClass().getName();\n    }",
    "begin_line": 367,
    "end_line": 369,
    "comment": "/** \n * \u003cp\u003eNull-safe version of  {@code object.getClass().getSimpleName()}\u003c/p\u003e\n * @param object the object for which to get the class name; may be null\n * @param valueIfNull the value to return if {@code object} is {@code null}\n * @return the class name or {@code valueIfNull}\n * @since 3.0\n * @see Class#getName()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getPackageName#380",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getPackageName(java.lang.Object, java.lang.String)",
    "snippet": "public static String getPackageName(final Object object, final String valueIfNull) {\n        if (object \u003d\u003d null) {\n            return valueIfNull;\n        }\n        return getPackageName(object.getClass());\n    }",
    "begin_line": 380,
    "end_line": 385,
    "comment": "/** \n * \u003cp\u003eGets the package name of an  {@code Object}.\u003c/p\u003e\n * @param object  the class to get the package name for, may be null\n * @param valueIfNull  the value to return if null\n * @return the package name of the object, or the null value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getPackageName#393",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getPackageName(java.lang.Class\u003c?\u003e)",
    "snippet": "public static String getPackageName(final Class\u003c?\u003e cls) {\n        if (cls \u003d\u003d null) {\n            return StringUtils.EMPTY;\n        }\n        return getPackageName(cls.getName());\n    }",
    "begin_line": 393,
    "end_line": 398,
    "comment": "/** \n * \u003cp\u003eGets the package name of a  {@code Class}.\u003c/p\u003e\n * @param cls  the class to get the package name for, may be {@code null}.\n * @return the package name or an empty string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getPackageName#409",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getPackageName(java.lang.String)",
    "snippet": "public static String getPackageName(String className) {\n        if (StringUtils.isEmpty(className)) {\n            return StringUtils.EMPTY;\n        }\n\n        // Strip array encoding\n        while (className.charAt(0) \u003d\u003d \u0027[\u0027) {\n            className \u003d className.substring(1);\n        }\n        // Strip Object type encoding\n        if (className.charAt(0) \u003d\u003d \u0027L\u0027 \u0026\u0026 className.charAt(className.length() - 1) \u003d\u003d \u0027;\u0027) {\n            className \u003d className.substring(1);\n        }\n\n        final int i \u003d className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n        if (i \u003d\u003d -1) {\n            return StringUtils.EMPTY;\n        }\n        return className.substring(0, i);\n    }",
    "begin_line": 409,
    "end_line": 428,
    "comment": "/** \n * \u003cp\u003eGets the package name from a  {@code String}.\u003c/p\u003e \u003cp\u003eThe string passed in is assumed to be a class name - it is not checked.\u003c/p\u003e \u003cp\u003eIf the class is unpackaged, return an empty string.\u003c/p\u003e\n * @param className  the className to get the package name for, may be {@code null}\n * @return the package name or an empty string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getAbbreviatedName#442",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getAbbreviatedName(java.lang.Class\u003c?\u003e, int)",
    "snippet": "public static String getAbbreviatedName(final Class\u003c?\u003e cls, final int lengthHint) {\n      if (cls \u003d\u003d null) {\n        return StringUtils.EMPTY;\n      }\n      return getAbbreviatedName(cls.getName(), lengthHint);\n    }",
    "begin_line": 442,
    "end_line": 447,
    "comment": "/** \n * \u003cp\u003eGets the abbreviated name of a  {@code Class}.\u003c/p\u003e\n * @param cls  the class to get the abbreviated name for, may be {@code null}\n * @param lengthHint  the desired length of the abbreviated name\n * @return the abbreviated name or an empty string\n * @throws IllegalArgumentException if len \u0026lt;\u003d 0\n * @see #getAbbreviatedName(String,int)\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getAbbreviatedName#489",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getAbbreviatedName(java.lang.String, int)",
    "snippet": "public static String getAbbreviatedName(final String className, final int lengthHint) {\n        if (lengthHint \u003c\u003d 0) {\n            throw new IllegalArgumentException(\"len must be \u003e 0\");\n        }\n        if (className \u003d\u003d null) {\n            return StringUtils.EMPTY;\n        }\n        if (className.length() \u003c\u003d lengthHint) {\n            return className;\n        }\n        final char[] abbreviated \u003d className.toCharArray();\n        int target \u003d 0;\n        int source \u003d 0;\n        while (source \u003c abbreviated.length) {\n            // copy the next part\n            int runAheadTarget \u003d target;\n            while (source \u003c abbreviated.length \u0026\u0026 abbreviated[source] !\u003d \u0027.\u0027) {\n                abbreviated[runAheadTarget++] \u003d abbreviated[source++];\n            }\n\n            ++target;\n            if (useFull(runAheadTarget, source, abbreviated.length, lengthHint)\n                  || target \u003e runAheadTarget) {\n                target \u003d runAheadTarget;\n            }\n\n            // copy the \u0027.\u0027 unless it was the last part\n            if (source \u003c abbreviated.length) {\n                abbreviated[target++] \u003d abbreviated[source++];\n            }\n        }\n        return new String(abbreviated, 0, target);\n    }",
    "begin_line": 489,
    "end_line": 521,
    "comment": "/** \n * \u003cp\u003eGets the abbreviated class name from a  {@code String}.\u003c/p\u003e \u003cp\u003eThe string passed in is assumed to be a class name - it is not checked.\u003c/p\u003e \u003cp\u003eThe abbreviation algorithm will shorten the class name, usually without significant loss of meaning.\u003c/p\u003e \u003cp\u003eThe abbreviated class name will always include the complete package hierarchy. If enough space is available, rightmost sub-packages will be displayed in full length. The abbreviated package names will be shortened to a single character.\u003c/p\u003e \u003cp\u003eOnly package names are shortened, the class simple name remains untouched. (See examples.)\u003c/p\u003e \u003cp\u003eThe result will be longer than the desired length only if all the package names shortened to a single character plus the class simple name with the separating dots together are longer than the desired length. In other words, when the class name cannot be shortened to the desired length.\u003c/p\u003e \u003cp\u003eIf the class name can be shortened then the final length will be at most  {@code lengthHint} characters.\u003c/p\u003e\u003cp\u003eIf the  {@code lengthHint} is zero or negative then the methodthrows exception. If you want to achieve the shortest possible version then use  {@code 1} as a {@code lengthHint}.\u003c/p\u003e \u003ctable\u003e \u003ccaption\u003eExamples\u003c/caption\u003e \u003ctr\u003e\u003ctd\u003eclassName\u003c/td\u003e\u003ctd\u003elen\u003c/td\u003e\u003ctd\u003ereturn\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e              null\u003c/td\u003e\u003ctd\u003e 1\u003c/td\u003e\u003ctd\u003e\"\"\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e\"java.lang.String\"\u003c/td\u003e\u003ctd\u003e 5\u003c/td\u003e\u003ctd\u003e\"j.l.String\"\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e\"java.lang.String\"\u003c/td\u003e\u003ctd\u003e15\u003c/td\u003e\u003ctd\u003e\"j.lang.String\"\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e\"java.lang.String\"\u003c/td\u003e\u003ctd\u003e30\u003c/td\u003e\u003ctd\u003e\"java.lang.String\"\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e\"org.apache.commons.lang3.ClassUtils\"\u003c/td\u003e\u003ctd\u003e18\u003c/td\u003e\u003ctd\u003e\"o.a.c.l.ClassUtils\"\u003c/td\u003e\u003c/tr\u003e \u003c/table\u003e\n * @param className the className to get the abbreviated name for, may be {@code null}\n * @param lengthHint       the desired length of the abbreviated name\n * @return the abbreviated name or an empty string if the specifiedclass name is  {@code null} or empty string. The abbreviated name may belonger than the desired length if it cannot be abbreviated to the desired length.\n * @throws IllegalArgumentException if {@code len \u003c\u003d 0}\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.useFull#551",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.useFull(int, int, int, int)",
    "snippet": "private static boolean useFull(final int runAheadTarget,\n                                   final int source,\n                                   final int originalLength,\n                                   final int desiredLength) {\n        return source \u003e\u003d originalLength ||\n            runAheadTarget + originalLength - source \u003c\u003d desiredLength;\n    }",
    "begin_line": 551,
    "end_line": 557,
    "comment": "/** \n * \u003cp\u003eDecides if the part that was just copied to its destination location in the work array can be kept as it was copied or must be abbreviated. It must be kept when the part is the last one, which is the simple name of the class. In this case the  {@code source}index, from where the characters are copied points one position after the last character, a.k.a.  {@code source \u003d\u003doriginalLength}\u003c/p\u003e \u003cp\u003eIf the part is not the last one then it can be kept unabridged if the number of the characters copied so far plus the character that are to be copied is less than or equal to the desired length.\u003c/p\u003e\n * @param runAheadTarget the target index (where the characters werecopied to) pointing after the last character copied when the current part was copied\n * @param source         the source index (where the characters werecopied from) pointing after the last character copied when the current part was copied\n * @param originalLength the original length of the class full name,which is abbreviated\n * @param desiredLength  the desired length of the abbreviated classname\n * @return {@code true} if it can be kept in its original length{@code false} if the current part has to be abbreviated and\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getAllSuperclasses#568",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getAllSuperclasses(java.lang.Class\u003c?\u003e)",
    "snippet": "public static List\u003cClass\u003c?\u003e\u003e getAllSuperclasses(final Class\u003c?\u003e cls) {\n        if (cls \u003d\u003d null) {\n            return null;\n        }\n        final List\u003cClass\u003c?\u003e\u003e classes \u003d new ArrayList\u003c\u003e();\n        Class\u003c?\u003e superclass \u003d cls.getSuperclass();\n        while (superclass !\u003d null) {\n            classes.add(superclass);\n            superclass \u003d superclass.getSuperclass();\n        }\n        return classes;\n    }",
    "begin_line": 568,
    "end_line": 579,
    "comment": "/** \n * \u003cp\u003eGets a  {@code List} of superclasses for the given class.\u003c/p\u003e\n * @param cls  the class to look up, may be {@code null}\n * @return the {@code List} of superclasses in order going up from this one{@code null} if null input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getAllInterfaces#594",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getAllInterfaces(java.lang.Class\u003c?\u003e)",
    "snippet": "public static List\u003cClass\u003c?\u003e\u003e getAllInterfaces(final Class\u003c?\u003e cls) {\n        if (cls \u003d\u003d null) {\n            return null;\n        }\n\n        final LinkedHashSet\u003cClass\u003c?\u003e\u003e interfacesFound \u003d new LinkedHashSet\u003c\u003e();\n        getAllInterfaces(cls, interfacesFound);\n\n        return new ArrayList\u003c\u003e(interfacesFound);\n    }",
    "begin_line": 594,
    "end_line": 603,
    "comment": "/** \n * \u003cp\u003eGets a  {@code List} of all interfaces implemented by the givenclass and its superclasses.\u003c/p\u003e \u003cp\u003eThe order is determined by looking through each interface in turn as declared in the source file and following its hierarchy up. Then each superclass is considered in the same way. Later duplicates are ignored, so the order is maintained.\u003c/p\u003e\n * @param cls  the class to look up, may be {@code null}\n * @return the {@code List} of interfaces in order,{@code null} if null input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getAllInterfaces#611",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getAllInterfaces(java.lang.Class\u003c?\u003e, java.util.HashSet\u003cjava.lang.Class\u003c?\u003e\u003e)",
    "snippet": "private static void getAllInterfaces(Class\u003c?\u003e cls, final HashSet\u003cClass\u003c?\u003e\u003e interfacesFound) {\n        while (cls !\u003d null) {\n            final Class\u003c?\u003e[] interfaces \u003d cls.getInterfaces();\n\n            for (final Class\u003c?\u003e i : interfaces) {\n                if (interfacesFound.add(i)) {\n                    getAllInterfaces(i, interfacesFound);\n                }\n            }\n\n            cls \u003d cls.getSuperclass();\n         }\n     }",
    "begin_line": 611,
    "end_line": 623,
    "comment": "/** \n * Gets the interfaces for the specified class.\n * @param cls  the class to look up, may be {@code null}\n * @param interfacesFound the {@code Set} of interfaces for the class\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.convertClassNamesToClasses#639",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.convertClassNamesToClasses(java.util.List\u003cjava.lang.String\u003e)",
    "snippet": "public static List\u003cClass\u003c?\u003e\u003e convertClassNamesToClasses(final List\u003cString\u003e classNames) {\n        if (classNames \u003d\u003d null) {\n            return null;\n        }\n        final List\u003cClass\u003c?\u003e\u003e classes \u003d new ArrayList\u003c\u003e(classNames.size());\n        for (final String className : classNames) {\n            try {\n                classes.add(Class.forName(className));\n            } catch (final Exception ex) {\n                classes.add(null);\n            }\n        }\n        return classes;\n    }",
    "begin_line": 639,
    "end_line": 652,
    "comment": "/** \n * \u003cp\u003eGiven a  {@code List} of class names, this method converts them into classes.\u003c/p\u003e\u003cp\u003eA new  {@code List} is returned. If the class name cannot be found, {@code null}is stored in the  {@code List}. If the class name in the  {@code List} is{@code null},  {@code null} is stored in the output {@code List}.\u003c/p\u003e\n * @param classNames  the classNames to change\n * @return a {@code List} of Class objects corresponding to the class names,{@code null} if null input\n * @throws ClassCastException if classNames contains a non String entry\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.convertClassesToClassNames#666",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.convertClassesToClassNames(java.util.List\u003cjava.lang.Class\u003c?\u003e\u003e)",
    "snippet": "public static List\u003cString\u003e convertClassesToClassNames(final List\u003cClass\u003c?\u003e\u003e classes) {\n        if (classes \u003d\u003d null) {\n            return null;\n        }\n        final List\u003cString\u003e classNames \u003d new ArrayList\u003c\u003e(classes.size());\n        for (final Class\u003c?\u003e cls : classes) {\n            if (cls \u003d\u003d null) {\n                classNames.add(null);\n            } else {\n                classNames.add(cls.getName());\n            }\n        }\n        return classNames;\n    }",
    "begin_line": 666,
    "end_line": 679,
    "comment": "/** \n * \u003cp\u003eGiven a  {@code List} of {@code Class} objects, this method convertsthem into class names.\u003c/p\u003e \u003cp\u003eA new  {@code List} is returned. {@code null} objects will be copied intothe returned list as  {@code null}.\u003c/p\u003e\n * @param classes  the classes to change\n * @return a {@code List} of class names corresponding to the Class objects,{@code null} if null input\n * @throws ClassCastException if {@code classes} contains a non-{@code Class} entry\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.isAssignable#719",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class\u003c?\u003e[], java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isAssignable(final Class\u003c?\u003e[] classArray, final Class\u003c?\u003e... toClassArray) {\n        return isAssignable(classArray, toClassArray, true);\n    }",
    "begin_line": 719,
    "end_line": 721,
    "comment": "/** \n * \u003cp\u003eChecks if an array of Classes can be assigned to another array of Classes.\u003c/p\u003e \u003cp\u003eThis method calls  {@link #isAssignable(Class,Class) isAssignable} for eachClass pair in the input arrays. It can be used to check if a set of arguments (the first parameter) are suitably compatible with a set of method parameter types (the second parameter).\u003c/p\u003e \u003cp\u003eUnlike the  {@link Class#isAssignableFrom(java.lang.Class)} method, thismethod takes into account widenings of primitive classes and {@code null}s.\u003c/p\u003e \u003cp\u003ePrimitive widenings allow an int to be assigned to a  {@code long}, {@code float} or {@code double}. This method returns the correct result for these cases.\u003c/p\u003e \u003cp\u003e {@code Null} may be assigned to any reference type. This method willreturn  {@code true} if {@code null} is passed in and the toClass isnon-primitive.\u003c/p\u003e \u003cp\u003eSpecifically, this method tests whether the type represented by the specified  {@code Class} parameter can be converted to the typerepresented by this  {@code Class} object via an identity conversionwidening primitive or widening reference conversion. See \u003cem\u003e\u003ca href\u003d\"http://docs.oracle.com/javase/specs/\"\u003eThe Java Language Specification\u003c/a\u003e\u003c/em\u003e, sections 5.1.1, 5.1.2 and 5.1.4 for details.\u003c/p\u003e \u003cp\u003e\u003cstrong\u003eSince Lang 3.0,\u003c/strong\u003e this method will default behavior for calculating assignability between primitive and wrapper types \u003cem\u003ecorresponding to the running Java version\u003c/em\u003e; i.e. autoboxing will be the default behavior in VMs running Java versions \u0026gt; 1.5.\u003c/p\u003e\n * @param classArray  the array of Classes to check, may be {@code null}\n * @param toClassArray  the array of Classes to try to assign into, may be {@code null}\n * @return {@code true} if assignment possible\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.isAssignable#755",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class\u003c?\u003e[], java.lang.Class\u003c?\u003e[], boolean)",
    "snippet": "public static boolean isAssignable(Class\u003c?\u003e[] classArray, Class\u003c?\u003e[] toClassArray, final boolean autoboxing) {\n        if (!ArrayUtils.isSameLength(classArray, toClassArray)) {\n            return false;\n        }\n        if (classArray \u003d\u003d null) {\n            classArray \u003d ArrayUtils.EMPTY_CLASS_ARRAY;\n        }\n        if (toClassArray \u003d\u003d null) {\n            toClassArray \u003d ArrayUtils.EMPTY_CLASS_ARRAY;\n        }\n        for (int i \u003d 0; i \u003c classArray.length; i++) {\n            if (!isAssignable(classArray[i], toClassArray[i], autoboxing)) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 755,
    "end_line": 771,
    "comment": "/** \n * \u003cp\u003eChecks if an array of Classes can be assigned to another array of Classes.\u003c/p\u003e \u003cp\u003eThis method calls  {@link #isAssignable(Class,Class) isAssignable} for eachClass pair in the input arrays. It can be used to check if a set of arguments (the first parameter) are suitably compatible with a set of method parameter types (the second parameter).\u003c/p\u003e \u003cp\u003eUnlike the  {@link Class#isAssignableFrom(java.lang.Class)} method, thismethod takes into account widenings of primitive classes and {@code null}s.\u003c/p\u003e \u003cp\u003ePrimitive widenings allow an int to be assigned to a  {@code long}, {@code float} or {@code double}. This method returns the correct result for these cases.\u003c/p\u003e \u003cp\u003e {@code Null} may be assigned to any reference type. This method willreturn  {@code true} if {@code null} is passed in and the toClass isnon-primitive.\u003c/p\u003e \u003cp\u003eSpecifically, this method tests whether the type represented by the specified  {@code Class} parameter can be converted to the typerepresented by this  {@code Class} object via an identity conversionwidening primitive or widening reference conversion. See \u003cem\u003e\u003ca href\u003d\"http://docs.oracle.com/javase/specs/\"\u003eThe Java Language Specification\u003c/a\u003e\u003c/em\u003e, sections 5.1.1, 5.1.2 and 5.1.4 for details.\u003c/p\u003e\n * @param classArray  the array of Classes to check, may be {@code null}\n * @param toClassArray  the array of Classes to try to assign into, may be {@code null}\n * @param autoboxing  whether to use implicit autoboxing/unboxing between primitives and wrappers\n * @return {@code true} if assignment possible\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.isPrimitiveOrWrapper#783",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.isPrimitiveOrWrapper(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isPrimitiveOrWrapper(final Class\u003c?\u003e type) {\n        if (type \u003d\u003d null) {\n            return false;\n        }\n        return type.isPrimitive() || isPrimitiveWrapper(type);\n    }",
    "begin_line": 783,
    "end_line": 788,
    "comment": "/** \n * Returns whether the given  {@code type} is a primitive or primitive wrapper ({@link Boolean},  {@link Byte},  {@link Character}, {@link Short},  {@link Integer},  {@link Long},  {@link Double},  {@link Float}).\n * @param type The class to query or null.\n * @return true if the given {@code type} is a primitive or primitive wrapper ({@link Boolean},  {@link Byte},  {@link Character}, {@link Short},  {@link Integer},  {@link Long},  {@link Double},  {@link Float}).\n * @since 3.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.isPrimitiveWrapper#800",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.isPrimitiveWrapper(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isPrimitiveWrapper(final Class\u003c?\u003e type) {\n        return wrapperPrimitiveMap.containsKey(type);\n    }",
    "begin_line": 800,
    "end_line": 802,
    "comment": "/** \n * Returns whether the given  {@code type} is a primitive wrapper ({@link Boolean},  {@link Byte},  {@link Character},  {@link Short}, {@link Integer},  {@link Long},  {@link Double},  {@link Float}).\n * @param type The class to query or null.\n * @return true if the given {@code type} is a primitive wrapper ({@link Boolean},  {@link Byte},  {@link Character},  {@link Short}, {@link Integer},  {@link Long},  {@link Double},  {@link Float}).\n * @since 3.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.isAssignable#835",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isAssignable(final Class\u003c?\u003e cls, final Class\u003c?\u003e toClass) {\n        return isAssignable(cls, toClass, true);\n    }",
    "begin_line": 835,
    "end_line": 837,
    "comment": "/** \n * \u003cp\u003eChecks if one  {@code Class} can be assigned to a variable ofanother  {@code Class}.\u003c/p\u003e \u003cp\u003eUnlike the  {@link Class#isAssignableFrom(java.lang.Class)} method,this method takes into account widenings of primitive classes and {@code null}s.\u003c/p\u003e \u003cp\u003ePrimitive widenings allow an int to be assigned to a long, float or double. This method returns the correct result for these cases.\u003c/p\u003e \u003cp\u003e {@code Null} may be assigned to any reference type. This methodwill return  {@code true} if {@code null} is passed in and thetoClass is non-primitive.\u003c/p\u003e \u003cp\u003eSpecifically, this method tests whether the type represented by the specified  {@code Class} parameter can be converted to the typerepresented by this  {@code Class} object via an identity conversionwidening primitive or widening reference conversion. See \u003cem\u003e\u003ca href\u003d\"http://docs.oracle.com/javase/specs/\"\u003eThe Java Language Specification\u003c/a\u003e\u003c/em\u003e, sections 5.1.1, 5.1.2 and 5.1.4 for details.\u003c/p\u003e \u003cp\u003e\u003cstrong\u003eSince Lang 3.0,\u003c/strong\u003e this method will default behavior for calculating assignability between primitive and wrapper types \u003cem\u003ecorresponding to the running Java version\u003c/em\u003e; i.e. autoboxing will be the default behavior in VMs running Java versions \u0026gt; 1.5.\u003c/p\u003e\n * @param cls  the Class to check, may be null\n * @param toClass  the Class to try to assign into, returns false if null\n * @return {@code true} if assignment possible\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.isAssignable#866",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, boolean)",
    "snippet": "public static boolean isAssignable(Class\u003c?\u003e cls, final Class\u003c?\u003e toClass, final boolean autoboxing) {\n        if (toClass \u003d\u003d null) {\n            return false;\n        }\n        // have to check for null, as isAssignableFrom doesn\u0027t\n        if (cls \u003d\u003d null) {\n            return !toClass.isPrimitive();\n        }\n        //autoboxing:\n        if (autoboxing) {\n            if (cls.isPrimitive() \u0026\u0026 !toClass.isPrimitive()) {\n                cls \u003d primitiveToWrapper(cls);\n                if (cls \u003d\u003d null) {\n                    return false;\n                }\n            }\n            if (toClass.isPrimitive() \u0026\u0026 !cls.isPrimitive()) {\n                cls \u003d wrapperToPrimitive(cls);\n                if (cls \u003d\u003d null) {\n                    return false;\n                }\n            }\n        }\n        if (cls.equals(toClass)) {\n            return true;\n        }\n        if (cls.isPrimitive()) {\n            if (!toClass.isPrimitive()) {\n                return false;\n            }\n            if (Integer.TYPE.equals(cls)) {\n                return Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Long.TYPE.equals(cls)) {\n                return Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Boolean.TYPE.equals(cls)) {\n                return false;\n            }\n            if (Double.TYPE.equals(cls)) {\n                return false;\n            }\n            if (Float.TYPE.equals(cls)) {\n                return Double.TYPE.equals(toClass);\n            }\n            if (Character.TYPE.equals(cls)) {\n                return Integer.TYPE.equals(toClass)\n                    || Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Short.TYPE.equals(cls)) {\n                return Integer.TYPE.equals(toClass)\n                    || Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Byte.TYPE.equals(cls)) {\n                return Short.TYPE.equals(toClass)\n                    || Integer.TYPE.equals(toClass)\n                    || Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            // should never get here\n            return false;\n        }\n        return toClass.isAssignableFrom(cls);\n    }",
    "begin_line": 866,
    "end_line": 937,
    "comment": "/** \n * \u003cp\u003eChecks if one  {@code Class} can be assigned to a variable ofanother  {@code Class}.\u003c/p\u003e \u003cp\u003eUnlike the  {@link Class#isAssignableFrom(java.lang.Class)} method,this method takes into account widenings of primitive classes and {@code null}s.\u003c/p\u003e \u003cp\u003ePrimitive widenings allow an int to be assigned to a long, float or double. This method returns the correct result for these cases.\u003c/p\u003e \u003cp\u003e {@code Null} may be assigned to any reference type. This methodwill return  {@code true} if {@code null} is passed in and thetoClass is non-primitive.\u003c/p\u003e \u003cp\u003eSpecifically, this method tests whether the type represented by the specified  {@code Class} parameter can be converted to the typerepresented by this  {@code Class} object via an identity conversionwidening primitive or widening reference conversion. See \u003cem\u003e\u003ca href\u003d\"http://docs.oracle.com/javase/specs/\"\u003eThe Java Language Specification\u003c/a\u003e\u003c/em\u003e, sections 5.1.1, 5.1.2 and 5.1.4 for details.\u003c/p\u003e\n * @param cls  the Class to check, may be null\n * @param toClass  the Class to try to assign into, returns false if null\n * @param autoboxing  whether to use implicit autoboxing/unboxing between primitives and wrappers\n * @return {@code true} if assignment possible\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.primitiveToWrapper#951",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.primitiveToWrapper(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e primitiveToWrapper(final Class\u003c?\u003e cls) {\n        Class\u003c?\u003e convertedClass \u003d cls;\n        if (cls !\u003d null \u0026\u0026 cls.isPrimitive()) {\n            convertedClass \u003d primitiveWrapperMap.get(cls);\n        }\n        return convertedClass;\n    }",
    "begin_line": 951,
    "end_line": 957,
    "comment": "/** \n * \u003cp\u003eConverts the specified primitive Class object to its corresponding wrapper Class object.\u003c/p\u003e \u003cp\u003eNOTE: From v2.2, this method handles  {@code Void.TYPE}, returning  {@code Void.TYPE}.\u003c/p\u003e\n * @param cls  the class to convert, may be null\n * @return the wrapper class for {@code cls} or {@code cls} if{@code cls} is not a primitive. {@code null} if null input.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.primitivesToWrappers#969",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.primitivesToWrappers(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e[] primitivesToWrappers(final Class\u003c?\u003e... classes) {\n        if (classes \u003d\u003d null) {\n            return null;\n        }\n\n        if (classes.length \u003d\u003d 0) {\n            return classes;\n        }\n\n        final Class\u003c?\u003e[] convertedClasses \u003d new Class[classes.length];\n        for (int i \u003d 0; i \u003c classes.length; i++) {\n            convertedClasses[i] \u003d primitiveToWrapper(classes[i]);\n        }\n        return convertedClasses;\n    }",
    "begin_line": 969,
    "end_line": 983,
    "comment": "/** \n * \u003cp\u003eConverts the specified array of primitive Class objects to an array of its corresponding wrapper Class objects.\u003c/p\u003e\n * @param classes  the class array to convert, may be null or empty\n * @return an array which contains for each given class, the wrapper class orthe original class if class is not a primitive.  {@code null} if null input.Empty array if an empty array passed in.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.wrapperToPrimitive#1001",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.wrapperToPrimitive(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e wrapperToPrimitive(final Class\u003c?\u003e cls) {\n        return wrapperPrimitiveMap.get(cls);\n    }",
    "begin_line": 1001,
    "end_line": 1003,
    "comment": "/** \n * \u003cp\u003eConverts the specified wrapper class to its corresponding primitive class.\u003c/p\u003e \u003cp\u003eThis method is the counter part of  {@code primitiveToWrapper()}. If the passed in class is a wrapper class for a primitive type, this primitive type will be returned (e.g.  {@code Integer.TYPE} for{@code Integer.class}). For other classes, or if the parameter is \u003cb\u003enull\u003c/b\u003e, the return value is \u003cb\u003enull\u003c/b\u003e.\u003c/p\u003e\n * @param cls the class to convert, may be \u003cb\u003enull\u003c/b\u003e\n * @return the corresponding primitive type if {@code cls} is awrapper class, \u003cb\u003enull\u003c/b\u003e otherwise\n * @see #primitiveToWrapper(Class)\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.wrappersToPrimitives#1019",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.wrappersToPrimitives(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e[] wrappersToPrimitives(final Class\u003c?\u003e... classes) {\n        if (classes \u003d\u003d null) {\n            return null;\n        }\n\n        if (classes.length \u003d\u003d 0) {\n            return classes;\n        }\n\n        final Class\u003c?\u003e[] convertedClasses \u003d new Class[classes.length];\n        for (int i \u003d 0; i \u003c classes.length; i++) {\n            convertedClasses[i] \u003d wrapperToPrimitive(classes[i]);\n        }\n        return convertedClasses;\n    }",
    "begin_line": 1019,
    "end_line": 1033,
    "comment": "/** \n * \u003cp\u003eConverts the specified array of wrapper Class objects to an array of its corresponding primitive Class objects.\u003c/p\u003e \u003cp\u003eThis method invokes  {@code wrapperToPrimitive()} for each elementof the passed in array.\u003c/p\u003e\n * @param classes  the class array to convert, may be null or empty\n * @return an array which contains for each given class, the primitive class or\u003cb\u003enull\u003c/b\u003e if the original class is not a wrapper class.  {@code null} if null input.Empty array if an empty array passed in.\n * @see #wrapperToPrimitive(Class)\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.isInnerClass#1044",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.isInnerClass(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isInnerClass(final Class\u003c?\u003e cls) {\n        return cls !\u003d null \u0026\u0026 cls.getEnclosingClass() !\u003d null;\n    }",
    "begin_line": 1044,
    "end_line": 1046,
    "comment": "/** \n * \u003cp\u003eIs the specified class an inner class or static nested class.\u003c/p\u003e\n * @param cls  the class to check, may be null\n * @return {@code true} if the class is an inner or static nested class,false if not or  {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getClass#1062",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getClass(java.lang.ClassLoader, java.lang.String, boolean)",
    "snippet": "public static Class\u003c?\u003e getClass(\n            final ClassLoader classLoader, final String className, final boolean initialize) throws ClassNotFoundException {\n        try {\n            Class\u003c?\u003e clazz;\n            if (namePrimitiveMap.containsKey(className)) {\n                clazz \u003d namePrimitiveMap.get(className);\n            } else {\n                clazz \u003d Class.forName(toCanonicalName(className), initialize, classLoader);\n            }\n            return clazz;\n        } catch (final ClassNotFoundException ex) {\n            // allow path separators (.) as inner class name separators\n            final int lastDotIndex \u003d className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n\n            if (lastDotIndex !\u003d -1) {\n                try {\n                    return getClass(classLoader, className.substring(0, lastDotIndex) +\n                            INNER_CLASS_SEPARATOR_CHAR + className.substring(lastDotIndex + 1),\n                            initialize);\n                } catch (final ClassNotFoundException ex2) { // NOPMD\n                    // ignore exception\n                }\n            }\n\n            throw ex;\n        }\n    }",
    "begin_line": 1062,
    "end_line": 1088,
    "comment": "/** \n * Returns the class represented by  {@code className} using the{@code classLoader}.  This implementation supports the syntaxes \" {@code java.util.Map.Entry[]}\", \" {@code java.util.Map$Entry[]}\", \" {@code [Ljava.util.Map.Entry;}\", and \" {@code [Ljava.util.Map$Entry;}\".\n * @param classLoader  the class loader to use to load the class\n * @param className  the class name\n * @param initialize  whether the class must be initialized\n * @return the class represented by {@code className} using the {@code classLoader}\n * @throws ClassNotFoundException if the class is not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getClass#1102",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getClass(java.lang.ClassLoader, java.lang.String)",
    "snippet": "public static Class\u003c?\u003e getClass(final ClassLoader classLoader, final String className) throws ClassNotFoundException {\n        return getClass(classLoader, className, true);\n    }",
    "begin_line": 1102,
    "end_line": 1104,
    "comment": "/** \n * Returns the (initialized) class represented by  {@code className}using the  {@code classLoader}.  This implementation supports the syntaxes \" {@code java.util.Map.Entry[]}\", \" {@code java.util.Map$Entry[]}\", \" {@code [Ljava.util.Map.Entry;}\", and \" {@code [Ljava.util.Map$Entry;}\".\n * @param classLoader  the class loader to use to load the class\n * @param className  the class name\n * @return the class represented by {@code className} using the {@code classLoader}\n * @throws ClassNotFoundException if the class is not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getClass#1117",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getClass(java.lang.String)",
    "snippet": "public static Class\u003c?\u003e getClass(final String className) throws ClassNotFoundException {\n        return getClass(className, true);\n    }",
    "begin_line": 1117,
    "end_line": 1119,
    "comment": "/** \n * Returns the (initialized) class represented by  {@code className}using the current thread\u0027s context class loader. This implementation supports the syntaxes \" {@code java.util.Map.Entry[]}\", \" {@code java.util.Map$Entry[]}\", \" {@code [Ljava.util.Map.Entry;}\", and \" {@code [Ljava.util.Map$Entry;}\".\n * @param className  the class name\n * @return the class represented by {@code className} using the current thread\u0027s context class loader\n * @throws ClassNotFoundException if the class is not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getClass#1132",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getClass(java.lang.String, boolean)",
    "snippet": "public static Class\u003c?\u003e getClass(final String className, final boolean initialize) throws ClassNotFoundException {\n        final ClassLoader contextCL \u003d Thread.currentThread().getContextClassLoader();\n        final ClassLoader loader \u003d contextCL \u003d\u003d null ? ClassUtils.class.getClassLoader() : contextCL;\n        return getClass(loader, className, initialize);\n    }",
    "begin_line": 1132,
    "end_line": 1136,
    "comment": "/** \n * Returns the class represented by  {@code className} using thecurrent thread\u0027s context class loader. This implementation supports the syntaxes \" {@code java.util.Map.Entry[]}\", \" {@code java.util.Map$Entry[]}\", \" {@code [Ljava.util.Map.Entry;}\", and \" {@code [Ljava.util.Map$Entry;}\".\n * @param className  the class name\n * @param initialize  whether the class must be initialized\n * @return the class represented by {@code className} using the current thread\u0027s context class loader\n * @throws ClassNotFoundException if the class is not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getPublicMethod#1162",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getPublicMethod(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Class\u003c?\u003e)",
    "snippet": "public static Method getPublicMethod(final Class\u003c?\u003e cls, final String methodName, final Class\u003c?\u003e... parameterTypes)\n            throws NoSuchMethodException {\n\n        final Method declaredMethod \u003d cls.getMethod(methodName, parameterTypes);\n        if (Modifier.isPublic(declaredMethod.getDeclaringClass().getModifiers())) {\n            return declaredMethod;\n        }\n\n        final List\u003cClass\u003c?\u003e\u003e candidateClasses \u003d new ArrayList\u003c\u003e();\n        candidateClasses.addAll(getAllInterfaces(cls));\n        candidateClasses.addAll(getAllSuperclasses(cls));\n\n        for (final Class\u003c?\u003e candidateClass : candidateClasses) {\n            if (!Modifier.isPublic(candidateClass.getModifiers())) {\n                continue;\n            }\n            Method candidateMethod;\n            try {\n                candidateMethod \u003d candidateClass.getMethod(methodName, parameterTypes);\n            } catch (final NoSuchMethodException ex) {\n                continue;\n            }\n            if (Modifier.isPublic(candidateMethod.getDeclaringClass().getModifiers())) {\n                return candidateMethod;\n            }\n        }\n\n        throw new NoSuchMethodException(\"Can\u0027t find a public method for \" +\n                methodName + \" \" + ArrayUtils.toString(parameterTypes));\n    }",
    "begin_line": 1162,
    "end_line": 1191,
    "comment": "/** \n * \u003cp\u003eReturns the desired Method much like  {@code Class.getMethod}, however it ensures that the returned Method is from a public class or interface and not from an anonymous inner class. This means that the Method is invokable and doesn\u0027t fall foul of Java bug \u003ca href\u003d\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4071957\"\u003e4071957\u003c/a\u003e).\u003c/p\u003e \u003cpre\u003e \u003ccode\u003eSet set \u003d Collections.unmodifiableSet(...); Method method \u003d ClassUtils.getPublicMethod(set.getClass(), \"isEmpty\",  new Class[0]); Object result \u003d method.invoke(set, new Object[]);\u003c/code\u003e \u003c/pre\u003e\n * @param cls  the class to check, not null\n * @param methodName  the name of the method\n * @param parameterTypes  the list of parameters\n * @return the method\n * @throws NullPointerException if the class is null\n * @throws SecurityException if a security violation occurred\n * @throws NoSuchMethodException if the method is not found in the given classor if the method doesn\u0027t conform with the requirements\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.toCanonicalName#1200",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.toCanonicalName(java.lang.String)",
    "snippet": "private static String toCanonicalName(String className) {\n        className \u003d StringUtils.deleteWhitespace(className);\n        Validate.notNull(className, \"className must not be null.\");\n        if (className.endsWith(\"[]\")) {\n            final StringBuilder classNameBuffer \u003d new StringBuilder();\n            while (className.endsWith(\"[]\")) {\n                className \u003d className.substring(0, className.length() - 2);\n                classNameBuffer.append(\"[\");\n            }\n            final String abbreviation \u003d abbreviationMap.get(className);\n            if (abbreviation !\u003d null) {\n                classNameBuffer.append(abbreviation);\n            } else {\n                classNameBuffer.append(\"L\").append(className).append(\";\");\n            }\n            className \u003d classNameBuffer.toString();\n        }\n        return className;\n    }",
    "begin_line": 1200,
    "end_line": 1218,
    "comment": "/** \n * Converts a class name to a JLS style class name.\n * @param className  the class name\n * @return the converted name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.toClass#1230",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.toClass(java.lang.Object)",
    "snippet": "public static Class\u003c?\u003e[] toClass(final Object... array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return ArrayUtils.EMPTY_CLASS_ARRAY;\n        }\n        final Class\u003c?\u003e[] classes \u003d new Class[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            classes[i] \u003d array[i] \u003d\u003d null ? null : array[i].getClass();\n        }\n        return classes;\n    }",
    "begin_line": 1230,
    "end_line": 1241,
    "comment": "/** \n * \u003cp\u003eConverts an array of  {@code Object} in to an array of {@code Class} objects.If any of these objects is null, a null element will be inserted into the array.\u003c/p\u003e \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array an {@code Object} array\n * @return a {@code Class} array, {@code null} if null array input\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getShortCanonicalName#1253",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getShortCanonicalName(java.lang.Object, java.lang.String)",
    "snippet": "public static String getShortCanonicalName(final Object object, final String valueIfNull) {\n        if (object \u003d\u003d null) {\n            return valueIfNull;\n        }\n        return getShortCanonicalName(object.getClass().getName());\n    }",
    "begin_line": 1253,
    "end_line": 1258,
    "comment": "/** \n * \u003cp\u003eGets the canonical name minus the package name for an  {@code Object}.\u003c/p\u003e\n * @param object  the class to get the short name for, may be null\n * @param valueIfNull  the value to return if null\n * @return the canonical name of the object without the package name, or the null value\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getCanonicalName#1268",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getCanonicalName(java.lang.Class\u003c?\u003e)",
    "snippet": "public static String getCanonicalName(final Class\u003c?\u003e cls) {\n        return getCanonicalName(cls, StringUtils.EMPTY);\n    }",
    "begin_line": 1268,
    "end_line": 1270,
    "comment": "/** \n * \u003cp\u003eGets the canonical class name for a  {@code Class}.\u003c/p\u003e\n * @param cls the class for which to get the canonical class name; may be null\n * @return the canonical name of the class, or the empty String\n * @since 3.7\n * @see Class#getCanonicalName()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getCanonicalName#1281",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getCanonicalName(java.lang.Class\u003c?\u003e, java.lang.String)",
    "snippet": "public static String getCanonicalName(final Class\u003c?\u003e cls, final String valueIfNull) {\n        if (cls \u003d\u003d null) {\n            return valueIfNull;\n        }\n        final String canonicalName \u003d cls.getCanonicalName();\n        return canonicalName \u003d\u003d null ? valueIfNull : canonicalName;\n    }",
    "begin_line": 1281,
    "end_line": 1287,
    "comment": "/** \n * \u003cp\u003eGets the canonical name for a  {@code Class}.\u003c/p\u003e\n * @param cls the class for which to get the canonical class name; may be null\n * @param valueIfNull  the return value if null\n * @return the canonical name of the class, or {@code valueIfNull}\n * @since 3.7\n * @see Class#getCanonicalName()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getCanonicalName#1297",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getCanonicalName(java.lang.Object)",
    "snippet": "public static String getCanonicalName(final Object object) {\n        return getCanonicalName(object, StringUtils.EMPTY);\n    }",
    "begin_line": 1297,
    "end_line": 1299,
    "comment": "/** \n * \u003cp\u003eGets the canonical name for an  {@code Object}.\u003c/p\u003e\n * @param object the object for which to get the canonical class name; may be null\n * @return the canonical name of the object, or the empty String\n * @since 3.7\n * @see Class#getCanonicalName()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getCanonicalName#1310",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getCanonicalName(java.lang.Object, java.lang.String)",
    "snippet": "public static String getCanonicalName(final Object object, final String valueIfNull) {\n        if (object \u003d\u003d null) {\n            return valueIfNull;\n        }\n        final String canonicalName \u003d object.getClass().getCanonicalName();\n        return canonicalName \u003d\u003d null ? valueIfNull : canonicalName;\n    }",
    "begin_line": 1310,
    "end_line": 1316,
    "comment": "/** \n * \u003cp\u003eGets the canonical name for an  {@code Object}.\u003c/p\u003e\n * @param object the object for which to get the canonical class name; may be null\n * @param valueIfNull  the return value if null\n * @return the canonical name of the object or {@code valueIfNull}\n * @since 3.7\n * @see Class#getCanonicalName()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getShortCanonicalName#1325",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getShortCanonicalName(java.lang.Class\u003c?\u003e)",
    "snippet": "public static String getShortCanonicalName(final Class\u003c?\u003e cls) {\n        if (cls \u003d\u003d null) {\n            return StringUtils.EMPTY;\n        }\n        return getShortCanonicalName(cls.getName());\n    }",
    "begin_line": 1325,
    "end_line": 1330,
    "comment": "/** \n * \u003cp\u003eGets the canonical name minus the package name from a  {@code Class}.\u003c/p\u003e\n * @param cls the class for which to get the short canonical class name; may be null\n * @return the canonical name without the package name or an empty string\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getShortCanonicalName#1375",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getShortCanonicalName(java.lang.String)",
    "snippet": "public static String getShortCanonicalName(final String canonicalName) {\n        return getShortClassName(getCanonicalName(canonicalName));\n    }",
    "begin_line": 1375,
    "end_line": 1377,
    "comment": "/** \n * \u003cp\u003eGets the canonical name minus the package name from a String.\u003c/p\u003e \u003cp\u003eThe string passed in is assumed to be a class name - it is not checked.\u003c/p\u003e \u003cp\u003eNote that this method is mainly designed to handle the arrays and primitives properly. If the class is an inner class then the result value will not contain the outer classes. This way the behavior of this method is different from  {@link #getShortClassName(String)}. The argument in that case is class name and not canonical name and the return value retains the outer classes.\u003c/p\u003e \u003cp\u003eNote that there is no way to reliably identify the part of the string representing the package hierarchy and the part that is the outer class or classes in case of an inner class. Trying to find the class would require reflective call and the class itself may not even be on the class path. Relying on the fact that class names start with capital letter and packages with lower case is heuristic.\u003c/p\u003e \u003cp\u003eIt is recommended to use  {@link #getShortClassName(String)} for cases when the classis an inner class and use this method for cases it is designed for.\u003c/p\u003e \u003ctable\u003e \u003ccaption\u003eExamples\u003c/caption\u003e \u003ctr\u003e\u003ctd\u003ereturn value\u003c/td\u003e\u003ctd\u003einput\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code \"\"}\u003c/td\u003e\u003ctd\u003e {@code (String)null}\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code \"Map.Entry\"}\u003c/td\u003e\u003ctd\u003e {@code java.util.Map.Entry.class.getName()}\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code \"Entry\"}\u003c/td\u003e\u003ctd\u003e {@code java.util.Map.Entry.class.getCanonicalName()}\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code \"ClassUtils\"}\u003c/td\u003e\u003ctd\u003e {@code \"org.apache.commons.lang3.ClassUtils\"}\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code \"ClassUtils[]\"}\u003c/td\u003e\u003ctd\u003e {@code \"[Lorg.apache.commons.lang3.ClassUtils;\"}\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code \"ClassUtils[][]\"}\u003c/td\u003e\u003ctd\u003e {@code \"[[Lorg.apache.commons.lang3.ClassUtils;\"}\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code \"ClassUtils[]\"}\u003c/td\u003e\u003ctd\u003e {@code \"org.apache.commons.lang3.ClassUtils[]\"}\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code \"ClassUtils[][]\"}\u003c/td\u003e\u003ctd\u003e {@code \"org.apache.commons.lang3.ClassUtils[][]\"}\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code \"int[]\"}\u003c/td\u003e\u003ctd\u003e {@code \"[I\"}\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code \"int[]\"}\u003c/td\u003e\u003ctd\u003e {@code int[].class.getCanonicalName()}\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code \"int[]\"}\u003c/td\u003e\u003ctd\u003e {@code int[].class.getName()}\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code \"int[][]\"}\u003c/td\u003e\u003ctd\u003e {@code \"[[I\"}\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code \"int[]\"}\u003c/td\u003e\u003ctd\u003e {@code \"int[]\"}\u003c/td\u003e\u003c/tr\u003e \u003ctr\u003e\u003ctd\u003e {@code \"int[][]\"}\u003c/td\u003e\u003ctd\u003e {@code \"int[][]\"}\u003c/td\u003e\u003c/tr\u003e \u003c/table\u003e\n * @param canonicalName  the class name to get the short name for\n * @return the canonical name of the class without the package name or an empty string\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getPackageCanonicalName#1389",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getPackageCanonicalName(java.lang.Object, java.lang.String)",
    "snippet": "public static String getPackageCanonicalName(final Object object, final String valueIfNull) {\n        if (object \u003d\u003d null) {\n            return valueIfNull;\n        }\n        return getPackageCanonicalName(object.getClass().getName());\n    }",
    "begin_line": 1389,
    "end_line": 1394,
    "comment": "/** \n * \u003cp\u003eGets the package name from the class name of an  {@code Object}.\u003c/p\u003e\n * @param object  the class to get the package name for, may be null\n * @param valueIfNull  the value to return if null\n * @return the package name of the object, or the null value\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getPackageCanonicalName#1403",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getPackageCanonicalName(java.lang.Class\u003c?\u003e)",
    "snippet": "public static String getPackageCanonicalName(final Class\u003c?\u003e cls) {\n        if (cls \u003d\u003d null) {\n            return StringUtils.EMPTY;\n        }\n        return getPackageCanonicalName(cls.getName());\n    }",
    "begin_line": 1403,
    "end_line": 1408,
    "comment": "/** \n * \u003cp\u003eGets the package name from the canonical name of a  {@code Class}.\u003c/p\u003e\n * @param cls  the class to get the package name for, may be {@code null}.\n * @return the package name or an empty string\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getPackageCanonicalName#1420",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getPackageCanonicalName(java.lang.String)",
    "snippet": "public static String getPackageCanonicalName(final String name) {\n        return getPackageName(getCanonicalName(name));\n    }",
    "begin_line": 1420,
    "end_line": 1422,
    "comment": "/** \n * \u003cp\u003eGets the package name from the class name. \u003c/p\u003e \u003cp\u003eThe string passed in is assumed to be a class name - it is not checked.\u003c/p\u003e \u003cp\u003eIf the class is in the default package, return an empty string.\u003c/p\u003e\n * @param name  the name to get the package name for, may be {@code null}\n * @return the package name or an empty string\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.getCanonicalName#1444",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.getCanonicalName(java.lang.String)",
    "snippet": "private static String getCanonicalName(String className) {\n        className \u003d StringUtils.deleteWhitespace(className);\n        if (className \u003d\u003d null) {\n            return null;\n        }\n        int dim \u003d 0;\n        while (className.startsWith(\"[\")) {\n            dim++;\n            className \u003d className.substring(1);\n        }\n        if (dim \u003c 1) {\n            return className;\n        }\n        if (className.startsWith(\"L\")) {\n            className \u003d className.substring(\n                1,\n                className.endsWith(\";\")\n                    ? className.length() - 1\n                    : className.length());\n        } else {\n            if (!className.isEmpty()) {\n                className \u003d reverseAbbreviationMap.get(className.substring(0, 1));\n            }\n        }\n        final StringBuilder canonicalClassNameBuffer \u003d new StringBuilder(className);\n        for (int i \u003d 0; i \u003c dim; i++) {\n            canonicalClassNameBuffer.append(\"[]\");\n        }\n        return canonicalClassNameBuffer.toString();\n    }",
    "begin_line": 1444,
    "end_line": 1473,
    "comment": "/** \n * \u003cp\u003eConverts a given name of class into canonical format. If name of class is not a name of array class it returns unchanged name.\u003c/p\u003e \u003cp\u003eThe method does not change the  {@code $} separators in casethe class is inner class.\u003c/p\u003e \u003cp\u003eExample: \u003cul\u003e \u003cli\u003e {@code getCanonicalName(\"[I\") \u003d \"int[]\"}\u003c/li\u003e \u003cli\u003e {@code getCanonicalName(\"[Ljava.lang.String;\") \u003d \"java.lang.String[]\"}\u003c/li\u003e \u003cli\u003e {@code getCanonicalName(\"java.lang.String\") \u003d \"java.lang.String\"}\u003c/li\u003e \u003c/ul\u003e \u003c/p\u003e\n * @param className the name of class\n * @return canonical form of class name\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.hierarchy#1483",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.hierarchy(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Iterable\u003cClass\u003c?\u003e\u003e hierarchy(final Class\u003c?\u003e type) {\n        return hierarchy(type, Interfaces.EXCLUDE);\n    }",
    "begin_line": 1483,
    "end_line": 1485,
    "comment": "/** \n * Gets an  {@link Iterable} that can iterate over a class hierarchy in ascending (subclass to superclass) order,excluding interfaces.\n * @param type the type to get the class hierarchy from\n * @return Iterable an Iterable over the class hierarchy of the given class\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.hierarchy#1495",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.hierarchy(java.lang.Class\u003c?\u003e, org.apache.commons.lang3.ClassUtils.Interfaces)",
    "snippet": "public static Iterable\u003cClass\u003c?\u003e\u003e hierarchy(final Class\u003c?\u003e type, final Interfaces interfacesBehavior) {\n        final Iterable\u003cClass\u003c?\u003e\u003e classes \u003d () -\u003e {\n            final MutableObject\u003cClass\u003c?\u003e\u003e next \u003d new MutableObject\u003c\u003e(type);\n            return new Iterator\u003cClass\u003c?\u003e\u003e() {\n\n                @Override\n                public boolean hasNext() {\n                    return next.getValue() !\u003d null;\n                }\n\n                @Override\n                public Class\u003c?\u003e next() {\n                    final Class\u003c?\u003e result \u003d next.getValue();\n                    next.setValue(result.getSuperclass());\n                    return result;\n                }\n\n                @Override\n                public void remove() {\n                    throw new UnsupportedOperationException();\n                }\n\n            };\n        };\n        if (interfacesBehavior !\u003d Interfaces.INCLUDE) {\n            return classes;\n        }\n        return () -\u003e {\n            final Set\u003cClass\u003c?\u003e\u003e seenInterfaces \u003d new HashSet\u003c\u003e();\n            final Iterator\u003cClass\u003c?\u003e\u003e wrapped \u003d classes.iterator();\n\n            return new Iterator\u003cClass\u003c?\u003e\u003e() {\n                Iterator\u003cClass\u003c?\u003e\u003e interfaces \u003d Collections.\u003cClass\u003c?\u003e\u003eemptySet().iterator();\n\n                @Override\n                public boolean hasNext() {\n                    return interfaces.hasNext() || wrapped.hasNext();\n                }\n\n                @Override\n                public Class\u003c?\u003e next() {\n                    if (interfaces.hasNext()) {\n                        final Class\u003c?\u003e nextInterface \u003d interfaces.next();\n                        seenInterfaces.add(nextInterface);\n                        return nextInterface;\n                    }\n                    final Class\u003c?\u003e nextSuperclass \u003d wrapped.next();\n                    final Set\u003cClass\u003c?\u003e\u003e currentInterfaces \u003d new LinkedHashSet\u003c\u003e();\n                    walkInterfaces(currentInterfaces, nextSuperclass);\n                    interfaces \u003d currentInterfaces.iterator();\n                    return nextSuperclass;\n                }\n\n                private void walkInterfaces(final Set\u003cClass\u003c?\u003e\u003e addTo, final Class\u003c?\u003e c) {\n                    for (final Class\u003c?\u003e iface : c.getInterfaces()) {\n                        if (!seenInterfaces.contains(iface)) {\n                            addTo.add(iface);\n                        }\n                        walkInterfaces(addTo, iface);\n                    }\n                }\n\n                @Override\n                public void remove() {\n                    throw new UnsupportedOperationException();\n                }\n\n            };\n        };\n    }",
    "begin_line": 1495,
    "end_line": 1564,
    "comment": "/** \n * Gets an  {@link Iterable} that can iterate over a class hierarchy in ascending (subclass to superclass) order.\n * @param type the type to get the class hierarchy from\n * @param interfacesBehavior switch indicating whether to include or exclude interfaces\n * @return Iterable an Iterable over the class hierarchy of the given class\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.hasNext#1501",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.hasNext()",
    "snippet": "@Override\n                public boolean hasNext() {\n                    return next.getValue() !\u003d null;\n                }",
    "begin_line": 1501,
    "end_line": 1503,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.next#1506",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.next()",
    "snippet": "@Override\n                public Class\u003c?\u003e next() {\n                    final Class\u003c?\u003e result \u003d next.getValue();\n                    next.setValue(result.getSuperclass());\n                    return result;\n                }",
    "begin_line": 1506,
    "end_line": 1510,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.remove#1513",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.remove()",
    "snippet": "@Override\n                public void remove() {\n                    throw new UnsupportedOperationException();\n                }",
    "begin_line": 1513,
    "end_line": 1515,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.hasNext#1530",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.hasNext()",
    "snippet": "@Override\n                public boolean hasNext() {\n                    return interfaces.hasNext() || wrapped.hasNext();\n                }",
    "begin_line": 1530,
    "end_line": 1532,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.next#1535",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.next()",
    "snippet": "@Override\n                public Class\u003c?\u003e next() {\n                    if (interfaces.hasNext()) {\n                        final Class\u003c?\u003e nextInterface \u003d interfaces.next();\n                        seenInterfaces.add(nextInterface);\n                        return nextInterface;\n                    }\n                    final Class\u003c?\u003e nextSuperclass \u003d wrapped.next();\n                    final Set\u003cClass\u003c?\u003e\u003e currentInterfaces \u003d new LinkedHashSet\u003c\u003e();\n                    walkInterfaces(currentInterfaces, nextSuperclass);\n                    interfaces \u003d currentInterfaces.iterator();\n                    return nextSuperclass;\n                }",
    "begin_line": 1535,
    "end_line": 1546,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.walkInterfaces#1548",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.walkInterfaces(java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "private void walkInterfaces(final Set\u003cClass\u003c?\u003e\u003e addTo, final Class\u003c?\u003e c) {\n                    for (final Class\u003c?\u003e iface : c.getInterfaces()) {\n                        if (!seenInterfaces.contains(iface)) {\n                            addTo.add(iface);\n                        }\n                        walkInterfaces(addTo, iface);\n                    }\n                }",
    "begin_line": 1548,
    "end_line": 1555,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtils.remove#1558",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ClassUtils.java",
    "class_name": "org.apache.commons.lang3.ClassUtils",
    "signature": "org.apache.commons.lang3.ClassUtils.remove()",
    "snippet": "@Override\n                public void remove() {\n                    throw new UnsupportedOperationException();\n                }",
    "begin_line": 1558,
    "end_line": 1560,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberUtils.setAccessibleWorkaround#55",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MemberUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MemberUtils",
    "signature": "org.apache.commons.lang3.reflect.MemberUtils.setAccessibleWorkaround(java.lang.reflect.AccessibleObject)",
    "snippet": "static boolean setAccessibleWorkaround(final AccessibleObject o) {\n        if (o \u003d\u003d null || o.isAccessible()) {\n            return false;\n        }\n        final Member m \u003d (Member) o;\n        if (!o.isAccessible() \u0026\u0026 Modifier.isPublic(m.getModifiers()) \u0026\u0026 isPackageAccess(m.getDeclaringClass().getModifiers())) {\n            try {\n                o.setAccessible(true);\n                return true;\n            } catch (final SecurityException e) { // NOPMD\n                // ignore in favor of subsequent IllegalAccessException\n            }\n        }\n        return false;\n    }",
    "begin_line": 55,
    "end_line": 69,
    "comment": "/** \n * XXX Default access superclass workaround. When a  {@code public} class has a default access superclass with {@code public} members,these members are accessible. Calling them from compiled code works fine. Unfortunately, on some JVMs, using reflection to invoke these members seems to (wrongly) prevent access even when the modifier is  {@code public}. Calling  {@code setAccessible(true)} solves the problem but will only work fromsufficiently privileged code. Better workarounds would be gratefully accepted.\n * @param o the AccessibleObject to set as accessible\n * @return a boolean indicating whether the accessibility of the object was set to true.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberUtils.isPackageAccess#76",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MemberUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MemberUtils",
    "signature": "org.apache.commons.lang3.reflect.MemberUtils.isPackageAccess(int)",
    "snippet": "static boolean isPackageAccess(final int modifiers) {\n        return (modifiers \u0026 ACCESS_TEST) \u003d\u003d 0;\n    }",
    "begin_line": 76,
    "end_line": 78,
    "comment": "/** \n * Returns whether a given set of modifiers implies package access.\n * @param modifiers to test\n * @return {@code true} unless {@code package}/ {@code protected}/ {@code private} modifier detected\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberUtils.isAccessible#85",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MemberUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MemberUtils",
    "signature": "org.apache.commons.lang3.reflect.MemberUtils.isAccessible(java.lang.reflect.Member)",
    "snippet": "static boolean isAccessible(final Member m) {\n        return m !\u003d null \u0026\u0026 Modifier.isPublic(m.getModifiers()) \u0026\u0026 !m.isSynthetic();\n    }",
    "begin_line": 85,
    "end_line": 87,
    "comment": "/** \n * Returns whether a  {@link Member} is accessible.\n * @param m Member to check\n * @return {@code true} if {@code m} is accessible\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberUtils.compareConstructorFit#102",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MemberUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MemberUtils",
    "signature": "org.apache.commons.lang3.reflect.MemberUtils.compareConstructorFit(java.lang.reflect.Constructor\u003c?\u003e, java.lang.reflect.Constructor\u003c?\u003e, java.lang.Class\u003c?\u003e[])",
    "snippet": "static int compareConstructorFit(final Constructor\u003c?\u003e left, final Constructor\u003c?\u003e right, final Class\u003c?\u003e[] actual) {\n      return compareParameterTypes(Executable.of(left), Executable.of(right), actual);\n    }",
    "begin_line": 102,
    "end_line": 104,
    "comment": "/** \n * Compares the relative fitness of two Constructors in terms of how well they match a set of runtime parameter types, such that a list ordered by the results of the comparison would return the best match first (least).\n * @param left the \"left\" Constructor\n * @param right the \"right\" Constructor\n * @param actual the runtime parameter types to match against{@code left}/ {@code right}\n * @return int consistent with {@code compare} semantics\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberUtils.compareMethodFit#119",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MemberUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MemberUtils",
    "signature": "org.apache.commons.lang3.reflect.MemberUtils.compareMethodFit(java.lang.reflect.Method, java.lang.reflect.Method, java.lang.Class\u003c?\u003e[])",
    "snippet": "static int compareMethodFit(final Method left, final Method right, final Class\u003c?\u003e[] actual) {\n      return compareParameterTypes(Executable.of(left), Executable.of(right), actual);\n    }",
    "begin_line": 119,
    "end_line": 121,
    "comment": "/** \n * Compares the relative fitness of two Methods in terms of how well they match a set of runtime parameter types, such that a list ordered by the results of the comparison would return the best match first (least).\n * @param left the \"left\" Method\n * @param right the \"right\" Method\n * @param actual the runtime parameter types to match against{@code left}/ {@code right}\n * @return int consistent with {@code compare} semantics\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberUtils.compareParameterTypes#135",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MemberUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MemberUtils",
    "signature": "org.apache.commons.lang3.reflect.MemberUtils.compareParameterTypes(org.apache.commons.lang3.reflect.MemberUtils.Executable, org.apache.commons.lang3.reflect.MemberUtils.Executable, java.lang.Class\u003c?\u003e[])",
    "snippet": "private static int compareParameterTypes(final Executable left, final Executable right, final Class\u003c?\u003e[] actual) {\n        final float leftCost \u003d getTotalTransformationCost(actual, left);\n        final float rightCost \u003d getTotalTransformationCost(actual, right);\n        return Float.compare(leftCost, rightCost);\n    }",
    "begin_line": 135,
    "end_line": 139,
    "comment": "/** \n * Compares the relative fitness of two Executables in terms of how well they match a set of runtime parameter types, such that a list ordered by the results of the comparison would return the best match first (least).\n * @param left the \"left\" Executable\n * @param right the \"right\" Executable\n * @param actual the runtime parameter types to match against{@code left}/ {@code right}\n * @return int consistent with {@code compare} semantics\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberUtils.getTotalTransformationCost#148",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MemberUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MemberUtils",
    "signature": "org.apache.commons.lang3.reflect.MemberUtils.getTotalTransformationCost(java.lang.Class\u003c?\u003e[], org.apache.commons.lang3.reflect.MemberUtils.Executable)",
    "snippet": "private static float getTotalTransformationCost(final Class\u003c?\u003e[] srcArgs, final Executable executable) {\n        final Class\u003c?\u003e[] destArgs \u003d executable.getParameterTypes();\n        final boolean isVarArgs \u003d executable.isVarArgs();\n\n        // \"source\" and \"destination\" are the actual and declared args respectively.\n        float totalCost \u003d 0.0f;\n        final long normalArgsLen \u003d isVarArgs ? destArgs.length-1 : destArgs.length;\n        if (srcArgs.length \u003c normalArgsLen) {\n            return Float.MAX_VALUE;\n        }\n        for (int i \u003d 0; i \u003c normalArgsLen; i++) {\n            totalCost +\u003d getObjectTransformationCost(srcArgs[i], destArgs[i]);\n        }\n        if (isVarArgs) {\n            // When isVarArgs is true, srcArgs and dstArgs may differ in length.\n            // There are two special cases to consider:\n            final boolean noVarArgsPassed \u003d srcArgs.length \u003c destArgs.length;\n            final boolean explicitArrayForVarags \u003d srcArgs.length \u003d\u003d destArgs.length \u0026\u0026 srcArgs[srcArgs.length-1].isArray();\n\n            final float varArgsCost \u003d 0.001f;\n            final Class\u003c?\u003e destClass \u003d destArgs[destArgs.length-1].getComponentType();\n            if (noVarArgsPassed) {\n                // When no varargs passed, the best match is the most generic matching type, not the most specific.\n                totalCost +\u003d getObjectTransformationCost(destClass, Object.class) + varArgsCost;\n            } else if (explicitArrayForVarags) {\n                final Class\u003c?\u003e sourceClass \u003d srcArgs[srcArgs.length-1].getComponentType();\n                totalCost +\u003d getObjectTransformationCost(sourceClass, destClass) + varArgsCost;\n            } else {\n                // This is typical varargs case.\n                for (int i \u003d destArgs.length-1; i \u003c srcArgs.length; i++) {\n                    final Class\u003c?\u003e srcClass \u003d srcArgs[i];\n                    totalCost +\u003d getObjectTransformationCost(srcClass, destClass) + varArgsCost;\n                }\n            }\n        }\n        return totalCost;\n    }",
    "begin_line": 148,
    "end_line": 184,
    "comment": "/** \n * Returns the sum of the object transformation cost for each class in the source argument list.\n * @param srcArgs The source arguments\n * @param executable The executable to calculate transformation costs for\n * @return The total transformation cost\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberUtils.getObjectTransformationCost#194",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MemberUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MemberUtils",
    "signature": "org.apache.commons.lang3.reflect.MemberUtils.getObjectTransformationCost(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "private static float getObjectTransformationCost(Class\u003c?\u003e srcClass, final Class\u003c?\u003e destClass) {\n        if (destClass.isPrimitive()) {\n            return getPrimitivePromotionCost(srcClass, destClass);\n        }\n        float cost \u003d 0.0f;\n        while (srcClass !\u003d null \u0026\u0026 !destClass.equals(srcClass)) {\n            if (destClass.isInterface() \u0026\u0026 ClassUtils.isAssignable(srcClass, destClass)) {\n                // slight penalty for interface match.\n                // we still want an exact match to override an interface match,\n                // but\n                // an interface match should override anything where we have to\n                // get a superclass.\n                cost +\u003d 0.25f;\n                break;\n            }\n            cost++;\n            srcClass \u003d srcClass.getSuperclass();\n        }\n        /*\n         * If the destination class is null, we\u0027ve traveled all the way up to\n         * an Object match. We\u0027ll penalize this by adding 1.5 to the cost.\n         */\n        if (srcClass \u003d\u003d null) {\n            cost +\u003d 1.5f;\n        }\n        return cost;\n    }",
    "begin_line": 194,
    "end_line": 220,
    "comment": "/** \n * Gets the number of steps required needed to turn the source class into the destination class. This represents the number of steps in the object hierarchy graph.\n * @param srcClass The source class\n * @param destClass The destination class\n * @return The cost of transforming an object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberUtils.getPrimitivePromotionCost#229",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MemberUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MemberUtils",
    "signature": "org.apache.commons.lang3.reflect.MemberUtils.getPrimitivePromotionCost(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "private static float getPrimitivePromotionCost(final Class\u003c?\u003e srcClass, final Class\u003c?\u003e destClass) {\n        float cost \u003d 0.0f;\n        Class\u003c?\u003e cls \u003d srcClass;\n        if (!cls.isPrimitive()) {\n            // slight unwrapping penalty\n            cost +\u003d 0.1f;\n            cls \u003d ClassUtils.wrapperToPrimitive(cls);\n        }\n        for (int i \u003d 0; cls !\u003d destClass \u0026\u0026 i \u003c ORDERED_PRIMITIVE_TYPES.length; i++) {\n            if (cls \u003d\u003d ORDERED_PRIMITIVE_TYPES[i]) {\n                cost +\u003d 0.1f;\n                if (i \u003c ORDERED_PRIMITIVE_TYPES.length - 1) {\n                    cls \u003d ORDERED_PRIMITIVE_TYPES[i + 1];\n                }\n            }\n        }\n        return cost;\n    }",
    "begin_line": 229,
    "end_line": 246,
    "comment": "/** \n * Gets the number of steps required to promote a primitive number to another type.\n * @param srcClass the (primitive) source class\n * @param destClass the (primitive) destination class\n * @return The cost of promoting the primitive\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberUtils.isMatchingMethod#248",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MemberUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MemberUtils",
    "signature": "org.apache.commons.lang3.reflect.MemberUtils.isMatchingMethod(java.lang.reflect.Method, java.lang.Class\u003c?\u003e[])",
    "snippet": "static boolean isMatchingMethod(final Method method, final Class\u003c?\u003e[] parameterTypes) {\n      return isMatchingExecutable(Executable.of(method), parameterTypes);\n    }",
    "begin_line": 248,
    "end_line": 250,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberUtils.isMatchingConstructor#252",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MemberUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MemberUtils",
    "signature": "org.apache.commons.lang3.reflect.MemberUtils.isMatchingConstructor(java.lang.reflect.Constructor\u003c?\u003e, java.lang.Class\u003c?\u003e[])",
    "snippet": "static boolean isMatchingConstructor(final Constructor\u003c?\u003e method, final Class\u003c?\u003e[] parameterTypes) {\n      return isMatchingExecutable(Executable.of(method), parameterTypes);\n    }",
    "begin_line": 252,
    "end_line": 254,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberUtils.isMatchingExecutable#256",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MemberUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MemberUtils",
    "signature": "org.apache.commons.lang3.reflect.MemberUtils.isMatchingExecutable(org.apache.commons.lang3.reflect.MemberUtils.Executable, java.lang.Class\u003c?\u003e[])",
    "snippet": "private static boolean isMatchingExecutable(final Executable method, final Class\u003c?\u003e[] parameterTypes) {\n        final Class\u003c?\u003e[] methodParameterTypes \u003d method.getParameterTypes();\n        if (ClassUtils.isAssignable(parameterTypes, methodParameterTypes, true)) {\n            return true;\n        }\n\n        if (method.isVarArgs()) {\n            int i;\n            for (i \u003d 0; i \u003c methodParameterTypes.length - 1 \u0026\u0026 i \u003c parameterTypes.length; i++) {\n                if (!ClassUtils.isAssignable(parameterTypes[i], methodParameterTypes[i], true)) {\n                    return false;\n                }\n            }\n            final Class\u003c?\u003e varArgParameterType \u003d methodParameterTypes[methodParameterTypes.length - 1].getComponentType();\n            for (; i \u003c parameterTypes.length; i++) {\n                if (!ClassUtils.isAssignable(parameterTypes[i], varArgParameterType, true)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        return false;\n    }",
    "begin_line": 256,
    "end_line": 279,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Executable.of#289",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MemberUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MemberUtils",
    "signature": "org.apache.commons.lang3.reflect.MemberUtils.of(java.lang.reflect.Method)",
    "snippet": "private static Executable of(final Method method) {\n          return new Executable(method);\n      }",
    "begin_line": 289,
    "end_line": 291,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Executable.of#293",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MemberUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MemberUtils",
    "signature": "org.apache.commons.lang3.reflect.MemberUtils.of(java.lang.reflect.Constructor\u003c?\u003e)",
    "snippet": "private static Executable of(final Constructor\u003c?\u003e constructor) {\n          return new Executable(constructor);\n      }",
    "begin_line": 293,
    "end_line": 295,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Executable.Executable#297",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MemberUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MemberUtils",
    "signature": "org.apache.commons.lang3.reflect.MemberUtils.Executable(java.lang.reflect.Method)",
    "snippet": "private Executable(final Method method) {\n        parameterTypes \u003d method.getParameterTypes();\n        isVarArgs \u003d method.isVarArgs();\n      }",
    "begin_line": 297,
    "end_line": 300,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Executable.Executable#302",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MemberUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MemberUtils",
    "signature": "org.apache.commons.lang3.reflect.MemberUtils.Executable(java.lang.reflect.Constructor\u003c?\u003e)",
    "snippet": "private Executable(final Constructor\u003c?\u003e constructor) {\n        parameterTypes \u003d constructor.getParameterTypes();\n        isVarArgs \u003d constructor.isVarArgs();\n      }",
    "begin_line": 302,
    "end_line": 305,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Executable.getParameterTypes#307",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MemberUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MemberUtils",
    "signature": "org.apache.commons.lang3.reflect.MemberUtils.getParameterTypes()",
    "snippet": "public Class\u003c?\u003e[] getParameterTypes() {\n          return parameterTypes;\n      }",
    "begin_line": 307,
    "end_line": 309,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Executable.isVarArgs#311",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MemberUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MemberUtils",
    "signature": "org.apache.commons.lang3.reflect.MemberUtils.isVarArgs()",
    "snippet": "public boolean isVarArgs() {\n          return isVarArgs;\n      }",
    "begin_line": 311,
    "end_line": 313,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.MethodUtils#70",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.MethodUtils()",
    "snippet": "public MethodUtils() {\n        super();\n    }",
    "begin_line": 70,
    "end_line": 72,
    "comment": "/** \n * \u003cp\u003e {@link MethodUtils} instances should NOT be constructed in standard programming.Instead, the class should be used as {@code MethodUtils.getAccessibleMethod(method)}.\u003c/p\u003e \u003cp\u003eThis constructor is  {@code public} to permit tools that require a JavaBeaninstance to operate.\u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.invokeMethod#93",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(java.lang.Object, java.lang.String)",
    "snippet": "public static Object invokeMethod(final Object object, final String methodName) throws NoSuchMethodException,\n            IllegalAccessException, InvocationTargetException {\n        return invokeMethod(object, methodName, ArrayUtils.EMPTY_OBJECT_ARRAY, null);\n    }",
    "begin_line": 93,
    "end_line": 96,
    "comment": "/** \n * \u003cp\u003eInvokes a named method without parameters.\u003c/p\u003e \u003cp\u003eThis method delegates the method search to  {@link #getMatchingAccessibleMethod(Class,String,Class[])}.\u003c/p\u003e \u003cp\u003eThis is a convenient wrapper for {@link #invokeMethod(Object object,String methodName,Object[] args,Class[] parameterTypes)}. \u003c/p\u003e\n * @param object invoke method on this object\n * @param methodName get method with this name\n * @return The value returned by the invoked method\n * @throws NoSuchMethodException if there is no such accessible method\n * @throws InvocationTargetException wraps an exception thrown by the method invoked\n * @throws IllegalAccessException if the requested method is not accessible via reflection\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.invokeMethod#116",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(java.lang.Object, boolean, java.lang.String)",
    "snippet": "public static Object invokeMethod(final Object object, final boolean forceAccess, final String methodName)\n            throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {\n        return invokeMethod(object, forceAccess, methodName, ArrayUtils.EMPTY_OBJECT_ARRAY, null);\n    }",
    "begin_line": 116,
    "end_line": 119,
    "comment": "/** \n * \u003cp\u003eInvokes a named method without parameters.\u003c/p\u003e \u003cp\u003eThis is a convenient wrapper for {@link #invokeMethod(Object object,boolean forceAccess,String methodName,Object[] args,Class[] parameterTypes)}. \u003c/p\u003e\n * @param object invoke method on this object\n * @param forceAccess force access to invoke method even if it\u0027s not accessible\n * @param methodName get method with this name\n * @return The value returned by the invoked method\n * @throws NoSuchMethodException if there is no such accessible method\n * @throws InvocationTargetException wraps an exception thrown by the method invoked\n * @throws IllegalAccessException if the requested method is not accessible via reflection\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.invokeMethod#143",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(java.lang.Object, java.lang.String, java.lang.Object)",
    "snippet": "public static Object invokeMethod(final Object object, final String methodName,\n            Object... args) throws NoSuchMethodException,\n            IllegalAccessException, InvocationTargetException {\n        args \u003d ArrayUtils.nullToEmpty(args);\n        final Class\u003c?\u003e[] parameterTypes \u003d ClassUtils.toClass(args);\n        return invokeMethod(object, methodName, args, parameterTypes);\n    }",
    "begin_line": 143,
    "end_line": 149,
    "comment": "/** \n * \u003cp\u003eInvokes a named method whose parameter type matches the object type.\u003c/p\u003e \u003cp\u003eThis method delegates the method search to  {@link #getMatchingAccessibleMethod(Class,String,Class[])}.\u003c/p\u003e \u003cp\u003eThis method supports calls to methods taking primitive parameters via passing in wrapping classes. So, for example, a  {@code Boolean} objectwould match a  {@code boolean} primitive.\u003c/p\u003e\u003cp\u003eThis is a convenient wrapper for {@link #invokeMethod(Object object,String methodName,Object[] args,Class[] parameterTypes)}. \u003c/p\u003e\n * @param object invoke method on this object\n * @param methodName get method with this name\n * @param args use these arguments - treat null as empty array\n * @return The value returned by the invoked method\n * @throws NoSuchMethodException if there is no such accessible method\n * @throws InvocationTargetException wraps an exception thrown by the method invoked\n * @throws IllegalAccessException if the requested method is not accessible via reflection\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.invokeMethod#174",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(java.lang.Object, boolean, java.lang.String, java.lang.Object)",
    "snippet": "public static Object invokeMethod(final Object object, final boolean forceAccess, final String methodName,\n            Object... args) throws NoSuchMethodException,\n            IllegalAccessException, InvocationTargetException {\n        args \u003d ArrayUtils.nullToEmpty(args);\n        final Class\u003c?\u003e[] parameterTypes \u003d ClassUtils.toClass(args);\n        return invokeMethod(object, forceAccess, methodName, args, parameterTypes);\n    }",
    "begin_line": 174,
    "end_line": 180,
    "comment": "/** \n * \u003cp\u003eInvokes a named method whose parameter type matches the object type.\u003c/p\u003e \u003cp\u003eThis method supports calls to methods taking primitive parameters via passing in wrapping classes. So, for example, a  {@code Boolean} objectwould match a  {@code boolean} primitive.\u003c/p\u003e\u003cp\u003eThis is a convenient wrapper for {@link #invokeMethod(Object object,boolean forceAccess,String methodName,Object[] args,Class[] parameterTypes)}. \u003c/p\u003e\n * @param object invoke method on this object\n * @param forceAccess force access to invoke method even if it\u0027s not accessible\n * @param methodName get method with this name\n * @param args use these arguments - treat null as empty array\n * @return The value returned by the invoked method\n * @throws NoSuchMethodException if there is no such accessible method\n * @throws InvocationTargetException wraps an exception thrown by the method invoked\n * @throws IllegalAccessException if the requested method is not accessible via reflection\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.invokeMethod#201",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(java.lang.Object, boolean, java.lang.String, java.lang.Object[], java.lang.Class\u003c?\u003e[])",
    "snippet": "public static Object invokeMethod(final Object object, final boolean forceAccess, final String methodName,\n            Object[] args, Class\u003c?\u003e[] parameterTypes)\n            throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {\n        parameterTypes \u003d ArrayUtils.nullToEmpty(parameterTypes);\n        args \u003d ArrayUtils.nullToEmpty(args);\n\n        final String messagePrefix;\n        Method method \u003d null;\n\n        if (forceAccess) {\n            messagePrefix \u003d \"No such method: \";\n            method \u003d getMatchingMethod(object.getClass(),\n                    methodName, parameterTypes);\n            if (method !\u003d null \u0026\u0026 !method.isAccessible()) {\n                method.setAccessible(true);\n            }\n        } else {\n            messagePrefix \u003d \"No such accessible method: \";\n            method \u003d getMatchingAccessibleMethod(object.getClass(),\n                    methodName, parameterTypes);\n        }\n\n        if (method \u003d\u003d null) {\n            throw new NoSuchMethodException(messagePrefix\n                    + methodName + \"() on object: \"\n                    + object.getClass().getName());\n        }\n        args \u003d toVarArgs(method, args);\n\n        return method.invoke(object, args);\n    }",
    "begin_line": 201,
    "end_line": 231,
    "comment": "/** \n * \u003cp\u003eInvokes a named method whose parameter type matches the object type.\u003c/p\u003e \u003cp\u003eThis method supports calls to methods taking primitive parameters via passing in wrapping classes. So, for example, a  {@code Boolean} objectwould match a  {@code boolean} primitive.\u003c/p\u003e\n * @param object invoke method on this object\n * @param forceAccess force access to invoke method even if it\u0027s not accessible\n * @param methodName get method with this name\n * @param args use these arguments - treat null as empty array\n * @param parameterTypes match these parameters - treat null as empty array\n * @return The value returned by the invoked method\n * @throws NoSuchMethodException if there is no such accessible method\n * @throws InvocationTargetException wraps an exception thrown by the method invoked\n * @throws IllegalAccessException if the requested method is not accessible via reflection\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.invokeMethod#252",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Class\u003c?\u003e[])",
    "snippet": "public static Object invokeMethod(final Object object, final String methodName,\n            final Object[] args, final Class\u003c?\u003e[] parameterTypes)\n            throws NoSuchMethodException, IllegalAccessException,\n            InvocationTargetException {\n        return invokeMethod(object, false, methodName, args, parameterTypes);\n    }",
    "begin_line": 252,
    "end_line": 257,
    "comment": "/** \n * \u003cp\u003eInvokes a named method whose parameter type matches the object type.\u003c/p\u003e \u003cp\u003eThis method delegates the method search to  {@link #getMatchingAccessibleMethod(Class,String,Class[])}.\u003c/p\u003e \u003cp\u003eThis method supports calls to methods taking primitive parameters via passing in wrapping classes. So, for example, a  {@code Boolean} objectwould match a  {@code boolean} primitive.\u003c/p\u003e\n * @param object invoke method on this object\n * @param methodName get method with this name\n * @param args use these arguments - treat null as empty array\n * @param parameterTypes match these parameters - treat null as empty array\n * @return The value returned by the invoked method\n * @throws NoSuchMethodException if there is no such accessible method\n * @throws InvocationTargetException wraps an exception thrown by the method invoked\n * @throws IllegalAccessException if the requested method is not accessible via reflection\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.invokeExactMethod#278",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.invokeExactMethod(java.lang.Object, java.lang.String)",
    "snippet": "public static Object invokeExactMethod(final Object object, final String methodName) throws NoSuchMethodException,\n            IllegalAccessException, InvocationTargetException {\n        return invokeExactMethod(object, methodName, ArrayUtils.EMPTY_OBJECT_ARRAY, null);\n    }",
    "begin_line": 278,
    "end_line": 281,
    "comment": "/** \n * \u003cp\u003eInvokes a method whose parameter types match exactly the object types.\u003c/p\u003e \u003cp\u003eThis uses reflection to invoke the method obtained from a call to {@link #getAccessibleMethod}(Class, String, Class[])}.\u003c/p\u003e\n * @param object invoke method on this object\n * @param methodName get method with this name\n * @return The value returned by the invoked method\n * @throws NoSuchMethodException if there is no such accessible method\n * @throws InvocationTargetException wraps an exception thrown by themethod invoked\n * @throws IllegalAccessException if the requested method is not accessiblevia reflection\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.invokeExactMethod#300",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.invokeExactMethod(java.lang.Object, java.lang.String, java.lang.Object)",
    "snippet": "public static Object invokeExactMethod(final Object object, final String methodName,\n            Object... args) throws NoSuchMethodException,\n            IllegalAccessException, InvocationTargetException {\n        args \u003d ArrayUtils.nullToEmpty(args);\n        final Class\u003c?\u003e[] parameterTypes \u003d ClassUtils.toClass(args);\n        return invokeExactMethod(object, methodName, args, parameterTypes);\n    }",
    "begin_line": 300,
    "end_line": 306,
    "comment": "/** \n * \u003cp\u003eInvokes a method with no parameters.\u003c/p\u003e \u003cp\u003eThis uses reflection to invoke the method obtained from a call to {@link #getAccessibleMethod}(Class, String, Class[])}.\u003c/p\u003e\n * @param object invoke method on this object\n * @param methodName get method with this name\n * @param args use these arguments - treat null as empty array\n * @return The value returned by the invoked method\n * @throws NoSuchMethodException if there is no such accessible method\n * @throws InvocationTargetException wraps an exception thrown by themethod invoked\n * @throws IllegalAccessException if the requested method is not accessiblevia reflection\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.invokeExactMethod#327",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.invokeExactMethod(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Class\u003c?\u003e[])",
    "snippet": "public static Object invokeExactMethod(final Object object, final String methodName,\n            Object[] args, Class\u003c?\u003e[] parameterTypes)\n            throws NoSuchMethodException, IllegalAccessException,\n            InvocationTargetException {\n        args \u003d ArrayUtils.nullToEmpty(args);\n        parameterTypes \u003d ArrayUtils.nullToEmpty(parameterTypes);\n        final Method method \u003d getAccessibleMethod(object.getClass(), methodName,\n                parameterTypes);\n        if (method \u003d\u003d null) {\n            throw new NoSuchMethodException(\"No such accessible method: \"\n                    + methodName + \"() on object: \"\n                    + object.getClass().getName());\n        }\n        return method.invoke(object, args);\n    }",
    "begin_line": 327,
    "end_line": 341,
    "comment": "/** \n * \u003cp\u003eInvokes a method whose parameter types match exactly the parameter types given.\u003c/p\u003e \u003cp\u003eThis uses reflection to invoke the method obtained from a call to {@link #getAccessibleMethod(Class,String,Class[])}.\u003c/p\u003e\n * @param object invoke method on this object\n * @param methodName get method with this name\n * @param args use these arguments - treat null as empty array\n * @param parameterTypes match these parameters - treat {@code null} as empty array\n * @return The value returned by the invoked method\n * @throws NoSuchMethodException if there is no such accessible method\n * @throws InvocationTargetException wraps an exception thrown by themethod invoked\n * @throws IllegalAccessException if the requested method is not accessiblevia reflection\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.invokeExactStaticMethod#362",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.invokeExactStaticMethod(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Object[], java.lang.Class\u003c?\u003e[])",
    "snippet": "public static Object invokeExactStaticMethod(final Class\u003c?\u003e cls, final String methodName,\n            Object[] args, Class\u003c?\u003e[] parameterTypes)\n            throws NoSuchMethodException, IllegalAccessException,\n            InvocationTargetException {\n        args \u003d ArrayUtils.nullToEmpty(args);\n        parameterTypes \u003d ArrayUtils.nullToEmpty(parameterTypes);\n        final Method method \u003d getAccessibleMethod(cls, methodName, parameterTypes);\n        if (method \u003d\u003d null) {\n            throw new NoSuchMethodException(\"No such accessible method: \"\n                    + methodName + \"() on class: \" + cls.getName());\n        }\n        return method.invoke(null, args);\n    }",
    "begin_line": 362,
    "end_line": 374,
    "comment": "/** \n * \u003cp\u003eInvokes a  {@code static} method whose parameter types match exactly the parametertypes given.\u003c/p\u003e \u003cp\u003eThis uses reflection to invoke the method obtained from a call to {@link #getAccessibleMethod(Class,String,Class[])}.\u003c/p\u003e\n * @param cls invoke static method on this class\n * @param methodName get method with this name\n * @param args use these arguments - treat {@code null} as empty array\n * @param parameterTypes match these parameters - treat {@code null} as empty array\n * @return The value returned by the invoked method\n * @throws NoSuchMethodException if there is no such accessible method\n * @throws InvocationTargetException wraps an exception thrown by themethod invoked\n * @throws IllegalAccessException if the requested method is not accessiblevia reflection\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.invokeStaticMethod#400",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.invokeStaticMethod(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Object)",
    "snippet": "public static Object invokeStaticMethod(final Class\u003c?\u003e cls, final String methodName,\n            Object... args) throws NoSuchMethodException,\n            IllegalAccessException, InvocationTargetException {\n        args \u003d ArrayUtils.nullToEmpty(args);\n        final Class\u003c?\u003e[] parameterTypes \u003d ClassUtils.toClass(args);\n        return invokeStaticMethod(cls, methodName, args, parameterTypes);\n    }",
    "begin_line": 400,
    "end_line": 406,
    "comment": "/** \n * \u003cp\u003eInvokes a named  {@code static} method whose parameter type matches the object type.\u003c/p\u003e\u003cp\u003eThis method delegates the method search to  {@link #getMatchingAccessibleMethod(Class,String,Class[])}.\u003c/p\u003e \u003cp\u003eThis method supports calls to methods taking primitive parameters via passing in wrapping classes. So, for example, a  {@code Boolean} classwould match a  {@code boolean} primitive.\u003c/p\u003e\u003cp\u003eThis is a convenient wrapper for {@link #invokeStaticMethod(Class,String,Object[],Class[])}. \u003c/p\u003e\n * @param cls invoke static method on this class\n * @param methodName get method with this name\n * @param args use these arguments - treat {@code null} as empty array\n * @return The value returned by the invoked method\n * @throws NoSuchMethodException if there is no such accessible method\n * @throws InvocationTargetException wraps an exception thrown by themethod invoked\n * @throws IllegalAccessException if the requested method is not accessiblevia reflection\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.invokeStaticMethod#430",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.invokeStaticMethod(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Object[], java.lang.Class\u003c?\u003e[])",
    "snippet": "public static Object invokeStaticMethod(final Class\u003c?\u003e cls, final String methodName,\n            Object[] args, Class\u003c?\u003e[] parameterTypes)\n            throws NoSuchMethodException, IllegalAccessException,\n            InvocationTargetException {\n        args \u003d ArrayUtils.nullToEmpty(args);\n        parameterTypes \u003d ArrayUtils.nullToEmpty(parameterTypes);\n        final Method method \u003d getMatchingAccessibleMethod(cls, methodName,\n                parameterTypes);\n        if (method \u003d\u003d null) {\n            throw new NoSuchMethodException(\"No such accessible method: \"\n                    + methodName + \"() on class: \" + cls.getName());\n        }\n        args \u003d toVarArgs(method, args);\n        return method.invoke(null, args);\n    }",
    "begin_line": 430,
    "end_line": 444,
    "comment": "/** \n * \u003cp\u003eInvokes a named  {@code static} method whose parameter type matches the object type.\u003c/p\u003e\u003cp\u003eThis method delegates the method search to  {@link #getMatchingAccessibleMethod(Class,String,Class[])}.\u003c/p\u003e \u003cp\u003eThis method supports calls to methods taking primitive parameters via passing in wrapping classes. So, for example, a  {@code Boolean} classwould match a  {@code boolean} primitive.\u003c/p\u003e\n * @param cls invoke static method on this class\n * @param methodName get method with this name\n * @param args use these arguments - treat {@code null} as empty array\n * @param parameterTypes match these parameters - treat {@code null} as empty array\n * @return The value returned by the invoked method\n * @throws NoSuchMethodException if there is no such accessible method\n * @throws InvocationTargetException wraps an exception thrown by themethod invoked\n * @throws IllegalAccessException if the requested method is not accessiblevia reflection\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.toVarArgs#446",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.toVarArgs(java.lang.reflect.Method, java.lang.Object[])",
    "snippet": "private static Object[] toVarArgs(final Method method, Object[] args) {\n        if (method.isVarArgs()) {\n            final Class\u003c?\u003e[] methodParameterTypes \u003d method.getParameterTypes();\n            args \u003d getVarArgs(args, methodParameterTypes);\n        }\n        return args;\n    }",
    "begin_line": 446,
    "end_line": 452,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.getVarArgs#464",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.getVarArgs(java.lang.Object[], java.lang.Class\u003c?\u003e[])",
    "snippet": "static Object[] getVarArgs(final Object[] args, final Class\u003c?\u003e[] methodParameterTypes) {\n        if (args.length \u003d\u003d methodParameterTypes.length\n                \u0026\u0026 args[args.length - 1].getClass().equals(methodParameterTypes[methodParameterTypes.length - 1])) {\n            // The args array is already in the canonical form for the method.\n            return args;\n        }\n\n        // Construct a new array matching the method\u0027s declared parameter types.\n        final Object[] newArgs \u003d new Object[methodParameterTypes.length];\n\n        // Copy the normal (non-varargs) parameters\n        System.arraycopy(args, 0, newArgs, 0, methodParameterTypes.length - 1);\n\n        // Construct a new array for the variadic parameters\n        final Class\u003c?\u003e varArgComponentType \u003d methodParameterTypes[methodParameterTypes.length - 1].getComponentType();\n        final int varArgLength \u003d args.length - methodParameterTypes.length + 1;\n\n        Object varArgsArray \u003d Array.newInstance(ClassUtils.primitiveToWrapper(varArgComponentType), varArgLength);\n        // Copy the variadic arguments into the varargs array.\n        System.arraycopy(args, methodParameterTypes.length - 1, varArgsArray, 0, varArgLength);\n\n        if (varArgComponentType.isPrimitive()) {\n            // unbox from wrapper type to primitive type\n            varArgsArray \u003d ArrayUtils.toPrimitive(varArgsArray);\n        }\n\n        // Store the varargs array in the last position of the array to return\n        newArgs[methodParameterTypes.length - 1] \u003d varArgsArray;\n\n        // Return the canonical varargs array.\n        return newArgs;\n    }",
    "begin_line": 464,
    "end_line": 495,
    "comment": "/** \n * \u003cp\u003eGiven an arguments array passed to a varargs method, return an array of arguments in the canonical form, i.e. an array with the declared number of parameters, and whose last parameter is an array of the varargs type. \u003c/p\u003e\n * @param args the array of arguments passed to the varags method\n * @param methodParameterTypes the declared array of method parameter types\n * @return an array of the variadic arguments passed to the method\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.invokeExactStaticMethod#515",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.invokeExactStaticMethod(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Object)",
    "snippet": "public static Object invokeExactStaticMethod(final Class\u003c?\u003e cls, final String methodName,\n            Object... args) throws NoSuchMethodException,\n            IllegalAccessException, InvocationTargetException {\n        args \u003d ArrayUtils.nullToEmpty(args);\n        final Class\u003c?\u003e[] parameterTypes \u003d ClassUtils.toClass(args);\n        return invokeExactStaticMethod(cls, methodName, args, parameterTypes);\n    }",
    "begin_line": 515,
    "end_line": 521,
    "comment": "/** \n * \u003cp\u003eInvokes a  {@code static} method whose parameter types match exactly the objecttypes.\u003c/p\u003e \u003cp\u003eThis uses reflection to invoke the method obtained from a call to {@link #getAccessibleMethod(Class,String,Class[])}.\u003c/p\u003e\n * @param cls invoke static method on this class\n * @param methodName get method with this name\n * @param args use these arguments - treat {@code null} as empty array\n * @return The value returned by the invoked method\n * @throws NoSuchMethodException if there is no such accessible method\n * @throws InvocationTargetException wraps an exception thrown by themethod invoked\n * @throws IllegalAccessException if the requested method is not accessiblevia reflection\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.getAccessibleMethod#535",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.getAccessibleMethod(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Class\u003c?\u003e)",
    "snippet": "public static Method getAccessibleMethod(final Class\u003c?\u003e cls, final String methodName,\n            final Class\u003c?\u003e... parameterTypes) {\n        try {\n            return getAccessibleMethod(cls.getMethod(methodName,\n                    parameterTypes));\n        } catch (final NoSuchMethodException e) {\n            return null;\n        }\n    }",
    "begin_line": 535,
    "end_line": 543,
    "comment": "/** \n * \u003cp\u003eReturns an accessible method (that is, one that can be invoked via reflection) with given name and parameters. If no such method can be found, return  {@code null}. This is just a convenience wrapper for {@link #getAccessibleMethod(Method)}.\u003c/p\u003e\n * @param cls get method from this class\n * @param methodName get method with this name\n * @param parameterTypes with these parameters types\n * @return The accessible method\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.getAccessibleMethod#553",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.getAccessibleMethod(java.lang.reflect.Method)",
    "snippet": "public static Method getAccessibleMethod(Method method) {\n        if (!MemberUtils.isAccessible(method)) {\n            return null;\n        }\n        // If the declaring class is public, we are done\n        final Class\u003c?\u003e cls \u003d method.getDeclaringClass();\n        if (Modifier.isPublic(cls.getModifiers())) {\n            return method;\n        }\n        final String methodName \u003d method.getName();\n        final Class\u003c?\u003e[] parameterTypes \u003d method.getParameterTypes();\n\n        // Check the implemented interfaces and subinterfaces\n        method \u003d getAccessibleMethodFromInterfaceNest(cls, methodName,\n                parameterTypes);\n\n        // Check the superclass chain\n        if (method \u003d\u003d null) {\n            method \u003d getAccessibleMethodFromSuperclass(cls, methodName,\n                    parameterTypes);\n        }\n        return method;\n    }",
    "begin_line": 553,
    "end_line": 575,
    "comment": "/** \n * \u003cp\u003eReturns an accessible method (that is, one that can be invoked via reflection) that implements the specified Method. If no such method can be found, return  {@code null}.\u003c/p\u003e\n * @param method The method that we wish to call\n * @return The accessible method\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.getAccessibleMethodFromSuperclass#587",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.getAccessibleMethodFromSuperclass(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Class\u003c?\u003e)",
    "snippet": "private static Method getAccessibleMethodFromSuperclass(final Class\u003c?\u003e cls,\n            final String methodName, final Class\u003c?\u003e... parameterTypes) {\n        Class\u003c?\u003e parentClass \u003d cls.getSuperclass();\n        while (parentClass !\u003d null) {\n            if (Modifier.isPublic(parentClass.getModifiers())) {\n                try {\n                    return parentClass.getMethod(methodName, parameterTypes);\n                } catch (final NoSuchMethodException e) {\n                    return null;\n                }\n            }\n            parentClass \u003d parentClass.getSuperclass();\n        }\n        return null;\n    }",
    "begin_line": 587,
    "end_line": 601,
    "comment": "/** \n * \u003cp\u003eReturns an accessible method (that is, one that can be invoked via reflection) by scanning through the superclasses. If no such method can be found, return  {@code null}.\u003c/p\u003e\n * @param cls Class to be checked\n * @param methodName Method name of the method we wish to call\n * @param parameterTypes The parameter type signatures\n * @return the accessible method or {@code null} if not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.getAccessibleMethodFromInterfaceNest#618",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.getAccessibleMethodFromInterfaceNest(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Class\u003c?\u003e)",
    "snippet": "private static Method getAccessibleMethodFromInterfaceNest(Class\u003c?\u003e cls,\n            final String methodName, final Class\u003c?\u003e... parameterTypes) {\n        // Search up the superclass chain\n        for (; cls !\u003d null; cls \u003d cls.getSuperclass()) {\n\n            // Check the implemented interfaces of the parent class\n            final Class\u003c?\u003e[] interfaces \u003d cls.getInterfaces();\n            for (final Class\u003c?\u003e anInterface : interfaces) {\n                // Is this interface public?\n                if (!Modifier.isPublic(anInterface.getModifiers())) {\n                    continue;\n                }\n                // Does the method exist on this interface?\n                try {\n                    return anInterface.getDeclaredMethod(methodName,\n                            parameterTypes);\n                } catch (final NoSuchMethodException e) { // NOPMD\n                    /*\n                     * Swallow, if no method is found after the loop then this\n                     * method returns null.\n                     */\n                }\n                // Recursively check our parent interfaces\n                final Method method \u003d getAccessibleMethodFromInterfaceNest(anInterface,\n                        methodName, parameterTypes);\n                if (method !\u003d null) {\n                    return method;\n                }\n            }\n        }\n        return null;\n    }",
    "begin_line": 618,
    "end_line": 649,
    "comment": "/** \n * \u003cp\u003eReturns an accessible method (that is, one that can be invoked via reflection) that implements the specified method, by scanning through all implemented interfaces and subinterfaces. If no such method can be found, return  {@code null}.\u003c/p\u003e \u003cp\u003eThere isn\u0027t any good reason why this method must be  {@code private}. It is because there doesn\u0027t seem any reason why other classes should call this rather than the higher level methods.\u003c/p\u003e\n * @param cls Parent class for the interfaces to be checked\n * @param methodName Method name of the method we wish to call\n * @param parameterTypes The parameter type signatures\n * @return the accessible method or {@code null} if not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.getMatchingAccessibleMethod#673",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.getMatchingAccessibleMethod(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Class\u003c?\u003e)",
    "snippet": "public static Method getMatchingAccessibleMethod(final Class\u003c?\u003e cls,\n            final String methodName, final Class\u003c?\u003e... parameterTypes) {\n        try {\n            final Method method \u003d cls.getMethod(methodName, parameterTypes);\n            MemberUtils.setAccessibleWorkaround(method);\n            return method;\n        } catch (final NoSuchMethodException e) { // NOPMD - Swallow the exception\n        }\n        // search through all methods\n        Method bestMatch \u003d null;\n        final Method[] methods \u003d cls.getMethods();\n        for (final Method method : methods) {\n            // compare name and parameters\n            if (method.getName().equals(methodName) \u0026\u0026\n                    MemberUtils.isMatchingMethod(method, parameterTypes)) {\n                // get accessible version of method\n                final Method accessibleMethod \u003d getAccessibleMethod(method);\n                if (accessibleMethod !\u003d null \u0026\u0026 (bestMatch \u003d\u003d null || MemberUtils.compareMethodFit(\n                            accessibleMethod,\n                            bestMatch,\n                            parameterTypes) \u003c 0)) {\n                    bestMatch \u003d accessibleMethod;\n                }\n            }\n        }\n        if (bestMatch !\u003d null) {\n            MemberUtils.setAccessibleWorkaround(bestMatch);\n        }\n\n        if (bestMatch !\u003d null \u0026\u0026 bestMatch.isVarArgs() \u0026\u0026 bestMatch.getParameterTypes().length \u003e 0 \u0026\u0026 parameterTypes.length \u003e 0) {\n            final Class\u003c?\u003e[] methodParameterTypes \u003d bestMatch.getParameterTypes();\n            final Class\u003c?\u003e methodParameterComponentType \u003d methodParameterTypes[methodParameterTypes.length - 1].getComponentType();\n            final String methodParameterComponentTypeName \u003d ClassUtils.primitiveToWrapper(methodParameterComponentType).getName();\n            final String parameterTypeName \u003d parameterTypes[parameterTypes.length - 1].getName();\n            final String parameterTypeSuperClassName \u003d parameterTypes[parameterTypes.length - 1].getSuperclass().getName();\n\n            if (!methodParameterComponentTypeName.equals(parameterTypeName)\n                    \u0026\u0026 !methodParameterComponentTypeName.equals(parameterTypeSuperClassName)) {\n                return null;\n            }\n        }\n\n        return bestMatch;\n    }",
    "begin_line": 673,
    "end_line": 716,
    "comment": "/** \n * \u003cp\u003eFinds an accessible method that matches the given name and has compatible parameters. Compatible parameters mean that every method parameter is assignable from the given parameters. In other words, it finds a method with the given name that will take the parameters given.\u003c/p\u003e \u003cp\u003eThis method is used by {@link #invokeMethod(Object object,String methodName,Object[] args,Class[] parameterTypes)}. \u003c/p\u003e \u003cp\u003eThis method can match primitive parameter by passing in wrapper classes. For example, a  {@code Boolean} will match a primitive {@code boolean}parameter. \u003c/p\u003e\n * @param cls find method in this class\n * @param methodName find method with this name\n * @param parameterTypes find method with most compatible parameters\n * @return The accessible method\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.getMatchingMethod#728",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.getMatchingMethod(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Class\u003c?\u003e)",
    "snippet": "public static Method getMatchingMethod(final Class\u003c?\u003e cls, final String methodName,\n            final Class\u003c?\u003e... parameterTypes) {\n        Validate.notNull(cls, \"Null class not allowed.\");\n        Validate.notEmpty(methodName, \"Null or blank methodName not allowed.\");\n\n        // Address methods in superclasses\n        Method[] methodArray \u003d cls.getDeclaredMethods();\n        final List\u003cClass\u003c?\u003e\u003e superclassList \u003d ClassUtils.getAllSuperclasses(cls);\n        for (final Class\u003c?\u003e klass : superclassList) {\n            methodArray \u003d ArrayUtils.addAll(methodArray, klass.getDeclaredMethods());\n        }\n\n        Method inexactMatch \u003d null;\n        for (final Method method : methodArray) {\n            if (methodName.equals(method.getName()) \u0026\u0026\n                    Objects.deepEquals(parameterTypes, method.getParameterTypes())) {\n                return method;\n            } else if (methodName.equals(method.getName()) \u0026\u0026\n                    ClassUtils.isAssignable(parameterTypes, method.getParameterTypes(), true)) {\n                if (inexactMatch \u003d\u003d null) {\n                    inexactMatch \u003d method;\n                } else if (distance(parameterTypes, method.getParameterTypes())\n                        \u003c distance(parameterTypes, inexactMatch.getParameterTypes())) {\n                    inexactMatch \u003d method;\n                }\n            }\n\n        }\n        return inexactMatch;\n    }",
    "begin_line": 728,
    "end_line": 757,
    "comment": "/** \n * \u003cp\u003eRetrieves a method whether or not it\u0027s accessible. If no such method can be found, return  {@code null}.\u003c/p\u003e\n * @param cls The class that will be subjected to the method search\n * @param methodName The method that we wish to call\n * @param parameterTypes Argument class types\n * @return The method\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.distance#766",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.distance(java.lang.Class\u003c?\u003e[], java.lang.Class\u003c?\u003e[])",
    "snippet": "private static int distance(final Class\u003c?\u003e[] classArray, final Class\u003c?\u003e[] toClassArray) {\n        int answer \u003d 0;\n\n        if (!ClassUtils.isAssignable(classArray, toClassArray, true)) {\n            return -1;\n        }\n        for (int offset \u003d 0; offset \u003c classArray.length; offset++) {\n            // Note InheritanceUtils.distance() uses different scoring system.\n            if (classArray[offset].equals(toClassArray[offset])) {\n                continue;\n            } else if (ClassUtils.isAssignable(classArray[offset], toClassArray[offset], true)\n                    \u0026\u0026 !ClassUtils.isAssignable(classArray[offset], toClassArray[offset], false)) {\n                answer++;\n            } else {\n                answer \u003d answer + 2;\n            }\n        }\n\n        return answer;\n    }",
    "begin_line": 766,
    "end_line": 785,
    "comment": "/** \n * \u003cp\u003eReturns the aggregate number of inheritance hops between assignable argument class types.  Returns -1 if the arguments aren\u0027t assignable.  Fills a specific purpose for getMatchingMethod and is not generalized.\u003c/p\u003e\n * @param classArray\n * @param toClassArray\n * @return the aggregate number of inheritance hops between assignable argument class types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.getOverrideHierarchy#795",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.getOverrideHierarchy(java.lang.reflect.Method, org.apache.commons.lang3.ClassUtils.Interfaces)",
    "snippet": "public static Set\u003cMethod\u003e getOverrideHierarchy(final Method method, final Interfaces interfacesBehavior) {\n        Validate.notNull(method);\n        final Set\u003cMethod\u003e result \u003d new LinkedHashSet\u003c\u003e();\n        result.add(method);\n\n        final Class\u003c?\u003e[] parameterTypes \u003d method.getParameterTypes();\n\n        final Class\u003c?\u003e declaringClass \u003d method.getDeclaringClass();\n\n        final Iterator\u003cClass\u003c?\u003e\u003e hierarchy \u003d ClassUtils.hierarchy(declaringClass, interfacesBehavior).iterator();\n        //skip the declaring class :P\n        hierarchy.next();\n        hierarchyTraversal: while (hierarchy.hasNext()) {\n            final Class\u003c?\u003e c \u003d hierarchy.next();\n            final Method m \u003d getMatchingAccessibleMethod(c, method.getName(), parameterTypes);\n            if (m \u003d\u003d null) {\n                continue;\n            }\n            if (Arrays.equals(m.getParameterTypes(), parameterTypes)) {\n                // matches without generics\n                result.add(m);\n                continue;\n            }\n            // necessary to get arguments every time in the case that we are including interfaces\n            final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeArguments \u003d TypeUtils.getTypeArguments(declaringClass, m.getDeclaringClass());\n            for (int i \u003d 0; i \u003c parameterTypes.length; i++) {\n                final Type childType \u003d TypeUtils.unrollVariables(typeArguments, method.getGenericParameterTypes()[i]);\n                final Type parentType \u003d TypeUtils.unrollVariables(typeArguments, m.getGenericParameterTypes()[i]);\n                if (!TypeUtils.equals(childType, parentType)) {\n                    continue hierarchyTraversal;\n                }\n            }\n            result.add(m);\n        }\n        return result;\n    }",
    "begin_line": 795,
    "end_line": 830,
    "comment": "/** \n * Gets the hierarchy of overridden methods down to  {@code result} respecting generics.\n * @param method lowest to consider\n * @param interfacesBehavior whether to search interfaces, {@code null} {@code implies} false\n * @return Set\u0026lt;Method\u0026gt; in ascending order from sub- to superclass\n * @throws NullPointerException if the specified method is {@code null}\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.getMethodsWithAnnotation#843",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.getMethodsWithAnnotation(java.lang.Class\u003c?\u003e, java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e)",
    "snippet": "public static Method[] getMethodsWithAnnotation(final Class\u003c?\u003e cls, final Class\u003c? extends Annotation\u003e annotationCls) {\n        return getMethodsWithAnnotation(cls, annotationCls, false, false);\n    }",
    "begin_line": 843,
    "end_line": 845,
    "comment": "/** \n * Gets all class level public methods of the given class that are annotated with the given annotation.\n * @param cls the  {@link Class} to query\n * @param annotationCls the  {@link java.lang.annotation.Annotation} that must be present on a method to be matched\n * @return an array of Methods (possibly empty).\n * @throws IllegalArgumentException if the class or annotation are  {@code null}\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.getMethodsListWithAnnotation#858",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.getMethodsListWithAnnotation(java.lang.Class\u003c?\u003e, java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e)",
    "snippet": "public static List\u003cMethod\u003e getMethodsListWithAnnotation(final Class\u003c?\u003e cls, final Class\u003c? extends Annotation\u003e annotationCls) {\n        return getMethodsListWithAnnotation(cls, annotationCls, false, false);\n    }",
    "begin_line": 858,
    "end_line": 860,
    "comment": "/** \n * Gets all class level public methods of the given class that are annotated with the given annotation.\n * @param cls the  {@link Class} to query\n * @param annotationCls the  {@link Annotation} that must be present on a method to be matched\n * @return a list of Methods (possibly empty).\n * @throws IllegalArgumentException if the class or annotation are  {@code null}\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.getMethodsWithAnnotation#877",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.getMethodsWithAnnotation(java.lang.Class\u003c?\u003e, java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e, boolean, boolean)",
    "snippet": "public static Method[] getMethodsWithAnnotation(final Class\u003c?\u003e cls, final Class\u003c? extends Annotation\u003e annotationCls,\n                                                    final boolean searchSupers, final boolean ignoreAccess) {\n        final List\u003cMethod\u003e annotatedMethodsList \u003d getMethodsListWithAnnotation(cls, annotationCls, searchSupers,\n                ignoreAccess);\n        return annotatedMethodsList.toArray(ArrayUtils.EMPTY_METHOD_ARRAY);\n    }",
    "begin_line": 877,
    "end_line": 882,
    "comment": "/** \n * Gets all methods of the given class that are annotated with the given annotation.\n * @param cls the  {@link Class} to query\n * @param annotationCls the  {@link java.lang.annotation.Annotation} that must be present on a method to be matched\n * @param searchSupers determines if a lookup in the entire inheritance hierarchy of the given class should be performed\n * @param ignoreAccess determines if non public methods should be considered\n * @return an array of Methods (possibly empty).\n * @throws IllegalArgumentException if the class or annotation are  {@code null}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.getMethodsListWithAnnotation#899",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.getMethodsListWithAnnotation(java.lang.Class\u003c?\u003e, java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e, boolean, boolean)",
    "snippet": "public static List\u003cMethod\u003e getMethodsListWithAnnotation(final Class\u003c?\u003e cls,\n                                                            final Class\u003c? extends Annotation\u003e annotationCls,\n                                                            final boolean searchSupers, final boolean ignoreAccess) {\n\n        Validate.isTrue(cls !\u003d null, \"The class must not be null\");\n        Validate.isTrue(annotationCls !\u003d null, \"The annotation class must not be null\");\n        final List\u003cClass\u003c?\u003e\u003e classes \u003d (searchSupers ? getAllSuperclassesAndInterfaces(cls)\n                : new ArrayList\u003c\u003e());\n        classes.add(0, cls);\n        final List\u003cMethod\u003e annotatedMethods \u003d new ArrayList\u003c\u003e();\n        for (final Class\u003c?\u003e acls : classes) {\n            final Method[] methods \u003d (ignoreAccess ? acls.getDeclaredMethods() : acls.getMethods());\n            for (final Method method : methods) {\n                if (method.getAnnotation(annotationCls) !\u003d null) {\n                    annotatedMethods.add(method);\n                }\n            }\n        }\n        return annotatedMethods;\n    }",
    "begin_line": 899,
    "end_line": 918,
    "comment": "/** \n * Gets all methods of the given class that are annotated with the given annotation.\n * @param cls the  {@link Class} to query\n * @param annotationCls the  {@link Annotation} that must be present on a method to be matched\n * @param searchSupers determines if a lookup in the entire inheritance hierarchy of the given class should be performed\n * @param ignoreAccess determines if non public methods should be considered\n * @return a list of Methods (possibly empty).\n * @throws IllegalArgumentException if the class or annotation are  {@code null}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.getAnnotation#943",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.getAnnotation(java.lang.reflect.Method, java.lang.Class\u003cA\u003e, boolean, boolean)",
    "snippet": "public static \u003cA extends Annotation\u003e A getAnnotation(final Method method, final Class\u003cA\u003e annotationCls,\n                                                         final boolean searchSupers, final boolean ignoreAccess) {\n\n        Validate.isTrue(method !\u003d null, \"The method must not be null\");\n        Validate.isTrue(annotationCls !\u003d null, \"The annotation class must not be null\");\n        if (!ignoreAccess \u0026\u0026 !MemberUtils.isAccessible(method)) {\n            return null;\n        }\n\n        A annotation \u003d method.getAnnotation(annotationCls);\n\n        if (annotation \u003d\u003d null \u0026\u0026 searchSupers) {\n            final Class\u003c?\u003e mcls \u003d method.getDeclaringClass();\n            final List\u003cClass\u003c?\u003e\u003e classes \u003d getAllSuperclassesAndInterfaces(mcls);\n            for (final Class\u003c?\u003e acls : classes) {\n                Method equivalentMethod;\n                try {\n                    equivalentMethod \u003d (ignoreAccess ? acls.getDeclaredMethod(method.getName(), method.getParameterTypes())\n                            : acls.getMethod(method.getName(), method.getParameterTypes()));\n                } catch (final NoSuchMethodException e) {\n                    // if not found, just keep searching\n                    continue;\n                }\n                annotation \u003d equivalentMethod.getAnnotation(annotationCls);\n                if (annotation !\u003d null) {\n                    break;\n                }\n            }\n        }\n\n        return annotation;\n    }",
    "begin_line": 943,
    "end_line": 974,
    "comment": "/** \n * \u003cp\u003eGets the annotation object with the given annotation type that is present on the given method or optionally on any equivalent method in super classes and interfaces. Returns null if the annotation type was not present.\u003c/p\u003e \u003cp\u003eStops searching for an annotation once the first annotation of the specified type has been found. Additional annotations of the specified type will be silently ignored.\u003c/p\u003e\n * @param \u003c A \u003e the annotation type\n * @param method the  {@link Method} to query\n * @param annotationCls the  {@link Annotation} to check if is present on the method\n * @param searchSupers determines if a lookup in the entire inheritance hierarchy of the given class is performed if the annotation was not directly present\n * @param ignoreAccess determines if underlying method has to be accessible\n * @return the first matching annotation, or {@code null} if not found\n * @throws IllegalArgumentException if the method or annotation are  {@code null}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodUtils.getAllSuperclassesAndInterfaces#986",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/reflect/MethodUtils.java",
    "class_name": "org.apache.commons.lang3.reflect.MethodUtils",
    "signature": "org.apache.commons.lang3.reflect.MethodUtils.getAllSuperclassesAndInterfaces(java.lang.Class\u003c?\u003e)",
    "snippet": "private static List\u003cClass\u003c?\u003e\u003e getAllSuperclassesAndInterfaces(final Class\u003c?\u003e cls) {\n        if (cls \u003d\u003d null) {\n            return null;\n        }\n\n        final List\u003cClass\u003c?\u003e\u003e allSuperClassesAndInterfaces \u003d new ArrayList\u003c\u003e();\n        final List\u003cClass\u003c?\u003e\u003e allSuperclasses \u003d ClassUtils.getAllSuperclasses(cls);\n        int superClassIndex \u003d 0;\n        final List\u003cClass\u003c?\u003e\u003e allInterfaces \u003d ClassUtils.getAllInterfaces(cls);\n        int interfaceIndex \u003d 0;\n        while (interfaceIndex \u003c allInterfaces.size() ||\n                superClassIndex \u003c allSuperclasses.size()) {\n            Class\u003c?\u003e acls;\n            if (interfaceIndex \u003e\u003d allInterfaces.size()) {\n                acls \u003d allSuperclasses.get(superClassIndex++);\n            } else if (superClassIndex \u003e\u003d allSuperclasses.size()) {\n                acls \u003d allInterfaces.get(interfaceIndex++);\n            } else if (interfaceIndex \u003c superClassIndex) {\n                acls \u003d allInterfaces.get(interfaceIndex++);\n            } else if (superClassIndex \u003c interfaceIndex) {\n                acls \u003d allSuperclasses.get(superClassIndex++);\n            } else {\n                acls \u003d allInterfaces.get(interfaceIndex++);\n            }\n            allSuperClassesAndInterfaces.add(acls);\n        }\n        return allSuperClassesAndInterfaces;\n    }",
    "begin_line": 986,
    "end_line": 1013,
    "comment": "/** \n * \u003cp\u003eGets a combination of  {@link ClassUtils#getAllSuperclasses}(Class)} and {@link ClassUtils#getAllInterfaces}(Class)}, one from superclasses, one from interfaces, and so on in a breadth first way.\u003c/p\u003e\n * @param cls  the class to look up, may be {@code null}\n * @return the combined {@code List} of superclasses and interfaces in ordergoing up from this one {@code null} if null input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]