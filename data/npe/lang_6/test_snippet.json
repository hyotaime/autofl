[
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.toArrayPropagatingType(T)",
    "snippet": "@SafeVarargs\n    private static \u003cT\u003e T[] toArrayPropagatingType(final T... items) {\n        return ArrayUtils.toArray(items);\n    }",
    "begin_line": 56,
    "end_line": 58,
    "comment": "",
    "child_ranges": [
      "(line 57,col 9)-(line 57,col 41)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.assertIsEquals(java.lang.Object, java.lang.Object, java.lang.Object)",
    "snippet": "private void assertIsEquals(final Object array1, final Object array2, final Object array3) {\n        assertTrue(ArrayUtils.isEquals(array1, array1));\n        assertTrue(ArrayUtils.isEquals(array2, array2));\n        assertTrue(ArrayUtils.isEquals(array3, array3));\n        assertFalse(ArrayUtils.isEquals(array1, array2));\n        assertFalse(ArrayUtils.isEquals(array2, array1));\n        assertFalse(ArrayUtils.isEquals(array1, array3));\n        assertFalse(ArrayUtils.isEquals(array3, array1));\n        assertFalse(ArrayUtils.isEquals(array1, array2));\n        assertFalse(ArrayUtils.isEquals(array2, array1));\n    }",
    "begin_line": 60,
    "end_line": 70,
    "comment": "",
    "child_ranges": [
      "(line 61,col 9)-(line 61,col 56)",
      "(line 62,col 9)-(line 62,col 56)",
      "(line 63,col 9)-(line 63,col 56)",
      "(line 64,col 9)-(line 64,col 57)",
      "(line 65,col 9)-(line 65,col 57)",
      "(line 66,col 9)-(line 66,col 57)",
      "(line 67,col 9)-(line 67,col 57)",
      "(line 68,col 9)-(line 68,col 57)",
      "(line 69,col 9)-(line 69,col 57)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testArrayCreation()",
    "snippet": "@Test\n    public void testArrayCreation() {\n        final String[] array \u003d ArrayUtils.toArray(\"foo\", \"bar\");\n        assertEquals(2, array.length);\n        assertEquals(\"foo\", array[0]);\n        assertEquals(\"bar\", array[1]);\n    }",
    "begin_line": 76,
    "end_line": 81,
    "comment": "/** \n * Tests generic array creation with parameters of same type.\n */\n",
    "child_ranges": [
      "(line 77,col 9)-(line 77,col 64)",
      "(line 78,col 9)-(line 78,col 38)",
      "(line 79,col 9)-(line 79,col 38)",
      "(line 80,col 9)-(line 80,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testArrayCreationWithDifferentTypes()",
    "snippet": "@Test\n    public void testArrayCreationWithDifferentTypes() {\n        final Number[] array \u003d ArrayUtils.\u003cNumber\u003etoArray(Integer.valueOf(42), Double.valueOf(Math.PI));\n        assertEquals(2, array.length);\n        assertEquals(Integer.valueOf(42), array[0]);\n        assertEquals(Double.valueOf(Math.PI), array[1]);\n    }",
    "begin_line": 86,
    "end_line": 91,
    "comment": "/** \n * Tests generic array creation with parameters of common base type.\n */\n",
    "child_ranges": [
      "(line 87,col 9)-(line 87,col 104)",
      "(line 88,col 9)-(line 88,col 38)",
      "(line 89,col 9)-(line 89,col 52)",
      "(line 90,col 9)-(line 90,col 56)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testArrayCreationWithGeneralReturnType()",
    "snippet": "@Test\n    public void testArrayCreationWithGeneralReturnType() {\n        final Object obj \u003d ArrayUtils.toArray(\"foo\", \"bar\");\n        assertTrue(obj instanceof String[]);\n    }",
    "begin_line": 97,
    "end_line": 100,
    "comment": "/** \n * Tests generic array creation with general return type.\n */\n",
    "child_ranges": [
      "(line 98,col 9)-(line 98,col 60)",
      "(line 99,col 9)-(line 99,col 44)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testClone()",
    "snippet": "@Test\n    public void testClone() {\n        assertArrayEquals(null, ArrayUtils.clone((Object[]) null));\n        Object[] original1 \u003d {};\n        Object[] cloned1 \u003d ArrayUtils.clone(original1);\n        assertArrayEquals(original1, cloned1);\n        assertNotSame(original1, cloned1);\n\n        final StringBuilder builder \u003d new StringBuilder(\"pick\");\n        original1 \u003d new Object[]{builder, \"a\", new String[]{\"stick\"}};\n        cloned1 \u003d ArrayUtils.clone(original1);\n        assertArrayEquals(original1, cloned1);\n        assertNotSame(original1, cloned1);\n        assertSame(original1[0], cloned1[0]);\n        assertSame(original1[1], cloned1[1]);\n        assertSame(original1[2], cloned1[2]);\n    }",
    "begin_line": 103,
    "end_line": 118,
    "comment": "",
    "child_ranges": [
      "(line 104,col 9)-(line 104,col 67)",
      "(line 105,col 9)-(line 105,col 32)",
      "(line 106,col 9)-(line 106,col 55)",
      "(line 107,col 9)-(line 107,col 46)",
      "(line 108,col 9)-(line 108,col 42)",
      "(line 110,col 9)-(line 110,col 64)",
      "(line 111,col 9)-(line 111,col 70)",
      "(line 112,col 9)-(line 112,col 46)",
      "(line 113,col 9)-(line 113,col 46)",
      "(line 114,col 9)-(line 114,col 42)",
      "(line 115,col 9)-(line 115,col 45)",
      "(line 116,col 9)-(line 116,col 45)",
      "(line 117,col 9)-(line 117,col 45)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testCloneBoolean()",
    "snippet": "@Test\n    public void testCloneBoolean() {\n        assertNull(ArrayUtils.clone((boolean[]) null));\n        final boolean[] original \u003d {true, false};\n        final boolean[] cloned \u003d ArrayUtils.clone(original);\n        assertArrayEquals(original, cloned);\n        assertNotSame(original, cloned);\n    }",
    "begin_line": 121,
    "end_line": 127,
    "comment": "",
    "child_ranges": [
      "(line 122,col 9)-(line 122,col 55)",
      "(line 123,col 9)-(line 123,col 49)",
      "(line 124,col 9)-(line 124,col 60)",
      "(line 125,col 9)-(line 125,col 44)",
      "(line 126,col 9)-(line 126,col 40)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testCloneByte()",
    "snippet": "@Test\n    public void testCloneByte() {\n        assertNull(ArrayUtils.clone((byte[]) null));\n        final byte[] original \u003d {1, 6};\n        final byte[] cloned \u003d ArrayUtils.clone(original);\n        assertArrayEquals(original, cloned);\n        assertNotSame(original, cloned);\n    }",
    "begin_line": 130,
    "end_line": 136,
    "comment": "",
    "child_ranges": [
      "(line 131,col 9)-(line 131,col 52)",
      "(line 132,col 9)-(line 132,col 39)",
      "(line 133,col 9)-(line 133,col 57)",
      "(line 134,col 9)-(line 134,col 44)",
      "(line 135,col 9)-(line 135,col 40)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testCloneChar()",
    "snippet": "@Test\n    public void testCloneChar() {\n        assertNull(ArrayUtils.clone((char[]) null));\n        final char[] original \u003d {\u0027a\u0027, \u00274\u0027};\n        final char[] cloned \u003d ArrayUtils.clone(original);\n        assertArrayEquals(original, cloned);\n        assertNotSame(original, cloned);\n    }",
    "begin_line": 139,
    "end_line": 145,
    "comment": "",
    "child_ranges": [
      "(line 140,col 9)-(line 140,col 52)",
      "(line 141,col 9)-(line 141,col 43)",
      "(line 142,col 9)-(line 142,col 57)",
      "(line 143,col 9)-(line 143,col 44)",
      "(line 144,col 9)-(line 144,col 40)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testCloneDouble()",
    "snippet": "@Test\n    public void testCloneDouble() {\n        assertNull(ArrayUtils.clone((double[]) null));\n        final double[] original \u003d {2.4d, 5.7d};\n        final double[] cloned \u003d ArrayUtils.clone(original);\n        assertArrayEquals(original, cloned);\n        assertNotSame(original, cloned);\n    }",
    "begin_line": 148,
    "end_line": 154,
    "comment": "",
    "child_ranges": [
      "(line 149,col 9)-(line 149,col 54)",
      "(line 150,col 9)-(line 150,col 47)",
      "(line 151,col 9)-(line 151,col 59)",
      "(line 152,col 9)-(line 152,col 44)",
      "(line 153,col 9)-(line 153,col 40)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testCloneFloat()",
    "snippet": "@Test\n    public void testCloneFloat() {\n        assertNull(ArrayUtils.clone((float[]) null));\n        final float[] original \u003d {2.6f, 6.4f};\n        final float[] cloned \u003d ArrayUtils.clone(original);\n        assertArrayEquals(original, cloned);\n        assertNotSame(original, cloned);\n    }",
    "begin_line": 157,
    "end_line": 163,
    "comment": "",
    "child_ranges": [
      "(line 158,col 9)-(line 158,col 53)",
      "(line 159,col 9)-(line 159,col 46)",
      "(line 160,col 9)-(line 160,col 58)",
      "(line 161,col 9)-(line 161,col 44)",
      "(line 162,col 9)-(line 162,col 40)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testCloneInt()",
    "snippet": "@Test\n    public void testCloneInt() {\n        assertNull(ArrayUtils.clone((int[]) null));\n        final int[] original \u003d {5, 8};\n        final int[] cloned \u003d ArrayUtils.clone(original);\n        assertArrayEquals(original, cloned);\n        assertNotSame(original, cloned);\n    }",
    "begin_line": 166,
    "end_line": 172,
    "comment": "",
    "child_ranges": [
      "(line 167,col 9)-(line 167,col 51)",
      "(line 168,col 9)-(line 168,col 38)",
      "(line 169,col 9)-(line 169,col 56)",
      "(line 170,col 9)-(line 170,col 44)",
      "(line 171,col 9)-(line 171,col 40)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testCloneLong()",
    "snippet": "@Test\n    public void testCloneLong() {\n        assertNull(ArrayUtils.clone((long[]) null));\n        final long[] original \u003d {0L, 1L};\n        final long[] cloned \u003d ArrayUtils.clone(original);\n        assertArrayEquals(original, cloned);\n        assertNotSame(original, cloned);\n    }",
    "begin_line": 175,
    "end_line": 181,
    "comment": "",
    "child_ranges": [
      "(line 176,col 9)-(line 176,col 52)",
      "(line 177,col 9)-(line 177,col 41)",
      "(line 178,col 9)-(line 178,col 57)",
      "(line 179,col 9)-(line 179,col 44)",
      "(line 180,col 9)-(line 180,col 40)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testCloneShort()",
    "snippet": "@Test\n    public void testCloneShort() {\n        assertNull(ArrayUtils.clone((short[]) null));\n        final short[] original \u003d {1, 4};\n        final short[] cloned \u003d ArrayUtils.clone(original);\n        assertArrayEquals(original, cloned);\n        assertNotSame(original, cloned);\n    }",
    "begin_line": 184,
    "end_line": 190,
    "comment": "",
    "child_ranges": [
      "(line 185,col 9)-(line 185,col 53)",
      "(line 186,col 9)-(line 186,col 40)",
      "(line 187,col 9)-(line 187,col 58)",
      "(line 188,col 9)-(line 188,col 44)",
      "(line 189,col 9)-(line 189,col 40)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testConstructor()",
    "snippet": "@Test\n    public void testConstructor() {\n        assertNotNull(new ArrayUtils());\n        final Constructor\u003c?\u003e[] cons \u003d ArrayUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n        assertTrue(Modifier.isPublic(ArrayUtils.class.getModifiers()));\n        assertFalse(Modifier.isFinal(ArrayUtils.class.getModifiers()));\n    }",
    "begin_line": 193,
    "end_line": 200,
    "comment": "",
    "child_ranges": [
      "(line 194,col 9)-(line 194,col 40)",
      "(line 195,col 9)-(line 195,col 81)",
      "(line 196,col 9)-(line 196,col 37)",
      "(line 197,col 9)-(line 197,col 62)",
      "(line 198,col 9)-(line 198,col 71)",
      "(line 199,col 9)-(line 199,col 71)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContains()",
    "snippet": "@Test\n    public void testContains() {\n        final Object[] array \u003d {\"0\", \"1\", \"2\", \"3\", null, \"0\"};\n        assertFalse(ArrayUtils.contains(null, null));\n        assertFalse(ArrayUtils.contains(null, \"1\"));\n        assertTrue(ArrayUtils.contains(array, \"0\"));\n        assertTrue(ArrayUtils.contains(array, \"1\"));\n        assertTrue(ArrayUtils.contains(array, \"2\"));\n        assertTrue(ArrayUtils.contains(array, \"3\"));\n        assertTrue(ArrayUtils.contains(array, null));\n        assertFalse(ArrayUtils.contains(array, \"notInArray\"));\n    }",
    "begin_line": 203,
    "end_line": 213,
    "comment": "",
    "child_ranges": [
      "(line 204,col 9)-(line 204,col 63)",
      "(line 205,col 9)-(line 205,col 53)",
      "(line 206,col 9)-(line 206,col 52)",
      "(line 207,col 9)-(line 207,col 52)",
      "(line 208,col 9)-(line 208,col 52)",
      "(line 209,col 9)-(line 209,col 52)",
      "(line 210,col 9)-(line 210,col 52)",
      "(line 211,col 9)-(line 211,col 53)",
      "(line 212,col 9)-(line 212,col 62)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContains_LANG_1261()",
    "snippet": "@Test\n    public void testContains_LANG_1261() {\n\n        class LANG1261ParentObject {\n            @Override\n            public boolean equals(final Object o) {\n                return true;\n            }\n        }\n\n        class LANG1261ChildObject extends LANG1261ParentObject {\n            // empty.\n        }\n\n        final Object[] array \u003d new LANG1261ChildObject[]{new LANG1261ChildObject()};\n\n        assertTrue(ArrayUtils.contains(array, new LANG1261ParentObject()));\n    }",
    "begin_line": 216,
    "end_line": 232,
    "comment": "",
    "child_ranges": [
      "(line 218,col 9)-(line 223,col 9)",
      "(line 225,col 9)-(line 227,col 9)",
      "(line 229,col 9)-(line 229,col 84)",
      "(line 231,col 9)-(line 231,col 75)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.equals(java.lang.Object)",
    "snippet": "@Override\n            public boolean equals(final Object o) {\n                return true;\n            }",
    "begin_line": 220,
    "end_line": 222,
    "comment": "",
    "child_ranges": [
      "(line 221,col 17)-(line 221,col 28)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContainsBoolean()",
    "snippet": "@Test\n    public void testContainsBoolean() {\n        boolean[] array \u003d null;\n        assertFalse(ArrayUtils.contains(array, true));\n        array \u003d new boolean[]{true, false, true};\n        assertTrue(ArrayUtils.contains(array, true));\n        assertTrue(ArrayUtils.contains(array, false));\n        array \u003d new boolean[]{true, true};\n        assertTrue(ArrayUtils.contains(array, true));\n        assertFalse(ArrayUtils.contains(array, false));\n    }",
    "begin_line": 235,
    "end_line": 244,
    "comment": "",
    "child_ranges": [
      "(line 236,col 9)-(line 236,col 31)",
      "(line 237,col 9)-(line 237,col 54)",
      "(line 238,col 9)-(line 238,col 49)",
      "(line 239,col 9)-(line 239,col 53)",
      "(line 240,col 9)-(line 240,col 54)",
      "(line 241,col 9)-(line 241,col 42)",
      "(line 242,col 9)-(line 242,col 53)",
      "(line 243,col 9)-(line 243,col 55)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContainsByte()",
    "snippet": "@Test\n    public void testContainsByte() {\n        byte[] array \u003d null;\n        assertFalse(ArrayUtils.contains(array, (byte) 1));\n        array \u003d new byte[]{0, 1, 2, 3, 0};\n        assertTrue(ArrayUtils.contains(array, (byte) 0));\n        assertTrue(ArrayUtils.contains(array, (byte) 1));\n        assertTrue(ArrayUtils.contains(array, (byte) 2));\n        assertTrue(ArrayUtils.contains(array, (byte) 3));\n        assertFalse(ArrayUtils.contains(array, (byte) 99));\n    }",
    "begin_line": 247,
    "end_line": 256,
    "comment": "",
    "child_ranges": [
      "(line 248,col 9)-(line 248,col 28)",
      "(line 249,col 9)-(line 249,col 58)",
      "(line 250,col 9)-(line 250,col 42)",
      "(line 251,col 9)-(line 251,col 57)",
      "(line 252,col 9)-(line 252,col 57)",
      "(line 253,col 9)-(line 253,col 57)",
      "(line 254,col 9)-(line 254,col 57)",
      "(line 255,col 9)-(line 255,col 59)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContainsChar()",
    "snippet": "@Test\n    public void testContainsChar() {\n        char[] array \u003d null;\n        assertFalse(ArrayUtils.contains(array, \u0027b\u0027));\n        array \u003d new char[]{\u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027d\u0027, \u0027a\u0027};\n        assertTrue(ArrayUtils.contains(array, \u0027a\u0027));\n        assertTrue(ArrayUtils.contains(array, \u0027b\u0027));\n        assertTrue(ArrayUtils.contains(array, \u0027c\u0027));\n        assertTrue(ArrayUtils.contains(array, \u0027d\u0027));\n        assertFalse(ArrayUtils.contains(array, \u0027e\u0027));\n    }",
    "begin_line": 259,
    "end_line": 268,
    "comment": "",
    "child_ranges": [
      "(line 260,col 9)-(line 260,col 28)",
      "(line 261,col 9)-(line 261,col 53)",
      "(line 262,col 9)-(line 262,col 52)",
      "(line 263,col 9)-(line 263,col 52)",
      "(line 264,col 9)-(line 264,col 52)",
      "(line 265,col 9)-(line 265,col 52)",
      "(line 266,col 9)-(line 266,col 52)",
      "(line 267,col 9)-(line 267,col 53)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContainsDouble()",
    "snippet": "@SuppressWarnings(\"cast\")\n    @Test\n    public void testContainsDouble() {\n        double[] array \u003d null;\n        assertFalse(ArrayUtils.contains(array, (double) 1));\n        array \u003d new double[]{0, 1, 2, 3, 0};\n        assertTrue(ArrayUtils.contains(array, (double) 0));\n        assertTrue(ArrayUtils.contains(array, (double) 1));\n        assertTrue(ArrayUtils.contains(array, (double) 2));\n        assertTrue(ArrayUtils.contains(array, (double) 3));\n        assertFalse(ArrayUtils.contains(array, (double) 99));\n    }",
    "begin_line": 272,
    "end_line": 281,
    "comment": "",
    "child_ranges": [
      "(line 273,col 9)-(line 273,col 30)",
      "(line 274,col 9)-(line 274,col 60)",
      "(line 275,col 9)-(line 275,col 44)",
      "(line 276,col 9)-(line 276,col 59)",
      "(line 277,col 9)-(line 277,col 59)",
      "(line 278,col 9)-(line 278,col 59)",
      "(line 279,col 9)-(line 279,col 59)",
      "(line 280,col 9)-(line 280,col 61)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContainsDoubleNaN()",
    "snippet": "@Test\n    public void testContainsDoubleNaN() {\n        final double[] a \u003d { Double.NEGATIVE_INFINITY, Double.NaN, Double.POSITIVE_INFINITY };\n        assertTrue(ArrayUtils.contains(a, Double.POSITIVE_INFINITY));\n        assertTrue(ArrayUtils.contains(a, Double.NEGATIVE_INFINITY));\n        assertTrue(ArrayUtils.contains(a, Double.NaN));\n    }",
    "begin_line": 284,
    "end_line": 289,
    "comment": "",
    "child_ranges": [
      "(line 285,col 9)-(line 285,col 94)",
      "(line 286,col 9)-(line 286,col 69)",
      "(line 287,col 9)-(line 287,col 69)",
      "(line 288,col 9)-(line 288,col 55)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContainsDoubleTolerance()",
    "snippet": "@SuppressWarnings(\"cast\")\n    @Test\n    public void testContainsDoubleTolerance() {\n        double[] array \u003d null;\n        assertFalse(ArrayUtils.contains(array, (double) 1, (double) 0));\n        array \u003d new double[]{0, 1, 2, 3, 0};\n        assertFalse(ArrayUtils.contains(array, 4.0, 0.33));\n        assertFalse(ArrayUtils.contains(array, 2.5, 0.49));\n        assertTrue(ArrayUtils.contains(array, 2.5, 0.50));\n        assertTrue(ArrayUtils.contains(array, 2.5, 0.51));\n    }",
    "begin_line": 293,
    "end_line": 301,
    "comment": "",
    "child_ranges": [
      "(line 294,col 9)-(line 294,col 30)",
      "(line 295,col 9)-(line 295,col 72)",
      "(line 296,col 9)-(line 296,col 44)",
      "(line 297,col 9)-(line 297,col 59)",
      "(line 298,col 9)-(line 298,col 59)",
      "(line 299,col 9)-(line 299,col 58)",
      "(line 300,col 9)-(line 300,col 58)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContainsFloat()",
    "snippet": "@SuppressWarnings(\"cast\")\n    @Test\n    public void testContainsFloat() {\n        float[] array \u003d null;\n        assertFalse(ArrayUtils.contains(array, (float) 1));\n        array \u003d new float[]{0, 1, 2, 3, 0};\n        assertTrue(ArrayUtils.contains(array, (float) 0));\n        assertTrue(ArrayUtils.contains(array, (float) 1));\n        assertTrue(ArrayUtils.contains(array, (float) 2));\n        assertTrue(ArrayUtils.contains(array, (float) 3));\n        assertFalse(ArrayUtils.contains(array, (float) 99));\n    }",
    "begin_line": 305,
    "end_line": 314,
    "comment": "",
    "child_ranges": [
      "(line 306,col 9)-(line 306,col 29)",
      "(line 307,col 9)-(line 307,col 59)",
      "(line 308,col 9)-(line 308,col 43)",
      "(line 309,col 9)-(line 309,col 58)",
      "(line 310,col 9)-(line 310,col 58)",
      "(line 311,col 9)-(line 311,col 58)",
      "(line 312,col 9)-(line 312,col 58)",
      "(line 313,col 9)-(line 313,col 60)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContainsFloatNaN()",
    "snippet": "@Test\n    public void testContainsFloatNaN() {\n        final float[] array \u003d { Float.NEGATIVE_INFINITY, Float.NaN, Float.POSITIVE_INFINITY };\n        assertTrue(ArrayUtils.contains(array, Float.POSITIVE_INFINITY));\n        assertTrue(ArrayUtils.contains(array, Float.NEGATIVE_INFINITY));\n        assertTrue(ArrayUtils.contains(array, Float.NaN));\n    }",
    "begin_line": 317,
    "end_line": 322,
    "comment": "",
    "child_ranges": [
      "(line 318,col 9)-(line 318,col 94)",
      "(line 319,col 9)-(line 319,col 72)",
      "(line 320,col 9)-(line 320,col 72)",
      "(line 321,col 9)-(line 321,col 58)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContainsInt()",
    "snippet": "@Test\n    public void testContainsInt() {\n        int[] array \u003d null;\n        assertFalse(ArrayUtils.contains(array, 1));\n        array \u003d new int[]{0, 1, 2, 3, 0};\n        assertTrue(ArrayUtils.contains(array, 0));\n        assertTrue(ArrayUtils.contains(array, 1));\n        assertTrue(ArrayUtils.contains(array, 2));\n        assertTrue(ArrayUtils.contains(array, 3));\n        assertFalse(ArrayUtils.contains(array, 99));\n    }",
    "begin_line": 325,
    "end_line": 334,
    "comment": "",
    "child_ranges": [
      "(line 326,col 9)-(line 326,col 27)",
      "(line 327,col 9)-(line 327,col 51)",
      "(line 328,col 9)-(line 328,col 41)",
      "(line 329,col 9)-(line 329,col 50)",
      "(line 330,col 9)-(line 330,col 50)",
      "(line 331,col 9)-(line 331,col 50)",
      "(line 332,col 9)-(line 332,col 50)",
      "(line 333,col 9)-(line 333,col 52)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContainsLong()",
    "snippet": "@Test\n    public void testContainsLong() {\n        long[] array \u003d null;\n        assertFalse(ArrayUtils.contains(array, 1));\n        array \u003d new long[]{0, 1, 2, 3, 0};\n        assertTrue(ArrayUtils.contains(array, 0));\n        assertTrue(ArrayUtils.contains(array, 1));\n        assertTrue(ArrayUtils.contains(array, 2));\n        assertTrue(ArrayUtils.contains(array, 3));\n        assertFalse(ArrayUtils.contains(array, 99));\n    }",
    "begin_line": 337,
    "end_line": 346,
    "comment": "",
    "child_ranges": [
      "(line 338,col 9)-(line 338,col 28)",
      "(line 339,col 9)-(line 339,col 51)",
      "(line 340,col 9)-(line 340,col 42)",
      "(line 341,col 9)-(line 341,col 50)",
      "(line 342,col 9)-(line 342,col 50)",
      "(line 343,col 9)-(line 343,col 50)",
      "(line 344,col 9)-(line 344,col 50)",
      "(line 345,col 9)-(line 345,col 52)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContainsShort()",
    "snippet": "@Test\n    public void testContainsShort() {\n        short[] array \u003d null;\n        assertFalse(ArrayUtils.contains(array, (short) 1));\n        array \u003d new short[]{0, 1, 2, 3, 0};\n        assertTrue(ArrayUtils.contains(array, (short) 0));\n        assertTrue(ArrayUtils.contains(array, (short) 1));\n        assertTrue(ArrayUtils.contains(array, (short) 2));\n        assertTrue(ArrayUtils.contains(array, (short) 3));\n        assertFalse(ArrayUtils.contains(array, (short) 99));\n    }",
    "begin_line": 349,
    "end_line": 358,
    "comment": "",
    "child_ranges": [
      "(line 350,col 9)-(line 350,col 29)",
      "(line 351,col 9)-(line 351,col 59)",
      "(line 352,col 9)-(line 352,col 43)",
      "(line 353,col 9)-(line 353,col 58)",
      "(line 354,col 9)-(line 354,col 58)",
      "(line 355,col 9)-(line 355,col 58)",
      "(line 356,col 9)-(line 356,col 58)",
      "(line 357,col 9)-(line 357,col 60)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testCreatePrimitiveArray()",
    "snippet": "@Test\n    public void testCreatePrimitiveArray() {\n        assertNull(ArrayUtils.toPrimitive((Object[]) null));\n        assertArrayEquals(new boolean[]{true}, ArrayUtils.toPrimitive(new Boolean[]{true}));\n        assertArrayEquals(new char[]{\u0027a\u0027}, ArrayUtils.toPrimitive(new Character[]{\u0027a\u0027}));\n        assertArrayEquals(new byte[]{1}, ArrayUtils.toPrimitive(new Byte[]{1}));\n        assertArrayEquals(new int[]{}, ArrayUtils.toPrimitive(new Integer[]{}));\n        assertArrayEquals(new short[]{2}, ArrayUtils.toPrimitive(new Short[]{2}));\n        assertArrayEquals(new long[]{2, 3}, ArrayUtils.toPrimitive(new Long[]{2L, 3L}));\n        assertArrayEquals(new float[]{3.14f}, ArrayUtils.toPrimitive(new Float[]{3.14f}), 0.1f);\n        assertArrayEquals(new double[]{2.718}, ArrayUtils.toPrimitive(new Double[]{2.718}), 0.1);\n    }",
    "begin_line": 361,
    "end_line": 371,
    "comment": "",
    "child_ranges": [
      "(line 362,col 9)-(line 362,col 60)",
      "(line 363,col 9)-(line 363,col 92)",
      "(line 364,col 9)-(line 364,col 89)",
      "(line 365,col 9)-(line 365,col 80)",
      "(line 366,col 9)-(line 366,col 80)",
      "(line 367,col 9)-(line 367,col 82)",
      "(line 368,col 9)-(line 368,col 88)",
      "(line 369,col 9)-(line 369,col 96)",
      "(line 370,col 9)-(line 370,col 97)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testCreatePrimitiveArrayViaObjectArray()",
    "snippet": "@Test\n    public void testCreatePrimitiveArrayViaObjectArray() {\n        assertNull(ArrayUtils.toPrimitive((Object) null));\n        assertArrayEquals(new boolean[]{true}, (boolean[]) ArrayUtils.toPrimitive((Object) new Boolean[]{true}));\n        assertArrayEquals(new char[]{\u0027a\u0027}, (char[]) ArrayUtils.toPrimitive((Object) new Character[]{\u0027a\u0027}));\n        assertArrayEquals(new byte[]{1}, (byte[]) ArrayUtils.toPrimitive((Object) new Byte[]{1}));\n        assertArrayEquals(new int[]{}, (int[]) ArrayUtils.toPrimitive((Object) new Integer[]{}));\n        assertArrayEquals(new short[]{2}, (short[]) ArrayUtils.toPrimitive((Object) new Short[]{2}));\n        assertArrayEquals(new long[]{2, 3}, (long[]) ArrayUtils.toPrimitive((Object) new Long[]{2L, 3L}));\n        assertArrayEquals(new float[]{3.14f}, (float[]) ArrayUtils.toPrimitive((Object) new Float[]{3.14f}), 0.1f);\n        assertArrayEquals(new double[]{2.718}, (double[]) ArrayUtils.toPrimitive((Object) new Double[]{2.718}), 0.1);\n    }",
    "begin_line": 374,
    "end_line": 384,
    "comment": "",
    "child_ranges": [
      "(line 375,col 9)-(line 375,col 58)",
      "(line 376,col 9)-(line 376,col 113)",
      "(line 377,col 9)-(line 377,col 107)",
      "(line 378,col 9)-(line 378,col 98)",
      "(line 379,col 9)-(line 379,col 97)",
      "(line 380,col 9)-(line 380,col 101)",
      "(line 381,col 9)-(line 381,col 106)",
      "(line 382,col 9)-(line 382,col 115)",
      "(line 383,col 9)-(line 383,col 117)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testEmptyArrayCreation()",
    "snippet": "@Test\n    public void testEmptyArrayCreation() {\n        final String[] array \u003d ArrayUtils.\u003cString\u003etoArray();\n        assertEquals(0, array.length);\n    }",
    "begin_line": 390,
    "end_line": 393,
    "comment": "/** \n * Tests generic empty array creation with generic type.\n */\n",
    "child_ranges": [
      "(line 391,col 9)-(line 391,col 60)",
      "(line 392,col 9)-(line 392,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testGet()",
    "snippet": "@Test\n    public void testGet() {\n        assertNull(ArrayUtils.get(null, -1));\n        assertNull(ArrayUtils.get(null, 0));\n        assertNull(ArrayUtils.get(null, 1));\n        final String[] array0 \u003d {};\n        assertNull(ArrayUtils.get(array0, -1));\n        assertNull(ArrayUtils.get(array0, 0));\n        assertNull(ArrayUtils.get(array0, 1));\n        final String[] array1 \u003d { StringUtils.EMPTY };\n        assertNull(ArrayUtils.get(array1, -1));\n        assertEquals(StringUtils.EMPTY, ArrayUtils.get(array1, 0));\n        assertNull(ArrayUtils.get(array1, 1));\n    }",
    "begin_line": 396,
    "end_line": 408,
    "comment": "",
    "child_ranges": [
      "(line 397,col 9)-(line 397,col 45)",
      "(line 398,col 9)-(line 398,col 44)",
      "(line 399,col 9)-(line 399,col 44)",
      "(line 400,col 9)-(line 400,col 35)",
      "(line 401,col 9)-(line 401,col 47)",
      "(line 402,col 9)-(line 402,col 46)",
      "(line 403,col 9)-(line 403,col 46)",
      "(line 404,col 9)-(line 404,col 54)",
      "(line 405,col 9)-(line 405,col 47)",
      "(line 406,col 9)-(line 406,col 67)",
      "(line 407,col 9)-(line 407,col 46)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testGetComponentType()",
    "snippet": "@Test\n    public void testGetComponentType() {\n        final TestClass[] newArray \u003d {};\n        // No type-cast required.\n        final Class\u003cTestClass\u003e componentType \u003d ArrayUtils.getComponentType(newArray);\n        assertEquals(TestClass.class, componentType);\n        assertNull(ArrayUtils.getComponentType(null));\n    }",
    "begin_line": 411,
    "end_line": 417,
    "comment": "",
    "child_ranges": [
      "(line 412,col 9)-(line 412,col 40)",
      "(line 414,col 9)-(line 414,col 85)",
      "(line 415,col 9)-(line 415,col 53)",
      "(line 416,col 9)-(line 416,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testGetDefault()",
    "snippet": "@Test\n    public void testGetDefault() {\n        // null default\n        {\n            assertNull(ArrayUtils.get(null, -1, null));\n            assertNull(ArrayUtils.get(null, 0, null));\n            assertNull(ArrayUtils.get(null, 1, null));\n            final String[] array0 \u003d {};\n            assertNull(ArrayUtils.get(array0, -1, null));\n            assertNull(ArrayUtils.get(array0, 0, null));\n            assertNull(ArrayUtils.get(array0, 1, null));\n            final String[] array1 \u003d { StringUtils.EMPTY };\n            assertNull(ArrayUtils.get(array1, -1, null));\n            assertEquals(StringUtils.EMPTY, ArrayUtils.get(array1, 0, null));\n            assertNull(ArrayUtils.get(array1, 1, null));\n        }\n        // non-null default\n        {\n            final String defaultValue \u003d \"defaultValue\";\n            final String[] array1 \u003d { StringUtils.EMPTY };\n            assertEquals(defaultValue, ArrayUtils.get(array1, -1, defaultValue));\n            assertEquals(StringUtils.EMPTY, ArrayUtils.get(array1, 0, defaultValue));\n            assertEquals(defaultValue, ArrayUtils.get(array1, 1, defaultValue));\n        }\n    }",
    "begin_line": 420,
    "end_line": 443,
    "comment": "",
    "child_ranges": [
      "(line 422,col 9)-(line 434,col 9)",
      "(line 436,col 9)-(line 442,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testGetLength()",
    "snippet": "@Test\n    public void testGetLength() {\n        assertEquals(0, ArrayUtils.getLength(null));\n\n        final Object[] emptyObjectArray \u003d {};\n        final Object[] notEmptyObjectArray \u003d {\"aValue\"};\n        assertEquals(0, ArrayUtils.getLength(null));\n        assertEquals(0, ArrayUtils.getLength(emptyObjectArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyObjectArray));\n\n        final int[] emptyIntArray \u003d {};\n        final int[] notEmptyIntArray \u003d {1};\n        assertEquals(0, ArrayUtils.getLength(null));\n        assertEquals(0, ArrayUtils.getLength(emptyIntArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyIntArray));\n\n        final short[] emptyShortArray \u003d {};\n        final short[] notEmptyShortArray \u003d {1};\n        assertEquals(0, ArrayUtils.getLength(null));\n        assertEquals(0, ArrayUtils.getLength(emptyShortArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyShortArray));\n\n        final char[] emptyCharArray \u003d {};\n        final char[] notEmptyCharArray \u003d {1};\n        assertEquals(0, ArrayUtils.getLength(null));\n        assertEquals(0, ArrayUtils.getLength(emptyCharArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyCharArray));\n\n        final byte[] emptyByteArray \u003d {};\n        final byte[] notEmptyByteArray \u003d {1};\n        assertEquals(0, ArrayUtils.getLength(null));\n        assertEquals(0, ArrayUtils.getLength(emptyByteArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyByteArray));\n\n        final double[] emptyDoubleArray \u003d {};\n        final double[] notEmptyDoubleArray \u003d {1.0};\n        assertEquals(0, ArrayUtils.getLength(null));\n        assertEquals(0, ArrayUtils.getLength(emptyDoubleArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyDoubleArray));\n\n        final float[] emptyFloatArray \u003d {};\n        final float[] notEmptyFloatArray \u003d {1.0F};\n        assertEquals(0, ArrayUtils.getLength(null));\n        assertEquals(0, ArrayUtils.getLength(emptyFloatArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyFloatArray));\n\n        final boolean[] emptyBooleanArray \u003d {};\n        final boolean[] notEmptyBooleanArray \u003d {true};\n        assertEquals(0, ArrayUtils.getLength(null));\n        assertEquals(0, ArrayUtils.getLength(emptyBooleanArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyBooleanArray));\n\n        assertThrows(IllegalArgumentException.class, () -\u003e ArrayUtils.getLength(\"notAnArray\"));\n    }",
    "begin_line": 446,
    "end_line": 498,
    "comment": "",
    "child_ranges": [
      "(line 447,col 9)-(line 447,col 52)",
      "(line 449,col 9)-(line 449,col 45)",
      "(line 450,col 9)-(line 450,col 56)",
      "(line 451,col 9)-(line 451,col 52)",
      "(line 452,col 9)-(line 452,col 64)",
      "(line 453,col 9)-(line 453,col 67)",
      "(line 455,col 9)-(line 455,col 39)",
      "(line 456,col 9)-(line 456,col 43)",
      "(line 457,col 9)-(line 457,col 52)",
      "(line 458,col 9)-(line 458,col 61)",
      "(line 459,col 9)-(line 459,col 64)",
      "(line 461,col 9)-(line 461,col 43)",
      "(line 462,col 9)-(line 462,col 47)",
      "(line 463,col 9)-(line 463,col 52)",
      "(line 464,col 9)-(line 464,col 63)",
      "(line 465,col 9)-(line 465,col 66)",
      "(line 467,col 9)-(line 467,col 41)",
      "(line 468,col 9)-(line 468,col 45)",
      "(line 469,col 9)-(line 469,col 52)",
      "(line 470,col 9)-(line 470,col 62)",
      "(line 471,col 9)-(line 471,col 65)",
      "(line 473,col 9)-(line 473,col 41)",
      "(line 474,col 9)-(line 474,col 45)",
      "(line 475,col 9)-(line 475,col 52)",
      "(line 476,col 9)-(line 476,col 62)",
      "(line 477,col 9)-(line 477,col 65)",
      "(line 479,col 9)-(line 479,col 45)",
      "(line 480,col 9)-(line 480,col 51)",
      "(line 481,col 9)-(line 481,col 52)",
      "(line 482,col 9)-(line 482,col 64)",
      "(line 483,col 9)-(line 483,col 67)",
      "(line 485,col 9)-(line 485,col 43)",
      "(line 486,col 9)-(line 486,col 50)",
      "(line 487,col 9)-(line 487,col 52)",
      "(line 488,col 9)-(line 488,col 63)",
      "(line 489,col 9)-(line 489,col 66)",
      "(line 491,col 9)-(line 491,col 47)",
      "(line 492,col 9)-(line 492,col 54)",
      "(line 493,col 9)-(line 493,col 52)",
      "(line 494,col 9)-(line 494,col 65)",
      "(line 495,col 9)-(line 495,col 68)",
      "(line 497,col 9)-(line 497,col 95)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testHashCode()",
    "snippet": "@Test\n    public void testHashCode() {\n        final long[][] array1 \u003d {{2, 5}, {4, 5}};\n        final long[][] array2 \u003d {{2, 5}, {4, 6}};\n        assertEquals(ArrayUtils.hashCode(array1), ArrayUtils.hashCode(array1));\n        assertNotEquals(ArrayUtils.hashCode(array1), ArrayUtils.hashCode(array2));\n\n        final Object[] array3 \u003d {new String(new char[]{\u0027A\u0027, \u0027B\u0027})};\n        final Object[] array4 \u003d {\"AB\"};\n        assertEquals(ArrayUtils.hashCode(array3), ArrayUtils.hashCode(array3));\n        assertEquals(ArrayUtils.hashCode(array3), ArrayUtils.hashCode(array4));\n\n        final Object[] arrayA \u003d {new boolean[]{true, false}, new int[]{6, 7}};\n        final Object[] arrayB \u003d {new boolean[]{true, false}, new int[]{6, 7}};\n        assertEquals(ArrayUtils.hashCode(arrayB), ArrayUtils.hashCode(arrayA));\n    }",
    "begin_line": 501,
    "end_line": 515,
    "comment": "",
    "child_ranges": [
      "(line 502,col 9)-(line 502,col 49)",
      "(line 503,col 9)-(line 503,col 49)",
      "(line 504,col 9)-(line 504,col 79)",
      "(line 505,col 9)-(line 505,col 82)",
      "(line 507,col 9)-(line 507,col 67)",
      "(line 508,col 9)-(line 508,col 39)",
      "(line 509,col 9)-(line 509,col 79)",
      "(line 510,col 9)-(line 510,col 79)",
      "(line 512,col 9)-(line 512,col 78)",
      "(line 513,col 9)-(line 513,col 78)",
      "(line 514,col 9)-(line 514,col 79)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexesOf()",
    "snippet": "@Test\n    public void testIndexesOf() {\n        final Object[] array \u003d {\"0\", \"1\", \"2\", \"3\", null, \"0\"};\n        final BitSet emptySet \u003d new BitSet();\n        final BitSet testSet \u003d new BitSet();\n        assertEquals(emptySet, ArrayUtils.indexesOf((Object[]) null, null));\n        assertEquals(emptySet, ArrayUtils.indexesOf(new Object[0], \"0\"));\n        testSet.set(5);\n        testSet.set(0);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, \"0\"));\n        testSet.clear();\n        testSet.set(2);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, \"2\"));\n        testSet.clear();\n        testSet.set(3);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, \"3\"));\n        testSet.clear();\n        testSet.set(4);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, null));\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, \"notInArray\"));\n    }",
    "begin_line": 518,
    "end_line": 537,
    "comment": "",
    "child_ranges": [
      "(line 519,col 9)-(line 519,col 63)",
      "(line 520,col 9)-(line 520,col 45)",
      "(line 521,col 9)-(line 521,col 44)",
      "(line 522,col 9)-(line 522,col 76)",
      "(line 523,col 9)-(line 523,col 73)",
      "(line 524,col 9)-(line 524,col 23)",
      "(line 525,col 9)-(line 525,col 23)",
      "(line 526,col 9)-(line 526,col 64)",
      "(line 527,col 9)-(line 527,col 24)",
      "(line 528,col 9)-(line 528,col 23)",
      "(line 529,col 9)-(line 529,col 64)",
      "(line 530,col 9)-(line 530,col 24)",
      "(line 531,col 9)-(line 531,col 23)",
      "(line 532,col 9)-(line 532,col 64)",
      "(line 533,col 9)-(line 533,col 24)",
      "(line 534,col 9)-(line 534,col 23)",
      "(line 535,col 9)-(line 535,col 65)",
      "(line 536,col 9)-(line 536,col 74)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexesOfBoolean()",
    "snippet": "@Test\n    public void testIndexesOfBoolean() {\n        boolean[] array \u003d null;\n        final BitSet emptySet \u003d new BitSet();\n        final BitSet testSet \u003d new BitSet();\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, true));\n        array \u003d new boolean[0];\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, true));\n        array \u003d new boolean[]{true, false, true};\n        testSet.set(0);\n        testSet.set(2);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, true));\n        testSet.clear();\n        testSet.set(1);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, false));\n        array \u003d new boolean[]{true, true};\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, false));\n    }",
    "begin_line": 540,
    "end_line": 556,
    "comment": "",
    "child_ranges": [
      "(line 541,col 9)-(line 541,col 31)",
      "(line 542,col 9)-(line 542,col 45)",
      "(line 543,col 9)-(line 543,col 44)",
      "(line 544,col 9)-(line 544,col 66)",
      "(line 545,col 9)-(line 545,col 31)",
      "(line 546,col 9)-(line 546,col 66)",
      "(line 547,col 9)-(line 547,col 49)",
      "(line 548,col 9)-(line 548,col 23)",
      "(line 549,col 9)-(line 549,col 23)",
      "(line 550,col 9)-(line 550,col 65)",
      "(line 551,col 9)-(line 551,col 24)",
      "(line 552,col 9)-(line 552,col 23)",
      "(line 553,col 9)-(line 553,col 66)",
      "(line 554,col 9)-(line 554,col 42)",
      "(line 555,col 9)-(line 555,col 67)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexesOfBooleanWithStartIndex()",
    "snippet": "@Test\n    public void testIndexesOfBooleanWithStartIndex() {\n        boolean[] array \u003d null;\n        final BitSet emptySet \u003d new BitSet();\n        final BitSet testSet \u003d new BitSet();\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, true, 0));\n        array \u003d new boolean[0];\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, true, 0));\n        array \u003d new boolean[]{true, false, true};\n        testSet.set(2);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, true, 1));\n        testSet.set(0);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, true, 0));\n        testSet.clear();\n        testSet.set(1);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, false, 1));\n        array \u003d new boolean[]{true, true};\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, false, 0));\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, false, -1));\n    }",
    "begin_line": 559,
    "end_line": 577,
    "comment": "",
    "child_ranges": [
      "(line 560,col 9)-(line 560,col 31)",
      "(line 561,col 9)-(line 561,col 45)",
      "(line 562,col 9)-(line 562,col 44)",
      "(line 563,col 9)-(line 563,col 69)",
      "(line 564,col 9)-(line 564,col 31)",
      "(line 565,col 9)-(line 565,col 69)",
      "(line 566,col 9)-(line 566,col 49)",
      "(line 567,col 9)-(line 567,col 23)",
      "(line 568,col 9)-(line 568,col 68)",
      "(line 569,col 9)-(line 569,col 23)",
      "(line 570,col 9)-(line 570,col 68)",
      "(line 571,col 9)-(line 571,col 24)",
      "(line 572,col 9)-(line 572,col 23)",
      "(line 573,col 9)-(line 573,col 69)",
      "(line 574,col 9)-(line 574,col 42)",
      "(line 575,col 9)-(line 575,col 70)",
      "(line 576,col 9)-(line 576,col 71)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexesOfByte()",
    "snippet": "@Test\n    public void testIndexesOfByte() {\n        byte[] array \u003d null;\n        final BitSet emptySet \u003d new BitSet();\n        final BitSet testSet \u003d new BitSet();\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, (byte) 0));\n        array \u003d new byte[]{0, 1, 2, 3, 0};\n        testSet.set(0);\n        testSet.set(4);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 0));\n        testSet.clear();\n        testSet.set(1);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 1));\n        testSet.clear();\n        testSet.set(2);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 2));\n        testSet.clear();\n        testSet.set(3);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 3));\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, (byte) 99));\n    }",
    "begin_line": 580,
    "end_line": 599,
    "comment": "",
    "child_ranges": [
      "(line 581,col 9)-(line 581,col 28)",
      "(line 582,col 9)-(line 582,col 45)",
      "(line 583,col 9)-(line 583,col 44)",
      "(line 584,col 9)-(line 584,col 70)",
      "(line 585,col 9)-(line 585,col 42)",
      "(line 586,col 9)-(line 586,col 23)",
      "(line 587,col 9)-(line 587,col 23)",
      "(line 588,col 9)-(line 588,col 69)",
      "(line 589,col 9)-(line 589,col 24)",
      "(line 590,col 9)-(line 590,col 23)",
      "(line 591,col 9)-(line 591,col 69)",
      "(line 592,col 9)-(line 592,col 24)",
      "(line 593,col 9)-(line 593,col 23)",
      "(line 594,col 9)-(line 594,col 69)",
      "(line 595,col 9)-(line 595,col 24)",
      "(line 596,col 9)-(line 596,col 23)",
      "(line 597,col 9)-(line 597,col 69)",
      "(line 598,col 9)-(line 598,col 71)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexesOfByteWithStartIndex()",
    "snippet": "@Test\n    public void testIndexesOfByteWithStartIndex() {\n        byte[] array \u003d null;\n        final BitSet emptySet \u003d new BitSet();\n        final BitSet testSet \u003d new BitSet();\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, (byte) 0, 2));\n        array \u003d new byte[]{0, 1, 2, 3, 0};\n        testSet.set(4);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 0, 2));\n        testSet.set(0);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 0, 0));\n        testSet.clear();\n        testSet.set(1);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 1, 1));\n        testSet.clear();\n        testSet.set(2);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 2, 0));\n        testSet.clear();\n        testSet.set(3);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 3, 0));\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 3, -1));\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, (byte) 99, 0));\n    }",
    "begin_line": 602,
    "end_line": 623,
    "comment": "",
    "child_ranges": [
      "(line 603,col 9)-(line 603,col 28)",
      "(line 604,col 9)-(line 604,col 45)",
      "(line 605,col 9)-(line 605,col 44)",
      "(line 606,col 9)-(line 606,col 73)",
      "(line 607,col 9)-(line 607,col 42)",
      "(line 608,col 9)-(line 608,col 23)",
      "(line 609,col 9)-(line 609,col 72)",
      "(line 610,col 9)-(line 610,col 23)",
      "(line 611,col 9)-(line 611,col 72)",
      "(line 612,col 9)-(line 612,col 24)",
      "(line 613,col 9)-(line 613,col 23)",
      "(line 614,col 9)-(line 614,col 72)",
      "(line 615,col 9)-(line 615,col 24)",
      "(line 616,col 9)-(line 616,col 23)",
      "(line 617,col 9)-(line 617,col 72)",
      "(line 618,col 9)-(line 618,col 24)",
      "(line 619,col 9)-(line 619,col 23)",
      "(line 620,col 9)-(line 620,col 72)",
      "(line 621,col 9)-(line 621,col 73)",
      "(line 622,col 9)-(line 622,col 74)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexesOfChar()",
    "snippet": "@Test\n    public void testIndexesOfChar() {\n        char[] array \u003d null;\n        final BitSet emptySet \u003d new BitSet();\n        final BitSet testSet \u003d new BitSet();\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, \u0027a\u0027));\n        array \u003d new char[]{\u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027d\u0027, \u0027a\u0027};\n        testSet.set(0);\n        testSet.set(4);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, \u0027a\u0027));\n        testSet.clear();\n        testSet.set(1);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, \u0027b\u0027));\n        testSet.clear();\n        testSet.set(2);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, \u0027c\u0027));\n        testSet.clear();\n        testSet.set(3);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, \u0027d\u0027));\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, \u0027e\u0027));\n    }",
    "begin_line": 626,
    "end_line": 645,
    "comment": "",
    "child_ranges": [
      "(line 627,col 9)-(line 627,col 28)",
      "(line 628,col 9)-(line 628,col 45)",
      "(line 629,col 9)-(line 629,col 44)",
      "(line 630,col 9)-(line 630,col 65)",
      "(line 631,col 9)-(line 631,col 52)",
      "(line 632,col 9)-(line 632,col 23)",
      "(line 633,col 9)-(line 633,col 23)",
      "(line 634,col 9)-(line 634,col 64)",
      "(line 635,col 9)-(line 635,col 24)",
      "(line 636,col 9)-(line 636,col 23)",
      "(line 637,col 9)-(line 637,col 64)",
      "(line 638,col 9)-(line 638,col 24)",
      "(line 639,col 9)-(line 639,col 23)",
      "(line 640,col 9)-(line 640,col 64)",
      "(line 641,col 9)-(line 641,col 24)",
      "(line 642,col 9)-(line 642,col 23)",
      "(line 643,col 9)-(line 643,col 64)",
      "(line 644,col 9)-(line 644,col 65)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexesOfCharWithStartIndex()",
    "snippet": "@Test\n    public void testIndexesOfCharWithStartIndex() {\n        char[] array \u003d null;\n        final BitSet emptySet \u003d new BitSet();\n        final BitSet testSet \u003d new BitSet();\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, \u0027a\u0027, 0));\n        array \u003d new char[]{\u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027d\u0027, \u0027a\u0027};\n        testSet.set(4);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, \u0027a\u0027, 2));\n        testSet.set(0);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, \u0027a\u0027, 0));\n        assertEquals(testSet, ArrayUtils.indexesOf(array, \u0027a\u0027, -1));\n        testSet.clear();\n        testSet.set(1);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, \u0027b\u0027, 1));\n        testSet.clear();\n        testSet.set(2);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, \u0027c\u0027, 0));\n        testSet.clear();\n        testSet.set(3);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, \u0027d\u0027, 0));\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, \u0027d\u0027, 5));\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, \u0027e\u0027, 0));\n    }",
    "begin_line": 648,
    "end_line": 670,
    "comment": "",
    "child_ranges": [
      "(line 649,col 9)-(line 649,col 28)",
      "(line 650,col 9)-(line 650,col 45)",
      "(line 651,col 9)-(line 651,col 44)",
      "(line 652,col 9)-(line 652,col 68)",
      "(line 653,col 9)-(line 653,col 52)",
      "(line 654,col 9)-(line 654,col 23)",
      "(line 655,col 9)-(line 655,col 67)",
      "(line 656,col 9)-(line 656,col 23)",
      "(line 657,col 9)-(line 657,col 67)",
      "(line 658,col 9)-(line 658,col 68)",
      "(line 659,col 9)-(line 659,col 24)",
      "(line 660,col 9)-(line 660,col 23)",
      "(line 661,col 9)-(line 661,col 67)",
      "(line 662,col 9)-(line 662,col 24)",
      "(line 663,col 9)-(line 663,col 23)",
      "(line 664,col 9)-(line 664,col 67)",
      "(line 665,col 9)-(line 665,col 24)",
      "(line 666,col 9)-(line 666,col 23)",
      "(line 667,col 9)-(line 667,col 67)",
      "(line 668,col 9)-(line 668,col 68)",
      "(line 669,col 9)-(line 669,col 68)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexesOfDouble()",
    "snippet": "@Test\n    public void testIndexesOfDouble() {\n        double[] array \u003d null;\n        final BitSet emptySet \u003d new BitSet();\n        final BitSet testSet \u003d new BitSet();\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, 0));\n        array \u003d new double[]{0, 1, 2, 3, 0};\n        testSet.set(0);\n        testSet.set(4);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 0));\n        testSet.clear();\n        testSet.set(1);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 1));\n        testSet.clear();\n        testSet.set(2);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 2));\n        testSet.clear();\n        testSet.set(3);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 3));\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, 99));\n    }",
    "begin_line": 673,
    "end_line": 692,
    "comment": "",
    "child_ranges": [
      "(line 674,col 9)-(line 674,col 30)",
      "(line 675,col 9)-(line 675,col 45)",
      "(line 676,col 9)-(line 676,col 44)",
      "(line 677,col 9)-(line 677,col 63)",
      "(line 678,col 9)-(line 678,col 44)",
      "(line 679,col 9)-(line 679,col 23)",
      "(line 680,col 9)-(line 680,col 23)",
      "(line 681,col 9)-(line 681,col 62)",
      "(line 682,col 9)-(line 682,col 24)",
      "(line 683,col 9)-(line 683,col 23)",
      "(line 684,col 9)-(line 684,col 62)",
      "(line 685,col 9)-(line 685,col 24)",
      "(line 686,col 9)-(line 686,col 23)",
      "(line 687,col 9)-(line 687,col 62)",
      "(line 688,col 9)-(line 688,col 24)",
      "(line 689,col 9)-(line 689,col 23)",
      "(line 690,col 9)-(line 690,col 62)",
      "(line 691,col 9)-(line 691,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexesOfDoubleTolerance()",
    "snippet": "@SuppressWarnings(\"cast\")\n    @Test\n    public void testIndexesOfDoubleTolerance() {\n        double[] array \u003d null;\n        final BitSet emptySet \u003d new BitSet();\n        final BitSet testSet \u003d new BitSet();\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, (double) 0, (double) 0));\n        array \u003d new double[0];\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, (double) 0, (double) 0));\n        array \u003d new double[]{0, 1, 2, 3, 0};\n        testSet.set(0);\n        testSet.set(4);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (double) 0, 0.3));\n        testSet.clear();\n        testSet.set(3);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 4.15, 2.0));\n        testSet.clear();\n        testSet.set(1);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 1.00001324, 0.0001));\n    }",
    "begin_line": 696,
    "end_line": 713,
    "comment": "",
    "child_ranges": [
      "(line 697,col 9)-(line 697,col 30)",
      "(line 698,col 9)-(line 698,col 45)",
      "(line 699,col 9)-(line 699,col 44)",
      "(line 700,col 9)-(line 700,col 84)",
      "(line 701,col 9)-(line 701,col 30)",
      "(line 702,col 9)-(line 702,col 84)",
      "(line 703,col 9)-(line 703,col 44)",
      "(line 704,col 9)-(line 704,col 23)",
      "(line 705,col 9)-(line 705,col 23)",
      "(line 706,col 9)-(line 706,col 76)",
      "(line 707,col 9)-(line 707,col 24)",
      "(line 708,col 9)-(line 708,col 23)",
      "(line 709,col 9)-(line 709,col 70)",
      "(line 710,col 9)-(line 710,col 24)",
      "(line 711,col 9)-(line 711,col 23)",
      "(line 712,col 9)-(line 712,col 79)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexesOfDoubleWithStartIndex()",
    "snippet": "@Test\n    public void testIndexesOfDoubleWithStartIndex() {\n        double[] array \u003d null;\n        final BitSet emptySet \u003d new BitSet();\n        final BitSet testSet \u003d new BitSet();\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, 0, 2));\n        array \u003d new double[]{0, 1, 2, 3, 0};\n        testSet.set(4);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 2));\n        testSet.set(0);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 0));\n        testSet.clear();\n        testSet.set(1);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 1, 1));\n        testSet.clear();\n        testSet.set(2);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 0));\n        testSet.clear();\n        testSet.set(3);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 3, 0));\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 3, -1));\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, 99, 0));\n    }",
    "begin_line": 716,
    "end_line": 737,
    "comment": "",
    "child_ranges": [
      "(line 717,col 9)-(line 717,col 30)",
      "(line 718,col 9)-(line 718,col 45)",
      "(line 719,col 9)-(line 719,col 44)",
      "(line 720,col 9)-(line 720,col 66)",
      "(line 721,col 9)-(line 721,col 44)",
      "(line 722,col 9)-(line 722,col 23)",
      "(line 723,col 9)-(line 723,col 65)",
      "(line 724,col 9)-(line 724,col 23)",
      "(line 725,col 9)-(line 725,col 65)",
      "(line 726,col 9)-(line 726,col 24)",
      "(line 727,col 9)-(line 727,col 23)",
      "(line 728,col 9)-(line 728,col 65)",
      "(line 729,col 9)-(line 729,col 24)",
      "(line 730,col 9)-(line 730,col 23)",
      "(line 731,col 9)-(line 731,col 65)",
      "(line 732,col 9)-(line 732,col 24)",
      "(line 733,col 9)-(line 733,col 23)",
      "(line 734,col 9)-(line 734,col 65)",
      "(line 735,col 9)-(line 735,col 66)",
      "(line 736,col 9)-(line 736,col 67)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexesOfDoubleWithStartIndexTolerance()",
    "snippet": "@SuppressWarnings(\"cast\")\n    @Test\n    public void testIndexesOfDoubleWithStartIndexTolerance() {\n        double[] array \u003d null;\n        final BitSet emptySet \u003d new BitSet();\n        final BitSet testSet \u003d new BitSet();\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, (double) 0, 0, (double) 0));\n        array \u003d new double[0];\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, (double) 0, 0, (double) 0));\n        array \u003d new double[]{0, 1, 2, 3, 0};\n        testSet.set(4);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (double) 0, 1, 0.3));\n        testSet.set(0);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (double) 0, 0, 0.3));\n        testSet.clear();\n        testSet.set(2);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 0, 0.35));\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 2, 0.35));\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 2, -1, 0.35));\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, 2, 3, 0.35));\n        testSet.clear();\n        testSet.set(3);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 4.15, 0, 2.0));\n        testSet.clear();\n        testSet.set(1);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 1.00001324, 0, 0.0001));\n    }",
    "begin_line": 741,
    "end_line": 765,
    "comment": "",
    "child_ranges": [
      "(line 742,col 9)-(line 742,col 30)",
      "(line 743,col 9)-(line 743,col 45)",
      "(line 744,col 9)-(line 744,col 44)",
      "(line 745,col 9)-(line 745,col 87)",
      "(line 746,col 9)-(line 746,col 30)",
      "(line 747,col 9)-(line 747,col 87)",
      "(line 748,col 9)-(line 748,col 44)",
      "(line 749,col 9)-(line 749,col 23)",
      "(line 750,col 9)-(line 750,col 79)",
      "(line 751,col 9)-(line 751,col 23)",
      "(line 752,col 9)-(line 752,col 79)",
      "(line 753,col 9)-(line 753,col 24)",
      "(line 754,col 9)-(line 754,col 23)",
      "(line 755,col 9)-(line 755,col 71)",
      "(line 756,col 9)-(line 756,col 71)",
      "(line 757,col 9)-(line 757,col 72)",
      "(line 758,col 9)-(line 758,col 72)",
      "(line 759,col 9)-(line 759,col 24)",
      "(line 760,col 9)-(line 760,col 23)",
      "(line 761,col 9)-(line 761,col 73)",
      "(line 762,col 9)-(line 762,col 24)",
      "(line 763,col 9)-(line 763,col 23)",
      "(line 764,col 9)-(line 764,col 82)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexesOfFloat()",
    "snippet": "@Test\n    public void testIndexesOfFloat() {\n        float[] array \u003d null;\n        final BitSet emptySet \u003d new BitSet();\n        final BitSet testSet \u003d new BitSet();\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, 0));\n        array \u003d new float[]{0, 1, 2, 3, 0};\n        testSet.set(0);\n        testSet.set(4);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 0));\n        testSet.clear();\n        testSet.set(1);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 1));\n        testSet.clear();\n        testSet.set(2);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 2));\n        testSet.clear();\n        testSet.set(3);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 3));\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, 99));\n    }",
    "begin_line": 768,
    "end_line": 787,
    "comment": "",
    "child_ranges": [
      "(line 769,col 9)-(line 769,col 29)",
      "(line 770,col 9)-(line 770,col 45)",
      "(line 771,col 9)-(line 771,col 44)",
      "(line 772,col 9)-(line 772,col 63)",
      "(line 773,col 9)-(line 773,col 43)",
      "(line 774,col 9)-(line 774,col 23)",
      "(line 775,col 9)-(line 775,col 23)",
      "(line 776,col 9)-(line 776,col 62)",
      "(line 777,col 9)-(line 777,col 24)",
      "(line 778,col 9)-(line 778,col 23)",
      "(line 779,col 9)-(line 779,col 62)",
      "(line 780,col 9)-(line 780,col 24)",
      "(line 781,col 9)-(line 781,col 23)",
      "(line 782,col 9)-(line 782,col 62)",
      "(line 783,col 9)-(line 783,col 24)",
      "(line 784,col 9)-(line 784,col 23)",
      "(line 785,col 9)-(line 785,col 62)",
      "(line 786,col 9)-(line 786,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexesOfFloatWithStartIndex()",
    "snippet": "@Test\n    public void testIndexesOfFloatWithStartIndex() {\n        float[] array \u003d null;\n        final BitSet emptySet \u003d new BitSet();\n        final BitSet testSet \u003d new BitSet();\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, 0, 2));\n        array \u003d new float[]{0, 1, 2, 3, 0};\n        testSet.set(4);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 2));\n        testSet.set(0);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 0));\n        testSet.clear();\n        testSet.set(1);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 1, 1));\n        testSet.clear();\n        testSet.set(2);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 0));\n        testSet.clear();\n        testSet.set(3);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 3, 0));\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 3, -1));\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, 99, 0));\n    }",
    "begin_line": 790,
    "end_line": 811,
    "comment": "",
    "child_ranges": [
      "(line 791,col 9)-(line 791,col 29)",
      "(line 792,col 9)-(line 792,col 45)",
      "(line 793,col 9)-(line 793,col 44)",
      "(line 794,col 9)-(line 794,col 66)",
      "(line 795,col 9)-(line 795,col 43)",
      "(line 796,col 9)-(line 796,col 23)",
      "(line 797,col 9)-(line 797,col 65)",
      "(line 798,col 9)-(line 798,col 23)",
      "(line 799,col 9)-(line 799,col 65)",
      "(line 800,col 9)-(line 800,col 24)",
      "(line 801,col 9)-(line 801,col 23)",
      "(line 802,col 9)-(line 802,col 65)",
      "(line 803,col 9)-(line 803,col 24)",
      "(line 804,col 9)-(line 804,col 23)",
      "(line 805,col 9)-(line 805,col 65)",
      "(line 806,col 9)-(line 806,col 24)",
      "(line 807,col 9)-(line 807,col 23)",
      "(line 808,col 9)-(line 808,col 65)",
      "(line 809,col 9)-(line 809,col 66)",
      "(line 810,col 9)-(line 810,col 67)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexesOfIntWithStartIndex()",
    "snippet": "@Test\n    public void testIndexesOfIntWithStartIndex() {\n        int[] array \u003d null;\n        final BitSet emptySet \u003d new BitSet();\n        final BitSet testSet \u003d new BitSet();\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, 0, 2));\n        array \u003d new int[]{0, 1, 2, 3, 0};\n        testSet.set(4);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 2));\n        testSet.set(0);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 0));\n        testSet.clear();\n        testSet.set(1);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 1, 1));\n        testSet.clear();\n        testSet.set(2);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 0));\n        testSet.clear();\n        testSet.set(3);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 3, 0));\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 3, -1));\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, 99, 0));\n    }",
    "begin_line": 814,
    "end_line": 835,
    "comment": "",
    "child_ranges": [
      "(line 815,col 9)-(line 815,col 27)",
      "(line 816,col 9)-(line 816,col 45)",
      "(line 817,col 9)-(line 817,col 44)",
      "(line 818,col 9)-(line 818,col 66)",
      "(line 819,col 9)-(line 819,col 41)",
      "(line 820,col 9)-(line 820,col 23)",
      "(line 821,col 9)-(line 821,col 65)",
      "(line 822,col 9)-(line 822,col 23)",
      "(line 823,col 9)-(line 823,col 65)",
      "(line 824,col 9)-(line 824,col 24)",
      "(line 825,col 9)-(line 825,col 23)",
      "(line 826,col 9)-(line 826,col 65)",
      "(line 827,col 9)-(line 827,col 24)",
      "(line 828,col 9)-(line 828,col 23)",
      "(line 829,col 9)-(line 829,col 65)",
      "(line 830,col 9)-(line 830,col 24)",
      "(line 831,col 9)-(line 831,col 23)",
      "(line 832,col 9)-(line 832,col 65)",
      "(line 833,col 9)-(line 833,col 66)",
      "(line 834,col 9)-(line 834,col 67)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexesOfLong()",
    "snippet": "@Test\n    public void testIndexesOfLong() {\n        final long[] array \u003d {0, 1, 2, 3};\n        final BitSet emptySet \u003d new BitSet();\n        final BitSet testSet \u003d new BitSet();\n        assertEquals(emptySet, ArrayUtils.indexesOf((long[]) null, 0));\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, 4));\n        testSet.set(0);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 0));\n        testSet.clear();\n        testSet.set(1);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 1));\n        testSet.clear();\n        testSet.set(2);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 2));\n        testSet.clear();\n        testSet.set(3);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 3));\n    }",
    "begin_line": 838,
    "end_line": 855,
    "comment": "",
    "child_ranges": [
      "(line 839,col 9)-(line 839,col 42)",
      "(line 840,col 9)-(line 840,col 45)",
      "(line 841,col 9)-(line 841,col 44)",
      "(line 842,col 9)-(line 842,col 71)",
      "(line 843,col 9)-(line 843,col 63)",
      "(line 844,col 9)-(line 844,col 23)",
      "(line 845,col 9)-(line 845,col 62)",
      "(line 846,col 9)-(line 846,col 24)",
      "(line 847,col 9)-(line 847,col 23)",
      "(line 848,col 9)-(line 848,col 62)",
      "(line 849,col 9)-(line 849,col 24)",
      "(line 850,col 9)-(line 850,col 23)",
      "(line 851,col 9)-(line 851,col 62)",
      "(line 852,col 9)-(line 852,col 24)",
      "(line 853,col 9)-(line 853,col 23)",
      "(line 854,col 9)-(line 854,col 62)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexesOfLongWithStartIndex()",
    "snippet": "@Test\n    public void testIndexesOfLongWithStartIndex() {\n        final long[] array \u003d {0, 1, 2, 3, 2, 1, 0, 1};\n        final BitSet emptySet \u003d new BitSet();\n        final BitSet testSet \u003d new BitSet();\n        assertEquals(emptySet, ArrayUtils.indexesOf((long[]) null, 0, 0));\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, 4, 0));\n        testSet.set(6);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 1));\n        testSet.set(0);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 0));\n        testSet.clear();\n        testSet.set(1);\n        testSet.set(5);\n        testSet.set(7);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 1, 0));\n        testSet.clear();\n        testSet.set(2);\n        testSet.set(4);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 0));\n        testSet.clear();\n        testSet.set(3);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 3, 0));\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, 3, 8));\n    }",
    "begin_line": 858,
    "end_line": 881,
    "comment": "",
    "child_ranges": [
      "(line 859,col 9)-(line 859,col 54)",
      "(line 860,col 9)-(line 860,col 45)",
      "(line 861,col 9)-(line 861,col 44)",
      "(line 862,col 9)-(line 862,col 74)",
      "(line 863,col 9)-(line 863,col 66)",
      "(line 864,col 9)-(line 864,col 23)",
      "(line 865,col 9)-(line 865,col 65)",
      "(line 866,col 9)-(line 866,col 23)",
      "(line 867,col 9)-(line 867,col 65)",
      "(line 868,col 9)-(line 868,col 24)",
      "(line 869,col 9)-(line 869,col 23)",
      "(line 870,col 9)-(line 870,col 23)",
      "(line 871,col 9)-(line 871,col 23)",
      "(line 872,col 9)-(line 872,col 65)",
      "(line 873,col 9)-(line 873,col 24)",
      "(line 874,col 9)-(line 874,col 23)",
      "(line 875,col 9)-(line 875,col 23)",
      "(line 876,col 9)-(line 876,col 65)",
      "(line 877,col 9)-(line 877,col 24)",
      "(line 878,col 9)-(line 878,col 23)",
      "(line 879,col 9)-(line 879,col 65)",
      "(line 880,col 9)-(line 880,col 66)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexesOfShort()",
    "snippet": "@Test\n    public void testIndexesOfShort() {\n        short[] array \u003d null;\n        final BitSet emptySet \u003d new BitSet();\n        final BitSet testSet \u003d new BitSet();\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, (short) 0));\n        array \u003d new short[]{0, 1, 2, 3, 0};\n        testSet.set(0);\n        testSet.set(4);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 0));\n        testSet.clear();\n        testSet.set(1);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 1));\n        testSet.clear();\n        testSet.set(2);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 2));\n        testSet.clear();\n        testSet.set(3);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 3));\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, (short) 99));\n    }",
    "begin_line": 884,
    "end_line": 903,
    "comment": "",
    "child_ranges": [
      "(line 885,col 9)-(line 885,col 29)",
      "(line 886,col 9)-(line 886,col 45)",
      "(line 887,col 9)-(line 887,col 44)",
      "(line 888,col 9)-(line 888,col 71)",
      "(line 889,col 9)-(line 889,col 43)",
      "(line 890,col 9)-(line 890,col 23)",
      "(line 891,col 9)-(line 891,col 23)",
      "(line 892,col 9)-(line 892,col 70)",
      "(line 893,col 9)-(line 893,col 24)",
      "(line 894,col 9)-(line 894,col 23)",
      "(line 895,col 9)-(line 895,col 70)",
      "(line 896,col 9)-(line 896,col 24)",
      "(line 897,col 9)-(line 897,col 23)",
      "(line 898,col 9)-(line 898,col 70)",
      "(line 899,col 9)-(line 899,col 24)",
      "(line 900,col 9)-(line 900,col 23)",
      "(line 901,col 9)-(line 901,col 70)",
      "(line 902,col 9)-(line 902,col 72)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexesOfShortWithStartIndex()",
    "snippet": "@Test\n    public void testIndexesOfShortWithStartIndex() {\n        short[] array \u003d null;\n        final BitSet emptySet \u003d new BitSet();\n        final BitSet testSet \u003d new BitSet();\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, (short) 0, 2));\n        array \u003d new short[]{0, 1, 2, 3, 0};\n        testSet.set(4);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 0, 2));\n        testSet.set(0);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 0, 0));\n        testSet.clear();\n        testSet.set(1);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 1, 1));\n        testSet.clear();\n        testSet.set(2);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 2, 0));\n        testSet.clear();\n        testSet.set(3);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 3, 0));\n        assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 3, -1));\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, (short) 99, 0));\n    }",
    "begin_line": 906,
    "end_line": 927,
    "comment": "",
    "child_ranges": [
      "(line 907,col 9)-(line 907,col 29)",
      "(line 908,col 9)-(line 908,col 45)",
      "(line 909,col 9)-(line 909,col 44)",
      "(line 910,col 9)-(line 910,col 74)",
      "(line 911,col 9)-(line 911,col 43)",
      "(line 912,col 9)-(line 912,col 23)",
      "(line 913,col 9)-(line 913,col 73)",
      "(line 914,col 9)-(line 914,col 23)",
      "(line 915,col 9)-(line 915,col 73)",
      "(line 916,col 9)-(line 916,col 24)",
      "(line 917,col 9)-(line 917,col 23)",
      "(line 918,col 9)-(line 918,col 73)",
      "(line 919,col 9)-(line 919,col 24)",
      "(line 920,col 9)-(line 920,col 23)",
      "(line 921,col 9)-(line 921,col 73)",
      "(line 922,col 9)-(line 922,col 24)",
      "(line 923,col 9)-(line 923,col 23)",
      "(line 924,col 9)-(line 924,col 73)",
      "(line 925,col 9)-(line 925,col 74)",
      "(line 926,col 9)-(line 926,col 75)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexesOfWithStartIndex()",
    "snippet": "@Test\n    public void testIndexesOfWithStartIndex() {\n        final Object[] array \u003d {\"0\", \"1\", \"2\", \"3\", \"2\", \"3\", \"1\", null, \"0\"};\n        final BitSet emptySet \u003d new BitSet();\n        final BitSet testSet \u003d new BitSet();\n        assertEquals(emptySet, ArrayUtils.indexesOf(null, null, 2));\n        assertEquals(emptySet, ArrayUtils.indexesOf(new Object[0], \"0\", 0));\n        assertEquals(emptySet, ArrayUtils.indexesOf(null, \"0\", 2));\n        testSet.set(8);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, \"0\", 8));\n        testSet.set(0);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, \"0\", 0));\n        testSet.clear();\n        testSet.set(6);\n        testSet.set(1);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, \"1\", 0));\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, \"1\", 9));\n        testSet.clear();\n        testSet.set(4);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, \"2\", 3));\n        testSet.set(2);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, \"2\", 0));\n        testSet.clear();\n        testSet.set(3);\n        testSet.set(5);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, \"3\", 0));\n        testSet.clear();\n        testSet.set(7);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, null, 0));\n\n    }",
    "begin_line": 930,
    "end_line": 959,
    "comment": "",
    "child_ranges": [
      "(line 931,col 9)-(line 931,col 78)",
      "(line 932,col 9)-(line 932,col 45)",
      "(line 933,col 9)-(line 933,col 44)",
      "(line 934,col 9)-(line 934,col 68)",
      "(line 935,col 9)-(line 935,col 76)",
      "(line 936,col 9)-(line 936,col 67)",
      "(line 937,col 9)-(line 937,col 23)",
      "(line 938,col 9)-(line 938,col 67)",
      "(line 939,col 9)-(line 939,col 23)",
      "(line 940,col 9)-(line 940,col 67)",
      "(line 941,col 9)-(line 941,col 24)",
      "(line 942,col 9)-(line 942,col 23)",
      "(line 943,col 9)-(line 943,col 23)",
      "(line 944,col 9)-(line 944,col 67)",
      "(line 945,col 9)-(line 945,col 68)",
      "(line 946,col 9)-(line 946,col 24)",
      "(line 947,col 9)-(line 947,col 23)",
      "(line 948,col 9)-(line 948,col 67)",
      "(line 949,col 9)-(line 949,col 23)",
      "(line 950,col 9)-(line 950,col 67)",
      "(line 951,col 9)-(line 951,col 24)",
      "(line 952,col 9)-(line 952,col 23)",
      "(line 953,col 9)-(line 953,col 23)",
      "(line 954,col 9)-(line 954,col 67)",
      "(line 955,col 9)-(line 955,col 24)",
      "(line 956,col 9)-(line 956,col 23)",
      "(line 957,col 9)-(line 957,col 68)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOf()",
    "snippet": "@Test\n    public void testIndexOf() {\n        final Object[] array \u003d {\"0\", \"1\", \"2\", \"3\", null, \"0\"};\n        assertEquals(-1, ArrayUtils.indexOf(null, null));\n        assertEquals(-1, ArrayUtils.indexOf(null, \"0\"));\n        assertEquals(-1, ArrayUtils.indexOf(new Object[0], \"0\"));\n        assertEquals(0, ArrayUtils.indexOf(array, \"0\"));\n        assertEquals(1, ArrayUtils.indexOf(array, \"1\"));\n        assertEquals(2, ArrayUtils.indexOf(array, \"2\"));\n        assertEquals(3, ArrayUtils.indexOf(array, \"3\"));\n        assertEquals(4, ArrayUtils.indexOf(array, null));\n        assertEquals(-1, ArrayUtils.indexOf(array, \"notInArray\"));\n    }",
    "begin_line": 962,
    "end_line": 973,
    "comment": "",
    "child_ranges": [
      "(line 963,col 9)-(line 963,col 63)",
      "(line 964,col 9)-(line 964,col 57)",
      "(line 965,col 9)-(line 965,col 56)",
      "(line 966,col 9)-(line 966,col 65)",
      "(line 967,col 9)-(line 967,col 56)",
      "(line 968,col 9)-(line 968,col 56)",
      "(line 969,col 9)-(line 969,col 56)",
      "(line 970,col 9)-(line 970,col 56)",
      "(line 971,col 9)-(line 971,col 57)",
      "(line 972,col 9)-(line 972,col 66)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfBoolean()",
    "snippet": "@Test\n    public void testIndexOfBoolean() {\n        boolean[] array \u003d null;\n        assertEquals(-1, ArrayUtils.indexOf(array, true));\n        array \u003d new boolean[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, true));\n        array \u003d new boolean[]{true, false, true};\n        assertEquals(0, ArrayUtils.indexOf(array, true));\n        assertEquals(1, ArrayUtils.indexOf(array, false));\n        array \u003d new boolean[]{true, true};\n        assertEquals(-1, ArrayUtils.indexOf(array, false));\n    }",
    "begin_line": 976,
    "end_line": 986,
    "comment": "",
    "child_ranges": [
      "(line 977,col 9)-(line 977,col 31)",
      "(line 978,col 9)-(line 978,col 58)",
      "(line 979,col 9)-(line 979,col 31)",
      "(line 980,col 9)-(line 980,col 58)",
      "(line 981,col 9)-(line 981,col 49)",
      "(line 982,col 9)-(line 982,col 57)",
      "(line 983,col 9)-(line 983,col 58)",
      "(line 984,col 9)-(line 984,col 42)",
      "(line 985,col 9)-(line 985,col 59)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfBooleanWithStartIndex()",
    "snippet": "@Test\n    public void testIndexOfBooleanWithStartIndex() {\n        boolean[] array \u003d null;\n        assertEquals(-1, ArrayUtils.indexOf(array, true, 2));\n        array \u003d new boolean[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, true, 2));\n        array \u003d new boolean[]{true, false, true};\n        assertEquals(2, ArrayUtils.indexOf(array, true, 1));\n        assertEquals(-1, ArrayUtils.indexOf(array, false, 2));\n        assertEquals(1, ArrayUtils.indexOf(array, false, 0));\n        assertEquals(1, ArrayUtils.indexOf(array, false, -1));\n        array \u003d new boolean[]{true, true};\n        assertEquals(-1, ArrayUtils.indexOf(array, false, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, false, -1));\n    }",
    "begin_line": 989,
    "end_line": 1002,
    "comment": "",
    "child_ranges": [
      "(line 990,col 9)-(line 990,col 31)",
      "(line 991,col 9)-(line 991,col 61)",
      "(line 992,col 9)-(line 992,col 31)",
      "(line 993,col 9)-(line 993,col 61)",
      "(line 994,col 9)-(line 994,col 49)",
      "(line 995,col 9)-(line 995,col 60)",
      "(line 996,col 9)-(line 996,col 62)",
      "(line 997,col 9)-(line 997,col 61)",
      "(line 998,col 9)-(line 998,col 62)",
      "(line 999,col 9)-(line 999,col 42)",
      "(line 1000,col 9)-(line 1000,col 62)",
      "(line 1001,col 9)-(line 1001,col 63)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfByte()",
    "snippet": "@Test\n    public void testIndexOfByte() {\n        byte[] array \u003d null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0));\n        array \u003d new byte[]{0, 1, 2, 3, 0};\n        assertEquals(0, ArrayUtils.indexOf(array, (byte) 0));\n        assertEquals(1, ArrayUtils.indexOf(array, (byte) 1));\n        assertEquals(2, ArrayUtils.indexOf(array, (byte) 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3));\n        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99));\n    }",
    "begin_line": 1005,
    "end_line": 1014,
    "comment": "",
    "child_ranges": [
      "(line 1006,col 9)-(line 1006,col 28)",
      "(line 1007,col 9)-(line 1007,col 62)",
      "(line 1008,col 9)-(line 1008,col 42)",
      "(line 1009,col 9)-(line 1009,col 61)",
      "(line 1010,col 9)-(line 1010,col 61)",
      "(line 1011,col 9)-(line 1011,col 61)",
      "(line 1012,col 9)-(line 1012,col 61)",
      "(line 1013,col 9)-(line 1013,col 63)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfByteWithStartIndex()",
    "snippet": "@Test\n    public void testIndexOfByteWithStartIndex() {\n        byte[] array \u003d null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 2));\n        array \u003d new byte[]{0, 1, 2, 3, 0};\n        assertEquals(4, ArrayUtils.indexOf(array, (byte) 0, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 1, 2));\n        assertEquals(2, ArrayUtils.indexOf(array, (byte) 2, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 6));\n    }",
    "begin_line": 1017,
    "end_line": 1028,
    "comment": "",
    "child_ranges": [
      "(line 1018,col 9)-(line 1018,col 28)",
      "(line 1019,col 9)-(line 1019,col 65)",
      "(line 1020,col 9)-(line 1020,col 42)",
      "(line 1021,col 9)-(line 1021,col 64)",
      "(line 1022,col 9)-(line 1022,col 65)",
      "(line 1023,col 9)-(line 1023,col 64)",
      "(line 1024,col 9)-(line 1024,col 64)",
      "(line 1025,col 9)-(line 1025,col 65)",
      "(line 1026,col 9)-(line 1026,col 66)",
      "(line 1027,col 9)-(line 1027,col 65)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfChar()",
    "snippet": "@Test\n    public void testIndexOfChar() {\n        char[] array \u003d null;\n        assertEquals(-1, ArrayUtils.indexOf(array, \u0027a\u0027));\n        array \u003d new char[]{\u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027d\u0027, \u0027a\u0027};\n        assertEquals(0, ArrayUtils.indexOf(array, \u0027a\u0027));\n        assertEquals(1, ArrayUtils.indexOf(array, \u0027b\u0027));\n        assertEquals(2, ArrayUtils.indexOf(array, \u0027c\u0027));\n        assertEquals(3, ArrayUtils.indexOf(array, \u0027d\u0027));\n        assertEquals(-1, ArrayUtils.indexOf(array, \u0027e\u0027));\n    }",
    "begin_line": 1031,
    "end_line": 1040,
    "comment": "",
    "child_ranges": [
      "(line 1032,col 9)-(line 1032,col 28)",
      "(line 1033,col 9)-(line 1033,col 57)",
      "(line 1034,col 9)-(line 1034,col 52)",
      "(line 1035,col 9)-(line 1035,col 56)",
      "(line 1036,col 9)-(line 1036,col 56)",
      "(line 1037,col 9)-(line 1037,col 56)",
      "(line 1038,col 9)-(line 1038,col 56)",
      "(line 1039,col 9)-(line 1039,col 57)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfCharWithStartIndex()",
    "snippet": "@Test\n    public void testIndexOfCharWithStartIndex() {\n        char[] array \u003d null;\n        assertEquals(-1, ArrayUtils.indexOf(array, \u0027a\u0027, 2));\n        array \u003d new char[]{\u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027d\u0027, \u0027a\u0027};\n        assertEquals(4, ArrayUtils.indexOf(array, \u0027a\u0027, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, \u0027b\u0027, 2));\n        assertEquals(2, ArrayUtils.indexOf(array, \u0027c\u0027, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, \u0027d\u0027, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, \u0027d\u0027, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, \u0027e\u0027, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, \u0027a\u0027, 6));\n    }",
    "begin_line": 1043,
    "end_line": 1054,
    "comment": "",
    "child_ranges": [
      "(line 1044,col 9)-(line 1044,col 28)",
      "(line 1045,col 9)-(line 1045,col 60)",
      "(line 1046,col 9)-(line 1046,col 52)",
      "(line 1047,col 9)-(line 1047,col 59)",
      "(line 1048,col 9)-(line 1048,col 60)",
      "(line 1049,col 9)-(line 1049,col 59)",
      "(line 1050,col 9)-(line 1050,col 59)",
      "(line 1051,col 9)-(line 1051,col 60)",
      "(line 1052,col 9)-(line 1052,col 60)",
      "(line 1053,col 9)-(line 1053,col 60)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDouble()",
    "snippet": "@SuppressWarnings(\"cast\")\n    @Test\n    public void testIndexOfDouble() {\n        double[] array \u003d null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));\n        array \u003d new double[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));\n        array \u003d new double[]{0, 1, 2, 3, 0};\n        assertEquals(0, ArrayUtils.indexOf(array, (double) 0));\n        assertEquals(1, ArrayUtils.indexOf(array, (double) 1));\n        assertEquals(2, ArrayUtils.indexOf(array, (double) 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (double) 3));\n        assertEquals(3, ArrayUtils.indexOf(array, (double) 3, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 99));\n    }",
    "begin_line": 1058,
    "end_line": 1070,
    "comment": "",
    "child_ranges": [
      "(line 1059,col 9)-(line 1059,col 30)",
      "(line 1060,col 9)-(line 1060,col 64)",
      "(line 1061,col 9)-(line 1061,col 30)",
      "(line 1062,col 9)-(line 1062,col 64)",
      "(line 1063,col 9)-(line 1063,col 44)",
      "(line 1064,col 9)-(line 1064,col 63)",
      "(line 1065,col 9)-(line 1065,col 63)",
      "(line 1066,col 9)-(line 1066,col 63)",
      "(line 1067,col 9)-(line 1067,col 63)",
      "(line 1068,col 9)-(line 1068,col 67)",
      "(line 1069,col 9)-(line 1069,col 65)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDoubleNaN()",
    "snippet": "@Test\n    public void testIndexOfDoubleNaN() {\n        final double[] array \u003d { Double.NEGATIVE_INFINITY, Double.NaN, Double.POSITIVE_INFINITY, Double.NaN };\n        assertEquals(0, ArrayUtils.indexOf(array, Double.NEGATIVE_INFINITY));\n        assertEquals(1, ArrayUtils.indexOf(array, Double.NaN));\n        assertEquals(2, ArrayUtils.indexOf(array, Double.POSITIVE_INFINITY));\n\n    }",
    "begin_line": 1073,
    "end_line": 1079,
    "comment": "",
    "child_ranges": [
      "(line 1074,col 9)-(line 1074,col 110)",
      "(line 1075,col 9)-(line 1075,col 77)",
      "(line 1076,col 9)-(line 1076,col 63)",
      "(line 1077,col 9)-(line 1077,col 77)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDoubleTolerance()",
    "snippet": "@SuppressWarnings(\"cast\")\n    @Test\n    public void testIndexOfDoubleTolerance() {\n        double[] array \u003d null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));\n        array \u003d new double[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));\n        array \u003d new double[]{0, 1, 2, 3, 0};\n        assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0.3));\n        assertEquals(2, ArrayUtils.indexOf(array, 2.2, 0.35));\n        assertEquals(3, ArrayUtils.indexOf(array, 4.15, 2.0));\n        assertEquals(1, ArrayUtils.indexOf(array, 1.00001324, 0.0001));\n    }",
    "begin_line": 1083,
    "end_line": 1093,
    "comment": "",
    "child_ranges": [
      "(line 1084,col 9)-(line 1084,col 30)",
      "(line 1085,col 9)-(line 1085,col 76)",
      "(line 1086,col 9)-(line 1086,col 30)",
      "(line 1087,col 9)-(line 1087,col 76)",
      "(line 1088,col 9)-(line 1088,col 44)",
      "(line 1089,col 9)-(line 1089,col 68)",
      "(line 1090,col 9)-(line 1090,col 62)",
      "(line 1091,col 9)-(line 1091,col 62)",
      "(line 1092,col 9)-(line 1092,col 71)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDoubleWithStartIndex()",
    "snippet": "@SuppressWarnings(\"cast\")\n    @Test\n    public void testIndexOfDoubleWithStartIndex() {\n        double[] array \u003d null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));\n        array \u003d new double[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));\n        array \u003d new double[]{0, 1, 2, 3, 0};\n        assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 1, 2));\n        assertEquals(2, ArrayUtils.indexOf(array, (double) 2, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (double) 3, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 99, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 6));\n    }",
    "begin_line": 1097,
    "end_line": 1109,
    "comment": "",
    "child_ranges": [
      "(line 1098,col 9)-(line 1098,col 30)",
      "(line 1099,col 9)-(line 1099,col 67)",
      "(line 1100,col 9)-(line 1100,col 30)",
      "(line 1101,col 9)-(line 1101,col 67)",
      "(line 1102,col 9)-(line 1102,col 44)",
      "(line 1103,col 9)-(line 1103,col 66)",
      "(line 1104,col 9)-(line 1104,col 67)",
      "(line 1105,col 9)-(line 1105,col 66)",
      "(line 1106,col 9)-(line 1106,col 66)",
      "(line 1107,col 9)-(line 1107,col 68)",
      "(line 1108,col 9)-(line 1108,col 67)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDoubleWithStartIndexTolerance()",
    "snippet": "@SuppressWarnings(\"cast\")\n    @Test\n    public void testIndexOfDoubleWithStartIndexTolerance() {\n        double[] array \u003d null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));\n        array \u003d new double[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));\n        array \u003d new double[]{0, 1, 2, 3, 0};\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, 0.3));\n        assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, 0.3));\n        assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, 0.3));\n        assertEquals(2, ArrayUtils.indexOf(array, 2.2, 0, 0.35));\n        assertEquals(3, ArrayUtils.indexOf(array, 4.15, 0, 2.0));\n        assertEquals(1, ArrayUtils.indexOf(array, 1.00001324, 0, 0.0001));\n        assertEquals(3, ArrayUtils.indexOf(array, 4.15, -1, 2.0));\n        assertEquals(1, ArrayUtils.indexOf(array, 1.00001324, -300, 0.0001));\n    }",
    "begin_line": 1113,
    "end_line": 1127,
    "comment": "",
    "child_ranges": [
      "(line 1114,col 9)-(line 1114,col 30)",
      "(line 1115,col 9)-(line 1115,col 79)",
      "(line 1116,col 9)-(line 1116,col 30)",
      "(line 1117,col 9)-(line 1117,col 79)",
      "(line 1118,col 9)-(line 1118,col 44)",
      "(line 1119,col 9)-(line 1119,col 73)",
      "(line 1120,col 9)-(line 1120,col 71)",
      "(line 1121,col 9)-(line 1121,col 71)",
      "(line 1122,col 9)-(line 1122,col 65)",
      "(line 1123,col 9)-(line 1123,col 65)",
      "(line 1124,col 9)-(line 1124,col 74)",
      "(line 1125,col 9)-(line 1125,col 66)",
      "(line 1126,col 9)-(line 1126,col 77)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfFloat()",
    "snippet": "@SuppressWarnings(\"cast\")\n    @Test\n    public void testIndexOfFloat() {\n        float[] array \u003d null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));\n        array \u003d new float[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));\n        array \u003d new float[]{0, 1, 2, 3, 0};\n        assertEquals(0, ArrayUtils.indexOf(array, (float) 0));\n        assertEquals(1, ArrayUtils.indexOf(array, (float) 1));\n        assertEquals(2, ArrayUtils.indexOf(array, (float) 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (float) 3));\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 99));\n    }",
    "begin_line": 1131,
    "end_line": 1142,
    "comment": "",
    "child_ranges": [
      "(line 1132,col 9)-(line 1132,col 29)",
      "(line 1133,col 9)-(line 1133,col 63)",
      "(line 1134,col 9)-(line 1134,col 29)",
      "(line 1135,col 9)-(line 1135,col 63)",
      "(line 1136,col 9)-(line 1136,col 43)",
      "(line 1137,col 9)-(line 1137,col 62)",
      "(line 1138,col 9)-(line 1138,col 62)",
      "(line 1139,col 9)-(line 1139,col 62)",
      "(line 1140,col 9)-(line 1140,col 62)",
      "(line 1141,col 9)-(line 1141,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfFloatNaN()",
    "snippet": "@Test\n    public void testIndexOfFloatNaN() {\n        final float[] array \u003d { Float.NEGATIVE_INFINITY, Float.NaN, Float.POSITIVE_INFINITY, Float.NaN };\n        assertEquals(0, ArrayUtils.indexOf(array, Float.NEGATIVE_INFINITY));\n        assertEquals(1, ArrayUtils.indexOf(array, Float.NaN));\n        assertEquals(2, ArrayUtils.indexOf(array, Float.POSITIVE_INFINITY));\n    }",
    "begin_line": 1145,
    "end_line": 1150,
    "comment": "",
    "child_ranges": [
      "(line 1146,col 9)-(line 1146,col 105)",
      "(line 1147,col 9)-(line 1147,col 76)",
      "(line 1148,col 9)-(line 1148,col 62)",
      "(line 1149,col 9)-(line 1149,col 76)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfFloatWithStartIndex()",
    "snippet": "@SuppressWarnings(\"cast\")\n    @Test\n    public void testIndexOfFloatWithStartIndex() {\n        float[] array \u003d null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));\n        array \u003d new float[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));\n        array \u003d new float[]{0, 1, 2, 3, 0};\n        assertEquals(4, ArrayUtils.indexOf(array, (float) 0, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 1, 2));\n        assertEquals(2, ArrayUtils.indexOf(array, (float) 2, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (float) 3, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (float) 3, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 99, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 6));\n    }",
    "begin_line": 1154,
    "end_line": 1167,
    "comment": "",
    "child_ranges": [
      "(line 1155,col 9)-(line 1155,col 29)",
      "(line 1156,col 9)-(line 1156,col 66)",
      "(line 1157,col 9)-(line 1157,col 29)",
      "(line 1158,col 9)-(line 1158,col 66)",
      "(line 1159,col 9)-(line 1159,col 43)",
      "(line 1160,col 9)-(line 1160,col 65)",
      "(line 1161,col 9)-(line 1161,col 66)",
      "(line 1162,col 9)-(line 1162,col 65)",
      "(line 1163,col 9)-(line 1163,col 65)",
      "(line 1164,col 9)-(line 1164,col 66)",
      "(line 1165,col 9)-(line 1165,col 67)",
      "(line 1166,col 9)-(line 1166,col 66)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfInt()",
    "snippet": "@Test\n    public void testIndexOfInt() {\n        int[] array \u003d null;\n        assertEquals(-1, ArrayUtils.indexOf(array, 0));\n        array \u003d new int[]{0, 1, 2, 3, 0};\n        assertEquals(0, ArrayUtils.indexOf(array, 0));\n        assertEquals(1, ArrayUtils.indexOf(array, 1));\n        assertEquals(2, ArrayUtils.indexOf(array, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 3));\n        assertEquals(-1, ArrayUtils.indexOf(array, 99));\n    }",
    "begin_line": 1170,
    "end_line": 1179,
    "comment": "",
    "child_ranges": [
      "(line 1171,col 9)-(line 1171,col 27)",
      "(line 1172,col 9)-(line 1172,col 55)",
      "(line 1173,col 9)-(line 1173,col 41)",
      "(line 1174,col 9)-(line 1174,col 54)",
      "(line 1175,col 9)-(line 1175,col 54)",
      "(line 1176,col 9)-(line 1176,col 54)",
      "(line 1177,col 9)-(line 1177,col 54)",
      "(line 1178,col 9)-(line 1178,col 56)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfIntWithStartIndex()",
    "snippet": "@Test\n    public void testIndexOfIntWithStartIndex() {\n        int[] array \u003d null;\n        assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));\n        array \u003d new int[]{0, 1, 2, 3, 0};\n        assertEquals(4, ArrayUtils.indexOf(array, 0, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));\n        assertEquals(2, ArrayUtils.indexOf(array, 2, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 3, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 3, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));\n    }",
    "begin_line": 1182,
    "end_line": 1193,
    "comment": "",
    "child_ranges": [
      "(line 1183,col 9)-(line 1183,col 27)",
      "(line 1184,col 9)-(line 1184,col 58)",
      "(line 1185,col 9)-(line 1185,col 41)",
      "(line 1186,col 9)-(line 1186,col 57)",
      "(line 1187,col 9)-(line 1187,col 58)",
      "(line 1188,col 9)-(line 1188,col 57)",
      "(line 1189,col 9)-(line 1189,col 57)",
      "(line 1190,col 9)-(line 1190,col 58)",
      "(line 1191,col 9)-(line 1191,col 59)",
      "(line 1192,col 9)-(line 1192,col 58)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfLong()",
    "snippet": "@Test\n    public void testIndexOfLong() {\n        long[] array \u003d null;\n        assertEquals(-1, ArrayUtils.indexOf(array, 0));\n        array \u003d new long[]{0, 1, 2, 3, 0};\n        assertEquals(0, ArrayUtils.indexOf(array, 0));\n        assertEquals(1, ArrayUtils.indexOf(array, 1));\n        assertEquals(2, ArrayUtils.indexOf(array, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 3));\n        assertEquals(-1, ArrayUtils.indexOf(array, 99));\n    }",
    "begin_line": 1196,
    "end_line": 1205,
    "comment": "",
    "child_ranges": [
      "(line 1197,col 9)-(line 1197,col 28)",
      "(line 1198,col 9)-(line 1198,col 55)",
      "(line 1199,col 9)-(line 1199,col 42)",
      "(line 1200,col 9)-(line 1200,col 54)",
      "(line 1201,col 9)-(line 1201,col 54)",
      "(line 1202,col 9)-(line 1202,col 54)",
      "(line 1203,col 9)-(line 1203,col 54)",
      "(line 1204,col 9)-(line 1204,col 56)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfLongWithStartIndex()",
    "snippet": "@Test\n    public void testIndexOfLongWithStartIndex() {\n        long[] array \u003d null;\n        assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));\n        array \u003d new long[]{0, 1, 2, 3, 0};\n        assertEquals(4, ArrayUtils.indexOf(array, 0, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));\n        assertEquals(2, ArrayUtils.indexOf(array, 2, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 3, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 3, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));\n    }",
    "begin_line": 1208,
    "end_line": 1219,
    "comment": "",
    "child_ranges": [
      "(line 1209,col 9)-(line 1209,col 28)",
      "(line 1210,col 9)-(line 1210,col 58)",
      "(line 1211,col 9)-(line 1211,col 42)",
      "(line 1212,col 9)-(line 1212,col 57)",
      "(line 1213,col 9)-(line 1213,col 58)",
      "(line 1214,col 9)-(line 1214,col 57)",
      "(line 1215,col 9)-(line 1215,col 57)",
      "(line 1216,col 9)-(line 1216,col 58)",
      "(line 1217,col 9)-(line 1217,col 59)",
      "(line 1218,col 9)-(line 1218,col 58)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfShort()",
    "snippet": "@Test\n    public void testIndexOfShort() {\n        short[] array \u003d null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0));\n        array \u003d new short[]{0, 1, 2, 3, 0};\n        assertEquals(0, ArrayUtils.indexOf(array, (short) 0));\n        assertEquals(1, ArrayUtils.indexOf(array, (short) 1));\n        assertEquals(2, ArrayUtils.indexOf(array, (short) 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (short) 3));\n        assertEquals(-1, ArrayUtils.indexOf(array, (short) 99));\n    }",
    "begin_line": 1222,
    "end_line": 1231,
    "comment": "",
    "child_ranges": [
      "(line 1223,col 9)-(line 1223,col 29)",
      "(line 1224,col 9)-(line 1224,col 63)",
      "(line 1225,col 9)-(line 1225,col 43)",
      "(line 1226,col 9)-(line 1226,col 62)",
      "(line 1227,col 9)-(line 1227,col 62)",
      "(line 1228,col 9)-(line 1228,col 62)",
      "(line 1229,col 9)-(line 1229,col 62)",
      "(line 1230,col 9)-(line 1230,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfShortWithStartIndex()",
    "snippet": "@Test\n    public void testIndexOfShortWithStartIndex() {\n        short[] array \u003d null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 2));\n        array \u003d new short[]{0, 1, 2, 3, 0};\n        assertEquals(4, ArrayUtils.indexOf(array, (short) 0, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, (short) 1, 2));\n        assertEquals(2, ArrayUtils.indexOf(array, (short) 2, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (short) 3, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (short) 3, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, (short) 99, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 6));\n    }",
    "begin_line": 1234,
    "end_line": 1245,
    "comment": "",
    "child_ranges": [
      "(line 1235,col 9)-(line 1235,col 29)",
      "(line 1236,col 9)-(line 1236,col 66)",
      "(line 1237,col 9)-(line 1237,col 43)",
      "(line 1238,col 9)-(line 1238,col 65)",
      "(line 1239,col 9)-(line 1239,col 66)",
      "(line 1240,col 9)-(line 1240,col 65)",
      "(line 1241,col 9)-(line 1241,col 65)",
      "(line 1242,col 9)-(line 1242,col 66)",
      "(line 1243,col 9)-(line 1243,col 67)",
      "(line 1244,col 9)-(line 1244,col 66)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfWithStartIndex()",
    "snippet": "@Test\n    public void testIndexOfWithStartIndex() {\n        final Object[] array \u003d {\"0\", \"1\", \"2\", \"3\", null, \"0\"};\n        assertEquals(-1, ArrayUtils.indexOf(null, null, 2));\n        assertEquals(-1, ArrayUtils.indexOf(new Object[0], \"0\", 0));\n        assertEquals(-1, ArrayUtils.indexOf(null, \"0\", 2));\n        assertEquals(5, ArrayUtils.indexOf(array, \"0\", 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, \"1\", 2));\n        assertEquals(2, ArrayUtils.indexOf(array, \"2\", 2));\n        assertEquals(3, ArrayUtils.indexOf(array, \"3\", 2));\n        assertEquals(4, ArrayUtils.indexOf(array, null, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, \"notInArray\", 2));\n\n        assertEquals(4, ArrayUtils.indexOf(array, null, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, null, 8));\n        assertEquals(-1, ArrayUtils.indexOf(array, \"0\", 8));\n    }",
    "begin_line": 1248,
    "end_line": 1263,
    "comment": "",
    "child_ranges": [
      "(line 1249,col 9)-(line 1249,col 63)",
      "(line 1250,col 9)-(line 1250,col 60)",
      "(line 1251,col 9)-(line 1251,col 68)",
      "(line 1252,col 9)-(line 1252,col 59)",
      "(line 1253,col 9)-(line 1253,col 59)",
      "(line 1254,col 9)-(line 1254,col 60)",
      "(line 1255,col 9)-(line 1255,col 59)",
      "(line 1256,col 9)-(line 1256,col 59)",
      "(line 1257,col 9)-(line 1257,col 60)",
      "(line 1258,col 9)-(line 1258,col 69)",
      "(line 1260,col 9)-(line 1260,col 61)",
      "(line 1261,col 9)-(line 1261,col 61)",
      "(line 1262,col 9)-(line 1262,col 60)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndirectArrayCreation()",
    "snippet": "@Test\n    public void testIndirectArrayCreation() {\n        final String[] array \u003d toArrayPropagatingType(\"foo\", \"bar\");\n        assertEquals(2, array.length);\n        assertEquals(\"foo\", array[0]);\n        assertEquals(\"bar\", array[1]);\n    }",
    "begin_line": 1269,
    "end_line": 1274,
    "comment": "/** \n * Tests generic array creation with generic type.\n */\n",
    "child_ranges": [
      "(line 1270,col 9)-(line 1270,col 68)",
      "(line 1271,col 9)-(line 1271,col 38)",
      "(line 1272,col 9)-(line 1272,col 38)",
      "(line 1273,col 9)-(line 1273,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndirectEmptyArrayCreation()",
    "snippet": "@Test\n    public void testIndirectEmptyArrayCreation() {\n        final String[] array \u003d ArrayUtilsTest.\u003cString\u003etoArrayPropagatingType();\n        assertEquals(0, array.length);\n    }",
    "begin_line": 1280,
    "end_line": 1283,
    "comment": "/** \n * Tests indirect generic empty array creation with generic type.\n */\n",
    "child_ranges": [
      "(line 1281,col 9)-(line 1281,col 79)",
      "(line 1282,col 9)-(line 1282,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsArrayIndexValid()",
    "snippet": "@Test\n    public void testIsArrayIndexValid() {\n        assertFalse(ArrayUtils.isArrayIndexValid(null, 0));\n        final String[] array \u003d new String[1];\n\n        //too big\n        assertFalse(ArrayUtils.isArrayIndexValid(array, 1));\n\n        //negative index\n        assertFalse(ArrayUtils.isArrayIndexValid(array, -1));\n\n        //good to go\n        assertTrue(ArrayUtils.isArrayIndexValid(array, 0));\n    }",
    "begin_line": 1286,
    "end_line": 1298,
    "comment": "",
    "child_ranges": [
      "(line 1287,col 9)-(line 1287,col 59)",
      "(line 1288,col 9)-(line 1288,col 45)",
      "(line 1291,col 9)-(line 1291,col 60)",
      "(line 1294,col 9)-(line 1294,col 61)",
      "(line 1297,col 9)-(line 1297,col 59)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsEmptyObject()",
    "snippet": "@Test\n    public void testIsEmptyObject() {\n        final Object[] emptyArray \u003d {};\n        final Object[] notEmptyArray \u003d {\"Value\"};\n        assertTrue(ArrayUtils.isEmpty((Object[]) null));\n        assertTrue(ArrayUtils.isEmpty(emptyArray));\n        assertFalse(ArrayUtils.isEmpty(notEmptyArray));\n    }",
    "begin_line": 1304,
    "end_line": 1310,
    "comment": "/** \n * Test for  {@link ArrayUtils#isEmpty(java.lang.Object[])}.\n */\n",
    "child_ranges": [
      "(line 1305,col 9)-(line 1305,col 39)",
      "(line 1306,col 9)-(line 1306,col 49)",
      "(line 1307,col 9)-(line 1307,col 56)",
      "(line 1308,col 9)-(line 1308,col 51)",
      "(line 1309,col 9)-(line 1309,col 55)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsEmptyPrimitives()",
    "snippet": "@Test\n    public void testIsEmptyPrimitives() {\n        final long[] emptyLongArray \u003d {};\n        final long[] notEmptyLongArray \u003d {1L};\n        assertTrue(ArrayUtils.isEmpty((long[]) null));\n        assertTrue(ArrayUtils.isEmpty(emptyLongArray));\n        assertFalse(ArrayUtils.isEmpty(notEmptyLongArray));\n\n        final int[] emptyIntArray \u003d {};\n        final int[] notEmptyIntArray \u003d {1};\n        assertTrue(ArrayUtils.isEmpty((int[]) null));\n        assertTrue(ArrayUtils.isEmpty(emptyIntArray));\n        assertFalse(ArrayUtils.isEmpty(notEmptyIntArray));\n\n        final short[] emptyShortArray \u003d {};\n        final short[] notEmptyShortArray \u003d {1};\n        assertTrue(ArrayUtils.isEmpty((short[]) null));\n        assertTrue(ArrayUtils.isEmpty(emptyShortArray));\n        assertFalse(ArrayUtils.isEmpty(notEmptyShortArray));\n\n        final char[] emptyCharArray \u003d {};\n        final char[] notEmptyCharArray \u003d {1};\n        assertTrue(ArrayUtils.isEmpty((char[]) null));\n        assertTrue(ArrayUtils.isEmpty(emptyCharArray));\n        assertFalse(ArrayUtils.isEmpty(notEmptyCharArray));\n\n        final byte[] emptyByteArray \u003d {};\n        final byte[] notEmptyByteArray \u003d {1};\n        assertTrue(ArrayUtils.isEmpty((byte[]) null));\n        assertTrue(ArrayUtils.isEmpty(emptyByteArray));\n        assertFalse(ArrayUtils.isEmpty(notEmptyByteArray));\n\n        final double[] emptyDoubleArray \u003d {};\n        final double[] notEmptyDoubleArray \u003d {1.0};\n        assertTrue(ArrayUtils.isEmpty((double[]) null));\n        assertTrue(ArrayUtils.isEmpty(emptyDoubleArray));\n        assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray));\n\n        final float[] emptyFloatArray \u003d {};\n        final float[] notEmptyFloatArray \u003d {1.0F};\n        assertTrue(ArrayUtils.isEmpty((float[]) null));\n        assertTrue(ArrayUtils.isEmpty(emptyFloatArray));\n        assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray));\n\n        final boolean[] emptyBooleanArray \u003d {};\n        final boolean[] notEmptyBooleanArray \u003d {true};\n        assertTrue(ArrayUtils.isEmpty((boolean[]) null));\n        assertTrue(ArrayUtils.isEmpty(emptyBooleanArray));\n        assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray));\n    }",
    "begin_line": 1323,
    "end_line": 1371,
    "comment": "/** \n * Tests for  {@link ArrayUtils#isEmpty(long[])}, {@link ArrayUtils#isEmpty(int[])}, {@link ArrayUtils#isEmpty(short[])}, {@link ArrayUtils#isEmpty(char[])}, {@link ArrayUtils#isEmpty(byte[])}, {@link ArrayUtils#isEmpty(double[])}, {@link ArrayUtils#isEmpty(float[])} and{@link ArrayUtils#isEmpty(boolean[])}.\n */\n",
    "child_ranges": [
      "(line 1324,col 9)-(line 1324,col 41)",
      "(line 1325,col 9)-(line 1325,col 46)",
      "(line 1326,col 9)-(line 1326,col 54)",
      "(line 1327,col 9)-(line 1327,col 55)",
      "(line 1328,col 9)-(line 1328,col 59)",
      "(line 1330,col 9)-(line 1330,col 39)",
      "(line 1331,col 9)-(line 1331,col 43)",
      "(line 1332,col 9)-(line 1332,col 53)",
      "(line 1333,col 9)-(line 1333,col 54)",
      "(line 1334,col 9)-(line 1334,col 58)",
      "(line 1336,col 9)-(line 1336,col 43)",
      "(line 1337,col 9)-(line 1337,col 47)",
      "(line 1338,col 9)-(line 1338,col 55)",
      "(line 1339,col 9)-(line 1339,col 56)",
      "(line 1340,col 9)-(line 1340,col 60)",
      "(line 1342,col 9)-(line 1342,col 41)",
      "(line 1343,col 9)-(line 1343,col 45)",
      "(line 1344,col 9)-(line 1344,col 54)",
      "(line 1345,col 9)-(line 1345,col 55)",
      "(line 1346,col 9)-(line 1346,col 59)",
      "(line 1348,col 9)-(line 1348,col 41)",
      "(line 1349,col 9)-(line 1349,col 45)",
      "(line 1350,col 9)-(line 1350,col 54)",
      "(line 1351,col 9)-(line 1351,col 55)",
      "(line 1352,col 9)-(line 1352,col 59)",
      "(line 1354,col 9)-(line 1354,col 45)",
      "(line 1355,col 9)-(line 1355,col 51)",
      "(line 1356,col 9)-(line 1356,col 56)",
      "(line 1357,col 9)-(line 1357,col 57)",
      "(line 1358,col 9)-(line 1358,col 61)",
      "(line 1360,col 9)-(line 1360,col 43)",
      "(line 1361,col 9)-(line 1361,col 50)",
      "(line 1362,col 9)-(line 1362,col 55)",
      "(line 1363,col 9)-(line 1363,col 56)",
      "(line 1364,col 9)-(line 1364,col 60)",
      "(line 1366,col 9)-(line 1366,col 47)",
      "(line 1367,col 9)-(line 1367,col 54)",
      "(line 1368,col 9)-(line 1368,col 57)",
      "(line 1369,col 9)-(line 1369,col 58)",
      "(line 1370,col 9)-(line 1370,col 62)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsEquals()",
    "snippet": "@Test\n    public void testIsEquals() {\n        final long[][] larray1 \u003d {{2, 5}, {4, 5}};\n        final long[][] larray2 \u003d {{2, 5}, {4, 6}};\n        final long[] larray3 \u003d {2, 5};\n        this.assertIsEquals(larray1, larray2, larray3);\n\n        final int[][] iarray1 \u003d {{2, 5}, {4, 5}};\n        final int[][] iarray2 \u003d {{2, 5}, {4, 6}};\n        final int[] iarray3 \u003d {2, 5};\n        this.assertIsEquals(iarray1, iarray2, iarray3);\n\n        final short[][] sarray1 \u003d {{2, 5}, {4, 5}};\n        final short[][] sarray2 \u003d {{2, 5}, {4, 6}};\n        final short[] sarray3 \u003d {2, 5};\n        this.assertIsEquals(sarray1, sarray2, sarray3);\n\n        final float[][] farray1 \u003d {{2, 5}, {4, 5}};\n        final float[][] farray2 \u003d {{2, 5}, {4, 6}};\n        final float[] farray3 \u003d {2, 5};\n        this.assertIsEquals(farray1, farray2, farray3);\n\n        final double[][] darray1 \u003d {{2, 5}, {4, 5}};\n        final double[][] darray2 \u003d {{2, 5}, {4, 6}};\n        final double[] darray3 \u003d {2, 5};\n        this.assertIsEquals(darray1, darray2, darray3);\n\n        final byte[][] byteArray1 \u003d {{2, 5}, {4, 5}};\n        final byte[][] byteArray2 \u003d {{2, 5}, {4, 6}};\n        final byte[] byteArray3 \u003d {2, 5};\n        this.assertIsEquals(byteArray1, byteArray2, byteArray3);\n\n        final char[][] charArray1 \u003d {{2, 5}, {4, 5}};\n        final char[][] charArray2 \u003d {{2, 5}, {4, 6}};\n        final char[] charArray3 \u003d {2, 5};\n        this.assertIsEquals(charArray1, charArray2, charArray3);\n\n        final boolean[][] barray1 \u003d {{true, false}, {true, true}};\n        final boolean[][] barray2 \u003d {{true, false}, {true, false}};\n        final boolean[] barray3 \u003d {false, true};\n        this.assertIsEquals(barray1, barray2, barray3);\n\n        final Object[] array3 \u003d {new String(new char[]{\u0027A\u0027, \u0027B\u0027})};\n        final Object[] array4 \u003d {\"AB\"};\n        assertTrue(ArrayUtils.isEquals(array3, array3));\n        assertTrue(ArrayUtils.isEquals(array3, array4));\n\n        assertTrue(ArrayUtils.isEquals(null, null));\n        assertFalse(ArrayUtils.isEquals(null, array4));\n    }",
    "begin_line": 1374,
    "end_line": 1422,
    "comment": "",
    "child_ranges": [
      "(line 1375,col 9)-(line 1375,col 50)",
      "(line 1376,col 9)-(line 1376,col 50)",
      "(line 1377,col 9)-(line 1377,col 38)",
      "(line 1378,col 9)-(line 1378,col 55)",
      "(line 1380,col 9)-(line 1380,col 49)",
      "(line 1381,col 9)-(line 1381,col 49)",
      "(line 1382,col 9)-(line 1382,col 37)",
      "(line 1383,col 9)-(line 1383,col 55)",
      "(line 1385,col 9)-(line 1385,col 51)",
      "(line 1386,col 9)-(line 1386,col 51)",
      "(line 1387,col 9)-(line 1387,col 39)",
      "(line 1388,col 9)-(line 1388,col 55)",
      "(line 1390,col 9)-(line 1390,col 51)",
      "(line 1391,col 9)-(line 1391,col 51)",
      "(line 1392,col 9)-(line 1392,col 39)",
      "(line 1393,col 9)-(line 1393,col 55)",
      "(line 1395,col 9)-(line 1395,col 52)",
      "(line 1396,col 9)-(line 1396,col 52)",
      "(line 1397,col 9)-(line 1397,col 40)",
      "(line 1398,col 9)-(line 1398,col 55)",
      "(line 1400,col 9)-(line 1400,col 53)",
      "(line 1401,col 9)-(line 1401,col 53)",
      "(line 1402,col 9)-(line 1402,col 41)",
      "(line 1403,col 9)-(line 1403,col 64)",
      "(line 1405,col 9)-(line 1405,col 53)",
      "(line 1406,col 9)-(line 1406,col 53)",
      "(line 1407,col 9)-(line 1407,col 41)",
      "(line 1408,col 9)-(line 1408,col 64)",
      "(line 1410,col 9)-(line 1410,col 66)",
      "(line 1411,col 9)-(line 1411,col 67)",
      "(line 1412,col 9)-(line 1412,col 48)",
      "(line 1413,col 9)-(line 1413,col 55)",
      "(line 1415,col 9)-(line 1415,col 67)",
      "(line 1416,col 9)-(line 1416,col 39)",
      "(line 1417,col 9)-(line 1417,col 56)",
      "(line 1418,col 9)-(line 1418,col 56)",
      "(line 1420,col 9)-(line 1420,col 52)",
      "(line 1421,col 9)-(line 1421,col 55)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyObject()",
    "snippet": "@Test\n    public void testIsNotEmptyObject() {\n        final Object[] emptyArray \u003d {};\n        final Object[] notEmptyArray \u003d {\"Value\"};\n        assertFalse(ArrayUtils.isNotEmpty((Object[]) null));\n        assertFalse(ArrayUtils.isNotEmpty(emptyArray));\n        assertTrue(ArrayUtils.isNotEmpty(notEmptyArray));\n    }",
    "begin_line": 1428,
    "end_line": 1434,
    "comment": "/** \n * Test for  {@link ArrayUtils#isNotEmpty(java.lang.Object[])}.\n */\n",
    "child_ranges": [
      "(line 1429,col 9)-(line 1429,col 39)",
      "(line 1430,col 9)-(line 1430,col 49)",
      "(line 1431,col 9)-(line 1431,col 60)",
      "(line 1432,col 9)-(line 1432,col 55)",
      "(line 1433,col 9)-(line 1433,col 57)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyPrimitives()",
    "snippet": "@Test\n    public void testIsNotEmptyPrimitives() {\n        final long[] emptyLongArray \u003d {};\n        final long[] notEmptyLongArray \u003d {1L};\n        assertFalse(ArrayUtils.isNotEmpty((long[]) null));\n        assertFalse(ArrayUtils.isNotEmpty(emptyLongArray));\n        assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray));\n\n        final int[] emptyIntArray \u003d {};\n        final int[] notEmptyIntArray \u003d {1};\n        assertFalse(ArrayUtils.isNotEmpty((int[]) null));\n        assertFalse(ArrayUtils.isNotEmpty(emptyIntArray));\n        assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray));\n\n        final short[] emptyShortArray \u003d {};\n        final short[] notEmptyShortArray \u003d {1};\n        assertFalse(ArrayUtils.isNotEmpty((short[]) null));\n        assertFalse(ArrayUtils.isNotEmpty(emptyShortArray));\n        assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray));\n\n        final char[] emptyCharArray \u003d {};\n        final char[] notEmptyCharArray \u003d {1};\n        assertFalse(ArrayUtils.isNotEmpty((char[]) null));\n        assertFalse(ArrayUtils.isNotEmpty(emptyCharArray));\n        assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray));\n\n        final byte[] emptyByteArray \u003d {};\n        final byte[] notEmptyByteArray \u003d {1};\n        assertFalse(ArrayUtils.isNotEmpty((byte[]) null));\n        assertFalse(ArrayUtils.isNotEmpty(emptyByteArray));\n        assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray));\n\n        final double[] emptyDoubleArray \u003d {};\n        final double[] notEmptyDoubleArray \u003d {1.0};\n        assertFalse(ArrayUtils.isNotEmpty((double[]) null));\n        assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray));\n        assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray));\n\n        final float[] emptyFloatArray \u003d {};\n        final float[] notEmptyFloatArray \u003d {1.0F};\n        assertFalse(ArrayUtils.isNotEmpty((float[]) null));\n        assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray));\n        assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray));\n\n        final boolean[] emptyBooleanArray \u003d {};\n        final boolean[] notEmptyBooleanArray \u003d {true};\n        assertFalse(ArrayUtils.isNotEmpty((boolean[]) null));\n        assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray));\n        assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray));\n    }",
    "begin_line": 1447,
    "end_line": 1495,
    "comment": "/** \n * Tests for  {@link ArrayUtils#isNotEmpty(long[])}, {@link ArrayUtils#isNotEmpty(int[])}, {@link ArrayUtils#isNotEmpty(short[])}, {@link ArrayUtils#isNotEmpty(char[])}, {@link ArrayUtils#isNotEmpty(byte[])}, {@link ArrayUtils#isNotEmpty(double[])}, {@link ArrayUtils#isNotEmpty(float[])} and{@link ArrayUtils#isNotEmpty(boolean[])}.\n */\n",
    "child_ranges": [
      "(line 1448,col 9)-(line 1448,col 41)",
      "(line 1449,col 9)-(line 1449,col 46)",
      "(line 1450,col 9)-(line 1450,col 58)",
      "(line 1451,col 9)-(line 1451,col 59)",
      "(line 1452,col 9)-(line 1452,col 61)",
      "(line 1454,col 9)-(line 1454,col 39)",
      "(line 1455,col 9)-(line 1455,col 43)",
      "(line 1456,col 9)-(line 1456,col 57)",
      "(line 1457,col 9)-(line 1457,col 58)",
      "(line 1458,col 9)-(line 1458,col 60)",
      "(line 1460,col 9)-(line 1460,col 43)",
      "(line 1461,col 9)-(line 1461,col 47)",
      "(line 1462,col 9)-(line 1462,col 59)",
      "(line 1463,col 9)-(line 1463,col 60)",
      "(line 1464,col 9)-(line 1464,col 62)",
      "(line 1466,col 9)-(line 1466,col 41)",
      "(line 1467,col 9)-(line 1467,col 45)",
      "(line 1468,col 9)-(line 1468,col 58)",
      "(line 1469,col 9)-(line 1469,col 59)",
      "(line 1470,col 9)-(line 1470,col 61)",
      "(line 1472,col 9)-(line 1472,col 41)",
      "(line 1473,col 9)-(line 1473,col 45)",
      "(line 1474,col 9)-(line 1474,col 58)",
      "(line 1475,col 9)-(line 1475,col 59)",
      "(line 1476,col 9)-(line 1476,col 61)",
      "(line 1478,col 9)-(line 1478,col 45)",
      "(line 1479,col 9)-(line 1479,col 51)",
      "(line 1480,col 9)-(line 1480,col 60)",
      "(line 1481,col 9)-(line 1481,col 61)",
      "(line 1482,col 9)-(line 1482,col 63)",
      "(line 1484,col 9)-(line 1484,col 43)",
      "(line 1485,col 9)-(line 1485,col 50)",
      "(line 1486,col 9)-(line 1486,col 59)",
      "(line 1487,col 9)-(line 1487,col 60)",
      "(line 1488,col 9)-(line 1488,col 62)",
      "(line 1490,col 9)-(line 1490,col 47)",
      "(line 1491,col 9)-(line 1491,col 54)",
      "(line 1492,col 9)-(line 1492,col 61)",
      "(line 1493,col 9)-(line 1493,col 62)",
      "(line 1494,col 9)-(line 1494,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsSorted()",
    "snippet": "@Test\n    public void testIsSorted() {\n        Integer[] array \u003d null;\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new Integer[]{1};\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new Integer[]{1, 2, 3};\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new Integer[]{1, 3, 2};\n        assertFalse(ArrayUtils.isSorted(array));\n    }",
    "begin_line": 1498,
    "end_line": 1510,
    "comment": "",
    "child_ranges": [
      "(line 1499,col 9)-(line 1499,col 31)",
      "(line 1500,col 9)-(line 1500,col 47)",
      "(line 1502,col 9)-(line 1502,col 33)",
      "(line 1503,col 9)-(line 1503,col 47)",
      "(line 1505,col 9)-(line 1505,col 39)",
      "(line 1506,col 9)-(line 1506,col 47)",
      "(line 1508,col 9)-(line 1508,col 39)",
      "(line 1509,col 9)-(line 1509,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsSortedBool()",
    "snippet": "@Test\n    public void testIsSortedBool() {\n        boolean[] array \u003d null;\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new boolean[]{true};\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new boolean[]{false, true};\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new boolean[]{true, false};\n        assertFalse(ArrayUtils.isSorted(array));\n    }",
    "begin_line": 1513,
    "end_line": 1525,
    "comment": "",
    "child_ranges": [
      "(line 1514,col 9)-(line 1514,col 31)",
      "(line 1515,col 9)-(line 1515,col 47)",
      "(line 1517,col 9)-(line 1517,col 36)",
      "(line 1518,col 9)-(line 1518,col 47)",
      "(line 1520,col 9)-(line 1520,col 43)",
      "(line 1521,col 9)-(line 1521,col 47)",
      "(line 1523,col 9)-(line 1523,col 43)",
      "(line 1524,col 9)-(line 1524,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsSortedByte()",
    "snippet": "@Test\n    public void testIsSortedByte() {\n        byte[] array \u003d null;\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new byte[]{0x10};\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new byte[]{0x10, 0x20, 0x30};\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new byte[]{0x10, 0x30, 0x20};\n        assertFalse(ArrayUtils.isSorted(array));\n    }",
    "begin_line": 1528,
    "end_line": 1540,
    "comment": "",
    "child_ranges": [
      "(line 1529,col 9)-(line 1529,col 28)",
      "(line 1530,col 9)-(line 1530,col 47)",
      "(line 1532,col 9)-(line 1532,col 33)",
      "(line 1533,col 9)-(line 1533,col 47)",
      "(line 1535,col 9)-(line 1535,col 45)",
      "(line 1536,col 9)-(line 1536,col 47)",
      "(line 1538,col 9)-(line 1538,col 45)",
      "(line 1539,col 9)-(line 1539,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsSortedChar()",
    "snippet": "@Test\n    public void testIsSortedChar() {\n        char[] array \u003d null;\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new char[]{\u0027a\u0027};\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new char[]{\u0027a\u0027, \u0027b\u0027, \u0027c\u0027};\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new char[]{\u0027a\u0027, \u0027c\u0027, \u0027b\u0027};\n        assertFalse(ArrayUtils.isSorted(array));\n    }",
    "begin_line": 1543,
    "end_line": 1555,
    "comment": "",
    "child_ranges": [
      "(line 1544,col 9)-(line 1544,col 28)",
      "(line 1545,col 9)-(line 1545,col 47)",
      "(line 1547,col 9)-(line 1547,col 32)",
      "(line 1548,col 9)-(line 1548,col 47)",
      "(line 1550,col 9)-(line 1550,col 42)",
      "(line 1551,col 9)-(line 1551,col 47)",
      "(line 1553,col 9)-(line 1553,col 42)",
      "(line 1554,col 9)-(line 1554,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsSortedComparator()",
    "snippet": "@Test\n    public void testIsSortedComparator() {\n        final Comparator\u003cInteger\u003e c \u003d Comparator.reverseOrder();\n\n        Integer[] array \u003d null;\n        assertTrue(ArrayUtils.isSorted(array, c));\n\n        array \u003d new Integer[]{1};\n        assertTrue(ArrayUtils.isSorted(array, c));\n\n        array \u003d new Integer[]{3, 2, 1};\n        assertTrue(ArrayUtils.isSorted(array, c));\n\n        array \u003d new Integer[]{1, 3, 2};\n        assertFalse(ArrayUtils.isSorted(array, c));\n    }",
    "begin_line": 1558,
    "end_line": 1572,
    "comment": "",
    "child_ranges": [
      "(line 1559,col 9)-(line 1559,col 64)",
      "(line 1561,col 9)-(line 1561,col 31)",
      "(line 1562,col 9)-(line 1562,col 50)",
      "(line 1564,col 9)-(line 1564,col 33)",
      "(line 1565,col 9)-(line 1565,col 50)",
      "(line 1567,col 9)-(line 1567,col 39)",
      "(line 1568,col 9)-(line 1568,col 50)",
      "(line 1570,col 9)-(line 1570,col 39)",
      "(line 1571,col 9)-(line 1571,col 51)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsSortedDouble()",
    "snippet": "@Test\n    public void testIsSortedDouble() {\n        double[] array \u003d null;\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new double[]{0.0};\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new double[]{-1.0, 0.0, 0.1, 0.2};\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new double[]{-1.0, 0.2, 0.1, 0.0};\n        assertFalse(ArrayUtils.isSorted(array));\n    }",
    "begin_line": 1575,
    "end_line": 1587,
    "comment": "",
    "child_ranges": [
      "(line 1576,col 9)-(line 1576,col 30)",
      "(line 1577,col 9)-(line 1577,col 47)",
      "(line 1579,col 9)-(line 1579,col 34)",
      "(line 1580,col 9)-(line 1580,col 47)",
      "(line 1582,col 9)-(line 1582,col 50)",
      "(line 1583,col 9)-(line 1583,col 47)",
      "(line 1585,col 9)-(line 1585,col 50)",
      "(line 1586,col 9)-(line 1586,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsSortedFloat()",
    "snippet": "@Test\n    public void testIsSortedFloat() {\n        float[] array \u003d null;\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new float[]{0f};\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new float[]{-1f, 0f, 0.1f, 0.2f};\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new float[]{-1f, 0.2f, 0.1f, 0f};\n        assertFalse(ArrayUtils.isSorted(array));\n    }",
    "begin_line": 1590,
    "end_line": 1602,
    "comment": "",
    "child_ranges": [
      "(line 1591,col 9)-(line 1591,col 29)",
      "(line 1592,col 9)-(line 1592,col 47)",
      "(line 1594,col 9)-(line 1594,col 32)",
      "(line 1595,col 9)-(line 1595,col 47)",
      "(line 1597,col 9)-(line 1597,col 49)",
      "(line 1598,col 9)-(line 1598,col 47)",
      "(line 1600,col 9)-(line 1600,col 49)",
      "(line 1601,col 9)-(line 1601,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsSortedInt()",
    "snippet": "@Test\n    public void testIsSortedInt() {\n        int[] array \u003d null;\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new int[]{1};\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new int[]{1, 2, 3};\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new int[]{1, 3, 2};\n        assertFalse(ArrayUtils.isSorted(array));\n    }",
    "begin_line": 1605,
    "end_line": 1617,
    "comment": "",
    "child_ranges": [
      "(line 1606,col 9)-(line 1606,col 27)",
      "(line 1607,col 9)-(line 1607,col 47)",
      "(line 1609,col 9)-(line 1609,col 29)",
      "(line 1610,col 9)-(line 1610,col 47)",
      "(line 1612,col 9)-(line 1612,col 35)",
      "(line 1613,col 9)-(line 1613,col 47)",
      "(line 1615,col 9)-(line 1615,col 35)",
      "(line 1616,col 9)-(line 1616,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsSortedLong()",
    "snippet": "@Test\n    public void testIsSortedLong() {\n        long[] array \u003d null;\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new long[]{0L};\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new long[]{-1L, 0L, 1L};\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new long[]{-1L, 1L, 0L};\n        assertFalse(ArrayUtils.isSorted(array));\n    }",
    "begin_line": 1620,
    "end_line": 1632,
    "comment": "",
    "child_ranges": [
      "(line 1621,col 9)-(line 1621,col 28)",
      "(line 1622,col 9)-(line 1622,col 47)",
      "(line 1624,col 9)-(line 1624,col 31)",
      "(line 1625,col 9)-(line 1625,col 47)",
      "(line 1627,col 9)-(line 1627,col 40)",
      "(line 1628,col 9)-(line 1628,col 47)",
      "(line 1630,col 9)-(line 1630,col 40)",
      "(line 1631,col 9)-(line 1631,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsSortedNullComparator()",
    "snippet": "@Test\n    public void testIsSortedNullComparator() {\n        assertThrows(IllegalArgumentException.class, () -\u003e ArrayUtils.isSorted(null, null));\n    }",
    "begin_line": 1635,
    "end_line": 1637,
    "comment": "",
    "child_ranges": [
      "(line 1636,col 9)-(line 1636,col 92)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsSortedShort()",
    "snippet": "@Test\n    public void testIsSortedShort() {\n        short[] array \u003d null;\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new short[]{0};\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new short[]{-1, 0, 1};\n        assertTrue(ArrayUtils.isSorted(array));\n\n        array \u003d new short[]{-1, 1, 0};\n        assertFalse(ArrayUtils.isSorted(array));\n    }",
    "begin_line": 1640,
    "end_line": 1652,
    "comment": "",
    "child_ranges": [
      "(line 1641,col 9)-(line 1641,col 29)",
      "(line 1642,col 9)-(line 1642,col 47)",
      "(line 1644,col 9)-(line 1644,col 31)",
      "(line 1645,col 9)-(line 1645,col 47)",
      "(line 1647,col 9)-(line 1647,col 38)",
      "(line 1648,col 9)-(line 1648,col 47)",
      "(line 1650,col 9)-(line 1650,col 38)",
      "(line 1651,col 9)-(line 1651,col 48)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOf()",
    "snippet": "@Test\n    public void testLastIndexOf() {\n        final Object[] array \u003d {\"0\", \"1\", \"2\", \"3\", null, \"0\"};\n        assertEquals(-1, ArrayUtils.lastIndexOf(null, null));\n        assertEquals(-1, ArrayUtils.lastIndexOf(null, \"0\"));\n        assertEquals(5, ArrayUtils.lastIndexOf(array, \"0\"));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, \"1\"));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, \"2\"));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, \"3\"));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, null));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"notInArray\"));\n    }",
    "begin_line": 1655,
    "end_line": 1665,
    "comment": "",
    "child_ranges": [
      "(line 1656,col 9)-(line 1656,col 63)",
      "(line 1657,col 9)-(line 1657,col 61)",
      "(line 1658,col 9)-(line 1658,col 60)",
      "(line 1659,col 9)-(line 1659,col 60)",
      "(line 1660,col 9)-(line 1660,col 60)",
      "(line 1661,col 9)-(line 1661,col 60)",
      "(line 1662,col 9)-(line 1662,col 60)",
      "(line 1663,col 9)-(line 1663,col 61)",
      "(line 1664,col 9)-(line 1664,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfBoolean()",
    "snippet": "@Test\n    public void testLastIndexOfBoolean() {\n        boolean[] array \u003d null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, true));\n        array \u003d new boolean[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, true));\n        array \u003d new boolean[]{true, false, true};\n        assertEquals(2, ArrayUtils.lastIndexOf(array, true));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, false));\n        array \u003d new boolean[]{true, true};\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, false));\n    }",
    "begin_line": 1668,
    "end_line": 1678,
    "comment": "",
    "child_ranges": [
      "(line 1669,col 9)-(line 1669,col 31)",
      "(line 1670,col 9)-(line 1670,col 62)",
      "(line 1671,col 9)-(line 1671,col 31)",
      "(line 1672,col 9)-(line 1672,col 62)",
      "(line 1673,col 9)-(line 1673,col 49)",
      "(line 1674,col 9)-(line 1674,col 61)",
      "(line 1675,col 9)-(line 1675,col 62)",
      "(line 1676,col 9)-(line 1676,col 42)",
      "(line 1677,col 9)-(line 1677,col 63)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfBooleanWithStartIndex()",
    "snippet": "@Test\n    public void testLastIndexOfBooleanWithStartIndex() {\n        boolean[] array \u003d null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));\n        array \u003d new boolean[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));\n        array \u003d new boolean[]{true, false, true};\n        assertEquals(2, ArrayUtils.lastIndexOf(array, true, 2));\n        assertEquals(0, ArrayUtils.lastIndexOf(array, true, 1));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, false, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));\n        array \u003d new boolean[]{true, true};\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, false, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));\n    }",
    "begin_line": 1681,
    "end_line": 1694,
    "comment": "",
    "child_ranges": [
      "(line 1682,col 9)-(line 1682,col 31)",
      "(line 1683,col 9)-(line 1683,col 65)",
      "(line 1684,col 9)-(line 1684,col 31)",
      "(line 1685,col 9)-(line 1685,col 65)",
      "(line 1686,col 9)-(line 1686,col 49)",
      "(line 1687,col 9)-(line 1687,col 64)",
      "(line 1688,col 9)-(line 1688,col 64)",
      "(line 1689,col 9)-(line 1689,col 65)",
      "(line 1690,col 9)-(line 1690,col 66)",
      "(line 1691,col 9)-(line 1691,col 42)",
      "(line 1692,col 9)-(line 1692,col 66)",
      "(line 1693,col 9)-(line 1693,col 66)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfByte()",
    "snippet": "@Test\n    public void testLastIndexOfByte() {\n        byte[] array \u003d null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0));\n        array \u003d new byte[]{0, 1, 2, 3, 0};\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, (byte) 3));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));\n    }",
    "begin_line": 1697,
    "end_line": 1706,
    "comment": "",
    "child_ranges": [
      "(line 1698,col 9)-(line 1698,col 28)",
      "(line 1699,col 9)-(line 1699,col 66)",
      "(line 1700,col 9)-(line 1700,col 42)",
      "(line 1701,col 9)-(line 1701,col 65)",
      "(line 1702,col 9)-(line 1702,col 65)",
      "(line 1703,col 9)-(line 1703,col 65)",
      "(line 1704,col 9)-(line 1704,col 65)",
      "(line 1705,col 9)-(line 1705,col 67)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfByteWithStartIndex()",
    "snippet": "@Test\n    public void testLastIndexOfByteWithStartIndex() {\n        byte[] array \u003d null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2));\n        array \u003d new byte[]{0, 1, 2, 3, 0};\n        assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88));\n    }",
    "begin_line": 1709,
    "end_line": 1720,
    "comment": "",
    "child_ranges": [
      "(line 1710,col 9)-(line 1710,col 28)",
      "(line 1711,col 9)-(line 1711,col 69)",
      "(line 1712,col 9)-(line 1712,col 42)",
      "(line 1713,col 9)-(line 1713,col 68)",
      "(line 1714,col 9)-(line 1714,col 68)",
      "(line 1715,col 9)-(line 1715,col 68)",
      "(line 1716,col 9)-(line 1716,col 69)",
      "(line 1717,col 9)-(line 1717,col 70)",
      "(line 1718,col 9)-(line 1718,col 67)",
      "(line 1719,col 9)-(line 1719,col 69)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfChar()",
    "snippet": "@Test\n    public void testLastIndexOfChar() {\n        char[] array \u003d null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, \u0027a\u0027));\n        array \u003d new char[]{\u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027d\u0027, \u0027a\u0027};\n        assertEquals(4, ArrayUtils.lastIndexOf(array, \u0027a\u0027));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, \u0027b\u0027));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, \u0027c\u0027));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, \u0027d\u0027));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, \u0027e\u0027));\n    }",
    "begin_line": 1723,
    "end_line": 1732,
    "comment": "",
    "child_ranges": [
      "(line 1724,col 9)-(line 1724,col 28)",
      "(line 1725,col 9)-(line 1725,col 61)",
      "(line 1726,col 9)-(line 1726,col 52)",
      "(line 1727,col 9)-(line 1727,col 60)",
      "(line 1728,col 9)-(line 1728,col 60)",
      "(line 1729,col 9)-(line 1729,col 60)",
      "(line 1730,col 9)-(line 1730,col 60)",
      "(line 1731,col 9)-(line 1731,col 61)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfCharWithStartIndex()",
    "snippet": "@Test\n    public void testLastIndexOfCharWithStartIndex() {\n        char[] array \u003d null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, \u0027a\u0027, 2));\n        array \u003d new char[]{\u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027d\u0027, \u0027a\u0027};\n        assertEquals(0, ArrayUtils.lastIndexOf(array, \u0027a\u0027, 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, \u0027b\u0027, 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, \u0027c\u0027, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, \u0027d\u0027, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, \u0027d\u0027, -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, \u0027e\u0027));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, \u0027a\u0027, 88));\n    }",
    "begin_line": 1735,
    "end_line": 1746,
    "comment": "",
    "child_ranges": [
      "(line 1736,col 9)-(line 1736,col 28)",
      "(line 1737,col 9)-(line 1737,col 64)",
      "(line 1738,col 9)-(line 1738,col 52)",
      "(line 1739,col 9)-(line 1739,col 63)",
      "(line 1740,col 9)-(line 1740,col 63)",
      "(line 1741,col 9)-(line 1741,col 63)",
      "(line 1742,col 9)-(line 1742,col 64)",
      "(line 1743,col 9)-(line 1743,col 65)",
      "(line 1744,col 9)-(line 1744,col 61)",
      "(line 1745,col 9)-(line 1745,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfDouble()",
    "snippet": "@SuppressWarnings(\"cast\")\n    @Test\n    public void testLastIndexOfDouble() {\n        double[] array \u003d null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));\n        array \u003d new double[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));\n        array \u003d new double[]{0, 1, 2, 3, 0};\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));\n    }",
    "begin_line": 1750,
    "end_line": 1761,
    "comment": "",
    "child_ranges": [
      "(line 1751,col 9)-(line 1751,col 30)",
      "(line 1752,col 9)-(line 1752,col 68)",
      "(line 1753,col 9)-(line 1753,col 30)",
      "(line 1754,col 9)-(line 1754,col 68)",
      "(line 1755,col 9)-(line 1755,col 44)",
      "(line 1756,col 9)-(line 1756,col 67)",
      "(line 1757,col 9)-(line 1757,col 67)",
      "(line 1758,col 9)-(line 1758,col 67)",
      "(line 1759,col 9)-(line 1759,col 67)",
      "(line 1760,col 9)-(line 1760,col 69)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfDoubleTolerance()",
    "snippet": "@SuppressWarnings(\"cast\")\n    @Test\n    public void testLastIndexOfDoubleTolerance() {\n        double[] array \u003d null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));\n        array \u003d new double[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));\n        array \u003d new double[]{0, 1, 2, 3, 0};\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 0.3));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, 2.2, 0.35));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, 4.15, 2.0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, 1.00001324, 0.0001));\n    }",
    "begin_line": 1765,
    "end_line": 1775,
    "comment": "",
    "child_ranges": [
      "(line 1766,col 9)-(line 1766,col 30)",
      "(line 1767,col 9)-(line 1767,col 80)",
      "(line 1768,col 9)-(line 1768,col 30)",
      "(line 1769,col 9)-(line 1769,col 80)",
      "(line 1770,col 9)-(line 1770,col 44)",
      "(line 1771,col 9)-(line 1771,col 72)",
      "(line 1772,col 9)-(line 1772,col 66)",
      "(line 1773,col 9)-(line 1773,col 66)",
      "(line 1774,col 9)-(line 1774,col 75)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfDoubleWithStartIndex()",
    "snippet": "@SuppressWarnings(\"cast\")\n    @Test\n    public void testLastIndexOfDoubleWithStartIndex() {\n        double[] array \u003d null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));\n        array \u003d new double[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));\n        array \u003d new double[]{0, 1, 2, 3, 0};\n        assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1, 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 88));\n    }",
    "begin_line": 1779,
    "end_line": 1792,
    "comment": "",
    "child_ranges": [
      "(line 1780,col 9)-(line 1780,col 30)",
      "(line 1781,col 9)-(line 1781,col 71)",
      "(line 1782,col 9)-(line 1782,col 30)",
      "(line 1783,col 9)-(line 1783,col 71)",
      "(line 1784,col 9)-(line 1784,col 44)",
      "(line 1785,col 9)-(line 1785,col 70)",
      "(line 1786,col 9)-(line 1786,col 70)",
      "(line 1787,col 9)-(line 1787,col 70)",
      "(line 1788,col 9)-(line 1788,col 71)",
      "(line 1789,col 9)-(line 1789,col 72)",
      "(line 1790,col 9)-(line 1790,col 69)",
      "(line 1791,col 9)-(line 1791,col 71)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfDoubleWithStartIndexTolerance()",
    "snippet": "@SuppressWarnings(\"cast\")\n    @Test\n    public void testLastIndexOfDoubleWithStartIndexTolerance() {\n        double[] array \u003d null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));\n        array \u003d new double[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));\n        array \u003d new double[]{(double) 3};\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 1, 0, (double) 0));\n        array \u003d new double[]{0, 1, 2, 3, 0};\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, 0.3));\n        assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, 0.3));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, 2.2, 3, 0.35));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, 4.15, array.length, 2.0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, 1.00001324, array.length, 0.0001));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 4.15, -200, 2.0));\n    }",
    "begin_line": 1796,
    "end_line": 1810,
    "comment": "",
    "child_ranges": [
      "(line 1797,col 9)-(line 1797,col 30)",
      "(line 1798,col 9)-(line 1798,col 83)",
      "(line 1799,col 9)-(line 1799,col 30)",
      "(line 1800,col 9)-(line 1800,col 83)",
      "(line 1801,col 9)-(line 1801,col 41)",
      "(line 1802,col 9)-(line 1802,col 83)",
      "(line 1803,col 9)-(line 1803,col 44)",
      "(line 1804,col 9)-(line 1804,col 76)",
      "(line 1805,col 9)-(line 1805,col 75)",
      "(line 1806,col 9)-(line 1806,col 69)",
      "(line 1807,col 9)-(line 1807,col 80)",
      "(line 1808,col 9)-(line 1808,col 89)",
      "(line 1809,col 9)-(line 1809,col 73)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfFloat()",
    "snippet": "@SuppressWarnings(\"cast\")\n    @Test\n    public void testLastIndexOfFloat() {\n        float[] array \u003d null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));\n        array \u003d new float[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));\n        array \u003d new float[]{0, 1, 2, 3, 0};\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));\n    }",
    "begin_line": 1814,
    "end_line": 1825,
    "comment": "",
    "child_ranges": [
      "(line 1815,col 9)-(line 1815,col 29)",
      "(line 1816,col 9)-(line 1816,col 67)",
      "(line 1817,col 9)-(line 1817,col 29)",
      "(line 1818,col 9)-(line 1818,col 67)",
      "(line 1819,col 9)-(line 1819,col 43)",
      "(line 1820,col 9)-(line 1820,col 66)",
      "(line 1821,col 9)-(line 1821,col 66)",
      "(line 1822,col 9)-(line 1822,col 66)",
      "(line 1823,col 9)-(line 1823,col 66)",
      "(line 1824,col 9)-(line 1824,col 68)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfFloatWithStartIndex()",
    "snippet": "@SuppressWarnings(\"cast\")\n    @Test\n    public void testLastIndexOfFloatWithStartIndex() {\n        float[] array \u003d null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));\n        array \u003d new float[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));\n        array \u003d new float[]{0, 1, 2, 3, 0};\n        assertEquals(0, ArrayUtils.lastIndexOf(array, (float) 0, 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1, 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0, 88));\n    }",
    "begin_line": 1829,
    "end_line": 1842,
    "comment": "",
    "child_ranges": [
      "(line 1830,col 9)-(line 1830,col 29)",
      "(line 1831,col 9)-(line 1831,col 70)",
      "(line 1832,col 9)-(line 1832,col 29)",
      "(line 1833,col 9)-(line 1833,col 70)",
      "(line 1834,col 9)-(line 1834,col 43)",
      "(line 1835,col 9)-(line 1835,col 69)",
      "(line 1836,col 9)-(line 1836,col 69)",
      "(line 1837,col 9)-(line 1837,col 69)",
      "(line 1838,col 9)-(line 1838,col 70)",
      "(line 1839,col 9)-(line 1839,col 71)",
      "(line 1840,col 9)-(line 1840,col 68)",
      "(line 1841,col 9)-(line 1841,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfInt()",
    "snippet": "@Test\n    public void testLastIndexOfInt() {\n        int[] array \u003d null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));\n        array \u003d new int[]{0, 1, 2, 3, 0};\n        assertEquals(4, ArrayUtils.lastIndexOf(array, 0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, 1));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, 2));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, 3));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\n    }",
    "begin_line": 1845,
    "end_line": 1854,
    "comment": "",
    "child_ranges": [
      "(line 1846,col 9)-(line 1846,col 27)",
      "(line 1847,col 9)-(line 1847,col 59)",
      "(line 1848,col 9)-(line 1848,col 41)",
      "(line 1849,col 9)-(line 1849,col 58)",
      "(line 1850,col 9)-(line 1850,col 58)",
      "(line 1851,col 9)-(line 1851,col 58)",
      "(line 1852,col 9)-(line 1852,col 58)",
      "(line 1853,col 9)-(line 1853,col 60)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfIntWithStartIndex()",
    "snippet": "@Test\n    public void testLastIndexOfIntWithStartIndex() {\n        int[] array \u003d null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));\n        array \u003d new int[]{0, 1, 2, 3, 0};\n        assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));\n    }",
    "begin_line": 1857,
    "end_line": 1868,
    "comment": "",
    "child_ranges": [
      "(line 1858,col 9)-(line 1858,col 27)",
      "(line 1859,col 9)-(line 1859,col 62)",
      "(line 1860,col 9)-(line 1860,col 41)",
      "(line 1861,col 9)-(line 1861,col 61)",
      "(line 1862,col 9)-(line 1862,col 61)",
      "(line 1863,col 9)-(line 1863,col 61)",
      "(line 1864,col 9)-(line 1864,col 62)",
      "(line 1865,col 9)-(line 1865,col 63)",
      "(line 1866,col 9)-(line 1866,col 60)",
      "(line 1867,col 9)-(line 1867,col 62)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfLong()",
    "snippet": "@Test\n    public void testLastIndexOfLong() {\n        long[] array \u003d null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));\n        array \u003d new long[]{0, 1, 2, 3, 0};\n        assertEquals(4, ArrayUtils.lastIndexOf(array, 0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, 1));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, 2));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, 3));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\n    }",
    "begin_line": 1871,
    "end_line": 1880,
    "comment": "",
    "child_ranges": [
      "(line 1872,col 9)-(line 1872,col 28)",
      "(line 1873,col 9)-(line 1873,col 59)",
      "(line 1874,col 9)-(line 1874,col 42)",
      "(line 1875,col 9)-(line 1875,col 58)",
      "(line 1876,col 9)-(line 1876,col 58)",
      "(line 1877,col 9)-(line 1877,col 58)",
      "(line 1878,col 9)-(line 1878,col 58)",
      "(line 1879,col 9)-(line 1879,col 60)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfLongWithStartIndex()",
    "snippet": "@Test\n    public void testLastIndexOfLongWithStartIndex() {\n        long[] array \u003d null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));\n        array \u003d new long[]{0, 1, 2, 3, 0};\n        assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99, 4));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));\n    }",
    "begin_line": 1883,
    "end_line": 1894,
    "comment": "",
    "child_ranges": [
      "(line 1884,col 9)-(line 1884,col 28)",
      "(line 1885,col 9)-(line 1885,col 62)",
      "(line 1886,col 9)-(line 1886,col 42)",
      "(line 1887,col 9)-(line 1887,col 61)",
      "(line 1888,col 9)-(line 1888,col 61)",
      "(line 1889,col 9)-(line 1889,col 61)",
      "(line 1890,col 9)-(line 1890,col 62)",
      "(line 1891,col 9)-(line 1891,col 63)",
      "(line 1892,col 9)-(line 1892,col 63)",
      "(line 1893,col 9)-(line 1893,col 62)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfShort()",
    "snippet": "@Test\n    public void testLastIndexOfShort() {\n        short[] array \u003d null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0));\n        array \u003d new short[]{0, 1, 2, 3, 0};\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, (short) 3));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));\n    }",
    "begin_line": 1897,
    "end_line": 1906,
    "comment": "",
    "child_ranges": [
      "(line 1898,col 9)-(line 1898,col 29)",
      "(line 1899,col 9)-(line 1899,col 67)",
      "(line 1900,col 9)-(line 1900,col 43)",
      "(line 1901,col 9)-(line 1901,col 66)",
      "(line 1902,col 9)-(line 1902,col 66)",
      "(line 1903,col 9)-(line 1903,col 66)",
      "(line 1904,col 9)-(line 1904,col 66)",
      "(line 1905,col 9)-(line 1905,col 68)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfShortWithStartIndex()",
    "snippet": "@Test\n    public void testLastIndexOfShortWithStartIndex() {\n        short[] array \u003d null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2));\n        array \u003d new short[]{0, 1, 2, 3, 0};\n        assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88));\n    }",
    "begin_line": 1909,
    "end_line": 1920,
    "comment": "",
    "child_ranges": [
      "(line 1910,col 9)-(line 1910,col 29)",
      "(line 1911,col 9)-(line 1911,col 70)",
      "(line 1912,col 9)-(line 1912,col 43)",
      "(line 1913,col 9)-(line 1913,col 69)",
      "(line 1914,col 9)-(line 1914,col 69)",
      "(line 1915,col 9)-(line 1915,col 69)",
      "(line 1916,col 9)-(line 1916,col 70)",
      "(line 1917,col 9)-(line 1917,col 71)",
      "(line 1918,col 9)-(line 1918,col 68)",
      "(line 1919,col 9)-(line 1919,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfWithStartIndex()",
    "snippet": "@Test\n    public void testLastIndexOfWithStartIndex() {\n        final Object[] array \u003d {\"0\", \"1\", \"2\", \"3\", null, \"0\"};\n        assertEquals(-1, ArrayUtils.lastIndexOf(null, null, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(null, \"0\", 2));\n        assertEquals(0, ArrayUtils.lastIndexOf(array, \"0\", 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, \"1\", 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, \"2\", 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"3\", 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"3\", -1));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, null, 5));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, null, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"notInArray\", 5));\n\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, null, -1));\n        assertEquals(5, ArrayUtils.lastIndexOf(array, \"0\", 88));\n    }",
    "begin_line": 1923,
    "end_line": 1938,
    "comment": "",
    "child_ranges": [
      "(line 1924,col 9)-(line 1924,col 63)",
      "(line 1925,col 9)-(line 1925,col 64)",
      "(line 1926,col 9)-(line 1926,col 63)",
      "(line 1927,col 9)-(line 1927,col 63)",
      "(line 1928,col 9)-(line 1928,col 63)",
      "(line 1929,col 9)-(line 1929,col 63)",
      "(line 1930,col 9)-(line 1930,col 64)",
      "(line 1931,col 9)-(line 1931,col 65)",
      "(line 1932,col 9)-(line 1932,col 64)",
      "(line 1933,col 9)-(line 1933,col 65)",
      "(line 1934,col 9)-(line 1934,col 73)",
      "(line 1936,col 9)-(line 1936,col 66)",
      "(line 1937,col 9)-(line 1937,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyBoolean()",
    "snippet": "@Test\n    public void testNullToEmptyBoolean() {\n        final boolean[] original \u003d {true, false};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n    }",
    "begin_line": 1941,
    "end_line": 1944,
    "comment": "",
    "child_ranges": [
      "(line 1942,col 9)-(line 1942,col 49)",
      "(line 1943,col 9)-(line 1943,col 65)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyBooleanEmptyArray()",
    "snippet": "@Test\n    public void testNullToEmptyBooleanEmptyArray() {\n        final boolean[] empty \u003d {};\n        final boolean[] result \u003d ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, result);\n        assertNotSame(empty, result);\n    }",
    "begin_line": 1947,
    "end_line": 1952,
    "comment": "",
    "child_ranges": [
      "(line 1948,col 9)-(line 1948,col 35)",
      "(line 1949,col 9)-(line 1949,col 63)",
      "(line 1950,col 9)-(line 1950,col 61)",
      "(line 1951,col 9)-(line 1951,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyBooleanNull()",
    "snippet": "@Test\n    public void testNullToEmptyBooleanNull() {\n        assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.nullToEmpty((boolean[]) null));\n    }",
    "begin_line": 1955,
    "end_line": 1957,
    "comment": "",
    "child_ranges": [
      "(line 1956,col 9)-(line 1956,col 95)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyBooleanObject()",
    "snippet": "@Test\n    public void testNullToEmptyBooleanObject() {\n        final Boolean[] original \u003d {Boolean.TRUE, Boolean.FALSE};\n        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n    }",
    "begin_line": 1960,
    "end_line": 1963,
    "comment": "",
    "child_ranges": [
      "(line 1961,col 9)-(line 1961,col 65)",
      "(line 1962,col 9)-(line 1962,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyBooleanObjectEmptyArray()",
    "snippet": "@Test\n    public void testNullToEmptyBooleanObjectEmptyArray() {\n        final Boolean[] empty \u003d {};\n        final Boolean[] result \u003d ArrayUtils.nullToEmpty(empty);\n        assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, result);\n        assertNotSame(empty, result);\n    }",
    "begin_line": 1966,
    "end_line": 1971,
    "comment": "",
    "child_ranges": [
      "(line 1967,col 9)-(line 1967,col 35)",
      "(line 1968,col 9)-(line 1968,col 63)",
      "(line 1969,col 9)-(line 1969,col 73)",
      "(line 1970,col 9)-(line 1970,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyBooleanObjectNull()",
    "snippet": "@Test\n    public void testNullToEmptyBooleanObjectNull() {\n        assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Boolean[]) null));\n    }",
    "begin_line": 1974,
    "end_line": 1976,
    "comment": "",
    "child_ranges": [
      "(line 1975,col 9)-(line 1975,col 107)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyByte()",
    "snippet": "@Test\n    public void testNullToEmptyByte() {\n        final byte[] original \u003d {0x0F, 0x0E};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n    }",
    "begin_line": 1979,
    "end_line": 1982,
    "comment": "",
    "child_ranges": [
      "(line 1980,col 9)-(line 1980,col 45)",
      "(line 1981,col 9)-(line 1981,col 65)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyByteEmptyArray()",
    "snippet": "@Test\n    public void testNullToEmptyByteEmptyArray() {\n        final byte[] empty \u003d {};\n        final byte[] result \u003d ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, result);\n        assertNotSame(empty, result);\n    }",
    "begin_line": 1985,
    "end_line": 1990,
    "comment": "",
    "child_ranges": [
      "(line 1986,col 9)-(line 1986,col 32)",
      "(line 1987,col 9)-(line 1987,col 60)",
      "(line 1988,col 9)-(line 1988,col 58)",
      "(line 1989,col 9)-(line 1989,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyByteNull()",
    "snippet": "@Test\n    public void testNullToEmptyByteNull() {\n        assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.nullToEmpty((byte[]) null));\n    }",
    "begin_line": 1993,
    "end_line": 1995,
    "comment": "",
    "child_ranges": [
      "(line 1994,col 9)-(line 1994,col 89)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyByteObject()",
    "snippet": "@Test\n    public void testNullToEmptyByteObject() {\n        final Byte[] original \u003d {0x0F, 0x0E};\n        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n    }",
    "begin_line": 1998,
    "end_line": 2001,
    "comment": "",
    "child_ranges": [
      "(line 1999,col 9)-(line 1999,col 45)",
      "(line 2000,col 9)-(line 2000,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyByteObjectEmptyArray()",
    "snippet": "@Test\n    public void testNullToEmptyByteObjectEmptyArray() {\n        final Byte[] empty \u003d {};\n        final Byte[] result \u003d ArrayUtils.nullToEmpty(empty);\n        assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, result);\n        assertNotSame(empty, result);\n    }",
    "begin_line": 2004,
    "end_line": 2009,
    "comment": "",
    "child_ranges": [
      "(line 2005,col 9)-(line 2005,col 32)",
      "(line 2006,col 9)-(line 2006,col 60)",
      "(line 2007,col 9)-(line 2007,col 70)",
      "(line 2008,col 9)-(line 2008,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyByteObjectNull()",
    "snippet": "@Test\n    public void testNullToEmptyByteObjectNull() {\n        assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Byte[]) null));\n    }",
    "begin_line": 2012,
    "end_line": 2014,
    "comment": "",
    "child_ranges": [
      "(line 2013,col 9)-(line 2013,col 101)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyChar()",
    "snippet": "@Test\n    public void testNullToEmptyChar() {\n        final char[] original \u003d {\u0027a\u0027, \u0027b\u0027};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n    }",
    "begin_line": 2017,
    "end_line": 2020,
    "comment": "",
    "child_ranges": [
      "(line 2018,col 9)-(line 2018,col 43)",
      "(line 2019,col 9)-(line 2019,col 65)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyCharEmptyArray()",
    "snippet": "@Test\n    public void testNullToEmptyCharEmptyArray() {\n        final char[] empty \u003d {};\n        final char[] result \u003d ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, result);\n        assertNotSame(empty, result);\n    }",
    "begin_line": 2023,
    "end_line": 2028,
    "comment": "",
    "child_ranges": [
      "(line 2024,col 9)-(line 2024,col 32)",
      "(line 2025,col 9)-(line 2025,col 60)",
      "(line 2026,col 9)-(line 2026,col 58)",
      "(line 2027,col 9)-(line 2027,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyCharNull()",
    "snippet": "@Test\n    public void testNullToEmptyCharNull() {\n        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.nullToEmpty((char[]) null));\n    }",
    "begin_line": 2031,
    "end_line": 2033,
    "comment": "",
    "child_ranges": [
      "(line 2032,col 9)-(line 2032,col 89)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyCharObject()",
    "snippet": "@Test\n    public void testNullToEmptyCharObject() {\n        final Character[] original \u003d {\u0027a\u0027, \u0027b\u0027};\n        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n    }",
    "begin_line": 2036,
    "end_line": 2039,
    "comment": "",
    "child_ranges": [
      "(line 2037,col 9)-(line 2037,col 48)",
      "(line 2038,col 9)-(line 2038,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyCharObjectEmptyArray()",
    "snippet": "@Test\n    public void testNullToEmptyCharObjectEmptyArray() {\n        final Character[] empty \u003d {};\n        final Character[] result \u003d ArrayUtils.nullToEmpty(empty);\n        assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, result);\n        assertNotSame(empty, result);\n    }",
    "begin_line": 2042,
    "end_line": 2047,
    "comment": "",
    "child_ranges": [
      "(line 2043,col 9)-(line 2043,col 37)",
      "(line 2044,col 9)-(line 2044,col 65)",
      "(line 2045,col 9)-(line 2045,col 75)",
      "(line 2046,col 9)-(line 2046,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNUllToEmptyCharObjectNull()",
    "snippet": "@Test\n    public void testNUllToEmptyCharObjectNull() {\n        assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Character[]) null));\n    }",
    "begin_line": 2050,
    "end_line": 2052,
    "comment": "",
    "child_ranges": [
      "(line 2051,col 9)-(line 2051,col 111)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyClass()",
    "snippet": "@Test\n    public void testNullToEmptyClass() {\n        final Class\u003c?\u003e[] original \u003d {Object.class, String.class};\n        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n    }",
    "begin_line": 2055,
    "end_line": 2058,
    "comment": "",
    "child_ranges": [
      "(line 2056,col 9)-(line 2056,col 65)",
      "(line 2057,col 9)-(line 2057,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyClassEmptyArray()",
    "snippet": "@Test\n    public void testNullToEmptyClassEmptyArray() {\n        final Class\u003c?\u003e[] empty \u003d {};\n        final Class\u003c?\u003e[] result \u003d ArrayUtils.nullToEmpty(empty);\n        assertArrayEquals(ArrayUtils.EMPTY_CLASS_ARRAY, result);\n        assertNotSame(empty, result);\n    }",
    "begin_line": 2061,
    "end_line": 2066,
    "comment": "",
    "child_ranges": [
      "(line 2062,col 9)-(line 2062,col 36)",
      "(line 2063,col 9)-(line 2063,col 64)",
      "(line 2064,col 9)-(line 2064,col 64)",
      "(line 2065,col 9)-(line 2065,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyClassNull()",
    "snippet": "@Test\n    public void testNullToEmptyClassNull() {\n        assertArrayEquals(ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.nullToEmpty((Class\u003c?\u003e[]) null));\n    }",
    "begin_line": 2069,
    "end_line": 2071,
    "comment": "",
    "child_ranges": [
      "(line 2070,col 9)-(line 2070,col 99)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyDouble()",
    "snippet": "@Test\n    public void testNullToEmptyDouble() {\n        final double[] original \u003d {1L, 2L};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n    }",
    "begin_line": 2074,
    "end_line": 2077,
    "comment": "",
    "child_ranges": [
      "(line 2075,col 9)-(line 2075,col 43)",
      "(line 2076,col 9)-(line 2076,col 65)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyDoubleEmptyArray()",
    "snippet": "@Test\n    public void testNullToEmptyDoubleEmptyArray() {\n        final double[] empty \u003d {};\n        final double[] result \u003d ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, result);\n        assertNotSame(empty, result);\n    }",
    "begin_line": 2080,
    "end_line": 2085,
    "comment": "",
    "child_ranges": [
      "(line 2081,col 9)-(line 2081,col 34)",
      "(line 2082,col 9)-(line 2082,col 62)",
      "(line 2083,col 9)-(line 2083,col 60)",
      "(line 2084,col 9)-(line 2084,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyDoubleNull()",
    "snippet": "@Test\n    public void testNullToEmptyDoubleNull() {\n        assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.nullToEmpty((double[]) null));\n    }",
    "begin_line": 2088,
    "end_line": 2090,
    "comment": "",
    "child_ranges": [
      "(line 2089,col 9)-(line 2089,col 93)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyDoubleObject()",
    "snippet": "@Test\n    public void testNullToEmptyDoubleObject() {\n        final Double[] original \u003d {1D, 2D};\n        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n    }",
    "begin_line": 2093,
    "end_line": 2096,
    "comment": "",
    "child_ranges": [
      "(line 2094,col 9)-(line 2094,col 43)",
      "(line 2095,col 9)-(line 2095,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyDoubleObjectEmptyArray()",
    "snippet": "@Test\n    public void testNullToEmptyDoubleObjectEmptyArray() {\n        final Double[] empty \u003d {};\n        final Double[] result \u003d ArrayUtils.nullToEmpty(empty);\n        assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, result);\n        assertNotSame(empty, result);\n    }",
    "begin_line": 2099,
    "end_line": 2104,
    "comment": "",
    "child_ranges": [
      "(line 2100,col 9)-(line 2100,col 34)",
      "(line 2101,col 9)-(line 2101,col 62)",
      "(line 2102,col 9)-(line 2102,col 72)",
      "(line 2103,col 9)-(line 2103,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyDoubleObjectNull()",
    "snippet": "@Test\n    public void testNullToEmptyDoubleObjectNull() {\n        assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null));\n    }",
    "begin_line": 2107,
    "end_line": 2109,
    "comment": "",
    "child_ranges": [
      "(line 2108,col 9)-(line 2108,col 105)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyFloat()",
    "snippet": "@Test\n    public void testNullToEmptyFloat() {\n        final float[] original \u003d {2.6f, 3.8f};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n    }",
    "begin_line": 2112,
    "end_line": 2115,
    "comment": "",
    "child_ranges": [
      "(line 2113,col 9)-(line 2113,col 46)",
      "(line 2114,col 9)-(line 2114,col 65)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyFloatEmptyArray()",
    "snippet": "@Test\n    public void testNullToEmptyFloatEmptyArray() {\n        final float[] empty \u003d {};\n        final float[] result \u003d ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, result);\n        assertNotSame(empty, result);\n    }",
    "begin_line": 2118,
    "end_line": 2123,
    "comment": "",
    "child_ranges": [
      "(line 2119,col 9)-(line 2119,col 33)",
      "(line 2120,col 9)-(line 2120,col 61)",
      "(line 2121,col 9)-(line 2121,col 59)",
      "(line 2122,col 9)-(line 2122,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyFloatNull()",
    "snippet": "@Test\n    public void testNullToEmptyFloatNull() {\n        assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.nullToEmpty((float[]) null));\n    }",
    "begin_line": 2126,
    "end_line": 2128,
    "comment": "",
    "child_ranges": [
      "(line 2127,col 9)-(line 2127,col 91)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyFloatObject()",
    "snippet": "@Test\n    public void testNullToEmptyFloatObject() {\n        final Float[] original \u003d {2.6f, 3.8f};\n        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n    }",
    "begin_line": 2131,
    "end_line": 2134,
    "comment": "",
    "child_ranges": [
      "(line 2132,col 9)-(line 2132,col 46)",
      "(line 2133,col 9)-(line 2133,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyFloatObjectEmptyArray()",
    "snippet": "@Test\n    public void testNullToEmptyFloatObjectEmptyArray() {\n        final Float[] empty \u003d {};\n        final Float[] result \u003d ArrayUtils.nullToEmpty(empty);\n        assertArrayEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, result);\n        assertNotSame(empty, result);\n    }",
    "begin_line": 2137,
    "end_line": 2142,
    "comment": "",
    "child_ranges": [
      "(line 2138,col 9)-(line 2138,col 33)",
      "(line 2139,col 9)-(line 2139,col 61)",
      "(line 2140,col 9)-(line 2140,col 71)",
      "(line 2141,col 9)-(line 2141,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyFloatObjectNull()",
    "snippet": "@Test\n    public void testNullToEmptyFloatObjectNull() {\n        assertArrayEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Float[]) null));\n    }",
    "begin_line": 2145,
    "end_line": 2147,
    "comment": "",
    "child_ranges": [
      "(line 2146,col 9)-(line 2146,col 103)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyGeneric()",
    "snippet": "@Test\n    public void testNullToEmptyGeneric() {\n        final TestClass[] input \u003d {new TestClass(), new TestClass()};\n        final TestClass[] output \u003d ArrayUtils.nullToEmpty(input, TestClass[].class);\n\n        assertSame(input, output);\n    }",
    "begin_line": 2150,
    "end_line": 2155,
    "comment": "",
    "child_ranges": [
      "(line 2151,col 9)-(line 2151,col 69)",
      "(line 2152,col 9)-(line 2152,col 84)",
      "(line 2154,col 9)-(line 2154,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyGenericEmpty()",
    "snippet": "@Test\n    public void testNullToEmptyGenericEmpty() {\n        final TestClass[] input \u003d {};\n        final TestClass[] output \u003d ArrayUtils.nullToEmpty(input, TestClass[].class);\n\n        assertSame(input, output);\n    }",
    "begin_line": 2158,
    "end_line": 2163,
    "comment": "",
    "child_ranges": [
      "(line 2159,col 9)-(line 2159,col 37)",
      "(line 2160,col 9)-(line 2160,col 84)",
      "(line 2162,col 9)-(line 2162,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyGenericNull()",
    "snippet": "@Test\n    public void testNullToEmptyGenericNull() {\n        final TestClass[] output \u003d ArrayUtils.nullToEmpty(null, TestClass[].class);\n\n        assertNotNull(output);\n        assertEquals(0, output.length);\n    }",
    "begin_line": 2166,
    "end_line": 2171,
    "comment": "",
    "child_ranges": [
      "(line 2167,col 9)-(line 2167,col 83)",
      "(line 2169,col 9)-(line 2169,col 30)",
      "(line 2170,col 9)-(line 2170,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyGenericNullType()",
    "snippet": "@Test\n    public void testNullToEmptyGenericNullType() {\n        final TestClass[] input \u003d {};\n        assertThrows(IllegalArgumentException.class, () -\u003e ArrayUtils.nullToEmpty(input, null));\n    }",
    "begin_line": 2174,
    "end_line": 2177,
    "comment": "",
    "child_ranges": [
      "(line 2175,col 9)-(line 2175,col 37)",
      "(line 2176,col 9)-(line 2176,col 96)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyInt()",
    "snippet": "@Test\n    public void testNullToEmptyInt() {\n        final int[] original \u003d {1, 2};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n    }",
    "begin_line": 2180,
    "end_line": 2183,
    "comment": "",
    "child_ranges": [
      "(line 2181,col 9)-(line 2181,col 38)",
      "(line 2182,col 9)-(line 2182,col 65)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyIntEmptyArray()",
    "snippet": "@Test\n    public void testNullToEmptyIntEmptyArray() {\n        final int[] empty \u003d {};\n        final int[] result \u003d ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_INT_ARRAY, result);\n        assertNotSame(empty, result);\n    }",
    "begin_line": 2186,
    "end_line": 2191,
    "comment": "",
    "child_ranges": [
      "(line 2187,col 9)-(line 2187,col 31)",
      "(line 2188,col 9)-(line 2188,col 59)",
      "(line 2189,col 9)-(line 2189,col 57)",
      "(line 2190,col 9)-(line 2190,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyIntNull()",
    "snippet": "@Test\n    public void testNullToEmptyIntNull() {\n        assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.nullToEmpty((int[]) null));\n    }",
    "begin_line": 2194,
    "end_line": 2196,
    "comment": "",
    "child_ranges": [
      "(line 2195,col 9)-(line 2195,col 87)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyIntObject()",
    "snippet": "@Test\n    public void testNullToEmptyIntObject() {\n        final Integer[] original \u003d {1, 2};\n        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n    }",
    "begin_line": 2199,
    "end_line": 2202,
    "comment": "",
    "child_ranges": [
      "(line 2200,col 9)-(line 2200,col 42)",
      "(line 2201,col 9)-(line 2201,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyIntObjectEmptyArray()",
    "snippet": "@Test\n    public void testNullToEmptyIntObjectEmptyArray() {\n        final Integer[] empty \u003d {};\n        final Integer[] result \u003d ArrayUtils.nullToEmpty(empty);\n        assertArrayEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, result);\n        assertNotSame(empty, result);\n    }",
    "begin_line": 2205,
    "end_line": 2210,
    "comment": "",
    "child_ranges": [
      "(line 2206,col 9)-(line 2206,col 35)",
      "(line 2207,col 9)-(line 2207,col 63)",
      "(line 2208,col 9)-(line 2208,col 73)",
      "(line 2209,col 9)-(line 2209,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyIntObjectNull()",
    "snippet": "@Test\n    public void testNullToEmptyIntObjectNull() {\n        assertArrayEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Integer[]) null));\n    }",
    "begin_line": 2213,
    "end_line": 2215,
    "comment": "",
    "child_ranges": [
      "(line 2214,col 9)-(line 2214,col 107)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyLong()",
    "snippet": "@Test\n    public void testNullToEmptyLong() {\n        final long[] original \u003d {1L, 2L};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n    }",
    "begin_line": 2218,
    "end_line": 2221,
    "comment": "",
    "child_ranges": [
      "(line 2219,col 9)-(line 2219,col 41)",
      "(line 2220,col 9)-(line 2220,col 65)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyLongEmptyArray()",
    "snippet": "@Test\n    public void testNullToEmptyLongEmptyArray() {\n        final long[] empty \u003d {};\n        final long[] result \u003d ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, result);\n        assertNotSame(empty, result);\n    }",
    "begin_line": 2224,
    "end_line": 2229,
    "comment": "",
    "child_ranges": [
      "(line 2225,col 9)-(line 2225,col 32)",
      "(line 2226,col 9)-(line 2226,col 60)",
      "(line 2227,col 9)-(line 2227,col 58)",
      "(line 2228,col 9)-(line 2228,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyLongNull()",
    "snippet": "@Test\n    public void testNullToEmptyLongNull() {\n        assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.nullToEmpty((long[]) null));\n    }",
    "begin_line": 2232,
    "end_line": 2234,
    "comment": "",
    "child_ranges": [
      "(line 2233,col 9)-(line 2233,col 89)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyLongObject()",
    "snippet": "@Test\n    public void testNullToEmptyLongObject() {\n        @SuppressWarnings(\"boxing\") final Long[] original \u003d {1L, 2L};\n        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n    }",
    "begin_line": 2237,
    "end_line": 2240,
    "comment": "",
    "child_ranges": [
      "(line 2238,col 9)-(line 2238,col 69)",
      "(line 2239,col 9)-(line 2239,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyLongObjectEmptyArray()",
    "snippet": "@Test\n    public void testNullToEmptyLongObjectEmptyArray() {\n        final Long[] empty \u003d {};\n        final Long[] result \u003d ArrayUtils.nullToEmpty(empty);\n        assertArrayEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, result);\n        assertNotSame(empty, result);\n    }",
    "begin_line": 2243,
    "end_line": 2248,
    "comment": "",
    "child_ranges": [
      "(line 2244,col 9)-(line 2244,col 32)",
      "(line 2245,col 9)-(line 2245,col 60)",
      "(line 2246,col 9)-(line 2246,col 70)",
      "(line 2247,col 9)-(line 2247,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyLongObjectNull()",
    "snippet": "@Test\n    public void testNullToEmptyLongObjectNull() {\n        assertArrayEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Long[]) null));\n    }",
    "begin_line": 2251,
    "end_line": 2253,
    "comment": "",
    "child_ranges": [
      "(line 2252,col 9)-(line 2252,col 101)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyObject()",
    "snippet": "@Test\n    public void testNullToEmptyObject() {\n        final Object[] original \u003d {Boolean.TRUE, Boolean.FALSE};\n        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n    }",
    "begin_line": 2256,
    "end_line": 2259,
    "comment": "",
    "child_ranges": [
      "(line 2257,col 9)-(line 2257,col 64)",
      "(line 2258,col 9)-(line 2258,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyObjectEmptyArray()",
    "snippet": "@Test\n    public void testNullToEmptyObjectEmptyArray() {\n        final Object[] empty \u003d {};\n        final Object[] result \u003d ArrayUtils.nullToEmpty(empty);\n        assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, result);\n        assertNotSame(empty, result);\n    }",
    "begin_line": 2262,
    "end_line": 2267,
    "comment": "",
    "child_ranges": [
      "(line 2263,col 9)-(line 2263,col 34)",
      "(line 2264,col 9)-(line 2264,col 62)",
      "(line 2265,col 9)-(line 2265,col 65)",
      "(line 2266,col 9)-(line 2266,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyObjectNull()",
    "snippet": "@Test\n    public void testNullToEmptyObjectNull() {\n        assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Object[]) null));\n    }",
    "begin_line": 2270,
    "end_line": 2272,
    "comment": "",
    "child_ranges": [
      "(line 2271,col 9)-(line 2271,col 98)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyShort()",
    "snippet": "@Test\n    public void testNullToEmptyShort() {\n        final short[] original \u003d {1, 2};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n    }",
    "begin_line": 2275,
    "end_line": 2278,
    "comment": "",
    "child_ranges": [
      "(line 2276,col 9)-(line 2276,col 40)",
      "(line 2277,col 9)-(line 2277,col 65)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyShortEmptyArray()",
    "snippet": "@Test\n    public void testNullToEmptyShortEmptyArray() {\n        final short[] empty \u003d {};\n        final short[] result \u003d ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, result);\n        assertNotSame(empty, result);\n    }",
    "begin_line": 2281,
    "end_line": 2286,
    "comment": "",
    "child_ranges": [
      "(line 2282,col 9)-(line 2282,col 33)",
      "(line 2283,col 9)-(line 2283,col 61)",
      "(line 2284,col 9)-(line 2284,col 59)",
      "(line 2285,col 9)-(line 2285,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyShortNull()",
    "snippet": "@Test\n    public void testNullToEmptyShortNull() {\n        assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null));\n    }",
    "begin_line": 2289,
    "end_line": 2291,
    "comment": "",
    "child_ranges": [
      "(line 2290,col 9)-(line 2290,col 91)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyShortObject()",
    "snippet": "@Test\n    public void testNullToEmptyShortObject() {\n        @SuppressWarnings(\"boxing\") final Short[] original \u003d {1, 2};\n        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n    }",
    "begin_line": 2294,
    "end_line": 2297,
    "comment": "",
    "child_ranges": [
      "(line 2295,col 9)-(line 2295,col 68)",
      "(line 2296,col 9)-(line 2296,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyShortObjectEmptyArray()",
    "snippet": "@Test\n    public void testNullToEmptyShortObjectEmptyArray() {\n        final Short[] empty \u003d {};\n        final Short[] result \u003d ArrayUtils.nullToEmpty(empty);\n        assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, result);\n        assertNotSame(empty, result);\n    }",
    "begin_line": 2300,
    "end_line": 2305,
    "comment": "",
    "child_ranges": [
      "(line 2301,col 9)-(line 2301,col 33)",
      "(line 2302,col 9)-(line 2302,col 61)",
      "(line 2303,col 9)-(line 2303,col 71)",
      "(line 2304,col 9)-(line 2304,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyShortObjectNull()",
    "snippet": "@Test\n    public void testNullToEmptyShortObjectNull() {\n        assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Short[]) null));\n    }",
    "begin_line": 2308,
    "end_line": 2310,
    "comment": "",
    "child_ranges": [
      "(line 2309,col 9)-(line 2309,col 103)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyString()",
    "snippet": "@Test\n    public void testNullToEmptyString() {\n        final String[] original \u003d {\"abc\", \"def\"};\n        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n    }",
    "begin_line": 2313,
    "end_line": 2316,
    "comment": "",
    "child_ranges": [
      "(line 2314,col 9)-(line 2314,col 49)",
      "(line 2315,col 9)-(line 2315,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyStringEmptyArray()",
    "snippet": "@Test\n    public void testNullToEmptyStringEmptyArray() {\n        final String[] empty \u003d {};\n        final String[] result \u003d ArrayUtils.nullToEmpty(empty);\n        assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, result);\n        assertNotSame(empty, result);\n    }",
    "begin_line": 2319,
    "end_line": 2324,
    "comment": "",
    "child_ranges": [
      "(line 2320,col 9)-(line 2320,col 34)",
      "(line 2321,col 9)-(line 2321,col 62)",
      "(line 2322,col 9)-(line 2322,col 65)",
      "(line 2323,col 9)-(line 2323,col 37)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyStringNull()",
    "snippet": "@Test\n    public void testNullToEmptyStringNull() {\n        assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.nullToEmpty((String[]) null));\n    }",
    "begin_line": 2327,
    "end_line": 2329,
    "comment": "",
    "child_ranges": [
      "(line 2328,col 9)-(line 2328,col 98)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverse()",
    "snippet": "@Test\n    public void testReverse() {\n        final StringBuffer str1 \u003d new StringBuffer(\"pick\");\n        final String str2 \u003d \"a\";\n        final String[] str3 \u003d {\"stick\"};\n        final String str4 \u003d \"up\";\n\n        Object[] array \u003d {str1, str2, str3};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], str3);\n        assertEquals(array[1], str2);\n        assertEquals(array[2], str1);\n\n        array \u003d new Object[]{str1, str2, str3, str4};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], str4);\n        assertEquals(array[1], str3);\n        assertEquals(array[2], str2);\n        assertEquals(array[3], str1);\n\n        array \u003d null;\n        ArrayUtils.reverse(array);\n        assertArrayEquals(null, array);\n    }",
    "begin_line": 2332,
    "end_line": 2354,
    "comment": "",
    "child_ranges": [
      "(line 2333,col 9)-(line 2333,col 59)",
      "(line 2334,col 9)-(line 2334,col 32)",
      "(line 2335,col 9)-(line 2335,col 40)",
      "(line 2336,col 9)-(line 2336,col 33)",
      "(line 2338,col 9)-(line 2338,col 44)",
      "(line 2339,col 9)-(line 2339,col 34)",
      "(line 2340,col 9)-(line 2340,col 37)",
      "(line 2341,col 9)-(line 2341,col 37)",
      "(line 2342,col 9)-(line 2342,col 37)",
      "(line 2344,col 9)-(line 2344,col 53)",
      "(line 2345,col 9)-(line 2345,col 34)",
      "(line 2346,col 9)-(line 2346,col 37)",
      "(line 2347,col 9)-(line 2347,col 37)",
      "(line 2348,col 9)-(line 2348,col 37)",
      "(line 2349,col 9)-(line 2349,col 37)",
      "(line 2351,col 9)-(line 2351,col 21)",
      "(line 2352,col 9)-(line 2352,col 34)",
      "(line 2353,col 9)-(line 2353,col 39)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseBoolean()",
    "snippet": "@Test\n    public void testReverseBoolean() {\n        boolean[] array \u003d {false, false, true};\n        ArrayUtils.reverse(array);\n        assertTrue(array[0]);\n        assertFalse(array[1]);\n        assertFalse(array[2]);\n\n        array \u003d null;\n        ArrayUtils.reverse(array);\n        assertNull(array);\n    }",
    "begin_line": 2357,
    "end_line": 2367,
    "comment": "",
    "child_ranges": [
      "(line 2358,col 9)-(line 2358,col 47)",
      "(line 2359,col 9)-(line 2359,col 34)",
      "(line 2360,col 9)-(line 2360,col 29)",
      "(line 2361,col 9)-(line 2361,col 30)",
      "(line 2362,col 9)-(line 2362,col 30)",
      "(line 2364,col 9)-(line 2364,col 21)",
      "(line 2365,col 9)-(line 2365,col 34)",
      "(line 2366,col 9)-(line 2366,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseBooleanRange()",
    "snippet": "@Test\n    public void testReverseBooleanRange() {\n        boolean[] array \u003d {false, false, true};\n        // The whole array\n        ArrayUtils.reverse(array, 0, 3);\n        assertTrue(array[0]);\n        assertFalse(array[1]);\n        assertFalse(array[2]);\n        // a range\n        array \u003d new boolean[]{false, false, true};\n        ArrayUtils.reverse(array, 0, 2);\n        assertFalse(array[0]);\n        assertFalse(array[1]);\n        assertTrue(array[2]);\n        // a range with a negative start\n        array \u003d new boolean[]{false, false, true};\n        ArrayUtils.reverse(array, -1, 3);\n        assertTrue(array[0]);\n        assertFalse(array[1]);\n        assertFalse(array[2]);\n        // a range with a large stop index\n        array \u003d new boolean[]{false, false, true};\n        ArrayUtils.reverse(array, -1, array.length + 1000);\n        assertTrue(array[0]);\n        assertFalse(array[1]);\n        assertFalse(array[2]);\n        // null\n        array \u003d null;\n        ArrayUtils.reverse(array, 0, 3);\n        assertNull(array);\n    }",
    "begin_line": 2370,
    "end_line": 2399,
    "comment": "",
    "child_ranges": [
      "(line 2371,col 9)-(line 2371,col 47)",
      "(line 2373,col 9)-(line 2373,col 40)",
      "(line 2374,col 9)-(line 2374,col 29)",
      "(line 2375,col 9)-(line 2375,col 30)",
      "(line 2376,col 9)-(line 2376,col 30)",
      "(line 2378,col 9)-(line 2378,col 50)",
      "(line 2379,col 9)-(line 2379,col 40)",
      "(line 2380,col 9)-(line 2380,col 30)",
      "(line 2381,col 9)-(line 2381,col 30)",
      "(line 2382,col 9)-(line 2382,col 29)",
      "(line 2384,col 9)-(line 2384,col 50)",
      "(line 2385,col 9)-(line 2385,col 41)",
      "(line 2386,col 9)-(line 2386,col 29)",
      "(line 2387,col 9)-(line 2387,col 30)",
      "(line 2388,col 9)-(line 2388,col 30)",
      "(line 2390,col 9)-(line 2390,col 50)",
      "(line 2391,col 9)-(line 2391,col 59)",
      "(line 2392,col 9)-(line 2392,col 29)",
      "(line 2393,col 9)-(line 2393,col 30)",
      "(line 2394,col 9)-(line 2394,col 30)",
      "(line 2396,col 9)-(line 2396,col 21)",
      "(line 2397,col 9)-(line 2397,col 40)",
      "(line 2398,col 9)-(line 2398,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseByte()",
    "snippet": "@Test\n    public void testReverseByte() {\n        byte[] array \u003d {2, 3, 4};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], 4);\n        assertEquals(array[1], 3);\n        assertEquals(array[2], 2);\n\n        array \u003d null;\n        ArrayUtils.reverse(array);\n        assertNull(array);\n    }",
    "begin_line": 2402,
    "end_line": 2412,
    "comment": "",
    "child_ranges": [
      "(line 2403,col 9)-(line 2403,col 33)",
      "(line 2404,col 9)-(line 2404,col 34)",
      "(line 2405,col 9)-(line 2405,col 34)",
      "(line 2406,col 9)-(line 2406,col 34)",
      "(line 2407,col 9)-(line 2407,col 34)",
      "(line 2409,col 9)-(line 2409,col 21)",
      "(line 2410,col 9)-(line 2410,col 34)",
      "(line 2411,col 9)-(line 2411,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseByteRange()",
    "snippet": "@Test\n    public void testReverseByteRange() {\n        byte[] array \u003d {1, 2, 3};\n        // The whole array\n        ArrayUtils.reverse(array, 0, 3);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // a range\n        array \u003d new byte[]{1, 2, 3};\n        ArrayUtils.reverse(array, 0, 2);\n        assertEquals(2, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(3, array[2]);\n        // a range with a negative start\n        array \u003d new byte[]{1, 2, 3};\n        ArrayUtils.reverse(array, -1, 3);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // a range with a large stop index\n        array \u003d new byte[]{1, 2, 3};\n        ArrayUtils.reverse(array, -1, array.length + 1000);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // null\n        array \u003d null;\n        ArrayUtils.reverse(array, 0, 3);\n        assertNull(array);\n    }",
    "begin_line": 2415,
    "end_line": 2444,
    "comment": "",
    "child_ranges": [
      "(line 2416,col 9)-(line 2416,col 33)",
      "(line 2418,col 9)-(line 2418,col 40)",
      "(line 2419,col 9)-(line 2419,col 34)",
      "(line 2420,col 9)-(line 2420,col 34)",
      "(line 2421,col 9)-(line 2421,col 34)",
      "(line 2423,col 9)-(line 2423,col 36)",
      "(line 2424,col 9)-(line 2424,col 40)",
      "(line 2425,col 9)-(line 2425,col 34)",
      "(line 2426,col 9)-(line 2426,col 34)",
      "(line 2427,col 9)-(line 2427,col 34)",
      "(line 2429,col 9)-(line 2429,col 36)",
      "(line 2430,col 9)-(line 2430,col 41)",
      "(line 2431,col 9)-(line 2431,col 34)",
      "(line 2432,col 9)-(line 2432,col 34)",
      "(line 2433,col 9)-(line 2433,col 34)",
      "(line 2435,col 9)-(line 2435,col 36)",
      "(line 2436,col 9)-(line 2436,col 59)",
      "(line 2437,col 9)-(line 2437,col 34)",
      "(line 2438,col 9)-(line 2438,col 34)",
      "(line 2439,col 9)-(line 2439,col 34)",
      "(line 2441,col 9)-(line 2441,col 21)",
      "(line 2442,col 9)-(line 2442,col 40)",
      "(line 2443,col 9)-(line 2443,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseChar()",
    "snippet": "@Test\n    public void testReverseChar() {\n        char[] array \u003d {\u0027a\u0027, \u0027f\u0027, \u0027C\u0027};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], \u0027C\u0027);\n        assertEquals(array[1], \u0027f\u0027);\n        assertEquals(array[2], \u0027a\u0027);\n\n        array \u003d null;\n        ArrayUtils.reverse(array);\n        assertNull(array);\n    }",
    "begin_line": 2447,
    "end_line": 2457,
    "comment": "",
    "child_ranges": [
      "(line 2448,col 9)-(line 2448,col 39)",
      "(line 2449,col 9)-(line 2449,col 34)",
      "(line 2450,col 9)-(line 2450,col 36)",
      "(line 2451,col 9)-(line 2451,col 36)",
      "(line 2452,col 9)-(line 2452,col 36)",
      "(line 2454,col 9)-(line 2454,col 21)",
      "(line 2455,col 9)-(line 2455,col 34)",
      "(line 2456,col 9)-(line 2456,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseCharRange()",
    "snippet": "@Test\n    public void testReverseCharRange() {\n        char[] array \u003d {1, 2, 3};\n        // The whole array\n        ArrayUtils.reverse(array, 0, 3);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // a range\n        array \u003d new char[]{1, 2, 3};\n        ArrayUtils.reverse(array, 0, 2);\n        assertEquals(2, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(3, array[2]);\n        // a range with a negative start\n        array \u003d new char[]{1, 2, 3};\n        ArrayUtils.reverse(array, -1, 3);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // a range with a large stop index\n        array \u003d new char[]{1, 2, 3};\n        ArrayUtils.reverse(array, -1, array.length + 1000);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // null\n        array \u003d null;\n        ArrayUtils.reverse(array, 0, 3);\n        assertNull(array);\n    }",
    "begin_line": 2460,
    "end_line": 2489,
    "comment": "",
    "child_ranges": [
      "(line 2461,col 9)-(line 2461,col 33)",
      "(line 2463,col 9)-(line 2463,col 40)",
      "(line 2464,col 9)-(line 2464,col 34)",
      "(line 2465,col 9)-(line 2465,col 34)",
      "(line 2466,col 9)-(line 2466,col 34)",
      "(line 2468,col 9)-(line 2468,col 36)",
      "(line 2469,col 9)-(line 2469,col 40)",
      "(line 2470,col 9)-(line 2470,col 34)",
      "(line 2471,col 9)-(line 2471,col 34)",
      "(line 2472,col 9)-(line 2472,col 34)",
      "(line 2474,col 9)-(line 2474,col 36)",
      "(line 2475,col 9)-(line 2475,col 41)",
      "(line 2476,col 9)-(line 2476,col 34)",
      "(line 2477,col 9)-(line 2477,col 34)",
      "(line 2478,col 9)-(line 2478,col 34)",
      "(line 2480,col 9)-(line 2480,col 36)",
      "(line 2481,col 9)-(line 2481,col 59)",
      "(line 2482,col 9)-(line 2482,col 34)",
      "(line 2483,col 9)-(line 2483,col 34)",
      "(line 2484,col 9)-(line 2484,col 34)",
      "(line 2486,col 9)-(line 2486,col 21)",
      "(line 2487,col 9)-(line 2487,col 40)",
      "(line 2488,col 9)-(line 2488,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseDouble()",
    "snippet": "@Test\n    public void testReverseDouble() {\n        double[] array \u003d {0.3d, 0.4d, 0.5d};\n        ArrayUtils.reverse(array);\n        assertEquals(0.5d, array[0]);\n        assertEquals(0.4d, array[1]);\n        assertEquals(0.3d, array[2]);\n\n        array \u003d null;\n        ArrayUtils.reverse(array);\n        assertNull(array);\n    }",
    "begin_line": 2492,
    "end_line": 2502,
    "comment": "",
    "child_ranges": [
      "(line 2493,col 9)-(line 2493,col 44)",
      "(line 2494,col 9)-(line 2494,col 34)",
      "(line 2495,col 9)-(line 2495,col 37)",
      "(line 2496,col 9)-(line 2496,col 37)",
      "(line 2497,col 9)-(line 2497,col 37)",
      "(line 2499,col 9)-(line 2499,col 21)",
      "(line 2500,col 9)-(line 2500,col 34)",
      "(line 2501,col 9)-(line 2501,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseDoubleRange()",
    "snippet": "@Test\n    public void testReverseDoubleRange() {\n        double[] array \u003d {1, 2, 3};\n        // The whole array\n        ArrayUtils.reverse(array, 0, 3);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // a range\n        array \u003d new double[]{1, 2, 3};\n        ArrayUtils.reverse(array, 0, 2);\n        assertEquals(2, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(3, array[2]);\n        // a range with a negative start\n        array \u003d new double[]{1, 2, 3};\n        ArrayUtils.reverse(array, -1, 3);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // a range with a large stop index\n        array \u003d new double[]{1, 2, 3};\n        ArrayUtils.reverse(array, -1, array.length + 1000);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // null\n        array \u003d null;\n        ArrayUtils.reverse(array, 0, 3);\n        assertNull(array);\n    }",
    "begin_line": 2505,
    "end_line": 2534,
    "comment": "",
    "child_ranges": [
      "(line 2506,col 9)-(line 2506,col 35)",
      "(line 2508,col 9)-(line 2508,col 40)",
      "(line 2509,col 9)-(line 2509,col 34)",
      "(line 2510,col 9)-(line 2510,col 34)",
      "(line 2511,col 9)-(line 2511,col 34)",
      "(line 2513,col 9)-(line 2513,col 38)",
      "(line 2514,col 9)-(line 2514,col 40)",
      "(line 2515,col 9)-(line 2515,col 34)",
      "(line 2516,col 9)-(line 2516,col 34)",
      "(line 2517,col 9)-(line 2517,col 34)",
      "(line 2519,col 9)-(line 2519,col 38)",
      "(line 2520,col 9)-(line 2520,col 41)",
      "(line 2521,col 9)-(line 2521,col 34)",
      "(line 2522,col 9)-(line 2522,col 34)",
      "(line 2523,col 9)-(line 2523,col 34)",
      "(line 2525,col 9)-(line 2525,col 38)",
      "(line 2526,col 9)-(line 2526,col 59)",
      "(line 2527,col 9)-(line 2527,col 34)",
      "(line 2528,col 9)-(line 2528,col 34)",
      "(line 2529,col 9)-(line 2529,col 34)",
      "(line 2531,col 9)-(line 2531,col 21)",
      "(line 2532,col 9)-(line 2532,col 40)",
      "(line 2533,col 9)-(line 2533,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseFloat()",
    "snippet": "@Test\n    public void testReverseFloat() {\n        float[] array \u003d {0.3f, 0.4f, 0.5f};\n        ArrayUtils.reverse(array);\n        assertEquals(0.5f, array[0]);\n        assertEquals(0.4f, array[1]);\n        assertEquals(0.3f, array[2]);\n\n        array \u003d null;\n        ArrayUtils.reverse(array);\n        assertNull(array);\n    }",
    "begin_line": 2537,
    "end_line": 2547,
    "comment": "",
    "child_ranges": [
      "(line 2538,col 9)-(line 2538,col 43)",
      "(line 2539,col 9)-(line 2539,col 34)",
      "(line 2540,col 9)-(line 2540,col 37)",
      "(line 2541,col 9)-(line 2541,col 37)",
      "(line 2542,col 9)-(line 2542,col 37)",
      "(line 2544,col 9)-(line 2544,col 21)",
      "(line 2545,col 9)-(line 2545,col 34)",
      "(line 2546,col 9)-(line 2546,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseFloatRange()",
    "snippet": "@Test\n    public void testReverseFloatRange() {\n        float[] array \u003d {1, 2, 3};\n        // The whole array\n        ArrayUtils.reverse(array, 0, 3);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // a range\n        array \u003d new float[]{1, 2, 3};\n        ArrayUtils.reverse(array, 0, 2);\n        assertEquals(2, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(3, array[2]);\n        // a range with a negative start\n        array \u003d new float[]{1, 2, 3};\n        ArrayUtils.reverse(array, -1, 3);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // a range with a large stop index\n        array \u003d new float[]{1, 2, 3};\n        ArrayUtils.reverse(array, -1, array.length + 1000);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // null\n        array \u003d null;\n        ArrayUtils.reverse(array, 0, 3);\n        assertNull(array);\n    }",
    "begin_line": 2550,
    "end_line": 2579,
    "comment": "",
    "child_ranges": [
      "(line 2551,col 9)-(line 2551,col 34)",
      "(line 2553,col 9)-(line 2553,col 40)",
      "(line 2554,col 9)-(line 2554,col 34)",
      "(line 2555,col 9)-(line 2555,col 34)",
      "(line 2556,col 9)-(line 2556,col 34)",
      "(line 2558,col 9)-(line 2558,col 37)",
      "(line 2559,col 9)-(line 2559,col 40)",
      "(line 2560,col 9)-(line 2560,col 34)",
      "(line 2561,col 9)-(line 2561,col 34)",
      "(line 2562,col 9)-(line 2562,col 34)",
      "(line 2564,col 9)-(line 2564,col 37)",
      "(line 2565,col 9)-(line 2565,col 41)",
      "(line 2566,col 9)-(line 2566,col 34)",
      "(line 2567,col 9)-(line 2567,col 34)",
      "(line 2568,col 9)-(line 2568,col 34)",
      "(line 2570,col 9)-(line 2570,col 37)",
      "(line 2571,col 9)-(line 2571,col 59)",
      "(line 2572,col 9)-(line 2572,col 34)",
      "(line 2573,col 9)-(line 2573,col 34)",
      "(line 2574,col 9)-(line 2574,col 34)",
      "(line 2576,col 9)-(line 2576,col 21)",
      "(line 2577,col 9)-(line 2577,col 40)",
      "(line 2578,col 9)-(line 2578,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseInt()",
    "snippet": "@Test\n    public void testReverseInt() {\n        int[] array \u003d {1, 2, 3};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], 3);\n        assertEquals(array[1], 2);\n        assertEquals(array[2], 1);\n\n        array \u003d null;\n        ArrayUtils.reverse(array);\n        assertNull(array);\n    }",
    "begin_line": 2582,
    "end_line": 2592,
    "comment": "",
    "child_ranges": [
      "(line 2583,col 9)-(line 2583,col 32)",
      "(line 2584,col 9)-(line 2584,col 34)",
      "(line 2585,col 9)-(line 2585,col 34)",
      "(line 2586,col 9)-(line 2586,col 34)",
      "(line 2587,col 9)-(line 2587,col 34)",
      "(line 2589,col 9)-(line 2589,col 21)",
      "(line 2590,col 9)-(line 2590,col 34)",
      "(line 2591,col 9)-(line 2591,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseIntRange()",
    "snippet": "@Test\n    public void testReverseIntRange() {\n        int[] array \u003d {1, 2, 3};\n        // The whole array\n        ArrayUtils.reverse(array, 0, 3);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // a range\n        array \u003d new int[]{1, 2, 3};\n        ArrayUtils.reverse(array, 0, 2);\n        assertEquals(2, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(3, array[2]);\n        // a range with a negative start\n        array \u003d new int[]{1, 2, 3};\n        ArrayUtils.reverse(array, -1, 3);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // a range with a large stop index\n        array \u003d new int[]{1, 2, 3};\n        ArrayUtils.reverse(array, -1, array.length + 1000);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // null\n        array \u003d null;\n        ArrayUtils.reverse(array, 0, 3);\n        assertNull(array);\n    }",
    "begin_line": 2595,
    "end_line": 2624,
    "comment": "",
    "child_ranges": [
      "(line 2596,col 9)-(line 2596,col 32)",
      "(line 2598,col 9)-(line 2598,col 40)",
      "(line 2599,col 9)-(line 2599,col 34)",
      "(line 2600,col 9)-(line 2600,col 34)",
      "(line 2601,col 9)-(line 2601,col 34)",
      "(line 2603,col 9)-(line 2603,col 35)",
      "(line 2604,col 9)-(line 2604,col 40)",
      "(line 2605,col 9)-(line 2605,col 34)",
      "(line 2606,col 9)-(line 2606,col 34)",
      "(line 2607,col 9)-(line 2607,col 34)",
      "(line 2609,col 9)-(line 2609,col 35)",
      "(line 2610,col 9)-(line 2610,col 41)",
      "(line 2611,col 9)-(line 2611,col 34)",
      "(line 2612,col 9)-(line 2612,col 34)",
      "(line 2613,col 9)-(line 2613,col 34)",
      "(line 2615,col 9)-(line 2615,col 35)",
      "(line 2616,col 9)-(line 2616,col 59)",
      "(line 2617,col 9)-(line 2617,col 34)",
      "(line 2618,col 9)-(line 2618,col 34)",
      "(line 2619,col 9)-(line 2619,col 34)",
      "(line 2621,col 9)-(line 2621,col 21)",
      "(line 2622,col 9)-(line 2622,col 40)",
      "(line 2623,col 9)-(line 2623,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseLong()",
    "snippet": "@Test\n    public void testReverseLong() {\n        long[] array \u003d {1L, 2L, 3L};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], 3L);\n        assertEquals(array[1], 2L);\n        assertEquals(array[2], 1L);\n\n        array \u003d null;\n        ArrayUtils.reverse(array);\n        assertNull(array);\n    }",
    "begin_line": 2627,
    "end_line": 2637,
    "comment": "",
    "child_ranges": [
      "(line 2628,col 9)-(line 2628,col 36)",
      "(line 2629,col 9)-(line 2629,col 34)",
      "(line 2630,col 9)-(line 2630,col 35)",
      "(line 2631,col 9)-(line 2631,col 35)",
      "(line 2632,col 9)-(line 2632,col 35)",
      "(line 2634,col 9)-(line 2634,col 21)",
      "(line 2635,col 9)-(line 2635,col 34)",
      "(line 2636,col 9)-(line 2636,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseLongRange()",
    "snippet": "@Test\n    public void testReverseLongRange() {\n        long[] array \u003d {1, 2, 3};\n        // The whole array\n        ArrayUtils.reverse(array, 0, 3);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // a range\n        array \u003d new long[]{1, 2, 3};\n        ArrayUtils.reverse(array, 0, 2);\n        assertEquals(2, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(3, array[2]);\n        // a range with a negative start\n        array \u003d new long[]{1, 2, 3};\n        ArrayUtils.reverse(array, -1, 3);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // a range with a large stop index\n        array \u003d new long[]{1, 2, 3};\n        ArrayUtils.reverse(array, -1, array.length + 1000);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // null\n        array \u003d null;\n        ArrayUtils.reverse(array, 0, 3);\n        assertNull(array);\n    }",
    "begin_line": 2640,
    "end_line": 2669,
    "comment": "",
    "child_ranges": [
      "(line 2641,col 9)-(line 2641,col 33)",
      "(line 2643,col 9)-(line 2643,col 40)",
      "(line 2644,col 9)-(line 2644,col 34)",
      "(line 2645,col 9)-(line 2645,col 34)",
      "(line 2646,col 9)-(line 2646,col 34)",
      "(line 2648,col 9)-(line 2648,col 36)",
      "(line 2649,col 9)-(line 2649,col 40)",
      "(line 2650,col 9)-(line 2650,col 34)",
      "(line 2651,col 9)-(line 2651,col 34)",
      "(line 2652,col 9)-(line 2652,col 34)",
      "(line 2654,col 9)-(line 2654,col 36)",
      "(line 2655,col 9)-(line 2655,col 41)",
      "(line 2656,col 9)-(line 2656,col 34)",
      "(line 2657,col 9)-(line 2657,col 34)",
      "(line 2658,col 9)-(line 2658,col 34)",
      "(line 2660,col 9)-(line 2660,col 36)",
      "(line 2661,col 9)-(line 2661,col 59)",
      "(line 2662,col 9)-(line 2662,col 34)",
      "(line 2663,col 9)-(line 2663,col 34)",
      "(line 2664,col 9)-(line 2664,col 34)",
      "(line 2666,col 9)-(line 2666,col 21)",
      "(line 2667,col 9)-(line 2667,col 40)",
      "(line 2668,col 9)-(line 2668,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseObjectRange()",
    "snippet": "@Test\n    public void testReverseObjectRange() {\n        String[] array \u003d {\"1\", \"2\", \"3\"};\n        // The whole array\n        ArrayUtils.reverse(array, 0, 3);\n        assertEquals(\"3\", array[0]);\n        assertEquals(\"2\", array[1]);\n        assertEquals(\"1\", array[2]);\n        // a range\n        array \u003d new String[]{\"1\", \"2\", \"3\"};\n        ArrayUtils.reverse(array, 0, 2);\n        assertEquals(\"2\", array[0]);\n        assertEquals(\"1\", array[1]);\n        assertEquals(\"3\", array[2]);\n        // a range with a negative start\n        array \u003d new String[]{\"1\", \"2\", \"3\"};\n        ArrayUtils.reverse(array, -1, 3);\n        assertEquals(\"3\", array[0]);\n        assertEquals(\"2\", array[1]);\n        assertEquals(\"1\", array[2]);\n        // a range with a large stop index\n        array \u003d new String[]{\"1\", \"2\", \"3\"};\n        ArrayUtils.reverse(array, -1, array.length + 1000);\n        assertEquals(\"3\", array[0]);\n        assertEquals(\"2\", array[1]);\n        assertEquals(\"1\", array[2]);\n        // null\n        array \u003d null;\n        ArrayUtils.reverse(array, 0, 3);\n        assertNull(array);\n    }",
    "begin_line": 2672,
    "end_line": 2701,
    "comment": "",
    "child_ranges": [
      "(line 2673,col 9)-(line 2673,col 41)",
      "(line 2675,col 9)-(line 2675,col 40)",
      "(line 2676,col 9)-(line 2676,col 36)",
      "(line 2677,col 9)-(line 2677,col 36)",
      "(line 2678,col 9)-(line 2678,col 36)",
      "(line 2680,col 9)-(line 2680,col 44)",
      "(line 2681,col 9)-(line 2681,col 40)",
      "(line 2682,col 9)-(line 2682,col 36)",
      "(line 2683,col 9)-(line 2683,col 36)",
      "(line 2684,col 9)-(line 2684,col 36)",
      "(line 2686,col 9)-(line 2686,col 44)",
      "(line 2687,col 9)-(line 2687,col 41)",
      "(line 2688,col 9)-(line 2688,col 36)",
      "(line 2689,col 9)-(line 2689,col 36)",
      "(line 2690,col 9)-(line 2690,col 36)",
      "(line 2692,col 9)-(line 2692,col 44)",
      "(line 2693,col 9)-(line 2693,col 59)",
      "(line 2694,col 9)-(line 2694,col 36)",
      "(line 2695,col 9)-(line 2695,col 36)",
      "(line 2696,col 9)-(line 2696,col 36)",
      "(line 2698,col 9)-(line 2698,col 21)",
      "(line 2699,col 9)-(line 2699,col 40)",
      "(line 2700,col 9)-(line 2700,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseShort()",
    "snippet": "@Test\n    public void testReverseShort() {\n        short[] array \u003d {1, 2, 3};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], 3);\n        assertEquals(array[1], 2);\n        assertEquals(array[2], 1);\n\n        array \u003d null;\n        ArrayUtils.reverse(array);\n        assertNull(array);\n    }",
    "begin_line": 2704,
    "end_line": 2714,
    "comment": "",
    "child_ranges": [
      "(line 2705,col 9)-(line 2705,col 34)",
      "(line 2706,col 9)-(line 2706,col 34)",
      "(line 2707,col 9)-(line 2707,col 34)",
      "(line 2708,col 9)-(line 2708,col 34)",
      "(line 2709,col 9)-(line 2709,col 34)",
      "(line 2711,col 9)-(line 2711,col 21)",
      "(line 2712,col 9)-(line 2712,col 34)",
      "(line 2713,col 9)-(line 2713,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseShortRange()",
    "snippet": "@Test\n    public void testReverseShortRange() {\n        short[] array \u003d {1, 2, 3};\n        // The whole array\n        ArrayUtils.reverse(array, 0, 3);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // a range\n        array \u003d new short[]{1, 2, 3};\n        ArrayUtils.reverse(array, 0, 2);\n        assertEquals(2, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(3, array[2]);\n        // a range with a negative start\n        array \u003d new short[]{1, 2, 3};\n        ArrayUtils.reverse(array, -1, 3);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // a range with a large stop index\n        array \u003d new short[]{1, 2, 3};\n        ArrayUtils.reverse(array, -1, array.length + 1000);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n        // null\n        array \u003d null;\n        ArrayUtils.reverse(array, 0, 3);\n        assertNull(array);\n    }",
    "begin_line": 2717,
    "end_line": 2746,
    "comment": "",
    "child_ranges": [
      "(line 2718,col 9)-(line 2718,col 34)",
      "(line 2720,col 9)-(line 2720,col 40)",
      "(line 2721,col 9)-(line 2721,col 34)",
      "(line 2722,col 9)-(line 2722,col 34)",
      "(line 2723,col 9)-(line 2723,col 34)",
      "(line 2725,col 9)-(line 2725,col 37)",
      "(line 2726,col 9)-(line 2726,col 40)",
      "(line 2727,col 9)-(line 2727,col 34)",
      "(line 2728,col 9)-(line 2728,col 34)",
      "(line 2729,col 9)-(line 2729,col 34)",
      "(line 2731,col 9)-(line 2731,col 37)",
      "(line 2732,col 9)-(line 2732,col 41)",
      "(line 2733,col 9)-(line 2733,col 34)",
      "(line 2734,col 9)-(line 2734,col 34)",
      "(line 2735,col 9)-(line 2735,col 34)",
      "(line 2737,col 9)-(line 2737,col 37)",
      "(line 2738,col 9)-(line 2738,col 59)",
      "(line 2739,col 9)-(line 2739,col 34)",
      "(line 2740,col 9)-(line 2740,col 34)",
      "(line 2741,col 9)-(line 2741,col 34)",
      "(line 2743,col 9)-(line 2743,col 21)",
      "(line 2744,col 9)-(line 2744,col 40)",
      "(line 2745,col 9)-(line 2745,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameLength()",
    "snippet": "@Test\n    public void testSameLength() {\n        final Object[] nullArray \u003d null;\n        final Object[] emptyArray \u003d {};\n        final Object[] oneArray \u003d {\"pick\"};\n        final Object[] twoArray \u003d {\"pick\", \"stick\"};\n\n        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\n        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\n\n        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\n\n        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\n        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\n\n        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\n        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\n        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
    "begin_line": 2749,
    "end_line": 2774,
    "comment": "",
    "child_ranges": [
      "(line 2750,col 9)-(line 2750,col 40)",
      "(line 2751,col 9)-(line 2751,col 39)",
      "(line 2752,col 9)-(line 2752,col 43)",
      "(line 2753,col 9)-(line 2753,col 52)",
      "(line 2755,col 9)-(line 2755,col 66)",
      "(line 2756,col 9)-(line 2756,col 67)",
      "(line 2757,col 9)-(line 2757,col 66)",
      "(line 2758,col 9)-(line 2758,col 66)",
      "(line 2760,col 9)-(line 2760,col 67)",
      "(line 2761,col 9)-(line 2761,col 68)",
      "(line 2762,col 9)-(line 2762,col 67)",
      "(line 2763,col 9)-(line 2763,col 67)",
      "(line 2765,col 9)-(line 2765,col 66)",
      "(line 2766,col 9)-(line 2766,col 67)",
      "(line 2767,col 9)-(line 2767,col 64)",
      "(line 2768,col 9)-(line 2768,col 65)",
      "(line 2770,col 9)-(line 2770,col 66)",
      "(line 2771,col 9)-(line 2771,col 67)",
      "(line 2772,col 9)-(line 2772,col 65)",
      "(line 2773,col 9)-(line 2773,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameLengthAll()",
    "snippet": "@Test\n    public void testSameLengthAll() {\n        final Object[] nullArrayObject \u003d null;\n        final Object[] emptyArrayObject \u003d {};\n        final Object[] oneArrayObject \u003d {\"pick\"};\n        final Object[] twoArrayObject \u003d {\"pick\", \"stick\"};\n        final boolean[] nullArrayBoolean \u003d null;\n        final boolean[] emptyArrayBoolean \u003d {};\n        final boolean[] oneArrayBoolean \u003d {true};\n        final boolean[] twoArrayBoolean \u003d {true, false};\n        final long[] nullArrayLong \u003d null;\n        final long[] emptyArrayLong \u003d {};\n        final long[] oneArrayLong \u003d {0L};\n        final long[] twoArrayLong \u003d {0L, 76L};\n        final int[] nullArrayInt \u003d null;\n        final int[] emptyArrayInt \u003d {};\n        final int[] oneArrayInt \u003d {4};\n        final int[] twoArrayInt \u003d {5, 7};\n        final short[] nullArrayShort \u003d null;\n        final short[] emptyArrayShort \u003d {};\n        final short[] oneArrayShort \u003d {4};\n        final short[] twoArrayShort \u003d {6, 8};\n        final char[] nullArrayChar \u003d null;\n        final char[] emptyArrayChar \u003d {};\n        final char[] oneArrayChar \u003d {\u0027f\u0027};\n        final char[] twoArrayChar \u003d {\u0027d\u0027, \u0027t\u0027};\n        final byte[] nullArrayByte \u003d null;\n        final byte[] emptyArrayByte \u003d {};\n        final byte[] oneArrayByte \u003d {3};\n        final byte[] twoArrayByte \u003d {4, 6};\n        final double[] nullArrayDouble \u003d null;\n        final double[] emptyArrayDouble \u003d {};\n        final double[] oneArrayDouble \u003d {1.3d};\n        final double[] twoArrayDouble \u003d {4.5d, 6.3d};\n        final float[] nullArrayFloat \u003d null;\n        final float[] emptyArrayFloat \u003d {};\n        final float[] oneArrayFloat \u003d {2.5f};\n        final float[] twoArrayFloat \u003d {6.4f, 5.8f};\n        assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayObject));\n        assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayLong));\n        assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayInt));\n        assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayShort));\n        assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayChar));\n        assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayByte));\n        assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayObject));\n        assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayLong));\n        assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayInt));\n        assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayShort));\n        assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayChar));\n        assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayByte));\n        assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayObject));\n        assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayLong));\n        assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayInt));\n        assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayShort));\n        assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayChar));\n        assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayByte));\n        assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayObject));\n        assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayLong));\n        assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayInt));\n        assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayShort));\n        assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayChar));\n        assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayByte));\n        assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayObject));\n        assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayLong));\n        assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayInt));\n        assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayShort));\n        assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayChar));\n        assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayByte));\n        assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayObject));\n        assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayLong));\n        assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayInt));\n        assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayShort));\n        assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayChar));\n        assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayByte));\n        assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayObject));\n        assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayLong));\n        assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayInt));\n        assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayShort));\n        assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayChar));\n        assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayByte));\n        assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayObject));\n        assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayLong));\n        assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayInt));\n        assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayShort));\n        assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayChar));\n        assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayByte));\n        assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayObject));\n        assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayLong));\n        assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayInt));\n        assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayShort));\n        assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayChar));\n        assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayByte));\n        assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayObject));\n        assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayLong));\n        assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayInt));\n        assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayShort));\n        assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayChar));\n        assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayByte));\n        assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayObject));\n        assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayLong));\n        assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayInt));\n        assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayShort));\n        assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayChar));\n        assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayByte));\n        assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayObject));\n        assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayLong));\n        assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayInt));\n        assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayShort));\n        assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayChar));\n        assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayByte));\n        assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayObject));\n        assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayLong));\n        assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayInt));\n        assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayShort));\n        assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayChar));\n        assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayByte));\n        assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayObject));\n        assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayLong));\n        assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayInt));\n        assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayShort));\n        assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayChar));\n        assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayByte));\n        assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayObject));\n        assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayLong));\n        assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayInt));\n        assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayShort));\n        assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayChar));\n        assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayByte));\n        assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayObject));\n        assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayLong));\n        assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayInt));\n        assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayShort));\n        assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayChar));\n        assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayByte));\n        assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayObject));\n        assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayLong));\n        assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayInt));\n        assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayShort));\n        assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayChar));\n        assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayByte));\n        assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayObject));\n        assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayLong));\n        assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayInt));\n        assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayShort));\n        assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayChar));\n        assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayByte));\n        assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayObject));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayLong));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayInt));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayShort));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayChar));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayByte));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayObject));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayLong));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayInt));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayShort));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayChar));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayByte));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayObject));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayLong));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayInt));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayShort));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayChar));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayByte));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayObject));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayLong));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayInt));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayShort));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayChar));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayByte));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayObject));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayLong));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayInt));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayShort));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayChar));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayByte));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayObject));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayLong));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayInt));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayShort));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayChar));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayByte));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayObject));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayLong));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayInt));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayShort));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayChar));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayByte));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayObject));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayLong));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayInt));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayShort));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayChar));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayByte));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayObject));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayLong));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayInt));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayShort));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayChar));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayByte));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayObject));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayLong));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayInt));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayShort));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayChar));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayByte));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayObject));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayLong));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayInt));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayShort));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayChar));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayByte));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayObject));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayLong));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayInt));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayShort));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayChar));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayByte));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayObject));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayLong));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayInt));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayShort));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayChar));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayByte));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayObject));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayLong));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayInt));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayShort));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayChar));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayByte));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayObject));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayLong));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayInt));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayShort));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayChar));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayByte));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayObject));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayLong));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayInt));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayShort));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayChar));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayByte));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayObject));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayLong));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayInt));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayShort));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayChar));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayByte));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayObject));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayLong));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayInt));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayShort));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayChar));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayByte));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayObject));\n        assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayLong));\n        assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayInt));\n        assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayShort));\n        assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayChar));\n        assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayByte));\n        assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayObject));\n        assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayLong));\n        assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayInt));\n        assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayShort));\n        assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayChar));\n        assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayByte));\n        assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayObject));\n        assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayLong));\n        assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayInt));\n        assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayShort));\n        assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayChar));\n        assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayByte));\n        assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayObject));\n        assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayLong));\n        assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayInt));\n        assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayShort));\n        assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayChar));\n        assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayByte));\n        assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayObject));\n        assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayLong));\n        assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayInt));\n        assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayShort));\n        assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayChar));\n        assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayByte));\n        assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayObject));\n        assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayLong));\n        assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayInt));\n        assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayShort));\n        assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayChar));\n        assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayByte));\n        assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayObject));\n        assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayLong));\n        assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayInt));\n        assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayShort));\n        assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayChar));\n        assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayByte));\n        assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayObject));\n        assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayLong));\n        assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayInt));\n        assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayShort));\n        assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayChar));\n        assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayByte));\n        assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayObject));\n        assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayLong));\n        assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayInt));\n        assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayShort));\n        assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayChar));\n        assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayByte));\n        assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayObject));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayLong));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayInt));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayShort));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayChar));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayByte));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayFloat));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayObject));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayBoolean));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayLong));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayInt));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayShort));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayChar));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayByte));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayDouble));\n        assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayObject));\n        assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayLong));\n        assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayInt));\n        assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayShort));\n        assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayChar));\n        assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayByte));\n        assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayObject));\n        assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayLong));\n        assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayInt));\n        assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayShort));\n        assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayChar));\n        assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayByte));\n        assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayObject));\n        assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayLong));\n        assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayInt));\n        assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayShort));\n        assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayChar));\n        assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayByte));\n        assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayObject));\n        assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayLong));\n        assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayInt));\n        assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayShort));\n        assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayChar));\n        assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayByte));\n        assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayObject));\n        assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayLong));\n        assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayInt));\n        assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayShort));\n        assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayChar));\n        assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayByte));\n        assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayObject));\n        assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayLong));\n        assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayInt));\n        assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayShort));\n        assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayChar));\n        assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayByte));\n        assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayObject));\n        assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayLong));\n        assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayInt));\n        assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayShort));\n        assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayChar));\n        assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayByte));\n        assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayObject));\n        assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayLong));\n        assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayInt));\n        assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayShort));\n        assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayChar));\n        assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayByte));\n        assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayFloat));\n        assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayObject));\n        assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayBoolean));\n        assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayLong));\n        assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayInt));\n        assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayShort));\n        assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayChar));\n        assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayByte));\n        assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayDouble));\n        assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayFloat));\n    }",
    "begin_line": 2777,
    "end_line": 4110,
    "comment": "",
    "child_ranges": [
      "(line 2778,col 9)-(line 2778,col 46)",
      "(line 2779,col 9)-(line 2779,col 45)",
      "(line 2780,col 9)-(line 2780,col 49)",
      "(line 2781,col 9)-(line 2781,col 58)",
      "(line 2782,col 9)-(line 2782,col 48)",
      "(line 2783,col 9)-(line 2783,col 47)",
      "(line 2784,col 9)-(line 2784,col 49)",
      "(line 2785,col 9)-(line 2785,col 56)",
      "(line 2786,col 9)-(line 2786,col 42)",
      "(line 2787,col 9)-(line 2787,col 41)",
      "(line 2788,col 9)-(line 2788,col 41)",
      "(line 2789,col 9)-(line 2789,col 46)",
      "(line 2790,col 9)-(line 2790,col 40)",
      "(line 2791,col 9)-(line 2791,col 39)",
      "(line 2792,col 9)-(line 2792,col 38)",
      "(line 2793,col 9)-(line 2793,col 41)",
      "(line 2794,col 9)-(line 2794,col 44)",
      "(line 2795,col 9)-(line 2795,col 43)",
      "(line 2796,col 9)-(line 2796,col 42)",
      "(line 2797,col 9)-(line 2797,col 45)",
      "(line 2798,col 9)-(line 2798,col 42)",
      "(line 2799,col 9)-(line 2799,col 41)",
      "(line 2800,col 9)-(line 2800,col 42)",
      "(line 2801,col 9)-(line 2801,col 47)",
      "(line 2802,col 9)-(line 2802,col 42)",
      "(line 2803,col 9)-(line 2803,col 41)",
      "(line 2804,col 9)-(line 2804,col 40)",
      "(line 2805,col 9)-(line 2805,col 43)",
      "(line 2806,col 9)-(line 2806,col 46)",
      "(line 2807,col 9)-(line 2807,col 45)",
      "(line 2808,col 9)-(line 2808,col 47)",
      "(line 2809,col 9)-(line 2809,col 53)",
      "(line 2810,col 9)-(line 2810,col 44)",
      "(line 2811,col 9)-(line 2811,col 43)",
      "(line 2812,col 9)-(line 2812,col 45)",
      "(line 2813,col 9)-(line 2813,col 51)",
      "(line 2814,col 9)-(line 2814,col 78)",
      "(line 2815,col 9)-(line 2815,col 79)",
      "(line 2816,col 9)-(line 2816,col 76)",
      "(line 2817,col 9)-(line 2817,col 75)",
      "(line 2818,col 9)-(line 2818,col 77)",
      "(line 2819,col 9)-(line 2819,col 76)",
      "(line 2820,col 9)-(line 2820,col 76)",
      "(line 2821,col 9)-(line 2821,col 78)",
      "(line 2822,col 9)-(line 2822,col 77)",
      "(line 2823,col 9)-(line 2823,col 79)",
      "(line 2824,col 9)-(line 2824,col 80)",
      "(line 2825,col 9)-(line 2825,col 77)",
      "(line 2826,col 9)-(line 2826,col 76)",
      "(line 2827,col 9)-(line 2827,col 78)",
      "(line 2828,col 9)-(line 2828,col 77)",
      "(line 2829,col 9)-(line 2829,col 77)",
      "(line 2830,col 9)-(line 2830,col 79)",
      "(line 2831,col 9)-(line 2831,col 78)",
      "(line 2832,col 9)-(line 2832,col 76)",
      "(line 2833,col 9)-(line 2833,col 77)",
      "(line 2834,col 9)-(line 2834,col 74)",
      "(line 2835,col 9)-(line 2835,col 73)",
      "(line 2836,col 9)-(line 2836,col 75)",
      "(line 2837,col 9)-(line 2837,col 74)",
      "(line 2838,col 9)-(line 2838,col 74)",
      "(line 2839,col 9)-(line 2839,col 76)",
      "(line 2840,col 9)-(line 2840,col 75)",
      "(line 2841,col 9)-(line 2841,col 75)",
      "(line 2842,col 9)-(line 2842,col 76)",
      "(line 2843,col 9)-(line 2843,col 73)",
      "(line 2844,col 9)-(line 2844,col 72)",
      "(line 2845,col 9)-(line 2845,col 74)",
      "(line 2846,col 9)-(line 2846,col 73)",
      "(line 2847,col 9)-(line 2847,col 73)",
      "(line 2848,col 9)-(line 2848,col 75)",
      "(line 2849,col 9)-(line 2849,col 74)",
      "(line 2850,col 9)-(line 2850,col 77)",
      "(line 2851,col 9)-(line 2851,col 78)",
      "(line 2852,col 9)-(line 2852,col 75)",
      "(line 2853,col 9)-(line 2853,col 74)",
      "(line 2854,col 9)-(line 2854,col 76)",
      "(line 2855,col 9)-(line 2855,col 75)",
      "(line 2856,col 9)-(line 2856,col 75)",
      "(line 2857,col 9)-(line 2857,col 77)",
      "(line 2858,col 9)-(line 2858,col 76)",
      "(line 2859,col 9)-(line 2859,col 76)",
      "(line 2860,col 9)-(line 2860,col 77)",
      "(line 2861,col 9)-(line 2861,col 74)",
      "(line 2862,col 9)-(line 2862,col 73)",
      "(line 2863,col 9)-(line 2863,col 75)",
      "(line 2864,col 9)-(line 2864,col 74)",
      "(line 2865,col 9)-(line 2865,col 74)",
      "(line 2866,col 9)-(line 2866,col 76)",
      "(line 2867,col 9)-(line 2867,col 75)",
      "(line 2868,col 9)-(line 2868,col 76)",
      "(line 2869,col 9)-(line 2869,col 77)",
      "(line 2870,col 9)-(line 2870,col 74)",
      "(line 2871,col 9)-(line 2871,col 73)",
      "(line 2872,col 9)-(line 2872,col 75)",
      "(line 2873,col 9)-(line 2873,col 74)",
      "(line 2874,col 9)-(line 2874,col 74)",
      "(line 2875,col 9)-(line 2875,col 76)",
      "(line 2876,col 9)-(line 2876,col 75)",
      "(line 2877,col 9)-(line 2877,col 78)",
      "(line 2878,col 9)-(line 2878,col 79)",
      "(line 2879,col 9)-(line 2879,col 76)",
      "(line 2880,col 9)-(line 2880,col 75)",
      "(line 2881,col 9)-(line 2881,col 77)",
      "(line 2882,col 9)-(line 2882,col 76)",
      "(line 2883,col 9)-(line 2883,col 76)",
      "(line 2884,col 9)-(line 2884,col 78)",
      "(line 2885,col 9)-(line 2885,col 77)",
      "(line 2886,col 9)-(line 2886,col 77)",
      "(line 2887,col 9)-(line 2887,col 78)",
      "(line 2888,col 9)-(line 2888,col 75)",
      "(line 2889,col 9)-(line 2889,col 74)",
      "(line 2890,col 9)-(line 2890,col 76)",
      "(line 2891,col 9)-(line 2891,col 75)",
      "(line 2892,col 9)-(line 2892,col 75)",
      "(line 2893,col 9)-(line 2893,col 77)",
      "(line 2894,col 9)-(line 2894,col 76)",
      "(line 2895,col 9)-(line 2895,col 79)",
      "(line 2896,col 9)-(line 2896,col 80)",
      "(line 2897,col 9)-(line 2897,col 77)",
      "(line 2898,col 9)-(line 2898,col 76)",
      "(line 2899,col 9)-(line 2899,col 78)",
      "(line 2900,col 9)-(line 2900,col 77)",
      "(line 2901,col 9)-(line 2901,col 77)",
      "(line 2902,col 9)-(line 2902,col 79)",
      "(line 2903,col 9)-(line 2903,col 78)",
      "(line 2904,col 9)-(line 2904,col 80)",
      "(line 2905,col 9)-(line 2905,col 81)",
      "(line 2906,col 9)-(line 2906,col 78)",
      "(line 2907,col 9)-(line 2907,col 77)",
      "(line 2908,col 9)-(line 2908,col 79)",
      "(line 2909,col 9)-(line 2909,col 78)",
      "(line 2910,col 9)-(line 2910,col 78)",
      "(line 2911,col 9)-(line 2911,col 80)",
      "(line 2912,col 9)-(line 2912,col 79)",
      "(line 2913,col 9)-(line 2913,col 77)",
      "(line 2914,col 9)-(line 2914,col 78)",
      "(line 2915,col 9)-(line 2915,col 75)",
      "(line 2916,col 9)-(line 2916,col 74)",
      "(line 2917,col 9)-(line 2917,col 76)",
      "(line 2918,col 9)-(line 2918,col 75)",
      "(line 2919,col 9)-(line 2919,col 75)",
      "(line 2920,col 9)-(line 2920,col 77)",
      "(line 2921,col 9)-(line 2921,col 76)",
      "(line 2922,col 9)-(line 2922,col 76)",
      "(line 2923,col 9)-(line 2923,col 77)",
      "(line 2924,col 9)-(line 2924,col 74)",
      "(line 2925,col 9)-(line 2925,col 73)",
      "(line 2926,col 9)-(line 2926,col 75)",
      "(line 2927,col 9)-(line 2927,col 74)",
      "(line 2928,col 9)-(line 2928,col 74)",
      "(line 2929,col 9)-(line 2929,col 76)",
      "(line 2930,col 9)-(line 2930,col 75)",
      "(line 2931,col 9)-(line 2931,col 78)",
      "(line 2932,col 9)-(line 2932,col 79)",
      "(line 2933,col 9)-(line 2933,col 76)",
      "(line 2934,col 9)-(line 2934,col 75)",
      "(line 2935,col 9)-(line 2935,col 77)",
      "(line 2936,col 9)-(line 2936,col 76)",
      "(line 2937,col 9)-(line 2937,col 76)",
      "(line 2938,col 9)-(line 2938,col 78)",
      "(line 2939,col 9)-(line 2939,col 77)",
      "(line 2940,col 9)-(line 2940,col 77)",
      "(line 2941,col 9)-(line 2941,col 78)",
      "(line 2942,col 9)-(line 2942,col 75)",
      "(line 2943,col 9)-(line 2943,col 74)",
      "(line 2944,col 9)-(line 2944,col 76)",
      "(line 2945,col 9)-(line 2945,col 75)",
      "(line 2946,col 9)-(line 2946,col 75)",
      "(line 2947,col 9)-(line 2947,col 77)",
      "(line 2948,col 9)-(line 2948,col 76)",
      "(line 2949,col 9)-(line 2949,col 77)",
      "(line 2950,col 9)-(line 2950,col 78)",
      "(line 2951,col 9)-(line 2951,col 75)",
      "(line 2952,col 9)-(line 2952,col 74)",
      "(line 2953,col 9)-(line 2953,col 76)",
      "(line 2954,col 9)-(line 2954,col 75)",
      "(line 2955,col 9)-(line 2955,col 75)",
      "(line 2956,col 9)-(line 2956,col 77)",
      "(line 2957,col 9)-(line 2957,col 76)",
      "(line 2958,col 9)-(line 2958,col 79)",
      "(line 2959,col 9)-(line 2959,col 80)",
      "(line 2960,col 9)-(line 2960,col 77)",
      "(line 2961,col 9)-(line 2961,col 76)",
      "(line 2962,col 9)-(line 2962,col 78)",
      "(line 2963,col 9)-(line 2963,col 77)",
      "(line 2964,col 9)-(line 2964,col 77)",
      "(line 2965,col 9)-(line 2965,col 79)",
      "(line 2966,col 9)-(line 2966,col 78)",
      "(line 2967,col 9)-(line 2967,col 78)",
      "(line 2968,col 9)-(line 2968,col 79)",
      "(line 2969,col 9)-(line 2969,col 76)",
      "(line 2970,col 9)-(line 2970,col 75)",
      "(line 2971,col 9)-(line 2971,col 77)",
      "(line 2972,col 9)-(line 2972,col 76)",
      "(line 2973,col 9)-(line 2973,col 76)",
      "(line 2974,col 9)-(line 2974,col 78)",
      "(line 2975,col 9)-(line 2975,col 77)",
      "(line 2976,col 9)-(line 2976,col 78)",
      "(line 2977,col 9)-(line 2977,col 79)",
      "(line 2978,col 9)-(line 2978,col 76)",
      "(line 2979,col 9)-(line 2979,col 75)",
      "(line 2980,col 9)-(line 2980,col 77)",
      "(line 2981,col 9)-(line 2981,col 76)",
      "(line 2982,col 9)-(line 2982,col 76)",
      "(line 2983,col 9)-(line 2983,col 78)",
      "(line 2984,col 9)-(line 2984,col 77)",
      "(line 2985,col 9)-(line 2985,col 79)",
      "(line 2986,col 9)-(line 2986,col 80)",
      "(line 2987,col 9)-(line 2987,col 77)",
      "(line 2988,col 9)-(line 2988,col 76)",
      "(line 2989,col 9)-(line 2989,col 78)",
      "(line 2990,col 9)-(line 2990,col 77)",
      "(line 2991,col 9)-(line 2991,col 77)",
      "(line 2992,col 9)-(line 2992,col 79)",
      "(line 2993,col 9)-(line 2993,col 78)",
      "(line 2994,col 9)-(line 2994,col 76)",
      "(line 2995,col 9)-(line 2995,col 77)",
      "(line 2996,col 9)-(line 2996,col 74)",
      "(line 2997,col 9)-(line 2997,col 73)",
      "(line 2998,col 9)-(line 2998,col 75)",
      "(line 2999,col 9)-(line 2999,col 74)",
      "(line 3000,col 9)-(line 3000,col 74)",
      "(line 3001,col 9)-(line 3001,col 76)",
      "(line 3002,col 9)-(line 3002,col 75)",
      "(line 3003,col 9)-(line 3003,col 75)",
      "(line 3004,col 9)-(line 3004,col 76)",
      "(line 3005,col 9)-(line 3005,col 73)",
      "(line 3006,col 9)-(line 3006,col 72)",
      "(line 3007,col 9)-(line 3007,col 74)",
      "(line 3008,col 9)-(line 3008,col 73)",
      "(line 3009,col 9)-(line 3009,col 73)",
      "(line 3010,col 9)-(line 3010,col 75)",
      "(line 3011,col 9)-(line 3011,col 74)",
      "(line 3012,col 9)-(line 3012,col 77)",
      "(line 3013,col 9)-(line 3013,col 78)",
      "(line 3014,col 9)-(line 3014,col 75)",
      "(line 3015,col 9)-(line 3015,col 74)",
      "(line 3016,col 9)-(line 3016,col 76)",
      "(line 3017,col 9)-(line 3017,col 75)",
      "(line 3018,col 9)-(line 3018,col 75)",
      "(line 3019,col 9)-(line 3019,col 77)",
      "(line 3020,col 9)-(line 3020,col 76)",
      "(line 3021,col 9)-(line 3021,col 76)",
      "(line 3022,col 9)-(line 3022,col 77)",
      "(line 3023,col 9)-(line 3023,col 74)",
      "(line 3024,col 9)-(line 3024,col 73)",
      "(line 3025,col 9)-(line 3025,col 75)",
      "(line 3026,col 9)-(line 3026,col 74)",
      "(line 3027,col 9)-(line 3027,col 74)",
      "(line 3028,col 9)-(line 3028,col 76)",
      "(line 3029,col 9)-(line 3029,col 75)",
      "(line 3030,col 9)-(line 3030,col 76)",
      "(line 3031,col 9)-(line 3031,col 77)",
      "(line 3032,col 9)-(line 3032,col 74)",
      "(line 3033,col 9)-(line 3033,col 73)",
      "(line 3034,col 9)-(line 3034,col 75)",
      "(line 3035,col 9)-(line 3035,col 74)",
      "(line 3036,col 9)-(line 3036,col 74)",
      "(line 3037,col 9)-(line 3037,col 76)",
      "(line 3038,col 9)-(line 3038,col 75)",
      "(line 3039,col 9)-(line 3039,col 78)",
      "(line 3040,col 9)-(line 3040,col 79)",
      "(line 3041,col 9)-(line 3041,col 76)",
      "(line 3042,col 9)-(line 3042,col 75)",
      "(line 3043,col 9)-(line 3043,col 77)",
      "(line 3044,col 9)-(line 3044,col 76)",
      "(line 3045,col 9)-(line 3045,col 76)",
      "(line 3046,col 9)-(line 3046,col 78)",
      "(line 3047,col 9)-(line 3047,col 77)",
      "(line 3048,col 9)-(line 3048,col 77)",
      "(line 3049,col 9)-(line 3049,col 78)",
      "(line 3050,col 9)-(line 3050,col 75)",
      "(line 3051,col 9)-(line 3051,col 74)",
      "(line 3052,col 9)-(line 3052,col 76)",
      "(line 3053,col 9)-(line 3053,col 75)",
      "(line 3054,col 9)-(line 3054,col 75)",
      "(line 3055,col 9)-(line 3055,col 77)",
      "(line 3056,col 9)-(line 3056,col 76)",
      "(line 3057,col 9)-(line 3057,col 78)",
      "(line 3058,col 9)-(line 3058,col 79)",
      "(line 3059,col 9)-(line 3059,col 76)",
      "(line 3060,col 9)-(line 3060,col 75)",
      "(line 3061,col 9)-(line 3061,col 77)",
      "(line 3062,col 9)-(line 3062,col 76)",
      "(line 3063,col 9)-(line 3063,col 76)",
      "(line 3064,col 9)-(line 3064,col 78)",
      "(line 3065,col 9)-(line 3065,col 77)",
      "(line 3066,col 9)-(line 3066,col 79)",
      "(line 3067,col 9)-(line 3067,col 80)",
      "(line 3068,col 9)-(line 3068,col 77)",
      "(line 3069,col 9)-(line 3069,col 76)",
      "(line 3070,col 9)-(line 3070,col 78)",
      "(line 3071,col 9)-(line 3071,col 77)",
      "(line 3072,col 9)-(line 3072,col 77)",
      "(line 3073,col 9)-(line 3073,col 79)",
      "(line 3074,col 9)-(line 3074,col 78)",
      "(line 3075,col 9)-(line 3075,col 76)",
      "(line 3076,col 9)-(line 3076,col 77)",
      "(line 3077,col 9)-(line 3077,col 74)",
      "(line 3078,col 9)-(line 3078,col 73)",
      "(line 3079,col 9)-(line 3079,col 75)",
      "(line 3080,col 9)-(line 3080,col 74)",
      "(line 3081,col 9)-(line 3081,col 74)",
      "(line 3082,col 9)-(line 3082,col 76)",
      "(line 3083,col 9)-(line 3083,col 75)",
      "(line 3084,col 9)-(line 3084,col 75)",
      "(line 3085,col 9)-(line 3085,col 76)",
      "(line 3086,col 9)-(line 3086,col 73)",
      "(line 3087,col 9)-(line 3087,col 72)",
      "(line 3088,col 9)-(line 3088,col 74)",
      "(line 3089,col 9)-(line 3089,col 73)",
      "(line 3090,col 9)-(line 3090,col 73)",
      "(line 3091,col 9)-(line 3091,col 75)",
      "(line 3092,col 9)-(line 3092,col 74)",
      "(line 3093,col 9)-(line 3093,col 77)",
      "(line 3094,col 9)-(line 3094,col 78)",
      "(line 3095,col 9)-(line 3095,col 75)",
      "(line 3096,col 9)-(line 3096,col 74)",
      "(line 3097,col 9)-(line 3097,col 76)",
      "(line 3098,col 9)-(line 3098,col 75)",
      "(line 3099,col 9)-(line 3099,col 75)",
      "(line 3100,col 9)-(line 3100,col 77)",
      "(line 3101,col 9)-(line 3101,col 76)",
      "(line 3102,col 9)-(line 3102,col 76)",
      "(line 3103,col 9)-(line 3103,col 77)",
      "(line 3104,col 9)-(line 3104,col 74)",
      "(line 3105,col 9)-(line 3105,col 73)",
      "(line 3106,col 9)-(line 3106,col 75)",
      "(line 3107,col 9)-(line 3107,col 74)",
      "(line 3108,col 9)-(line 3108,col 74)",
      "(line 3109,col 9)-(line 3109,col 76)",
      "(line 3110,col 9)-(line 3110,col 75)",
      "(line 3111,col 9)-(line 3111,col 76)",
      "(line 3112,col 9)-(line 3112,col 77)",
      "(line 3113,col 9)-(line 3113,col 74)",
      "(line 3114,col 9)-(line 3114,col 73)",
      "(line 3115,col 9)-(line 3115,col 75)",
      "(line 3116,col 9)-(line 3116,col 74)",
      "(line 3117,col 9)-(line 3117,col 74)",
      "(line 3118,col 9)-(line 3118,col 76)",
      "(line 3119,col 9)-(line 3119,col 75)",
      "(line 3120,col 9)-(line 3120,col 78)",
      "(line 3121,col 9)-(line 3121,col 79)",
      "(line 3122,col 9)-(line 3122,col 76)",
      "(line 3123,col 9)-(line 3123,col 75)",
      "(line 3124,col 9)-(line 3124,col 77)",
      "(line 3125,col 9)-(line 3125,col 76)",
      "(line 3126,col 9)-(line 3126,col 76)",
      "(line 3127,col 9)-(line 3127,col 78)",
      "(line 3128,col 9)-(line 3128,col 77)",
      "(line 3129,col 9)-(line 3129,col 77)",
      "(line 3130,col 9)-(line 3130,col 78)",
      "(line 3131,col 9)-(line 3131,col 75)",
      "(line 3132,col 9)-(line 3132,col 74)",
      "(line 3133,col 9)-(line 3133,col 76)",
      "(line 3134,col 9)-(line 3134,col 75)",
      "(line 3135,col 9)-(line 3135,col 75)",
      "(line 3136,col 9)-(line 3136,col 77)",
      "(line 3137,col 9)-(line 3137,col 76)",
      "(line 3138,col 9)-(line 3138,col 79)",
      "(line 3139,col 9)-(line 3139,col 80)",
      "(line 3140,col 9)-(line 3140,col 77)",
      "(line 3141,col 9)-(line 3141,col 76)",
      "(line 3142,col 9)-(line 3142,col 78)",
      "(line 3143,col 9)-(line 3143,col 77)",
      "(line 3144,col 9)-(line 3144,col 77)",
      "(line 3145,col 9)-(line 3145,col 79)",
      "(line 3146,col 9)-(line 3146,col 78)",
      "(line 3147,col 9)-(line 3147,col 80)",
      "(line 3148,col 9)-(line 3148,col 81)",
      "(line 3149,col 9)-(line 3149,col 78)",
      "(line 3150,col 9)-(line 3150,col 77)",
      "(line 3151,col 9)-(line 3151,col 79)",
      "(line 3152,col 9)-(line 3152,col 78)",
      "(line 3153,col 9)-(line 3153,col 78)",
      "(line 3154,col 9)-(line 3154,col 80)",
      "(line 3155,col 9)-(line 3155,col 79)",
      "(line 3156,col 9)-(line 3156,col 77)",
      "(line 3157,col 9)-(line 3157,col 78)",
      "(line 3158,col 9)-(line 3158,col 75)",
      "(line 3159,col 9)-(line 3159,col 74)",
      "(line 3160,col 9)-(line 3160,col 76)",
      "(line 3161,col 9)-(line 3161,col 75)",
      "(line 3162,col 9)-(line 3162,col 75)",
      "(line 3163,col 9)-(line 3163,col 77)",
      "(line 3164,col 9)-(line 3164,col 76)",
      "(line 3165,col 9)-(line 3165,col 76)",
      "(line 3166,col 9)-(line 3166,col 77)",
      "(line 3167,col 9)-(line 3167,col 74)",
      "(line 3168,col 9)-(line 3168,col 73)",
      "(line 3169,col 9)-(line 3169,col 75)",
      "(line 3170,col 9)-(line 3170,col 74)",
      "(line 3171,col 9)-(line 3171,col 74)",
      "(line 3172,col 9)-(line 3172,col 76)",
      "(line 3173,col 9)-(line 3173,col 75)",
      "(line 3174,col 9)-(line 3174,col 78)",
      "(line 3175,col 9)-(line 3175,col 79)",
      "(line 3176,col 9)-(line 3176,col 76)",
      "(line 3177,col 9)-(line 3177,col 75)",
      "(line 3178,col 9)-(line 3178,col 77)",
      "(line 3179,col 9)-(line 3179,col 76)",
      "(line 3180,col 9)-(line 3180,col 76)",
      "(line 3181,col 9)-(line 3181,col 78)",
      "(line 3182,col 9)-(line 3182,col 77)",
      "(line 3183,col 9)-(line 3183,col 77)",
      "(line 3184,col 9)-(line 3184,col 78)",
      "(line 3185,col 9)-(line 3185,col 75)",
      "(line 3186,col 9)-(line 3186,col 74)",
      "(line 3187,col 9)-(line 3187,col 76)",
      "(line 3188,col 9)-(line 3188,col 75)",
      "(line 3189,col 9)-(line 3189,col 75)",
      "(line 3190,col 9)-(line 3190,col 77)",
      "(line 3191,col 9)-(line 3191,col 76)",
      "(line 3192,col 9)-(line 3192,col 77)",
      "(line 3193,col 9)-(line 3193,col 78)",
      "(line 3194,col 9)-(line 3194,col 75)",
      "(line 3195,col 9)-(line 3195,col 74)",
      "(line 3196,col 9)-(line 3196,col 76)",
      "(line 3197,col 9)-(line 3197,col 75)",
      "(line 3198,col 9)-(line 3198,col 75)",
      "(line 3199,col 9)-(line 3199,col 77)",
      "(line 3200,col 9)-(line 3200,col 76)",
      "(line 3201,col 9)-(line 3201,col 79)",
      "(line 3202,col 9)-(line 3202,col 80)",
      "(line 3203,col 9)-(line 3203,col 77)",
      "(line 3204,col 9)-(line 3204,col 76)",
      "(line 3205,col 9)-(line 3205,col 78)",
      "(line 3206,col 9)-(line 3206,col 77)",
      "(line 3207,col 9)-(line 3207,col 77)",
      "(line 3208,col 9)-(line 3208,col 79)",
      "(line 3209,col 9)-(line 3209,col 78)",
      "(line 3210,col 9)-(line 3210,col 78)",
      "(line 3211,col 9)-(line 3211,col 79)",
      "(line 3212,col 9)-(line 3212,col 76)",
      "(line 3213,col 9)-(line 3213,col 75)",
      "(line 3214,col 9)-(line 3214,col 77)",
      "(line 3215,col 9)-(line 3215,col 76)",
      "(line 3216,col 9)-(line 3216,col 76)",
      "(line 3217,col 9)-(line 3217,col 78)",
      "(line 3218,col 9)-(line 3218,col 77)",
      "(line 3219,col 9)-(line 3219,col 80)",
      "(line 3220,col 9)-(line 3220,col 81)",
      "(line 3221,col 9)-(line 3221,col 78)",
      "(line 3222,col 9)-(line 3222,col 77)",
      "(line 3223,col 9)-(line 3223,col 79)",
      "(line 3224,col 9)-(line 3224,col 78)",
      "(line 3225,col 9)-(line 3225,col 78)",
      "(line 3226,col 9)-(line 3226,col 80)",
      "(line 3227,col 9)-(line 3227,col 79)",
      "(line 3228,col 9)-(line 3228,col 81)",
      "(line 3229,col 9)-(line 3229,col 82)",
      "(line 3230,col 9)-(line 3230,col 79)",
      "(line 3231,col 9)-(line 3231,col 78)",
      "(line 3232,col 9)-(line 3232,col 80)",
      "(line 3233,col 9)-(line 3233,col 79)",
      "(line 3234,col 9)-(line 3234,col 79)",
      "(line 3235,col 9)-(line 3235,col 81)",
      "(line 3236,col 9)-(line 3236,col 80)",
      "(line 3237,col 9)-(line 3237,col 78)",
      "(line 3238,col 9)-(line 3238,col 79)",
      "(line 3239,col 9)-(line 3239,col 76)",
      "(line 3240,col 9)-(line 3240,col 75)",
      "(line 3241,col 9)-(line 3241,col 77)",
      "(line 3242,col 9)-(line 3242,col 76)",
      "(line 3243,col 9)-(line 3243,col 76)",
      "(line 3244,col 9)-(line 3244,col 78)",
      "(line 3245,col 9)-(line 3245,col 77)",
      "(line 3246,col 9)-(line 3246,col 77)",
      "(line 3247,col 9)-(line 3247,col 78)",
      "(line 3248,col 9)-(line 3248,col 75)",
      "(line 3249,col 9)-(line 3249,col 74)",
      "(line 3250,col 9)-(line 3250,col 76)",
      "(line 3251,col 9)-(line 3251,col 75)",
      "(line 3252,col 9)-(line 3252,col 75)",
      "(line 3253,col 9)-(line 3253,col 77)",
      "(line 3254,col 9)-(line 3254,col 76)",
      "(line 3255,col 9)-(line 3255,col 79)",
      "(line 3256,col 9)-(line 3256,col 80)",
      "(line 3257,col 9)-(line 3257,col 77)",
      "(line 3258,col 9)-(line 3258,col 76)",
      "(line 3259,col 9)-(line 3259,col 78)",
      "(line 3260,col 9)-(line 3260,col 77)",
      "(line 3261,col 9)-(line 3261,col 77)",
      "(line 3262,col 9)-(line 3262,col 79)",
      "(line 3263,col 9)-(line 3263,col 78)",
      "(line 3264,col 9)-(line 3264,col 78)",
      "(line 3265,col 9)-(line 3265,col 79)",
      "(line 3266,col 9)-(line 3266,col 76)",
      "(line 3267,col 9)-(line 3267,col 75)",
      "(line 3268,col 9)-(line 3268,col 77)",
      "(line 3269,col 9)-(line 3269,col 76)",
      "(line 3270,col 9)-(line 3270,col 76)",
      "(line 3271,col 9)-(line 3271,col 78)",
      "(line 3272,col 9)-(line 3272,col 77)",
      "(line 3273,col 9)-(line 3273,col 78)",
      "(line 3274,col 9)-(line 3274,col 79)",
      "(line 3275,col 9)-(line 3275,col 76)",
      "(line 3276,col 9)-(line 3276,col 75)",
      "(line 3277,col 9)-(line 3277,col 77)",
      "(line 3278,col 9)-(line 3278,col 76)",
      "(line 3279,col 9)-(line 3279,col 76)",
      "(line 3280,col 9)-(line 3280,col 78)",
      "(line 3281,col 9)-(line 3281,col 77)",
      "(line 3282,col 9)-(line 3282,col 80)",
      "(line 3283,col 9)-(line 3283,col 81)",
      "(line 3284,col 9)-(line 3284,col 78)",
      "(line 3285,col 9)-(line 3285,col 77)",
      "(line 3286,col 9)-(line 3286,col 79)",
      "(line 3287,col 9)-(line 3287,col 78)",
      "(line 3288,col 9)-(line 3288,col 78)",
      "(line 3289,col 9)-(line 3289,col 80)",
      "(line 3290,col 9)-(line 3290,col 79)",
      "(line 3291,col 9)-(line 3291,col 79)",
      "(line 3292,col 9)-(line 3292,col 80)",
      "(line 3293,col 9)-(line 3293,col 77)",
      "(line 3294,col 9)-(line 3294,col 76)",
      "(line 3295,col 9)-(line 3295,col 78)",
      "(line 3296,col 9)-(line 3296,col 77)",
      "(line 3297,col 9)-(line 3297,col 77)",
      "(line 3298,col 9)-(line 3298,col 79)",
      "(line 3299,col 9)-(line 3299,col 78)",
      "(line 3300,col 9)-(line 3300,col 79)",
      "(line 3301,col 9)-(line 3301,col 80)",
      "(line 3302,col 9)-(line 3302,col 77)",
      "(line 3303,col 9)-(line 3303,col 76)",
      "(line 3304,col 9)-(line 3304,col 78)",
      "(line 3305,col 9)-(line 3305,col 77)",
      "(line 3306,col 9)-(line 3306,col 77)",
      "(line 3307,col 9)-(line 3307,col 79)",
      "(line 3308,col 9)-(line 3308,col 78)",
      "(line 3309,col 9)-(line 3309,col 80)",
      "(line 3310,col 9)-(line 3310,col 81)",
      "(line 3311,col 9)-(line 3311,col 78)",
      "(line 3312,col 9)-(line 3312,col 77)",
      "(line 3313,col 9)-(line 3313,col 79)",
      "(line 3314,col 9)-(line 3314,col 78)",
      "(line 3315,col 9)-(line 3315,col 78)",
      "(line 3316,col 9)-(line 3316,col 80)",
      "(line 3317,col 9)-(line 3317,col 79)",
      "(line 3318,col 9)-(line 3318,col 77)",
      "(line 3319,col 9)-(line 3319,col 78)",
      "(line 3320,col 9)-(line 3320,col 75)",
      "(line 3321,col 9)-(line 3321,col 74)",
      "(line 3322,col 9)-(line 3322,col 76)",
      "(line 3323,col 9)-(line 3323,col 75)",
      "(line 3324,col 9)-(line 3324,col 75)",
      "(line 3325,col 9)-(line 3325,col 77)",
      "(line 3326,col 9)-(line 3326,col 76)",
      "(line 3327,col 9)-(line 3327,col 76)",
      "(line 3328,col 9)-(line 3328,col 77)",
      "(line 3329,col 9)-(line 3329,col 74)",
      "(line 3330,col 9)-(line 3330,col 73)",
      "(line 3331,col 9)-(line 3331,col 75)",
      "(line 3332,col 9)-(line 3332,col 74)",
      "(line 3333,col 9)-(line 3333,col 74)",
      "(line 3334,col 9)-(line 3334,col 76)",
      "(line 3335,col 9)-(line 3335,col 75)",
      "(line 3336,col 9)-(line 3336,col 78)",
      "(line 3337,col 9)-(line 3337,col 79)",
      "(line 3338,col 9)-(line 3338,col 76)",
      "(line 3339,col 9)-(line 3339,col 75)",
      "(line 3340,col 9)-(line 3340,col 77)",
      "(line 3341,col 9)-(line 3341,col 76)",
      "(line 3342,col 9)-(line 3342,col 76)",
      "(line 3343,col 9)-(line 3343,col 78)",
      "(line 3344,col 9)-(line 3344,col 77)",
      "(line 3345,col 9)-(line 3345,col 77)",
      "(line 3346,col 9)-(line 3346,col 78)",
      "(line 3347,col 9)-(line 3347,col 75)",
      "(line 3348,col 9)-(line 3348,col 74)",
      "(line 3349,col 9)-(line 3349,col 76)",
      "(line 3350,col 9)-(line 3350,col 75)",
      "(line 3351,col 9)-(line 3351,col 75)",
      "(line 3352,col 9)-(line 3352,col 77)",
      "(line 3353,col 9)-(line 3353,col 76)",
      "(line 3354,col 9)-(line 3354,col 77)",
      "(line 3355,col 9)-(line 3355,col 78)",
      "(line 3356,col 9)-(line 3356,col 75)",
      "(line 3357,col 9)-(line 3357,col 74)",
      "(line 3358,col 9)-(line 3358,col 76)",
      "(line 3359,col 9)-(line 3359,col 75)",
      "(line 3360,col 9)-(line 3360,col 75)",
      "(line 3361,col 9)-(line 3361,col 77)",
      "(line 3362,col 9)-(line 3362,col 76)",
      "(line 3363,col 9)-(line 3363,col 79)",
      "(line 3364,col 9)-(line 3364,col 80)",
      "(line 3365,col 9)-(line 3365,col 77)",
      "(line 3366,col 9)-(line 3366,col 76)",
      "(line 3367,col 9)-(line 3367,col 78)",
      "(line 3368,col 9)-(line 3368,col 77)",
      "(line 3369,col 9)-(line 3369,col 77)",
      "(line 3370,col 9)-(line 3370,col 79)",
      "(line 3371,col 9)-(line 3371,col 78)",
      "(line 3372,col 9)-(line 3372,col 78)",
      "(line 3373,col 9)-(line 3373,col 79)",
      "(line 3374,col 9)-(line 3374,col 76)",
      "(line 3375,col 9)-(line 3375,col 75)",
      "(line 3376,col 9)-(line 3376,col 77)",
      "(line 3377,col 9)-(line 3377,col 76)",
      "(line 3378,col 9)-(line 3378,col 76)",
      "(line 3379,col 9)-(line 3379,col 78)",
      "(line 3380,col 9)-(line 3380,col 77)",
      "(line 3381,col 9)-(line 3381,col 79)",
      "(line 3382,col 9)-(line 3382,col 80)",
      "(line 3383,col 9)-(line 3383,col 77)",
      "(line 3384,col 9)-(line 3384,col 76)",
      "(line 3385,col 9)-(line 3385,col 78)",
      "(line 3386,col 9)-(line 3386,col 77)",
      "(line 3387,col 9)-(line 3387,col 77)",
      "(line 3388,col 9)-(line 3388,col 79)",
      "(line 3389,col 9)-(line 3389,col 78)",
      "(line 3390,col 9)-(line 3390,col 80)",
      "(line 3391,col 9)-(line 3391,col 81)",
      "(line 3392,col 9)-(line 3392,col 78)",
      "(line 3393,col 9)-(line 3393,col 77)",
      "(line 3394,col 9)-(line 3394,col 79)",
      "(line 3395,col 9)-(line 3395,col 78)",
      "(line 3396,col 9)-(line 3396,col 78)",
      "(line 3397,col 9)-(line 3397,col 80)",
      "(line 3398,col 9)-(line 3398,col 79)",
      "(line 3399,col 9)-(line 3399,col 77)",
      "(line 3400,col 9)-(line 3400,col 78)",
      "(line 3401,col 9)-(line 3401,col 75)",
      "(line 3402,col 9)-(line 3402,col 74)",
      "(line 3403,col 9)-(line 3403,col 76)",
      "(line 3404,col 9)-(line 3404,col 75)",
      "(line 3405,col 9)-(line 3405,col 75)",
      "(line 3406,col 9)-(line 3406,col 77)",
      "(line 3407,col 9)-(line 3407,col 76)",
      "(line 3408,col 9)-(line 3408,col 76)",
      "(line 3409,col 9)-(line 3409,col 77)",
      "(line 3410,col 9)-(line 3410,col 74)",
      "(line 3411,col 9)-(line 3411,col 73)",
      "(line 3412,col 9)-(line 3412,col 75)",
      "(line 3413,col 9)-(line 3413,col 74)",
      "(line 3414,col 9)-(line 3414,col 74)",
      "(line 3415,col 9)-(line 3415,col 76)",
      "(line 3416,col 9)-(line 3416,col 75)",
      "(line 3417,col 9)-(line 3417,col 78)",
      "(line 3418,col 9)-(line 3418,col 79)",
      "(line 3419,col 9)-(line 3419,col 76)",
      "(line 3420,col 9)-(line 3420,col 75)",
      "(line 3421,col 9)-(line 3421,col 77)",
      "(line 3422,col 9)-(line 3422,col 76)",
      "(line 3423,col 9)-(line 3423,col 76)",
      "(line 3424,col 9)-(line 3424,col 78)",
      "(line 3425,col 9)-(line 3425,col 77)",
      "(line 3426,col 9)-(line 3426,col 77)",
      "(line 3427,col 9)-(line 3427,col 78)",
      "(line 3428,col 9)-(line 3428,col 75)",
      "(line 3429,col 9)-(line 3429,col 74)",
      "(line 3430,col 9)-(line 3430,col 76)",
      "(line 3431,col 9)-(line 3431,col 75)",
      "(line 3432,col 9)-(line 3432,col 75)",
      "(line 3433,col 9)-(line 3433,col 77)",
      "(line 3434,col 9)-(line 3434,col 76)",
      "(line 3435,col 9)-(line 3435,col 77)",
      "(line 3436,col 9)-(line 3436,col 78)",
      "(line 3437,col 9)-(line 3437,col 75)",
      "(line 3438,col 9)-(line 3438,col 74)",
      "(line 3439,col 9)-(line 3439,col 76)",
      "(line 3440,col 9)-(line 3440,col 75)",
      "(line 3441,col 9)-(line 3441,col 75)",
      "(line 3442,col 9)-(line 3442,col 77)",
      "(line 3443,col 9)-(line 3443,col 76)",
      "(line 3444,col 9)-(line 3444,col 79)",
      "(line 3445,col 9)-(line 3445,col 80)",
      "(line 3446,col 9)-(line 3446,col 77)",
      "(line 3447,col 9)-(line 3447,col 76)",
      "(line 3448,col 9)-(line 3448,col 78)",
      "(line 3449,col 9)-(line 3449,col 77)",
      "(line 3450,col 9)-(line 3450,col 77)",
      "(line 3451,col 9)-(line 3451,col 79)",
      "(line 3452,col 9)-(line 3452,col 78)",
      "(line 3453,col 9)-(line 3453,col 78)",
      "(line 3454,col 9)-(line 3454,col 79)",
      "(line 3455,col 9)-(line 3455,col 76)",
      "(line 3456,col 9)-(line 3456,col 75)",
      "(line 3457,col 9)-(line 3457,col 77)",
      "(line 3458,col 9)-(line 3458,col 76)",
      "(line 3459,col 9)-(line 3459,col 76)",
      "(line 3460,col 9)-(line 3460,col 78)",
      "(line 3461,col 9)-(line 3461,col 77)",
      "(line 3462,col 9)-(line 3462,col 78)",
      "(line 3463,col 9)-(line 3463,col 79)",
      "(line 3464,col 9)-(line 3464,col 76)",
      "(line 3465,col 9)-(line 3465,col 75)",
      "(line 3466,col 9)-(line 3466,col 77)",
      "(line 3467,col 9)-(line 3467,col 76)",
      "(line 3468,col 9)-(line 3468,col 76)",
      "(line 3469,col 9)-(line 3469,col 78)",
      "(line 3470,col 9)-(line 3470,col 77)",
      "(line 3471,col 9)-(line 3471,col 79)",
      "(line 3472,col 9)-(line 3472,col 80)",
      "(line 3473,col 9)-(line 3473,col 77)",
      "(line 3474,col 9)-(line 3474,col 76)",
      "(line 3475,col 9)-(line 3475,col 78)",
      "(line 3476,col 9)-(line 3476,col 77)",
      "(line 3477,col 9)-(line 3477,col 77)",
      "(line 3478,col 9)-(line 3478,col 79)",
      "(line 3479,col 9)-(line 3479,col 78)",
      "(line 3480,col 9)-(line 3480,col 76)",
      "(line 3481,col 9)-(line 3481,col 77)",
      "(line 3482,col 9)-(line 3482,col 74)",
      "(line 3483,col 9)-(line 3483,col 73)",
      "(line 3484,col 9)-(line 3484,col 75)",
      "(line 3485,col 9)-(line 3485,col 74)",
      "(line 3486,col 9)-(line 3486,col 74)",
      "(line 3487,col 9)-(line 3487,col 76)",
      "(line 3488,col 9)-(line 3488,col 75)",
      "(line 3489,col 9)-(line 3489,col 75)",
      "(line 3490,col 9)-(line 3490,col 76)",
      "(line 3491,col 9)-(line 3491,col 73)",
      "(line 3492,col 9)-(line 3492,col 72)",
      "(line 3493,col 9)-(line 3493,col 74)",
      "(line 3494,col 9)-(line 3494,col 73)",
      "(line 3495,col 9)-(line 3495,col 73)",
      "(line 3496,col 9)-(line 3496,col 75)",
      "(line 3497,col 9)-(line 3497,col 74)",
      "(line 3498,col 9)-(line 3498,col 77)",
      "(line 3499,col 9)-(line 3499,col 78)",
      "(line 3500,col 9)-(line 3500,col 75)",
      "(line 3501,col 9)-(line 3501,col 74)",
      "(line 3502,col 9)-(line 3502,col 76)",
      "(line 3503,col 9)-(line 3503,col 75)",
      "(line 3504,col 9)-(line 3504,col 75)",
      "(line 3505,col 9)-(line 3505,col 77)",
      "(line 3506,col 9)-(line 3506,col 76)",
      "(line 3507,col 9)-(line 3507,col 76)",
      "(line 3508,col 9)-(line 3508,col 77)",
      "(line 3509,col 9)-(line 3509,col 74)",
      "(line 3510,col 9)-(line 3510,col 73)",
      "(line 3511,col 9)-(line 3511,col 75)",
      "(line 3512,col 9)-(line 3512,col 74)",
      "(line 3513,col 9)-(line 3513,col 74)",
      "(line 3514,col 9)-(line 3514,col 76)",
      "(line 3515,col 9)-(line 3515,col 75)",
      "(line 3516,col 9)-(line 3516,col 76)",
      "(line 3517,col 9)-(line 3517,col 77)",
      "(line 3518,col 9)-(line 3518,col 74)",
      "(line 3519,col 9)-(line 3519,col 73)",
      "(line 3520,col 9)-(line 3520,col 75)",
      "(line 3521,col 9)-(line 3521,col 74)",
      "(line 3522,col 9)-(line 3522,col 74)",
      "(line 3523,col 9)-(line 3523,col 76)",
      "(line 3524,col 9)-(line 3524,col 75)",
      "(line 3525,col 9)-(line 3525,col 78)",
      "(line 3526,col 9)-(line 3526,col 79)",
      "(line 3527,col 9)-(line 3527,col 76)",
      "(line 3528,col 9)-(line 3528,col 75)",
      "(line 3529,col 9)-(line 3529,col 77)",
      "(line 3530,col 9)-(line 3530,col 76)",
      "(line 3531,col 9)-(line 3531,col 76)",
      "(line 3532,col 9)-(line 3532,col 78)",
      "(line 3533,col 9)-(line 3533,col 77)",
      "(line 3534,col 9)-(line 3534,col 77)",
      "(line 3535,col 9)-(line 3535,col 78)",
      "(line 3536,col 9)-(line 3536,col 75)",
      "(line 3537,col 9)-(line 3537,col 74)",
      "(line 3538,col 9)-(line 3538,col 76)",
      "(line 3539,col 9)-(line 3539,col 75)",
      "(line 3540,col 9)-(line 3540,col 75)",
      "(line 3541,col 9)-(line 3541,col 77)",
      "(line 3542,col 9)-(line 3542,col 76)",
      "(line 3543,col 9)-(line 3543,col 79)",
      "(line 3544,col 9)-(line 3544,col 80)",
      "(line 3545,col 9)-(line 3545,col 77)",
      "(line 3546,col 9)-(line 3546,col 76)",
      "(line 3547,col 9)-(line 3547,col 78)",
      "(line 3548,col 9)-(line 3548,col 77)",
      "(line 3549,col 9)-(line 3549,col 77)",
      "(line 3550,col 9)-(line 3550,col 79)",
      "(line 3551,col 9)-(line 3551,col 78)",
      "(line 3552,col 9)-(line 3552,col 80)",
      "(line 3553,col 9)-(line 3553,col 81)",
      "(line 3554,col 9)-(line 3554,col 78)",
      "(line 3555,col 9)-(line 3555,col 77)",
      "(line 3556,col 9)-(line 3556,col 79)",
      "(line 3557,col 9)-(line 3557,col 78)",
      "(line 3558,col 9)-(line 3558,col 78)",
      "(line 3559,col 9)-(line 3559,col 80)",
      "(line 3560,col 9)-(line 3560,col 79)",
      "(line 3561,col 9)-(line 3561,col 77)",
      "(line 3562,col 9)-(line 3562,col 78)",
      "(line 3563,col 9)-(line 3563,col 75)",
      "(line 3564,col 9)-(line 3564,col 74)",
      "(line 3565,col 9)-(line 3565,col 76)",
      "(line 3566,col 9)-(line 3566,col 75)",
      "(line 3567,col 9)-(line 3567,col 75)",
      "(line 3568,col 9)-(line 3568,col 77)",
      "(line 3569,col 9)-(line 3569,col 76)",
      "(line 3570,col 9)-(line 3570,col 76)",
      "(line 3571,col 9)-(line 3571,col 77)",
      "(line 3572,col 9)-(line 3572,col 74)",
      "(line 3573,col 9)-(line 3573,col 73)",
      "(line 3574,col 9)-(line 3574,col 75)",
      "(line 3575,col 9)-(line 3575,col 74)",
      "(line 3576,col 9)-(line 3576,col 74)",
      "(line 3577,col 9)-(line 3577,col 76)",
      "(line 3578,col 9)-(line 3578,col 75)",
      "(line 3579,col 9)-(line 3579,col 78)",
      "(line 3580,col 9)-(line 3580,col 79)",
      "(line 3581,col 9)-(line 3581,col 76)",
      "(line 3582,col 9)-(line 3582,col 75)",
      "(line 3583,col 9)-(line 3583,col 77)",
      "(line 3584,col 9)-(line 3584,col 76)",
      "(line 3585,col 9)-(line 3585,col 76)",
      "(line 3586,col 9)-(line 3586,col 78)",
      "(line 3587,col 9)-(line 3587,col 77)",
      "(line 3588,col 9)-(line 3588,col 77)",
      "(line 3589,col 9)-(line 3589,col 78)",
      "(line 3590,col 9)-(line 3590,col 75)",
      "(line 3591,col 9)-(line 3591,col 74)",
      "(line 3592,col 9)-(line 3592,col 76)",
      "(line 3593,col 9)-(line 3593,col 75)",
      "(line 3594,col 9)-(line 3594,col 75)",
      "(line 3595,col 9)-(line 3595,col 77)",
      "(line 3596,col 9)-(line 3596,col 76)",
      "(line 3597,col 9)-(line 3597,col 77)",
      "(line 3598,col 9)-(line 3598,col 78)",
      "(line 3599,col 9)-(line 3599,col 75)",
      "(line 3600,col 9)-(line 3600,col 74)",
      "(line 3601,col 9)-(line 3601,col 76)",
      "(line 3602,col 9)-(line 3602,col 75)",
      "(line 3603,col 9)-(line 3603,col 75)",
      "(line 3604,col 9)-(line 3604,col 77)",
      "(line 3605,col 9)-(line 3605,col 76)",
      "(line 3606,col 9)-(line 3606,col 79)",
      "(line 3607,col 9)-(line 3607,col 80)",
      "(line 3608,col 9)-(line 3608,col 77)",
      "(line 3609,col 9)-(line 3609,col 76)",
      "(line 3610,col 9)-(line 3610,col 78)",
      "(line 3611,col 9)-(line 3611,col 77)",
      "(line 3612,col 9)-(line 3612,col 77)",
      "(line 3613,col 9)-(line 3613,col 79)",
      "(line 3614,col 9)-(line 3614,col 78)",
      "(line 3615,col 9)-(line 3615,col 78)",
      "(line 3616,col 9)-(line 3616,col 79)",
      "(line 3617,col 9)-(line 3617,col 76)",
      "(line 3618,col 9)-(line 3618,col 75)",
      "(line 3619,col 9)-(line 3619,col 77)",
      "(line 3620,col 9)-(line 3620,col 76)",
      "(line 3621,col 9)-(line 3621,col 76)",
      "(line 3622,col 9)-(line 3622,col 78)",
      "(line 3623,col 9)-(line 3623,col 77)",
      "(line 3624,col 9)-(line 3624,col 76)",
      "(line 3625,col 9)-(line 3625,col 77)",
      "(line 3626,col 9)-(line 3626,col 74)",
      "(line 3627,col 9)-(line 3627,col 73)",
      "(line 3628,col 9)-(line 3628,col 75)",
      "(line 3629,col 9)-(line 3629,col 74)",
      "(line 3630,col 9)-(line 3630,col 74)",
      "(line 3631,col 9)-(line 3631,col 76)",
      "(line 3632,col 9)-(line 3632,col 75)",
      "(line 3633,col 9)-(line 3633,col 77)",
      "(line 3634,col 9)-(line 3634,col 78)",
      "(line 3635,col 9)-(line 3635,col 75)",
      "(line 3636,col 9)-(line 3636,col 74)",
      "(line 3637,col 9)-(line 3637,col 76)",
      "(line 3638,col 9)-(line 3638,col 75)",
      "(line 3639,col 9)-(line 3639,col 75)",
      "(line 3640,col 9)-(line 3640,col 77)",
      "(line 3641,col 9)-(line 3641,col 76)",
      "(line 3642,col 9)-(line 3642,col 74)",
      "(line 3643,col 9)-(line 3643,col 75)",
      "(line 3644,col 9)-(line 3644,col 72)",
      "(line 3645,col 9)-(line 3645,col 71)",
      "(line 3646,col 9)-(line 3646,col 73)",
      "(line 3647,col 9)-(line 3647,col 72)",
      "(line 3648,col 9)-(line 3648,col 72)",
      "(line 3649,col 9)-(line 3649,col 74)",
      "(line 3650,col 9)-(line 3650,col 73)",
      "(line 3651,col 9)-(line 3651,col 73)",
      "(line 3652,col 9)-(line 3652,col 74)",
      "(line 3653,col 9)-(line 3653,col 71)",
      "(line 3654,col 9)-(line 3654,col 70)",
      "(line 3655,col 9)-(line 3655,col 72)",
      "(line 3656,col 9)-(line 3656,col 71)",
      "(line 3657,col 9)-(line 3657,col 71)",
      "(line 3658,col 9)-(line 3658,col 73)",
      "(line 3659,col 9)-(line 3659,col 72)",
      "(line 3660,col 9)-(line 3660,col 75)",
      "(line 3661,col 9)-(line 3661,col 76)",
      "(line 3662,col 9)-(line 3662,col 73)",
      "(line 3663,col 9)-(line 3663,col 72)",
      "(line 3664,col 9)-(line 3664,col 74)",
      "(line 3665,col 9)-(line 3665,col 73)",
      "(line 3666,col 9)-(line 3666,col 73)",
      "(line 3667,col 9)-(line 3667,col 75)",
      "(line 3668,col 9)-(line 3668,col 74)",
      "(line 3669,col 9)-(line 3669,col 74)",
      "(line 3670,col 9)-(line 3670,col 75)",
      "(line 3671,col 9)-(line 3671,col 72)",
      "(line 3672,col 9)-(line 3672,col 71)",
      "(line 3673,col 9)-(line 3673,col 73)",
      "(line 3674,col 9)-(line 3674,col 72)",
      "(line 3675,col 9)-(line 3675,col 72)",
      "(line 3676,col 9)-(line 3676,col 74)",
      "(line 3677,col 9)-(line 3677,col 73)",
      "(line 3678,col 9)-(line 3678,col 74)",
      "(line 3679,col 9)-(line 3679,col 75)",
      "(line 3680,col 9)-(line 3680,col 72)",
      "(line 3681,col 9)-(line 3681,col 71)",
      "(line 3682,col 9)-(line 3682,col 73)",
      "(line 3683,col 9)-(line 3683,col 72)",
      "(line 3684,col 9)-(line 3684,col 72)",
      "(line 3685,col 9)-(line 3685,col 74)",
      "(line 3686,col 9)-(line 3686,col 73)",
      "(line 3687,col 9)-(line 3687,col 76)",
      "(line 3688,col 9)-(line 3688,col 77)",
      "(line 3689,col 9)-(line 3689,col 74)",
      "(line 3690,col 9)-(line 3690,col 73)",
      "(line 3691,col 9)-(line 3691,col 75)",
      "(line 3692,col 9)-(line 3692,col 74)",
      "(line 3693,col 9)-(line 3693,col 74)",
      "(line 3694,col 9)-(line 3694,col 76)",
      "(line 3695,col 9)-(line 3695,col 75)",
      "(line 3696,col 9)-(line 3696,col 75)",
      "(line 3697,col 9)-(line 3697,col 76)",
      "(line 3698,col 9)-(line 3698,col 73)",
      "(line 3699,col 9)-(line 3699,col 72)",
      "(line 3700,col 9)-(line 3700,col 74)",
      "(line 3701,col 9)-(line 3701,col 73)",
      "(line 3702,col 9)-(line 3702,col 73)",
      "(line 3703,col 9)-(line 3703,col 75)",
      "(line 3704,col 9)-(line 3704,col 74)",
      "(line 3705,col 9)-(line 3705,col 77)",
      "(line 3706,col 9)-(line 3706,col 78)",
      "(line 3707,col 9)-(line 3707,col 75)",
      "(line 3708,col 9)-(line 3708,col 74)",
      "(line 3709,col 9)-(line 3709,col 76)",
      "(line 3710,col 9)-(line 3710,col 75)",
      "(line 3711,col 9)-(line 3711,col 75)",
      "(line 3712,col 9)-(line 3712,col 77)",
      "(line 3713,col 9)-(line 3713,col 76)",
      "(line 3714,col 9)-(line 3714,col 78)",
      "(line 3715,col 9)-(line 3715,col 79)",
      "(line 3716,col 9)-(line 3716,col 76)",
      "(line 3717,col 9)-(line 3717,col 75)",
      "(line 3718,col 9)-(line 3718,col 77)",
      "(line 3719,col 9)-(line 3719,col 76)",
      "(line 3720,col 9)-(line 3720,col 76)",
      "(line 3721,col 9)-(line 3721,col 78)",
      "(line 3722,col 9)-(line 3722,col 77)",
      "(line 3723,col 9)-(line 3723,col 75)",
      "(line 3724,col 9)-(line 3724,col 76)",
      "(line 3725,col 9)-(line 3725,col 73)",
      "(line 3726,col 9)-(line 3726,col 72)",
      "(line 3727,col 9)-(line 3727,col 74)",
      "(line 3728,col 9)-(line 3728,col 73)",
      "(line 3729,col 9)-(line 3729,col 73)",
      "(line 3730,col 9)-(line 3730,col 75)",
      "(line 3731,col 9)-(line 3731,col 74)",
      "(line 3732,col 9)-(line 3732,col 74)",
      "(line 3733,col 9)-(line 3733,col 75)",
      "(line 3734,col 9)-(line 3734,col 72)",
      "(line 3735,col 9)-(line 3735,col 71)",
      "(line 3736,col 9)-(line 3736,col 73)",
      "(line 3737,col 9)-(line 3737,col 72)",
      "(line 3738,col 9)-(line 3738,col 72)",
      "(line 3739,col 9)-(line 3739,col 74)",
      "(line 3740,col 9)-(line 3740,col 73)",
      "(line 3741,col 9)-(line 3741,col 76)",
      "(line 3742,col 9)-(line 3742,col 77)",
      "(line 3743,col 9)-(line 3743,col 74)",
      "(line 3744,col 9)-(line 3744,col 73)",
      "(line 3745,col 9)-(line 3745,col 75)",
      "(line 3746,col 9)-(line 3746,col 74)",
      "(line 3747,col 9)-(line 3747,col 74)",
      "(line 3748,col 9)-(line 3748,col 76)",
      "(line 3749,col 9)-(line 3749,col 75)",
      "(line 3750,col 9)-(line 3750,col 75)",
      "(line 3751,col 9)-(line 3751,col 76)",
      "(line 3752,col 9)-(line 3752,col 73)",
      "(line 3753,col 9)-(line 3753,col 72)",
      "(line 3754,col 9)-(line 3754,col 74)",
      "(line 3755,col 9)-(line 3755,col 73)",
      "(line 3756,col 9)-(line 3756,col 73)",
      "(line 3757,col 9)-(line 3757,col 75)",
      "(line 3758,col 9)-(line 3758,col 74)",
      "(line 3759,col 9)-(line 3759,col 75)",
      "(line 3760,col 9)-(line 3760,col 76)",
      "(line 3761,col 9)-(line 3761,col 73)",
      "(line 3762,col 9)-(line 3762,col 72)",
      "(line 3763,col 9)-(line 3763,col 74)",
      "(line 3764,col 9)-(line 3764,col 73)",
      "(line 3765,col 9)-(line 3765,col 73)",
      "(line 3766,col 9)-(line 3766,col 75)",
      "(line 3767,col 9)-(line 3767,col 74)",
      "(line 3768,col 9)-(line 3768,col 77)",
      "(line 3769,col 9)-(line 3769,col 78)",
      "(line 3770,col 9)-(line 3770,col 75)",
      "(line 3771,col 9)-(line 3771,col 74)",
      "(line 3772,col 9)-(line 3772,col 76)",
      "(line 3773,col 9)-(line 3773,col 75)",
      "(line 3774,col 9)-(line 3774,col 75)",
      "(line 3775,col 9)-(line 3775,col 77)",
      "(line 3776,col 9)-(line 3776,col 76)",
      "(line 3777,col 9)-(line 3777,col 76)",
      "(line 3778,col 9)-(line 3778,col 77)",
      "(line 3779,col 9)-(line 3779,col 74)",
      "(line 3780,col 9)-(line 3780,col 73)",
      "(line 3781,col 9)-(line 3781,col 75)",
      "(line 3782,col 9)-(line 3782,col 74)",
      "(line 3783,col 9)-(line 3783,col 74)",
      "(line 3784,col 9)-(line 3784,col 76)",
      "(line 3785,col 9)-(line 3785,col 75)",
      "(line 3786,col 9)-(line 3786,col 78)",
      "(line 3787,col 9)-(line 3787,col 79)",
      "(line 3788,col 9)-(line 3788,col 76)",
      "(line 3789,col 9)-(line 3789,col 75)",
      "(line 3790,col 9)-(line 3790,col 77)",
      "(line 3791,col 9)-(line 3791,col 76)",
      "(line 3792,col 9)-(line 3792,col 76)",
      "(line 3793,col 9)-(line 3793,col 78)",
      "(line 3794,col 9)-(line 3794,col 77)",
      "(line 3795,col 9)-(line 3795,col 79)",
      "(line 3796,col 9)-(line 3796,col 80)",
      "(line 3797,col 9)-(line 3797,col 77)",
      "(line 3798,col 9)-(line 3798,col 76)",
      "(line 3799,col 9)-(line 3799,col 78)",
      "(line 3800,col 9)-(line 3800,col 77)",
      "(line 3801,col 9)-(line 3801,col 77)",
      "(line 3802,col 9)-(line 3802,col 79)",
      "(line 3803,col 9)-(line 3803,col 78)",
      "(line 3804,col 9)-(line 3804,col 76)",
      "(line 3805,col 9)-(line 3805,col 77)",
      "(line 3806,col 9)-(line 3806,col 74)",
      "(line 3807,col 9)-(line 3807,col 73)",
      "(line 3808,col 9)-(line 3808,col 75)",
      "(line 3809,col 9)-(line 3809,col 74)",
      "(line 3810,col 9)-(line 3810,col 74)",
      "(line 3811,col 9)-(line 3811,col 76)",
      "(line 3812,col 9)-(line 3812,col 75)",
      "(line 3813,col 9)-(line 3813,col 75)",
      "(line 3814,col 9)-(line 3814,col 76)",
      "(line 3815,col 9)-(line 3815,col 73)",
      "(line 3816,col 9)-(line 3816,col 72)",
      "(line 3817,col 9)-(line 3817,col 74)",
      "(line 3818,col 9)-(line 3818,col 73)",
      "(line 3819,col 9)-(line 3819,col 73)",
      "(line 3820,col 9)-(line 3820,col 75)",
      "(line 3821,col 9)-(line 3821,col 74)",
      "(line 3822,col 9)-(line 3822,col 77)",
      "(line 3823,col 9)-(line 3823,col 78)",
      "(line 3824,col 9)-(line 3824,col 75)",
      "(line 3825,col 9)-(line 3825,col 74)",
      "(line 3826,col 9)-(line 3826,col 76)",
      "(line 3827,col 9)-(line 3827,col 75)",
      "(line 3828,col 9)-(line 3828,col 75)",
      "(line 3829,col 9)-(line 3829,col 77)",
      "(line 3830,col 9)-(line 3830,col 76)",
      "(line 3831,col 9)-(line 3831,col 76)",
      "(line 3832,col 9)-(line 3832,col 77)",
      "(line 3833,col 9)-(line 3833,col 74)",
      "(line 3834,col 9)-(line 3834,col 73)",
      "(line 3835,col 9)-(line 3835,col 75)",
      "(line 3836,col 9)-(line 3836,col 74)",
      "(line 3837,col 9)-(line 3837,col 74)",
      "(line 3838,col 9)-(line 3838,col 76)",
      "(line 3839,col 9)-(line 3839,col 75)",
      "(line 3840,col 9)-(line 3840,col 76)",
      "(line 3841,col 9)-(line 3841,col 77)",
      "(line 3842,col 9)-(line 3842,col 74)",
      "(line 3843,col 9)-(line 3843,col 73)",
      "(line 3844,col 9)-(line 3844,col 75)",
      "(line 3845,col 9)-(line 3845,col 74)",
      "(line 3846,col 9)-(line 3846,col 74)",
      "(line 3847,col 9)-(line 3847,col 76)",
      "(line 3848,col 9)-(line 3848,col 75)",
      "(line 3849,col 9)-(line 3849,col 78)",
      "(line 3850,col 9)-(line 3850,col 79)",
      "(line 3851,col 9)-(line 3851,col 76)",
      "(line 3852,col 9)-(line 3852,col 75)",
      "(line 3853,col 9)-(line 3853,col 77)",
      "(line 3854,col 9)-(line 3854,col 76)",
      "(line 3855,col 9)-(line 3855,col 76)",
      "(line 3856,col 9)-(line 3856,col 78)",
      "(line 3857,col 9)-(line 3857,col 77)",
      "(line 3858,col 9)-(line 3858,col 77)",
      "(line 3859,col 9)-(line 3859,col 78)",
      "(line 3860,col 9)-(line 3860,col 75)",
      "(line 3861,col 9)-(line 3861,col 74)",
      "(line 3862,col 9)-(line 3862,col 76)",
      "(line 3863,col 9)-(line 3863,col 75)",
      "(line 3864,col 9)-(line 3864,col 75)",
      "(line 3865,col 9)-(line 3865,col 77)",
      "(line 3866,col 9)-(line 3866,col 76)",
      "(line 3867,col 9)-(line 3867,col 79)",
      "(line 3868,col 9)-(line 3868,col 80)",
      "(line 3869,col 9)-(line 3869,col 77)",
      "(line 3870,col 9)-(line 3870,col 76)",
      "(line 3871,col 9)-(line 3871,col 78)",
      "(line 3872,col 9)-(line 3872,col 77)",
      "(line 3873,col 9)-(line 3873,col 77)",
      "(line 3874,col 9)-(line 3874,col 79)",
      "(line 3875,col 9)-(line 3875,col 78)",
      "(line 3876,col 9)-(line 3876,col 80)",
      "(line 3877,col 9)-(line 3877,col 81)",
      "(line 3878,col 9)-(line 3878,col 78)",
      "(line 3879,col 9)-(line 3879,col 77)",
      "(line 3880,col 9)-(line 3880,col 79)",
      "(line 3881,col 9)-(line 3881,col 78)",
      "(line 3882,col 9)-(line 3882,col 78)",
      "(line 3883,col 9)-(line 3883,col 80)",
      "(line 3884,col 9)-(line 3884,col 79)",
      "(line 3885,col 9)-(line 3885,col 77)",
      "(line 3886,col 9)-(line 3886,col 78)",
      "(line 3887,col 9)-(line 3887,col 75)",
      "(line 3888,col 9)-(line 3888,col 74)",
      "(line 3889,col 9)-(line 3889,col 76)",
      "(line 3890,col 9)-(line 3890,col 75)",
      "(line 3891,col 9)-(line 3891,col 75)",
      "(line 3892,col 9)-(line 3892,col 77)",
      "(line 3893,col 9)-(line 3893,col 76)",
      "(line 3894,col 9)-(line 3894,col 76)",
      "(line 3895,col 9)-(line 3895,col 77)",
      "(line 3896,col 9)-(line 3896,col 74)",
      "(line 3897,col 9)-(line 3897,col 73)",
      "(line 3898,col 9)-(line 3898,col 75)",
      "(line 3899,col 9)-(line 3899,col 74)",
      "(line 3900,col 9)-(line 3900,col 74)",
      "(line 3901,col 9)-(line 3901,col 76)",
      "(line 3902,col 9)-(line 3902,col 75)",
      "(line 3903,col 9)-(line 3903,col 78)",
      "(line 3904,col 9)-(line 3904,col 79)",
      "(line 3905,col 9)-(line 3905,col 76)",
      "(line 3906,col 9)-(line 3906,col 75)",
      "(line 3907,col 9)-(line 3907,col 77)",
      "(line 3908,col 9)-(line 3908,col 76)",
      "(line 3909,col 9)-(line 3909,col 76)",
      "(line 3910,col 9)-(line 3910,col 78)",
      "(line 3911,col 9)-(line 3911,col 77)",
      "(line 3912,col 9)-(line 3912,col 77)",
      "(line 3913,col 9)-(line 3913,col 78)",
      "(line 3914,col 9)-(line 3914,col 75)",
      "(line 3915,col 9)-(line 3915,col 74)",
      "(line 3916,col 9)-(line 3916,col 76)",
      "(line 3917,col 9)-(line 3917,col 75)",
      "(line 3918,col 9)-(line 3918,col 75)",
      "(line 3919,col 9)-(line 3919,col 77)",
      "(line 3920,col 9)-(line 3920,col 76)",
      "(line 3921,col 9)-(line 3921,col 77)",
      "(line 3922,col 9)-(line 3922,col 78)",
      "(line 3923,col 9)-(line 3923,col 75)",
      "(line 3924,col 9)-(line 3924,col 74)",
      "(line 3925,col 9)-(line 3925,col 76)",
      "(line 3926,col 9)-(line 3926,col 75)",
      "(line 3927,col 9)-(line 3927,col 75)",
      "(line 3928,col 9)-(line 3928,col 77)",
      "(line 3929,col 9)-(line 3929,col 76)",
      "(line 3930,col 9)-(line 3930,col 79)",
      "(line 3931,col 9)-(line 3931,col 80)",
      "(line 3932,col 9)-(line 3932,col 77)",
      "(line 3933,col 9)-(line 3933,col 76)",
      "(line 3934,col 9)-(line 3934,col 78)",
      "(line 3935,col 9)-(line 3935,col 77)",
      "(line 3936,col 9)-(line 3936,col 77)",
      "(line 3937,col 9)-(line 3937,col 79)",
      "(line 3938,col 9)-(line 3938,col 78)",
      "(line 3939,col 9)-(line 3939,col 78)",
      "(line 3940,col 9)-(line 3940,col 79)",
      "(line 3941,col 9)-(line 3941,col 76)",
      "(line 3942,col 9)-(line 3942,col 75)",
      "(line 3943,col 9)-(line 3943,col 77)",
      "(line 3944,col 9)-(line 3944,col 76)",
      "(line 3945,col 9)-(line 3945,col 76)",
      "(line 3946,col 9)-(line 3946,col 78)",
      "(line 3947,col 9)-(line 3947,col 77)",
      "(line 3948,col 9)-(line 3948,col 77)",
      "(line 3949,col 9)-(line 3949,col 78)",
      "(line 3950,col 9)-(line 3950,col 75)",
      "(line 3951,col 9)-(line 3951,col 74)",
      "(line 3952,col 9)-(line 3952,col 76)",
      "(line 3953,col 9)-(line 3953,col 75)",
      "(line 3954,col 9)-(line 3954,col 75)",
      "(line 3955,col 9)-(line 3955,col 77)",
      "(line 3956,col 9)-(line 3956,col 76)",
      "(line 3957,col 9)-(line 3957,col 78)",
      "(line 3958,col 9)-(line 3958,col 79)",
      "(line 3959,col 9)-(line 3959,col 76)",
      "(line 3960,col 9)-(line 3960,col 75)",
      "(line 3961,col 9)-(line 3961,col 77)",
      "(line 3962,col 9)-(line 3962,col 76)",
      "(line 3963,col 9)-(line 3963,col 76)",
      "(line 3964,col 9)-(line 3964,col 78)",
      "(line 3965,col 9)-(line 3965,col 77)",
      "(line 3966,col 9)-(line 3966,col 75)",
      "(line 3967,col 9)-(line 3967,col 76)",
      "(line 3968,col 9)-(line 3968,col 73)",
      "(line 3969,col 9)-(line 3969,col 72)",
      "(line 3970,col 9)-(line 3970,col 74)",
      "(line 3971,col 9)-(line 3971,col 73)",
      "(line 3972,col 9)-(line 3972,col 73)",
      "(line 3973,col 9)-(line 3973,col 75)",
      "(line 3974,col 9)-(line 3974,col 74)",
      "(line 3975,col 9)-(line 3975,col 74)",
      "(line 3976,col 9)-(line 3976,col 75)",
      "(line 3977,col 9)-(line 3977,col 72)",
      "(line 3978,col 9)-(line 3978,col 71)",
      "(line 3979,col 9)-(line 3979,col 73)",
      "(line 3980,col 9)-(line 3980,col 72)",
      "(line 3981,col 9)-(line 3981,col 72)",
      "(line 3982,col 9)-(line 3982,col 74)",
      "(line 3983,col 9)-(line 3983,col 73)",
      "(line 3984,col 9)-(line 3984,col 76)",
      "(line 3985,col 9)-(line 3985,col 77)",
      "(line 3986,col 9)-(line 3986,col 74)",
      "(line 3987,col 9)-(line 3987,col 73)",
      "(line 3988,col 9)-(line 3988,col 75)",
      "(line 3989,col 9)-(line 3989,col 74)",
      "(line 3990,col 9)-(line 3990,col 74)",
      "(line 3991,col 9)-(line 3991,col 76)",
      "(line 3992,col 9)-(line 3992,col 75)",
      "(line 3993,col 9)-(line 3993,col 75)",
      "(line 3994,col 9)-(line 3994,col 76)",
      "(line 3995,col 9)-(line 3995,col 73)",
      "(line 3996,col 9)-(line 3996,col 72)",
      "(line 3997,col 9)-(line 3997,col 74)",
      "(line 3998,col 9)-(line 3998,col 73)",
      "(line 3999,col 9)-(line 3999,col 73)",
      "(line 4000,col 9)-(line 4000,col 75)",
      "(line 4001,col 9)-(line 4001,col 74)",
      "(line 4002,col 9)-(line 4002,col 75)",
      "(line 4003,col 9)-(line 4003,col 76)",
      "(line 4004,col 9)-(line 4004,col 73)",
      "(line 4005,col 9)-(line 4005,col 72)",
      "(line 4006,col 9)-(line 4006,col 74)",
      "(line 4007,col 9)-(line 4007,col 73)",
      "(line 4008,col 9)-(line 4008,col 73)",
      "(line 4009,col 9)-(line 4009,col 75)",
      "(line 4010,col 9)-(line 4010,col 74)",
      "(line 4011,col 9)-(line 4011,col 77)",
      "(line 4012,col 9)-(line 4012,col 78)",
      "(line 4013,col 9)-(line 4013,col 75)",
      "(line 4014,col 9)-(line 4014,col 74)",
      "(line 4015,col 9)-(line 4015,col 76)",
      "(line 4016,col 9)-(line 4016,col 75)",
      "(line 4017,col 9)-(line 4017,col 75)",
      "(line 4018,col 9)-(line 4018,col 77)",
      "(line 4019,col 9)-(line 4019,col 76)",
      "(line 4020,col 9)-(line 4020,col 76)",
      "(line 4021,col 9)-(line 4021,col 77)",
      "(line 4022,col 9)-(line 4022,col 74)",
      "(line 4023,col 9)-(line 4023,col 73)",
      "(line 4024,col 9)-(line 4024,col 75)",
      "(line 4025,col 9)-(line 4025,col 74)",
      "(line 4026,col 9)-(line 4026,col 74)",
      "(line 4027,col 9)-(line 4027,col 76)",
      "(line 4028,col 9)-(line 4028,col 75)",
      "(line 4029,col 9)-(line 4029,col 76)",
      "(line 4030,col 9)-(line 4030,col 77)",
      "(line 4031,col 9)-(line 4031,col 74)",
      "(line 4032,col 9)-(line 4032,col 73)",
      "(line 4033,col 9)-(line 4033,col 75)",
      "(line 4034,col 9)-(line 4034,col 74)",
      "(line 4035,col 9)-(line 4035,col 74)",
      "(line 4036,col 9)-(line 4036,col 76)",
      "(line 4037,col 9)-(line 4037,col 75)",
      "(line 4038,col 9)-(line 4038,col 77)",
      "(line 4039,col 9)-(line 4039,col 78)",
      "(line 4040,col 9)-(line 4040,col 75)",
      "(line 4041,col 9)-(line 4041,col 74)",
      "(line 4042,col 9)-(line 4042,col 76)",
      "(line 4043,col 9)-(line 4043,col 75)",
      "(line 4044,col 9)-(line 4044,col 75)",
      "(line 4045,col 9)-(line 4045,col 77)",
      "(line 4046,col 9)-(line 4046,col 76)",
      "(line 4047,col 9)-(line 4047,col 74)",
      "(line 4048,col 9)-(line 4048,col 75)",
      "(line 4049,col 9)-(line 4049,col 72)",
      "(line 4050,col 9)-(line 4050,col 71)",
      "(line 4051,col 9)-(line 4051,col 73)",
      "(line 4052,col 9)-(line 4052,col 72)",
      "(line 4053,col 9)-(line 4053,col 72)",
      "(line 4054,col 9)-(line 4054,col 74)",
      "(line 4055,col 9)-(line 4055,col 73)",
      "(line 4056,col 9)-(line 4056,col 73)",
      "(line 4057,col 9)-(line 4057,col 74)",
      "(line 4058,col 9)-(line 4058,col 71)",
      "(line 4059,col 9)-(line 4059,col 70)",
      "(line 4060,col 9)-(line 4060,col 72)",
      "(line 4061,col 9)-(line 4061,col 71)",
      "(line 4062,col 9)-(line 4062,col 71)",
      "(line 4063,col 9)-(line 4063,col 73)",
      "(line 4064,col 9)-(line 4064,col 72)",
      "(line 4065,col 9)-(line 4065,col 75)",
      "(line 4066,col 9)-(line 4066,col 76)",
      "(line 4067,col 9)-(line 4067,col 73)",
      "(line 4068,col 9)-(line 4068,col 72)",
      "(line 4069,col 9)-(line 4069,col 74)",
      "(line 4070,col 9)-(line 4070,col 73)",
      "(line 4071,col 9)-(line 4071,col 73)",
      "(line 4072,col 9)-(line 4072,col 75)",
      "(line 4073,col 9)-(line 4073,col 74)",
      "(line 4074,col 9)-(line 4074,col 74)",
      "(line 4075,col 9)-(line 4075,col 75)",
      "(line 4076,col 9)-(line 4076,col 72)",
      "(line 4077,col 9)-(line 4077,col 71)",
      "(line 4078,col 9)-(line 4078,col 73)",
      "(line 4079,col 9)-(line 4079,col 72)",
      "(line 4080,col 9)-(line 4080,col 72)",
      "(line 4081,col 9)-(line 4081,col 74)",
      "(line 4082,col 9)-(line 4082,col 73)",
      "(line 4083,col 9)-(line 4083,col 74)",
      "(line 4084,col 9)-(line 4084,col 75)",
      "(line 4085,col 9)-(line 4085,col 72)",
      "(line 4086,col 9)-(line 4086,col 71)",
      "(line 4087,col 9)-(line 4087,col 73)",
      "(line 4088,col 9)-(line 4088,col 72)",
      "(line 4089,col 9)-(line 4089,col 72)",
      "(line 4090,col 9)-(line 4090,col 74)",
      "(line 4091,col 9)-(line 4091,col 73)",
      "(line 4092,col 9)-(line 4092,col 76)",
      "(line 4093,col 9)-(line 4093,col 77)",
      "(line 4094,col 9)-(line 4094,col 74)",
      "(line 4095,col 9)-(line 4095,col 73)",
      "(line 4096,col 9)-(line 4096,col 75)",
      "(line 4097,col 9)-(line 4097,col 74)",
      "(line 4098,col 9)-(line 4098,col 74)",
      "(line 4099,col 9)-(line 4099,col 76)",
      "(line 4100,col 9)-(line 4100,col 75)",
      "(line 4101,col 9)-(line 4101,col 75)",
      "(line 4102,col 9)-(line 4102,col 76)",
      "(line 4103,col 9)-(line 4103,col 73)",
      "(line 4104,col 9)-(line 4104,col 72)",
      "(line 4105,col 9)-(line 4105,col 74)",
      "(line 4106,col 9)-(line 4106,col 73)",
      "(line 4107,col 9)-(line 4107,col 73)",
      "(line 4108,col 9)-(line 4108,col 75)",
      "(line 4109,col 9)-(line 4109,col 74)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameLengthBoolean()",
    "snippet": "@Test\n    public void testSameLengthBoolean() {\n        final boolean[] nullArray \u003d null;\n        final boolean[] emptyArray \u003d {};\n        final boolean[] oneArray \u003d {true};\n        final boolean[] twoArray \u003d {true, false};\n\n        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\n        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\n\n        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\n\n        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\n        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\n\n        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\n        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\n        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
    "begin_line": 4113,
    "end_line": 4138,
    "comment": "",
    "child_ranges": [
      "(line 4114,col 9)-(line 4114,col 41)",
      "(line 4115,col 9)-(line 4115,col 40)",
      "(line 4116,col 9)-(line 4116,col 42)",
      "(line 4117,col 9)-(line 4117,col 49)",
      "(line 4119,col 9)-(line 4119,col 66)",
      "(line 4120,col 9)-(line 4120,col 67)",
      "(line 4121,col 9)-(line 4121,col 66)",
      "(line 4122,col 9)-(line 4122,col 66)",
      "(line 4124,col 9)-(line 4124,col 67)",
      "(line 4125,col 9)-(line 4125,col 68)",
      "(line 4126,col 9)-(line 4126,col 67)",
      "(line 4127,col 9)-(line 4127,col 67)",
      "(line 4129,col 9)-(line 4129,col 66)",
      "(line 4130,col 9)-(line 4130,col 67)",
      "(line 4131,col 9)-(line 4131,col 64)",
      "(line 4132,col 9)-(line 4132,col 65)",
      "(line 4134,col 9)-(line 4134,col 66)",
      "(line 4135,col 9)-(line 4135,col 67)",
      "(line 4136,col 9)-(line 4136,col 65)",
      "(line 4137,col 9)-(line 4137,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameLengthByte()",
    "snippet": "@Test\n    public void testSameLengthByte() {\n        final byte[] nullArray \u003d null;\n        final byte[] emptyArray \u003d {};\n        final byte[] oneArray \u003d {3};\n        final byte[] twoArray \u003d {4, 6};\n\n        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\n        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\n\n        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\n\n        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\n        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\n\n        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\n        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\n        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
    "begin_line": 4141,
    "end_line": 4166,
    "comment": "",
    "child_ranges": [
      "(line 4142,col 9)-(line 4142,col 38)",
      "(line 4143,col 9)-(line 4143,col 37)",
      "(line 4144,col 9)-(line 4144,col 36)",
      "(line 4145,col 9)-(line 4145,col 39)",
      "(line 4147,col 9)-(line 4147,col 66)",
      "(line 4148,col 9)-(line 4148,col 67)",
      "(line 4149,col 9)-(line 4149,col 66)",
      "(line 4150,col 9)-(line 4150,col 66)",
      "(line 4152,col 9)-(line 4152,col 67)",
      "(line 4153,col 9)-(line 4153,col 68)",
      "(line 4154,col 9)-(line 4154,col 67)",
      "(line 4155,col 9)-(line 4155,col 67)",
      "(line 4157,col 9)-(line 4157,col 66)",
      "(line 4158,col 9)-(line 4158,col 67)",
      "(line 4159,col 9)-(line 4159,col 64)",
      "(line 4160,col 9)-(line 4160,col 65)",
      "(line 4162,col 9)-(line 4162,col 66)",
      "(line 4163,col 9)-(line 4163,col 67)",
      "(line 4164,col 9)-(line 4164,col 65)",
      "(line 4165,col 9)-(line 4165,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameLengthChar()",
    "snippet": "@Test\n    public void testSameLengthChar() {\n        final char[] nullArray \u003d null;\n        final char[] emptyArray \u003d {};\n        final char[] oneArray \u003d {\u0027f\u0027};\n        final char[] twoArray \u003d {\u0027d\u0027, \u0027t\u0027};\n\n        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\n        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\n\n        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\n\n        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\n        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\n\n        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\n        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\n        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
    "begin_line": 4169,
    "end_line": 4194,
    "comment": "",
    "child_ranges": [
      "(line 4170,col 9)-(line 4170,col 38)",
      "(line 4171,col 9)-(line 4171,col 37)",
      "(line 4172,col 9)-(line 4172,col 38)",
      "(line 4173,col 9)-(line 4173,col 43)",
      "(line 4175,col 9)-(line 4175,col 66)",
      "(line 4176,col 9)-(line 4176,col 67)",
      "(line 4177,col 9)-(line 4177,col 66)",
      "(line 4178,col 9)-(line 4178,col 66)",
      "(line 4180,col 9)-(line 4180,col 67)",
      "(line 4181,col 9)-(line 4181,col 68)",
      "(line 4182,col 9)-(line 4182,col 67)",
      "(line 4183,col 9)-(line 4183,col 67)",
      "(line 4185,col 9)-(line 4185,col 66)",
      "(line 4186,col 9)-(line 4186,col 67)",
      "(line 4187,col 9)-(line 4187,col 64)",
      "(line 4188,col 9)-(line 4188,col 65)",
      "(line 4190,col 9)-(line 4190,col 66)",
      "(line 4191,col 9)-(line 4191,col 67)",
      "(line 4192,col 9)-(line 4192,col 65)",
      "(line 4193,col 9)-(line 4193,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameLengthDouble()",
    "snippet": "@Test\n    public void testSameLengthDouble() {\n        final double[] nullArray \u003d null;\n        final double[] emptyArray \u003d {};\n        final double[] oneArray \u003d {1.3d};\n        final double[] twoArray \u003d {4.5d, 6.3d};\n\n        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\n        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\n\n        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\n\n        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\n        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\n\n        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\n        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\n        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
    "begin_line": 4197,
    "end_line": 4222,
    "comment": "",
    "child_ranges": [
      "(line 4198,col 9)-(line 4198,col 40)",
      "(line 4199,col 9)-(line 4199,col 39)",
      "(line 4200,col 9)-(line 4200,col 41)",
      "(line 4201,col 9)-(line 4201,col 47)",
      "(line 4203,col 9)-(line 4203,col 66)",
      "(line 4204,col 9)-(line 4204,col 67)",
      "(line 4205,col 9)-(line 4205,col 66)",
      "(line 4206,col 9)-(line 4206,col 66)",
      "(line 4208,col 9)-(line 4208,col 67)",
      "(line 4209,col 9)-(line 4209,col 68)",
      "(line 4210,col 9)-(line 4210,col 67)",
      "(line 4211,col 9)-(line 4211,col 67)",
      "(line 4213,col 9)-(line 4213,col 66)",
      "(line 4214,col 9)-(line 4214,col 67)",
      "(line 4215,col 9)-(line 4215,col 64)",
      "(line 4216,col 9)-(line 4216,col 65)",
      "(line 4218,col 9)-(line 4218,col 66)",
      "(line 4219,col 9)-(line 4219,col 67)",
      "(line 4220,col 9)-(line 4220,col 65)",
      "(line 4221,col 9)-(line 4221,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameLengthFloat()",
    "snippet": "@Test\n    public void testSameLengthFloat() {\n        final float[] nullArray \u003d null;\n        final float[] emptyArray \u003d {};\n        final float[] oneArray \u003d {2.5f};\n        final float[] twoArray \u003d {6.4f, 5.8f};\n\n        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\n        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\n\n        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\n\n        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\n        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\n\n        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\n        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\n        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
    "begin_line": 4225,
    "end_line": 4250,
    "comment": "",
    "child_ranges": [
      "(line 4226,col 9)-(line 4226,col 39)",
      "(line 4227,col 9)-(line 4227,col 38)",
      "(line 4228,col 9)-(line 4228,col 40)",
      "(line 4229,col 9)-(line 4229,col 46)",
      "(line 4231,col 9)-(line 4231,col 66)",
      "(line 4232,col 9)-(line 4232,col 67)",
      "(line 4233,col 9)-(line 4233,col 66)",
      "(line 4234,col 9)-(line 4234,col 66)",
      "(line 4236,col 9)-(line 4236,col 67)",
      "(line 4237,col 9)-(line 4237,col 68)",
      "(line 4238,col 9)-(line 4238,col 67)",
      "(line 4239,col 9)-(line 4239,col 67)",
      "(line 4241,col 9)-(line 4241,col 66)",
      "(line 4242,col 9)-(line 4242,col 67)",
      "(line 4243,col 9)-(line 4243,col 64)",
      "(line 4244,col 9)-(line 4244,col 65)",
      "(line 4246,col 9)-(line 4246,col 66)",
      "(line 4247,col 9)-(line 4247,col 67)",
      "(line 4248,col 9)-(line 4248,col 65)",
      "(line 4249,col 9)-(line 4249,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameLengthInt()",
    "snippet": "@Test\n    public void testSameLengthInt() {\n        final int[] nullArray \u003d null;\n        final int[] emptyArray \u003d {};\n        final int[] oneArray \u003d {4};\n        final int[] twoArray \u003d {5, 7};\n\n        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\n        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\n\n        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\n\n        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\n        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\n\n        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\n        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\n        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
    "begin_line": 4253,
    "end_line": 4278,
    "comment": "",
    "child_ranges": [
      "(line 4254,col 9)-(line 4254,col 37)",
      "(line 4255,col 9)-(line 4255,col 36)",
      "(line 4256,col 9)-(line 4256,col 35)",
      "(line 4257,col 9)-(line 4257,col 38)",
      "(line 4259,col 9)-(line 4259,col 66)",
      "(line 4260,col 9)-(line 4260,col 67)",
      "(line 4261,col 9)-(line 4261,col 66)",
      "(line 4262,col 9)-(line 4262,col 66)",
      "(line 4264,col 9)-(line 4264,col 67)",
      "(line 4265,col 9)-(line 4265,col 68)",
      "(line 4266,col 9)-(line 4266,col 67)",
      "(line 4267,col 9)-(line 4267,col 67)",
      "(line 4269,col 9)-(line 4269,col 66)",
      "(line 4270,col 9)-(line 4270,col 67)",
      "(line 4271,col 9)-(line 4271,col 64)",
      "(line 4272,col 9)-(line 4272,col 65)",
      "(line 4274,col 9)-(line 4274,col 66)",
      "(line 4275,col 9)-(line 4275,col 67)",
      "(line 4276,col 9)-(line 4276,col 65)",
      "(line 4277,col 9)-(line 4277,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameLengthLong()",
    "snippet": "@Test\n    public void testSameLengthLong() {\n        final long[] nullArray \u003d null;\n        final long[] emptyArray \u003d {};\n        final long[] oneArray \u003d {0L};\n        final long[] twoArray \u003d {0L, 76L};\n\n        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\n        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\n\n        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\n\n        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\n        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\n\n        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\n        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\n        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
    "begin_line": 4281,
    "end_line": 4306,
    "comment": "",
    "child_ranges": [
      "(line 4282,col 9)-(line 4282,col 38)",
      "(line 4283,col 9)-(line 4283,col 37)",
      "(line 4284,col 9)-(line 4284,col 37)",
      "(line 4285,col 9)-(line 4285,col 42)",
      "(line 4287,col 9)-(line 4287,col 66)",
      "(line 4288,col 9)-(line 4288,col 67)",
      "(line 4289,col 9)-(line 4289,col 66)",
      "(line 4290,col 9)-(line 4290,col 66)",
      "(line 4292,col 9)-(line 4292,col 67)",
      "(line 4293,col 9)-(line 4293,col 68)",
      "(line 4294,col 9)-(line 4294,col 67)",
      "(line 4295,col 9)-(line 4295,col 67)",
      "(line 4297,col 9)-(line 4297,col 66)",
      "(line 4298,col 9)-(line 4298,col 67)",
      "(line 4299,col 9)-(line 4299,col 64)",
      "(line 4300,col 9)-(line 4300,col 65)",
      "(line 4302,col 9)-(line 4302,col 66)",
      "(line 4303,col 9)-(line 4303,col 67)",
      "(line 4304,col 9)-(line 4304,col 65)",
      "(line 4305,col 9)-(line 4305,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameLengthShort()",
    "snippet": "@Test\n    public void testSameLengthShort() {\n        final short[] nullArray \u003d null;\n        final short[] emptyArray \u003d {};\n        final short[] oneArray \u003d {4};\n        final short[] twoArray \u003d {6, 8};\n\n        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\n        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\n\n        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\n\n        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\n        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\n        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\n\n        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\n        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\n        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
    "begin_line": 4309,
    "end_line": 4334,
    "comment": "",
    "child_ranges": [
      "(line 4310,col 9)-(line 4310,col 39)",
      "(line 4311,col 9)-(line 4311,col 38)",
      "(line 4312,col 9)-(line 4312,col 37)",
      "(line 4313,col 9)-(line 4313,col 40)",
      "(line 4315,col 9)-(line 4315,col 66)",
      "(line 4316,col 9)-(line 4316,col 67)",
      "(line 4317,col 9)-(line 4317,col 66)",
      "(line 4318,col 9)-(line 4318,col 66)",
      "(line 4320,col 9)-(line 4320,col 67)",
      "(line 4321,col 9)-(line 4321,col 68)",
      "(line 4322,col 9)-(line 4322,col 67)",
      "(line 4323,col 9)-(line 4323,col 67)",
      "(line 4325,col 9)-(line 4325,col 66)",
      "(line 4326,col 9)-(line 4326,col 67)",
      "(line 4327,col 9)-(line 4327,col 64)",
      "(line 4328,col 9)-(line 4328,col 65)",
      "(line 4330,col 9)-(line 4330,col 66)",
      "(line 4331,col 9)-(line 4331,col 67)",
      "(line 4332,col 9)-(line 4332,col 65)",
      "(line 4333,col 9)-(line 4333,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameType()",
    "snippet": "@Test\n    public void testSameType() {\n        assertThrows(IllegalArgumentException.class, () -\u003e ArrayUtils.isSameType(null, null));\n        assertThrows(IllegalArgumentException.class, () -\u003e ArrayUtils.isSameType(null, new Object[0]));\n        assertThrows(IllegalArgumentException.class, () -\u003e ArrayUtils.isSameType(new Object[0], null));\n\n        assertTrue(ArrayUtils.isSameType(new Object[0], new Object[0]));\n        assertFalse(ArrayUtils.isSameType(new String[0], new Object[0]));\n        assertTrue(ArrayUtils.isSameType(new String[0][0], new String[0][0]));\n        assertFalse(ArrayUtils.isSameType(new String[0], new String[0][0]));\n        assertFalse(ArrayUtils.isSameType(new String[0][0], new String[0]));\n    }",
    "begin_line": 4337,
    "end_line": 4347,
    "comment": "",
    "child_ranges": [
      "(line 4338,col 9)-(line 4338,col 94)",
      "(line 4339,col 9)-(line 4339,col 103)",
      "(line 4340,col 9)-(line 4340,col 103)",
      "(line 4342,col 9)-(line 4342,col 72)",
      "(line 4343,col 9)-(line 4343,col 73)",
      "(line 4344,col 9)-(line 4344,col 78)",
      "(line 4345,col 9)-(line 4345,col 76)",
      "(line 4346,col 9)-(line 4346,col 76)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftAllByte()",
    "snippet": "@Test\n    public void testShiftAllByte() {\n        final byte[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 4);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n        ArrayUtils.shift(array, -4);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n    }",
    "begin_line": 4350,
    "end_line": 4362,
    "comment": "",
    "child_ranges": [
      "(line 4351,col 9)-(line 4351,col 42)",
      "(line 4352,col 9)-(line 4352,col 35)",
      "(line 4353,col 9)-(line 4353,col 34)",
      "(line 4354,col 9)-(line 4354,col 34)",
      "(line 4355,col 9)-(line 4355,col 34)",
      "(line 4356,col 9)-(line 4356,col 34)",
      "(line 4357,col 9)-(line 4357,col 36)",
      "(line 4358,col 9)-(line 4358,col 34)",
      "(line 4359,col 9)-(line 4359,col 34)",
      "(line 4360,col 9)-(line 4360,col 34)",
      "(line 4361,col 9)-(line 4361,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftAllChar()",
    "snippet": "@Test\n    public void testShiftAllChar() {\n        final char[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 4);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n        ArrayUtils.shift(array, -4);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n    }",
    "begin_line": 4365,
    "end_line": 4377,
    "comment": "",
    "child_ranges": [
      "(line 4366,col 9)-(line 4366,col 42)",
      "(line 4367,col 9)-(line 4367,col 35)",
      "(line 4368,col 9)-(line 4368,col 34)",
      "(line 4369,col 9)-(line 4369,col 34)",
      "(line 4370,col 9)-(line 4370,col 34)",
      "(line 4371,col 9)-(line 4371,col 34)",
      "(line 4372,col 9)-(line 4372,col 36)",
      "(line 4373,col 9)-(line 4373,col 34)",
      "(line 4374,col 9)-(line 4374,col 34)",
      "(line 4375,col 9)-(line 4375,col 34)",
      "(line 4376,col 9)-(line 4376,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftAllDouble()",
    "snippet": "@Test\n    public void testShiftAllDouble() {\n        final double[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 4);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n        ArrayUtils.shift(array, -4);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n    }",
    "begin_line": 4380,
    "end_line": 4392,
    "comment": "",
    "child_ranges": [
      "(line 4381,col 9)-(line 4381,col 44)",
      "(line 4382,col 9)-(line 4382,col 35)",
      "(line 4383,col 9)-(line 4383,col 34)",
      "(line 4384,col 9)-(line 4384,col 34)",
      "(line 4385,col 9)-(line 4385,col 34)",
      "(line 4386,col 9)-(line 4386,col 34)",
      "(line 4387,col 9)-(line 4387,col 36)",
      "(line 4388,col 9)-(line 4388,col 34)",
      "(line 4389,col 9)-(line 4389,col 34)",
      "(line 4390,col 9)-(line 4390,col 34)",
      "(line 4391,col 9)-(line 4391,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftAllFloat()",
    "snippet": "@Test\n    public void testShiftAllFloat() {\n        final float[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 4);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n        ArrayUtils.shift(array, -4);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n    }",
    "begin_line": 4395,
    "end_line": 4407,
    "comment": "",
    "child_ranges": [
      "(line 4396,col 9)-(line 4396,col 43)",
      "(line 4397,col 9)-(line 4397,col 35)",
      "(line 4398,col 9)-(line 4398,col 34)",
      "(line 4399,col 9)-(line 4399,col 34)",
      "(line 4400,col 9)-(line 4400,col 34)",
      "(line 4401,col 9)-(line 4401,col 34)",
      "(line 4402,col 9)-(line 4402,col 36)",
      "(line 4403,col 9)-(line 4403,col 34)",
      "(line 4404,col 9)-(line 4404,col 34)",
      "(line 4405,col 9)-(line 4405,col 34)",
      "(line 4406,col 9)-(line 4406,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftAllInt()",
    "snippet": "@Test\n    public void testShiftAllInt() {\n        final int[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 4);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n        ArrayUtils.shift(array, -4);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n    }",
    "begin_line": 4410,
    "end_line": 4422,
    "comment": "",
    "child_ranges": [
      "(line 4411,col 9)-(line 4411,col 41)",
      "(line 4412,col 9)-(line 4412,col 35)",
      "(line 4413,col 9)-(line 4413,col 34)",
      "(line 4414,col 9)-(line 4414,col 34)",
      "(line 4415,col 9)-(line 4415,col 34)",
      "(line 4416,col 9)-(line 4416,col 34)",
      "(line 4417,col 9)-(line 4417,col 36)",
      "(line 4418,col 9)-(line 4418,col 34)",
      "(line 4419,col 9)-(line 4419,col 34)",
      "(line 4420,col 9)-(line 4420,col 34)",
      "(line 4421,col 9)-(line 4421,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftAllLong()",
    "snippet": "@Test\n    public void testShiftAllLong() {\n        final long[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 4);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n        ArrayUtils.shift(array, -4);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n    }",
    "begin_line": 4425,
    "end_line": 4437,
    "comment": "",
    "child_ranges": [
      "(line 4426,col 9)-(line 4426,col 42)",
      "(line 4427,col 9)-(line 4427,col 35)",
      "(line 4428,col 9)-(line 4428,col 34)",
      "(line 4429,col 9)-(line 4429,col 34)",
      "(line 4430,col 9)-(line 4430,col 34)",
      "(line 4431,col 9)-(line 4431,col 34)",
      "(line 4432,col 9)-(line 4432,col 36)",
      "(line 4433,col 9)-(line 4433,col 34)",
      "(line 4434,col 9)-(line 4434,col 34)",
      "(line 4435,col 9)-(line 4435,col 34)",
      "(line 4436,col 9)-(line 4436,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftAllObject()",
    "snippet": "@Test\n    public void testShiftAllObject() {\n        final String[] array \u003d {\"1\", \"2\", \"3\", \"4\"};\n        ArrayUtils.shift(array, 4);\n        assertEquals(\"1\", array[0]);\n        assertEquals(\"2\", array[1]);\n        assertEquals(\"3\", array[2]);\n        assertEquals(\"4\", array[3]);\n        ArrayUtils.shift(array, -4);\n        assertEquals(\"1\", array[0]);\n        assertEquals(\"2\", array[1]);\n        assertEquals(\"3\", array[2]);\n        assertEquals(\"4\", array[3]);\n    }",
    "begin_line": 4440,
    "end_line": 4452,
    "comment": "",
    "child_ranges": [
      "(line 4441,col 9)-(line 4441,col 52)",
      "(line 4442,col 9)-(line 4442,col 35)",
      "(line 4443,col 9)-(line 4443,col 36)",
      "(line 4444,col 9)-(line 4444,col 36)",
      "(line 4445,col 9)-(line 4445,col 36)",
      "(line 4446,col 9)-(line 4446,col 36)",
      "(line 4447,col 9)-(line 4447,col 36)",
      "(line 4448,col 9)-(line 4448,col 36)",
      "(line 4449,col 9)-(line 4449,col 36)",
      "(line 4450,col 9)-(line 4450,col 36)",
      "(line 4451,col 9)-(line 4451,col 36)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftAllShort()",
    "snippet": "@Test\n    public void testShiftAllShort() {\n        final short[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 4);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n        ArrayUtils.shift(array, -4);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n    }",
    "begin_line": 4455,
    "end_line": 4467,
    "comment": "",
    "child_ranges": [
      "(line 4456,col 9)-(line 4456,col 43)",
      "(line 4457,col 9)-(line 4457,col 35)",
      "(line 4458,col 9)-(line 4458,col 34)",
      "(line 4459,col 9)-(line 4459,col 34)",
      "(line 4460,col 9)-(line 4460,col 34)",
      "(line 4461,col 9)-(line 4461,col 34)",
      "(line 4462,col 9)-(line 4462,col 36)",
      "(line 4463,col 9)-(line 4463,col 34)",
      "(line 4464,col 9)-(line 4464,col 34)",
      "(line 4465,col 9)-(line 4465,col 34)",
      "(line 4466,col 9)-(line 4466,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftBoolean()",
    "snippet": "@Test\n    public void testShiftBoolean() {\n        final boolean[] array \u003d {true, true, false, false};\n\n        ArrayUtils.shift(array, 1);\n        assertFalse(array[0]);\n        assertTrue(array[1]);\n        assertTrue(array[2]);\n        assertFalse(array[3]);\n\n        ArrayUtils.shift(array, -1);\n        assertTrue(array[0]);\n        assertTrue(array[1]);\n        assertFalse(array[2]);\n        assertFalse(array[3]);\n\n        ArrayUtils.shift(array, 5);\n        assertFalse(array[0]);\n        assertTrue(array[1]);\n        assertTrue(array[2]);\n        assertFalse(array[3]);\n\n        ArrayUtils.shift(array, -3);\n        assertFalse(array[0]);\n        assertFalse(array[1]);\n        assertTrue(array[2]);\n        assertTrue(array[3]);\n    }",
    "begin_line": 4470,
    "end_line": 4496,
    "comment": "",
    "child_ranges": [
      "(line 4471,col 9)-(line 4471,col 59)",
      "(line 4473,col 9)-(line 4473,col 35)",
      "(line 4474,col 9)-(line 4474,col 30)",
      "(line 4475,col 9)-(line 4475,col 29)",
      "(line 4476,col 9)-(line 4476,col 29)",
      "(line 4477,col 9)-(line 4477,col 30)",
      "(line 4479,col 9)-(line 4479,col 36)",
      "(line 4480,col 9)-(line 4480,col 29)",
      "(line 4481,col 9)-(line 4481,col 29)",
      "(line 4482,col 9)-(line 4482,col 30)",
      "(line 4483,col 9)-(line 4483,col 30)",
      "(line 4485,col 9)-(line 4485,col 35)",
      "(line 4486,col 9)-(line 4486,col 30)",
      "(line 4487,col 9)-(line 4487,col 29)",
      "(line 4488,col 9)-(line 4488,col 29)",
      "(line 4489,col 9)-(line 4489,col 30)",
      "(line 4491,col 9)-(line 4491,col 36)",
      "(line 4492,col 9)-(line 4492,col 30)",
      "(line 4493,col 9)-(line 4493,col 30)",
      "(line 4494,col 9)-(line 4494,col 29)",
      "(line 4495,col 9)-(line 4495,col 29)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftByte()",
    "snippet": "@Test\n    public void testShiftByte() {\n        final byte[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 1);\n        assertEquals(4, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(3, array[3]);\n        ArrayUtils.shift(array, -1);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n        ArrayUtils.shift(array, 5);\n        assertEquals(4, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(3, array[3]);\n        ArrayUtils.shift(array, -3);\n        assertEquals(3, array[0]);\n        assertEquals(4, array[1]);\n        assertEquals(1, array[2]);\n        assertEquals(2, array[3]);\n    }",
    "begin_line": 4499,
    "end_line": 4521,
    "comment": "",
    "child_ranges": [
      "(line 4500,col 9)-(line 4500,col 42)",
      "(line 4501,col 9)-(line 4501,col 35)",
      "(line 4502,col 9)-(line 4502,col 34)",
      "(line 4503,col 9)-(line 4503,col 34)",
      "(line 4504,col 9)-(line 4504,col 34)",
      "(line 4505,col 9)-(line 4505,col 34)",
      "(line 4506,col 9)-(line 4506,col 36)",
      "(line 4507,col 9)-(line 4507,col 34)",
      "(line 4508,col 9)-(line 4508,col 34)",
      "(line 4509,col 9)-(line 4509,col 34)",
      "(line 4510,col 9)-(line 4510,col 34)",
      "(line 4511,col 9)-(line 4511,col 35)",
      "(line 4512,col 9)-(line 4512,col 34)",
      "(line 4513,col 9)-(line 4513,col 34)",
      "(line 4514,col 9)-(line 4514,col 34)",
      "(line 4515,col 9)-(line 4515,col 34)",
      "(line 4516,col 9)-(line 4516,col 36)",
      "(line 4517,col 9)-(line 4517,col 34)",
      "(line 4518,col 9)-(line 4518,col 34)",
      "(line 4519,col 9)-(line 4519,col 34)",
      "(line 4520,col 9)-(line 4520,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftChar()",
    "snippet": "@Test\n    public void testShiftChar() {\n        final char[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 1);\n        assertEquals(4, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(3, array[3]);\n        ArrayUtils.shift(array, -1);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n        ArrayUtils.shift(array, 5);\n        assertEquals(4, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(3, array[3]);\n        ArrayUtils.shift(array, -3);\n        assertEquals(3, array[0]);\n        assertEquals(4, array[1]);\n        assertEquals(1, array[2]);\n        assertEquals(2, array[3]);\n    }",
    "begin_line": 4524,
    "end_line": 4546,
    "comment": "",
    "child_ranges": [
      "(line 4525,col 9)-(line 4525,col 42)",
      "(line 4526,col 9)-(line 4526,col 35)",
      "(line 4527,col 9)-(line 4527,col 34)",
      "(line 4528,col 9)-(line 4528,col 34)",
      "(line 4529,col 9)-(line 4529,col 34)",
      "(line 4530,col 9)-(line 4530,col 34)",
      "(line 4531,col 9)-(line 4531,col 36)",
      "(line 4532,col 9)-(line 4532,col 34)",
      "(line 4533,col 9)-(line 4533,col 34)",
      "(line 4534,col 9)-(line 4534,col 34)",
      "(line 4535,col 9)-(line 4535,col 34)",
      "(line 4536,col 9)-(line 4536,col 35)",
      "(line 4537,col 9)-(line 4537,col 34)",
      "(line 4538,col 9)-(line 4538,col 34)",
      "(line 4539,col 9)-(line 4539,col 34)",
      "(line 4540,col 9)-(line 4540,col 34)",
      "(line 4541,col 9)-(line 4541,col 36)",
      "(line 4542,col 9)-(line 4542,col 34)",
      "(line 4543,col 9)-(line 4543,col 34)",
      "(line 4544,col 9)-(line 4544,col 34)",
      "(line 4545,col 9)-(line 4545,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftDouble()",
    "snippet": "@Test\n    public void testShiftDouble() {\n        final double[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 1);\n        assertEquals(4, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(3, array[3]);\n        ArrayUtils.shift(array, -1);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n        ArrayUtils.shift(array, 5);\n        assertEquals(4, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(3, array[3]);\n        ArrayUtils.shift(array, -3);\n        assertEquals(3, array[0]);\n        assertEquals(4, array[1]);\n        assertEquals(1, array[2]);\n        assertEquals(2, array[3]);\n    }",
    "begin_line": 4549,
    "end_line": 4571,
    "comment": "",
    "child_ranges": [
      "(line 4550,col 9)-(line 4550,col 44)",
      "(line 4551,col 9)-(line 4551,col 35)",
      "(line 4552,col 9)-(line 4552,col 34)",
      "(line 4553,col 9)-(line 4553,col 34)",
      "(line 4554,col 9)-(line 4554,col 34)",
      "(line 4555,col 9)-(line 4555,col 34)",
      "(line 4556,col 9)-(line 4556,col 36)",
      "(line 4557,col 9)-(line 4557,col 34)",
      "(line 4558,col 9)-(line 4558,col 34)",
      "(line 4559,col 9)-(line 4559,col 34)",
      "(line 4560,col 9)-(line 4560,col 34)",
      "(line 4561,col 9)-(line 4561,col 35)",
      "(line 4562,col 9)-(line 4562,col 34)",
      "(line 4563,col 9)-(line 4563,col 34)",
      "(line 4564,col 9)-(line 4564,col 34)",
      "(line 4565,col 9)-(line 4565,col 34)",
      "(line 4566,col 9)-(line 4566,col 36)",
      "(line 4567,col 9)-(line 4567,col 34)",
      "(line 4568,col 9)-(line 4568,col 34)",
      "(line 4569,col 9)-(line 4569,col 34)",
      "(line 4570,col 9)-(line 4570,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftFloat()",
    "snippet": "@Test\n    public void testShiftFloat() {\n        final float[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 1);\n        assertEquals(4, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(3, array[3]);\n        ArrayUtils.shift(array, -1);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n        ArrayUtils.shift(array, 5);\n        assertEquals(4, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(3, array[3]);\n        ArrayUtils.shift(array, -3);\n        assertEquals(3, array[0]);\n        assertEquals(4, array[1]);\n        assertEquals(1, array[2]);\n        assertEquals(2, array[3]);\n    }",
    "begin_line": 4574,
    "end_line": 4596,
    "comment": "",
    "child_ranges": [
      "(line 4575,col 9)-(line 4575,col 43)",
      "(line 4576,col 9)-(line 4576,col 35)",
      "(line 4577,col 9)-(line 4577,col 34)",
      "(line 4578,col 9)-(line 4578,col 34)",
      "(line 4579,col 9)-(line 4579,col 34)",
      "(line 4580,col 9)-(line 4580,col 34)",
      "(line 4581,col 9)-(line 4581,col 36)",
      "(line 4582,col 9)-(line 4582,col 34)",
      "(line 4583,col 9)-(line 4583,col 34)",
      "(line 4584,col 9)-(line 4584,col 34)",
      "(line 4585,col 9)-(line 4585,col 34)",
      "(line 4586,col 9)-(line 4586,col 35)",
      "(line 4587,col 9)-(line 4587,col 34)",
      "(line 4588,col 9)-(line 4588,col 34)",
      "(line 4589,col 9)-(line 4589,col 34)",
      "(line 4590,col 9)-(line 4590,col 34)",
      "(line 4591,col 9)-(line 4591,col 36)",
      "(line 4592,col 9)-(line 4592,col 34)",
      "(line 4593,col 9)-(line 4593,col 34)",
      "(line 4594,col 9)-(line 4594,col 34)",
      "(line 4595,col 9)-(line 4595,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftInt()",
    "snippet": "@Test\n    public void testShiftInt() {\n        final int[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 1);\n        assertEquals(4, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(3, array[3]);\n        ArrayUtils.shift(array, -1);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n        ArrayUtils.shift(array, 5);\n        assertEquals(4, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(3, array[3]);\n        ArrayUtils.shift(array, -3);\n        assertEquals(3, array[0]);\n        assertEquals(4, array[1]);\n        assertEquals(1, array[2]);\n        assertEquals(2, array[3]);\n    }",
    "begin_line": 4600,
    "end_line": 4622,
    "comment": "",
    "child_ranges": [
      "(line 4601,col 9)-(line 4601,col 41)",
      "(line 4602,col 9)-(line 4602,col 35)",
      "(line 4603,col 9)-(line 4603,col 34)",
      "(line 4604,col 9)-(line 4604,col 34)",
      "(line 4605,col 9)-(line 4605,col 34)",
      "(line 4606,col 9)-(line 4606,col 34)",
      "(line 4607,col 9)-(line 4607,col 36)",
      "(line 4608,col 9)-(line 4608,col 34)",
      "(line 4609,col 9)-(line 4609,col 34)",
      "(line 4610,col 9)-(line 4610,col 34)",
      "(line 4611,col 9)-(line 4611,col 34)",
      "(line 4612,col 9)-(line 4612,col 35)",
      "(line 4613,col 9)-(line 4613,col 34)",
      "(line 4614,col 9)-(line 4614,col 34)",
      "(line 4615,col 9)-(line 4615,col 34)",
      "(line 4616,col 9)-(line 4616,col 34)",
      "(line 4617,col 9)-(line 4617,col 36)",
      "(line 4618,col 9)-(line 4618,col 34)",
      "(line 4619,col 9)-(line 4619,col 34)",
      "(line 4620,col 9)-(line 4620,col 34)",
      "(line 4621,col 9)-(line 4621,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftLong()",
    "snippet": "@Test\n    public void testShiftLong() {\n        final long[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 1);\n        assertEquals(4, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(3, array[3]);\n        ArrayUtils.shift(array, -1);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n        ArrayUtils.shift(array, 5);\n        assertEquals(4, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(3, array[3]);\n        ArrayUtils.shift(array, -3);\n        assertEquals(3, array[0]);\n        assertEquals(4, array[1]);\n        assertEquals(1, array[2]);\n        assertEquals(2, array[3]);\n    }",
    "begin_line": 4625,
    "end_line": 4647,
    "comment": "",
    "child_ranges": [
      "(line 4626,col 9)-(line 4626,col 42)",
      "(line 4627,col 9)-(line 4627,col 35)",
      "(line 4628,col 9)-(line 4628,col 34)",
      "(line 4629,col 9)-(line 4629,col 34)",
      "(line 4630,col 9)-(line 4630,col 34)",
      "(line 4631,col 9)-(line 4631,col 34)",
      "(line 4632,col 9)-(line 4632,col 36)",
      "(line 4633,col 9)-(line 4633,col 34)",
      "(line 4634,col 9)-(line 4634,col 34)",
      "(line 4635,col 9)-(line 4635,col 34)",
      "(line 4636,col 9)-(line 4636,col 34)",
      "(line 4637,col 9)-(line 4637,col 35)",
      "(line 4638,col 9)-(line 4638,col 34)",
      "(line 4639,col 9)-(line 4639,col 34)",
      "(line 4640,col 9)-(line 4640,col 34)",
      "(line 4641,col 9)-(line 4641,col 34)",
      "(line 4642,col 9)-(line 4642,col 36)",
      "(line 4643,col 9)-(line 4643,col 34)",
      "(line 4644,col 9)-(line 4644,col 34)",
      "(line 4645,col 9)-(line 4645,col 34)",
      "(line 4646,col 9)-(line 4646,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftNullBoolean()",
    "snippet": "@Test\n    public void testShiftNullBoolean() {\n        final boolean[] array \u003d null;\n\n        ArrayUtils.shift(array, 1);\n        assertNull(array);\n    }",
    "begin_line": 4650,
    "end_line": 4655,
    "comment": "",
    "child_ranges": [
      "(line 4651,col 9)-(line 4651,col 37)",
      "(line 4653,col 9)-(line 4653,col 35)",
      "(line 4654,col 9)-(line 4654,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftNullDouble()",
    "snippet": "@Test\n    public void testShiftNullDouble() {\n        final double[] array \u003d null;\n\n        ArrayUtils.shift(array, 1);\n        assertNull(array);\n    }",
    "begin_line": 4658,
    "end_line": 4663,
    "comment": "",
    "child_ranges": [
      "(line 4659,col 9)-(line 4659,col 36)",
      "(line 4661,col 9)-(line 4661,col 35)",
      "(line 4662,col 9)-(line 4662,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftNullFloat()",
    "snippet": "@Test\n    public void testShiftNullFloat() {\n        final float[] array \u003d null;\n\n        ArrayUtils.shift(array, 1);\n        assertNull(array);\n    }",
    "begin_line": 4666,
    "end_line": 4671,
    "comment": "",
    "child_ranges": [
      "(line 4667,col 9)-(line 4667,col 35)",
      "(line 4669,col 9)-(line 4669,col 35)",
      "(line 4670,col 9)-(line 4670,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftNullInt()",
    "snippet": "@Test\n    public void testShiftNullInt() {\n        final int[] array \u003d null;\n\n        ArrayUtils.shift(array, 1);\n        assertNull(array);\n    }",
    "begin_line": 4674,
    "end_line": 4679,
    "comment": "",
    "child_ranges": [
      "(line 4675,col 9)-(line 4675,col 33)",
      "(line 4677,col 9)-(line 4677,col 35)",
      "(line 4678,col 9)-(line 4678,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftNullLong()",
    "snippet": "@Test\n    public void testShiftNullLong() {\n        final long[] array \u003d null;\n\n        ArrayUtils.shift(array, 1);\n        assertNull(array);\n    }",
    "begin_line": 4682,
    "end_line": 4687,
    "comment": "",
    "child_ranges": [
      "(line 4683,col 9)-(line 4683,col 34)",
      "(line 4685,col 9)-(line 4685,col 35)",
      "(line 4686,col 9)-(line 4686,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftNullObject()",
    "snippet": "@Test\n    public void testShiftNullObject() {\n        final String[] array \u003d null;\n\n        ArrayUtils.shift(array, 1);\n        assertNull(array);\n    }",
    "begin_line": 4690,
    "end_line": 4695,
    "comment": "",
    "child_ranges": [
      "(line 4691,col 9)-(line 4691,col 36)",
      "(line 4693,col 9)-(line 4693,col 35)",
      "(line 4694,col 9)-(line 4694,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftNullShort()",
    "snippet": "@Test\n    public void testShiftNullShort() {\n        final short[] array \u003d null;\n\n        ArrayUtils.shift(array, 1);\n        assertNull(array);\n    }",
    "begin_line": 4698,
    "end_line": 4703,
    "comment": "",
    "child_ranges": [
      "(line 4699,col 9)-(line 4699,col 35)",
      "(line 4701,col 9)-(line 4701,col 35)",
      "(line 4702,col 9)-(line 4702,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftObject()",
    "snippet": "@Test\n    public void testShiftObject() {\n        final String[] array \u003d {\"1\", \"2\", \"3\", \"4\"};\n        ArrayUtils.shift(array, 1);\n        assertEquals(\"4\", array[0]);\n        assertEquals(\"1\", array[1]);\n        assertEquals(\"2\", array[2]);\n        assertEquals(\"3\", array[3]);\n        ArrayUtils.shift(array, -1);\n        assertEquals(\"1\", array[0]);\n        assertEquals(\"2\", array[1]);\n        assertEquals(\"3\", array[2]);\n        assertEquals(\"4\", array[3]);\n        ArrayUtils.shift(array, 5);\n        assertEquals(\"4\", array[0]);\n        assertEquals(\"1\", array[1]);\n        assertEquals(\"2\", array[2]);\n        assertEquals(\"3\", array[3]);\n        ArrayUtils.shift(array, -3);\n        assertEquals(\"3\", array[0]);\n        assertEquals(\"4\", array[1]);\n        assertEquals(\"1\", array[2]);\n        assertEquals(\"2\", array[3]);\n    }",
    "begin_line": 4706,
    "end_line": 4728,
    "comment": "",
    "child_ranges": [
      "(line 4707,col 9)-(line 4707,col 52)",
      "(line 4708,col 9)-(line 4708,col 35)",
      "(line 4709,col 9)-(line 4709,col 36)",
      "(line 4710,col 9)-(line 4710,col 36)",
      "(line 4711,col 9)-(line 4711,col 36)",
      "(line 4712,col 9)-(line 4712,col 36)",
      "(line 4713,col 9)-(line 4713,col 36)",
      "(line 4714,col 9)-(line 4714,col 36)",
      "(line 4715,col 9)-(line 4715,col 36)",
      "(line 4716,col 9)-(line 4716,col 36)",
      "(line 4717,col 9)-(line 4717,col 36)",
      "(line 4718,col 9)-(line 4718,col 35)",
      "(line 4719,col 9)-(line 4719,col 36)",
      "(line 4720,col 9)-(line 4720,col 36)",
      "(line 4721,col 9)-(line 4721,col 36)",
      "(line 4722,col 9)-(line 4722,col 36)",
      "(line 4723,col 9)-(line 4723,col 36)",
      "(line 4724,col 9)-(line 4724,col 36)",
      "(line 4725,col 9)-(line 4725,col 36)",
      "(line 4726,col 9)-(line 4726,col 36)",
      "(line 4727,col 9)-(line 4727,col 36)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeByte()",
    "snippet": "@Test\n    public void testShiftRangeByte() {\n        final byte[] array \u003d {1, 2, 3, 4, 5};\n        ArrayUtils.shift(array, 1, 3, 1);\n        assertEquals(1, array[0]);\n        assertEquals(3, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(4, array[3]);\n        assertEquals(5, array[4]);\n        ArrayUtils.shift(array, 1, 4, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(4, array[2]);\n        assertEquals(3, array[3]);\n        assertEquals(5, array[4]);\n    }",
    "begin_line": 4731,
    "end_line": 4745,
    "comment": "",
    "child_ranges": [
      "(line 4732,col 9)-(line 4732,col 45)",
      "(line 4733,col 9)-(line 4733,col 41)",
      "(line 4734,col 9)-(line 4734,col 34)",
      "(line 4735,col 9)-(line 4735,col 34)",
      "(line 4736,col 9)-(line 4736,col 34)",
      "(line 4737,col 9)-(line 4737,col 34)",
      "(line 4738,col 9)-(line 4738,col 34)",
      "(line 4739,col 9)-(line 4739,col 41)",
      "(line 4740,col 9)-(line 4740,col 34)",
      "(line 4741,col 9)-(line 4741,col 34)",
      "(line 4742,col 9)-(line 4742,col 34)",
      "(line 4743,col 9)-(line 4743,col 34)",
      "(line 4744,col 9)-(line 4744,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeChar()",
    "snippet": "@Test\n    public void testShiftRangeChar() {\n        final char[] array \u003d {1, 2, 3, 4, 5};\n        ArrayUtils.shift(array, 1, 3, 1);\n        assertEquals(1, array[0]);\n        assertEquals(3, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(4, array[3]);\n        assertEquals(5, array[4]);\n        ArrayUtils.shift(array, 1, 4, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(4, array[2]);\n        assertEquals(3, array[3]);\n        assertEquals(5, array[4]);\n    }",
    "begin_line": 4748,
    "end_line": 4762,
    "comment": "",
    "child_ranges": [
      "(line 4749,col 9)-(line 4749,col 45)",
      "(line 4750,col 9)-(line 4750,col 41)",
      "(line 4751,col 9)-(line 4751,col 34)",
      "(line 4752,col 9)-(line 4752,col 34)",
      "(line 4753,col 9)-(line 4753,col 34)",
      "(line 4754,col 9)-(line 4754,col 34)",
      "(line 4755,col 9)-(line 4755,col 34)",
      "(line 4756,col 9)-(line 4756,col 41)",
      "(line 4757,col 9)-(line 4757,col 34)",
      "(line 4758,col 9)-(line 4758,col 34)",
      "(line 4759,col 9)-(line 4759,col 34)",
      "(line 4760,col 9)-(line 4760,col 34)",
      "(line 4761,col 9)-(line 4761,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeDouble()",
    "snippet": "@Test\n    public void testShiftRangeDouble() {\n        final double[] array \u003d {1, 2, 3, 4, 5};\n        ArrayUtils.shift(array, 1, 3, 1);\n        assertEquals(1, array[0]);\n        assertEquals(3, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(4, array[3]);\n        assertEquals(5, array[4]);\n        ArrayUtils.shift(array, 1, 4, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(4, array[2]);\n        assertEquals(3, array[3]);\n        assertEquals(5, array[4]);\n    }",
    "begin_line": 4765,
    "end_line": 4779,
    "comment": "",
    "child_ranges": [
      "(line 4766,col 9)-(line 4766,col 47)",
      "(line 4767,col 9)-(line 4767,col 41)",
      "(line 4768,col 9)-(line 4768,col 34)",
      "(line 4769,col 9)-(line 4769,col 34)",
      "(line 4770,col 9)-(line 4770,col 34)",
      "(line 4771,col 9)-(line 4771,col 34)",
      "(line 4772,col 9)-(line 4772,col 34)",
      "(line 4773,col 9)-(line 4773,col 41)",
      "(line 4774,col 9)-(line 4774,col 34)",
      "(line 4775,col 9)-(line 4775,col 34)",
      "(line 4776,col 9)-(line 4776,col 34)",
      "(line 4777,col 9)-(line 4777,col 34)",
      "(line 4778,col 9)-(line 4778,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeFloat()",
    "snippet": "@Test\n    public void testShiftRangeFloat() {\n        final float[] array \u003d {1, 2, 3, 4, 5};\n        ArrayUtils.shift(array, 1, 3, 1);\n        assertEquals(1, array[0]);\n        assertEquals(3, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(4, array[3]);\n        assertEquals(5, array[4]);\n        ArrayUtils.shift(array, 1, 4, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(4, array[2]);\n        assertEquals(3, array[3]);\n        assertEquals(5, array[4]);\n    }",
    "begin_line": 4782,
    "end_line": 4796,
    "comment": "",
    "child_ranges": [
      "(line 4783,col 9)-(line 4783,col 46)",
      "(line 4784,col 9)-(line 4784,col 41)",
      "(line 4785,col 9)-(line 4785,col 34)",
      "(line 4786,col 9)-(line 4786,col 34)",
      "(line 4787,col 9)-(line 4787,col 34)",
      "(line 4788,col 9)-(line 4788,col 34)",
      "(line 4789,col 9)-(line 4789,col 34)",
      "(line 4790,col 9)-(line 4790,col 41)",
      "(line 4791,col 9)-(line 4791,col 34)",
      "(line 4792,col 9)-(line 4792,col 34)",
      "(line 4793,col 9)-(line 4793,col 34)",
      "(line 4794,col 9)-(line 4794,col 34)",
      "(line 4795,col 9)-(line 4795,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeInt()",
    "snippet": "@Test\n    public void testShiftRangeInt() {\n        final int[] array \u003d {1, 2, 3, 4, 5};\n        ArrayUtils.shift(array, 1, 3, 1);\n        assertEquals(1, array[0]);\n        assertEquals(3, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(4, array[3]);\n        assertEquals(5, array[4]);\n        ArrayUtils.shift(array, 1, 4, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(4, array[2]);\n        assertEquals(3, array[3]);\n        assertEquals(5, array[4]);\n    }",
    "begin_line": 4799,
    "end_line": 4813,
    "comment": "",
    "child_ranges": [
      "(line 4800,col 9)-(line 4800,col 44)",
      "(line 4801,col 9)-(line 4801,col 41)",
      "(line 4802,col 9)-(line 4802,col 34)",
      "(line 4803,col 9)-(line 4803,col 34)",
      "(line 4804,col 9)-(line 4804,col 34)",
      "(line 4805,col 9)-(line 4805,col 34)",
      "(line 4806,col 9)-(line 4806,col 34)",
      "(line 4807,col 9)-(line 4807,col 41)",
      "(line 4808,col 9)-(line 4808,col 34)",
      "(line 4809,col 9)-(line 4809,col 34)",
      "(line 4810,col 9)-(line 4810,col 34)",
      "(line 4811,col 9)-(line 4811,col 34)",
      "(line 4812,col 9)-(line 4812,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeLong()",
    "snippet": "@Test\n    public void testShiftRangeLong() {\n        final long[] array \u003d {1, 2, 3, 4, 5};\n        ArrayUtils.shift(array, 1, 3, 1);\n        assertEquals(1, array[0]);\n        assertEquals(3, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(4, array[3]);\n        assertEquals(5, array[4]);\n        ArrayUtils.shift(array, 1, 4, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(4, array[2]);\n        assertEquals(3, array[3]);\n        assertEquals(5, array[4]);\n    }",
    "begin_line": 4816,
    "end_line": 4830,
    "comment": "",
    "child_ranges": [
      "(line 4817,col 9)-(line 4817,col 45)",
      "(line 4818,col 9)-(line 4818,col 41)",
      "(line 4819,col 9)-(line 4819,col 34)",
      "(line 4820,col 9)-(line 4820,col 34)",
      "(line 4821,col 9)-(line 4821,col 34)",
      "(line 4822,col 9)-(line 4822,col 34)",
      "(line 4823,col 9)-(line 4823,col 34)",
      "(line 4824,col 9)-(line 4824,col 41)",
      "(line 4825,col 9)-(line 4825,col 34)",
      "(line 4826,col 9)-(line 4826,col 34)",
      "(line 4827,col 9)-(line 4827,col 34)",
      "(line 4828,col 9)-(line 4828,col 34)",
      "(line 4829,col 9)-(line 4829,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeNoElemByte()",
    "snippet": "@Test\n    public void testShiftRangeNoElemByte() {\n        final byte[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 1, 1, 1);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n    }",
    "begin_line": 4833,
    "end_line": 4840,
    "comment": "",
    "child_ranges": [
      "(line 4834,col 9)-(line 4834,col 42)",
      "(line 4835,col 9)-(line 4835,col 41)",
      "(line 4836,col 9)-(line 4836,col 34)",
      "(line 4837,col 9)-(line 4837,col 34)",
      "(line 4838,col 9)-(line 4838,col 34)",
      "(line 4839,col 9)-(line 4839,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeNoElemChar()",
    "snippet": "@Test\n    public void testShiftRangeNoElemChar() {\n        final char[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 1, 1, 1);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n    }",
    "begin_line": 4843,
    "end_line": 4850,
    "comment": "",
    "child_ranges": [
      "(line 4844,col 9)-(line 4844,col 42)",
      "(line 4845,col 9)-(line 4845,col 41)",
      "(line 4846,col 9)-(line 4846,col 34)",
      "(line 4847,col 9)-(line 4847,col 34)",
      "(line 4848,col 9)-(line 4848,col 34)",
      "(line 4849,col 9)-(line 4849,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeNoElemDouble()",
    "snippet": "@Test\n    public void testShiftRangeNoElemDouble() {\n        final double[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 1, 1, 1);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n    }",
    "begin_line": 4853,
    "end_line": 4860,
    "comment": "",
    "child_ranges": [
      "(line 4854,col 9)-(line 4854,col 44)",
      "(line 4855,col 9)-(line 4855,col 41)",
      "(line 4856,col 9)-(line 4856,col 34)",
      "(line 4857,col 9)-(line 4857,col 34)",
      "(line 4858,col 9)-(line 4858,col 34)",
      "(line 4859,col 9)-(line 4859,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeNoElemFloat()",
    "snippet": "@Test\n    public void testShiftRangeNoElemFloat() {\n        final float[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 1, 1, 1);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n    }",
    "begin_line": 4863,
    "end_line": 4870,
    "comment": "",
    "child_ranges": [
      "(line 4864,col 9)-(line 4864,col 43)",
      "(line 4865,col 9)-(line 4865,col 41)",
      "(line 4866,col 9)-(line 4866,col 34)",
      "(line 4867,col 9)-(line 4867,col 34)",
      "(line 4868,col 9)-(line 4868,col 34)",
      "(line 4869,col 9)-(line 4869,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeNoElemInt()",
    "snippet": "@Test\n    public void testShiftRangeNoElemInt() {\n        final int[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 1, 1, 1);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n    }",
    "begin_line": 4873,
    "end_line": 4880,
    "comment": "",
    "child_ranges": [
      "(line 4874,col 9)-(line 4874,col 41)",
      "(line 4875,col 9)-(line 4875,col 41)",
      "(line 4876,col 9)-(line 4876,col 34)",
      "(line 4877,col 9)-(line 4877,col 34)",
      "(line 4878,col 9)-(line 4878,col 34)",
      "(line 4879,col 9)-(line 4879,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeNoElemLong()",
    "snippet": "@Test\n    public void testShiftRangeNoElemLong() {\n        final long[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 1, 1, 1);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n    }",
    "begin_line": 4883,
    "end_line": 4890,
    "comment": "",
    "child_ranges": [
      "(line 4884,col 9)-(line 4884,col 42)",
      "(line 4885,col 9)-(line 4885,col 41)",
      "(line 4886,col 9)-(line 4886,col 34)",
      "(line 4887,col 9)-(line 4887,col 34)",
      "(line 4888,col 9)-(line 4888,col 34)",
      "(line 4889,col 9)-(line 4889,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeNoElemObject()",
    "snippet": "@Test\n    public void testShiftRangeNoElemObject() {\n        final String[] array \u003d {\"1\", \"2\", \"3\", \"4\"};\n        ArrayUtils.shift(array, 1, 1, 1);\n        assertEquals(\"1\", array[0]);\n        assertEquals(\"2\", array[1]);\n        assertEquals(\"3\", array[2]);\n        assertEquals(\"4\", array[3]);\n    }",
    "begin_line": 4893,
    "end_line": 4900,
    "comment": "",
    "child_ranges": [
      "(line 4894,col 9)-(line 4894,col 52)",
      "(line 4895,col 9)-(line 4895,col 41)",
      "(line 4896,col 9)-(line 4896,col 36)",
      "(line 4897,col 9)-(line 4897,col 36)",
      "(line 4898,col 9)-(line 4898,col 36)",
      "(line 4899,col 9)-(line 4899,col 36)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeNoElemShort()",
    "snippet": "@Test\n    public void testShiftRangeNoElemShort() {\n        final short[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 1, 1, 1);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n    }",
    "begin_line": 4903,
    "end_line": 4910,
    "comment": "",
    "child_ranges": [
      "(line 4904,col 9)-(line 4904,col 43)",
      "(line 4905,col 9)-(line 4905,col 41)",
      "(line 4906,col 9)-(line 4906,col 34)",
      "(line 4907,col 9)-(line 4907,col 34)",
      "(line 4908,col 9)-(line 4908,col 34)",
      "(line 4909,col 9)-(line 4909,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeNullByte()",
    "snippet": "@Test\n    public void testShiftRangeNullByte() {\n        final byte[] array \u003d null;\n        ArrayUtils.shift(array, 1, 1, 1);\n        assertNull(array);\n    }",
    "begin_line": 4913,
    "end_line": 4917,
    "comment": "",
    "child_ranges": [
      "(line 4914,col 9)-(line 4914,col 34)",
      "(line 4915,col 9)-(line 4915,col 41)",
      "(line 4916,col 9)-(line 4916,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeNullChar()",
    "snippet": "@Test\n    public void testShiftRangeNullChar() {\n        final char[] array \u003d null;\n        ArrayUtils.shift(array, 1, 1, 1);\n        assertNull(array);\n    }",
    "begin_line": 4920,
    "end_line": 4924,
    "comment": "",
    "child_ranges": [
      "(line 4921,col 9)-(line 4921,col 34)",
      "(line 4922,col 9)-(line 4922,col 41)",
      "(line 4923,col 9)-(line 4923,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeNullDouble()",
    "snippet": "@Test\n    public void testShiftRangeNullDouble() {\n        final double[] array \u003d null;\n        ArrayUtils.shift(array, 1, 1, 1);\n        assertNull(array);\n    }",
    "begin_line": 4927,
    "end_line": 4931,
    "comment": "",
    "child_ranges": [
      "(line 4928,col 9)-(line 4928,col 36)",
      "(line 4929,col 9)-(line 4929,col 41)",
      "(line 4930,col 9)-(line 4930,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeNullFloat()",
    "snippet": "@Test\n    public void testShiftRangeNullFloat() {\n        final float[] array \u003d null;\n        ArrayUtils.shift(array, 1, 1, 1);\n        assertNull(array);\n    }",
    "begin_line": 4934,
    "end_line": 4938,
    "comment": "",
    "child_ranges": [
      "(line 4935,col 9)-(line 4935,col 35)",
      "(line 4936,col 9)-(line 4936,col 41)",
      "(line 4937,col 9)-(line 4937,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeNullInt()",
    "snippet": "@Test\n    public void testShiftRangeNullInt() {\n        final int[] array \u003d null;\n        ArrayUtils.shift(array, 1, 1, 1);\n        assertNull(array);\n    }",
    "begin_line": 4941,
    "end_line": 4945,
    "comment": "",
    "child_ranges": [
      "(line 4942,col 9)-(line 4942,col 33)",
      "(line 4943,col 9)-(line 4943,col 41)",
      "(line 4944,col 9)-(line 4944,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeNullLong()",
    "snippet": "@Test\n    public void testShiftRangeNullLong() {\n        final long[] array \u003d null;\n        ArrayUtils.shift(array, 1, 1, 1);\n        assertNull(array);\n    }",
    "begin_line": 4948,
    "end_line": 4952,
    "comment": "",
    "child_ranges": [
      "(line 4949,col 9)-(line 4949,col 34)",
      "(line 4950,col 9)-(line 4950,col 41)",
      "(line 4951,col 9)-(line 4951,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeNullObject()",
    "snippet": "@Test\n    public void testShiftRangeNullObject() {\n        final String[] array \u003d null;\n        ArrayUtils.shift(array, 1, 1, 1);\n        assertNull(array);\n    }",
    "begin_line": 4955,
    "end_line": 4959,
    "comment": "",
    "child_ranges": [
      "(line 4956,col 9)-(line 4956,col 36)",
      "(line 4957,col 9)-(line 4957,col 41)",
      "(line 4958,col 9)-(line 4958,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeNullShort()",
    "snippet": "@Test\n    public void testShiftRangeNullShort() {\n        final short[] array \u003d null;\n\n        ArrayUtils.shift(array, 1, 1, 1);\n        assertNull(array);\n    }",
    "begin_line": 4962,
    "end_line": 4967,
    "comment": "",
    "child_ranges": [
      "(line 4963,col 9)-(line 4963,col 35)",
      "(line 4965,col 9)-(line 4965,col 41)",
      "(line 4966,col 9)-(line 4966,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeObject()",
    "snippet": "@Test\n    public void testShiftRangeObject() {\n        final String[] array \u003d {\"1\", \"2\", \"3\", \"4\", \"5\"};\n        ArrayUtils.shift(array, 1, 3, 1);\n        assertEquals(\"1\", array[0]);\n        assertEquals(\"3\", array[1]);\n        assertEquals(\"2\", array[2]);\n        assertEquals(\"4\", array[3]);\n        assertEquals(\"5\", array[4]);\n        ArrayUtils.shift(array, 1, 4, 2);\n        assertEquals(\"1\", array[0]);\n        assertEquals(\"2\", array[1]);\n        assertEquals(\"4\", array[2]);\n        assertEquals(\"3\", array[3]);\n        assertEquals(\"5\", array[4]);\n    }",
    "begin_line": 4970,
    "end_line": 4984,
    "comment": "",
    "child_ranges": [
      "(line 4971,col 9)-(line 4971,col 57)",
      "(line 4972,col 9)-(line 4972,col 41)",
      "(line 4973,col 9)-(line 4973,col 36)",
      "(line 4974,col 9)-(line 4974,col 36)",
      "(line 4975,col 9)-(line 4975,col 36)",
      "(line 4976,col 9)-(line 4976,col 36)",
      "(line 4977,col 9)-(line 4977,col 36)",
      "(line 4978,col 9)-(line 4978,col 41)",
      "(line 4979,col 9)-(line 4979,col 36)",
      "(line 4980,col 9)-(line 4980,col 36)",
      "(line 4981,col 9)-(line 4981,col 36)",
      "(line 4982,col 9)-(line 4982,col 36)",
      "(line 4983,col 9)-(line 4983,col 36)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftRangeShort()",
    "snippet": "@Test\n    public void testShiftRangeShort() {\n        final short[] array \u003d {1, 2, 3, 4, 5};\n        ArrayUtils.shift(array, 1, 3, 1);\n        assertEquals(1, array[0]);\n        assertEquals(3, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(4, array[3]);\n        assertEquals(5, array[4]);\n        ArrayUtils.shift(array, 1, 4, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(4, array[2]);\n        assertEquals(3, array[3]);\n        assertEquals(5, array[4]);\n    }",
    "begin_line": 4987,
    "end_line": 5001,
    "comment": "",
    "child_ranges": [
      "(line 4988,col 9)-(line 4988,col 46)",
      "(line 4989,col 9)-(line 4989,col 41)",
      "(line 4990,col 9)-(line 4990,col 34)",
      "(line 4991,col 9)-(line 4991,col 34)",
      "(line 4992,col 9)-(line 4992,col 34)",
      "(line 4993,col 9)-(line 4993,col 34)",
      "(line 4994,col 9)-(line 4994,col 34)",
      "(line 4995,col 9)-(line 4995,col 41)",
      "(line 4996,col 9)-(line 4996,col 34)",
      "(line 4997,col 9)-(line 4997,col 34)",
      "(line 4998,col 9)-(line 4998,col 34)",
      "(line 4999,col 9)-(line 4999,col 34)",
      "(line 5000,col 9)-(line 5000,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShiftShort()",
    "snippet": "@Test\n    public void testShiftShort() {\n        short[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.shift(array, 1);\n        assertEquals(4, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(3, array[3]);\n        ArrayUtils.shift(array, -1);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n        assertEquals(4, array[3]);\n        ArrayUtils.shift(array, 5);\n        assertEquals(4, array[0]);\n        assertEquals(1, array[1]);\n        assertEquals(2, array[2]);\n        assertEquals(3, array[3]);\n        ArrayUtils.shift(array, -3);\n        assertEquals(3, array[0]);\n        assertEquals(4, array[1]);\n        assertEquals(1, array[2]);\n        assertEquals(2, array[3]);\n        array \u003d new short[]{1, 2, 3, 4, 5};\n        ArrayUtils.shift(array, 2);\n        assertEquals(4, array[0]);\n        assertEquals(5, array[1]);\n        assertEquals(1, array[2]);\n        assertEquals(2, array[3]);\n        assertEquals(3, array[4]);\n    }",
    "begin_line": 5004,
    "end_line": 5033,
    "comment": "",
    "child_ranges": [
      "(line 5005,col 9)-(line 5005,col 37)",
      "(line 5006,col 9)-(line 5006,col 35)",
      "(line 5007,col 9)-(line 5007,col 34)",
      "(line 5008,col 9)-(line 5008,col 34)",
      "(line 5009,col 9)-(line 5009,col 34)",
      "(line 5010,col 9)-(line 5010,col 34)",
      "(line 5011,col 9)-(line 5011,col 36)",
      "(line 5012,col 9)-(line 5012,col 34)",
      "(line 5013,col 9)-(line 5013,col 34)",
      "(line 5014,col 9)-(line 5014,col 34)",
      "(line 5015,col 9)-(line 5015,col 34)",
      "(line 5016,col 9)-(line 5016,col 35)",
      "(line 5017,col 9)-(line 5017,col 34)",
      "(line 5018,col 9)-(line 5018,col 34)",
      "(line 5019,col 9)-(line 5019,col 34)",
      "(line 5020,col 9)-(line 5020,col 34)",
      "(line 5021,col 9)-(line 5021,col 36)",
      "(line 5022,col 9)-(line 5022,col 34)",
      "(line 5023,col 9)-(line 5023,col 34)",
      "(line 5024,col 9)-(line 5024,col 34)",
      "(line 5025,col 9)-(line 5025,col 34)",
      "(line 5026,col 9)-(line 5026,col 43)",
      "(line 5027,col 9)-(line 5027,col 35)",
      "(line 5028,col 9)-(line 5028,col 34)",
      "(line 5029,col 9)-(line 5029,col 34)",
      "(line 5030,col 9)-(line 5030,col 34)",
      "(line 5031,col 9)-(line 5031,col 34)",
      "(line 5032,col 9)-(line 5032,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShuffle()",
    "snippet": "@Test\n    public void testShuffle() {\n        final String[] array1 \u003d {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"};\n        final String[] array2 \u003d ArrayUtils.clone(array1);\n\n        ArrayUtils.shuffle(array1, new Random(SEED));\n        assertFalse(Arrays.equals(array1, array2));\n        for (final String element : array2) {\n            assertTrue(ArrayUtils.contains(array1, element), \"Element \" + element + \" not found\");\n        }\n    }",
    "begin_line": 5036,
    "end_line": 5045,
    "comment": "",
    "child_ranges": [
      "(line 5037,col 9)-(line 5037,col 84)",
      "(line 5038,col 9)-(line 5038,col 57)",
      "(line 5040,col 9)-(line 5040,col 53)",
      "(line 5041,col 9)-(line 5041,col 51)",
      "(line 5042,col 9)-(line 5044,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShuffleBoolean()",
    "snippet": "@Test\n    public void testShuffleBoolean() {\n        final boolean[] array1 \u003d {true, false, true, true, false, false, true, false, false, true};\n        final boolean[] array2 \u003d ArrayUtils.clone(array1);\n\n        ArrayUtils.shuffle(array1, new Random(SEED));\n        assertFalse(Arrays.equals(array1, array2));\n        assertEquals(5, ArrayUtils.removeAllOccurrences(array1, true).length);\n    }",
    "begin_line": 5048,
    "end_line": 5055,
    "comment": "",
    "child_ranges": [
      "(line 5049,col 9)-(line 5049,col 99)",
      "(line 5050,col 9)-(line 5050,col 58)",
      "(line 5052,col 9)-(line 5052,col 53)",
      "(line 5053,col 9)-(line 5053,col 51)",
      "(line 5054,col 9)-(line 5054,col 78)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShuffleByte()",
    "snippet": "@Test\n    public void testShuffleByte() {\n        final byte[] array1 \u003d {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n        final byte[] array2 \u003d ArrayUtils.clone(array1);\n\n        ArrayUtils.shuffle(array1, new Random(SEED));\n        assertFalse(Arrays.equals(array1, array2));\n        for (final byte element : array2) {\n            assertTrue(ArrayUtils.contains(array1, element), \"Element \" + element + \" not found\");\n        }\n    }",
    "begin_line": 5058,
    "end_line": 5067,
    "comment": "",
    "child_ranges": [
      "(line 5059,col 9)-(line 5059,col 62)",
      "(line 5060,col 9)-(line 5060,col 55)",
      "(line 5062,col 9)-(line 5062,col 53)",
      "(line 5063,col 9)-(line 5063,col 51)",
      "(line 5064,col 9)-(line 5066,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShuffleChar()",
    "snippet": "@Test\n    public void testShuffleChar() {\n        final char[] array1 \u003d {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n        final char[] array2 \u003d ArrayUtils.clone(array1);\n\n        ArrayUtils.shuffle(array1, new Random(SEED));\n        assertFalse(Arrays.equals(array1, array2));\n        for (final char element : array2) {\n            assertTrue(ArrayUtils.contains(array1, element), \"Element \" + element + \" not found\");\n        }\n    }",
    "begin_line": 5070,
    "end_line": 5079,
    "comment": "",
    "child_ranges": [
      "(line 5071,col 9)-(line 5071,col 62)",
      "(line 5072,col 9)-(line 5072,col 55)",
      "(line 5074,col 9)-(line 5074,col 53)",
      "(line 5075,col 9)-(line 5075,col 51)",
      "(line 5076,col 9)-(line 5078,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShuffleDouble()",
    "snippet": "@Test\n    public void testShuffleDouble() {\n        final double[] array1 \u003d {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n        final double[] array2 \u003d ArrayUtils.clone(array1);\n\n        ArrayUtils.shuffle(array1, new Random(SEED));\n        assertFalse(Arrays.equals(array1, array2));\n        for (final double element : array2) {\n            assertTrue(ArrayUtils.contains(array1, element), \"Element \" + element + \" not found\");\n        }\n    }",
    "begin_line": 5082,
    "end_line": 5091,
    "comment": "",
    "child_ranges": [
      "(line 5083,col 9)-(line 5083,col 64)",
      "(line 5084,col 9)-(line 5084,col 57)",
      "(line 5086,col 9)-(line 5086,col 53)",
      "(line 5087,col 9)-(line 5087,col 51)",
      "(line 5088,col 9)-(line 5090,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShuffleFloat()",
    "snippet": "@Test\n    public void testShuffleFloat() {\n        final float[] array1 \u003d {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n        final float[] array2 \u003d ArrayUtils.clone(array1);\n\n        ArrayUtils.shuffle(array1, new Random(SEED));\n        assertFalse(Arrays.equals(array1, array2));\n        for (final float element : array2) {\n            assertTrue(ArrayUtils.contains(array1, element), \"Element \" + element + \" not found\");\n        }\n    }",
    "begin_line": 5094,
    "end_line": 5103,
    "comment": "",
    "child_ranges": [
      "(line 5095,col 9)-(line 5095,col 63)",
      "(line 5096,col 9)-(line 5096,col 56)",
      "(line 5098,col 9)-(line 5098,col 53)",
      "(line 5099,col 9)-(line 5099,col 51)",
      "(line 5100,col 9)-(line 5102,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShuffleInt()",
    "snippet": "@Test\n    public void testShuffleInt() {\n        final int[] array1 \u003d {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n        final int[] array2 \u003d ArrayUtils.clone(array1);\n\n        ArrayUtils.shuffle(array1, new Random(SEED));\n        assertFalse(Arrays.equals(array1, array2));\n        for (final int element : array2) {\n            assertTrue(ArrayUtils.contains(array1, element), \"Element \" + element + \" not found\");\n        }\n    }",
    "begin_line": 5106,
    "end_line": 5115,
    "comment": "",
    "child_ranges": [
      "(line 5107,col 9)-(line 5107,col 61)",
      "(line 5108,col 9)-(line 5108,col 54)",
      "(line 5110,col 9)-(line 5110,col 53)",
      "(line 5111,col 9)-(line 5111,col 51)",
      "(line 5112,col 9)-(line 5114,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShuffleLong()",
    "snippet": "@Test\n    public void testShuffleLong() {\n        final long[] array1 \u003d {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n        final long[] array2 \u003d ArrayUtils.clone(array1);\n\n        ArrayUtils.shuffle(array1, new Random(SEED));\n        assertFalse(Arrays.equals(array1, array2));\n        for (final long element : array2) {\n            assertTrue(ArrayUtils.contains(array1, element), \"Element \" + element + \" not found\");\n        }\n    }",
    "begin_line": 5118,
    "end_line": 5127,
    "comment": "",
    "child_ranges": [
      "(line 5119,col 9)-(line 5119,col 62)",
      "(line 5120,col 9)-(line 5120,col 55)",
      "(line 5122,col 9)-(line 5122,col 53)",
      "(line 5123,col 9)-(line 5123,col 51)",
      "(line 5124,col 9)-(line 5126,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testShuffleShort()",
    "snippet": "@Test\n    public void testShuffleShort() {\n        final short[] array1 \u003d {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n        final short[] array2 \u003d ArrayUtils.clone(array1);\n\n        ArrayUtils.shuffle(array1, new Random(SEED));\n        assertFalse(Arrays.equals(array1, array2));\n        for (final short element : array2) {\n            assertTrue(ArrayUtils.contains(array1, element), \"Element \" + element + \" not found\");\n        }\n    }",
    "begin_line": 5130,
    "end_line": 5139,
    "comment": "",
    "child_ranges": [
      "(line 5131,col 9)-(line 5131,col 63)",
      "(line 5132,col 9)-(line 5132,col 56)",
      "(line 5134,col 9)-(line 5134,col 53)",
      "(line 5135,col 9)-(line 5135,col 51)",
      "(line 5136,col 9)-(line 5138,col 9)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSubarrayBoolean()",
    "snippet": "@Test\n    public void testSubarrayBoolean() {\n        final boolean[] nullArray \u003d null;\n        final boolean[] array \u003d {true, true, false, true, false, true};\n        final boolean[] leftSubarray \u003d {true, true, false, true};\n        final boolean[] midSubarray \u003d {true, false, true, false};\n        final boolean[] rightSubarray \u003d {false, true, false, true};\n\n        assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), \"0 start, mid end\");\n        assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), \"0 start, length end\");\n        assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), \"mid start, mid end\");\n        assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),\n                \"mid start, length end\");\n\n        assertNull(ArrayUtils.subarray(nullArray, 0, 3), \"null input\");\n        assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2),\n                \"empty array\");\n        assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 4, 2), \"start \u003e end\");\n        assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start \u003d\u003d end\");\n        assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),\n                \"start undershoot, normal end\");\n        assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 33, 4), \"start overshoot, any end\");\n        assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),\n                \"normal start, end overshoot\");\n        assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), \"start undershoot, end overshoot\");\n\n        // empty-return tests\n\n        assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2),\n                \"empty array, object test\");\n        assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 4, 1), \"start \u003e end, object test\");\n        assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start \u003d\u003d end, object test\");\n        assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 8733, 4),\n                \"start overshoot, any end, object test\");\n\n        // array type tests\n\n        assertSame(boolean.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), \"boolean type\");\n    }",
    "begin_line": 5142,
    "end_line": 5179,
    "comment": "",
    "child_ranges": [
      "(line 5143,col 9)-(line 5143,col 41)",
      "(line 5144,col 9)-(line 5144,col 71)",
      "(line 5145,col 9)-(line 5145,col 65)",
      "(line 5146,col 9)-(line 5146,col 65)",
      "(line 5147,col 9)-(line 5147,col 67)",
      "(line 5149,col 9)-(line 5149,col 108)",
      "(line 5150,col 9)-(line 5150,col 115)",
      "(line 5151,col 9)-(line 5151,col 109)",
      "(line 5152,col 9)-(line 5153,col 41)",
      "(line 5155,col 9)-(line 5155,col 71)",
      "(line 5156,col 9)-(line 5157,col 31)",
      "(line 5158,col 9)-(line 5158,col 102)",
      "(line 5159,col 9)-(line 5159,col 103)",
      "(line 5160,col 9)-(line 5161,col 48)",
      "(line 5162,col 9)-(line 5162,col 116)",
      "(line 5163,col 9)-(line 5164,col 47)",
      "(line 5165,col 9)-(line 5165,col 118)",
      "(line 5169,col 9)-(line 5170,col 44)",
      "(line 5171,col 9)-(line 5171,col 113)",
      "(line 5172,col 9)-(line 5172,col 114)",
      "(line 5173,col 9)-(line 5174,col 57)",
      "(line 5178,col 9)-(line 5178,col 114)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSubarrayByte()",
    "snippet": "@Test\n    public void testSubarrayByte() {\n        final byte[] nullArray \u003d null;\n        final byte[] array \u003d {10, 11, 12, 13, 14, 15};\n        final byte[] leftSubarray \u003d {10, 11, 12, 13};\n        final byte[] midSubarray \u003d {11, 12, 13, 14};\n        final byte[] rightSubarray \u003d {12, 13, 14, 15};\n\n        assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), \"0 start, mid end\");\n        assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), \"0 start, length end\");\n        assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), \"mid start, mid end\");\n        assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),\n                \"mid start, length end\");\n\n        assertNull(ArrayUtils.subarray(nullArray, 0, 3), \"null input\");\n        assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2),\n                \"empty array\");\n        assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 2), \"start \u003e end\");\n        assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start \u003d\u003d end\");\n        assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),\n                \"start undershoot, normal end\");\n        assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 33, 4), \"start overshoot, any end\");\n        assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),\n                \"normal start, end overshoot\");\n        assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), \"start undershoot, end overshoot\");\n\n        // empty-return tests\n\n        assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2),\n                \"empty array, object test\");\n        assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 1), \"start \u003e end, object test\");\n        assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start \u003d\u003d end, object test\");\n        assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 8733, 4),\n                \"start overshoot, any end, object test\");\n\n        // array type tests\n\n        assertSame(byte.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), \"byte type\");\n    }",
    "begin_line": 5182,
    "end_line": 5219,
    "comment": "",
    "child_ranges": [
      "(line 5183,col 9)-(line 5183,col 38)",
      "(line 5184,col 9)-(line 5184,col 54)",
      "(line 5185,col 9)-(line 5185,col 53)",
      "(line 5186,col 9)-(line 5186,col 52)",
      "(line 5187,col 9)-(line 5187,col 54)",
      "(line 5189,col 9)-(line 5189,col 108)",
      "(line 5190,col 9)-(line 5190,col 115)",
      "(line 5191,col 9)-(line 5191,col 109)",
      "(line 5192,col 9)-(line 5193,col 41)",
      "(line 5195,col 9)-(line 5195,col 71)",
      "(line 5196,col 9)-(line 5197,col 31)",
      "(line 5198,col 9)-(line 5198,col 99)",
      "(line 5199,col 9)-(line 5199,col 100)",
      "(line 5200,col 9)-(line 5201,col 48)",
      "(line 5202,col 9)-(line 5202,col 113)",
      "(line 5203,col 9)-(line 5204,col 47)",
      "(line 5205,col 9)-(line 5205,col 118)",
      "(line 5209,col 9)-(line 5210,col 44)",
      "(line 5211,col 9)-(line 5211,col 110)",
      "(line 5212,col 9)-(line 5212,col 111)",
      "(line 5213,col 9)-(line 5214,col 57)",
      "(line 5218,col 9)-(line 5218,col 108)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSubarrayDouble()",
    "snippet": "@Test\n    public void testSubarrayDouble() {\n        final double[] nullArray \u003d null;\n        final double[] array \u003d {10.123, 11.234, 12.345, 13.456, 14.567, 15.678};\n        final double[] leftSubarray \u003d {10.123, 11.234, 12.345, 13.456};\n        final double[] midSubarray \u003d {11.234, 12.345, 13.456, 14.567};\n        final double[] rightSubarray \u003d {12.345, 13.456, 14.567, 15.678};\n\n        assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), \"0 start, mid end\");\n        assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), \"0 start, length end\");\n        assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), \"mid start, mid end\");\n        assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),\n                \"mid start, length end\");\n\n        assertNull(ArrayUtils.subarray(nullArray, 0, 3), \"null input\");\n        assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2),\n                \"empty array\");\n        assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 4, 2), \"start \u003e end\");\n        assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start \u003d\u003d end\");\n        assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),\n                \"start undershoot, normal end\");\n        assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 33, 4), \"start overshoot, any end\");\n        assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),\n                \"normal start, end overshoot\");\n        assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), \"start undershoot, end overshoot\");\n\n        // empty-return tests\n\n        assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2),\n                \"empty array, object test\");\n        assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 4, 1), \"start \u003e end, object test\");\n        assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start \u003d\u003d end, object test\");\n        assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 8733, 4),\n                \"start overshoot, any end, object test\");\n\n        // array type tests\n\n        assertSame(double.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), \"double type\");\n    }",
    "begin_line": 5222,
    "end_line": 5259,
    "comment": "",
    "child_ranges": [
      "(line 5223,col 9)-(line 5223,col 40)",
      "(line 5224,col 9)-(line 5224,col 80)",
      "(line 5225,col 9)-(line 5225,col 71)",
      "(line 5226,col 9)-(line 5226,col 70)",
      "(line 5227,col 9)-(line 5227,col 72)",
      "(line 5229,col 9)-(line 5229,col 108)",
      "(line 5230,col 9)-(line 5230,col 115)",
      "(line 5231,col 9)-(line 5231,col 109)",
      "(line 5232,col 9)-(line 5233,col 41)",
      "(line 5235,col 9)-(line 5235,col 71)",
      "(line 5236,col 9)-(line 5237,col 31)",
      "(line 5238,col 9)-(line 5238,col 101)",
      "(line 5239,col 9)-(line 5239,col 102)",
      "(line 5240,col 9)-(line 5241,col 48)",
      "(line 5242,col 9)-(line 5242,col 115)",
      "(line 5243,col 9)-(line 5244,col 47)",
      "(line 5245,col 9)-(line 5245,col 118)",
      "(line 5249,col 9)-(line 5250,col 44)",
      "(line 5251,col 9)-(line 5251,col 112)",
      "(line 5252,col 9)-(line 5252,col 113)",
      "(line 5253,col 9)-(line 5254,col 57)",
      "(line 5258,col 9)-(line 5258,col 112)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSubarrayFloat()",
    "snippet": "@Test\n    public void testSubarrayFloat() {\n        final float[] nullArray \u003d null;\n        final float[] array \u003d {10, 11, 12, 13, 14, 15};\n        final float[] leftSubarray \u003d {10, 11, 12, 13};\n        final float[] midSubarray \u003d {11, 12, 13, 14};\n        final float[] rightSubarray \u003d {12, 13, 14, 15};\n\n        assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), \"0 start, mid end\");\n        assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), \"0 start, length end\");\n        assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), \"mid start, mid end\");\n        assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),\n                \"mid start, length end\");\n\n        assertNull(ArrayUtils.subarray(nullArray, 0, 3), \"null input\");\n        assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2),\n                \"empty array\");\n        assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 4, 2), \"start \u003e end\");\n        assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start \u003d\u003d end\");\n        assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),\n                \"start undershoot, normal end\");\n        assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 33, 4), \"start overshoot, any end\");\n        assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),\n                \"normal start, end overshoot\");\n        assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), \"start undershoot, end overshoot\");\n\n        // empty-return tests\n\n        assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2),\n                \"empty array, object test\");\n        assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 4, 1), \"start \u003e end, object test\");\n        assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start \u003d\u003d end, object test\");\n        assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 8733, 4),\n                \"start overshoot, any end, object test\");\n\n        // array type tests\n\n        assertSame(float.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), \"float type\");\n    }",
    "begin_line": 5262,
    "end_line": 5299,
    "comment": "",
    "child_ranges": [
      "(line 5263,col 9)-(line 5263,col 39)",
      "(line 5264,col 9)-(line 5264,col 55)",
      "(line 5265,col 9)-(line 5265,col 54)",
      "(line 5266,col 9)-(line 5266,col 53)",
      "(line 5267,col 9)-(line 5267,col 55)",
      "(line 5269,col 9)-(line 5269,col 108)",
      "(line 5270,col 9)-(line 5270,col 115)",
      "(line 5271,col 9)-(line 5271,col 109)",
      "(line 5272,col 9)-(line 5273,col 41)",
      "(line 5275,col 9)-(line 5275,col 71)",
      "(line 5276,col 9)-(line 5277,col 31)",
      "(line 5278,col 9)-(line 5278,col 100)",
      "(line 5279,col 9)-(line 5279,col 101)",
      "(line 5280,col 9)-(line 5281,col 48)",
      "(line 5282,col 9)-(line 5282,col 114)",
      "(line 5283,col 9)-(line 5284,col 47)",
      "(line 5285,col 9)-(line 5285,col 118)",
      "(line 5289,col 9)-(line 5290,col 44)",
      "(line 5291,col 9)-(line 5291,col 111)",
      "(line 5292,col 9)-(line 5292,col 112)",
      "(line 5293,col 9)-(line 5294,col 57)",
      "(line 5298,col 9)-(line 5298,col 110)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSubarrayInt()",
    "snippet": "@Test\n    public void testSubarrayInt() {\n        final int[] nullArray \u003d null;\n        final int[] array \u003d {10, 11, 12, 13, 14, 15};\n        final int[] leftSubarray \u003d {10, 11, 12, 13};\n        final int[] midSubarray \u003d {11, 12, 13, 14};\n        final int[] rightSubarray \u003d {12, 13, 14, 15};\n\n\n        assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), \"0 start, mid end\");\n\n        assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), \"0 start, length end\");\n\n        assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), \"mid start, mid end\");\n\n        assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),\n                \"mid start, length end\");\n\n\n        assertNull(ArrayUtils.subarray(nullArray, 0, 3), \"null input\");\n\n        assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2), \"empty array\");\n\n        assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 4, 2), \"start \u003e end\");\n\n        assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start \u003d\u003d end\");\n\n        assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),\n                \"start undershoot, normal end\");\n\n        assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 33, 4), \"start overshoot, any end\");\n\n        assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),\n                \"normal start, end overshoot\");\n\n        assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), \"start undershoot, end overshoot\");\n\n        // empty-return tests\n\n        assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2),\n                \"empty array, object test\");\n\n        assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 4, 1), \"start \u003e end, object test\");\n\n        assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start \u003d\u003d end, object test\");\n\n        assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 8733, 4),\n                \"start overshoot, any end, object test\");\n\n        // array type tests\n\n        assertSame(int.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), \"int type\");\n    }",
    "begin_line": 5302,
    "end_line": 5353,
    "comment": "",
    "child_ranges": [
      "(line 5303,col 9)-(line 5303,col 37)",
      "(line 5304,col 9)-(line 5304,col 53)",
      "(line 5305,col 9)-(line 5305,col 52)",
      "(line 5306,col 9)-(line 5306,col 51)",
      "(line 5307,col 9)-(line 5307,col 53)",
      "(line 5310,col 9)-(line 5310,col 108)",
      "(line 5312,col 9)-(line 5312,col 115)",
      "(line 5314,col 9)-(line 5314,col 109)",
      "(line 5316,col 9)-(line 5317,col 41)",
      "(line 5320,col 9)-(line 5320,col 71)",
      "(line 5322,col 9)-(line 5322,col 119)",
      "(line 5324,col 9)-(line 5324,col 98)",
      "(line 5326,col 9)-(line 5326,col 99)",
      "(line 5328,col 9)-(line 5329,col 48)",
      "(line 5331,col 9)-(line 5331,col 112)",
      "(line 5333,col 9)-(line 5334,col 47)",
      "(line 5336,col 9)-(line 5336,col 118)",
      "(line 5340,col 9)-(line 5341,col 44)",
      "(line 5343,col 9)-(line 5343,col 109)",
      "(line 5345,col 9)-(line 5345,col 110)",
      "(line 5347,col 9)-(line 5348,col 57)",
      "(line 5352,col 9)-(line 5352,col 106)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSubarrayLong()",
    "snippet": "@Test\n    public void testSubarrayLong() {\n        final long[] nullArray \u003d null;\n        final long[] array \u003d {999910, 999911, 999912, 999913, 999914, 999915};\n        final long[] leftSubarray \u003d {999910, 999911, 999912, 999913};\n        final long[] midSubarray \u003d {999911, 999912, 999913, 999914};\n        final long[] rightSubarray \u003d {999912, 999913, 999914, 999915};\n\n        assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), \"0 start, mid end\");\n\n        assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), \"0 start, length end\");\n\n        assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), \"mid start, mid end\");\n\n        assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),\n                \"mid start, length end\");\n\n        assertNull(ArrayUtils.subarray(nullArray, 0, 3), \"null input\");\n\n        assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2),\n                \"empty array\");\n\n        assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 4, 2), \"start \u003e end\");\n\n        assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start \u003d\u003d end\");\n\n        assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),\n                \"start undershoot, normal end\");\n\n        assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 33, 4), \"start overshoot, any end\");\n\n        assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),\n                \"normal start, end overshoot\");\n\n        assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), \"start undershoot, end overshoot\");\n\n        // empty-return tests\n\n        assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2),\n                \"empty array, object test\");\n\n        assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 4, 1), \"start \u003e end, object test\");\n\n        assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start \u003d\u003d end, object test\");\n\n        assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 8733, 4),\n                \"start overshoot, any end, object test\");\n\n        // array type tests\n\n        assertSame(long.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), \"long type\");\n\n    }",
    "begin_line": 5356,
    "end_line": 5407,
    "comment": "",
    "child_ranges": [
      "(line 5357,col 9)-(line 5357,col 38)",
      "(line 5358,col 9)-(line 5358,col 78)",
      "(line 5359,col 9)-(line 5359,col 69)",
      "(line 5360,col 9)-(line 5360,col 68)",
      "(line 5361,col 9)-(line 5361,col 70)",
      "(line 5363,col 9)-(line 5363,col 108)",
      "(line 5365,col 9)-(line 5365,col 115)",
      "(line 5367,col 9)-(line 5367,col 109)",
      "(line 5369,col 9)-(line 5370,col 41)",
      "(line 5372,col 9)-(line 5372,col 71)",
      "(line 5374,col 9)-(line 5375,col 31)",
      "(line 5377,col 9)-(line 5377,col 99)",
      "(line 5379,col 9)-(line 5379,col 100)",
      "(line 5381,col 9)-(line 5382,col 48)",
      "(line 5384,col 9)-(line 5384,col 113)",
      "(line 5386,col 9)-(line 5387,col 47)",
      "(line 5389,col 9)-(line 5389,col 118)",
      "(line 5393,col 9)-(line 5394,col 44)",
      "(line 5396,col 9)-(line 5396,col 110)",
      "(line 5398,col 9)-(line 5398,col 111)",
      "(line 5400,col 9)-(line 5401,col 57)",
      "(line 5405,col 9)-(line 5405,col 108)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSubarrayObject()",
    "snippet": "@Test\n    public void testSubarrayObject() {\n        final Object[] nullArray \u003d null;\n        final Object[] objectArray \u003d {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"};\n\n        assertEquals(\"abcd\", StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4)), \"0 start, mid end\");\n        assertEquals(\"abcdef\", StringUtils.join(ArrayUtils.subarray(objectArray, 0, objectArray.length)),\n                \"0 start, length end\");\n        assertEquals(\"bcd\", StringUtils.join(ArrayUtils.subarray(objectArray, 1, 4)), \"mid start, mid end\");\n        assertEquals(\"bcdef\", StringUtils.join(ArrayUtils.subarray(objectArray, 1, objectArray.length)),\n                \"mid start, length end\");\n\n        assertNull(ArrayUtils.subarray(nullArray, 0, 3), \"null input\");\n        assertEquals(\"\", StringUtils.join(ArrayUtils.subarray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2)), \"empty array\");\n        assertEquals(\"\", StringUtils.join(ArrayUtils.subarray(objectArray, 4, 2)), \"start \u003e end\");\n        assertEquals(\"\", StringUtils.join(ArrayUtils.subarray(objectArray, 3, 3)), \"start \u003d\u003d end\");\n        assertEquals(\"abcd\", StringUtils.join(ArrayUtils.subarray(objectArray, -2, 4)), \"start undershoot, normal end\");\n        assertEquals(\"\", StringUtils.join(ArrayUtils.subarray(objectArray, 33, 4)), \"start overshoot, any end\");\n        assertEquals(\"cdef\", StringUtils.join(ArrayUtils.subarray(objectArray, 2, 33)), \"normal start, end overshoot\");\n        assertEquals(\"abcdef\", StringUtils.join(ArrayUtils.subarray(objectArray, -2, 12)),\n                \"start undershoot, end overshoot\");\n\n        // array type tests\n        final Date[] dateArray \u003d {new java.sql.Date(new Date().getTime()),\n                new Date(), new Date(), new Date(), new Date()};\n\n        assertSame(Object.class, ArrayUtils.subarray(objectArray, 2, 4).getClass().getComponentType(), \"Object type\");\n        assertSame(Date.class, ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType(),\n                \"java.util.Date type\");\n        assertNotSame(java.sql.Date.class, ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType(),\n                \"java.sql.Date type\");\n        assertThrows(ClassCastException.class,\n                () -\u003e java.sql.Date[].class.cast(ArrayUtils.subarray(dateArray, 1, 3)),\n                \"Invalid downcast\");\n    }",
    "begin_line": 5410,
    "end_line": 5443,
    "comment": "",
    "child_ranges": [
      "(line 5411,col 9)-(line 5411,col 40)",
      "(line 5412,col 9)-(line 5412,col 68)",
      "(line 5414,col 9)-(line 5414,col 107)",
      "(line 5415,col 9)-(line 5416,col 39)",
      "(line 5417,col 9)-(line 5417,col 108)",
      "(line 5418,col 9)-(line 5419,col 41)",
      "(line 5421,col 9)-(line 5421,col 71)",
      "(line 5422,col 9)-(line 5422,col 116)",
      "(line 5423,col 9)-(line 5423,col 98)",
      "(line 5424,col 9)-(line 5424,col 99)",
      "(line 5425,col 9)-(line 5425,col 120)",
      "(line 5426,col 9)-(line 5426,col 112)",
      "(line 5427,col 9)-(line 5427,col 119)",
      "(line 5428,col 9)-(line 5429,col 51)",
      "(line 5432,col 9)-(line 5433,col 64)",
      "(line 5435,col 9)-(line 5435,col 118)",
      "(line 5436,col 9)-(line 5437,col 39)",
      "(line 5438,col 9)-(line 5439,col 38)",
      "(line 5440,col 9)-(line 5442,col 36)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSubarrayShort()",
    "snippet": "@Test\n    public void testSubarrayShort() {\n        final short[] nullArray \u003d null;\n        final short[] array \u003d {10, 11, 12, 13, 14, 15};\n        final short[] leftSubarray \u003d {10, 11, 12, 13};\n        final short[] midSubarray \u003d {11, 12, 13, 14};\n        final short[] rightSubarray \u003d {12, 13, 14, 15};\n\n        assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), \"0 start, mid end\");\n        assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), \"0 start, length end\");\n        assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), \"mid start, mid end\");\n        assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),\n                \"mid start, length end\");\n\n        assertNull(ArrayUtils.subarray(nullArray, 0, 3), \"null input\");\n        assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2),\n                \"empty array\");\n        assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 4, 2), \"start \u003e end\");\n        assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start \u003d\u003d end\");\n        assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),\n                \"start undershoot, normal end\");\n        assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 33, 4), \"start overshoot, any end\");\n        assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),\n                \"normal start, end overshoot\");\n        assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), \"start undershoot, end overshoot\");\n\n        // empty-return tests\n\n        assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2),\n                \"empty array, object test\");\n        assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 4, 1), \"start \u003e end, object test\");\n        assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start \u003d\u003d end, object test\");\n        assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 8733, 4),\n                \"start overshoot, any end, object test\");\n\n        // array type tests\n\n        assertSame(short.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), \"short type\");\n    }",
    "begin_line": 5446,
    "end_line": 5483,
    "comment": "",
    "child_ranges": [
      "(line 5447,col 9)-(line 5447,col 39)",
      "(line 5448,col 9)-(line 5448,col 55)",
      "(line 5449,col 9)-(line 5449,col 54)",
      "(line 5450,col 9)-(line 5450,col 53)",
      "(line 5451,col 9)-(line 5451,col 55)",
      "(line 5453,col 9)-(line 5453,col 108)",
      "(line 5454,col 9)-(line 5454,col 115)",
      "(line 5455,col 9)-(line 5455,col 109)",
      "(line 5456,col 9)-(line 5457,col 41)",
      "(line 5459,col 9)-(line 5459,col 71)",
      "(line 5460,col 9)-(line 5461,col 31)",
      "(line 5462,col 9)-(line 5462,col 100)",
      "(line 5463,col 9)-(line 5463,col 101)",
      "(line 5464,col 9)-(line 5465,col 48)",
      "(line 5466,col 9)-(line 5466,col 114)",
      "(line 5467,col 9)-(line 5468,col 47)",
      "(line 5469,col 9)-(line 5469,col 118)",
      "(line 5473,col 9)-(line 5474,col 44)",
      "(line 5475,col 9)-(line 5475,col 111)",
      "(line 5476,col 9)-(line 5476,col 112)",
      "(line 5477,col 9)-(line 5478,col 57)",
      "(line 5482,col 9)-(line 5482,col 110)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSubarrChar()",
    "snippet": "@Test\n    public void testSubarrChar() {\n        final char[] nullArray \u003d null;\n        final char[] array \u003d {\u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027d\u0027, \u0027e\u0027, \u0027f\u0027};\n        final char[] leftSubarray \u003d {\u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027d\u0027};\n        final char[] midSubarray \u003d {\u0027b\u0027, \u0027c\u0027, \u0027d\u0027, \u0027e\u0027};\n        final char[] rightSubarray \u003d {\u0027c\u0027, \u0027d\u0027, \u0027e\u0027, \u0027f\u0027};\n\n        assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), \"0 start, mid end\");\n        assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), \"0 start, length end\");\n        assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), \"mid start, mid end\");\n        assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),\n                \"mid start, length end\");\n\n        assertNull(ArrayUtils.subarray(nullArray, 0, 3), \"null input\");\n        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2),\n                \"empty array\");\n        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 4, 2), \"start \u003e end\");\n        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start \u003d\u003d end\");\n        assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),\n                \"start undershoot, normal end\");\n        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 33, 4), \"start overshoot, any end\");\n        assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),\n                \"normal start, end overshoot\");\n        assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), \"start undershoot, end overshoot\");\n\n        // empty-return tests\n\n        assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2),\n                \"empty array, object test\");\n        assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 4, 1), \"start \u003e end, object test\");\n        assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start \u003d\u003d end, object test\");\n        assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 8733, 4),\n                \"start overshoot, any end, object test\");\n\n        // array type tests\n\n        assertSame(char.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), \"char type\");\n    }",
    "begin_line": 5486,
    "end_line": 5523,
    "comment": "",
    "child_ranges": [
      "(line 5487,col 9)-(line 5487,col 38)",
      "(line 5488,col 9)-(line 5488,col 60)",
      "(line 5489,col 9)-(line 5489,col 57)",
      "(line 5490,col 9)-(line 5490,col 56)",
      "(line 5491,col 9)-(line 5491,col 58)",
      "(line 5493,col 9)-(line 5493,col 108)",
      "(line 5494,col 9)-(line 5494,col 115)",
      "(line 5495,col 9)-(line 5495,col 109)",
      "(line 5496,col 9)-(line 5497,col 41)",
      "(line 5499,col 9)-(line 5499,col 71)",
      "(line 5500,col 9)-(line 5501,col 31)",
      "(line 5502,col 9)-(line 5502,col 99)",
      "(line 5503,col 9)-(line 5503,col 100)",
      "(line 5504,col 9)-(line 5505,col 48)",
      "(line 5506,col 9)-(line 5506,col 113)",
      "(line 5507,col 9)-(line 5508,col 47)",
      "(line 5509,col 9)-(line 5509,col 118)",
      "(line 5513,col 9)-(line 5514,col 44)",
      "(line 5515,col 9)-(line 5515,col 110)",
      "(line 5516,col 9)-(line 5516,col 111)",
      "(line 5517,col 9)-(line 5518,col 57)",
      "(line 5522,col 9)-(line 5522,col 108)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapBoolean()",
    "snippet": "@Test\n    public void testSwapBoolean() {\n        final boolean[] array \u003d {true, false, false};\n        ArrayUtils.swap(array, 0, 2);\n        assertFalse(array[0]);\n        assertFalse(array[1]);\n        assertTrue(array[2]);\n    }",
    "begin_line": 5526,
    "end_line": 5532,
    "comment": "",
    "child_ranges": [
      "(line 5527,col 9)-(line 5527,col 53)",
      "(line 5528,col 9)-(line 5528,col 37)",
      "(line 5529,col 9)-(line 5529,col 30)",
      "(line 5530,col 9)-(line 5530,col 30)",
      "(line 5531,col 9)-(line 5531,col 29)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapBooleanRange()",
    "snippet": "@Test\n    public void testSwapBooleanRange() {\n        boolean[] array \u003d {false, false, true, true};\n        ArrayUtils.swap(array, 0, 2, 2);\n        assertTrue(array[0]);\n        assertTrue(array[1]);\n        assertFalse(array[2]);\n        assertFalse(array[3]);\n\n        array \u003d new boolean[]{false, true, false};\n        ArrayUtils.swap(array, 0, 3);\n        assertFalse(array[0]);\n        assertTrue(array[1]);\n        assertFalse(array[2]);\n\n        array \u003d new boolean[]{true, true, false};\n        ArrayUtils.swap(array, 0, 2, 2);\n        assertFalse(array[0]);\n        assertTrue(array[1]);\n        assertTrue(array[2]);\n\n        array \u003d new boolean[]{true, true, false};\n        ArrayUtils.swap(array, -1, 2, 2);\n        assertFalse(array[0]);\n        assertTrue(array[1]);\n        assertTrue(array[2]);\n\n        array \u003d new boolean[]{true, true, false};\n        ArrayUtils.swap(array, 0, -1, 2);\n        assertTrue(array[0]);\n        assertTrue(array[1]);\n        assertFalse(array[2]);\n\n        array \u003d new boolean[]{true, true, false};\n        ArrayUtils.swap(array, -1, -1, 2);\n        assertTrue(array[0]);\n        assertTrue(array[1]);\n        assertFalse(array[2]);\n    }",
    "begin_line": 5535,
    "end_line": 5572,
    "comment": "",
    "child_ranges": [
      "(line 5536,col 9)-(line 5536,col 53)",
      "(line 5537,col 9)-(line 5537,col 40)",
      "(line 5538,col 9)-(line 5538,col 29)",
      "(line 5539,col 9)-(line 5539,col 29)",
      "(line 5540,col 9)-(line 5540,col 30)",
      "(line 5541,col 9)-(line 5541,col 30)",
      "(line 5543,col 9)-(line 5543,col 50)",
      "(line 5544,col 9)-(line 5544,col 37)",
      "(line 5545,col 9)-(line 5545,col 30)",
      "(line 5546,col 9)-(line 5546,col 29)",
      "(line 5547,col 9)-(line 5547,col 30)",
      "(line 5549,col 9)-(line 5549,col 49)",
      "(line 5550,col 9)-(line 5550,col 40)",
      "(line 5551,col 9)-(line 5551,col 30)",
      "(line 5552,col 9)-(line 5552,col 29)",
      "(line 5553,col 9)-(line 5553,col 29)",
      "(line 5555,col 9)-(line 5555,col 49)",
      "(line 5556,col 9)-(line 5556,col 41)",
      "(line 5557,col 9)-(line 5557,col 30)",
      "(line 5558,col 9)-(line 5558,col 29)",
      "(line 5559,col 9)-(line 5559,col 29)",
      "(line 5561,col 9)-(line 5561,col 49)",
      "(line 5562,col 9)-(line 5562,col 41)",
      "(line 5563,col 9)-(line 5563,col 29)",
      "(line 5564,col 9)-(line 5564,col 29)",
      "(line 5565,col 9)-(line 5565,col 30)",
      "(line 5567,col 9)-(line 5567,col 49)",
      "(line 5568,col 9)-(line 5568,col 42)",
      "(line 5569,col 9)-(line 5569,col 29)",
      "(line 5570,col 9)-(line 5570,col 29)",
      "(line 5571,col 9)-(line 5571,col 30)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapByte()",
    "snippet": "@Test\n    public void testSwapByte() {\n        final byte[] array \u003d {1, 2, 3};\n        ArrayUtils.swap(array, 0, 2);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n    }",
    "begin_line": 5575,
    "end_line": 5581,
    "comment": "",
    "child_ranges": [
      "(line 5576,col 9)-(line 5576,col 39)",
      "(line 5577,col 9)-(line 5577,col 37)",
      "(line 5578,col 9)-(line 5578,col 34)",
      "(line 5579,col 9)-(line 5579,col 34)",
      "(line 5580,col 9)-(line 5580,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapByteRange()",
    "snippet": "@Test\n    public void testSwapByteRange() {\n        byte[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.swap(array, 0, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(4, array[1]);\n        assertEquals(1, array[2]);\n        assertEquals(2, array[3]);\n\n        array \u003d new byte[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, 3);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n\n        array \u003d new byte[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n\n        array \u003d new byte[]{1, 2, 3};\n        ArrayUtils.swap(array, -1, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n\n        array \u003d new byte[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, -1, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n\n        array \u003d new byte[]{1, 2, 3};\n        ArrayUtils.swap(array, -1, -1, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n    }",
    "begin_line": 5584,
    "end_line": 5621,
    "comment": "",
    "child_ranges": [
      "(line 5585,col 9)-(line 5585,col 36)",
      "(line 5586,col 9)-(line 5586,col 40)",
      "(line 5587,col 9)-(line 5587,col 34)",
      "(line 5588,col 9)-(line 5588,col 34)",
      "(line 5589,col 9)-(line 5589,col 34)",
      "(line 5590,col 9)-(line 5590,col 34)",
      "(line 5592,col 9)-(line 5592,col 36)",
      "(line 5593,col 9)-(line 5593,col 37)",
      "(line 5594,col 9)-(line 5594,col 34)",
      "(line 5595,col 9)-(line 5595,col 34)",
      "(line 5596,col 9)-(line 5596,col 34)",
      "(line 5598,col 9)-(line 5598,col 36)",
      "(line 5599,col 9)-(line 5599,col 40)",
      "(line 5600,col 9)-(line 5600,col 34)",
      "(line 5601,col 9)-(line 5601,col 34)",
      "(line 5602,col 9)-(line 5602,col 34)",
      "(line 5604,col 9)-(line 5604,col 36)",
      "(line 5605,col 9)-(line 5605,col 41)",
      "(line 5606,col 9)-(line 5606,col 34)",
      "(line 5607,col 9)-(line 5607,col 34)",
      "(line 5608,col 9)-(line 5608,col 34)",
      "(line 5610,col 9)-(line 5610,col 36)",
      "(line 5611,col 9)-(line 5611,col 41)",
      "(line 5612,col 9)-(line 5612,col 34)",
      "(line 5613,col 9)-(line 5613,col 34)",
      "(line 5614,col 9)-(line 5614,col 34)",
      "(line 5616,col 9)-(line 5616,col 36)",
      "(line 5617,col 9)-(line 5617,col 42)",
      "(line 5618,col 9)-(line 5618,col 34)",
      "(line 5619,col 9)-(line 5619,col 34)",
      "(line 5620,col 9)-(line 5620,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapChar()",
    "snippet": "@Test\n    public void testSwapChar() {\n        char[] array \u003d {1, 2, 3};\n        ArrayUtils.swap(array, 0, 2);\n        assertArrayEquals(new char[]{3, 2, 1}, array);\n\n        array \u003d new char[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, 0);\n        assertArrayEquals(new char[]{1, 2, 3}, array);\n\n        array \u003d new char[]{1, 2, 3};\n        ArrayUtils.swap(array, 1, 0);\n        assertArrayEquals(new char[]{2, 1, 3}, array);\n    }",
    "begin_line": 5624,
    "end_line": 5636,
    "comment": "",
    "child_ranges": [
      "(line 5625,col 9)-(line 5625,col 33)",
      "(line 5626,col 9)-(line 5626,col 37)",
      "(line 5627,col 9)-(line 5627,col 54)",
      "(line 5629,col 9)-(line 5629,col 36)",
      "(line 5630,col 9)-(line 5630,col 37)",
      "(line 5631,col 9)-(line 5631,col 54)",
      "(line 5633,col 9)-(line 5633,col 36)",
      "(line 5634,col 9)-(line 5634,col 37)",
      "(line 5635,col 9)-(line 5635,col 54)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapCharRange()",
    "snippet": "@Test\n    public void testSwapCharRange() {\n        char[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.swap(array, 0, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(4, array[1]);\n        assertEquals(1, array[2]);\n        assertEquals(2, array[3]);\n\n        array \u003d new char[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, 3);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n\n        array \u003d new char[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n\n        array \u003d new char[]{1, 2, 3};\n        ArrayUtils.swap(array, -1, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n\n        array \u003d new char[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, -1, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n\n        array \u003d new char[]{1, 2, 3};\n        ArrayUtils.swap(array, -1, -1, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n    }",
    "begin_line": 5639,
    "end_line": 5676,
    "comment": "",
    "child_ranges": [
      "(line 5640,col 9)-(line 5640,col 36)",
      "(line 5641,col 9)-(line 5641,col 40)",
      "(line 5642,col 9)-(line 5642,col 34)",
      "(line 5643,col 9)-(line 5643,col 34)",
      "(line 5644,col 9)-(line 5644,col 34)",
      "(line 5645,col 9)-(line 5645,col 34)",
      "(line 5647,col 9)-(line 5647,col 36)",
      "(line 5648,col 9)-(line 5648,col 37)",
      "(line 5649,col 9)-(line 5649,col 34)",
      "(line 5650,col 9)-(line 5650,col 34)",
      "(line 5651,col 9)-(line 5651,col 34)",
      "(line 5653,col 9)-(line 5653,col 36)",
      "(line 5654,col 9)-(line 5654,col 40)",
      "(line 5655,col 9)-(line 5655,col 34)",
      "(line 5656,col 9)-(line 5656,col 34)",
      "(line 5657,col 9)-(line 5657,col 34)",
      "(line 5659,col 9)-(line 5659,col 36)",
      "(line 5660,col 9)-(line 5660,col 41)",
      "(line 5661,col 9)-(line 5661,col 34)",
      "(line 5662,col 9)-(line 5662,col 34)",
      "(line 5663,col 9)-(line 5663,col 34)",
      "(line 5665,col 9)-(line 5665,col 36)",
      "(line 5666,col 9)-(line 5666,col 41)",
      "(line 5667,col 9)-(line 5667,col 34)",
      "(line 5668,col 9)-(line 5668,col 34)",
      "(line 5669,col 9)-(line 5669,col 34)",
      "(line 5671,col 9)-(line 5671,col 36)",
      "(line 5672,col 9)-(line 5672,col 42)",
      "(line 5673,col 9)-(line 5673,col 34)",
      "(line 5674,col 9)-(line 5674,col 34)",
      "(line 5675,col 9)-(line 5675,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapDouble()",
    "snippet": "@Test\n    public void testSwapDouble() {\n        final double[] array \u003d {1, 2, 3};\n        ArrayUtils.swap(array, 0, 2);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n    }",
    "begin_line": 5679,
    "end_line": 5685,
    "comment": "",
    "child_ranges": [
      "(line 5680,col 9)-(line 5680,col 41)",
      "(line 5681,col 9)-(line 5681,col 37)",
      "(line 5682,col 9)-(line 5682,col 34)",
      "(line 5683,col 9)-(line 5683,col 34)",
      "(line 5684,col 9)-(line 5684,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapDoubleRange()",
    "snippet": "@Test\n    public void testSwapDoubleRange() {\n        double[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.swap(array, 0, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(4, array[1]);\n        assertEquals(1, array[2]);\n        assertEquals(2, array[3]);\n\n        array \u003d new double[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, 3);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n\n        array \u003d new double[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n\n        array \u003d new double[]{1, 2, 3};\n        ArrayUtils.swap(array, -1, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n\n        array \u003d new double[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, -1, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n\n        array \u003d new double[]{1, 2, 3};\n        ArrayUtils.swap(array, -1, -1, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n    }",
    "begin_line": 5688,
    "end_line": 5725,
    "comment": "",
    "child_ranges": [
      "(line 5689,col 9)-(line 5689,col 38)",
      "(line 5690,col 9)-(line 5690,col 40)",
      "(line 5691,col 9)-(line 5691,col 34)",
      "(line 5692,col 9)-(line 5692,col 34)",
      "(line 5693,col 9)-(line 5693,col 34)",
      "(line 5694,col 9)-(line 5694,col 34)",
      "(line 5696,col 9)-(line 5696,col 38)",
      "(line 5697,col 9)-(line 5697,col 37)",
      "(line 5698,col 9)-(line 5698,col 34)",
      "(line 5699,col 9)-(line 5699,col 34)",
      "(line 5700,col 9)-(line 5700,col 34)",
      "(line 5702,col 9)-(line 5702,col 38)",
      "(line 5703,col 9)-(line 5703,col 40)",
      "(line 5704,col 9)-(line 5704,col 34)",
      "(line 5705,col 9)-(line 5705,col 34)",
      "(line 5706,col 9)-(line 5706,col 34)",
      "(line 5708,col 9)-(line 5708,col 38)",
      "(line 5709,col 9)-(line 5709,col 41)",
      "(line 5710,col 9)-(line 5710,col 34)",
      "(line 5711,col 9)-(line 5711,col 34)",
      "(line 5712,col 9)-(line 5712,col 34)",
      "(line 5714,col 9)-(line 5714,col 38)",
      "(line 5715,col 9)-(line 5715,col 41)",
      "(line 5716,col 9)-(line 5716,col 34)",
      "(line 5717,col 9)-(line 5717,col 34)",
      "(line 5718,col 9)-(line 5718,col 34)",
      "(line 5720,col 9)-(line 5720,col 38)",
      "(line 5721,col 9)-(line 5721,col 42)",
      "(line 5722,col 9)-(line 5722,col 34)",
      "(line 5723,col 9)-(line 5723,col 34)",
      "(line 5724,col 9)-(line 5724,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapEmptyBooleanArray()",
    "snippet": "@Test\n    public void testSwapEmptyBooleanArray() {\n        final boolean[] array \u003d {};\n        ArrayUtils.swap(array, 0, 2);\n        assertEquals(0, array.length);\n    }",
    "begin_line": 5728,
    "end_line": 5732,
    "comment": "",
    "child_ranges": [
      "(line 5729,col 9)-(line 5729,col 35)",
      "(line 5730,col 9)-(line 5730,col 37)",
      "(line 5731,col 9)-(line 5731,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapEmptyByteArray()",
    "snippet": "@Test\n    public void testSwapEmptyByteArray() {\n        final byte[] array \u003d {};\n        ArrayUtils.swap(array, 0, 2);\n        assertEquals(0, array.length);\n    }",
    "begin_line": 5735,
    "end_line": 5739,
    "comment": "",
    "child_ranges": [
      "(line 5736,col 9)-(line 5736,col 32)",
      "(line 5737,col 9)-(line 5737,col 37)",
      "(line 5738,col 9)-(line 5738,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapEmptyCharArray()",
    "snippet": "@Test\n    public void testSwapEmptyCharArray() {\n        final char[] array \u003d {};\n        ArrayUtils.swap(array, 0, 2);\n        assertEquals(0, array.length);\n    }",
    "begin_line": 5742,
    "end_line": 5746,
    "comment": "",
    "child_ranges": [
      "(line 5743,col 9)-(line 5743,col 32)",
      "(line 5744,col 9)-(line 5744,col 37)",
      "(line 5745,col 9)-(line 5745,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapEmptyDoubleArray()",
    "snippet": "@Test\n    public void testSwapEmptyDoubleArray() {\n        final double[] array \u003d {};\n        ArrayUtils.swap(array, 0, 2);\n        assertEquals(0, array.length);\n    }",
    "begin_line": 5749,
    "end_line": 5753,
    "comment": "",
    "child_ranges": [
      "(line 5750,col 9)-(line 5750,col 34)",
      "(line 5751,col 9)-(line 5751,col 37)",
      "(line 5752,col 9)-(line 5752,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapEmptyFloatArray()",
    "snippet": "@Test\n    public void testSwapEmptyFloatArray() {\n        final float[] array \u003d {};\n        ArrayUtils.swap(array, 0, 2);\n        assertEquals(0, array.length);\n    }",
    "begin_line": 5756,
    "end_line": 5760,
    "comment": "",
    "child_ranges": [
      "(line 5757,col 9)-(line 5757,col 33)",
      "(line 5758,col 9)-(line 5758,col 37)",
      "(line 5759,col 9)-(line 5759,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapEmptyIntArray()",
    "snippet": "@Test\n    public void testSwapEmptyIntArray() {\n        final int[] array \u003d {};\n        ArrayUtils.swap(array, 0, 2);\n        assertEquals(0, array.length);\n    }",
    "begin_line": 5763,
    "end_line": 5767,
    "comment": "",
    "child_ranges": [
      "(line 5764,col 9)-(line 5764,col 31)",
      "(line 5765,col 9)-(line 5765,col 37)",
      "(line 5766,col 9)-(line 5766,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapEmptyLongArray()",
    "snippet": "@Test\n    public void testSwapEmptyLongArray() {\n        final long[] array \u003d {};\n        ArrayUtils.swap(array, 0, 2);\n        assertEquals(0, array.length);\n    }",
    "begin_line": 5770,
    "end_line": 5774,
    "comment": "",
    "child_ranges": [
      "(line 5771,col 9)-(line 5771,col 32)",
      "(line 5772,col 9)-(line 5772,col 37)",
      "(line 5773,col 9)-(line 5773,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapEmptyObjectArray()",
    "snippet": "@Test\n    public void testSwapEmptyObjectArray() {\n        final String[] array \u003d {};\n        ArrayUtils.swap(array, 0, 2);\n        assertEquals(0, array.length);\n    }",
    "begin_line": 5777,
    "end_line": 5781,
    "comment": "",
    "child_ranges": [
      "(line 5778,col 9)-(line 5778,col 34)",
      "(line 5779,col 9)-(line 5779,col 37)",
      "(line 5780,col 9)-(line 5780,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapEmptyShortArray()",
    "snippet": "@Test\n    public void testSwapEmptyShortArray() {\n        final short[] array \u003d {};\n        ArrayUtils.swap(array, 0, 2);\n        assertEquals(0, array.length);\n    }",
    "begin_line": 5784,
    "end_line": 5788,
    "comment": "",
    "child_ranges": [
      "(line 5785,col 9)-(line 5785,col 33)",
      "(line 5786,col 9)-(line 5786,col 37)",
      "(line 5787,col 9)-(line 5787,col 38)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapFloat()",
    "snippet": "@Test\n    public void testSwapFloat() {\n        final float[] array \u003d {1, 2, 3};\n        ArrayUtils.swap(array, 0, 2);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n    }",
    "begin_line": 5791,
    "end_line": 5797,
    "comment": "",
    "child_ranges": [
      "(line 5792,col 9)-(line 5792,col 40)",
      "(line 5793,col 9)-(line 5793,col 37)",
      "(line 5794,col 9)-(line 5794,col 34)",
      "(line 5795,col 9)-(line 5795,col 34)",
      "(line 5796,col 9)-(line 5796,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapFloatRange()",
    "snippet": "@Test\n    public void testSwapFloatRange() {\n        float[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.swap(array, 0, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(4, array[1]);\n        assertEquals(1, array[2]);\n        assertEquals(2, array[3]);\n\n        array \u003d new float[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, 3);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n\n        array \u003d new float[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n\n        array \u003d new float[]{1, 2, 3};\n        ArrayUtils.swap(array, -1, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n\n        array \u003d new float[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, -1, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n\n        array \u003d new float[]{1, 2, 3};\n        ArrayUtils.swap(array, -1, -1, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n    }",
    "begin_line": 5800,
    "end_line": 5837,
    "comment": "",
    "child_ranges": [
      "(line 5801,col 9)-(line 5801,col 37)",
      "(line 5802,col 9)-(line 5802,col 40)",
      "(line 5803,col 9)-(line 5803,col 34)",
      "(line 5804,col 9)-(line 5804,col 34)",
      "(line 5805,col 9)-(line 5805,col 34)",
      "(line 5806,col 9)-(line 5806,col 34)",
      "(line 5808,col 9)-(line 5808,col 37)",
      "(line 5809,col 9)-(line 5809,col 37)",
      "(line 5810,col 9)-(line 5810,col 34)",
      "(line 5811,col 9)-(line 5811,col 34)",
      "(line 5812,col 9)-(line 5812,col 34)",
      "(line 5814,col 9)-(line 5814,col 37)",
      "(line 5815,col 9)-(line 5815,col 40)",
      "(line 5816,col 9)-(line 5816,col 34)",
      "(line 5817,col 9)-(line 5817,col 34)",
      "(line 5818,col 9)-(line 5818,col 34)",
      "(line 5820,col 9)-(line 5820,col 37)",
      "(line 5821,col 9)-(line 5821,col 41)",
      "(line 5822,col 9)-(line 5822,col 34)",
      "(line 5823,col 9)-(line 5823,col 34)",
      "(line 5824,col 9)-(line 5824,col 34)",
      "(line 5826,col 9)-(line 5826,col 37)",
      "(line 5827,col 9)-(line 5827,col 41)",
      "(line 5828,col 9)-(line 5828,col 34)",
      "(line 5829,col 9)-(line 5829,col 34)",
      "(line 5830,col 9)-(line 5830,col 34)",
      "(line 5832,col 9)-(line 5832,col 37)",
      "(line 5833,col 9)-(line 5833,col 42)",
      "(line 5834,col 9)-(line 5834,col 34)",
      "(line 5835,col 9)-(line 5835,col 34)",
      "(line 5836,col 9)-(line 5836,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapInt()",
    "snippet": "@Test\n    public void testSwapInt() {\n        final int[] array \u003d {1, 2, 3};\n        ArrayUtils.swap(array, 0, 2);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n    }",
    "begin_line": 5840,
    "end_line": 5846,
    "comment": "",
    "child_ranges": [
      "(line 5841,col 9)-(line 5841,col 38)",
      "(line 5842,col 9)-(line 5842,col 37)",
      "(line 5843,col 9)-(line 5843,col 34)",
      "(line 5844,col 9)-(line 5844,col 34)",
      "(line 5845,col 9)-(line 5845,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapIntExchangedOffsets()",
    "snippet": "@Test\n    public void testSwapIntExchangedOffsets() {\n        int[] array;\n        array \u003d new int[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, 1, 2);\n        assertArrayEquals(new int[]{2, 3, 1}, array);\n\n        array \u003d new int[]{1, 2, 3};\n        ArrayUtils.swap(array, 1, 0, 2);\n        assertArrayEquals(new int[]{2, 3, 1}, array);\n    }",
    "begin_line": 5849,
    "end_line": 5858,
    "comment": "",
    "child_ranges": [
      "(line 5850,col 9)-(line 5850,col 20)",
      "(line 5851,col 9)-(line 5851,col 35)",
      "(line 5852,col 9)-(line 5852,col 40)",
      "(line 5853,col 9)-(line 5853,col 53)",
      "(line 5855,col 9)-(line 5855,col 35)",
      "(line 5856,col 9)-(line 5856,col 40)",
      "(line 5857,col 9)-(line 5857,col 53)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapIntRange()",
    "snippet": "@Test\n    public void testSwapIntRange() {\n        int[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.swap(array, 0, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(4, array[1]);\n        assertEquals(1, array[2]);\n        assertEquals(2, array[3]);\n\n        array \u003d new int[]{1, 2, 3};\n        ArrayUtils.swap(array, 3, 0);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n\n        array \u003d new int[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n\n        array \u003d new int[]{1, 2, 3};\n        ArrayUtils.swap(array, -1, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n\n        array \u003d new int[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, -1, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n\n        array \u003d new int[]{1, 2, 3};\n        ArrayUtils.swap(array, -1, -1, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n    }",
    "begin_line": 5861,
    "end_line": 5898,
    "comment": "",
    "child_ranges": [
      "(line 5862,col 9)-(line 5862,col 35)",
      "(line 5863,col 9)-(line 5863,col 40)",
      "(line 5864,col 9)-(line 5864,col 34)",
      "(line 5865,col 9)-(line 5865,col 34)",
      "(line 5866,col 9)-(line 5866,col 34)",
      "(line 5867,col 9)-(line 5867,col 34)",
      "(line 5869,col 9)-(line 5869,col 35)",
      "(line 5870,col 9)-(line 5870,col 37)",
      "(line 5871,col 9)-(line 5871,col 34)",
      "(line 5872,col 9)-(line 5872,col 34)",
      "(line 5873,col 9)-(line 5873,col 34)",
      "(line 5875,col 9)-(line 5875,col 35)",
      "(line 5876,col 9)-(line 5876,col 40)",
      "(line 5877,col 9)-(line 5877,col 34)",
      "(line 5878,col 9)-(line 5878,col 34)",
      "(line 5879,col 9)-(line 5879,col 34)",
      "(line 5881,col 9)-(line 5881,col 35)",
      "(line 5882,col 9)-(line 5882,col 41)",
      "(line 5883,col 9)-(line 5883,col 34)",
      "(line 5884,col 9)-(line 5884,col 34)",
      "(line 5885,col 9)-(line 5885,col 34)",
      "(line 5887,col 9)-(line 5887,col 35)",
      "(line 5888,col 9)-(line 5888,col 41)",
      "(line 5889,col 9)-(line 5889,col 34)",
      "(line 5890,col 9)-(line 5890,col 34)",
      "(line 5891,col 9)-(line 5891,col 34)",
      "(line 5893,col 9)-(line 5893,col 35)",
      "(line 5894,col 9)-(line 5894,col 42)",
      "(line 5895,col 9)-(line 5895,col 34)",
      "(line 5896,col 9)-(line 5896,col 34)",
      "(line 5897,col 9)-(line 5897,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapLong()",
    "snippet": "@Test\n    public void testSwapLong() {\n        final long[] array \u003d {1, 2, 3};\n        ArrayUtils.swap(array, 0, 2);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n    }",
    "begin_line": 5901,
    "end_line": 5907,
    "comment": "",
    "child_ranges": [
      "(line 5902,col 9)-(line 5902,col 39)",
      "(line 5903,col 9)-(line 5903,col 37)",
      "(line 5904,col 9)-(line 5904,col 34)",
      "(line 5905,col 9)-(line 5905,col 34)",
      "(line 5906,col 9)-(line 5906,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapLongRange()",
    "snippet": "@Test\n    public void testSwapLongRange() {\n        long[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.swap(array, 0, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(4, array[1]);\n        assertEquals(1, array[2]);\n        assertEquals(2, array[3]);\n\n        array \u003d new long[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, 3);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n\n        array \u003d new long[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n\n        array \u003d new long[]{1, 2, 3};\n        ArrayUtils.swap(array, -1, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n\n        array \u003d new long[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, -1, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n\n        array \u003d new long[]{1, 2, 3};\n        ArrayUtils.swap(array, -1, -1, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n    }",
    "begin_line": 5910,
    "end_line": 5947,
    "comment": "",
    "child_ranges": [
      "(line 5911,col 9)-(line 5911,col 36)",
      "(line 5912,col 9)-(line 5912,col 40)",
      "(line 5913,col 9)-(line 5913,col 34)",
      "(line 5914,col 9)-(line 5914,col 34)",
      "(line 5915,col 9)-(line 5915,col 34)",
      "(line 5916,col 9)-(line 5916,col 34)",
      "(line 5918,col 9)-(line 5918,col 36)",
      "(line 5919,col 9)-(line 5919,col 37)",
      "(line 5920,col 9)-(line 5920,col 34)",
      "(line 5921,col 9)-(line 5921,col 34)",
      "(line 5922,col 9)-(line 5922,col 34)",
      "(line 5924,col 9)-(line 5924,col 36)",
      "(line 5925,col 9)-(line 5925,col 40)",
      "(line 5926,col 9)-(line 5926,col 34)",
      "(line 5927,col 9)-(line 5927,col 34)",
      "(line 5928,col 9)-(line 5928,col 34)",
      "(line 5930,col 9)-(line 5930,col 36)",
      "(line 5931,col 9)-(line 5931,col 41)",
      "(line 5932,col 9)-(line 5932,col 34)",
      "(line 5933,col 9)-(line 5933,col 34)",
      "(line 5934,col 9)-(line 5934,col 34)",
      "(line 5936,col 9)-(line 5936,col 36)",
      "(line 5937,col 9)-(line 5937,col 41)",
      "(line 5938,col 9)-(line 5938,col 34)",
      "(line 5939,col 9)-(line 5939,col 34)",
      "(line 5940,col 9)-(line 5940,col 34)",
      "(line 5942,col 9)-(line 5942,col 36)",
      "(line 5943,col 9)-(line 5943,col 42)",
      "(line 5944,col 9)-(line 5944,col 34)",
      "(line 5945,col 9)-(line 5945,col 34)",
      "(line 5946,col 9)-(line 5946,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapNullBooleanArray()",
    "snippet": "@Test\n    public void testSwapNullBooleanArray() {\n        final boolean[] array \u003d null;\n        ArrayUtils.swap(array, 0, 2);\n        assertNull(array);\n    }",
    "begin_line": 5950,
    "end_line": 5954,
    "comment": "",
    "child_ranges": [
      "(line 5951,col 9)-(line 5951,col 37)",
      "(line 5952,col 9)-(line 5952,col 37)",
      "(line 5953,col 9)-(line 5953,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapNullByteArray()",
    "snippet": "@Test\n    public void testSwapNullByteArray() {\n        final byte[] array \u003d null;\n        ArrayUtils.swap(array, 0, 2);\n        assertNull(array);\n    }",
    "begin_line": 5957,
    "end_line": 5961,
    "comment": "",
    "child_ranges": [
      "(line 5958,col 9)-(line 5958,col 34)",
      "(line 5959,col 9)-(line 5959,col 37)",
      "(line 5960,col 9)-(line 5960,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapNullCharArray()",
    "snippet": "@Test\n    public void testSwapNullCharArray() {\n        final char[] array \u003d null;\n        ArrayUtils.swap(array, 0, 2);\n        assertNull(array);\n    }",
    "begin_line": 5964,
    "end_line": 5968,
    "comment": "",
    "child_ranges": [
      "(line 5965,col 9)-(line 5965,col 34)",
      "(line 5966,col 9)-(line 5966,col 37)",
      "(line 5967,col 9)-(line 5967,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapNullDoubleArray()",
    "snippet": "@Test\n    public void testSwapNullDoubleArray() {\n        final double[] array \u003d null;\n        ArrayUtils.swap(array, 0, 2);\n        assertNull(array);\n    }",
    "begin_line": 5971,
    "end_line": 5975,
    "comment": "",
    "child_ranges": [
      "(line 5972,col 9)-(line 5972,col 36)",
      "(line 5973,col 9)-(line 5973,col 37)",
      "(line 5974,col 9)-(line 5974,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapNullFloatArray()",
    "snippet": "@Test\n    public void testSwapNullFloatArray() {\n        final float[] array \u003d null;\n        ArrayUtils.swap(array, 0, 2);\n        assertNull(array);\n    }",
    "begin_line": 5978,
    "end_line": 5982,
    "comment": "",
    "child_ranges": [
      "(line 5979,col 9)-(line 5979,col 35)",
      "(line 5980,col 9)-(line 5980,col 37)",
      "(line 5981,col 9)-(line 5981,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapNullIntArray()",
    "snippet": "@Test\n    public void testSwapNullIntArray() {\n        final int[] array \u003d null;\n        ArrayUtils.swap(array, 0, 2);\n        assertNull(array);\n    }",
    "begin_line": 5985,
    "end_line": 5989,
    "comment": "",
    "child_ranges": [
      "(line 5986,col 9)-(line 5986,col 33)",
      "(line 5987,col 9)-(line 5987,col 37)",
      "(line 5988,col 9)-(line 5988,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapNullLongArray()",
    "snippet": "@Test\n    public void testSwapNullLongArray() {\n        final long[] array \u003d null;\n        ArrayUtils.swap(array, 0, 2);\n        assertNull(array);\n    }",
    "begin_line": 5992,
    "end_line": 5996,
    "comment": "",
    "child_ranges": [
      "(line 5993,col 9)-(line 5993,col 34)",
      "(line 5994,col 9)-(line 5994,col 37)",
      "(line 5995,col 9)-(line 5995,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapNullObjectArray()",
    "snippet": "@Test\n    public void testSwapNullObjectArray() {\n        final String[] array \u003d null;\n        ArrayUtils.swap(array, 0, 2);\n        assertNull(array);\n    }",
    "begin_line": 5999,
    "end_line": 6003,
    "comment": "",
    "child_ranges": [
      "(line 6000,col 9)-(line 6000,col 36)",
      "(line 6001,col 9)-(line 6001,col 37)",
      "(line 6002,col 9)-(line 6002,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapNullShortArray()",
    "snippet": "@Test\n    public void testSwapNullShortArray() {\n        final short[] array \u003d null;\n        ArrayUtils.swap(array, 0, 2);\n        assertNull(array);\n    }",
    "begin_line": 6006,
    "end_line": 6010,
    "comment": "",
    "child_ranges": [
      "(line 6007,col 9)-(line 6007,col 35)",
      "(line 6008,col 9)-(line 6008,col 37)",
      "(line 6009,col 9)-(line 6009,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapObject()",
    "snippet": "@Test\n    public void testSwapObject() {\n        final String[] array \u003d {\"1\", \"2\", \"3\"};\n        ArrayUtils.swap(array, 0, 2);\n        assertEquals(\"3\", array[0]);\n        assertEquals(\"2\", array[1]);\n        assertEquals(\"1\", array[2]);\n    }",
    "begin_line": 6013,
    "end_line": 6019,
    "comment": "",
    "child_ranges": [
      "(line 6014,col 9)-(line 6014,col 47)",
      "(line 6015,col 9)-(line 6015,col 37)",
      "(line 6016,col 9)-(line 6016,col 36)",
      "(line 6017,col 9)-(line 6017,col 36)",
      "(line 6018,col 9)-(line 6018,col 36)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapObjectRange()",
    "snippet": "@Test\n    public void testSwapObjectRange() {\n        String[] array \u003d {\"1\", \"2\", \"3\", \"4\"};\n        ArrayUtils.swap(array, 0, 2, 2);\n        assertEquals(\"3\", array[0]);\n        assertEquals(\"4\", array[1]);\n        assertEquals(\"1\", array[2]);\n        assertEquals(\"2\", array[3]);\n\n        array \u003d new String[]{\"1\", \"2\", \"3\", \"4\"};\n        ArrayUtils.swap(array, -1, 2, 3);\n        assertEquals(\"3\", array[0]);\n        assertEquals(\"4\", array[1]);\n        assertEquals(\"1\", array[2]);\n        assertEquals(\"2\", array[3]);\n\n        array \u003d new String[]{\"1\", \"2\", \"3\", \"4\", \"5\"};\n        ArrayUtils.swap(array, -3, 2, 3);\n        assertEquals(\"3\", array[0]);\n        assertEquals(\"4\", array[1]);\n        assertEquals(\"5\", array[2]);\n        assertEquals(\"2\", array[3]);\n        assertEquals(\"1\", array[4]);\n\n        array \u003d new String[]{\"1\", \"2\", \"3\", \"4\", \"5\"};\n        ArrayUtils.swap(array, 2, -2, 3);\n        assertEquals(\"3\", array[0]);\n        assertEquals(\"4\", array[1]);\n        assertEquals(\"5\", array[2]);\n        assertEquals(\"2\", array[3]);\n        assertEquals(\"1\", array[4]);\n\n        array \u003d new String[0];\n        ArrayUtils.swap(array, 0, 2, 2);\n        assertEquals(0, array.length);\n\n        array \u003d null;\n        ArrayUtils.swap(array, 0, 2, 2);\n        assertNull(array);\n    }",
    "begin_line": 6022,
    "end_line": 6060,
    "comment": "",
    "child_ranges": [
      "(line 6023,col 9)-(line 6023,col 46)",
      "(line 6024,col 9)-(line 6024,col 40)",
      "(line 6025,col 9)-(line 6025,col 36)",
      "(line 6026,col 9)-(line 6026,col 36)",
      "(line 6027,col 9)-(line 6027,col 36)",
      "(line 6028,col 9)-(line 6028,col 36)",
      "(line 6030,col 9)-(line 6030,col 49)",
      "(line 6031,col 9)-(line 6031,col 41)",
      "(line 6032,col 9)-(line 6032,col 36)",
      "(line 6033,col 9)-(line 6033,col 36)",
      "(line 6034,col 9)-(line 6034,col 36)",
      "(line 6035,col 9)-(line 6035,col 36)",
      "(line 6037,col 9)-(line 6037,col 54)",
      "(line 6038,col 9)-(line 6038,col 41)",
      "(line 6039,col 9)-(line 6039,col 36)",
      "(line 6040,col 9)-(line 6040,col 36)",
      "(line 6041,col 9)-(line 6041,col 36)",
      "(line 6042,col 9)-(line 6042,col 36)",
      "(line 6043,col 9)-(line 6043,col 36)",
      "(line 6045,col 9)-(line 6045,col 54)",
      "(line 6046,col 9)-(line 6046,col 41)",
      "(line 6047,col 9)-(line 6047,col 36)",
      "(line 6048,col 9)-(line 6048,col 36)",
      "(line 6049,col 9)-(line 6049,col 36)",
      "(line 6050,col 9)-(line 6050,col 36)",
      "(line 6051,col 9)-(line 6051,col 36)",
      "(line 6053,col 9)-(line 6053,col 30)",
      "(line 6054,col 9)-(line 6054,col 40)",
      "(line 6055,col 9)-(line 6055,col 38)",
      "(line 6057,col 9)-(line 6057,col 21)",
      "(line 6058,col 9)-(line 6058,col 40)",
      "(line 6059,col 9)-(line 6059,col 26)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapShort()",
    "snippet": "@Test\n    public void testSwapShort() {\n        final short[] array \u003d {1, 2, 3};\n        ArrayUtils.swap(array, 0, 2);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n    }",
    "begin_line": 6063,
    "end_line": 6069,
    "comment": "",
    "child_ranges": [
      "(line 6064,col 9)-(line 6064,col 40)",
      "(line 6065,col 9)-(line 6065,col 37)",
      "(line 6066,col 9)-(line 6066,col 34)",
      "(line 6067,col 9)-(line 6067,col 34)",
      "(line 6068,col 9)-(line 6068,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSwapShortRange()",
    "snippet": "@Test\n    public void testSwapShortRange() {\n        short[] array \u003d {1, 2, 3, 4};\n        ArrayUtils.swap(array, 0, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(4, array[1]);\n        assertEquals(1, array[2]);\n        assertEquals(2, array[3]);\n\n        array \u003d new short[]{1, 2, 3};\n        ArrayUtils.swap(array, 3, 0);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n\n        array \u003d new short[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n\n        array \u003d new short[]{1, 2, 3};\n        ArrayUtils.swap(array, -1, 2, 2);\n        assertEquals(3, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(1, array[2]);\n\n        array \u003d new short[]{1, 2, 3};\n        ArrayUtils.swap(array, 0, -1, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n\n        array \u003d new short[]{1, 2, 3};\n        ArrayUtils.swap(array, -1, -1, 2);\n        assertEquals(1, array[0]);\n        assertEquals(2, array[1]);\n        assertEquals(3, array[2]);\n    }",
    "begin_line": 6072,
    "end_line": 6109,
    "comment": "",
    "child_ranges": [
      "(line 6073,col 9)-(line 6073,col 37)",
      "(line 6074,col 9)-(line 6074,col 40)",
      "(line 6075,col 9)-(line 6075,col 34)",
      "(line 6076,col 9)-(line 6076,col 34)",
      "(line 6077,col 9)-(line 6077,col 34)",
      "(line 6078,col 9)-(line 6078,col 34)",
      "(line 6080,col 9)-(line 6080,col 37)",
      "(line 6081,col 9)-(line 6081,col 37)",
      "(line 6082,col 9)-(line 6082,col 34)",
      "(line 6083,col 9)-(line 6083,col 34)",
      "(line 6084,col 9)-(line 6084,col 34)",
      "(line 6086,col 9)-(line 6086,col 37)",
      "(line 6087,col 9)-(line 6087,col 40)",
      "(line 6088,col 9)-(line 6088,col 34)",
      "(line 6089,col 9)-(line 6089,col 34)",
      "(line 6090,col 9)-(line 6090,col 34)",
      "(line 6092,col 9)-(line 6092,col 37)",
      "(line 6093,col 9)-(line 6093,col 41)",
      "(line 6094,col 9)-(line 6094,col 34)",
      "(line 6095,col 9)-(line 6095,col 34)",
      "(line 6096,col 9)-(line 6096,col 34)",
      "(line 6098,col 9)-(line 6098,col 37)",
      "(line 6099,col 9)-(line 6099,col 41)",
      "(line 6100,col 9)-(line 6100,col 34)",
      "(line 6101,col 9)-(line 6101,col 34)",
      "(line 6102,col 9)-(line 6102,col 34)",
      "(line 6104,col 9)-(line 6104,col 37)",
      "(line 6105,col 9)-(line 6105,col 42)",
      "(line 6106,col 9)-(line 6106,col 34)",
      "(line 6107,col 9)-(line 6107,col 34)",
      "(line 6108,col 9)-(line 6108,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToMap()",
    "snippet": "@Test\n    public void testToMap() {\n        Map\u003c?, ?\u003e map \u003d ArrayUtils.toMap(new String[][]{{\"foo\", \"bar\"}, {\"hello\", \"world\"}});\n\n        assertEquals(\"bar\", map.get(\"foo\"));\n        assertEquals(\"world\", map.get(\"hello\"));\n\n        assertNull(ArrayUtils.toMap(null));\n        assertThrows(IllegalArgumentException.class, () -\u003e\n                ArrayUtils.toMap(new String[][]{{\"foo\", \"bar\"}, {\"short\"}}));\n        assertThrows(IllegalArgumentException.class, () -\u003e\n                ArrayUtils.toMap(new Object[]{new Object[]{\"foo\", \"bar\"}, \"illegal type\"}));\n        assertThrows(IllegalArgumentException.class, () -\u003e\n                ArrayUtils.toMap(new Object[]{new Object[]{\"foo\", \"bar\"}, null}));\n\n        map \u003d ArrayUtils.toMap(new Object[]{new Map.Entry\u003cObject, Object\u003e() {\n            @Override\n            public boolean equals(final Object o) {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Object getKey() {\n                return \"foo\";\n            }\n\n            @Override\n            public Object getValue() {\n                return \"bar\";\n            }\n\n            @Override\n            public int hashCode() {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Object setValue(final Object value) {\n                throw new UnsupportedOperationException();\n            }\n        }});\n        assertEquals(\"bar\", map.get(\"foo\"));\n\n        // Return empty map when got input array with length \u003d 0\n        assertEquals(Collections.emptyMap(), ArrayUtils.toMap(new Object[0]));\n\n        // Test all null values\n        map \u003d ArrayUtils.toMap(new Object[][] { {null, null}, {null, null} });\n        assertEquals(Collections.singletonMap(null, null), map);\n\n        // Test duplicate keys\n        map \u003d ArrayUtils.toMap(new Object[][] { {\"key\", \"value2\"}, {\"key\", \"value1\"} });\n        assertEquals(Collections.singletonMap(\"key\", \"value1\"), map);\n    }",
    "begin_line": 6112,
    "end_line": 6164,
    "comment": "",
    "child_ranges": [
      "(line 6113,col 9)-(line 6113,col 93)",
      "(line 6115,col 9)-(line 6115,col 44)",
      "(line 6116,col 9)-(line 6116,col 48)",
      "(line 6118,col 9)-(line 6118,col 43)",
      "(line 6119,col 9)-(line 6120,col 77)",
      "(line 6121,col 9)-(line 6122,col 92)",
      "(line 6123,col 9)-(line 6124,col 82)",
      "(line 6126,col 9)-(line 6151,col 12)",
      "(line 6152,col 9)-(line 6152,col 44)",
      "(line 6155,col 9)-(line 6155,col 78)",
      "(line 6158,col 9)-(line 6158,col 78)",
      "(line 6159,col 9)-(line 6159,col 64)",
      "(line 6162,col 9)-(line 6162,col 88)",
      "(line 6163,col 9)-(line 6163,col 69)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.equals(java.lang.Object)",
    "snippet": "@Override\n            public boolean equals(final Object o) {\n                throw new UnsupportedOperationException();\n            }",
    "begin_line": 6128,
    "end_line": 6130,
    "comment": "",
    "child_ranges": [
      "(line 6129,col 17)-(line 6129,col 58)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.getKey()",
    "snippet": "@Override\n            public Object getKey() {\n                return \"foo\";\n            }",
    "begin_line": 6133,
    "end_line": 6135,
    "comment": "",
    "child_ranges": [
      "(line 6134,col 17)-(line 6134,col 29)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.getValue()",
    "snippet": "@Override\n            public Object getValue() {\n                return \"bar\";\n            }",
    "begin_line": 6138,
    "end_line": 6140,
    "comment": "",
    "child_ranges": [
      "(line 6139,col 17)-(line 6139,col 29)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.hashCode()",
    "snippet": "@Override\n            public int hashCode() {\n                throw new UnsupportedOperationException();\n            }",
    "begin_line": 6143,
    "end_line": 6145,
    "comment": "",
    "child_ranges": [
      "(line 6144,col 17)-(line 6144,col 58)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.setValue(java.lang.Object)",
    "snippet": "@Override\n            public Object setValue(final Object value) {\n                throw new UnsupportedOperationException();\n            }",
    "begin_line": 6148,
    "end_line": 6150,
    "comment": "",
    "child_ranges": [
      "(line 6149,col 17)-(line 6149,col 58)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToObject_boolean()",
    "snippet": "@Test\n    public void testToObject_boolean() {\n        final boolean[] b \u003d null;\n        assertArrayEquals(null, ArrayUtils.toObject(b));\n        assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0]));\n        assertArrayEquals(new Boolean[]{Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}, ArrayUtils.toObject(new boolean[]{true, false, true}));\n    }",
    "begin_line": 6167,
    "end_line": 6172,
    "comment": "",
    "child_ranges": [
      "(line 6168,col 9)-(line 6168,col 33)",
      "(line 6169,col 9)-(line 6169,col 56)",
      "(line 6170,col 9)-(line 6170,col 95)",
      "(line 6171,col 9)-(line 6171,col 139)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToObject_byte()",
    "snippet": "@Test\n    public void testToObject_byte() {\n        final byte[] b \u003d null;\n        assertArrayEquals(null, ArrayUtils.toObject(b));\n\n        assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY,\n                ArrayUtils.toObject(new byte[0]));\n\n        assertArrayEquals(new Byte[]{Byte.valueOf(Byte.MIN_VALUE),\n                Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999)}, ArrayUtils.toObject(new byte[]{Byte.MIN_VALUE, Byte.MAX_VALUE,\n                (byte) 9999999}));\n    }",
    "begin_line": 6175,
    "end_line": 6185,
    "comment": "",
    "child_ranges": [
      "(line 6176,col 9)-(line 6176,col 30)",
      "(line 6177,col 9)-(line 6177,col 56)",
      "(line 6179,col 9)-(line 6180,col 50)",
      "(line 6182,col 9)-(line 6184,col 34)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToObject_char()",
    "snippet": "@Test\n    public void testToObject_char() {\n        final char[] b \u003d null;\n        assertArrayEquals(null, ArrayUtils.toObject(b));\n\n        assertSame(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY,\n                ArrayUtils.toObject(new char[0]));\n\n        assertArrayEquals(new Character[]{Character.valueOf(Character.MIN_VALUE),\n                Character.valueOf(Character.MAX_VALUE), Character.valueOf(\u00270\u0027)}, ArrayUtils.toObject(new char[]{Character.MIN_VALUE, Character.MAX_VALUE,\n                \u00270\u0027}));\n    }",
    "begin_line": 6188,
    "end_line": 6198,
    "comment": "",
    "child_ranges": [
      "(line 6189,col 9)-(line 6189,col 30)",
      "(line 6190,col 9)-(line 6190,col 56)",
      "(line 6192,col 9)-(line 6193,col 50)",
      "(line 6195,col 9)-(line 6197,col 23)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToObject_double()",
    "snippet": "@Test\n    public void testToObject_double() {\n        final double[] b \u003d null;\n        assertArrayEquals(null, ArrayUtils.toObject(b));\n\n        assertSame(\n                ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY,\n                ArrayUtils.toObject(new double[0]));\n\n        assertArrayEquals(new Double[]{\n                Double.valueOf(Double.MIN_VALUE),\n                Double.valueOf(Double.MAX_VALUE),\n                Double.valueOf(9999999)}, ArrayUtils.toObject(\n                new double[]{Double.MIN_VALUE, Double.MAX_VALUE, 9999999}));\n    }",
    "begin_line": 6201,
    "end_line": 6214,
    "comment": "",
    "child_ranges": [
      "(line 6202,col 9)-(line 6202,col 32)",
      "(line 6203,col 9)-(line 6203,col 56)",
      "(line 6205,col 9)-(line 6207,col 52)",
      "(line 6209,col 9)-(line 6213,col 76)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToObject_float()",
    "snippet": "@Test\n    public void testToObject_float() {\n        final float[] b \u003d null;\n        assertArrayEquals(null, ArrayUtils.toObject(b));\n\n        assertSame(\n                ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY,\n                ArrayUtils.toObject(new float[0]));\n\n        assertArrayEquals(new Float[]{\n                Float.valueOf(Float.MIN_VALUE),\n                Float.valueOf(Float.MAX_VALUE),\n                Float.valueOf(9999999)}, ArrayUtils.toObject(\n                new float[]{Float.MIN_VALUE, Float.MAX_VALUE, 9999999}));\n    }",
    "begin_line": 6217,
    "end_line": 6230,
    "comment": "",
    "child_ranges": [
      "(line 6218,col 9)-(line 6218,col 31)",
      "(line 6219,col 9)-(line 6219,col 56)",
      "(line 6221,col 9)-(line 6223,col 51)",
      "(line 6225,col 9)-(line 6229,col 73)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToObject_int()",
    "snippet": "@Test\n    public void testToObject_int() {\n        final int[] b \u003d null;\n        assertArrayEquals(null, ArrayUtils.toObject(b));\n\n        assertSame(\n                ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY,\n                ArrayUtils.toObject(new int[0]));\n\n        assertArrayEquals(new Integer[]{\n                Integer.valueOf(Integer.MIN_VALUE),\n                Integer.valueOf(Integer.MAX_VALUE),\n                Integer.valueOf(9999999)}, ArrayUtils.toObject(\n                new int[]{Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}));\n    }",
    "begin_line": 6233,
    "end_line": 6246,
    "comment": "",
    "child_ranges": [
      "(line 6234,col 9)-(line 6234,col 29)",
      "(line 6235,col 9)-(line 6235,col 56)",
      "(line 6237,col 9)-(line 6239,col 49)",
      "(line 6241,col 9)-(line 6245,col 75)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToObject_long()",
    "snippet": "@Test\n    public void testToObject_long() {\n        final long[] b \u003d null;\n        assertArrayEquals(null, ArrayUtils.toObject(b));\n\n        assertSame(\n                ArrayUtils.EMPTY_LONG_OBJECT_ARRAY,\n                ArrayUtils.toObject(new long[0]));\n\n        assertArrayEquals(new Long[]{\n                Long.valueOf(Long.MIN_VALUE),\n                Long.valueOf(Long.MAX_VALUE),\n                Long.valueOf(9999999)}, ArrayUtils.toObject(\n                new long[]{Long.MIN_VALUE, Long.MAX_VALUE, 9999999}));\n    }",
    "begin_line": 6249,
    "end_line": 6262,
    "comment": "",
    "child_ranges": [
      "(line 6250,col 9)-(line 6250,col 30)",
      "(line 6251,col 9)-(line 6251,col 56)",
      "(line 6253,col 9)-(line 6255,col 50)",
      "(line 6257,col 9)-(line 6261,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToObject_short()",
    "snippet": "@Test\n    public void testToObject_short() {\n        final short[] b \u003d null;\n        assertArrayEquals(null, ArrayUtils.toObject(b));\n\n        assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,\n                ArrayUtils.toObject(new short[0]));\n\n        assertArrayEquals(new Short[]{Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE),\n                Short.valueOf((short) 9999999)}, ArrayUtils.toObject(new short[]{Short.MIN_VALUE, Short.MAX_VALUE,\n                (short) 9999999}));\n    }",
    "begin_line": 6265,
    "end_line": 6275,
    "comment": "",
    "child_ranges": [
      "(line 6266,col 9)-(line 6266,col 31)",
      "(line 6267,col 9)-(line 6267,col 56)",
      "(line 6269,col 9)-(line 6270,col 51)",
      "(line 6272,col 9)-(line 6274,col 35)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_boolean()",
    "snippet": "@Test\n    public void testToPrimitive_boolean() {\n        final Boolean[] b \u003d null;\n        assertNull(ArrayUtils.toPrimitive(b));\n        assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0]));\n        assertArrayEquals(new boolean[]{true, false, true}, ArrayUtils.toPrimitive(new Boolean[]{Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}));\n        assertArrayEquals(new boolean[]{true, false}, ArrayUtils.toPrimitive(new Boolean[]{Boolean.TRUE, null}));\n    }",
    "begin_line": 6280,
    "end_line": 6286,
    "comment": "",
    "child_ranges": [
      "(line 6281,col 9)-(line 6281,col 33)",
      "(line 6282,col 9)-(line 6282,col 46)",
      "(line 6283,col 9)-(line 6283,col 91)",
      "(line 6284,col 9)-(line 6284,col 142)",
      "(line 6285,col 9)-(line 6285,col 113)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_boolean_boolean()",
    "snippet": "@Test\n    public void testToPrimitive_boolean_boolean() {\n        assertNull(ArrayUtils.toPrimitive(null, false));\n        assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false));\n        assertArrayEquals(new boolean[]{true, false, true}, ArrayUtils.toPrimitive(new Boolean[]{Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}, false));\n        assertArrayEquals(new boolean[]{true, false, false}, ArrayUtils.toPrimitive(new Boolean[]{Boolean.TRUE, null, Boolean.FALSE}, false));\n        assertArrayEquals(new boolean[]{true, true, false}, ArrayUtils.toPrimitive(new Boolean[]{Boolean.TRUE, null, Boolean.FALSE}, true));\n    }",
    "begin_line": 6289,
    "end_line": 6295,
    "comment": "",
    "child_ranges": [
      "(line 6290,col 9)-(line 6290,col 56)",
      "(line 6291,col 9)-(line 6291,col 98)",
      "(line 6292,col 9)-(line 6292,col 149)",
      "(line 6293,col 9)-(line 6293,col 142)",
      "(line 6294,col 9)-(line 6294,col 140)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_byte()",
    "snippet": "@Test\n    public void testToPrimitive_byte() {\n        final Byte[] b \u003d null;\n        assertNull(ArrayUtils.toPrimitive(b));\n\n        assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0]));\n\n        assertArrayEquals(new byte[]{Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999}, ArrayUtils.toPrimitive(new Byte[]{Byte.valueOf(Byte.MIN_VALUE),\n                Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999)}));\n\n        assertThrows(NullPointerException.class,\n                () -\u003e ArrayUtils.toPrimitive(new Byte[]{Byte.valueOf(Byte.MIN_VALUE), null}));\n    }",
    "begin_line": 6300,
    "end_line": 6311,
    "comment": "",
    "child_ranges": [
      "(line 6301,col 9)-(line 6301,col 30)",
      "(line 6302,col 9)-(line 6302,col 46)",
      "(line 6304,col 9)-(line 6304,col 85)",
      "(line 6306,col 9)-(line 6307,col 78)",
      "(line 6309,col 9)-(line 6310,col 94)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_byte_byte()",
    "snippet": "@Test\n    public void testToPrimitive_byte_byte() {\n        final Byte[] b \u003d null;\n        assertNull(ArrayUtils.toPrimitive(b, Byte.MIN_VALUE));\n\n        assertSame(ArrayUtils.EMPTY_BYTE_ARRAY,\n                ArrayUtils.toPrimitive(new Byte[0], (byte) 1));\n\n        assertArrayEquals(new byte[]{Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999}, ArrayUtils.toPrimitive(new Byte[]{Byte.valueOf(Byte.MIN_VALUE),\n                        Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999)},\n                Byte.MIN_VALUE));\n\n        assertArrayEquals(new byte[]{Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999}, ArrayUtils.toPrimitive(new Byte[]{Byte.valueOf(Byte.MIN_VALUE), null,\n                Byte.valueOf((byte) 9999999)}, Byte.MAX_VALUE));\n    }",
    "begin_line": 6314,
    "end_line": 6327,
    "comment": "",
    "child_ranges": [
      "(line 6315,col 9)-(line 6315,col 30)",
      "(line 6316,col 9)-(line 6316,col 62)",
      "(line 6318,col 9)-(line 6319,col 63)",
      "(line 6321,col 9)-(line 6323,col 33)",
      "(line 6325,col 9)-(line 6326,col 64)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_char()",
    "snippet": "@Test\n    public void testToPrimitive_char() {\n        final Character[] b \u003d null;\n        assertNull(ArrayUtils.toPrimitive(b));\n\n        assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0]));\n\n        assertArrayEquals(new char[]{Character.MIN_VALUE, Character.MAX_VALUE, \u00270\u0027}, ArrayUtils.toPrimitive(new Character[]{Character.valueOf(Character.MIN_VALUE),\n                Character.valueOf(Character.MAX_VALUE), Character.valueOf(\u00270\u0027)}));\n\n        assertThrows(NullPointerException.class,\n                () -\u003e ArrayUtils.toPrimitive(new Character[]{Character.valueOf(Character.MIN_VALUE), null}));\n    }",
    "begin_line": 6332,
    "end_line": 6343,
    "comment": "",
    "child_ranges": [
      "(line 6333,col 9)-(line 6333,col 35)",
      "(line 6334,col 9)-(line 6334,col 46)",
      "(line 6336,col 9)-(line 6336,col 90)",
      "(line 6338,col 9)-(line 6339,col 82)",
      "(line 6341,col 9)-(line 6342,col 109)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_char_char()",
    "snippet": "@Test\n    public void testToPrimitive_char_char() {\n        final Character[] b \u003d null;\n        assertNull(ArrayUtils.toPrimitive(b, Character.MIN_VALUE));\n\n        assertSame(ArrayUtils.EMPTY_CHAR_ARRAY,\n                ArrayUtils.toPrimitive(new Character[0], (char) 0));\n\n        assertArrayEquals(new char[]{Character.MIN_VALUE, Character.MAX_VALUE, \u00270\u0027}, ArrayUtils.toPrimitive(new Character[]{Character.valueOf(Character.MIN_VALUE),\n                        Character.valueOf(Character.MAX_VALUE), Character.valueOf(\u00270\u0027)},\n                Character.MIN_VALUE));\n\n        assertArrayEquals(new char[]{Character.MIN_VALUE, Character.MAX_VALUE, \u00270\u0027}, ArrayUtils.toPrimitive(new Character[]{Character.valueOf(Character.MIN_VALUE), null,\n                Character.valueOf(\u00270\u0027)}, Character.MAX_VALUE));\n    }",
    "begin_line": 6346,
    "end_line": 6359,
    "comment": "",
    "child_ranges": [
      "(line 6347,col 9)-(line 6347,col 35)",
      "(line 6348,col 9)-(line 6348,col 67)",
      "(line 6350,col 9)-(line 6351,col 68)",
      "(line 6353,col 9)-(line 6355,col 38)",
      "(line 6357,col 9)-(line 6358,col 63)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_double()",
    "snippet": "@Test\n    public void testToPrimitive_double() {\n        final Double[] b \u003d null;\n        assertNull(ArrayUtils.toPrimitive(b));\n\n        assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,\n                ArrayUtils.toPrimitive(new Double[0]));\n\n        assertArrayEquals(new double[]{Double.MIN_VALUE, Double.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Double[]{Double.valueOf(Double.MIN_VALUE),\n                Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999)}));\n\n        assertThrows(NullPointerException.class,\n                () -\u003e ArrayUtils.toPrimitive(new Float[]{Float.valueOf(Float.MIN_VALUE), null}));\n    }",
    "begin_line": 6364,
    "end_line": 6376,
    "comment": "",
    "child_ranges": [
      "(line 6365,col 9)-(line 6365,col 32)",
      "(line 6366,col 9)-(line 6366,col 46)",
      "(line 6368,col 9)-(line 6369,col 55)",
      "(line 6371,col 9)-(line 6372,col 77)",
      "(line 6374,col 9)-(line 6375,col 97)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_double_double()",
    "snippet": "@Test\n    public void testToPrimitive_double_double() {\n        final Double[] l \u003d null;\n        assertNull(ArrayUtils.toPrimitive(l, Double.MIN_VALUE));\n\n        assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,\n                ArrayUtils.toPrimitive(new Double[0], 1));\n\n        assertArrayEquals(new double[]{Double.MIN_VALUE, Double.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Double[]{Double.valueOf(Double.MIN_VALUE),\n                Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999)}, 1));\n\n        assertArrayEquals(new double[]{Double.MIN_VALUE, Double.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Double[]{Double.valueOf(Double.MIN_VALUE),\n                null, Double.valueOf(9999999)}, Double.MAX_VALUE));\n    }",
    "begin_line": 6379,
    "end_line": 6391,
    "comment": "",
    "child_ranges": [
      "(line 6380,col 9)-(line 6380,col 32)",
      "(line 6381,col 9)-(line 6381,col 64)",
      "(line 6383,col 9)-(line 6384,col 58)",
      "(line 6386,col 9)-(line 6387,col 80)",
      "(line 6389,col 9)-(line 6390,col 67)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_float()",
    "snippet": "@Test\n    public void testToPrimitive_float() {\n        final Float[] b \u003d null;\n        assertNull(ArrayUtils.toPrimitive(b));\n\n        assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,\n                ArrayUtils.toPrimitive(new Float[0]));\n\n        assertArrayEquals(new float[]{Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Float[]{Float.valueOf(Float.MIN_VALUE),\n                Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)}));\n\n        assertThrows(NullPointerException.class,\n                () -\u003e ArrayUtils.toPrimitive(new Float[]{Float.valueOf(Float.MIN_VALUE), null}));\n    }",
    "begin_line": 6396,
    "end_line": 6408,
    "comment": "",
    "child_ranges": [
      "(line 6397,col 9)-(line 6397,col 31)",
      "(line 6398,col 9)-(line 6398,col 46)",
      "(line 6400,col 9)-(line 6401,col 54)",
      "(line 6403,col 9)-(line 6404,col 74)",
      "(line 6406,col 9)-(line 6407,col 97)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_float_float()",
    "snippet": "@Test\n    public void testToPrimitive_float_float() {\n        final Float[] l \u003d null;\n        assertNull(ArrayUtils.toPrimitive(l, Float.MIN_VALUE));\n\n        assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,\n                ArrayUtils.toPrimitive(new Float[0], 1));\n\n        assertArrayEquals(new float[]{Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Float[]{Float.valueOf(Float.MIN_VALUE),\n                Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)}, 1));\n\n        assertArrayEquals(new float[]{Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Float[]{Float.valueOf(Float.MIN_VALUE),\n                null, Float.valueOf(9999999)}, Float.MAX_VALUE));\n    }",
    "begin_line": 6411,
    "end_line": 6423,
    "comment": "",
    "child_ranges": [
      "(line 6412,col 9)-(line 6412,col 31)",
      "(line 6413,col 9)-(line 6413,col 63)",
      "(line 6415,col 9)-(line 6416,col 57)",
      "(line 6418,col 9)-(line 6419,col 77)",
      "(line 6421,col 9)-(line 6422,col 65)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_int()",
    "snippet": "@Test\n    public void testToPrimitive_int() {\n        final Integer[] b \u003d null;\n        assertNull(ArrayUtils.toPrimitive(b));\n        assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0]));\n        assertArrayEquals(new int[]{Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Integer[]{Integer.valueOf(Integer.MIN_VALUE),\n                Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999)}));\n\n        assertThrows(NullPointerException.class,\n                () -\u003e ArrayUtils.toPrimitive(new Integer[]{Integer.valueOf(Integer.MIN_VALUE), null}));\n    }",
    "begin_line": 6428,
    "end_line": 6437,
    "comment": "",
    "child_ranges": [
      "(line 6429,col 9)-(line 6429,col 33)",
      "(line 6430,col 9)-(line 6430,col 46)",
      "(line 6431,col 9)-(line 6431,col 87)",
      "(line 6432,col 9)-(line 6433,col 80)",
      "(line 6435,col 9)-(line 6436,col 103)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_int_int()",
    "snippet": "@Test\n    public void testToPrimitive_int_int() {\n        final Long[] l \u003d null;\n        assertNull(ArrayUtils.toPrimitive(l, Integer.MIN_VALUE));\n        assertSame(ArrayUtils.EMPTY_INT_ARRAY,\n                ArrayUtils.toPrimitive(new Integer[0], 1));\n        assertArrayEquals(new int[]{Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Integer[]{Integer.valueOf(Integer.MIN_VALUE),\n                Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999)}, 1));\n        assertArrayEquals(new int[]{Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Integer[]{Integer.valueOf(Integer.MIN_VALUE),\n                null, Integer.valueOf(9999999)}, Integer.MAX_VALUE));\n    }",
    "begin_line": 6440,
    "end_line": 6449,
    "comment": "",
    "child_ranges": [
      "(line 6441,col 9)-(line 6441,col 30)",
      "(line 6442,col 9)-(line 6442,col 65)",
      "(line 6443,col 9)-(line 6444,col 59)",
      "(line 6445,col 9)-(line 6446,col 83)",
      "(line 6447,col 9)-(line 6448,col 69)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_intNull()",
    "snippet": "@Test\n    public void testToPrimitive_intNull() {\n        final Integer[] iArray \u003d null;\n        assertNull(ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE));\n    }",
    "begin_line": 6452,
    "end_line": 6455,
    "comment": "",
    "child_ranges": [
      "(line 6453,col 9)-(line 6453,col 38)",
      "(line 6454,col 9)-(line 6454,col 70)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_long()",
    "snippet": "@Test\n    public void testToPrimitive_long() {\n        final Long[] b \u003d null;\n        assertNull(ArrayUtils.toPrimitive(b));\n\n        assertSame(ArrayUtils.EMPTY_LONG_ARRAY,\n                ArrayUtils.toPrimitive(new Long[0]));\n\n        assertArrayEquals(new long[]{Long.MIN_VALUE, Long.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Long[]{Long.valueOf(Long.MIN_VALUE),\n                Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999)}));\n\n        assertThrows(NullPointerException.class,\n                () -\u003e ArrayUtils.toPrimitive(new Long[]{Long.valueOf(Long.MIN_VALUE), null}));\n    }",
    "begin_line": 6460,
    "end_line": 6472,
    "comment": "",
    "child_ranges": [
      "(line 6461,col 9)-(line 6461,col 30)",
      "(line 6462,col 9)-(line 6462,col 46)",
      "(line 6464,col 9)-(line 6465,col 53)",
      "(line 6467,col 9)-(line 6468,col 71)",
      "(line 6470,col 9)-(line 6471,col 94)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_long_long()",
    "snippet": "@Test\n    public void testToPrimitive_long_long() {\n        final Long[] l \u003d null;\n        assertNull(ArrayUtils.toPrimitive(l, Long.MIN_VALUE));\n\n        assertSame(ArrayUtils.EMPTY_LONG_ARRAY,\n                ArrayUtils.toPrimitive(new Long[0], 1));\n\n        assertArrayEquals(new long[]{Long.MIN_VALUE, Long.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Long[]{Long.valueOf(Long.MIN_VALUE),\n                Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999)}, 1));\n\n        assertArrayEquals(new long[]{Long.MIN_VALUE, Long.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Long[]{Long.valueOf(Long.MIN_VALUE),\n                null, Long.valueOf(9999999)}, Long.MAX_VALUE));\n    }",
    "begin_line": 6475,
    "end_line": 6487,
    "comment": "",
    "child_ranges": [
      "(line 6476,col 9)-(line 6476,col 30)",
      "(line 6477,col 9)-(line 6477,col 62)",
      "(line 6479,col 9)-(line 6480,col 56)",
      "(line 6482,col 9)-(line 6483,col 74)",
      "(line 6485,col 9)-(line 6486,col 63)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_short()",
    "snippet": "@Test\n    public void testToPrimitive_short() {\n        final Short[] b \u003d null;\n        assertNull(ArrayUtils.toPrimitive(b));\n\n        assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0]));\n\n        assertArrayEquals(new short[]{Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999}, ArrayUtils.toPrimitive(new Short[]{Short.valueOf(Short.MIN_VALUE),\n                Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999)}));\n\n        assertThrows(NullPointerException.class,\n                () -\u003e ArrayUtils.toPrimitive(new Short[]{Short.valueOf(Short.MIN_VALUE), null}));\n    }",
    "begin_line": 6492,
    "end_line": 6503,
    "comment": "",
    "child_ranges": [
      "(line 6493,col 9)-(line 6493,col 31)",
      "(line 6494,col 9)-(line 6494,col 46)",
      "(line 6496,col 9)-(line 6496,col 87)",
      "(line 6498,col 9)-(line 6499,col 82)",
      "(line 6501,col 9)-(line 6502,col 97)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_short_short()",
    "snippet": "@Test\n    public void testToPrimitive_short_short() {\n        final Short[] s \u003d null;\n        assertNull(ArrayUtils.toPrimitive(s, Short.MIN_VALUE));\n\n        assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0],\n                Short.MIN_VALUE));\n\n        assertArrayEquals(new short[]{Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999}, ArrayUtils.toPrimitive(new Short[]{Short.valueOf(Short.MIN_VALUE),\n                Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999)}, Short.MIN_VALUE));\n\n        assertArrayEquals(new short[]{Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999}, ArrayUtils.toPrimitive(new Short[]{Short.valueOf(Short.MIN_VALUE), null,\n                Short.valueOf((short) 9999999)}, Short.MAX_VALUE));\n    }",
    "begin_line": 6506,
    "end_line": 6518,
    "comment": "",
    "child_ranges": [
      "(line 6507,col 9)-(line 6507,col 31)",
      "(line 6508,col 9)-(line 6508,col 63)",
      "(line 6510,col 9)-(line 6511,col 34)",
      "(line 6513,col 9)-(line 6514,col 99)",
      "(line 6516,col 9)-(line 6517,col 67)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToString()",
    "snippet": "@Test\n    public void testToString() {\n        assertEquals(\"{}\", ArrayUtils.toString(null));\n        assertEquals(\"{}\", ArrayUtils.toString(new Object[0]));\n        assertEquals(\"{}\", ArrayUtils.toString(new String[0]));\n        assertEquals(\"{\u003cnull\u003e}\", ArrayUtils.toString(new String[]{null}));\n        assertEquals(\"{pink,blue}\", ArrayUtils.toString(new String[]{\"pink\", \"blue\"}));\n\n        assertEquals(\"\u003cempty\u003e\", ArrayUtils.toString(null, \"\u003cempty\u003e\"));\n        assertEquals(\"{}\", ArrayUtils.toString(new Object[0], \"\u003cempty\u003e\"));\n        assertEquals(\"{}\", ArrayUtils.toString(new String[0], \"\u003cempty\u003e\"));\n        assertEquals(\"{\u003cnull\u003e}\", ArrayUtils.toString(new String[]{null}, \"\u003cempty\u003e\"));\n        assertEquals(\"{pink,blue}\", ArrayUtils.toString(new String[]{\"pink\", \"blue\"}, \"\u003cempty\u003e\"));\n    }",
    "begin_line": 6521,
    "end_line": 6533,
    "comment": "",
    "child_ranges": [
      "(line 6522,col 9)-(line 6522,col 54)",
      "(line 6523,col 9)-(line 6523,col 63)",
      "(line 6524,col 9)-(line 6524,col 63)",
      "(line 6525,col 9)-(line 6525,col 74)",
      "(line 6526,col 9)-(line 6526,col 87)",
      "(line 6528,col 9)-(line 6528,col 70)",
      "(line 6529,col 9)-(line 6529,col 74)",
      "(line 6530,col 9)-(line 6530,col 74)",
      "(line 6531,col 9)-(line 6531,col 85)",
      "(line 6532,col 9)-(line 6532,col 98)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToStringArray_array()",
    "snippet": "@Test\n    public void testToStringArray_array() {\n        assertNull(ArrayUtils.toStringArray(null));\n\n        assertArrayEquals(new String[0], ArrayUtils.toStringArray(new Object[0]));\n\n        final Object[] array \u003d {1, 2, 3, \"array\", \"test\"};\n        assertArrayEquals(new String[]{\"1\", \"2\", \"3\", \"array\", \"test\"}, ArrayUtils.toStringArray(array));\n\n        assertThrows(NullPointerException.class, () -\u003e ArrayUtils.toStringArray(new Object[]{null}));\n    }",
    "begin_line": 6536,
    "end_line": 6545,
    "comment": "",
    "child_ranges": [
      "(line 6537,col 9)-(line 6537,col 51)",
      "(line 6539,col 9)-(line 6539,col 82)",
      "(line 6541,col 9)-(line 6541,col 58)",
      "(line 6542,col 9)-(line 6542,col 105)",
      "(line 6544,col 9)-(line 6544,col 101)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToStringArray_array_string()",
    "snippet": "@Test\n    public void testToStringArray_array_string() {\n        assertNull(ArrayUtils.toStringArray(null, \"\"));\n\n        assertArrayEquals(new String[0], ArrayUtils.toStringArray(new Object[0], \"\"));\n\n        final Object[] array \u003d {1, null, \"test\"};\n        assertArrayEquals(new String[]{\"1\", \"valueForNullElements\", \"test\"},\n                ArrayUtils.toStringArray(array, \"valueForNullElements\"));\n    }",
    "begin_line": 6548,
    "end_line": 6556,
    "comment": "",
    "child_ranges": [
      "(line 6549,col 9)-(line 6549,col 55)",
      "(line 6551,col 9)-(line 6551,col 86)",
      "(line 6553,col 9)-(line 6553,col 49)",
      "(line 6554,col 9)-(line 6555,col 73)"
    ]
  },
  {
    "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
    "child_classes": [],
    "src_path": "org/apache/commons/lang3/ArrayUtilsTest.java",
    "signature": "org.apache.commons.lang3.ArrayUtilsTest.textIndexesOfInt()",
    "snippet": "@Test\n    public void textIndexesOfInt() {\n        int[] array \u003d null;\n        final BitSet emptySet \u003d new BitSet();\n        final BitSet testSet \u003d new BitSet();\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, 0));\n        array \u003d new int[]{0, 1, 2, 3, 0};\n        testSet.set(0);\n        testSet.set(4);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 0));\n        testSet.clear();\n        testSet.set(1);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 1));\n        testSet.clear();\n        testSet.set(2);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 2));\n        testSet.clear();\n        testSet.set(3);\n        assertEquals(testSet, ArrayUtils.indexesOf(array, 3));\n        assertEquals(emptySet, ArrayUtils.indexesOf(array, 99));\n    }",
    "begin_line": 6559,
    "end_line": 6578,
    "comment": "",
    "child_ranges": [
      "(line 6560,col 9)-(line 6560,col 27)",
      "(line 6561,col 9)-(line 6561,col 45)",
      "(line 6562,col 9)-(line 6562,col 44)",
      "(line 6563,col 9)-(line 6563,col 63)",
      "(line 6564,col 9)-(line 6564,col 41)",
      "(line 6565,col 9)-(line 6565,col 23)",
      "(line 6566,col 9)-(line 6566,col 23)",
      "(line 6567,col 9)-(line 6567,col 62)",
      "(line 6568,col 9)-(line 6568,col 24)",
      "(line 6569,col 9)-(line 6569,col 23)",
      "(line 6570,col 9)-(line 6570,col 62)",
      "(line 6571,col 9)-(line 6571,col 24)",
      "(line 6572,col 9)-(line 6572,col 23)",
      "(line 6573,col 9)-(line 6573,col 62)",
      "(line 6574,col 9)-(line 6574,col 24)",
      "(line 6575,col 9)-(line 6575,col 23)",
      "(line 6576,col 9)-(line 6576,col 62)",
      "(line 6577,col 9)-(line 6577,col 64)"
    ]
  }
]