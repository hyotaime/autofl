[
  {
    "name": "ArrayUtils.add#202",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(boolean[], boolean)",
    "snippet": "public static boolean[] add(final boolean[] array, final boolean element) {\n        final boolean[] newArray \u003d (boolean[]) copyArrayGrow1(array, Boolean.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 202,
    "end_line": 206,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array. \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, true)          \u003d [true] ArrayUtils.add([true], false)       \u003d [true, false] ArrayUtils.add([true, false], true) \u003d [true, false, true] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#238",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(boolean[], int, boolean)",
    "snippet": "@Deprecated\n    public static boolean[] add(final boolean[] array, final int index, final boolean element) {\n        return (boolean[]) add(array, index, Boolean.valueOf(element), Boolean.TYPE);\n    }",
    "begin_line": 238,
    "end_line": 240,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, 0, true)          \u003d [true] ArrayUtils.add([true], 0, false)       \u003d [false, true] ArrayUtils.add([false], 1, true)       \u003d [false, true] ArrayUtils.add([true, false], 1, true) \u003d [true, true, false] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range (index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,boolean[],boolean...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#263",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(byte[], byte)",
    "snippet": "public static byte[] add(final byte[] array, final byte element) {\n        final byte[] newArray \u003d (byte[]) copyArrayGrow1(array, Byte.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 263,
    "end_line": 267,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array. \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#300",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(byte[], int, byte)",
    "snippet": "@Deprecated\n    public static byte[] add(final byte[] array, final int index, final byte element) {\n        return (byte[]) add(array, index, Byte.valueOf(element), Byte.TYPE);\n    }",
    "begin_line": 300,
    "end_line": 302,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add([1], 0, 2)         \u003d [2, 1] ArrayUtils.add([2, 6], 2, 3)      \u003d [2, 6, 3] ArrayUtils.add([2, 6], 0, 1)      \u003d [1, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   \u003d [2, 6, 1, 3] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,byte[],byte...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#325",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(char[], char)",
    "snippet": "public static char[] add(final char[] array, final char element) {\n        final char[] newArray \u003d (char[]) copyArrayGrow1(array, Character.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 325,
    "end_line": 329,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array. \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, \u00270\u0027)       \u003d [\u00270\u0027] ArrayUtils.add([\u00271\u0027], \u00270\u0027)      \u003d [\u00271\u0027, \u00270\u0027] ArrayUtils.add([\u00271\u0027, \u00270\u0027], \u00271\u0027) \u003d [\u00271\u0027, \u00270\u0027, \u00271\u0027] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#363",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(char[], int, char)",
    "snippet": "@Deprecated\n    public static char[] add(final char[] array, final int index, final char element) {\n        return (char[]) add(array, index, Character.valueOf(element), Character.TYPE);\n    }",
    "begin_line": 363,
    "end_line": 365,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, 0, \u0027a\u0027)            \u003d [\u0027a\u0027] ArrayUtils.add([\u0027a\u0027], 0, \u0027b\u0027)           \u003d [\u0027b\u0027, \u0027a\u0027] ArrayUtils.add([\u0027a\u0027, \u0027b\u0027], 0, \u0027c\u0027)      \u003d [\u0027c\u0027, \u0027a\u0027, \u0027b\u0027] ArrayUtils.add([\u0027a\u0027, \u0027b\u0027], 1, \u0027k\u0027)      \u003d [\u0027a\u0027, \u0027k\u0027, \u0027b\u0027] ArrayUtils.add([\u0027a\u0027, \u0027b\u0027, \u0027c\u0027], 1, \u0027t\u0027) \u003d [\u0027a\u0027, \u0027t\u0027, \u0027b\u0027, \u0027c\u0027] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,char[],char...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#388",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(double[], double)",
    "snippet": "public static double[] add(final double[] array, final double element) {\n        final double[] newArray \u003d (double[]) copyArrayGrow1(array, Double.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 388,
    "end_line": 392,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array. \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#425",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(double[], int, double)",
    "snippet": "@Deprecated\n    public static double[] add(final double[] array, final int index, final double element) {\n        return (double[]) add(array, index, Double.valueOf(element), Double.TYPE);\n    }",
    "begin_line": 425,
    "end_line": 427,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add([1.1], 0, 2.2)              \u003d [2.2, 1.1] ArrayUtils.add([2.3, 6.4], 2, 10.5)        \u003d [2.3, 6.4, 10.5] ArrayUtils.add([2.6, 6.7], 0, -4.8)        \u003d [-4.8, 2.6, 6.7] ArrayUtils.add([2.9, 6.0, 0.3], 2, 1.0)    \u003d [2.9, 6.0, 1.0, 0.3] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,double[],double...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#450",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(float[], float)",
    "snippet": "public static float[] add(final float[] array, final float element) {\n        final float[] newArray \u003d (float[]) copyArrayGrow1(array, Float.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 450,
    "end_line": 454,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array. \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#487",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(float[], int, float)",
    "snippet": "@Deprecated\n    public static float[] add(final float[] array, final int index, final float element) {\n        return (float[]) add(array, index, Float.valueOf(element), Float.TYPE);\n    }",
    "begin_line": 487,
    "end_line": 489,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add([1.1f], 0, 2.2f)               \u003d [2.2f, 1.1f] ArrayUtils.add([2.3f, 6.4f], 2, 10.5f)        \u003d [2.3f, 6.4f, 10.5f] ArrayUtils.add([2.6f, 6.7f], 0, -4.8f)        \u003d [-4.8f, 2.6f, 6.7f] ArrayUtils.add([2.9f, 6.0f, 0.3f], 2, 1.0f)   \u003d [2.9f, 6.0f, 1.0f, 0.3f] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,float[],float...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#512",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(int[], int)",
    "snippet": "public static int[] add(final int[] array, final int element) {\n        final int[] newArray \u003d (int[]) copyArrayGrow1(array, Integer.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 512,
    "end_line": 516,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array. \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#549",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(int[], int, int)",
    "snippet": "@Deprecated\n    public static int[] add(final int[] array, final int index, final int element) {\n        return (int[]) add(array, index, Integer.valueOf(element), Integer.TYPE);\n    }",
    "begin_line": 549,
    "end_line": 551,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add([1], 0, 2)         \u003d [2, 1] ArrayUtils.add([2, 6], 2, 10)     \u003d [2, 6, 10] ArrayUtils.add([2, 6], 0, -4)     \u003d [-4, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   \u003d [2, 6, 1, 3] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,int[],int...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#584",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(long[], int, long)",
    "snippet": "@Deprecated\n    public static long[] add(final long[] array, final int index, final long element) {\n        return (long[]) add(array, index, Long.valueOf(element), Long.TYPE);\n    }",
    "begin_line": 584,
    "end_line": 586,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add([1L], 0, 2L)           \u003d [2L, 1L] ArrayUtils.add([2L, 6L], 2, 10L)      \u003d [2L, 6L, 10L] ArrayUtils.add([2L, 6L], 0, -4L)      \u003d [-4L, 2L, 6L] ArrayUtils.add([2L, 6L, 3L], 2, 1L)   \u003d [2L, 6L, 1L, 3L] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,long[],long...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#609",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(long[], long)",
    "snippet": "public static long[] add(final long[] array, final long element) {\n        final long[] newArray \u003d (long[]) copyArrayGrow1(array, Long.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 609,
    "end_line": 613,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array. \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#626",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(java.lang.Object, int, java.lang.Object, java.lang.Class\u003c?\u003e)",
    "snippet": "private static Object add(final Object array, final int index, final Object element, final Class\u003c?\u003e clss) {\n        if (array \u003d\u003d null) {\n            if (index !\u003d 0) {\n                throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: 0\");\n            }\n            final Object joinedArray \u003d Array.newInstance(clss, 1);\n            Array.set(joinedArray, 0, element);\n            return joinedArray;\n        }\n        final int length \u003d Array.getLength(array);\n        if (index \u003e length || index \u003c 0) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + length);\n        }\n        final Object result \u003d Array.newInstance(clss, length + 1);\n        System.arraycopy(array, 0, result, 0, index);\n        Array.set(result, index, element);\n        if (index \u003c length) {\n            System.arraycopy(array, index, result, index + 1, length - index);\n        }\n        return result;\n    }",
    "begin_line": 626,
    "end_line": 646,
    "comment": "/** \n * Underlying implementation of add(array, index, element) methods. The last parameter is the class, which may not equal element.getClass for primitives.\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @param clss the type of the element being added\n * @return A new array containing the existing elements and the new element\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#679",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(short[], int, short)",
    "snippet": "@Deprecated\n    public static short[] add(final short[] array, final int index, final short element) {\n        return (short[]) add(array, index, Short.valueOf(element), Short.TYPE);\n    }",
    "begin_line": 679,
    "end_line": 681,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add([1], 0, 2)         \u003d [2, 1] ArrayUtils.add([2, 6], 2, 10)     \u003d [2, 6, 10] ArrayUtils.add([2, 6], 0, -4)     \u003d [-4, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   \u003d [2, 6, 1, 3] \u003c/pre\u003e\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt; array.length).\n * @deprecated this method has been superseded by {@link #insert(int,short[],short...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#704",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(short[], short)",
    "snippet": "public static short[] add(final short[] array, final short element) {\n        final short[] newArray \u003d (short[]) copyArrayGrow1(array, Short.TYPE);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 704,
    "end_line": 708,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array. \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, 0)   \u003d [0] ArrayUtils.add([1], 0)    \u003d [1, 0] ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1] \u003c/pre\u003e\n * @param array  the array to copy and add the element to, may be {@code null}\n * @param element  the object to add at the last index of the new array\n * @return A new array containing the existing elements plus the new element\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#744",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(T[], int, T)",
    "snippet": "@Deprecated\n    public static \u003cT\u003e T[] add(final T[] array, final int index, final T element) {\n        Class\u003c?\u003e clss \u003d null;\n        if (array !\u003d null) {\n            clss \u003d array.getClass().getComponentType();\n        } else if (element !\u003d null) {\n            clss \u003d element.getClass();\n        } else {\n            throw new IllegalArgumentException(\"Array and element cannot both be null\");\n        }\n        @SuppressWarnings(\"unchecked\") // the add method creates an array of type clss, which is type T\n        final T[] newArray \u003d (T[]) add(array, index, element, clss);\n        return newArray;\n    }",
    "begin_line": 744,
    "end_line": 756,
    "comment": "/** \n * \u003cp\u003eInserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003cpre\u003e ArrayUtils.add(null, 0, null)      \u003d IllegalArgumentException ArrayUtils.add(null, 0, \"a\")       \u003d [\"a\"] ArrayUtils.add([\"a\"], 1, null)     \u003d [\"a\", null] ArrayUtils.add([\"a\"], 1, \"b\")      \u003d [\"a\", \"b\"] ArrayUtils.add([\"a\", \"b\"], 3, \"c\") \u003d [\"a\", \"b\", \"c\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to add the element to, may be {@code null}\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range (index \u0026lt; 0 || index \u0026gt; array.length).\n * @throws IllegalArgumentException if both array and element are null\n * @deprecated this method has been superseded by {@link #insert(int,Object[],Object...) insert(int, T[], T...)} andmay be removed in a future release. Please note the handling of  {@code null} input arrays differsin the new method: inserting  {@code X} into a {@code null} array results in {@code null} not {@code X}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.add#787",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.add(T[], T)",
    "snippet": "public static \u003cT\u003e T[] add(final T[] array, final T element) {\n        Class\u003c?\u003e type;\n        if (array !\u003d null) {\n            type \u003d array.getClass().getComponentType();\n        } else if (element !\u003d null) {\n            type \u003d element.getClass();\n        } else {\n            throw new IllegalArgumentException(\"Arguments cannot both be null\");\n        }\n        @SuppressWarnings(\"unchecked\") // type must be T\n        final\n        T[] newArray \u003d (T[]) copyArrayGrow1(array, type);\n        newArray[newArray.length - 1] \u003d element;\n        return newArray;\n    }",
    "begin_line": 787,
    "end_line": 801,
    "comment": "/** \n * \u003cp\u003eCopies the given array and adds the given element at the end of the new array. \u003cp\u003eThe new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, a new one element array is returned whose component type is the same as the element, unless the element itself is null, in which case the return type is Object[] \u003cpre\u003e ArrayUtils.add(null, null)      \u003d IllegalArgumentException ArrayUtils.add(null, \"a\")       \u003d [\"a\"] ArrayUtils.add([\"a\"], null)     \u003d [\"a\", null] ArrayUtils.add([\"a\"], \"b\")      \u003d [\"a\", \"b\"] ArrayUtils.add([\"a\", \"b\"], \"c\") \u003d [\"a\", \"b\", \"c\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to \"add\" the element to, may be {@code null}\n * @param element  the object to add, may be {@code null}\n * @return A new array containing the existing elements plus the new elementThe returned array type will be that of the input array (unless null), in which case it will have the same type as the element. If both are null, an IllegalArgumentException is thrown\n * @since 2.1\n * @throws IllegalArgumentException if both arguments are null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#820",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(boolean[], boolean)",
    "snippet": "public static boolean[] addAll(final boolean[] array1, final boolean... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final boolean[] joinedArray \u003d new boolean[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 820,
    "end_line": 830,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array. \u003cp\u003eThe new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new boolean[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#849",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(byte[], byte)",
    "snippet": "public static byte[] addAll(final byte[] array1, final byte... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final byte[] joinedArray \u003d new byte[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 849,
    "end_line": 859,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array. \u003cp\u003eThe new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new byte[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#878",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(char[], char)",
    "snippet": "public static char[] addAll(final char[] array1, final char... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final char[] joinedArray \u003d new char[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 878,
    "end_line": 888,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array. \u003cp\u003eThe new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new char[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#907",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(double[], double)",
    "snippet": "public static double[] addAll(final double[] array1, final double... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final double[] joinedArray \u003d new double[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 907,
    "end_line": 917,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array. \u003cp\u003eThe new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new double[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#936",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(float[], float)",
    "snippet": "public static float[] addAll(final float[] array1, final float... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final float[] joinedArray \u003d new float[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 936,
    "end_line": 946,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array. \u003cp\u003eThe new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new float[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#965",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(int[], int)",
    "snippet": "public static int[] addAll(final int[] array1, final int... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final int[] joinedArray \u003d new int[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 965,
    "end_line": 975,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array. \u003cp\u003eThe new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new int[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#994",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(long[], long)",
    "snippet": "public static long[] addAll(final long[] array1, final long... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final long[] joinedArray \u003d new long[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 994,
    "end_line": 1004,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array. \u003cp\u003eThe new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new long[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#1023",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(short[], short)",
    "snippet": "public static short[] addAll(final short[] array1, final short... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final short[] joinedArray \u003d new short[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "begin_line": 1023,
    "end_line": 1033,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array. \u003cp\u003eThe new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003cpre\u003e ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] \u003c/pre\u003e\n * @param array1  the first array whose elements are added to the new array.\n * @param array2  the second array whose elements are added to the new array.\n * @return The new short[] array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addAll#1059",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addAll(T[], T)",
    "snippet": "public static \u003cT\u003e T[] addAll(final T[] array1, @SuppressWarnings(\"unchecked\") final T... array2) {\n        if (array1 \u003d\u003d null) {\n            return clone(array2);\n        } else if (array2 \u003d\u003d null) {\n            return clone(array1);\n        }\n        final Class\u003c?\u003e type1 \u003d array1.getClass().getComponentType();\n        @SuppressWarnings(\"unchecked\") // OK, because array is of type T\n        final T[] joinedArray \u003d (T[]) Array.newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        try {\n            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        } catch (final ArrayStoreException ase) {\n            // Check if problem was due to incompatible types\n            /*\n             * We do this here, rather than before the copy because:\n             * - it would be a wasted check most of the time\n             * - safer, in case check turns out to be too strict\n             */\n            final Class\u003c?\u003e type2 \u003d array2.getClass().getComponentType();\n            if (!type1.isAssignableFrom(type2)) {\n                throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \"\n                        + type1.getName(), ase);\n            }\n            throw ase; // No, so rethrow original\n        }\n        return joinedArray;\n    }",
    "begin_line": 1059,
    "end_line": 1086,
    "comment": "/** \n * \u003cp\u003eAdds all the elements of the given arrays into a new array. \u003cp\u003eThe new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array. \u003cpre\u003e ArrayUtils.addAll(null, null)     \u003d null ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1 ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2 ArrayUtils.addAll([], [])         \u003d [] ArrayUtils.addAll([null], [null]) \u003d [null, null] ArrayUtils.addAll([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]) \u003d [\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array1  the first array whose elements are added to the new array, may be {@code null}\n * @param array2  the second array whose elements are added to the new array, may be {@code null}\n * @return The new array, {@code null} if both arrays are {@code null}. The type of the new array is the type of the first array, unless the first array is null, in which case the type is the same as the second array.\n * @since 2.1\n * @throws IllegalArgumentException if the array types are incompatible\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1113",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(boolean[], boolean)",
    "snippet": "public static boolean[] addFirst(final boolean[] array, final boolean element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1113,
    "end_line": 1115,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, true)          \u003d [true] ArrayUtils.add([true], false)       \u003d [false, true] ArrayUtils.add([true, false], true) \u003d [true, true, false] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1142",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(byte[], byte)",
    "snippet": "public static byte[] addFirst(final byte[] array, final byte element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1142,
    "end_line": 1144,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 1)   \u003d [1] ArrayUtils.add([1], 0)    \u003d [0, 1] ArrayUtils.add([1, 0], 1) \u003d [1, 1, 0] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1171",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(char[], char)",
    "snippet": "public static char[] addFirst(final char[] array, final char element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1171,
    "end_line": 1173,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, \u00271\u0027)       \u003d [\u00271\u0027] ArrayUtils.add([\u00271\u0027], \u00270\u0027)      \u003d [\u00270\u0027, \u00271\u0027] ArrayUtils.add([\u00271\u0027, \u00270\u0027], \u00271\u0027) \u003d [\u00271\u0027, \u00271\u0027, \u00270\u0027] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1200",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(double[], double)",
    "snippet": "public static double[] addFirst(final double[] array, final double element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1200,
    "end_line": 1202,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 1)   \u003d [1] ArrayUtils.add([1], 0)    \u003d [0, 1] ArrayUtils.add([1, 0], 1) \u003d [1, 1, 0] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1229",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(float[], float)",
    "snippet": "public static float[] addFirst(final float[] array, final float element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1229,
    "end_line": 1231,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 1)   \u003d [1] ArrayUtils.add([1], 0)    \u003d [0, 1] ArrayUtils.add([1, 0], 1) \u003d [1, 1, 0] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1258",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(int[], int)",
    "snippet": "public static int[] addFirst(final int[] array, final int element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1258,
    "end_line": 1260,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 1)   \u003d [1] ArrayUtils.add([1], 0)    \u003d [0, 1] ArrayUtils.add([1, 0], 1) \u003d [1, 1, 0] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1287",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(long[], long)",
    "snippet": "public static long[] addFirst(final long[] array, final long element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1287,
    "end_line": 1289,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 1)   \u003d [1] ArrayUtils.add([1], 0)    \u003d [0, 1] ArrayUtils.add([1, 0], 1) \u003d [1, 1, 0] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1316",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(short[], short)",
    "snippet": "public static short[] addFirst(final short[] array, final short element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1316,
    "end_line": 1318,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first position. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element. \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, 1)   \u003d [1] ArrayUtils.add([1], 0)    \u003d [0, 1] ArrayUtils.add([1, 0], 1) \u003d [1, 1, 0] \u003c/pre\u003e\n * @param array the array to \"add\" the element to, may be {@code null}.\n * @param element the object to add.\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.addFirst#1350",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.addFirst(T[], T)",
    "snippet": "public static \u003cT\u003e T[] addFirst(final T[] array, final T element) {\n        return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\n    }",
    "begin_line": 1350,
    "end_line": 1352,
    "comment": "/** \n * Copies the given array and adds the given element at the beginning of the new array. \u003cp\u003e The new array contains the same elements of the input array plus the given element in the first positioaddFirstaddFirstaddFirstn. The component type of the new array is the same as that of the input array. \u003c/p\u003e \u003cp\u003e If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element, unless the element itself is null, in which case the return type is Object[] \u003c/p\u003e \u003cpre\u003e ArrayUtils.add(null, null)      \u003d IllegalArgumentException ArrayUtils.add(null, \"a\")       \u003d [\"a\"] ArrayUtils.add([\"a\"], null)     \u003d [null, \"a\"] ArrayUtils.add([\"a\"], \"b\")      \u003d [\"b\", \"a\"] ArrayUtils.add([\"a\", \"b\"], \"c\") \u003d [\"c\", \"a\", \"b\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array the array to \"add\" the element to, may be {@code null}\n * @param element the object to add, may be {@code null}\n * @return A new array containing the existing elements plus the new element The returned array type will be that ofthe input array (unless null), in which case it will have the same type as the element. If both are null, an IllegalArgumentException is thrown\n * @since 3.10\n * @throws IllegalArgumentException if both arguments are null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1363",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(boolean[])",
    "snippet": "public static boolean[] clone(final boolean[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 1363,
    "end_line": 1368,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1379",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(byte[])",
    "snippet": "public static byte[] clone(final byte[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 1379,
    "end_line": 1384,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1395",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(char[])",
    "snippet": "public static char[] clone(final char[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 1395,
    "end_line": 1400,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1411",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(double[])",
    "snippet": "public static double[] clone(final double[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 1411,
    "end_line": 1416,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1427",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(float[])",
    "snippet": "public static float[] clone(final float[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 1427,
    "end_line": 1432,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1443",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(int[])",
    "snippet": "public static int[] clone(final int[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 1443,
    "end_line": 1448,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1459",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(long[])",
    "snippet": "public static long[] clone(final long[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 1459,
    "end_line": 1464,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1475",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(short[])",
    "snippet": "public static short[] clone(final short[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 1475,
    "end_line": 1480,
    "comment": "/** \n * \u003cp\u003eClones an array returning a typecast result and handling {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  the array to clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.clone#1497",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.clone(T[])",
    "snippet": "public static \u003cT\u003e T[] clone(final T[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        return array.clone();\n    }",
    "begin_line": 1497,
    "end_line": 1502,
    "comment": "/** \n * \u003cp\u003eShallow clones an array returning a typecast result and handling {@code null}. \u003cp\u003eThe objects in the array are not cloned, thus there is no special handling for multi-dimensional arrays. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to shallow clone, may be {@code null}\n * @return the cloned array, {@code null} if {@code null} input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1513",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(boolean[], boolean)",
    "snippet": "public static boolean contains(final boolean[] array, final boolean valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1513,
    "end_line": 1515,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array. \u003cp\u003eThe method returns  {@code false} if a {@code null} array is passed in.\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1526",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(byte[], byte)",
    "snippet": "public static boolean contains(final byte[] array, final byte valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1526,
    "end_line": 1528,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array. \u003cp\u003eThe method returns  {@code false} if a {@code null} array is passed in.\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1540",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(char[], char)",
    "snippet": "public static boolean contains(final char[] array, final char valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1540,
    "end_line": 1542,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array. \u003cp\u003eThe method returns  {@code false} if a {@code null} array is passed in.\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1553",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(double[], double)",
    "snippet": "public static boolean contains(final double[] array, final double valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1553,
    "end_line": 1555,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array. \u003cp\u003eThe method returns  {@code false} if a {@code null} array is passed in.\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1570",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(double[], double, double)",
    "snippet": "public static boolean contains(final double[] array, final double valueToFind, final double tolerance) {\n        return indexOf(array, valueToFind, 0, tolerance) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1570,
    "end_line": 1572,
    "comment": "/** \n * \u003cp\u003eChecks if a value falling within the given tolerance is in the given array.  If the array contains a value within the inclusive range defined by (value - tolerance) to (value + tolerance). \u003cp\u003eThe method returns  {@code false} if a {@code null} arrayis passed in.\n * @param array  the array to search\n * @param valueToFind  the value to find\n * @param tolerance  the array contains the tolerance of the search\n * @return true if value falling within tolerance is in array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1583",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(float[], float)",
    "snippet": "public static boolean contains(final float[] array, final float valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1583,
    "end_line": 1585,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array. \u003cp\u003eThe method returns  {@code false} if a {@code null} array is passed in.\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1596",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(int[], int)",
    "snippet": "public static boolean contains(final int[] array, final int valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1596,
    "end_line": 1598,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array. \u003cp\u003eThe method returns  {@code false} if a {@code null} array is passed in.\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1609",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(long[], long)",
    "snippet": "public static boolean contains(final long[] array, final long valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1609,
    "end_line": 1611,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array. \u003cp\u003eThe method returns  {@code false} if a {@code null} array is passed in.\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1622",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(java.lang.Object[], java.lang.Object)",
    "snippet": "public static boolean contains(final Object[] array, final Object objectToFind) {\n        return indexOf(array, objectToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1622,
    "end_line": 1624,
    "comment": "/** \n * \u003cp\u003eChecks if the object is in the given array. \u003cp\u003eThe method returns  {@code false} if a {@code null} array is passed in.\n * @param array  the array to search through\n * @param objectToFind  the object to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.contains#1635",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.contains(short[], short)",
    "snippet": "public static boolean contains(final short[] array, final short valueToFind) {\n        return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\n    }",
    "begin_line": 1635,
    "end_line": 1637,
    "comment": "/** \n * \u003cp\u003eChecks if the value is in the given array. \u003cp\u003eThe method returns  {@code false} if a {@code null} array is passed in.\n * @param array  the array to search through\n * @param valueToFind  the value to find\n * @return {@code true} if the array contains the object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.copyArrayGrow1#1648",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.copyArrayGrow1(java.lang.Object, java.lang.Class\u003c?\u003e)",
    "snippet": "private static Object copyArrayGrow1(final Object array, final Class\u003c?\u003e newArrayComponentType) {\n        if (array !\u003d null) {\n            final int arrayLength \u003d Array.getLength(array);\n            final Object newArray \u003d Array.newInstance(array.getClass().getComponentType(), arrayLength + 1);\n            System.arraycopy(array, 0, newArray, 0, arrayLength);\n            return newArray;\n        }\n        return Array.newInstance(newArrayComponentType, 1);\n    }",
    "begin_line": 1648,
    "end_line": 1656,
    "comment": "/** \n * Returns a copy of the given array of size 1 greater than the argument. The last value of the array is left to the default value.\n * @param array The array to copy, must not be {@code null}.\n * @param newArrayComponentType If {@code array} is {@code null}, create a size 1 array of this type.\n * @return A new copy of the array of size 1 greater than the input.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.get#1667",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.get(T[], int)",
    "snippet": "public static \u003cT\u003e T get(final T[] array, final int index) {\n        return get(array, index, null);\n    }",
    "begin_line": 1667,
    "end_line": 1669,
    "comment": "/** \n * Gets the nTh element of an array or null if the index is out of bounds or the array is null.\n * @param \u003c T \u003e The type of array elements.\n * @param array The array to index.\n * @param index The index\n * @return the nTh element of an array or null if the index is out of bounds or the array is null.\n * @since 3.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.get#1681",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.get(T[], int, T)",
    "snippet": "public static \u003cT\u003e T get(final T[] array, final int index, final T defaultValue) {\n        return isArrayIndexValid(array, index) ? array[index] : defaultValue;\n    }",
    "begin_line": 1681,
    "end_line": 1683,
    "comment": "/** \n * Gets the nTh element of an array or a default value if the index is out of bounds.\n * @param \u003c T \u003e The type of array elements.\n * @param array The array to index.\n * @param index The index\n * @param defaultValue The return value of the given index is out of bounds.\n * @return the nTh element of an array or a default value if the index is out of bounds.\n * @since 3.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.getLength#1706",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.getLength(java.lang.Object)",
    "snippet": "public static int getLength(final Object array) {\n        if (array \u003d\u003d null) {\n            return 0;\n        }\n        return Array.getLength(array);\n    }",
    "begin_line": 1706,
    "end_line": 1711,
    "comment": "/** \n * \u003cp\u003eReturns the length of the specified array. This method can deal with  {@code Object} arrays and with primitive arrays.\u003cp\u003eIf the input array is  {@code null},  {@code 0} is returned.\u003cpre\u003e ArrayUtils.getLength(null)            \u003d 0 ArrayUtils.getLength([])              \u003d 0 ArrayUtils.getLength([null])          \u003d 1 ArrayUtils.getLength([true, false])   \u003d 2 ArrayUtils.getLength([1, 2, 3])       \u003d 3 ArrayUtils.getLength([\"a\", \"b\", \"c\"]) \u003d 3 \u003c/pre\u003e\n * @param array  the array to retrieve the length from, may be null\n * @return The length of the array, or {@code 0} if the array is {@code null}\n * @throws IllegalArgumentException if the object argument is not an array.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.hashCode#1721",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.hashCode(java.lang.Object)",
    "snippet": "public static int hashCode(final Object array) {\n        return new HashCodeBuilder().append(array).toHashCode();\n    }",
    "begin_line": 1721,
    "end_line": 1723,
    "comment": "/** \n * \u003cp\u003eGet a hash code for an array handling multi-dimensional arrays correctly. \u003cp\u003eMulti-dimensional primitive arrays are also handled correctly by this method.\n * @param array  the array to get a hash code for, {@code null} returns zero\n * @return a hash code for the array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1736",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(boolean[], boolean)",
    "snippet": "public static BitSet indexesOf(final boolean[] array, final boolean valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 1736,
    "end_line": 1738,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1756",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(boolean[], boolean, int)",
    "snippet": "public static BitSet indexesOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 1756,
    "end_line": 1775,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet ( {@code -1}).\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null}array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1788",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(byte[], byte)",
    "snippet": "public static BitSet indexesOf(final byte[] array, final byte valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 1788,
    "end_line": 1790,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1807",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(byte[], byte, int)",
    "snippet": "public static BitSet indexesOf(final byte[] array, final byte valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 1807,
    "end_line": 1826,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1839",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(char[], char)",
    "snippet": "public static BitSet indexesOf(final char[] array, final char valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 1839,
    "end_line": 1841,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1858",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(char[], char, int)",
    "snippet": "public static BitSet indexesOf(final char[] array, final char valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 1858,
    "end_line": 1877,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1890",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(double[], double)",
    "snippet": "public static BitSet indexesOf(final double[] array, final double valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 1890,
    "end_line": 1892,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1911",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(double[], double, double)",
    "snippet": "public static BitSet indexesOf(final double[] array, final double valueToFind, final double tolerance) {\n        return indexesOf(array, valueToFind, 0, tolerance);\n    }",
    "begin_line": 1911,
    "end_line": 1913,
    "comment": "/** \n * Finds the indices of the given value within a given tolerance in the array. \u003cp\u003e This method will return all the indices of the value which fall between the region defined by valueToFind - tolerance and valueToFind + tolerance, each time between the nearest integers. \u003c/p\u003e \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param tolerance tolerance of the search\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1930",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(double[], double, int)",
    "snippet": "public static BitSet indexesOf(final double[] array, final double valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 1930,
    "end_line": 1949,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#1972",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(double[], double, int, double)",
    "snippet": "public static BitSet indexesOf(final double[] array, final double valueToFind, int startIndex, final double tolerance) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex, tolerance);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 1972,
    "end_line": 1991,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003e This method will return the indices of the values which fall between the region defined by valueToFind - tolerance and valueToFind + tolerance, between the nearest integers. \u003c/p\u003e \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @param tolerance tolerance of the search\n * @return a BitSet of the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2004",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(float[], float)",
    "snippet": "public static BitSet indexesOf(final float[] array, final float valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 2004,
    "end_line": 2006,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2023",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(float[], float, int)",
    "snippet": "public static BitSet indexesOf(final float[] array, final float valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 2023,
    "end_line": 2042,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2055",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(int[], int)",
    "snippet": "public static BitSet indexesOf(final int[] array, final int valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 2055,
    "end_line": 2057,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2074",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(int[], int, int)",
    "snippet": "public static BitSet indexesOf(final int[] array, final int valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 2074,
    "end_line": 2093,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2106",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(long[], long)",
    "snippet": "public static BitSet indexesOf(final long[] array, final long valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 2106,
    "end_line": 2108,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2125",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(long[], long, int)",
    "snippet": "public static BitSet indexesOf(final long[] array, final long valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 2125,
    "end_line": 2144,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2157",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(java.lang.Object[], java.lang.Object)",
    "snippet": "public static BitSet indexesOf(final Object[] array, final Object objectToFind) {\n        return indexesOf(array, objectToFind, 0);\n    }",
    "begin_line": 2157,
    "end_line": 2159,
    "comment": "/** \n * Finds the indices of the given object in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param objectToFind  the object to find, may be {@code null}\n * @return a BitSet of all the indices of the object within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2176",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(java.lang.Object[], java.lang.Object, int)",
    "snippet": "public static BitSet indexesOf(final Object[] array, final Object objectToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, objectToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 2176,
    "end_line": 2195,
    "comment": "/** \n * Finds the indices of the given object in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param objectToFind  the object to find, may be {@code null}\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the object within the array starting at the index,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2208",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(short[], short)",
    "snippet": "public static BitSet indexesOf(final short[] array, final short valueToFind) {\n        return indexesOf(array, valueToFind, 0);\n    }",
    "begin_line": 2208,
    "end_line": 2210,
    "comment": "/** \n * Finds the indices of the given value in the array. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexesOf#2227",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexesOf(short[], short, int)",
    "snippet": "public static BitSet indexesOf(final short[] array, final short valueToFind, int startIndex) {\n        final BitSet bitSet \u003d new BitSet();\n\n        if (array \u003d\u003d null) {\n            return bitSet;\n        }\n\n        while (startIndex \u003c array.length) {\n            startIndex \u003d indexOf(array, valueToFind, startIndex);\n\n            if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\n                break;\n            }\n\n            bitSet.set(startIndex);\n            ++startIndex;\n        }\n\n        return bitSet;\n    }",
    "begin_line": 2227,
    "end_line": 2246,
    "comment": "/** \n * Finds the indices of the given value in the array starting at the given index. \u003cp\u003eThis method returns an empty BitSet for a  {@code null} input array.\u003c/p\u003e\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return an empty BitSet.\u003c/p\u003e\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return a BitSet of all the indices of the value within the array,an empty BitSet if not found or  {@code null} array input\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2260",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(boolean[], boolean)",
    "snippet": "public static int indexOf(final boolean[] array, final boolean valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2260,
    "end_line": 2262,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2279",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(boolean[], boolean, int)",
    "snippet": "public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n        if (isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2279,
    "end_line": 2292,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null}array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2306",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(byte[], byte)",
    "snippet": "public static int indexOf(final byte[] array, final byte valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2306,
    "end_line": 2308,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2324",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(byte[], byte, int)",
    "snippet": "public static int indexOf(final byte[] array, final byte valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2324,
    "end_line": 2337,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2352",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(char[], char)",
    "snippet": "public static int indexOf(final char[] array, final char valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2352,
    "end_line": 2354,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2371",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(char[], char, int)",
    "snippet": "public static int indexOf(final char[] array, final char valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2371,
    "end_line": 2384,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2398",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(double[], double)",
    "snippet": "public static int indexOf(final double[] array, final double valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2398,
    "end_line": 2400,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2415",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(double[], double, double)",
    "snippet": "public static int indexOf(final double[] array, final double valueToFind, final double tolerance) {\n        return indexOf(array, valueToFind, 0, tolerance);\n    }",
    "begin_line": 2415,
    "end_line": 2417,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value within a given tolerance in the array. This method will return the index of the first value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param tolerance tolerance of the search\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2433",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(double[], double, int)",
    "snippet": "public static int indexOf(final double[] array, final double valueToFind, int startIndex) {\n        if (isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2433,
    "end_line": 2446,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2465",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(double[], double, int, double)",
    "snippet": "public static int indexOf(final double[] array, final double valueToFind, int startIndex, final double tolerance) {\n        if (isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        final double min \u003d valueToFind - tolerance;\n        final double max \u003d valueToFind + tolerance;\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (array[i] \u003e\u003d min \u0026\u0026 array[i] \u003c\u003d max) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2465,
    "end_line": 2480,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index. This method will return the index of the first value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @param tolerance tolerance of the search\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2494",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(float[], float)",
    "snippet": "public static int indexOf(final float[] array, final float valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2494,
    "end_line": 2496,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2512",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(float[], float, int)",
    "snippet": "public static int indexOf(final float[] array, final float valueToFind, int startIndex) {\n        if (isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2512,
    "end_line": 2525,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2539",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(int[], int)",
    "snippet": "public static int indexOf(final int[] array, final int valueToFind) {\n    return indexOf(array, valueToFind, 0);\n}",
    "begin_line": 2539,
    "end_line": 2541,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2557",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(int[], int, int)",
    "snippet": "public static int indexOf(final int[] array, final int valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2557,
    "end_line": 2570,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2584",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(long[], long)",
    "snippet": "public static int indexOf(final long[] array, final long valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2584,
    "end_line": 2586,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2602",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(long[], long, int)",
    "snippet": "public static int indexOf(final long[] array, final long valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2602,
    "end_line": 2615,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2629",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object)",
    "snippet": "public static int indexOf(final Object[] array, final Object objectToFind) {\n        return indexOf(array, objectToFind, 0);\n    }",
    "begin_line": 2629,
    "end_line": 2631,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given object in the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param objectToFind  the object to find, may be {@code null}\n * @return the index of the object within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2647",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object, int)",
    "snippet": "public static int indexOf(final Object[] array, final Object objectToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        if (objectToFind \u003d\u003d null) {\n            for (int i \u003d startIndex; i \u003c array.length; i++) {\n                if (array[i] \u003d\u003d null) {\n                    return i;\n                }\n            }\n        } else {\n            for (int i \u003d startIndex; i \u003c array.length; i++) {\n                if (objectToFind.equals(array[i])) {\n                    return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2647,
    "end_line": 2668,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given object in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).\n * @param array  the array to search through for the object, may be {@code null}\n * @param objectToFind  the object to find, may be {@code null}\n * @param startIndex  the index to start searching at\n * @return the index of the object within the array starting at the index,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2682",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(short[], short)",
    "snippet": "public static int indexOf(final short[] array, final short valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
    "begin_line": 2682,
    "end_line": 2684,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.indexOf#2700",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(short[], short, int)",
    "snippet": "public static int indexOf(final short[] array, final short valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 2700,
    "end_line": 2713,
    "comment": "/** \n * \u003cp\u003eFinds the index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the index to start searching at\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#2734",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, boolean[], boolean)",
    "snippet": "public static boolean[] insert(final int index, final boolean[] array, final boolean... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final boolean[] result \u003d new boolean[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 2734,
    "end_line": 2755,
    "comment": "/** \n * \u003cp\u003eInserts elements into an array at the given index (starting from zero).\u003c/p\u003e \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#2776",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, byte[], byte)",
    "snippet": "public static byte[] insert(final int index, final byte[] array, final byte... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final byte[] result \u003d new byte[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 2776,
    "end_line": 2797,
    "comment": "/** \n * \u003cp\u003eInserts elements into an array at the given index (starting from zero).\u003c/p\u003e \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#2818",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, char[], char)",
    "snippet": "public static char[] insert(final int index, final char[] array, final char... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final char[] result \u003d new char[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 2818,
    "end_line": 2839,
    "comment": "/** \n * \u003cp\u003eInserts elements into an array at the given index (starting from zero).\u003c/p\u003e \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#2860",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, double[], double)",
    "snippet": "public static double[] insert(final int index, final double[] array, final double... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final double[] result \u003d new double[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 2860,
    "end_line": 2881,
    "comment": "/** \n * \u003cp\u003eInserts elements into an array at the given index (starting from zero).\u003c/p\u003e \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#2902",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, float[], float)",
    "snippet": "public static float[] insert(final int index, final float[] array, final float... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final float[] result \u003d new float[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 2902,
    "end_line": 2923,
    "comment": "/** \n * \u003cp\u003eInserts elements into an array at the given index (starting from zero).\u003c/p\u003e \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#2944",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, int[], int)",
    "snippet": "public static int[] insert(final int index, final int[] array, final int... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final int[] result \u003d new int[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 2944,
    "end_line": 2965,
    "comment": "/** \n * \u003cp\u003eInserts elements into an array at the given index (starting from zero).\u003c/p\u003e \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#2986",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, long[], long)",
    "snippet": "public static long[] insert(final int index, final long[] array, final long... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final long[] result \u003d new long[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 2986,
    "end_line": 3007,
    "comment": "/** \n * \u003cp\u003eInserts elements into an array at the given index (starting from zero).\u003c/p\u003e \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#3028",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, short[], short)",
    "snippet": "public static short[] insert(final int index, final short[] array, final short... values) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final short[] result \u003d new short[array.length + values.length];\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 3028,
    "end_line": 3049,
    "comment": "/** \n * \u003cp\u003eInserts elements into an array at the given index (starting from zero).\u003c/p\u003e \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.insert#3072",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.insert(int, T[], T)",
    "snippet": "@SafeVarargs\n    public static \u003cT\u003e T[] insert(final int index, final T[] array, final T... values) {\n        /*\n         * Note on use of @SafeVarargs:\n         *\n         * By returning null when \u0027array\u0027 is null, we avoid returning the vararg\n         * array to the caller. We also avoid relying on the type of the vararg\n         * array, by inspecting the component type of \u0027array\u0027.\n         */\n\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (ArrayUtils.isEmpty(values)) {\n            return clone(array);\n        }\n        if (index \u003c 0 || index \u003e array.length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n        }\n\n        final Class\u003c?\u003e type \u003d array.getClass().getComponentType();\n        @SuppressWarnings(\"unchecked\") // OK, because array and values are of type T\n        final\n        T[] result \u003d (T[]) Array.newInstance(type, array.length + values.length);\n\n        System.arraycopy(values, 0, result, index, values.length);\n        if (index \u003e 0) {\n            System.arraycopy(array, 0, result, 0, index);\n        }\n        if (index \u003c array.length) {\n            System.arraycopy(array, index, result, index + values.length, array.length - index);\n        }\n        return result;\n    }",
    "begin_line": 3072,
    "end_line": 3104,
    "comment": "/** \n * \u003cp\u003eInserts elements into an array at the given index (starting from zero).\u003c/p\u003e \u003cp\u003eWhen an array is returned, it is always a new array.\u003c/p\u003e \u003cpre\u003e ArrayUtils.insert(index, null, null)      \u003d null ArrayUtils.insert(index, array, null)     \u003d cloned copy of \u0027array\u0027 ArrayUtils.insert(index, null, values)    \u003d null \u003c/pre\u003e\n * @param \u003c T \u003e The type of elements in {@code array} and {@code values}\n * @param index the position within {@code array} to insert the new values\n * @param array the array to insert the values into, may be {@code null}\n * @param values the new values to insert, may be {@code null}\n * @return The new array.\n * @throws IndexOutOfBoundsException if {@code array} is providedand either  {@code index \u003c 0} or {@code index \u003e array.length}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isArrayIndexValid#3121",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isArrayIndexValid(T[], int)",
    "snippet": "public static \u003cT\u003e boolean isArrayIndexValid(final T[] array, final int index) {\n        return index \u003e\u003d 0 \u0026\u0026 getLength(array) \u003e index;\n    }",
    "begin_line": 3121,
    "end_line": 3123,
    "comment": "/** \n * Returns whether a given array can safely be accessed at the given index. \u003cpre\u003e ArrayUtils.isArrayIndexValid(null, 0)       \u003d false ArrayUtils.isArrayIndexValid([], 0)         \u003d false ArrayUtils.isArrayIndexValid([\"a\"], 0)      \u003d true \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array the array to inspect, may be null\n * @param index the index of the array to be inspected\n * @return Whether the given index is safely-accessible in the given array\n * @since 3.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3132",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(boolean[])",
    "snippet": "public static boolean isEmpty(final boolean[] array) {\n        return getLength(array) \u003d\u003d 0;\n    }",
    "begin_line": 3132,
    "end_line": 3134,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive booleans is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3146",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(byte[])",
    "snippet": "public static boolean isEmpty(final byte[] array) {\n        return getLength(array) \u003d\u003d 0;\n    }",
    "begin_line": 3146,
    "end_line": 3148,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive bytes is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3157",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(char[])",
    "snippet": "public static boolean isEmpty(final char[] array) {\n        return getLength(array) \u003d\u003d 0;\n    }",
    "begin_line": 3157,
    "end_line": 3159,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive chars is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3168",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(double[])",
    "snippet": "public static boolean isEmpty(final double[] array) {\n        return getLength(array) \u003d\u003d 0;\n    }",
    "begin_line": 3168,
    "end_line": 3170,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive doubles is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3179",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(float[])",
    "snippet": "public static boolean isEmpty(final float[] array) {\n        return getLength(array) \u003d\u003d 0;\n    }",
    "begin_line": 3179,
    "end_line": 3181,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive floats is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3192",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(int[])",
    "snippet": "public static boolean isEmpty(final int[] array) {\n        return getLength(array) \u003d\u003d 0;\n    }",
    "begin_line": 3192,
    "end_line": 3194,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive ints is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3203",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(long[])",
    "snippet": "public static boolean isEmpty(final long[] array) {\n        return getLength(array) \u003d\u003d 0;\n    }",
    "begin_line": 3203,
    "end_line": 3205,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive longs is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3215",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(java.lang.Object[])",
    "snippet": "public static boolean isEmpty(final Object[] array) {\n        return getLength(array) \u003d\u003d 0;\n    }",
    "begin_line": 3215,
    "end_line": 3217,
    "comment": "/** \n * \u003cp\u003eChecks if an array of Objects is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEmpty#3226",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(short[])",
    "snippet": "public static boolean isEmpty(final short[] array) {\n        return getLength(array) \u003d\u003d 0;\n    }",
    "begin_line": 3226,
    "end_line": 3228,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive shorts is empty or  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is empty or {@code null}\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isEquals#3243",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isEquals(java.lang.Object, java.lang.Object)",
    "snippet": "@Deprecated\n    public static boolean isEquals(final Object array1, final Object array2) {\n        return new EqualsBuilder().append(array1, array2).isEquals();\n    }",
    "begin_line": 3243,
    "end_line": 3245,
    "comment": "/** \n * \u003cp\u003eCompares two arrays, using equals(), handling multi-dimensional arrays correctly. \u003cp\u003eMulti-dimensional primitive arrays are also handled correctly by this method.\n * @param array1  the left hand array to compare, may be {@code null}\n * @param array2  the right hand array to compare, may be {@code null}\n * @return {@code true} if the arrays are equal\n * @deprecated this method has been replaced by {@code java.util.Objects.deepEquals(Object, Object)} and will beremoved from future releases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3254",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(boolean[])",
    "snippet": "public static boolean isNotEmpty(final boolean[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3254,
    "end_line": 3256,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive booleans is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3265",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(byte[])",
    "snippet": "public static boolean isNotEmpty(final byte[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3265,
    "end_line": 3267,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive bytes is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3276",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(char[])",
    "snippet": "public static boolean isNotEmpty(final char[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3276,
    "end_line": 3278,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive chars is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3287",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(double[])",
    "snippet": "public static boolean isNotEmpty(final double[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3287,
    "end_line": 3289,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive doubles is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3298",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(float[])",
    "snippet": "public static boolean isNotEmpty(final float[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3298,
    "end_line": 3300,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive floats is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3309",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(int[])",
    "snippet": "public static boolean isNotEmpty(final int[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3309,
    "end_line": 3311,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive ints is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3320",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(long[])",
    "snippet": "public static boolean isNotEmpty(final long[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3320,
    "end_line": 3322,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive longs is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3331",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(short[])",
    "snippet": "public static boolean isNotEmpty(final short[] array) {\n        return !isEmpty(array);\n    }",
    "begin_line": 3331,
    "end_line": 3333,
    "comment": "/** \n * \u003cp\u003eChecks if an array of primitive shorts is not empty and not  {@code null}.\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isNotEmpty#3344",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(T[])",
    "snippet": "public static \u003cT\u003e boolean isNotEmpty(final T[] array) {\n         return !isEmpty(array);\n     }",
    "begin_line": 3344,
    "end_line": 3346,
    "comment": "/** \n * \u003cp\u003eChecks if an array of Objects is not empty and not  {@code null}.\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to test\n * @return {@code true} if the array is not empty and not {@code null}\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3357",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(boolean[], boolean[])",
    "snippet": "public static boolean isSameLength(final boolean[] array1, final boolean[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3357,
    "end_line": 3359,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3370",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(byte[], byte[])",
    "snippet": "public static boolean isSameLength(final byte[] array1, final byte[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3370,
    "end_line": 3372,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3383",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(char[], char[])",
    "snippet": "public static boolean isSameLength(final char[] array1, final char[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3383,
    "end_line": 3385,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3396",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(double[], double[])",
    "snippet": "public static boolean isSameLength(final double[] array1, final double[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3396,
    "end_line": 3398,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3409",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(float[], float[])",
    "snippet": "public static boolean isSameLength(final float[] array1, final float[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3409,
    "end_line": 3411,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3422",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(int[], int[])",
    "snippet": "public static boolean isSameLength(final int[] array1, final int[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3422,
    "end_line": 3424,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3435",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(long[], long[])",
    "snippet": "public static boolean isSameLength(final long[] array1, final long[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3435,
    "end_line": 3437,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3452",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(java.lang.Object, java.lang.Object)",
    "snippet": "public static boolean isSameLength(final Object array1, final Object array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3452,
    "end_line": 3454,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}. \u003cp\u003eAny multi-dimensional aspects of the arrays are ignored.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n * @since 3.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3467",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(java.lang.Object[], java.lang.Object[])",
    "snippet": "public static boolean isSameLength(final Object[] array1, final Object[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3467,
    "end_line": 3469,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}. \u003cp\u003eAny multi-dimensional aspects of the arrays are ignored.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameLength#3480",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(short[], short[])",
    "snippet": "public static boolean isSameLength(final short[] array1, final short[] array2) {\n        return getLength(array1) \u003d\u003d getLength(array2);\n    }",
    "begin_line": 3480,
    "end_line": 3482,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.\n * @param array1 the first array, may be {@code null}\n * @param array2 the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating{@code null} as an empty array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSameType#3493",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSameType(java.lang.Object, java.lang.Object)",
    "snippet": "public static boolean isSameType(final Object array1, final Object array2) {\n        if (array1 \u003d\u003d null || array2 \u003d\u003d null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        }\n        return array1.getClass().getName().equals(array2.getClass().getName());\n    }",
    "begin_line": 3493,
    "end_line": 3498,
    "comment": "/** \n * \u003cp\u003eChecks whether two arrays are the same type taking into account multi-dimensional arrays.\n * @param array1 the first array, must not be {@code null}\n * @param array2 the second array, must not be {@code null}\n * @return {@code true} if type of arrays matches\n * @throws IllegalArgumentException if either array is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3508",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(boolean[])",
    "snippet": "public static boolean isSorted(final boolean[] array) {\n        if (array \u003d\u003d null || array.length \u003c 2) {\n            return true;\n        }\n\n        boolean previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final boolean current \u003d array[i];\n            if (BooleanUtils.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3508,
    "end_line": 3524,
    "comment": "/** \n * \u003cp\u003eThis method checks whether the provided array is sorted according to natural ordering ( {@code false} before {@code true}).\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3533",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(byte[])",
    "snippet": "public static boolean isSorted(final byte[] array) {\n        if (array \u003d\u003d null || array.length \u003c 2) {\n            return true;\n        }\n\n        byte previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final byte current \u003d array[i];\n            if (NumberUtils.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3533,
    "end_line": 3549,
    "comment": "/** \n * \u003cp\u003eThis method checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3558",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(char[])",
    "snippet": "public static boolean isSorted(final char[] array) {\n        if (array \u003d\u003d null || array.length \u003c 2) {\n            return true;\n        }\n\n        char previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final char current \u003d array[i];\n            if (CharUtils.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3558,
    "end_line": 3574,
    "comment": "/** \n * \u003cp\u003eThis method checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3583",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(double[])",
    "snippet": "public static boolean isSorted(final double[] array) {\n        if (array \u003d\u003d null || array.length \u003c 2) {\n            return true;\n        }\n\n        double previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final double current \u003d array[i];\n            if (Double.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3583,
    "end_line": 3599,
    "comment": "/** \n * \u003cp\u003eThis method checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3608",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(float[])",
    "snippet": "public static boolean isSorted(final float[] array) {\n        if (array \u003d\u003d null || array.length \u003c 2) {\n            return true;\n        }\n\n        float previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final float current \u003d array[i];\n            if (Float.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3608,
    "end_line": 3624,
    "comment": "/** \n * \u003cp\u003eThis method checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3633",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(int[])",
    "snippet": "public static boolean isSorted(final int[] array) {\n        if (array \u003d\u003d null || array.length \u003c 2) {\n            return true;\n        }\n\n        int previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final int current \u003d array[i];\n            if (NumberUtils.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3633,
    "end_line": 3649,
    "comment": "/** \n * \u003cp\u003eThis method checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3658",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(long[])",
    "snippet": "public static boolean isSorted(final long[] array) {\n        if (array \u003d\u003d null || array.length \u003c 2) {\n            return true;\n        }\n\n        long previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final long current \u003d array[i];\n            if (NumberUtils.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3658,
    "end_line": 3674,
    "comment": "/** \n * \u003cp\u003eThis method checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3683",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(short[])",
    "snippet": "public static boolean isSorted(final short[] array) {\n        if (array \u003d\u003d null || array.length \u003c 2) {\n            return true;\n        }\n\n        short previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final short current \u003d array[i];\n            if (NumberUtils.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3683,
    "end_line": 3699,
    "comment": "/** \n * \u003cp\u003eThis method checks whether the provided array is sorted according to natural ordering.\n * @param array the array to check\n * @return whether the array is sorted according to natural ordering\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3710",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(T[])",
    "snippet": "public static \u003cT extends Comparable\u003c? super T\u003e\u003e boolean isSorted(final T[] array) {\n        return isSorted(array, Comparable::compareTo);\n    }",
    "begin_line": 3710,
    "end_line": 3712,
    "comment": "/** \n * \u003cp\u003eThis method checks whether the provided array is sorted according to the class\u0027s {@code compareTo} method.\n * @param array the array to check\n * @param \u003c T \u003e the datatype of the array to check, it must implement {@code Comparable}\n * @return whether the array is sorted\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.isSorted#3723",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.isSorted(T[], java.util.Comparator\u003cT\u003e)",
    "snippet": "public static \u003cT\u003e boolean isSorted(final T[] array, final Comparator\u003cT\u003e comparator) {\n        if (comparator \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Comparator should not be null.\");\n        }\n\n        if (array \u003d\u003d null || array.length \u003c 2) {\n            return true;\n        }\n\n        T previous \u003d array[0];\n        final int n \u003d array.length;\n        for (int i \u003d 1; i \u003c n; i++) {\n            final T current \u003d array[i];\n            if (comparator.compare(previous, current) \u003e 0) {\n                return false;\n            }\n\n            previous \u003d current;\n        }\n        return true;\n    }",
    "begin_line": 3723,
    "end_line": 3743,
    "comment": "/** \n * \u003cp\u003eThis method checks whether the provided array is sorted according to the provided  {@code Comparator}.\n * @param array the array to check\n * @param comparator the {@code Comparator} to compare over\n * @param \u003c T \u003e the datatype of the array\n * @return whether the array is sorted\n * @since 3.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3756",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(boolean[], boolean)",
    "snippet": "public static int lastIndexOf(final boolean[] array, final boolean valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 3756,
    "end_line": 3758,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) if {@code null} array input.\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3774",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(boolean[], boolean, int)",
    "snippet": "public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n        if (isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 3774,
    "end_line": 3789,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3801",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(byte[], byte)",
    "snippet": "public static int lastIndexOf(final byte[] array, final byte valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 3801,
    "end_line": 3803,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3819",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(byte[], byte, int)",
    "snippet": "public static int lastIndexOf(final byte[] array, final byte valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 3819,
    "end_line": 3834,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3847",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(char[], char)",
    "snippet": "public static int lastIndexOf(final char[] array, final char valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 3847,
    "end_line": 3849,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3866",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(char[], char, int)",
    "snippet": "public static int lastIndexOf(final char[] array, final char valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 3866,
    "end_line": 3881,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3893",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(double[], double)",
    "snippet": "public static int lastIndexOf(final double[] array, final double valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 3893,
    "end_line": 3895,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3910",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(double[], double, double)",
    "snippet": "public static int lastIndexOf(final double[] array, final double valueToFind, final double tolerance) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance);\n    }",
    "begin_line": 3910,
    "end_line": 3912,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within a given tolerance in the array. This method will return the index of the last value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to search through for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param tolerance tolerance of the search\n * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3928",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(double[], double, int)",
    "snippet": "public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex) {\n        if (isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 3928,
    "end_line": 3943,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3962",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(double[], double, int, double)",
    "snippet": "public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex, final double tolerance) {\n        if (isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        final double min \u003d valueToFind - tolerance;\n        final double max \u003d valueToFind + tolerance;\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (array[i] \u003e\u003d min \u0026\u0026 array[i] \u003c\u003d max) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 3962,
    "end_line": 3979,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index. This method will return the index of the last value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @param tolerance  search for value within plus/minus this amount\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#3992",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(float[], float)",
    "snippet": "public static int lastIndexOf(final float[] array, final float valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 3992,
    "end_line": 3994,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4010",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(float[], float, int)",
    "snippet": "public static int lastIndexOf(final float[] array, final float valueToFind, int startIndex) {\n        if (isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 4010,
    "end_line": 4025,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4037",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(int[], int)",
    "snippet": "public static int lastIndexOf(final int[] array, final int valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 4037,
    "end_line": 4039,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4055",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(int[], int, int)",
    "snippet": "public static int lastIndexOf(final int[] array, final int valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 4055,
    "end_line": 4070,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4082",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(long[], long)",
    "snippet": "public static int lastIndexOf(final long[] array, final long valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 4082,
    "end_line": 4084,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4100",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(long[], long, int)",
    "snippet": "public static int lastIndexOf(final long[] array, final long valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 4100,
    "end_line": 4115,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4127",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(java.lang.Object[], java.lang.Object)",
    "snippet": "public static int lastIndexOf(final Object[] array, final Object objectToFind) {\n        return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 4127,
    "end_line": 4129,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given object within the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param objectToFind  the object to find, may be {@code null}\n * @return the last index of the object within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4145",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(java.lang.Object[], java.lang.Object, int)",
    "snippet": "public static int lastIndexOf(final Object[] array, final Object objectToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        if (objectToFind \u003d\u003d null) {\n            for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n                if (array[i] \u003d\u003d null) {\n                    return i;\n                }\n            }\n        } else if (array.getClass().getComponentType().isInstance(objectToFind)) {\n            for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n                if (objectToFind.equals(array[i])) {\n                    return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 4145,
    "end_line": 4168,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given object in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param objectToFind  the object to find, may be {@code null}\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the object within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4180",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(short[], short)",
    "snippet": "public static int lastIndexOf(final short[] array, final short valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
    "begin_line": 4180,
    "end_line": 4182,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value within the array. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\n * @param array  the array to traverse backwards looking for the object, may be {@code null}\n * @param valueToFind  the object to find\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.lastIndexOf#4198",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(short[], short, int)",
    "snippet": "public static int lastIndexOf(final short[] array, final short valueToFind, int startIndex) {\n        if (array \u003d\u003d null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex \u003c 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex \u003e\u003d array.length) {\n            startIndex \u003d array.length - 1;\n        }\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\n            if (valueToFind \u003d\u003d array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
    "begin_line": 4198,
    "end_line": 4213,
    "comment": "/** \n * \u003cp\u003eFinds the last index of the given value in the array starting at the given index. \u003cp\u003eThis method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.\u003cp\u003eA negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.\n * @param array  the array to traverse for looking for the object, may be {@code null}\n * @param valueToFind  the value to find\n * @param startIndex  the start index to traverse backwards from\n * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4228",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(boolean[])",
    "snippet": "public static boolean[] nullToEmpty(final boolean[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_BOOLEAN_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4228,
    "end_line": 4233,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4248",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Boolean[])",
    "snippet": "public static Boolean[] nullToEmpty(final Boolean[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_BOOLEAN_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4248,
    "end_line": 4253,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4268",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(byte[])",
    "snippet": "public static byte[] nullToEmpty(final byte[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4268,
    "end_line": 4273,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4288",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Byte[])",
    "snippet": "public static Byte[] nullToEmpty(final Byte[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_BYTE_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4288,
    "end_line": 4293,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4308",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(char[])",
    "snippet": "public static char[] nullToEmpty(final char[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4308,
    "end_line": 4313,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4328",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Character[])",
    "snippet": "public static Character[] nullToEmpty(final Character[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_CHARACTER_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4328,
    "end_line": 4333,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4348",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Class\u003c?\u003e[])",
    "snippet": "public static Class\u003c?\u003e[] nullToEmpty(final Class\u003c?\u003e[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_CLASS_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4348,
    "end_line": 4353,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4368",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(double[])",
    "snippet": "public static double[] nullToEmpty(final double[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_DOUBLE_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4368,
    "end_line": 4373,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4388",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Double[])",
    "snippet": "public static Double[] nullToEmpty(final Double[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_DOUBLE_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4388,
    "end_line": 4393,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4408",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(float[])",
    "snippet": "public static float[] nullToEmpty(final float[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_FLOAT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4408,
    "end_line": 4413,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4428",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Float[])",
    "snippet": "public static Float[] nullToEmpty(final Float[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_FLOAT_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4428,
    "end_line": 4433,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4448",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(int[])",
    "snippet": "public static int[] nullToEmpty(final int[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_INT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4448,
    "end_line": 4453,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4471",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Integer[])",
    "snippet": "public static Integer[] nullToEmpty(final Integer[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_INTEGER_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4471,
    "end_line": 4476,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4491",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(long[])",
    "snippet": "public static long[] nullToEmpty(final long[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_LONG_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4491,
    "end_line": 4496,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4511",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Long[])",
    "snippet": "public static Long[] nullToEmpty(final Long[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_LONG_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4511,
    "end_line": 4516,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4531",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Object[])",
    "snippet": "public static Object[] nullToEmpty(final Object[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4531,
    "end_line": 4536,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4551",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(short[])",
    "snippet": "public static short[] nullToEmpty(final short[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_SHORT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4551,
    "end_line": 4556,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4571",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Short[])",
    "snippet": "public static Short[] nullToEmpty(final Short[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_SHORT_OBJECT_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4571,
    "end_line": 4576,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4591",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.String[])",
    "snippet": "public static String[] nullToEmpty(final String[] array) {\n        if (isEmpty(array)) {\n            return EMPTY_STRING_ARRAY;\n        }\n        return array;\n    }",
    "begin_line": 4591,
    "end_line": 4596,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.\n * @param array  the array to check for {@code null} or empty\n * @return the same array, {@code public static} empty array if {@code null} or empty input\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.nullToEmpty#4613",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(T[], java.lang.Class\u003cT[]\u003e)",
    "snippet": "public static \u003cT\u003e T[] nullToEmpty(final T[] array, final Class\u003cT[]\u003e type) {\n        if (type \u003d\u003d null) {\n            throw new IllegalArgumentException(\"The type must not be null\");\n        }\n\n        if (array \u003d\u003d null) {\n            return type.cast(Array.newInstance(type.getComponentType(), 0));\n        }\n        return array;\n    }",
    "begin_line": 4613,
    "end_line": 4622,
    "comment": "/** \n * \u003cp\u003eDefensive programming technique to change a  {@code null}reference to an empty one. \u003cp\u003eThis method returns an empty array for a  {@code null} input array.\n * @param array  the array to check for {@code null} or empty\n * @param type   the class representation of the desired array\n * @param \u003c T \u003e  the class type\n * @return the same array, {@code public static} empty array if {@code null}\n * @throws IllegalArgumentException if the type argument is null\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4652",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(boolean[], int)",
    "snippet": "public static boolean[] remove(final boolean[] array, final int index) {\n        return (boolean[]) remove((Object) array, index);\n    }",
    "begin_line": 4652,
    "end_line": 4654,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.remove([true], 0)              \u003d [] ArrayUtils.remove([true, false], 0)       \u003d [false] ArrayUtils.remove([true, false], 1)       \u003d [true] ArrayUtils.remove([true, true, false], 1) \u003d [true, false] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4684",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(byte[], int)",
    "snippet": "public static byte[] remove(final byte[] array, final int index) {\n        return (byte[]) remove((Object) array, index);\n    }",
    "begin_line": 4684,
    "end_line": 4686,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.remove([1], 0)          \u003d [] ArrayUtils.remove([1, 0], 0)       \u003d [0] ArrayUtils.remove([1, 0], 1)       \u003d [1] ArrayUtils.remove([1, 0, 1], 1)    \u003d [1, 1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4716",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(char[], int)",
    "snippet": "public static char[] remove(final char[] array, final int index) {\n        return (char[]) remove((Object) array, index);\n    }",
    "begin_line": 4716,
    "end_line": 4718,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.remove([\u0027a\u0027], 0)           \u003d [] ArrayUtils.remove([\u0027a\u0027, \u0027b\u0027], 0)      \u003d [\u0027b\u0027] ArrayUtils.remove([\u0027a\u0027, \u0027b\u0027], 1)      \u003d [\u0027a\u0027] ArrayUtils.remove([\u0027a\u0027, \u0027b\u0027, \u0027c\u0027], 1) \u003d [\u0027a\u0027, \u0027c\u0027] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4748",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(double[], int)",
    "snippet": "public static double[] remove(final double[] array, final int index) {\n        return (double[]) remove((Object) array, index);\n    }",
    "begin_line": 4748,
    "end_line": 4750,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.remove([1.1], 0)           \u003d [] ArrayUtils.remove([2.5, 6.0], 0)      \u003d [6.0] ArrayUtils.remove([2.5, 6.0], 1)      \u003d [2.5] ArrayUtils.remove([2.5, 6.0, 3.8], 1) \u003d [2.5, 3.8] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4780",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(float[], int)",
    "snippet": "public static float[] remove(final float[] array, final int index) {\n        return (float[]) remove((Object) array, index);\n    }",
    "begin_line": 4780,
    "end_line": 4782,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.remove([1.1], 0)           \u003d [] ArrayUtils.remove([2.5, 6.0], 0)      \u003d [6.0] ArrayUtils.remove([2.5, 6.0], 1)      \u003d [2.5] ArrayUtils.remove([2.5, 6.0, 3.8], 1) \u003d [2.5, 3.8] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4812",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(int[], int)",
    "snippet": "public static int[] remove(final int[] array, final int index) {\n        return (int[]) remove((Object) array, index);\n    }",
    "begin_line": 4812,
    "end_line": 4814,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.remove([1], 0)         \u003d [] ArrayUtils.remove([2, 6], 0)      \u003d [6] ArrayUtils.remove([2, 6], 1)      \u003d [2] ArrayUtils.remove([2, 6, 3], 1)   \u003d [2, 3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4844",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(long[], int)",
    "snippet": "public static long[] remove(final long[] array, final int index) {\n        return (long[]) remove((Object) array, index);\n    }",
    "begin_line": 4844,
    "end_line": 4846,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.remove([1], 0)         \u003d [] ArrayUtils.remove([2, 6], 0)      \u003d [6] ArrayUtils.remove([2, 6], 1)      \u003d [2] ArrayUtils.remove([2, 6, 3], 1)   \u003d [2, 3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4869",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(java.lang.Object, int)",
    "snippet": "private static Object remove(final Object array, final int index) {\n        final int length \u003d getLength(array);\n        if (index \u003c 0 || index \u003e\u003d length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + length);\n        }\n\n        final Object result \u003d Array.newInstance(array.getClass().getComponentType(), length - 1);\n        System.arraycopy(array, 0, result, 0, index);\n        if (index \u003c length - 1) {\n            System.arraycopy(array, index + 1, result, index, length - index - 1);\n        }\n\n        return result;\n    }",
    "begin_line": 4869,
    "end_line": 4882,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4912",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(short[], int)",
    "snippet": "public static short[] remove(final short[] array, final int index) {\n        return (short[]) remove((Object) array, index);\n    }",
    "begin_line": 4912,
    "end_line": 4914,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.remove([1], 0)         \u003d [] ArrayUtils.remove([2, 6], 0)      \u003d [6] ArrayUtils.remove([2, 6], 1)      \u003d [2] ArrayUtils.remove([2, 6, 3], 1)   \u003d [2, 3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.remove#4946",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.remove(T[], int)",
    "snippet": "@SuppressWarnings(\"unchecked\") remove(final T[] array, final int index) {\n        return (T[]) remove((Object) array, index);\n    }",
    "begin_line": 4946,
    "end_line": 4948,
    "comment": "/** \n * \u003cp\u003eRemoves the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). \u003cp\u003eThis method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.remove([\"a\"], 0)           \u003d [] ArrayUtils.remove([\"a\", \"b\"], 0)      \u003d [\"b\"] ArrayUtils.remove([\"a\", \"b\"], 1)      \u003d [\"a\"] ArrayUtils.remove([\"a\", \"b\", \"c\"], 1) \u003d [\"a\", \"c\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to remove the element from, may not be {@code null}\n * @param index  the position of the element to be removed\n * @return A new array containing the existing elements except the elementat the specified position.\n * @throws IndexOutOfBoundsException if the index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#4975",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(boolean[], int)",
    "snippet": "public static boolean[] removeAll(final boolean[] array, final int... indices) {\n        return (boolean[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 4975,
    "end_line": 4977,
    "comment": "/** \n * \u003cp\u003eRemoves the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003eThis method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.removeAll([true, false, true], 0, 2) \u003d [false] ArrayUtils.removeAll([true, false, true], 1, 2) \u003d [true] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5008",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(byte[], int)",
    "snippet": "public static byte[] removeAll(final byte[] array, final int... indices) {\n        return (byte[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5008,
    "end_line": 5010,
    "comment": "/** \n * \u003cp\u003eRemoves the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003eThis method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5041",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(char[], int)",
    "snippet": "public static char[] removeAll(final char[] array, final int... indices) {\n        return (char[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5041,
    "end_line": 5043,
    "comment": "/** \n * \u003cp\u003eRemoves the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003eThis method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5074",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(double[], int)",
    "snippet": "public static double[] removeAll(final double[] array, final int... indices) {\n        return (double[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5074,
    "end_line": 5076,
    "comment": "/** \n * \u003cp\u003eRemoves the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003eThis method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5107",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(float[], int)",
    "snippet": "public static float[] removeAll(final float[] array, final int... indices) {\n        return (float[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5107,
    "end_line": 5109,
    "comment": "/** \n * \u003cp\u003eRemoves the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003eThis method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5140",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(int[], int)",
    "snippet": "public static int[] removeAll(final int[] array, final int... indices) {\n        return (int[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5140,
    "end_line": 5142,
    "comment": "/** \n * \u003cp\u003eRemoves the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003eThis method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5173",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(long[], int)",
    "snippet": "public static long[] removeAll(final long[] array, final int... indices) {\n        return (long[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5173,
    "end_line": 5175,
    "comment": "/** \n * \u003cp\u003eRemoves the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003eThis method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5186",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(java.lang.Object, java.util.BitSet)",
    "snippet": " removeAll(final Object array, final BitSet indices) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n\n        final int srcLength \u003d getLength(array);\n        // No need to check maxIndex here, because method only currently called from removeElements()\n        // which guarantee to generate only valid bit entries.\n//        final int maxIndex \u003d indices.length();\n//        if (maxIndex \u003e srcLength) {\n//            throw new IndexOutOfBoundsException(\"Index: \" + (maxIndex-1) + \", Length: \" + srcLength);\n//        }\n        final int removals \u003d indices.cardinality(); // true bits are items to remove\n        final Object result \u003d Array.newInstance(array.getClass().getComponentType(), srcLength - removals);\n        int srcIndex \u003d 0;\n        int destIndex \u003d 0;\n        int count;\n        int set;\n        while ((set \u003d indices.nextSetBit(srcIndex)) !\u003d -1) {\n            count \u003d set - srcIndex;\n            if (count \u003e 0) {\n                System.arraycopy(array, srcIndex, result, destIndex, count);\n                destIndex +\u003d count;\n            }\n            srcIndex \u003d indices.nextClearBit(set);\n        }\n        count \u003d srcLength - srcIndex;\n        if (count \u003e 0) {\n            System.arraycopy(array, srcIndex, result, destIndex, count);\n        }\n        return result;\n    }",
    "begin_line": 5186,
    "end_line": 5217,
    "comment": "/** \n * Removes multiple array elements specified by indices.\n * @param array source\n * @param indices to remove\n * @return new array of same type minus elements specified by the set bits in {@code indices}\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5227",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(java.lang.Object, int)",
    "snippet": " removeAll(final Object array, final int... indices) {\n        final int length \u003d getLength(array);\n        int diff \u003d 0; // number of distinct indexes, i.e. number of entries that will be removed\n        final int[] clonedIndices \u003d clone(indices);\n        Arrays.sort(clonedIndices);\n\n        // identify length of result array\n        if (isNotEmpty(clonedIndices)) {\n            int i \u003d clonedIndices.length;\n            int prevIndex \u003d length;\n            while (--i \u003e\u003d 0) {\n                final int index \u003d clonedIndices[i];\n                if (index \u003c 0 || index \u003e\u003d length) {\n                    throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + length);\n                }\n                if (index \u003e\u003d prevIndex) {\n                    continue;\n                }\n                diff++;\n                prevIndex \u003d index;\n            }\n        }\n\n        // create result array\n        final Object result \u003d Array.newInstance(array.getClass().getComponentType(), length - diff);\n        if (diff \u003c length) {\n            int end \u003d length; // index just after last copy\n            int dest \u003d length - diff; // number of entries so far not copied\n            for (int i \u003d clonedIndices.length - 1; i \u003e\u003d 0; i--) {\n                final int index \u003d clonedIndices[i];\n                if (end - index \u003e 1) { // same as (cp \u003e 0)\n                    final int cp \u003d end - index - 1;\n                    dest -\u003d cp;\n                    System.arraycopy(array, index + 1, result, dest, cp);\n                    // After this copy, we still have room for dest items.\n                }\n                end \u003d index;\n            }\n            if (end \u003e 0) {\n                System.arraycopy(array, 0, result, 0, end);\n            }\n        }\n        return result;\n    }",
    "begin_line": 5227,
    "end_line": 5270,
    "comment": "/** \n * Removes multiple array elements specified by index.\n * @param array source\n * @param indices to remove\n * @return new array of same type minus elements specified by unique values of {@code indices}\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5301",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(short[], int)",
    "snippet": "public static short[] removeAll(final short[] array, final int... indices) {\n        return (short[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5301,
    "end_line": 5303,
    "comment": "/** \n * \u003cp\u003eRemoves the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003eThis method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.removeAll([1], 0)             \u003d [] ArrayUtils.removeAll([2, 6], 0)          \u003d [6] ArrayUtils.removeAll([2, 6], 0, 1)       \u003d [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d [] \u003c/pre\u003e\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAll#5332",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(T[], int)",
    "snippet": "@SuppressWarnings(\"unchecked\") removeAll(final T[] array, final int... indices) {\n        return (T[]) removeAll((Object) array, indices);\n    }",
    "begin_line": 5332,
    "end_line": 5334,
    "comment": "/** \n * \u003cp\u003eRemoves the elements at the specified positions from the specified array. All remaining elements are shifted to the left. \u003cp\u003eThis method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array. \u003cp\u003eIf the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. \u003cpre\u003e ArrayUtils.removeAll([\"a\", \"b\", \"c\"], 0, 2) \u003d [\"b\"] ArrayUtils.removeAll([\"a\", \"b\", \"c\"], 1, 2) \u003d [\"a\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array   the array to remove the element from, may not be {@code null}\n * @param indices the positions of the elements to be removed\n * @return A new array containing the existing elements except thoseat the specified positions.\n * @throws IndexOutOfBoundsException if any index is out of range(index \u0026lt; 0 || index \u0026gt;\u003d array.length), or if the array is  {@code null}.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5353",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(boolean[], boolean)",
    "snippet": "@Deprecated\n    public static boolean[] removeAllOccurences(final boolean[] array, final boolean element) {\n        return (boolean[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5353,
    "end_line": 5355,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified boolean array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n * @deprecated Use {@link #removeAllOccurrences(boolean[],boolean)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5374",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(byte[], byte)",
    "snippet": "@Deprecated\n    public static byte[] removeAllOccurences(final byte[] array, final byte element) {\n        return (byte[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5374,
    "end_line": 5376,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified byte array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n * @deprecated Use {@link #removeAllOccurrences(byte[],byte)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5395",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(char[], char)",
    "snippet": "@Deprecated\n    public static char[] removeAllOccurences(final char[] array, final char element) {\n        return (char[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5395,
    "end_line": 5397,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified char array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n * @deprecated Use {@link #removeAllOccurrences(char[],char)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5416",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(double[], double)",
    "snippet": "@Deprecated\n    public static double[] removeAllOccurences(final double[] array, final double element) {\n        return (double[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5416,
    "end_line": 5418,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified double array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n * @deprecated Use {@link #removeAllOccurrences(double[],double)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5437",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(float[], float)",
    "snippet": "@Deprecated\n    public static float[] removeAllOccurences(final float[] array, final float element) {\n        return (float[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5437,
    "end_line": 5439,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified float array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n * @deprecated Use {@link #removeAllOccurrences(float[],float)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5458",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(int[], int)",
    "snippet": "@Deprecated\n    public static int[] removeAllOccurences(final int[] array, final int element) {\n        return (int[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5458,
    "end_line": 5460,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified int array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n * @deprecated Use {@link #removeAllOccurrences(int[],int)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5479",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(long[], long)",
    "snippet": "@Deprecated\n    public static long[] removeAllOccurences(final long[] array, final long element) {\n        return (long[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5479,
    "end_line": 5481,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified long array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n * @deprecated Use {@link #removeAllOccurrences(long[],long)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5500",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(short[], short)",
    "snippet": "@Deprecated\n    public static short[] removeAllOccurences(final short[] array, final short element) {\n        return (short[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5500,
    "end_line": 5502,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified short array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n * @deprecated Use {@link #removeAllOccurrences(short[],short)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurences#5522",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurences(T[], T)",
    "snippet": "@Deprecated\n    public static \u003cT\u003e T[] removeAllOccurences(final T[] array, final T element) {\n        return (T[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5522,
    "end_line": 5524,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param \u003c T \u003e the type of object in the array\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.5\n * @deprecated Use {@link #removeAllOccurrences(Object[],Object)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurrences#5541",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurrences(boolean[], boolean)",
    "snippet": "public static boolean[] removeAllOccurrences(final boolean[] array, final boolean element) {\n        return (boolean[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5541,
    "end_line": 5543,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified boolean array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurrences#5560",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurrences(byte[], byte)",
    "snippet": "public static byte[] removeAllOccurrences(final byte[] array, final byte element) {\n        return (byte[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5560,
    "end_line": 5562,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified byte array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurrences#5579",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurrences(char[], char)",
    "snippet": "public static char[] removeAllOccurrences(final char[] array, final char element) {\n        return (char[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5579,
    "end_line": 5581,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified char array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurrences#5598",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurrences(double[], double)",
    "snippet": "public static double[] removeAllOccurrences(final double[] array, final double element) {\n        return (double[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5598,
    "end_line": 5600,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified double array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurrences#5617",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurrences(float[], float)",
    "snippet": "public static float[] removeAllOccurrences(final float[] array, final float element) {\n        return (float[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5617,
    "end_line": 5619,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified float array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurrences#5636",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurrences(int[], int)",
    "snippet": "public static int[] removeAllOccurrences(final int[] array, final int element) {\n        return (int[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5636,
    "end_line": 5638,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified int array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurrences#5655",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurrences(long[], long)",
    "snippet": "public static long[] removeAllOccurrences(final long[] array, final long element) {\n        return (long[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5655,
    "end_line": 5657,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified long array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurrences#5674",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurrences(short[], short)",
    "snippet": "public static short[] removeAllOccurrences(final short[] array, final short element) {\n        return (short[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5674,
    "end_line": 5676,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified short array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeAllOccurrences#5694",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeAllOccurrences(T[], T)",
    "snippet": "public static \u003cT\u003e T[] removeAllOccurrences(final T[] array, final T element) {\n        return (T[]) removeAll((Object) array, indexesOf(array, element));\n    }",
    "begin_line": 5694,
    "end_line": 5696,
    "comment": "/** \n * Removes the occurrences of the specified element from the specified array. \u003cp\u003e All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. {@code null} will be returned if the input array is {@code null}. \u003c/p\u003e\n * @param \u003c T \u003e the type of object in the array\n * @param element the element to remove\n * @param array the input array\n * @return A new array containing the existing elements except the occurrences of the specified element.\n * @since 3.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5723",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(boolean[], boolean)",
    "snippet": "public static boolean[] removeElement(final boolean[] array, final boolean element) {\n        final int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 5723,
    "end_line": 5729,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElement(null, true)                \u003d null ArrayUtils.removeElement([], true)                  \u003d [] ArrayUtils.removeElement([true], false)             \u003d [true] ArrayUtils.removeElement([true, false], false)      \u003d [true] ArrayUtils.removeElement([true, false, true], true) \u003d [false, true] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5756",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(byte[], byte)",
    "snippet": "public static byte[] removeElement(final byte[] array, final byte element) {\n        final int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 5756,
    "end_line": 5762,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElement(null, 1)        \u003d null ArrayUtils.removeElement([], 1)          \u003d [] ArrayUtils.removeElement([1], 0)         \u003d [1] ArrayUtils.removeElement([1, 0], 0)      \u003d [1] ArrayUtils.removeElement([1, 0, 1], 1)   \u003d [0, 1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5789",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(char[], char)",
    "snippet": "public static char[] removeElement(final char[] array, final char element) {\n        final int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 5789,
    "end_line": 5795,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElement(null, \u0027a\u0027)            \u003d null ArrayUtils.removeElement([], \u0027a\u0027)              \u003d [] ArrayUtils.removeElement([\u0027a\u0027], \u0027b\u0027)           \u003d [\u0027a\u0027] ArrayUtils.removeElement([\u0027a\u0027, \u0027b\u0027], \u0027a\u0027)      \u003d [\u0027b\u0027] ArrayUtils.removeElement([\u0027a\u0027, \u0027b\u0027, \u0027a\u0027], \u0027a\u0027) \u003d [\u0027b\u0027, \u0027a\u0027] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5822",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(double[], double)",
    "snippet": "public static double[] removeElement(final double[] array, final double element) {\n        final int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 5822,
    "end_line": 5828,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElement(null, 1.1)            \u003d null ArrayUtils.removeElement([], 1.1)              \u003d [] ArrayUtils.removeElement([1.1], 1.2)           \u003d [1.1] ArrayUtils.removeElement([1.1, 2.3], 1.1)      \u003d [2.3] ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) \u003d [2.3, 1.1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5855",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(float[], float)",
    "snippet": "public static float[] removeElement(final float[] array, final float element) {\n        final int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 5855,
    "end_line": 5861,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElement(null, 1.1)            \u003d null ArrayUtils.removeElement([], 1.1)              \u003d [] ArrayUtils.removeElement([1.1], 1.2)           \u003d [1.1] ArrayUtils.removeElement([1.1, 2.3], 1.1)      \u003d [2.3] ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) \u003d [2.3, 1.1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5888",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(int[], int)",
    "snippet": "public static int[] removeElement(final int[] array, final int element) {\n        final int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 5888,
    "end_line": 5894,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElement(null, 1)      \u003d null ArrayUtils.removeElement([], 1)        \u003d [] ArrayUtils.removeElement([1], 2)       \u003d [1] ArrayUtils.removeElement([1, 3], 1)    \u003d [3] ArrayUtils.removeElement([1, 3, 1], 1) \u003d [3, 1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5921",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(long[], long)",
    "snippet": "public static long[] removeElement(final long[] array, final long element) {\n        final int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 5921,
    "end_line": 5927,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElement(null, 1)      \u003d null ArrayUtils.removeElement([], 1)        \u003d [] ArrayUtils.removeElement([1], 2)       \u003d [1] ArrayUtils.removeElement([1, 3], 1)    \u003d [3] ArrayUtils.removeElement([1, 3, 1], 1) \u003d [3, 1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5954",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(short[], short)",
    "snippet": "public static short[] removeElement(final short[] array, final short element) {\n        final int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 5954,
    "end_line": 5960,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElement(null, 1)      \u003d null ArrayUtils.removeElement([], 1)        \u003d [] ArrayUtils.removeElement([1], 2)       \u003d [1] ArrayUtils.removeElement([1, 3], 1)    \u003d [3] ArrayUtils.removeElement([1, 3, 1], 1) \u003d [3, 1] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElement#5988",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(T[], java.lang.Object)",
    "snippet": "public static \u003cT\u003e T[] removeElement(final T[] array, final Object element) {\n        final int index \u003d indexOf(array, element);\n        if (index \u003d\u003d INDEX_NOT_FOUND) {\n            return clone(array);\n        }\n        return remove(array, index);\n    }",
    "begin_line": 5988,
    "end_line": 5994,
    "comment": "/** \n * \u003cp\u003eRemoves the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn\u0027t contains such an element, no elements are removed from the array. \u003cp\u003eThis method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElement(null, \"a\")            \u003d null ArrayUtils.removeElement([], \"a\")              \u003d [] ArrayUtils.removeElement([\"a\"], \"b\")           \u003d [\"a\"] ArrayUtils.removeElement([\"a\", \"b\"], \"a\")      \u003d [\"b\"] ArrayUtils.removeElement([\"a\", \"b\", \"a\"], \"a\") \u003d [\"b\", \"a\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to remove the element from, may be {@code null}\n * @param element  the element to be removed\n * @return A new array containing the existing elements except the firstoccurrence of the specified element.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6023",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(boolean[], boolean)",
    "snippet": "public static boolean[] removeElements(final boolean[] array, final boolean... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cBoolean, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(2); // only two possible values here\n        for (final boolean v : values) {\n            final Boolean boxed \u003d Boolean.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final boolean key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (boolean[]) removeAll(array, toRemove);\n    }",
    "begin_line": 6023,
    "end_line": 6049,
    "comment": "/** \n * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003eThis method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElements(null, true, false)               \u003d null ArrayUtils.removeElements([], true, false)                 \u003d [] ArrayUtils.removeElements([true], false, false)            \u003d [true] ArrayUtils.removeElements([true, false], true, true)       \u003d [false] ArrayUtils.removeElements([true, false, true], true)       \u003d [false, true] ArrayUtils.removeElements([true, false, true], true, true) \u003d [false] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6078",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(byte[], byte)",
    "snippet": "public static byte[] removeElements(final byte[] array, final byte... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final Map\u003cByte, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final byte v : values) {\n            final Byte boxed \u003d Byte.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final byte key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (byte[]) removeAll(array, toRemove);\n    }",
    "begin_line": 6078,
    "end_line": 6104,
    "comment": "/** \n * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003eThis method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6133",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(char[], char)",
    "snippet": "public static char[] removeElements(final char[] array, final char... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cCharacter, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final char v : values) {\n            final Character boxed \u003d Character.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final char key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (char[]) removeAll(array, toRemove);\n    }",
    "begin_line": 6133,
    "end_line": 6159,
    "comment": "/** \n * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003eThis method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6188",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(double[], double)",
    "snippet": "public static double[] removeElements(final double[] array, final double... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cDouble, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final double v : values) {\n            final Double boxed \u003d Double.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final double key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (double[]) removeAll(array, toRemove);\n    }",
    "begin_line": 6188,
    "end_line": 6214,
    "comment": "/** \n * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003eThis method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6243",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(float[], float)",
    "snippet": "public static float[] removeElements(final float[] array, final float... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cFloat, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final float v : values) {\n            final Float boxed \u003d Float.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final float key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (float[]) removeAll(array, toRemove);\n    }",
    "begin_line": 6243,
    "end_line": 6269,
    "comment": "/** \n * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003eThis method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6298",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(int[], int)",
    "snippet": "public static int[] removeElements(final int[] array, final int... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cInteger, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final int v : values) {\n            final Integer boxed \u003d Integer.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final int key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (int[]) removeAll(array, toRemove);\n    }",
    "begin_line": 6298,
    "end_line": 6324,
    "comment": "/** \n * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003eThis method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6353",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(long[], long)",
    "snippet": "public static long[] removeElements(final long[] array, final long... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cLong, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final long v : values) {\n            final Long boxed \u003d Long.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final long key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (long[]) removeAll(array, toRemove);\n    }",
    "begin_line": 6353,
    "end_line": 6379,
    "comment": "/** \n * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003eThis method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6408",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(short[], short)",
    "snippet": "public static short[] removeElements(final short[] array, final short... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cShort, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final short v : values) {\n            final Short boxed \u003d Short.valueOf(v);\n            final MutableInt count \u003d occurrences.get(boxed);\n            if (count \u003d\u003d null) {\n                occurrences.put(boxed, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final short key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        return (short[]) removeAll(array, toRemove);\n    }",
    "begin_line": 6408,
    "end_line": 6434,
    "comment": "/** \n * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003eThis method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElements(null, 1, 2)      \u003d null ArrayUtils.removeElements([], 1, 2)        \u003d [] ArrayUtils.removeElements([1], 2, 3)       \u003d [1] ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3] ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3] \u003c/pre\u003e\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.removeElements#6465",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(T[], T)",
    "snippet": "@SafeVarargs\n    public static \u003cT\u003e T[] removeElements(final T[] array, final T... values) {\n        if (isEmpty(array) || isEmpty(values)) {\n            return clone(array);\n        }\n        final HashMap\u003cT, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\n        for (final T v : values) {\n            final MutableInt count \u003d occurrences.get(v);\n            if (count \u003d\u003d null) {\n                occurrences.put(v, new MutableInt(1));\n            } else {\n                count.increment();\n            }\n        }\n        final BitSet toRemove \u003d new BitSet();\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final T key \u003d array[i];\n            final MutableInt count \u003d occurrences.get(key);\n            if (count !\u003d null) {\n                if (count.decrementAndGet() \u003d\u003d 0) {\n                    occurrences.remove(key);\n                }\n                toRemove.set(i);\n            }\n        }\n        @SuppressWarnings(\"unchecked\") // removeAll() always creates an array of the same type as its input\n        final T[] result \u003d (T[]) removeAll(array, toRemove);\n        return result;\n    }",
    "begin_line": 6465,
    "end_line": 6492,
    "comment": "/** \n * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items. \u003cp\u003eThis method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array. \u003cpre\u003e ArrayUtils.removeElements(null, \"a\", \"b\")            \u003d null ArrayUtils.removeElements([], \"a\", \"b\")              \u003d [] ArrayUtils.removeElements([\"a\"], \"b\", \"c\")           \u003d [\"a\"] ArrayUtils.removeElements([\"a\", \"b\"], \"a\", \"c\")      \u003d [\"b\"] ArrayUtils.removeElements([\"a\", \"b\", \"a\"], \"a\")      \u003d [\"b\", \"a\"] ArrayUtils.removeElements([\"a\", \"b\", \"a\"], \"a\", \"a\") \u003d [\"b\"] \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array  the array to remove the element from, may be {@code null}\n * @param values the elements to be removed\n * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.\n * @since 3.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6501",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(boolean[])",
    "snippet": "public static void reverse(final boolean[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        reverse(array, 0, array.length);\n    }",
    "begin_line": 6501,
    "end_line": 6506,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array. \u003cp\u003eThis method does nothing for a  {@code null} input array.\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6525",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(boolean[], int, int)",
    "snippet": "public static void reverse(final boolean[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d Math.max(startIndexInclusive, 0);\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        boolean tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6525,
    "end_line": 6539,
    "comment": "/** \n * \u003cp\u003e Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6548",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(byte[])",
    "snippet": "public static void reverse(final byte[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        reverse(array, 0, array.length);\n    }",
    "begin_line": 6548,
    "end_line": 6553,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array. \u003cp\u003eThis method does nothing for a  {@code null} input array.\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6572",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(byte[], int, int)",
    "snippet": "public static void reverse(final byte[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d Math.max(startIndexInclusive, 0);\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        byte tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6572,
    "end_line": 6586,
    "comment": "/** \n * \u003cp\u003e Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6595",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(char[])",
    "snippet": "public static void reverse(final char[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        reverse(array, 0, array.length);\n    }",
    "begin_line": 6595,
    "end_line": 6600,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array. \u003cp\u003eThis method does nothing for a  {@code null} input array.\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6619",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(char[], int, int)",
    "snippet": "public static void reverse(final char[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d Math.max(startIndexInclusive, 0);\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        char tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6619,
    "end_line": 6633,
    "comment": "/** \n * \u003cp\u003e Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6642",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(double[])",
    "snippet": "public static void reverse(final double[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        reverse(array, 0, array.length);\n    }",
    "begin_line": 6642,
    "end_line": 6647,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array. \u003cp\u003eThis method does nothing for a  {@code null} input array.\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6666",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(double[], int, int)",
    "snippet": "public static void reverse(final double[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d Math.max(startIndexInclusive, 0);\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        double tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6666,
    "end_line": 6680,
    "comment": "/** \n * \u003cp\u003e Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6689",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(float[])",
    "snippet": "public static void reverse(final float[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        reverse(array, 0, array.length);\n    }",
    "begin_line": 6689,
    "end_line": 6694,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array. \u003cp\u003eThis method does nothing for a  {@code null} input array.\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6713",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(float[], int, int)",
    "snippet": "public static void reverse(final float[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d Math.max(startIndexInclusive, 0);\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        float tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6713,
    "end_line": 6727,
    "comment": "/** \n * \u003cp\u003e Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6736",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(int[])",
    "snippet": "public static void reverse(final int[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        reverse(array, 0, array.length);\n    }",
    "begin_line": 6736,
    "end_line": 6741,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array. \u003cp\u003eThis method does nothing for a  {@code null} input array.\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6760",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(int[], int, int)",
    "snippet": "public static void reverse(final int[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d Math.max(startIndexInclusive, 0);\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        int tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6760,
    "end_line": 6774,
    "comment": "/** \n * \u003cp\u003e Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6783",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(long[])",
    "snippet": "public static void reverse(final long[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        reverse(array, 0, array.length);\n    }",
    "begin_line": 6783,
    "end_line": 6788,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array. \u003cp\u003eThis method does nothing for a  {@code null} input array.\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6807",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(long[], int, int)",
    "snippet": "public static void reverse(final long[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d Math.max(startIndexInclusive, 0);\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        long tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6807,
    "end_line": 6821,
    "comment": "/** \n * \u003cp\u003e Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6834",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(java.lang.Object[])",
    "snippet": "public static void reverse(final Object[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        reverse(array, 0, array.length);\n    }",
    "begin_line": 6834,
    "end_line": 6839,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. \u003cp\u003eThis method does nothing for a  {@code null} input array.\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6858",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(java.lang.Object[], int, int)",
    "snippet": "public static void reverse(final Object[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d Math.max(startIndexInclusive, 0);\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        Object tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6858,
    "end_line": 6872,
    "comment": "/** \n * \u003cp\u003e Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Under value (\u0026lt;0) is promoted to 0, over value (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Under value (\u0026lt; start index) results in no change. Over value (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6881",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(short[])",
    "snippet": "public static void reverse(final short[] array) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        reverse(array, 0, array.length);\n    }",
    "begin_line": 6881,
    "end_line": 6886,
    "comment": "/** \n * \u003cp\u003eReverses the order of the given array. \u003cp\u003eThis method does nothing for a  {@code null} input array.\n * @param array  the array to reverse, may be {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.reverse#6905",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.reverse(short[], int, int)",
    "snippet": "public static void reverse(final short[] array, final int startIndexInclusive, final int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        int i \u003d Math.max(startIndexInclusive, 0);\n        int j \u003d Math.min(array.length, endIndexExclusive) - 1;\n        short tmp;\n        while (j \u003e i) {\n            tmp \u003d array[j];\n            array[j] \u003d array[i];\n            array[i] \u003d tmp;\n            j--;\n            i++;\n        }\n    }",
    "begin_line": 6905,
    "end_line": 6919,
    "comment": "/** \n * \u003cp\u003e Reverses the order of the given array in the given range. \u003cp\u003e This method does nothing for a  {@code null} input array.\n * @param array the array to reverse, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are reversed in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @since 3.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#6933",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(boolean[], int)",
    "snippet": "public static void shift(final boolean[] array, final int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        shift(array, 0, array.length, offset);\n    }",
    "begin_line": 6933,
    "end_line": 6938,
    "comment": "/** \n * Shifts the order of the given boolean array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#6959",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(boolean[], int, int, int)",
    "snippet": "public static void shift(final boolean[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        if (startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int n_offset \u003d n - offset;\n\n            if (offset \u003e n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - n_offset,  n_offset);\n                n \u003d offset;\n                offset -\u003d n_offset;\n            } else if (offset \u003c n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d n_offset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 6959,
    "end_line": 6998,
    "comment": "/** \n * Shifts the order of a series of elements in the given boolean array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7012",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(byte[], int)",
    "snippet": "public static void shift(final byte[] array, final int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        shift(array, 0, array.length, offset);\n    }",
    "begin_line": 7012,
    "end_line": 7017,
    "comment": "/** \n * Shifts the order of the given byte array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7038",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(byte[], int, int, int)",
    "snippet": "public static void shift(final byte[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        if (startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int n_offset \u003d n - offset;\n\n            if (offset \u003e n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - n_offset,  n_offset);\n                n \u003d offset;\n                offset -\u003d n_offset;\n            } else if (offset \u003c n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d n_offset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7038,
    "end_line": 7077,
    "comment": "/** \n * Shifts the order of a series of elements in the given byte array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7091",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(char[], int)",
    "snippet": "public static void shift(final char[] array, final int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        shift(array, 0, array.length, offset);\n    }",
    "begin_line": 7091,
    "end_line": 7096,
    "comment": "/** \n * Shifts the order of the given char array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7117",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(char[], int, int, int)",
    "snippet": "public static void shift(final char[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        if (startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int n_offset \u003d n - offset;\n\n            if (offset \u003e n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - n_offset,  n_offset);\n                n \u003d offset;\n                offset -\u003d n_offset;\n            } else if (offset \u003c n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d n_offset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7117,
    "end_line": 7156,
    "comment": "/** \n * Shifts the order of a series of elements in the given char array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7170",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(double[], int)",
    "snippet": "public static void shift(final double[] array, final int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        shift(array, 0, array.length, offset);\n    }",
    "begin_line": 7170,
    "end_line": 7175,
    "comment": "/** \n * Shifts the order of the given double array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7196",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(double[], int, int, int)",
    "snippet": "public static void shift(final double[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        if (startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int n_offset \u003d n - offset;\n\n            if (offset \u003e n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - n_offset,  n_offset);\n                n \u003d offset;\n                offset -\u003d n_offset;\n            } else if (offset \u003c n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d n_offset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7196,
    "end_line": 7235,
    "comment": "/** \n * Shifts the order of a series of elements in the given double array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7249",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(float[], int)",
    "snippet": "public static void shift(final float[] array, final int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        shift(array, 0, array.length, offset);\n    }",
    "begin_line": 7249,
    "end_line": 7254,
    "comment": "/** \n * Shifts the order of the given float array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7275",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(float[], int, int, int)",
    "snippet": "public static void shift(final float[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        if (startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int n_offset \u003d n - offset;\n\n            if (offset \u003e n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - n_offset,  n_offset);\n                n \u003d offset;\n                offset -\u003d n_offset;\n            } else if (offset \u003c n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d n_offset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7275,
    "end_line": 7314,
    "comment": "/** \n * Shifts the order of a series of elements in the given float array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7328",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(int[], int)",
    "snippet": "public static void shift(final int[] array, final int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        shift(array, 0, array.length, offset);\n    }",
    "begin_line": 7328,
    "end_line": 7333,
    "comment": "/** \n * Shifts the order of the given int array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7354",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(int[], int, int, int)",
    "snippet": "public static void shift(final int[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        if (startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int n_offset \u003d n - offset;\n\n            if (offset \u003e n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - n_offset,  n_offset);\n                n \u003d offset;\n                offset -\u003d n_offset;\n            } else if (offset \u003c n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d n_offset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7354,
    "end_line": 7393,
    "comment": "/** \n * Shifts the order of a series of elements in the given int array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7407",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(long[], int)",
    "snippet": "public static void shift(final long[] array, final int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        shift(array, 0, array.length, offset);\n    }",
    "begin_line": 7407,
    "end_line": 7412,
    "comment": "/** \n * Shifts the order of the given long array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7433",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(long[], int, int, int)",
    "snippet": "public static void shift(final long[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        if (startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int n_offset \u003d n - offset;\n\n            if (offset \u003e n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - n_offset,  n_offset);\n                n \u003d offset;\n                offset -\u003d n_offset;\n            } else if (offset \u003c n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d n_offset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7433,
    "end_line": 7472,
    "comment": "/** \n * Shifts the order of a series of elements in the given long array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7488",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(java.lang.Object[], int)",
    "snippet": "public static void shift(final Object[] array, final int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        shift(array, 0, array.length, offset);\n    }",
    "begin_line": 7488,
    "end_line": 7493,
    "comment": "/** \n * Shifts the order of the given array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7514",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(java.lang.Object[], int, int, int)",
    "snippet": "public static void shift(final Object[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        if (startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int n_offset \u003d n - offset;\n\n            if (offset \u003e n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - n_offset,  n_offset);\n                n \u003d offset;\n                offset -\u003d n_offset;\n            } else if (offset \u003c n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d n_offset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7514,
    "end_line": 7553,
    "comment": "/** \n * Shifts the order of a series of elements in the given array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7567",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(short[], int)",
    "snippet": "public static void shift(final short[] array, final int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        shift(array, 0, array.length, offset);\n    }",
    "begin_line": 7567,
    "end_line": 7572,
    "comment": "/** \n * Shifts the order of the given short array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array  the array to shift, may be {@code null}\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shift#7593",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shift(short[], int, int, int)",
    "snippet": "public static void shift(final short[] array, int startIndexInclusive, int endIndexExclusive, int offset) {\n        if (array \u003d\u003d null) {\n            return;\n        }\n        if (startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\n            return;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e\u003d array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        int n \u003d endIndexExclusive - startIndexInclusive;\n        if (n \u003c\u003d 1) {\n            return;\n        }\n        offset %\u003d n;\n        if (offset \u003c 0) {\n            offset +\u003d n;\n        }\n        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\n        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\n        while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\n            final int n_offset \u003d n - offset;\n\n            if (offset \u003e n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n - n_offset,  n_offset);\n                n \u003d offset;\n                offset -\u003d n_offset;\n            } else if (offset \u003c n_offset) {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset,  offset);\n                startIndexInclusive +\u003d offset;\n                n \u003d n_offset;\n            } else {\n                swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);\n                break;\n            }\n        }\n    }",
    "begin_line": 7593,
    "end_line": 7632,
    "comment": "/** \n * Shifts the order of a series of elements in the given short array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for  {@code null} or empty input arrays.\u003c/p\u003e\n * @param array the array to shift, may be  {@code null}\n * @param startIndexInclusive the starting index. Undervalue (\u0026lt;0) is promoted to 0, overvalue (\u0026gt;array.length) results in no change.\n * @param endIndexExclusive elements up to endIndex-1 are shifted in the array. Undervalue (\u0026lt; start index) results in no change. Overvalue (\u0026gt;array.length) is demoted to array length.\n * @param offset The number of positions to rotate the elements.  If the offset is larger than the number of elements to rotate, than the effective offset is modulo the number of elements to rotate.\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7641",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(boolean[])",
    "snippet": "public static void shuffle(final boolean[] array) {\n        shuffle(array, new Random());\n    }",
    "begin_line": 7641,
    "end_line": 7643,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7653",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(boolean[], java.util.Random)",
    "snippet": "public static void shuffle(final boolean[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7653,
    "end_line": 7657,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7666",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(byte[])",
    "snippet": "public static void shuffle(final byte[] array) {\n        shuffle(array, new Random());\n    }",
    "begin_line": 7666,
    "end_line": 7668,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7678",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(byte[], java.util.Random)",
    "snippet": "public static void shuffle(final byte[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7678,
    "end_line": 7682,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7691",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(char[])",
    "snippet": "public static void shuffle(final char[] array) {\n        shuffle(array, new Random());\n    }",
    "begin_line": 7691,
    "end_line": 7693,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7703",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(char[], java.util.Random)",
    "snippet": "public static void shuffle(final char[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7703,
    "end_line": 7707,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7716",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(double[])",
    "snippet": "public static void shuffle(final double[] array) {\n        shuffle(array, new Random());\n    }",
    "begin_line": 7716,
    "end_line": 7718,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7728",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(double[], java.util.Random)",
    "snippet": "public static void shuffle(final double[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7728,
    "end_line": 7732,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7741",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(float[])",
    "snippet": "public static void shuffle(final float[] array) {\n        shuffle(array, new Random());\n    }",
    "begin_line": 7741,
    "end_line": 7743,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7753",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(float[], java.util.Random)",
    "snippet": "public static void shuffle(final float[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7753,
    "end_line": 7757,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7766",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(int[])",
    "snippet": "public static void shuffle(final int[] array) {\n        shuffle(array, new Random());\n    }",
    "begin_line": 7766,
    "end_line": 7768,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7778",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(int[], java.util.Random)",
    "snippet": "public static void shuffle(final int[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7778,
    "end_line": 7782,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7791",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(long[])",
    "snippet": "public static void shuffle(final long[] array) {\n        shuffle(array, new Random());\n    }",
    "begin_line": 7791,
    "end_line": 7793,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7803",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(long[], java.util.Random)",
    "snippet": "public static void shuffle(final long[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7803,
    "end_line": 7807,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7816",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(java.lang.Object[])",
    "snippet": "public static void shuffle(final Object[] array) {\n        shuffle(array, new Random());\n    }",
    "begin_line": 7816,
    "end_line": 7818,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7828",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(java.lang.Object[], java.util.Random)",
    "snippet": "public static void shuffle(final Object[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7828,
    "end_line": 7832,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7841",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(short[])",
    "snippet": "public static void shuffle(final short[] array) {\n        shuffle(array, new Random());\n    }",
    "begin_line": 7841,
    "end_line": 7843,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.shuffle#7853",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.shuffle(short[], java.util.Random)",
    "snippet": "public static void shuffle(final short[] array, final Random random) {\n        for (int i \u003d array.length; i \u003e 1; i--) {\n            swap(array, i - 1, random.nextInt(i), 1);\n        }\n    }",
    "begin_line": 7853,
    "end_line": 7857,
    "comment": "/** \n * Randomly permutes the elements of the specified array using the Fisher-Yates algorithm.\n * @param array   the array to shuffle\n * @param random  the source of randomness used to permute the elements\n * @see \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\"\u003eFisher-Yates shuffle algorithm\u003c/a\u003e\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#7879",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(boolean[], int, int)",
    "snippet": "public static boolean[] subarray(final boolean[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_BOOLEAN_ARRAY;\n        }\n\n        final boolean[] subarray \u003d new boolean[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 7879,
    "end_line": 7897,
    "comment": "/** \n * \u003cp\u003eProduces a new  {@code boolean} array containing the elementsbetween the start and end indices. \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(boolean[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#7919",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(byte[], int, int)",
    "snippet": "public static byte[] subarray(final byte[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n\n        final byte[] subarray \u003d new byte[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 7919,
    "end_line": 7937,
    "comment": "/** \n * \u003cp\u003eProduces a new  {@code byte} array containing the elementsbetween the start and end indices. \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(byte[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#7959",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(char[], int, int)",
    "snippet": "public static char[] subarray(final char[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n\n        final char[] subarray \u003d new char[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 7959,
    "end_line": 7977,
    "comment": "/** \n * \u003cp\u003eProduces a new  {@code char} array containing the elementsbetween the start and end indices. \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(char[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#7999",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(double[], int, int)",
    "snippet": "public static double[] subarray(final double[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_DOUBLE_ARRAY;\n        }\n\n        final double[] subarray \u003d new double[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 7999,
    "end_line": 8017,
    "comment": "/** \n * \u003cp\u003eProduces a new  {@code double} array containing the elementsbetween the start and end indices. \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(double[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#8039",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(float[], int, int)",
    "snippet": "public static float[] subarray(final float[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_FLOAT_ARRAY;\n        }\n\n        final float[] subarray \u003d new float[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 8039,
    "end_line": 8057,
    "comment": "/** \n * \u003cp\u003eProduces a new  {@code float} array containing the elementsbetween the start and end indices. \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(float[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#8079",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(int[], int, int)",
    "snippet": "public static int[] subarray(final int[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_INT_ARRAY;\n        }\n\n        final int[] subarray \u003d new int[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 8079,
    "end_line": 8097,
    "comment": "/** \n * \u003cp\u003eProduces a new  {@code int} array containing the elementsbetween the start and end indices. \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(int[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#8119",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(long[], int, int)",
    "snippet": "public static long[] subarray(final long[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_LONG_ARRAY;\n        }\n\n        final long[] subarray \u003d new long[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 8119,
    "end_line": 8137,
    "comment": "/** \n * \u003cp\u003eProduces a new  {@code long} array containing the elementsbetween the start and end indices. \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(long[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#8159",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(short[], int, int)",
    "snippet": "public static short[] subarray(final short[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        if (newSize \u003c\u003d 0) {\n            return EMPTY_SHORT_ARRAY;\n        }\n\n        final short[] subarray \u003d new short[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 8159,
    "end_line": 8177,
    "comment": "/** \n * \u003cp\u003eProduces a new  {@code short} array containing the elementsbetween the start and end indices. \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output.\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(short[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.subarray#8210",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.subarray(T[], int, int)",
    "snippet": "public static \u003cT\u003e T[] subarray(final T[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        if (startIndexInclusive \u003c 0) {\n            startIndexInclusive \u003d 0;\n        }\n        if (endIndexExclusive \u003e array.length) {\n            endIndexExclusive \u003d array.length;\n        }\n        final int newSize \u003d endIndexExclusive - startIndexInclusive;\n        final Class\u003c?\u003e type \u003d array.getClass().getComponentType();\n        if (newSize \u003c\u003d 0) {\n            @SuppressWarnings(\"unchecked\") // OK, because array is of type T\n            final T[] emptyArray \u003d (T[]) Array.newInstance(type, 0);\n            return emptyArray;\n        }\n        @SuppressWarnings(\"unchecked\") // OK, because array is of type T\n        final\n        T[] subarray \u003d (T[]) Array.newInstance(type, newSize);\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
    "begin_line": 8210,
    "end_line": 8232,
    "comment": "/** \n * \u003cp\u003eProduces a new array containing the elements between the start and end indices. \u003cp\u003eThe start index is inclusive, the end index exclusive. Null array input produces null output. \u003cp\u003eThe component type of the subarray is always the same as that of the input array. Thus, if the input is an array of type {@code Date}, the following usage is envisaged: \u003cpre\u003e Date[] someDates \u003d (Date[]) ArrayUtils.subarray(allDates, 2, 5); \u003c/pre\u003e\n * @param \u003c T \u003e the component type of the array\n * @param array  the array\n * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)is promoted to 0, overvalue (\u0026gt;array.length) results in an empty array.\n * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (\u0026lt; startIndex) produces empty array, overvalue (\u0026gt;array.length) is demoted to array length.\n * @return a new array containing the elements betweenthe start and end indices.\n * @since 2.1\n * @see Arrays#copyOfRange(Object[],int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8255",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(boolean[], int, int)",
    "snippet": "public static void swap(final boolean[] array, final int offset1, final int offset2) {\n        if (isEmpty(array)) {\n            return;\n        }\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8255,
    "end_line": 8260,
    "comment": "/** \n * Swaps two elements in the given boolean array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8286",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(boolean[], int, int, int)",
    "snippet": "public static void swap(final boolean[] array, int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final boolean aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8286,
    "end_line": 8302,
    "comment": "/** \n * Swaps a series of elements in the given boolean array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([true, false, true, false], 0, 2, 1) -\u0026gt; [true, false, true, false]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true, false], 0, 0, 1) -\u0026gt; [true, false, true, false]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true, false], 0, 2, 2) -\u0026gt; [true, false, true, false]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true, false], -3, 2, 2) -\u0026gt; [true, false, true, false]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true, false], 0, 3, 3) -\u0026gt; [false, false, true, true]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8326",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(byte[], int, int)",
    "snippet": "public static void swap(final byte[] array, final int offset1, final int offset2) {\n        if (isEmpty(array)) {\n            return;\n        }\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8326,
    "end_line": 8331,
    "comment": "/** \n * Swaps two elements in the given byte array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8357",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(byte[], int, int, int)",
    "snippet": "public static void swap(final byte[] array, int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final byte aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8357,
    "end_line": 8373,
    "comment": "/** \n * Swaps a series of elements in the given byte array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8396",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(char[], int, int)",
    "snippet": "public static void swap(final char[] array, final int offset1, final int offset2) {\n        if (isEmpty(array)) {\n            return;\n        }\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8396,
    "end_line": 8401,
    "comment": "/** \n * Swaps two elements in the given char array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8427",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(char[], int, int, int)",
    "snippet": "public static void swap(final char[] array, int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final char aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8427,
    "end_line": 8443,
    "comment": "/** \n * Swaps a series of elements in the given char array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8466",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(double[], int, int)",
    "snippet": "public static void swap(final double[] array, final int offset1, final int offset2) {\n        if (isEmpty(array)) {\n            return;\n        }\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8466,
    "end_line": 8471,
    "comment": "/** \n * Swaps two elements in the given double array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8497",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(double[], int, int, int)",
    "snippet": "public static void swap(final double[] array,  int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final double aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8497,
    "end_line": 8513,
    "comment": "/** \n * Swaps a series of elements in the given double array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8536",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(float[], int, int)",
    "snippet": "public static void swap(final float[] array, final int offset1, final int offset2) {\n        if (isEmpty(array)) {\n            return;\n        }\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8536,
    "end_line": 8541,
    "comment": "/** \n * Swaps two elements in the given float array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8567",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(float[], int, int, int)",
    "snippet": "public static void swap(final float[] array, int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final float aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n\n    }",
    "begin_line": 8567,
    "end_line": 8584,
    "comment": "/** \n * Swaps a series of elements in the given float array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8607",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(int[], int, int)",
    "snippet": "public static void swap(final int[] array, final int offset1, final int offset2) {\n        if (isEmpty(array)) {\n            return;\n        }\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8607,
    "end_line": 8612,
    "comment": "/** \n * Swaps two elements in the given int array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8638",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(int[], int, int, int)",
    "snippet": "public static void swap(final int[] array,  int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final int aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8638,
    "end_line": 8654,
    "comment": "/** \n * Swaps a series of elements in the given int array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8678",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(long[], int, int)",
    "snippet": "public static void swap(final long[] array, final int offset1, final int offset2) {\n        if (isEmpty(array)) {\n            return;\n        }\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8678,
    "end_line": 8683,
    "comment": "/** \n * Swaps two elements in the given long array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([true, false, true], 0, 2) -\u0026gt; [true, false, true]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true], 0, 0) -\u0026gt; [true, false, true]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true], 1, 0) -\u0026gt; [false, true, true]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true], 0, 5) -\u0026gt; [true, false, true]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([true, false, true], -1, 1) -\u0026gt; [false, true, true]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8709",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(long[], int, int, int)",
    "snippet": "public static void swap(final long[] array,  int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final long aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8709,
    "end_line": 8725,
    "comment": "/** \n * Swaps a series of elements in the given long array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8750",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(java.lang.Object[], int, int)",
    "snippet": "public static void swap(final Object[] array, final int offset1, final int offset2) {\n        if (isEmpty(array)) {\n            return;\n        }\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8750,
    "end_line": 8755,
    "comment": "/** \n * Swaps two elements in the given array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\"], 0, 2) -\u0026gt; [\"3\", \"2\", \"1\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\"], 0, 0) -\u0026gt; [\"1\", \"2\", \"3\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\"], 1, 0) -\u0026gt; [\"2\", \"1\", \"3\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\"], 0, 5) -\u0026gt; [\"1\", \"2\", \"3\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\"], -1, 1) -\u0026gt; [\"2\", \"1\", \"3\"]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8781",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(java.lang.Object[], int, int, int)",
    "snippet": "public static void swap(final Object[] array,  int offset1, int offset2, int len) {\n        if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n            return;\n        }\n        if (offset1 \u003c 0) {\n            offset1 \u003d 0;\n        }\n        if (offset2 \u003c 0) {\n            offset2 \u003d 0;\n        }\n        len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n        for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n            final Object aux \u003d array[offset1];\n            array[offset1] \u003d array[offset2];\n            array[offset2] \u003d aux;\n        }\n    }",
    "begin_line": 8781,
    "end_line": 8797,
    "comment": "/** \n * Swaps a series of elements in the given array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\", \"4\"], 0, 2, 1) -\u0026gt; [\"3\", \"2\", \"1\", \"4\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\", \"4\"], 0, 0, 1) -\u0026gt; [\"1\", \"2\", \"3\", \"4\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\", \"4\"], 2, 0, 2) -\u0026gt; [\"3\", \"4\", \"1\", \"2\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\", \"4\"], -3, 2, 2) -\u0026gt; [\"3\", \"4\", \"1\", \"2\"]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([\"1\", \"2\", \"3\", \"4\"], 0, 3, 3) -\u0026gt; [\"4\", \"2\", \"3\", \"1\"]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8820",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(short[], int, int)",
    "snippet": "public static void swap(final short[] array, final int offset1, final int offset2) {\n        if (isEmpty(array)) {\n            return;\n        }\n        swap(array, offset1, offset2, 1);\n    }",
    "begin_line": 8820,
    "end_line": 8825,
    "comment": "/** \n * Swaps two elements in the given short array. \u003cp\u003eThere is no special handling for multi-dimensional arrays. This method does nothing for a  {@code null} or empty input array or for overflow indices.Negative indices are promoted to 0(zero).\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 2) -\u0026gt; [3, 2, 1]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 0) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 1, 0) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], 0, 5) -\u0026gt; [1, 2, 3]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3], -1, 1) -\u0026gt; [2, 1, 3]\u003c/li\u003e \u003c/ul\u003e\n * @param array  the array to swap, may be {@code null}\n * @param offset1 the index of the first element to swap\n * @param offset2 the index of the second element to swap\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.swap#8851",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.swap(short[], int, int, int)",
    "snippet": "public static void swap(final short[] array,  int offset1, int offset2, int len) {\n            if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\n                return;\n            }\n            if (offset1 \u003c 0) {\n                offset1 \u003d 0;\n            }\n            if (offset2 \u003c 0) {\n                offset2 \u003d 0;\n            }\n            if (offset1 \u003d\u003d offset2) {\n                return;\n            }\n            len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\n            for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\n                final short aux \u003d array[offset1];\n                array[offset1] \u003d array[offset2];\n                array[offset2] \u003d aux;\n            }\n        }",
    "begin_line": 8851,
    "end_line": 8870,
    "comment": "/** \n * Swaps a series of elements in the given short array. \u003cp\u003eThis method does nothing for a  {@code null} or empty input array orfor overflow indices. Negative indices are promoted to 0(zero). If any of the sub-arrays to swap falls outside of the given array, then the swap is stopped at the end of the array and as many as possible elements are swapped.\u003c/p\u003e Examples: \u003cul\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -\u0026gt; [3, 2, 1, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -\u0026gt; [1, 2, 3, 4]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -\u0026gt; [3, 4, 1, 2]\u003c/li\u003e \u003cli\u003eArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -\u0026gt; [4, 2, 3, 1]\u003c/li\u003e \u003c/ul\u003e\n * @param array the array to swap, may be {@code null}\n * @param offset1 the index of the first element in the series to swap\n * @param offset2 the index of the second element in the series to swap\n * @param len the number of elements to swap starting with the given indices\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toArray#8911",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toArray(T)",
    "snippet": "public static \u003cT\u003e T[] toArray(@SuppressWarnings(\"unchecked\") final T... items) {\n        return items;\n    }",
    "begin_line": 8911,
    "end_line": 8913,
    "comment": "/** \n * \u003cp\u003eCreate a type-safe generic array. \u003cp\u003eThe Java language does not allow an array to be created from a generic type: \u003cpre\u003e public static \u0026lt;T\u0026gt; T[] createAnArray(int size) { return new T[size]; // compiler error here } public static \u0026lt;T\u0026gt; T[] createAnArray(int size) { return (T[]) new Object[size]; // ClassCastException at runtime } \u003c/pre\u003e \u003cp\u003eTherefore new arrays of generic types can be created with this method. For example, an array of Strings can be created: \u003cpre\u003e String[] array \u003d ArrayUtils.toArray(\"1\", \"2\"); String[] emptyArray \u003d ArrayUtils.\u0026lt;String\u0026gt;toArray(); \u003c/pre\u003e \u003cp\u003eThe method is typically used in scenarios, where the caller itself uses generic types that have to be combined into an array. \u003cp\u003eNote, this method makes only sense to provide arguments of the same type so that the compiler can deduce the type of the array itself. While it is possible to select the type explicitly like in {@code Number[] array \u003d ArrayUtils.\u0026lt;Number\u0026gt;toArray(Integer.valueOf(42), Double.valueOf(Math.PI))}, there is no real advantage when compared to {@code} new Number[] {Integer.valueOf(42), Double.valueOf(Math.PI)}}.\n * @param \u003c T \u003e   the array\u0027s element type\n * @param items  the varargs array items, null allowed\n * @return the array, not null unless a null array is passed in\n * @since  3.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toMap#8942",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toMap(java.lang.Object[])",
    "snippet": "public static Map\u003cObject, Object\u003e toMap(final Object[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        final Map\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e((int) (array.length * 1.5));\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Object object \u003d array[i];\n            if (object instanceof Map.Entry\u003c?, ?\u003e) {\n                final Map.Entry\u003c?, ?\u003e entry \u003d (Map.Entry\u003c?, ?\u003e) object;\n                map.put(entry.getKey(), entry.getValue());\n            } else if (object instanceof Object[]) {\n                final Object[] entry \u003d (Object[]) object;\n                if (entry.length \u003c 2) {\n                    throw new IllegalArgumentException(\"Array element \" + i + \", \u0027\"\n                        + object\n                        + \"\u0027, has a length less than 2\");\n                }\n                map.put(entry[0], entry[1]);\n            } else {\n                throw new IllegalArgumentException(\"Array element \" + i + \", \u0027\"\n                        + object\n                        + \"\u0027, is neither of type Map.Entry nor an Array\");\n            }\n        }\n        return map;\n    }",
    "begin_line": 8942,
    "end_line": 8967,
    "comment": "/** \n * \u003cp\u003eConverts the given array into a  {@link java.util.Map}. Each element of the array must be either a  {@link java.util.Map.Entry} or an Array, containing at least twoelements, where the first element is used as key and the second as value. \u003cp\u003eThis method can be used to initialize: \u003cpre\u003e // Create a Map mapping colors. Map colorMap \u003d ArrayUtils.toMap(new String[][] { {\"RED\", \"#FF0000\"}, {\"GREEN\", \"#00FF00\"}, {\"BLUE\", \"#0000FF\"}}); \u003c/pre\u003e \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  an array whose elements are either a {@link java.util.Map.Entry} oran Array containing at least two elements, may be  {@code null}\n * @return a {@code Map} that was created from the array\n * @throws IllegalArgumentException  if one element of this Array isitself an Array containing less then two elements\n * @throws IllegalArgumentException  if the array contains elements otherthan  {@link java.util.Map.Entry} and an Array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#8977",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(boolean[])",
    "snippet": "public static Boolean[] toObject(final boolean[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BOOLEAN_OBJECT_ARRAY;\n        }\n        final Boolean[] result \u003d new Boolean[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d (array[i] ? Boolean.TRUE : Boolean.FALSE);\n        }\n        return result;\n    }",
    "begin_line": 8977,
    "end_line": 8988,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive booleans to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code boolean} array\n * @return a {@code Boolean} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#8998",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(byte[])",
    "snippet": "public static Byte[] toObject(final byte[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BYTE_OBJECT_ARRAY;\n        }\n        final Byte[] result \u003d new Byte[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Byte.valueOf(array[i]);\n        }\n        return result;\n    }",
    "begin_line": 8998,
    "end_line": 9009,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive bytes to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code byte} array\n * @return a {@code Byte} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#9019",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(char[])",
    "snippet": "public static Character[] toObject(final char[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_CHARACTER_OBJECT_ARRAY;\n        }\n        final Character[] result \u003d new Character[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Character.valueOf(array[i]);\n        }\n        return result;\n     }",
    "begin_line": 9019,
    "end_line": 9030,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive chars to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array a {@code char} array\n * @return a {@code Character} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#9040",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(double[])",
    "snippet": "public static Double[] toObject(final double[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_DOUBLE_OBJECT_ARRAY;\n        }\n        final Double[] result \u003d new Double[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Double.valueOf(array[i]);\n        }\n        return result;\n    }",
    "begin_line": 9040,
    "end_line": 9051,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive doubles to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code double} array\n * @return a {@code Double} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#9061",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(float[])",
    "snippet": "public static Float[] toObject(final float[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_FLOAT_OBJECT_ARRAY;\n        }\n        final Float[] result \u003d new Float[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Float.valueOf(array[i]);\n        }\n        return result;\n    }",
    "begin_line": 9061,
    "end_line": 9072,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive floats to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code float} array\n * @return a {@code Float} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#9082",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(int[])",
    "snippet": "public static Integer[] toObject(final int[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_INTEGER_OBJECT_ARRAY;\n        }\n        final Integer[] result \u003d new Integer[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Integer.valueOf(array[i]);\n        }\n        return result;\n    }",
    "begin_line": 9082,
    "end_line": 9093,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive ints to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  an {@code int} array\n * @return an {@code Integer} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#9103",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(long[])",
    "snippet": "public static Long[] toObject(final long[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_LONG_OBJECT_ARRAY;\n        }\n        final Long[] result \u003d new Long[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Long.valueOf(array[i]);\n        }\n        return result;\n    }",
    "begin_line": 9103,
    "end_line": 9114,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive longs to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code long} array\n * @return a {@code Long} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toObject#9124",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toObject(short[])",
    "snippet": "public static Short[] toObject(final short[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_SHORT_OBJECT_ARRAY;\n        }\n        final Short[] result \u003d new Short[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d Short.valueOf(array[i]);\n        }\n        return result;\n    }",
    "begin_line": 9124,
    "end_line": 9135,
    "comment": "/** \n * \u003cp\u003eConverts an array of primitive shorts to objects. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code short} array\n * @return a {@code Short} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9148",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Boolean[])",
    "snippet": "public static boolean[] toPrimitive(final Boolean[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BOOLEAN_ARRAY;\n        }\n        final boolean[] result \u003d new boolean[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].booleanValue();\n        }\n        return result;\n    }",
    "begin_line": 9148,
    "end_line": 9159,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Booleans to primitives. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Boolean} array, may be {@code null}\n * @return a {@code boolean} array, {@code null} if null array input\n * @throws NullPointerException if array content is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9170",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Boolean[], boolean)",
    "snippet": "public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BOOLEAN_ARRAY;\n        }\n        final boolean[] result \u003d new boolean[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Boolean b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.booleanValue());\n        }\n        return result;\n    }",
    "begin_line": 9170,
    "end_line": 9182,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Booleans to primitives handling  {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Boolean} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code boolean} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9195",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Byte[])",
    "snippet": "public static byte[] toPrimitive(final Byte[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        final byte[] result \u003d new byte[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].byteValue();\n        }\n        return result;\n    }",
    "begin_line": 9195,
    "end_line": 9206,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Bytes to primitives. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Byte} array, may be {@code null}\n * @return a {@code byte} array, {@code null} if null array input\n * @throws NullPointerException if array content is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9217",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Byte[], byte)",
    "snippet": "public static byte[] toPrimitive(final Byte[] array, final byte valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        final byte[] result \u003d new byte[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Byte b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.byteValue());\n        }\n        return result;\n    }",
    "begin_line": 9217,
    "end_line": 9229,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Bytes to primitives handling  {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Byte} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code byte} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9242",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Character[])",
    "snippet": "public static char[] toPrimitive(final Character[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        final char[] result \u003d new char[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].charValue();\n        }\n        return result;\n    }",
    "begin_line": 9242,
    "end_line": 9253,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Characters to primitives. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Character} array, may be {@code null}\n * @return a {@code char} array, {@code null} if null array input\n * @throws NullPointerException if array content is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9264",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Character[], char)",
    "snippet": "public static char[] toPrimitive(final Character[] array, final char valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        final char[] result \u003d new char[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Character b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.charValue());\n        }\n        return result;\n    }",
    "begin_line": 9264,
    "end_line": 9276,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Character to primitives handling  {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Character} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code char} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9289",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Double[])",
    "snippet": "public static double[] toPrimitive(final Double[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_DOUBLE_ARRAY;\n        }\n        final double[] result \u003d new double[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].doubleValue();\n        }\n        return result;\n    }",
    "begin_line": 9289,
    "end_line": 9300,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Doubles to primitives. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Double} array, may be {@code null}\n * @return a {@code double} array, {@code null} if null array input\n * @throws NullPointerException if array content is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9311",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Double[], double)",
    "snippet": "public static double[] toPrimitive(final Double[] array, final double valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_DOUBLE_ARRAY;\n        }\n        final double[] result \u003d new double[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Double b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.doubleValue());\n        }\n        return result;\n    }",
    "begin_line": 9311,
    "end_line": 9323,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Doubles to primitives handling  {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Double} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code double} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9336",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Float[])",
    "snippet": "public static float[] toPrimitive(final Float[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_FLOAT_ARRAY;\n        }\n        final float[] result \u003d new float[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].floatValue();\n        }\n        return result;\n    }",
    "begin_line": 9336,
    "end_line": 9347,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Floats to primitives. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Float} array, may be {@code null}\n * @return a {@code float} array, {@code null} if null array input\n * @throws NullPointerException if array content is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9358",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Float[], float)",
    "snippet": "public static float[] toPrimitive(final Float[] array, final float valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_FLOAT_ARRAY;\n        }\n        final float[] result \u003d new float[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Float b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.floatValue());\n        }\n        return result;\n    }",
    "begin_line": 9358,
    "end_line": 9370,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Floats to primitives handling  {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Float} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code float} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9383",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Integer[])",
    "snippet": "public static int[] toPrimitive(final Integer[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_INT_ARRAY;\n        }\n        final int[] result \u003d new int[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].intValue();\n        }\n        return result;\n    }",
    "begin_line": 9383,
    "end_line": 9394,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Integers to primitives. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Integer} array, may be {@code null}\n * @return an {@code int} array, {@code null} if null array input\n * @throws NullPointerException if array content is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9405",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Integer[], int)",
    "snippet": "public static int[] toPrimitive(final Integer[] array, final int valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_INT_ARRAY;\n        }\n        final int[] result \u003d new int[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Integer b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.intValue());\n        }\n        return result;\n    }",
    "begin_line": 9405,
    "end_line": 9417,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Integer to primitives handling  {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Integer} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return an {@code int} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9430",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Long[])",
    "snippet": "public static long[] toPrimitive(final Long[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_LONG_ARRAY;\n        }\n        final long[] result \u003d new long[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].longValue();\n        }\n        return result;\n    }",
    "begin_line": 9430,
    "end_line": 9441,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Longs to primitives. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Long} array, may be {@code null}\n * @return a {@code long} array, {@code null} if null array input\n * @throws NullPointerException if array content is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9452",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Long[], long)",
    "snippet": "public static long[] toPrimitive(final Long[] array, final long valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_LONG_ARRAY;\n        }\n        final long[] result \u003d new long[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Long b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.longValue());\n        }\n        return result;\n    }",
    "begin_line": 9452,
    "end_line": 9464,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Long to primitives handling  {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Long} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code long} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9475",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Object)",
    "snippet": "public static Object toPrimitive(final Object array) {\n        if (array \u003d\u003d null) {\n            return null;\n        }\n        final Class\u003c?\u003e ct \u003d array.getClass().getComponentType();\n        final Class\u003c?\u003e pt \u003d ClassUtils.wrapperToPrimitive(ct);\n        if (Integer.TYPE.equals(pt)) {\n            return toPrimitive((Integer[]) array);\n        }\n        if (Long.TYPE.equals(pt)) {\n            return toPrimitive((Long[]) array);\n        }\n        if (Short.TYPE.equals(pt)) {\n            return toPrimitive((Short[]) array);\n        }\n        if (Double.TYPE.equals(pt)) {\n            return toPrimitive((Double[]) array);\n        }\n        if (Float.TYPE.equals(pt)) {\n            return toPrimitive((Float[]) array);\n        }\n        return array;\n    }",
    "begin_line": 9475,
    "end_line": 9497,
    "comment": "/** \n * \u003cp\u003eCreate an array of primitive type from an array of wrapper types. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  an array of wrapper object\n * @return an array of the corresponding primitive type, or the original array\n * @since 3.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9510",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Short[])",
    "snippet": "public static short[] toPrimitive(final Short[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_SHORT_ARRAY;\n        }\n        final short[] result \u003d new short[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].shortValue();\n        }\n        return result;\n    }",
    "begin_line": 9510,
    "end_line": 9521,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Shorts to primitives. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Short} array, may be {@code null}\n * @return a {@code byte} array, {@code null} if null array input\n * @throws NullPointerException if array content is {@code null}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toPrimitive#9532",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Short[], short)",
    "snippet": "public static short[] toPrimitive(final Short[] array, final short valueForNull) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_SHORT_ARRAY;\n        }\n        final short[] result \u003d new short[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Short b \u003d array[i];\n            result[i] \u003d (b \u003d\u003d null ? valueForNull : b.shortValue());\n        }\n        return result;\n    }",
    "begin_line": 9532,
    "end_line": 9544,
    "comment": "/** \n * \u003cp\u003eConverts an array of object Short to primitives handling  {@code null}. \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\n * @param array  a {@code Short} array, may be {@code null}\n * @param valueForNull  the value to insert if {@code null} found\n * @return a {@code byte} array, {@code null} if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toString#9559",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toString(java.lang.Object)",
    "snippet": "public static String toString(final Object array) {\n        return toString(array, \"{}\");\n    }",
    "begin_line": 9559,
    "end_line": 9561,
    "comment": "/** \n * \u003cp\u003eOutputs an array as a String, treating  {@code null} as an empty array.\u003cp\u003eMulti-dimensional arrays are handled correctly, including multi-dimensional primitive arrays. \u003cp\u003eThe format is that of Java source code, for example  {@code} {a,b}}.\n * @param array  the array to get a toString for, may be {@code null}\n * @return a String representation of the array, \u0027{}\u0027 if null array input\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toString#9575",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toString(java.lang.Object, java.lang.String)",
    "snippet": "public static String toString(final Object array, final String stringIfNull) {\n        if (array \u003d\u003d null) {\n            return stringIfNull;\n        }\n        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n    }",
    "begin_line": 9575,
    "end_line": 9580,
    "comment": "/** \n * \u003cp\u003eOutputs an array as a String handling  {@code null}s. \u003cp\u003eMulti-dimensional arrays are handled correctly, including multi-dimensional primitive arrays. \u003cp\u003eThe format is that of Java source code, for example  {@code} {a,b}}.\n * @param array  the array to get a toString for, may be {@code null}\n * @param stringIfNull  the String to return if the array is {@code null}\n * @return a String representation of the array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toStringArray#9593",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toStringArray(java.lang.Object[])",
    "snippet": "public static String[] toStringArray(final Object[] array) {\n        if (array \u003d\u003d null) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_STRING_ARRAY;\n        }\n\n        final String[] result \u003d new String[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            result[i] \u003d array[i].toString();\n        }\n\n        return result;\n    }",
    "begin_line": 9593,
    "end_line": 9606,
    "comment": "/** \n * \u003cp\u003eReturns an array containing the string representation of each element in the argument array.\u003c/p\u003e \u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array the {@code Object[]} to be processed, may be null\n * @return {@code String[]} of the same size as the source with its element\u0027s string representation,{@code null} if null array input\n * @throws NullPointerException if array contains {@code null}\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.toStringArray#9619",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.toStringArray(java.lang.Object[], java.lang.String)",
    "snippet": "public static String[] toStringArray(final Object[] array, final String valueForNullElements) {\n        if (null \u003d\u003d array) {\n            return null;\n        } else if (array.length \u003d\u003d 0) {\n            return EMPTY_STRING_ARRAY;\n        }\n\n        final String[] result \u003d new String[array.length];\n        for (int i \u003d 0; i \u003c array.length; i++) {\n            final Object object \u003d array[i];\n            result[i] \u003d (object \u003d\u003d null ? valueForNullElements : object.toString());\n        }\n\n        return result;\n    }",
    "begin_line": 9619,
    "end_line": 9633,
    "comment": "/** \n * \u003cp\u003eReturns an array containing the string representation of each element in the argument array handling  {@code null} elements.\u003c/p\u003e\u003cp\u003eThis method returns  {@code null} for a {@code null} input array.\u003c/p\u003e\n * @param array the Object[] to be processed, may be null\n * @param valueForNullElements the value to insert if {@code null} is found\n * @return a {@code String} array, {@code null} if null array input\n * @since 3.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayUtils.ArrayUtils#9642",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/ArrayUtils.java",
    "class_name": "org.apache.commons.lang3.ArrayUtils",
    "signature": "org.apache.commons.lang3.ArrayUtils.ArrayUtils()",
    "snippet": "public ArrayUtils() {\n      super();\n    }",
    "begin_line": 9642,
    "end_line": 9644,
    "comment": "/** \n * \u003cp\u003eArrayUtils instances should NOT be constructed in standard programming. Instead, the class should be used as  {@code} ArrayUtils.clone(new int[] {2})}.\u003cp\u003eThis constructor is public to permit tools that require a JavaBean instance to operate.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharSequenceUtils.CharSequenceUtils#37",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/CharSequenceUtils.java",
    "class_name": "org.apache.commons.lang3.CharSequenceUtils",
    "signature": "org.apache.commons.lang3.CharSequenceUtils.CharSequenceUtils()",
    "snippet": "public CharSequenceUtils() {\n        super();\n    }",
    "begin_line": 37,
    "end_line": 39,
    "comment": "/** \n * \u003cp\u003e {@code CharSequenceUtils} instances should NOT be constructed instandard programming. \u003c/p\u003e \u003cp\u003eThis constructor is public to permit tools that require a JavaBean instance to operate.\u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharSequenceUtils.subSequence#56",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/CharSequenceUtils.java",
    "class_name": "org.apache.commons.lang3.CharSequenceUtils",
    "signature": "org.apache.commons.lang3.CharSequenceUtils.subSequence(java.lang.CharSequence, int)",
    "snippet": "public static CharSequence subSequence(final CharSequence cs, final int start) {\n        return cs \u003d\u003d null ? null : cs.subSequence(start, cs.length());\n    }",
    "begin_line": 56,
    "end_line": 58,
    "comment": "/** \n * \u003cp\u003eReturns a new  {@code CharSequence} that is a subsequence of thissequence starting with the  {@code char} value at the specified index.\u003c/p\u003e\u003cp\u003eThis provides the  {@code CharSequence} equivalent to {@link String#substring(int)}. The length (in  {@code char}) of the returned sequence is  {@code length() - start}, so if  {@code start \u003d\u003d end} then an empty sequence is returned.\u003c/p\u003e\n * @param cs  the specified subsequence, null returns null\n * @param start  the start index, inclusive, valid\n * @return a new subsequence, may be null\n * @throws IndexOutOfBoundsException if {@code start} is negative or if{@code start} is greater than {@code length()}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharSequenceUtils.indexOf#99",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/CharSequenceUtils.java",
    "class_name": "org.apache.commons.lang3.CharSequenceUtils",
    "signature": "org.apache.commons.lang3.CharSequenceUtils.indexOf(java.lang.CharSequence, int, int)",
    "snippet": "static int indexOf(final CharSequence cs, final int searchChar, int start) {\n        if (cs instanceof String) {\n            return ((String) cs).indexOf(searchChar, start);\n        }\n        final int sz \u003d cs.length();\n        if (start \u003c 0) {\n            start \u003d 0;\n        }\n        if (searchChar \u003c Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            for (int i \u003d start; i \u003c sz; i++) {\n                if (cs.charAt(i) \u003d\u003d searchChar) {\n                    return i;\n                }\n            }\n        }\n        //supplementary characters (LANG1300)\n        if (searchChar \u003c\u003d Character.MAX_CODE_POINT) {\n            final char[] chars \u003d Character.toChars(searchChar);\n            for (int i \u003d start; i \u003c sz - 1; i++) {\n                final char high \u003d cs.charAt(i);\n                final char low \u003d cs.charAt(i + 1);\n                if (high \u003d\u003d chars[0] \u0026\u0026 low \u003d\u003d chars[1]) {\n                    return i;\n                }\n            }\n        }\n        return NOT_FOUND;\n    }",
    "begin_line": 99,
    "end_line": 126,
    "comment": "/** \n * Returns the index within  {@code cs} of the first occurrence of thespecified character, starting the search at the specified index. \u003cp\u003e If a character with value  {@code searchChar} occurs in thecharacter sequence represented by the  {@code cs}object at an index no smaller than  {@code start}, then the index of the first such occurrence is returned. For values of  {@code searchChar} in the range from 0 to 0xFFFF (inclusive),this is the smallest value \u003ci\u003ek\u003c/i\u003e such that: \u003cblockquote\u003e\u003cpre\u003e (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d searchChar) \u0026amp;\u0026amp; (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d start) \u003c/pre\u003e\u003c/blockquote\u003e is true. For other values of  {@code searchChar}, it is the smallest value \u003ci\u003ek\u003c/i\u003e such that: \u003cblockquote\u003e\u003cpre\u003e (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d searchChar) \u0026amp;\u0026amp; (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d start) \u003c/pre\u003e\u003c/blockquote\u003e is true. In either case, if no such character occurs inm  {@code cs}at or after position  {@code start}, then {@code -1} is returned.\u003cp\u003e There is no restriction on the value of  {@code start}. If it is negative, it has the same effect as if it were zero: the entire {@code CharSequence} may be searched. If it is greater thanthe length of  {@code cs}, it has the same effect as if it were equal to the length of  {@code cs}:  {@code -1} is returned.\u003cp\u003eAll indices are specified in  {@code char} values(Unicode code units).\n * @param cs  the {@code CharSequence} to be processed, not null\n * @param searchChar  the char to be searched for\n * @param start  the start index, negative starts at the string start\n * @return the index where the search char was found, -1 if not found\n * @since 3.6 updated to behave more like {@code String}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharSequenceUtils.indexOf#136",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/CharSequenceUtils.java",
    "class_name": "org.apache.commons.lang3.CharSequenceUtils",
    "signature": "org.apache.commons.lang3.CharSequenceUtils.indexOf(java.lang.CharSequence, java.lang.CharSequence, int)",
    "snippet": "static int indexOf(final CharSequence cs, final CharSequence searchChar, final int start) {\n        if (cs instanceof String) {\n            return ((String) cs).indexOf(searchChar.toString(), start);\n        } else if (cs instanceof StringBuilder) {\n            return ((StringBuilder) cs).indexOf(searchChar.toString(), start);\n        } else if (cs instanceof StringBuffer) {\n            return ((StringBuffer) cs).indexOf(searchChar.toString(), start);\n        }\n        return cs.toString().indexOf(searchChar.toString(), start);\n//        if (cs instanceof String \u0026\u0026 searchChar instanceof String) {\n//            // TODO: Do we assume searchChar is usually relatively small;\n//            //       If so then calling toString() on it is better than reverting to\n//            //       the green implementation in the else block\n//            return ((String) cs).indexOf((String) searchChar, start);\n//        } else {\n//            // TODO: Implement rather than convert to String\n//            return cs.toString().indexOf(searchChar.toString(), start);\n//        }\n    }",
    "begin_line": 136,
    "end_line": 154,
    "comment": "/** \n * Used by the indexOf(CharSequence methods) as a green implementation of indexOf.\n * @param cs the {@code CharSequence} to be processed\n * @param searchChar the {@code CharSequence} to be searched for\n * @param start the start index\n * @return the index where the search sequence was found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharSequenceUtils.lastIndexOf#182",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/CharSequenceUtils.java",
    "class_name": "org.apache.commons.lang3.CharSequenceUtils",
    "signature": "org.apache.commons.lang3.CharSequenceUtils.lastIndexOf(java.lang.CharSequence, int, int)",
    "snippet": "static int lastIndexOf(final CharSequence cs, final int searchChar, int start) {\n        if (cs instanceof String) {\n            return ((String) cs).lastIndexOf(searchChar, start);\n        }\n        final int sz \u003d cs.length();\n        if (start \u003c 0) {\n            return NOT_FOUND;\n        }\n        if (start \u003e\u003d sz) {\n            start \u003d sz - 1;\n        }\n        if (searchChar \u003c Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            for (int i \u003d start; i \u003e\u003d 0; --i) {\n                if (cs.charAt(i) \u003d\u003d searchChar) {\n                    return i;\n                }\n            }\n        }\n        //supplementary characters (LANG1300)\n        //NOTE - we must do a forward traversal for this to avoid duplicating code points\n        if (searchChar \u003c\u003d Character.MAX_CODE_POINT) {\n            final char[] chars \u003d Character.toChars(searchChar);\n            //make sure it\u0027s not the last index\n            if (start \u003d\u003d sz - 1) {\n                return NOT_FOUND;\n            }\n            for (int i \u003d start; i \u003e\u003d 0; i--) {\n                final char high \u003d cs.charAt(i);\n                final char low \u003d cs.charAt(i + 1);\n                if (chars[0] \u003d\u003d high \u0026\u0026 chars[1] \u003d\u003d low) {\n                    return i;\n                }\n            }\n        }\n        return NOT_FOUND;\n    }",
    "begin_line": 182,
    "end_line": 217,
    "comment": "/** \n * Returns the index within  {@code cs} of the last occurrence ofthe specified character, searching backward starting at the specified index. For values of  {@code searchChar} in the rangefrom 0 to 0xFFFF (inclusive), the index returned is the largest value \u003ci\u003ek\u003c/i\u003e such that: \u003cblockquote\u003e\u003cpre\u003e (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d searchChar) \u0026amp;\u0026amp; (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d start) \u003c/pre\u003e\u003c/blockquote\u003e is true. For other values of  {@code searchChar}, it is the largest value \u003ci\u003ek\u003c/i\u003e such that: \u003cblockquote\u003e\u003cpre\u003e (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d searchChar) \u0026amp;\u0026amp; (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d start) \u003c/pre\u003e\u003c/blockquote\u003e is true. In either case, if no such character occurs in  {@code cs}at or before position  {@code start}, then  {@code -1} is returned.\u003cp\u003eAll indices are specified in  {@code char} values(Unicode code units).\n * @param cs  the {@code CharSequence} to be processed\n * @param searchChar  the char to be searched for\n * @param start  the start index, negative returns -1, beyond length starts at end\n * @return the index where the search char was found, -1 if not found\n * @since 3.6 updated to behave more like {@code String}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharSequenceUtils.lastIndexOf#229",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/CharSequenceUtils.java",
    "class_name": "org.apache.commons.lang3.CharSequenceUtils",
    "signature": "org.apache.commons.lang3.CharSequenceUtils.lastIndexOf(java.lang.CharSequence, java.lang.CharSequence, int)",
    "snippet": "static int lastIndexOf(final CharSequence cs, final CharSequence searchChar, int start) {\n        if (searchChar instanceof String) {\n            if (cs instanceof String) {\n                return ((String) cs).lastIndexOf((String) searchChar, start);\n            } else if (cs instanceof StringBuilder) {\n                return ((StringBuilder) cs).lastIndexOf((String) searchChar, start);\n            } else if (cs instanceof StringBuffer) {\n                return ((StringBuffer) cs).lastIndexOf((String) searchChar, start);\n            }\n        }\n\n        final int len1 \u003d cs.length();\n        final int len2 \u003d searchChar.length();\n\n        if (start \u003e len1) {\n            start \u003d len1;\n        }\n\n        if (start \u003c 0 || len2 \u003c 0 || len2 \u003e len1) {\n            return -1;\n        }\n\n        if (len2 \u003d\u003d 0) {\n            return start;\n        }\n\n        if (len2 \u003c\u003d TO_STRING_LIMIT) {\n            if (cs instanceof String) {\n                return ((String) cs).lastIndexOf(searchChar.toString(), start);\n            } else if (cs instanceof StringBuilder) {\n                return ((StringBuilder) cs).lastIndexOf(searchChar.toString(), start);\n            } else if (cs instanceof StringBuffer) {\n                return ((StringBuffer) cs).lastIndexOf(searchChar.toString(), start);\n            }\n        }\n\n        if (start + len2 \u003e len1) {\n            start \u003d len1 - len2;\n        }\n\n        final char char0 \u003d searchChar.charAt(0);\n\n        int i \u003d start;\n        while (true) {\n            while (cs.charAt(i) !\u003d char0) {\n                i--;\n                if (i \u003c 0) {\n                    return -1;\n                }\n            }\n            if (checkLaterThan1(cs, searchChar, len2, i)) {\n                return i;\n            }\n            i--;\n            if (i \u003c 0) {\n                return -1;\n            }\n        }\n    }",
    "begin_line": 229,
    "end_line": 287,
    "comment": "/** \n * Used by the lastIndexOf(CharSequence methods) as a green implementation of lastIndexOf\n * @param cs the {@code CharSequence} to be processed\n * @param searchChar the {@code CharSequence} to be searched for\n * @param start the start index\n * @return the index where the search sequence was found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharSequenceUtils.checkLaterThan1#289",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/CharSequenceUtils.java",
    "class_name": "org.apache.commons.lang3.CharSequenceUtils",
    "signature": "org.apache.commons.lang3.CharSequenceUtils.checkLaterThan1(java.lang.CharSequence, java.lang.CharSequence, int, int)",
    "snippet": "private static boolean checkLaterThan1(final CharSequence cs, final CharSequence searchChar, final int len2, final int start1) {\n        for (int i \u003d 1, j \u003d len2 - 1; i \u003c\u003d j; i++, j--) {\n            if (cs.charAt(start1 + i) !\u003d searchChar.charAt(i)\n                    ||\n                    cs.charAt(start1 + j) !\u003d searchChar.charAt(j)\n            ) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "begin_line": 289,
    "end_line": 299,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharSequenceUtils.toCharArray#308",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/CharSequenceUtils.java",
    "class_name": "org.apache.commons.lang3.CharSequenceUtils",
    "signature": "org.apache.commons.lang3.CharSequenceUtils.toCharArray(java.lang.CharSequence)",
    "snippet": "public static char[] toCharArray(final CharSequence cs) {\n        if (cs instanceof String) {\n            return ((String) cs).toCharArray();\n        }\n        final int sz \u003d cs.length();\n        final char[] array \u003d new char[cs.length()];\n        for (int i \u003d 0; i \u003c sz; i++) {\n            array[i] \u003d cs.charAt(i);\n        }\n        return array;\n    }",
    "begin_line": 308,
    "end_line": 318,
    "comment": "/** \n * Green implementation of toCharArray.\n * @param cs the {@code CharSequence} to be processed\n * @return the resulting char array\n * @since 3.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharSequenceUtils.regionMatches#331",
    "is_bug": true,
    "src_path": "org/apache/commons/lang3/CharSequenceUtils.java",
    "class_name": "org.apache.commons.lang3.CharSequenceUtils",
    "signature": "org.apache.commons.lang3.CharSequenceUtils.regionMatches(java.lang.CharSequence, boolean, int, java.lang.CharSequence, int, int)",
    "snippet": "static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart,\n            final CharSequence substring, final int start, final int length)    {\n        if (cs instanceof String \u0026\u0026 substring instanceof String) {\n            return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);\n        }\n        int index1 \u003d thisStart;\n        int index2 \u003d start;\n        int tmpLen \u003d length;\n\n        // Extract these first so we detect NPEs the same as the java.lang.String version\n        final int srcLen \u003d cs.length() - thisStart;\n        final int otherLen \u003d substring.length() - start;\n\n        // Check for invalid parameters\n        if (thisStart \u003c 0 || start \u003c 0 || length \u003c 0) {\n            return false;\n        }\n\n        // Check that the regions are long enough\n        if (srcLen \u003c length || otherLen \u003c length) {\n            return false;\n        }\n\n        while (tmpLen-- \u003e 0) {\n            final char c1 \u003d cs.charAt(index1++);\n            final char c2 \u003d substring.charAt(index2++);\n\n            if (c1 \u003d\u003d c2) {\n                continue;\n            }\n\n            if (!ignoreCase) {\n                return false;\n            }\n\n            // The real same check as in String.regionMatches():\n            final char u1 \u003d Character.toUpperCase(c1);\n            final char u2 \u003d Character.toUpperCase(c2);\n            if (u1 !\u003d u2 \u0026\u0026 Character.toLowerCase(u1) !\u003d Character.toLowerCase(u2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }",
    "begin_line": 331,
    "end_line": 375,
    "comment": "/** \n * Green implementation of regionMatches.\n * @param cs the {@code CharSequence} to be processed\n * @param ignoreCase whether or not to be case insensitive\n * @param thisStart the index to start on the {@code cs} CharSequence\n * @param substring the {@code CharSequence} to be looked for\n * @param start the index to start on the {@code substring} CharSequence\n * @param length character length of the region\n * @return whether the region matched\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]