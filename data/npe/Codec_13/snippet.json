[
  {
    "name": "DoubleMetaphone.DoubleMetaphone#64",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphone()",
    "snippet": "public DoubleMetaphone() {\n        super();\n    }",
    "begin_line": 64,
    "end_line": 66,
    "comment": "/** \n * Creates an instance of this DoubleMetaphone encoder\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.doubleMetaphone#74",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String)",
    "snippet": "public String doubleMetaphone(final String value) {\n        return doubleMetaphone(value, false);\n    }",
    "begin_line": 74,
    "end_line": 76,
    "comment": "/** \n * Encode a value with Double Metaphone.\n * @param value String to encode\n * @return an encoded string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.doubleMetaphone#85",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String, boolean)",
    "snippet": "public String doubleMetaphone(String value, final boolean alternate) {\n        value \u003d cleanInput(value);\n        if (value \u003d\u003d null) {\n            return null;\n        }\n\n        final boolean slavoGermanic \u003d isSlavoGermanic(value);\n        int index \u003d isSilentStart(value) ? 1 : 0;\n\n        final DoubleMetaphoneResult result \u003d new DoubleMetaphoneResult(this.getMaxCodeLen());\n\n        while (!result.isComplete() \u0026\u0026 index \u003c\u003d value.length() - 1) {\n            switch (value.charAt(index)) {\n            case \u0027A\u0027:\n            case \u0027E\u0027:\n            case \u0027I\u0027:\n            case \u0027O\u0027:\n            case \u0027U\u0027:\n            case \u0027Y\u0027:\n                index \u003d handleAEIOUY(result, index);\n                break;\n            case \u0027B\u0027:\n                result.append(\u0027P\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027B\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027\\u00C7\u0027:\n                // A C with a Cedilla\n                result.append(\u0027S\u0027);\n                index++;\n                break;\n            case \u0027C\u0027:\n                index \u003d handleC(value, result, index);\n                break;\n            case \u0027D\u0027:\n                index \u003d handleD(value, result, index);\n                break;\n            case \u0027F\u0027:\n                result.append(\u0027F\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027F\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027G\u0027:\n                index \u003d handleG(value, result, index, slavoGermanic);\n                break;\n            case \u0027H\u0027:\n                index \u003d handleH(value, result, index);\n                break;\n            case \u0027J\u0027:\n                index \u003d handleJ(value, result, index, slavoGermanic);\n                break;\n            case \u0027K\u0027:\n                result.append(\u0027K\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027K\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027L\u0027:\n                index \u003d handleL(value, result, index);\n                break;\n            case \u0027M\u0027:\n                result.append(\u0027M\u0027);\n                index \u003d conditionM0(value, index) ? index + 2 : index + 1;\n                break;\n            case \u0027N\u0027:\n                result.append(\u0027N\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027N\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027\\u00D1\u0027:\n                // N with a tilde (spanish ene)\n                result.append(\u0027N\u0027);\n                index++;\n                break;\n            case \u0027P\u0027:\n                index \u003d handleP(value, result, index);\n                break;\n            case \u0027Q\u0027:\n                result.append(\u0027K\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027Q\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027R\u0027:\n                index \u003d handleR(value, result, index, slavoGermanic);\n                break;\n            case \u0027S\u0027:\n                index \u003d handleS(value, result, index, slavoGermanic);\n                break;\n            case \u0027T\u0027:\n                index \u003d handleT(value, result, index);\n                break;\n            case \u0027V\u0027:\n                result.append(\u0027F\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027V\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027W\u0027:\n                index \u003d handleW(value, result, index);\n                break;\n            case \u0027X\u0027:\n                index \u003d handleX(value, result, index);\n                break;\n            case \u0027Z\u0027:\n                index \u003d handleZ(value, result, index, slavoGermanic);\n                break;\n            default:\n                index++;\n                break;\n            }\n        }\n\n        return alternate ? result.getAlternate() : result.getPrimary();\n    }",
    "begin_line": 85,
    "end_line": 190,
    "comment": "/** \n * Encode a value with Double Metaphone, optionally using the alternate encoding.\n * @param value String to encode\n * @param alternate use alternate encode\n * @return an encoded string\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.encode#201",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.encode(java.lang.Object)",
    "snippet": "@Override\n    public Object encode(final Object obj) throws EncoderException {\n        if (!(obj instanceof String)) {\n            throw new EncoderException(\"DoubleMetaphone encode parameter is not of type String\");\n        }\n        return doubleMetaphone((String) obj);\n    }",
    "begin_line": 201,
    "end_line": 206,
    "comment": "/** \n * Encode the value using DoubleMetaphone.  It will only work if \u003ccode\u003eobj\u003c/code\u003e is a \u003ccode\u003eString\u003c/code\u003e (like \u003ccode\u003eMetaphone\u003c/code\u003e).\n * @param obj Object to encode (should be of type String)\n * @return An encoded Object (will be of type String)\n * @throws EncoderException encode parameter is not of type String\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.encode#215",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.encode(java.lang.String)",
    "snippet": "@Override\n    public String encode(final String value) {\n        return doubleMetaphone(value);\n    }",
    "begin_line": 215,
    "end_line": 217,
    "comment": "/** \n * Encode the value using DoubleMetaphone.\n * @param value String to encode\n * @return An encoded String\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.isDoubleMetaphoneEqual#229",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String, java.lang.String)",
    "snippet": "public boolean isDoubleMetaphoneEqual(final String value1, final String value2) {\n        return isDoubleMetaphoneEqual(value1, value2, false);\n    }",
    "begin_line": 229,
    "end_line": 231,
    "comment": "/** \n * Check if the Double Metaphone values of two \u003ccode\u003eString\u003c/code\u003e values are equal.\n * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.\n * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.\n * @return {@code true} if the encoded \u003ccode\u003eString\u003c/code\u003es are equal;{@code false} otherwise.\n * @see #isDoubleMetaphoneEqual(String,String,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.isDoubleMetaphoneEqual#243",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String, java.lang.String, boolean)",
    "snippet": "public boolean isDoubleMetaphoneEqual(final String value1, final String value2, final boolean alternate) {\n        return doubleMetaphone(value1, alternate).equals(doubleMetaphone(value2, alternate));\n    }",
    "begin_line": 243,
    "end_line": 245,
    "comment": "/** \n * Check if the Double Metaphone values of two \u003ccode\u003eString\u003c/code\u003e values are equal, optionally using the alternate value.\n * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.\n * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.\n * @param alternate use the alternate value if {@code true}.\n * @return {@code true} if the encoded \u003ccode\u003eString\u003c/code\u003es are equal;{@code false} otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.getMaxCodeLen#251",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.getMaxCodeLen()",
    "snippet": "public int getMaxCodeLen() {\n        return this.maxCodeLen;\n    }",
    "begin_line": 251,
    "end_line": 253,
    "comment": "/** \n * Returns the maxCodeLen.\n * @return int\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.setMaxCodeLen#259",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.setMaxCodeLen(int)",
    "snippet": "public void setMaxCodeLen(final int maxCodeLen) {\n        this.maxCodeLen \u003d maxCodeLen;\n    }",
    "begin_line": 259,
    "end_line": 261,
    "comment": "/** \n * Sets the maxCodeLen.\n * @param maxCodeLen The maxCodeLen to set\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.handleAEIOUY#268",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.handleAEIOUY(org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)",
    "snippet": "private int handleAEIOUY(final DoubleMetaphoneResult result, final int index) {\n        if (index \u003d\u003d 0) {\n            result.append(\u0027A\u0027);\n        }\n        return index + 1;\n    }",
    "begin_line": 268,
    "end_line": 273,
    "comment": "/** \n * Handles \u0027A\u0027, \u0027E\u0027, \u0027I\u0027, \u0027O\u0027, \u0027U\u0027, and \u0027Y\u0027 cases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.handleC#278",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.handleC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)",
    "snippet": "private int handleC(final String value, final DoubleMetaphoneResult result, int index) {\n        if (conditionC0(value, index)) {  // very confusing, moved out\n            result.append(\u0027K\u0027);\n            index +\u003d 2;\n        } else if (index \u003d\u003d 0 \u0026\u0026 contains(value, index, 6, \"CAESAR\")) {\n            result.append(\u0027S\u0027);\n            index +\u003d 2;\n        } else if (contains(value, index, 2, \"CH\")) {\n            index \u003d handleCH(value, result, index);\n        } else if (contains(value, index, 2, \"CZ\") \u0026\u0026\n                   !contains(value, index - 2, 4, \"WICZ\")) {\n            //-- \"Czerny\" --//\n            result.append(\u0027S\u0027, \u0027X\u0027);\n            index +\u003d 2;\n        } else if (contains(value, index + 1, 3, \"CIA\")) {\n            //-- \"focaccia\" --//\n            result.append(\u0027X\u0027);\n            index +\u003d 3;\n        } else if (contains(value, index, 2, \"CC\") \u0026\u0026\n                   !(index \u003d\u003d 1 \u0026\u0026 charAt(value, 0) \u003d\u003d \u0027M\u0027)) {\n            //-- double \"cc\" but not \"McClelland\" --//\n            return handleCC(value, result, index);\n        } else if (contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n            result.append(\u0027K\u0027);\n            index +\u003d 2;\n        } else if (contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n            //-- Italian vs. English --//\n            if (contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n                result.append(\u0027S\u0027, \u0027X\u0027);\n            } else {\n                result.append(\u0027S\u0027);\n            }\n            index +\u003d 2;\n        } else {\n            result.append(\u0027K\u0027);\n            if (contains(value, index + 1, 2, \" C\", \" Q\", \" G\")) {\n                //-- Mac Caffrey, Mac Gregor --//\n                index +\u003d 3;\n            } else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") \u0026\u0026\n                       !contains(value, index + 1, 2, \"CE\", \"CI\")) {\n                index +\u003d 2;\n            } else {\n                index++;\n            }\n        }\n\n        return index;\n    }",
    "begin_line": 278,
    "end_line": 325,
    "comment": "/** \n * Handles \u0027C\u0027 cases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.handleCC#330",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.handleCC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)",
    "snippet": "private int handleCC(final String value, final DoubleMetaphoneResult result, int index) {\n        if (contains(value, index + 2, 1, \"I\", \"E\", \"H\") \u0026\u0026\n            !contains(value, index + 2, 2, \"HU\")) {\n            //-- \"bellocchio\" but not \"bacchus\" --//\n            if ((index \u003d\u003d 1 \u0026\u0026 charAt(value, index - 1) \u003d\u003d \u0027A\u0027) ||\n                contains(value, index - 1, 5, \"UCCEE\", \"UCCES\")) {\n                //-- \"accident\", \"accede\", \"succeed\" --//\n                result.append(\"KS\");\n            } else {\n                //-- \"bacci\", \"bertucci\", other Italian --//\n                result.append(\u0027X\u0027);\n            }\n            index +\u003d 3;\n        } else {    // Pierce\u0027s rule\n            result.append(\u0027K\u0027);\n            index +\u003d 2;\n        }\n\n        return index;\n    }",
    "begin_line": 330,
    "end_line": 349,
    "comment": "/** \n * Handles \u0027CC\u0027 cases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.handleCH#354",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.handleCH(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)",
    "snippet": "private int handleCH(final String value, final DoubleMetaphoneResult result, final int index) {\n        if (index \u003e 0 \u0026\u0026 contains(value, index, 4, \"CHAE\")) {   // Michael\n            result.append(\u0027K\u0027, \u0027X\u0027);\n            return index + 2;\n        } else if (conditionCH0(value, index)) {\n            //-- Greek roots (\"chemistry\", \"chorus\", etc.) --//\n            result.append(\u0027K\u0027);\n            return index + 2;\n        } else if (conditionCH1(value, index)) {\n            //-- Germanic, Greek, or otherwise \u0027ch\u0027 for \u0027kh\u0027 sound --//\n            result.append(\u0027K\u0027);\n            return index + 2;\n        } else {\n            if (index \u003e 0) {\n                if (contains(value, 0, 2, \"MC\")) {\n                    result.append(\u0027K\u0027);\n                } else {\n                    result.append(\u0027X\u0027, \u0027K\u0027);\n                }\n            } else {\n                result.append(\u0027X\u0027);\n            }\n            return index + 2;\n        }\n    }",
    "begin_line": 354,
    "end_line": 378,
    "comment": "/** \n * Handles \u0027CH\u0027 cases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.handleD#383",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.handleD(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)",
    "snippet": "private int handleD(final String value, final DoubleMetaphoneResult result, int index) {\n        if (contains(value, index, 2, \"DG\")) {\n            //-- \"Edge\" --//\n            if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\")) {\n                result.append(\u0027J\u0027);\n                index +\u003d 3;\n                //-- \"Edgar\" --//\n            } else {\n                result.append(\"TK\");\n                index +\u003d 2;\n            }\n        } else if (contains(value, index, 2, \"DT\", \"DD\")) {\n            result.append(\u0027T\u0027);\n            index +\u003d 2;\n        } else {\n            result.append(\u0027T\u0027);\n            index++;\n        }\n        return index;\n    }",
    "begin_line": 383,
    "end_line": 402,
    "comment": "/** \n * Handles \u0027D\u0027 cases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.handleG#407",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.handleG(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int, boolean)",
    "snippet": "private int handleG(final String value, final DoubleMetaphoneResult result, int index,\n                        final boolean slavoGermanic) {\n        if (charAt(value, index + 1) \u003d\u003d \u0027H\u0027) {\n            index \u003d handleGH(value, result, index);\n        } else if (charAt(value, index + 1) \u003d\u003d \u0027N\u0027) {\n            if (index \u003d\u003d 1 \u0026\u0026 isVowel(charAt(value, 0)) \u0026\u0026 !slavoGermanic) {\n                result.append(\"KN\", \"N\");\n            } else if (!contains(value, index + 2, 2, \"EY\") \u0026\u0026\n                       charAt(value, index + 1) !\u003d \u0027Y\u0027 \u0026\u0026 !slavoGermanic) {\n                result.append(\"N\", \"KN\");\n            } else {\n                result.append(\"KN\");\n            }\n            index \u003d index + 2;\n        } else if (contains(value, index + 1, 2, \"LI\") \u0026\u0026 !slavoGermanic) {\n            result.append(\"KL\", \"L\");\n            index +\u003d 2;\n        } else if (index \u003d\u003d 0 \u0026\u0026\n                   (charAt(value, index + 1) \u003d\u003d \u0027Y\u0027 ||\n                    contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n            //-- -ges-, -gep-, -gel-, -gie- at beginning --//\n            result.append(\u0027K\u0027, \u0027J\u0027);\n            index +\u003d 2;\n        } else if ((contains(value, index + 1, 2, \"ER\") ||\n                    charAt(value, index + 1) \u003d\u003d \u0027Y\u0027) \u0026\u0026\n                   !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") \u0026\u0026\n                   !contains(value, index - 1, 1, \"E\", \"I\") \u0026\u0026\n                   !contains(value, index - 1, 3, \"RGY\", \"OGY\")) {\n            //-- -ger-, -gy- --//\n            result.append(\u0027K\u0027, \u0027J\u0027);\n            index +\u003d 2;\n        } else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") ||\n                   contains(value, index - 1, 4, \"AGGI\", \"OGGI\")) {\n            //-- Italian \"biaggi\" --//\n            if (contains(value, 0 ,4, \"VAN \", \"VON \") ||\n                contains(value, 0, 3, \"SCH\") ||\n                contains(value, index + 1, 2, \"ET\")) {\n                //-- obvious germanic --//\n                result.append(\u0027K\u0027);\n            } else if (contains(value, index + 1, 3, \"IER\")) {\n                result.append(\u0027J\u0027);\n            } else {\n                result.append(\u0027J\u0027, \u0027K\u0027);\n            }\n            index +\u003d 2;\n        } else if (charAt(value, index + 1) \u003d\u003d \u0027G\u0027) {\n            index +\u003d 2;\n            result.append(\u0027K\u0027);\n        } else {\n            index++;\n            result.append(\u0027K\u0027);\n        }\n        return index;\n    }",
    "begin_line": 407,
    "end_line": 460,
    "comment": "/** \n * Handles \u0027G\u0027 cases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.handleGH#465",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.handleGH(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)",
    "snippet": "private int handleGH(final String value, final DoubleMetaphoneResult result, int index) {\n        if (index \u003e 0 \u0026\u0026 !isVowel(charAt(value, index - 1))) {\n            result.append(\u0027K\u0027);\n            index +\u003d 2;\n        } else if (index \u003d\u003d 0) {\n            if (charAt(value, index + 2) \u003d\u003d \u0027I\u0027) {\n                result.append(\u0027J\u0027);\n            } else {\n                result.append(\u0027K\u0027);\n            }\n            index +\u003d 2;\n        } else if ((index \u003e 1 \u0026\u0026 contains(value, index - 2, 1, \"B\", \"H\", \"D\")) ||\n                   (index \u003e 2 \u0026\u0026 contains(value, index - 3, 1, \"B\", \"H\", \"D\")) ||\n                   (index \u003e 3 \u0026\u0026 contains(value, index - 4, 1, \"B\", \"H\"))) {\n            //-- Parker\u0027s rule (with some further refinements) - \"hugh\"\n            index +\u003d 2;\n        } else {\n            if (index \u003e 2 \u0026\u0026 charAt(value, index - 1) \u003d\u003d \u0027U\u0027 \u0026\u0026\n                contains(value, index - 3, 1, \"C\", \"G\", \"L\", \"R\", \"T\")) {\n                //-- \"laugh\", \"McLaughlin\", \"cough\", \"gough\", \"rough\", \"tough\"\n                result.append(\u0027F\u0027);\n            } else if (index \u003e 0 \u0026\u0026 charAt(value, index - 1) !\u003d \u0027I\u0027) {\n                result.append(\u0027K\u0027);\n            }\n            index +\u003d 2;\n        }\n        return index;\n    }",
    "begin_line": 465,
    "end_line": 492,
    "comment": "/** \n * Handles \u0027GH\u0027 cases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.handleH#497",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.handleH(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)",
    "snippet": "private int handleH(final String value, final DoubleMetaphoneResult result, int index) {\n        //-- only keep if first \u0026 before vowel or between 2 vowels --//\n        if ((index \u003d\u003d 0 || isVowel(charAt(value, index - 1))) \u0026\u0026\n            isVowel(charAt(value, index + 1))) {\n            result.append(\u0027H\u0027);\n            index +\u003d 2;\n            //-- also takes car of \"HH\" --//\n        } else {\n            index++;\n        }\n        return index;\n    }",
    "begin_line": 497,
    "end_line": 508,
    "comment": "/** \n * Handles \u0027H\u0027 cases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.handleJ#513",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.handleJ(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int, boolean)",
    "snippet": "private int handleJ(final String value, final DoubleMetaphoneResult result, int index,\n                        final boolean slavoGermanic) {\n        if (contains(value, index, 4, \"JOSE\") || contains(value, 0, 4, \"SAN \")) {\n                //-- obvious Spanish, \"Jose\", \"San Jacinto\" --//\n                if ((index \u003d\u003d 0 \u0026\u0026 (charAt(value, index + 4) \u003d\u003d \u0027 \u0027) ||\n                     value.length() \u003d\u003d 4) || contains(value, 0, 4, \"SAN \")) {\n                    result.append(\u0027H\u0027);\n                } else {\n                    result.append(\u0027J\u0027, \u0027H\u0027);\n                }\n                index++;\n            } else {\n                if (index \u003d\u003d 0 \u0026\u0026 !contains(value, index, 4, \"JOSE\")) {\n                    result.append(\u0027J\u0027, \u0027A\u0027);\n                } else if (isVowel(charAt(value, index - 1)) \u0026\u0026 !slavoGermanic \u0026\u0026\n                           (charAt(value, index + 1) \u003d\u003d \u0027A\u0027 || charAt(value, index + 1) \u003d\u003d \u0027O\u0027)) {\n                    result.append(\u0027J\u0027, \u0027H\u0027);\n                } else if (index \u003d\u003d value.length() - 1) {\n                    result.append(\u0027J\u0027, \u0027 \u0027);\n                } else if (!contains(value, index + 1, 1, L_T_K_S_N_M_B_Z) \u0026\u0026\n                           !contains(value, index - 1, 1, \"S\", \"K\", \"L\")) {\n                    result.append(\u0027J\u0027);\n                }\n\n                if (charAt(value, index + 1) \u003d\u003d \u0027J\u0027) {\n                    index +\u003d 2;\n                } else {\n                    index++;\n                }\n            }\n        return index;\n    }",
    "begin_line": 513,
    "end_line": 544,
    "comment": "/** \n * Handles \u0027J\u0027 cases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.handleL#549",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.handleL(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)",
    "snippet": "private int handleL(final String value, final DoubleMetaphoneResult result, int index) {\n        if (charAt(value, index + 1) \u003d\u003d \u0027L\u0027) {\n            if (conditionL0(value, index)) {\n                result.appendPrimary(\u0027L\u0027);\n            } else {\n                result.append(\u0027L\u0027);\n            }\n            index +\u003d 2;\n        } else {\n            index++;\n            result.append(\u0027L\u0027);\n        }\n        return index;\n    }",
    "begin_line": 549,
    "end_line": 562,
    "comment": "/** \n * Handles \u0027L\u0027 cases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.handleP#567",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.handleP(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)",
    "snippet": "private int handleP(final String value, final DoubleMetaphoneResult result, int index) {\n        if (charAt(value, index + 1) \u003d\u003d \u0027H\u0027) {\n            result.append(\u0027F\u0027);\n            index +\u003d 2;\n        } else {\n            result.append(\u0027P\u0027);\n            index \u003d contains(value, index + 1, 1, \"P\", \"B\") ? index + 2 : index + 1;\n        }\n        return index;\n    }",
    "begin_line": 567,
    "end_line": 576,
    "comment": "/** \n * Handles \u0027P\u0027 cases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.handleR#581",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.handleR(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int, boolean)",
    "snippet": "private int handleR(final String value, final DoubleMetaphoneResult result, final int index,\n                        final boolean slavoGermanic) {\n        if (index \u003d\u003d value.length() - 1 \u0026\u0026 !slavoGermanic \u0026\u0026\n            contains(value, index - 2, 2, \"IE\") \u0026\u0026\n            !contains(value, index - 4, 2, \"ME\", \"MA\")) {\n            result.appendAlternate(\u0027R\u0027);\n        } else {\n            result.append(\u0027R\u0027);\n        }\n        return charAt(value, index + 1) \u003d\u003d \u0027R\u0027 ? index + 2 : index + 1;\n    }",
    "begin_line": 581,
    "end_line": 591,
    "comment": "/** \n * Handles \u0027R\u0027 cases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.handleS#596",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.handleS(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int, boolean)",
    "snippet": "private int handleS(final String value, final DoubleMetaphoneResult result, int index,\n                        final boolean slavoGermanic) {\n        if (contains(value, index - 1, 3, \"ISL\", \"YSL\")) {\n            //-- special cases \"island\", \"isle\", \"carlisle\", \"carlysle\" --//\n            index++;\n        } else if (index \u003d\u003d 0 \u0026\u0026 contains(value, index, 5, \"SUGAR\")) {\n            //-- special case \"sugar-\" --//\n            result.append(\u0027X\u0027, \u0027S\u0027);\n            index++;\n        } else if (contains(value, index, 2, \"SH\")) {\n            if (contains(value, index + 1, 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n                //-- germanic --//\n                result.append(\u0027S\u0027);\n            } else {\n                result.append(\u0027X\u0027);\n            }\n            index +\u003d 2;\n        } else if (contains(value, index, 3, \"SIO\", \"SIA\") || contains(value, index, 4, \"SIAN\")) {\n            //-- Italian and Armenian --//\n            if (slavoGermanic) {\n                result.append(\u0027S\u0027);\n            } else {\n                result.append(\u0027S\u0027, \u0027X\u0027);\n            }\n            index +\u003d 3;\n        } else if ((index \u003d\u003d 0 \u0026\u0026 contains(value, index + 1, 1, \"M\", \"N\", \"L\", \"W\")) ||\n                   contains(value, index + 1, 1, \"Z\")) {\n            //-- german \u0026 anglicisations, e.g. \"smith\" match \"schmidt\" //\n            // \"snider\" match \"schneider\" --//\n            //-- also, -sz- in slavic language although in hungarian it //\n            //   is pronounced \"s\" --//\n            result.append(\u0027S\u0027, \u0027X\u0027);\n            index \u003d contains(value, index + 1, 1, \"Z\") ? index + 2 : index + 1;\n        } else if (contains(value, index, 2, \"SC\")) {\n            index \u003d handleSC(value, result, index);\n        } else {\n            if (index \u003d\u003d value.length() - 1 \u0026\u0026 contains(value, index - 2, 2, \"AI\", \"OI\")) {\n                //-- french e.g. \"resnais\", \"artois\" --//\n                result.appendAlternate(\u0027S\u0027);\n            } else {\n                result.append(\u0027S\u0027);\n            }\n            index \u003d contains(value, index + 1, 1, \"S\", \"Z\") ? index + 2 : index + 1;\n        }\n        return index;\n    }",
    "begin_line": 596,
    "end_line": 641,
    "comment": "/** \n * Handles \u0027S\u0027 cases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.handleSC#646",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.handleSC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)",
    "snippet": "private int handleSC(final String value, final DoubleMetaphoneResult result, final int index) {\n        if (charAt(value, index + 2) \u003d\u003d \u0027H\u0027) {\n            //-- Schlesinger\u0027s rule --//\n            if (contains(value, index + 3, 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n                //-- Dutch origin, e.g. \"school\", \"schooner\" --//\n                if (contains(value, index + 3, 2, \"ER\", \"EN\")) {\n                    //-- \"schermerhorn\", \"schenker\" --//\n                    result.append(\"X\", \"SK\");\n                } else {\n                    result.append(\"SK\");\n                }\n            } else {\n                if (index \u003d\u003d 0 \u0026\u0026 !isVowel(charAt(value, 3)) \u0026\u0026 charAt(value, 3) !\u003d \u0027W\u0027) {\n                    result.append(\u0027X\u0027, \u0027S\u0027);\n                } else {\n                    result.append(\u0027X\u0027);\n                }\n            }\n        } else if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\")) {\n            result.append(\u0027S\u0027);\n        } else {\n            result.append(\"SK\");\n        }\n        return index + 3;\n    }",
    "begin_line": 646,
    "end_line": 670,
    "comment": "/** \n * Handles \u0027SC\u0027 cases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.handleT#675",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.handleT(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)",
    "snippet": "private int handleT(final String value, final DoubleMetaphoneResult result, int index) {\n        if (contains(value, index, 4, \"TION\")) {\n            result.append(\u0027X\u0027);\n            index +\u003d 3;\n        } else if (contains(value, index, 3, \"TIA\", \"TCH\")) {\n            result.append(\u0027X\u0027);\n            index +\u003d 3;\n        } else if (contains(value, index, 2, \"TH\") || contains(value, index, 3, \"TTH\")) {\n            if (contains(value, index + 2, 2, \"OM\", \"AM\") ||\n                //-- special case \"thomas\", \"thames\" or germanic --//\n                contains(value, 0, 4, \"VAN \", \"VON \") ||\n                contains(value, 0, 3, \"SCH\")) {\n                result.append(\u0027T\u0027);\n            } else {\n                result.append(\u00270\u0027, \u0027T\u0027);\n            }\n            index +\u003d 2;\n        } else {\n            result.append(\u0027T\u0027);\n            index \u003d contains(value, index + 1, 1, \"T\", \"D\") ? index + 2 : index + 1;\n        }\n        return index;\n    }",
    "begin_line": 675,
    "end_line": 697,
    "comment": "/** \n * Handles \u0027T\u0027 cases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.handleW#702",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.handleW(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)",
    "snippet": "private int handleW(final String value, final DoubleMetaphoneResult result, int index) {\n        if (contains(value, index, 2, \"WR\")) {\n            //-- can also be in middle of word --//\n            result.append(\u0027R\u0027);\n            index +\u003d 2;\n        } else {\n            if (index \u003d\u003d 0 \u0026\u0026 (isVowel(charAt(value, index + 1)) ||\n                               contains(value, index, 2, \"WH\"))) {\n                if (isVowel(charAt(value, index + 1))) {\n                    //-- Wasserman should match Vasserman --//\n                    result.append(\u0027A\u0027, \u0027F\u0027);\n                } else {\n                    //-- need Uomo to match Womo --//\n                    result.append(\u0027A\u0027);\n                }\n                index++;\n            } else if ((index \u003d\u003d value.length() - 1 \u0026\u0026 isVowel(charAt(value, index - 1))) ||\n                       contains(value, index - 1, 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\") ||\n                       contains(value, 0, 3, \"SCH\")) {\n                //-- Arnow should match Arnoff --//\n                result.appendAlternate(\u0027F\u0027);\n                index++;\n            } else if (contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n                //-- Polish e.g. \"filipowicz\" --//\n                result.append(\"TS\", \"FX\");\n                index +\u003d 4;\n            } else {\n                index++;\n            }\n        }\n        return index;\n    }",
    "begin_line": 702,
    "end_line": 733,
    "comment": "/** \n * Handles \u0027W\u0027 cases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.handleX#738",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.handleX(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)",
    "snippet": "private int handleX(final String value, final DoubleMetaphoneResult result, int index) {\n        if (index \u003d\u003d 0) {\n            result.append(\u0027S\u0027);\n            index++;\n        } else {\n            if (!((index \u003d\u003d value.length() - 1) \u0026\u0026\n                  (contains(value, index - 3, 3, \"IAU\", \"EAU\") ||\n                   contains(value, index - 2, 2, \"AU\", \"OU\")))) {\n                //-- French e.g. breaux --//\n                result.append(\"KS\");\n            }\n            index \u003d contains(value, index + 1, 1, \"C\", \"X\") ? index + 2 : index + 1;\n        }\n        return index;\n    }",
    "begin_line": 738,
    "end_line": 752,
    "comment": "/** \n * Handles \u0027X\u0027 cases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.handleZ#757",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.handleZ(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int, boolean)",
    "snippet": "private int handleZ(final String value, final DoubleMetaphoneResult result, int index,\n                        final boolean slavoGermanic) {\n        if (charAt(value, index + 1) \u003d\u003d \u0027H\u0027) {\n            //-- Chinese pinyin e.g. \"zhao\" or Angelina \"Zhang\" --//\n            result.append(\u0027J\u0027);\n            index +\u003d 2;\n        } else {\n            if (contains(value, index + 1, 2, \"ZO\", \"ZI\", \"ZA\") ||\n                (slavoGermanic \u0026\u0026 (index \u003e 0 \u0026\u0026 charAt(value, index - 1) !\u003d \u0027T\u0027))) {\n                result.append(\"S\", \"TS\");\n            } else {\n                result.append(\u0027S\u0027);\n            }\n            index \u003d charAt(value, index + 1) \u003d\u003d \u0027Z\u0027 ? index + 2 : index + 1;\n        }\n        return index;\n    }",
    "begin_line": 757,
    "end_line": 773,
    "comment": "/** \n * Handles \u0027Z\u0027 cases.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.conditionC0#780",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.conditionC0(java.lang.String, int)",
    "snippet": "private boolean conditionC0(final String value, final int index) {\n        if (contains(value, index, 4, \"CHIA\")) {\n            return true;\n        } else if (index \u003c\u003d 1) {\n            return false;\n        } else if (isVowel(charAt(value, index - 2))) {\n            return false;\n        } else if (!contains(value, index - 1, 3, \"ACH\")) {\n            return false;\n        } else {\n            final char c \u003d charAt(value, index + 2);\n            return (c !\u003d \u0027I\u0027 \u0026\u0026 c !\u003d \u0027E\u0027) ||\n                    contains(value, index - 2, 6, \"BACHER\", \"MACHER\");\n        }\n    }",
    "begin_line": 780,
    "end_line": 794,
    "comment": "/** \n * Complex condition 0 for \u0027C\u0027.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.conditionCH0#799",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.conditionCH0(java.lang.String, int)",
    "snippet": "private boolean conditionCH0(final String value, final int index) {\n        if (index !\u003d 0) {\n            return false;\n        } else if (!contains(value, index + 1, 5, \"HARAC\", \"HARIS\") \u0026\u0026\n                   !contains(value, index + 1, 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")) {\n            return false;\n        } else if (contains(value, 0, 5, \"CHORE\")) {\n            return false;\n        } else {\n            return true;\n        }\n    }",
    "begin_line": 799,
    "end_line": 810,
    "comment": "/** \n * Complex condition 0 for \u0027CH\u0027.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.conditionCH1#815",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.conditionCH1(java.lang.String, int)",
    "snippet": "private boolean conditionCH1(final String value, final int index) {\n        return ((contains(value, 0, 4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) ||\n                contains(value, index - 2, 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\") ||\n                contains(value, index + 2, 1, \"T\", \"S\") ||\n                ((contains(value, index - 1, 1, \"A\", \"O\", \"U\", \"E\") || index \u003d\u003d 0) \u0026\u0026\n                 (contains(value, index + 2, 1, L_R_N_M_B_H_F_V_W_SPACE) || index + 1 \u003d\u003d value.length() - 1)));\n    }",
    "begin_line": 815,
    "end_line": 821,
    "comment": "/** \n * Complex condition 1 for \u0027CH\u0027.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.conditionL0#826",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.conditionL0(java.lang.String, int)",
    "snippet": "private boolean conditionL0(final String value, final int index) {\n        if (index \u003d\u003d value.length() - 3 \u0026\u0026\n            contains(value, index - 1, 4, \"ILLO\", \"ILLA\", \"ALLE\")) {\n            return true;\n        } else if ((contains(value, value.length() - 2, 2, \"AS\", \"OS\") ||\n                    contains(value, value.length() - 1, 1, \"A\", \"O\")) \u0026\u0026\n                   contains(value, index - 1, 4, \"ALLE\")) {\n            return true;\n        } else {\n            return false;\n        }\n    }",
    "begin_line": 826,
    "end_line": 837,
    "comment": "/** \n * Complex condition 0 for \u0027L\u0027.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.conditionM0#842",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.conditionM0(java.lang.String, int)",
    "snippet": "private boolean conditionM0(final String value, final int index) {\n        if (charAt(value, index + 1) \u003d\u003d \u0027M\u0027) {\n            return true;\n        }\n        return contains(value, index - 1, 3, \"UMB\") \u0026\u0026\n               ((index + 1) \u003d\u003d value.length() - 1 || contains(value, index + 2, 2, \"ER\"));\n    }",
    "begin_line": 842,
    "end_line": 848,
    "comment": "/** \n * Complex condition 0 for \u0027M\u0027.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.isSlavoGermanic#856",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.isSlavoGermanic(java.lang.String)",
    "snippet": "private boolean isSlavoGermanic(final String value) {\n        return value.indexOf(\u0027W\u0027) \u003e -1 || value.indexOf(\u0027K\u0027) \u003e -1 ||\n            value.indexOf(\"CZ\") \u003e -1 || value.indexOf(\"WITZ\") \u003e -1;\n    }",
    "begin_line": 856,
    "end_line": 859,
    "comment": "/** \n * Determines whether or not a value is of slavo-germanic origin. A value is of slavo-germanic origin if it contians any of \u0027W\u0027, \u0027K\u0027, \u0027CZ\u0027, or \u0027WITZ\u0027.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.isVowel#864",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.isVowel(char)",
    "snippet": "private boolean isVowel(final char ch) {\n        return VOWELS.indexOf(ch) !\u003d -1;\n    }",
    "begin_line": 864,
    "end_line": 866,
    "comment": "/** \n * Determines whether or not a character is a vowel or not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.isSilentStart#873",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.isSilentStart(java.lang.String)",
    "snippet": "private boolean isSilentStart(final String value) {\n        boolean result \u003d false;\n        for (final String element : SILENT_START) {\n            if (value.startsWith(element)) {\n                result \u003d true;\n                break;\n            }\n        }\n        return result;\n    }",
    "begin_line": 873,
    "end_line": 882,
    "comment": "/** \n * Determines whether or not the value starts with a silent letter.  It will return  {@code true} if the value starts with any of \u0027GN\u0027, \u0027KN\u0027,\u0027PN\u0027, \u0027WR\u0027 or \u0027PS\u0027.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.cleanInput#887",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.cleanInput(java.lang.String)",
    "snippet": "private String cleanInput(String input) {\n        if (input \u003d\u003d null) {\n            return null;\n        }\n        input \u003d input.trim();\n        if (input.length() \u003d\u003d 0) {\n            return null;\n        }\n        return input.toUpperCase(java.util.Locale.ENGLISH);\n    }",
    "begin_line": 887,
    "end_line": 896,
    "comment": "/** \n * Cleans the input.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.charAt#903",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, int)",
    "snippet": "protected char charAt(final String value, final int index) {\n        if (index \u003c 0 || index \u003e\u003d value.length()) {\n            return Character.MIN_VALUE;\n        }\n        return value.charAt(index);\n    }",
    "begin_line": 903,
    "end_line": 908,
    "comment": "/** \n * Gets the character at index \u003ccode\u003eindex\u003c/code\u003e if available, otherwise it returns \u003ccode\u003eCharacter.MIN_VALUE\u003c/code\u003e so that there is some sort of a default.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphone.contains#914",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, int, java.lang.String)",
    "snippet": "protected static boolean contains(final String value, final int start, final int length,\n                                      final String... criteria) {\n        boolean result \u003d false;\n        if (start \u003e\u003d 0 \u0026\u0026 start + length \u003c\u003d value.length()) {\n            final String target \u003d value.substring(start, start + length);\n\n            for (final String element : criteria) {\n                if (target.equals(element)) {\n                    result \u003d true;\n                    break;\n                }\n            }\n        }\n        return result;\n    }",
    "begin_line": 914,
    "end_line": 928,
    "comment": "/** \n * Determines whether \u003ccode\u003evalue\u003c/code\u003e contains any of the criteria starting at index \u003ccode\u003estart\u003c/code\u003e and matching up to length \u003ccode\u003elength\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphoneResult.DoubleMetaphoneResult#941",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult(int)",
    "snippet": "public DoubleMetaphoneResult(final int maxLength) {\n            this.maxLength \u003d maxLength;\n        }",
    "begin_line": 941,
    "end_line": 943,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphoneResult.append#945",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.append(char)",
    "snippet": "public void append(final char value) {\n            appendPrimary(value);\n            appendAlternate(value);\n        }",
    "begin_line": 945,
    "end_line": 948,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphoneResult.append#950",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.append(char, char)",
    "snippet": "public void append(final char primary, final char alternate) {\n            appendPrimary(primary);\n            appendAlternate(alternate);\n        }",
    "begin_line": 950,
    "end_line": 953,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphoneResult.appendPrimary#955",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.appendPrimary(char)",
    "snippet": "public void appendPrimary(final char value) {\n            if (this.primary.length() \u003c this.maxLength) {\n                this.primary.append(value);\n            }\n        }",
    "begin_line": 955,
    "end_line": 959,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphoneResult.appendAlternate#961",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.appendAlternate(char)",
    "snippet": "public void appendAlternate(final char value) {\n            if (this.alternate.length() \u003c this.maxLength) {\n                this.alternate.append(value);\n            }\n        }",
    "begin_line": 961,
    "end_line": 965,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphoneResult.append#967",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.append(java.lang.String)",
    "snippet": "public void append(final String value) {\n            appendPrimary(value);\n            appendAlternate(value);\n        }",
    "begin_line": 967,
    "end_line": 970,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphoneResult.append#972",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.append(java.lang.String, java.lang.String)",
    "snippet": "public void append(final String primary, final String alternate) {\n            appendPrimary(primary);\n            appendAlternate(alternate);\n        }",
    "begin_line": 972,
    "end_line": 975,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphoneResult.appendPrimary#977",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.appendPrimary(java.lang.String)",
    "snippet": "public void appendPrimary(final String value) {\n            final int addChars \u003d this.maxLength - this.primary.length();\n            if (value.length() \u003c\u003d addChars) {\n                this.primary.append(value);\n            } else {\n                this.primary.append(value.substring(0, addChars));\n            }\n        }",
    "begin_line": 977,
    "end_line": 984,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphoneResult.appendAlternate#986",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.appendAlternate(java.lang.String)",
    "snippet": "public void appendAlternate(final String value) {\n            final int addChars \u003d this.maxLength - this.alternate.length();\n            if (value.length() \u003c\u003d addChars) {\n                this.alternate.append(value);\n            } else {\n                this.alternate.append(value.substring(0, addChars));\n            }\n        }",
    "begin_line": 986,
    "end_line": 993,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphoneResult.getPrimary#995",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.getPrimary()",
    "snippet": "public String getPrimary() {\n            return this.primary.toString();\n        }",
    "begin_line": 995,
    "end_line": 997,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphoneResult.getAlternate#999",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.getAlternate()",
    "snippet": "public String getAlternate() {\n            return this.alternate.toString();\n        }",
    "begin_line": 999,
    "end_line": 1001,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleMetaphoneResult.isComplete#1003",
    "is_bug": true,
    "src_path": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "class_name": "org.apache.commons.codec.language.DoubleMetaphone",
    "signature": "org.apache.commons.codec.language.DoubleMetaphone.isComplete()",
    "snippet": "public boolean isComplete() {\n            return this.primary.length() \u003e\u003d this.maxLength \u0026\u0026\n                   this.alternate.length() \u003e\u003d this.maxLength;\n        }",
    "begin_line": 1003,
    "end_line": 1006,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]